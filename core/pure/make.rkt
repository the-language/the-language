#lang rash
;; in-dir is in the demo file still
(require rash/demo/setup)
(require make)
(require racket)

(define (id x) x)
(define ++ string-append)
(define (apply-++ x) (apply ++ x))
(define (string->lines x) (string-split x "\n"))
(define (lines->string x) (apply-++ (map (lambda (x) (++ x"\n")) x)))

(define c-copyright "/*
    The Language
    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
")
(define haskell-copyright "
--    The Language
--    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

--    This program is free software: you can redistribute it and/or modify
--    it under the terms of the GNU Affero General Public License as published
--    by the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.

--    This program is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU Affero General Public License for more details.

--    You should have received a copy of the GNU Affero General Public License
--    along with this program.  If not, see <https://www.gnu.org/licenses/>.

")
(define c-generatedby "/* Generated by make.rkt */\n")
(define haskell-generatedby "-- Generated by make.rkt\n")
(define bash-generatedby "# Generated by make.rkt\n")
(define (ecmascript/exports.list-parse) (filter-not (lambda (x) (equal? x "")) (string->lines #{cat ../ecmascript/exports.list})))


(define eval-ns (make-base-namespace))
(eval '(require racket) eval-ns)
(define (eval-str-sandbox x) (eval (read (open-input-string x)) eval-ns))
(define (run-racket-code-generators->lines lines)
    (match lines
        [(list
            head-other-lines ...
            (and head-c-line (regexp #rx"^ */\\* *!!!Racket +Code +Generator!!!(.*)$" (list _ head-c)))
            (and (not (regexp #rx"\\*/")) c-lines) ...
            (and tail-c-line (regexp #rx"^(.*)\\*/ *$" (list _ tail-c)))
            (and head-g-line (regexp #rx"^ *// *!!!Generated +by +Racket!!! +!!!BEGIN!!!$"))
            (not (regexp #rx"!!!Generated +by +Racket!!! +!!!")) ...
            (and tail-g-line (regexp #rx"^ *// *!!!Generated +by +Racket!!! +!!!END!!!$"))
            tail-other-lines ...
            )
         (define code (++ "(begin\n" head-c (lines->string c-lines) tail-c "\n)"))
         (append
                (run-racket-code-generators->lines head-other-lines)
                (list head-c-line)
                c-lines
                (list tail-c-line)
                (list head-g-line)
                (list (eval-str-sandbox code))
                (list tail-g-line)
                (run-racket-code-generators->lines tail-other-lines)
                )]
        [x x])
  )


(define-syntax-rule (define-make++ self write-id (pre-src pre-id pre-dep) main-id pre ((name (depend ...) code) ...))
  (begin
    (define (write-id Makefile)
      (define mkfile
        (string-append
         (string-append
          name ":" (string-append " " depend) ...
          "\n\tracket "Makefile".domake.rkt "name"\n\n"
          ) ...
         pre-src": "(apply string-append (add-between pre-dep " "))"\n\tracket "Makefile".premake.rkt\n"))
      (display-to-file mkfile Makefile #:exists 'replace)
      (display-to-file (string-append"#lang racket\n(require \""self"\")\n("(symbol->string 'pre-id)")") (string-append Makefile".premake.rkt") #:exists 'replace)
      (display-to-file (string-append"#lang racket\n(require \""self"\")\n("(symbol->string 'main-id)" (current-command-line-arguments))") (string-append Makefile".domake.rkt") #:exists 'replace))
    (define (pre-id) pre)
    (define (main-id cmd) (make ((name (depend ...) code) ...) cmd))))

;; (do-make (current-command-line-arguments))
(provide write-Makefile pre-do-make do-make)
(define (mk-ts-files d) (sort (filter (match-lambda [(regexp #rx".*\\.ts$") #t] [_ #f]) (map path->string (directory-list (string-append d "lang.ts.d") #:build? #t))) string<?))
(define ts-files-root (mk-ts-files "typescript/"))
(define-make++ "make.rkt" write-Makefile ("typescript/lang.ts" pre-do-make ts-files-root) do-make
    (make/proc `(("typescript/lang.ts" (,@ts-files-root) ,(lambda () (in-dir "typescript" {
        (define ts-files (mk-ts-files ""))
        (for ([file ts-files]) {
            (define tmpfile (path->string (make-temporary-file "rkttmp~a.ts")))
            |> lines->string (run-racket-code-generators->lines (string->lines #{cat (id file)})) &>! (id tmpfile)
            mv (id tmpfile) (id file)
        })
        |> id "" &>! lang.ts
        (for ([file ts-files]) {
            cat (id file) &>> lang.ts
            echo &>> lang.ts
        })
    })))))
    (("all" ("ecmascript/lang.min.js"
             "ecmascript/lang.js"
             "ecmascript/lang.min.2.js"
             "lua/lang.lua"
             "lua/lang_min.lua"
             "ecmascript6/lang.js"
             ;;"python2/lang.py";;暫停。因爲性能太差。
             ;;"python3/lang.py";;暫停。因爲性能太差。
             ;;"go/src";;暫停。因爲Lua解釋器的BUG。
             "php/lang.php"
             "java/src"
             "c/lang.h"
             "c/lang.c"
             "c/lang.o"
             "c/liblang.so"
             "c/liblang.a")
            (void))
     ("ecmascript/exports.list" ("ecmascript/lang.min.js") (void)) ;; 生成代碼寫在"ecmascript/lang.js生成裡
     ("ecmascript/node_modules" ("ecmascript/yarn.lock") { in-dir "ecmascript" { ;; 避免竞争状态
         yarn
         touch node_modules/
     }})
     ("ecmascript/lang.min.js" ("ecmascript/node_modules" "typescript/lang.ts") {
        in-dir "ecmascript" {
            npx tsickle --typed
            (define raw (match (string->lines #{cat langraw.js})
                          [(list _ ... "goog.module('_..langraw');" "var module = module || { id: '' };" "exports.__esModule = true;" rest ...) (lines->string rest)]))
            |> id raw &>! langraw.js
            (define exports (string->lines #{grep (id "^exports.*=") langraw.js | sed (id "s|^exports\\.\\([^ ]*\\).*$|\\1|")}))
            |> ++ "var exports = {};\n" (apply-++ (map (lambda (x) (++ "exports."x"='something';\n")) exports)) &>! lang.externs.js
            java -jar ./node_modules/google-closure-compiler-java/compiler.jar --assume_function_wrapper --language_out ECMASCRIPT3 --js langraw.js --externs lang.externs.js -O ADVANCED --use_types_for_optimization &>! lang.min.js
            |> lines->string exports &>! exports.list
     }})
     ("ecmascript/lang.min.2.js" ("ecmascript/node_modules" "ecmascript/lang.min.js") { in-dir "ecmascript" {
         |> ++ "var exports={};\n(function(){\n" #{cat lang.min.js} "\n})();" &>! lang.min.2.js.tmp
         (define raw (string->lines #{npx prepack --inlineExpressions lang.min.2.js.tmp}))
         |> lines->string (match raw [(list "var exports;" "(function () {" body1 ... "  var _$0 = this;" body2 ... "  _$0.exports = {" body3 ... "}).call(this);") (append body1 body2 '("module.exports = {") body3)]) &>! lang.min.2.js.tmp
         java -jar ./node_modules/google-closure-compiler-java/compiler.jar --assume_function_wrapper --language_out ECMASCRIPT3 --js lang.min.2.js.tmp &>! lang.min.2.js
         rm lang.min.2.js.tmp
     }})
     ("ecmascript/lang.js" ("ecmascript/node_modules" "typescript/lang.ts") { in-dir "ecmascript" {
         npx tsc --removeComments --outDir lang.js.tmp
         mv lang.js.tmp/langraw.js lang.js
         rm -fr lang.js.tmp
     }})
     ("lua/luasrcdiet" () { git clone --depth 1 https://github.com/jirutka/luasrcdiet.git lua/luasrcdiet })
     ("lua/lang_min.lua" ("lua/lang.lua" "lua/luasrcdiet" "c/lua-5.1.5/src/lua") { in-dir "lua" {
         sh -c (id "LUA_PATH='./luasrcdiet/?.lua' ../c/lua-5.1.5/src/lua ./luasrcdiet/bin/luasrcdiet lang.lua -o lang_min.lua")
     }})
     ("lua/node_modules" ("lua/yarn.lock") { in-dir "lua" { ;; 避免竞争状态
         yarn
         touch node_modules/
     }})
     ("lua/lang.lua" ("lua/node_modules" "typescript/lang.ts") {
         in-dir "lua" {
             |> ++ "/** @noSelfInFile */\n" #{cat ../typescript/lang.ts} &>! lang.ts
             touch lang.lua
             rm lang.lua
             npx tstl -p tsconfig.json
             (define raw #{cat lang.lua})
             (define out (++
                 haskell-generatedby
                 haskell-copyright
                 raw))
             |> id out &>! lang.lua
             sed -i (id "s|^function __TS__|local function __TS__|g") lang.lua

             sed -i (id "s|^\\( *\\)\\([^=]*\\) = function(|\\1function \\2(|g") lang.lua
             (define (u x) (match x [(list (regexp #rx"^( *)local ([^,=\n ]*)$" (list l1 v1 n1)) (regexp #rx"^( *)function ([^,=\n( ]*)(.*)$" (list l2 v2 n2 t)) tail ...) (if (equal? n1 n2) (string-append v1 "local function " n1 t "\n" (u tail)) (string-append l1 "\n" l2 "\n" (u tail)))] [(cons a d) (string-append a "\n" (u d))] ['() "\n"]))
             (define t (u (string->lines #{cat lang.lua})))
             |> id t &>! lang.lua

             grep (id "____exports") lang.lua &>! lang.lua.1
             sed -i (id "/____exports/d") lang.lua
             cat lang.lua.1 &>> lang.lua
             rm lang.lua.1
     }})
     ("ecmascript6/node_modules" ("ecmascript6/yarn.lock") { in-dir "ecmascript6" { ;; 避免竞争状态
         yarn
         touch node_modules/
     }})
     ("ecmascript6/lang.js" ("ecmascript6/node_modules" "typescript/lang.ts") {
         in-dir "ecmascript6" {
             touch lang.js
             rm lang.js
             npx tsc --build tsconfig.json
             (define raw #{cat lang.js})
             |> ++ c-generatedby c-copyright raw &>! lang.js
     }})
     ("java/src" ("lua/lang.lua" "java/real-src/lang/Lang.java" "java/real-src/lang/LangValue.java") {
         ;; TODO rewrite in rash
         in-dir "java" {
             ./compile.sh
     }})
     ("c/lua-5.1.5/src/lua" () {in-dir "c" {
         |> id "curl http://www.lua.org/ftp/lua-5.1.5.tar.gz | tar -xzv && cd lua-5.1.5 && make generic CC=clang && cd .." | sh
     }})
     ("c/lua-5.1.5" ("c/lua-5.1.5/src/lua") { touch c/lua-5.1.5/ })
     ("c/lua2c" ("c/lua2c-lib-lua2c-ast2cast.lua") {
       in-dir "c" {
           |> id "[ -d lua2c ] || (curl https://gitlab.com/the-language/lua2c/-/archive/c5b239dd5a9fad5718ffaa16e6a30cca8053ba92/lua2c-c5b239dd5a9fad5718ffaa16e6a30cca8053ba92.tar.gz | tar -xzv && mv lua2c-c5b239dd5a9fad5718ffaa16e6a30cca8053ba92 lua2c)" | sh
           rm -fr ./lua2c/lib/lua2c/ast2cast.lua
           cp ./lua2c-lib-lua2c-ast2cast.lua ./lua2c/lib/lua2c/ast2cast.lua
           touch lua2c/
     }})
     ("c/lang.h" () (void))
     ("c/lang.c" ("c/lua-5.1.5" "c/lua-5.1.5/src/lua" "c/lua2c" "lua/lang_min.lua" "c/patch/lang.tail.c" "c/lang.h") {
       in-dir "c" {
             (define raw #{|> id "LUA_PATH=./lua2c/lib/?.lua ./lua-5.1.5/src/lua ./lua2c/lua2c.lua ../lua/lang_min.lua" | sh | sed (id "s|static|static inline|g") | clang-format})

             |> id raw &>! lang.lua2c.out.c

             (define out #{cat ./lang.lua2c.out.c ./patch/lang.tail.c})

             mkdir -p src
             rm -fr src
             mkdir src
             cp ./lua-5.1.5/src/lapi.c ./lua-5.1.5/src/lcode.c ./lua-5.1.5/src/ldebug.c ./lua-5.1.5/src/ldo.c ./lua-5.1.5/src/ldump.c ./lua-5.1.5/src/lfunc.c ./lua-5.1.5/src/lgc.c ./lua-5.1.5/src/llex.c ./lua-5.1.5/src/lmem.c ./lua-5.1.5/src/lobject.c ./lua-5.1.5/src/lopcodes.c ./lua-5.1.5/src/lparser.c ./lua-5.1.5/src/lstate.c ./lua-5.1.5/src/lstring.c ./lua-5.1.5/src/ltable.c ./lua-5.1.5/src/ltm.c ./lua-5.1.5/src/lundump.c ./lua-5.1.5/src/lvm.c ./lua-5.1.5/src/lzio.c ./lua-5.1.5/src/lauxlib.c ./lua-5.1.5/src/lbaselib.c ./lua-5.1.5/src/ldblib.c ./lua-5.1.5/src/liolib.c ./lua-5.1.5/src/lmathlib.c ./lua-5.1.5/src/loslib.c ./lua-5.1.5/src/ltablib.c ./lua-5.1.5/src/lstrlib.c ./lua-5.1.5/src/loadlib.c ./lua-5.1.5/src/linit.c ./src
             cp ./lua-5.1.5/src/*.h ./src
             |> id out &>! ./src/lang.c
             cp lang.h ./src

             cp ./patch/tailor/* ./src
             rm ./src/loslib.c ./src/lmathlib.c ./src/liolib.c ./src/ldblib.c ./src/loadlib.c

             ./gen.single.sh
             (define single (++
                   c-generatedby
                   c-copyright
                   #{cat lang.c}))
             |> id single &>! lang.c
     }})
     ("c/lang.o" ("c/lang.c" "c/lang.h") { in-dir "c" {
         clang -I. -c -o lang.o lang.c -Ofast ;; -Oz -DNDEBUG
     }})
     ("c/liblang.so" ("c/lang.o") { in-dir "c" {
         clang -Wl,-s -shared lang.o -o liblang.so
     }})
     ("c/liblang.a" ("c/lang.o") { in-dir "c" {
         ar -r liblang.a lang.o
     }})
     ("php/node_modules" ("php/yarn.lock") { in-dir "php" { ;; 避免竞争状态
         yarn
         touch node_modules/
     }})
     ("php/lang.php" ("php/node_modules" "lua/lang.lua") {
         in-dir "php" {
             |> lines->string (match (string->lines #{cat ../lua/lang.lua}) [(list head ... "return ____exports") head]) &>! lang.lua
             |> id (++ "<?php\n" c-generatedby c-copyright (lines->string (match (string->lines #{npx lua2php lang.lua}) [(list "<?php" tail ...) tail]))) &>! lang.php
     }})
     ;; 以下爲停止支持的
     ("python3/lang.py" ("python2/lang.py") {
         in-dir "python3" {
             rm -fr lang.py
             cp ../python2/lang.py ./
             2to3 -f all -f buffer -f idioms -f set_literal -f ws_comma --no-diffs --nobackups -w lang.py
     }})
     ("python2/lang.py" ("ecmascript/lang.js" "ecmascript/exports.list") {
         in-dir "python2" {
             (define raw-js (++
                 "var exports={};"
                 #{cat ../ecmascript/lang.js}))
             |> id raw-js &>! lang.js
             |> id "import js2py\njs2py.translate_file('lang.js','lang.py')\n" | python2
             (define exports (ecmascript/exports.list-parse))
             (define exports-py (++
                 "exports = var.to_python().exports\n"
                 (apply-++ (map (lambda (x) (++ x" = exports."x"\n")) exports))
                 ))
             (define all-py (++
                 "__all__ = ["
                 (apply-++ (add-between (map (lambda (x) (++ "'"x"'")) exports)", "))
                 "]\n"
                 ))
             (define py-raw (string->lines #{cat lang.py}))
             (match-define (list py-raw-head py-raw-body ... py-raw-tail) py-raw)
             (define py (++
                 bash-generatedby
                 (match py-raw-head ["__all__ = ['lang']" all-py])
                 (lines->string py-raw-body)
                 "\n"
                 (match py-raw-tail ["lang = var.to_python()" exports-py])))
             |> id py &>! lang.py
     }})
     ("go/src" ("lua/lang.lua") {
         in-dir "go" {
           mkdir -p deps
           bash -c "[ -d ./deps/src/github.com/yuin/gopher-lua/ ] || (mkdir -p ./deps/src/github.com/yuin && pushd ./deps/src/github.com/yuin && git clone --depth 1 https://github.com/yuin/gopher-lua.git && popd)"
           bash -c (id "GOPATH=\"$PWD/deps\" go get github.com/yuin/gopher-lua")
           (define lang.go
               (++
                   c-generatedby
                   c-copyright
                   "package lang\n"
                   "import ( \"github.com/yuin/gopher-lua\" )\n"
                   "type Value lua.LValue\n"
                   "var exports *lua.LTable\n"
                   "var ls *lua.LState\n"
                   "func assertstateempty() {if ls.GetTop() != 0 {panic(\"ls.GetTop() != 0\")}}\n"
                   "func init() {\n"
                   "ls = lua.NewState()\n"
                   "ls.OpenLibs()\n"
                   "defer ls.Close()\n"
                   "if err := ls.DoString(`"#{cat ../lua/lang.lua}"`); err != nil {panic(err)}\n"
                   "exports = ls.Get(-1).(*lua.LTable)\n"
                   "ls.Pop(1)\n"
                   "assertstateempty()\n"
                   "}\n"
                   "func ComplexParse(x string) Value {\n"
                   "ls.CallByParam(lua.P{Fn: exports.RawGetString(`complex_parse`), NRet: 1, Protect: true}, lua.LString(x))\n"
                   "ret := ls.Get(-1)\n"
                   "ls.Pop(1)\n"
                   "assertstateempty()\n"
                   "return ret.(Value)\n"
                   "}\n"
                   "func ComplexPrint(x Value) string {\n"
                   "ls.CallByParam(lua.P{Fn: exports.RawGetString(`complex_print`), NRet: 1, Protect: true}, x.(lua.LValue))\n"
                   "ret := ls.Get(-1)\n"
                   "ls.Pop(1)\n"
                   "assertstateempty()\n"
                   "return string(ret.(lua.LString))\n"
                   "}\n"
                   "func SimplePrint(x Value) string {\n"
                   "ls.CallByParam(lua.P{Fn: exports.RawGetString(`simple_print`), NRet: 1, Protect: true}, x.(lua.LValue))\n"
                   "ret := ls.Get(-1)\n"
                   "ls.Pop(1)\n"
                   "assertstateempty()\n"
                   "return string(ret.(lua.LString))\n"
                   "}\n"
               ))
           rm -fr src
           mkdir -p src/lang
           |> id lang.go &>! src/lang/lang.go
           (define package.go
               (++
                 "package lang\n"
                 "const PackageName = `The Language`\n"
                 "const PackageVersion = `0.1`\n"
                 "const PackageAuthors = `Zaoqi`\n"
                 "const PackageCopyRight = PackageName + ` ` + PackageVersion + ` Copyright (C) 2018-2019 ` + PackageAuthors\n"))
           |> id package.go &>! src/lang/package.go
     }})
     ))
