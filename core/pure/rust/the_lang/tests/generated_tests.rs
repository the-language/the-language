use the_lang::*;

#[test]
fn generated_tests() {
    let l = Lang::new();
    println!("(check-equal? (simple-print (complex-parse \"(A B)\")) \"(A B)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("(A B)"))), String::from("(A B)"));
    println!("(check-equal? (simple-print (complex-parse \"#(#(A B) . C)\")) \"#(#(A B) . C)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("#(#(A B) . C)"))), String::from("#(#(A B) . C)"));
    println!("(check-equal? (simple-print (complex-parse \"((A) . #(B C C))\")) \"((A) . #(B C C))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("((A) . #(B C C))"))), String::from("((A) . #(B C C))"));
    println!("(check-equal? (simple-print (complex-parse \"(k 0 9 8 . o)\")) \"(k 0 9 8 . o)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("(k 0 9 8 . o)"))), String::from("(k 0 9 8 . o)"));
    println!("(check-equal? (simple-print (complex-parse \"(() ((((())))) . k)\")) \"(() ((((())))) . k)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("(() ((((())))) . k)"))), String::from("(() ((((())))) . k)"));
    println!("(check-equal? (simple-print (complex-parse \"$(#(映表 ((h g))) h)\")) \"$(#(映表 ((h g))) h)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("$(#(映表 ((h g))) h)"))), String::from("$(#(映表 ((h g))) h)"));
    println!("(check-equal? (simple-print (complex-parse \"^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))\")) \"^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))"))), String::from("^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))"));
    println!("(check-equal? (simple-print (complex-parse \";(#(序乙) 序甲)\")) \";(#(序乙) 序甲)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from(";(#(序乙) 序甲)"))), String::from(";(#(序乙) 序甲)"));
    println!("(check-equal? (simple-print (complex-parse \"()\")) \"()\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("()"))), String::from("()"));
    println!("(check-equal? (simple-print (complex-parse \"(() ())\")) \"(() ())\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("(() ())"))), String::from("(() ())"));
    println!("(check-equal? (simple-print (complex-parse \"(h K)\")) \"(h K)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("(h K)"))), String::from("(h K)"));
    println!("(check-equal? (simple-print (complex-parse \"#(h . a)\")) \"#(h . a)\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("#(h . a)"))), String::from("#(h . a)"));
    println!("(check-equal? (simple-print (complex-parse \"#(s . #(a . #(i)))\")) \"#(s . #(a . #(i)))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("#(s . #(a . #(i)))"))), String::from("#(s . #(a . #(i)))"));
    println!("(check-equal? (simple-print (complex-parse \"^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))\")) \"^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))"))), String::from("^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))"));
    println!("(check-equal? (simple-print (complex-parse \"%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))\")) \"%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))"))), String::from("%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))"));
    println!("(check-equal? (simple-print (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 解算)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(映表 ())) ()))\")) \"$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 解算)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(映表 ())) ()))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 解算)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(映表 ())) ()))"))), String::from("$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 解算)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(映表 ())) ()))"));
    println!("(check-equal? (complex-print (complex-parse \"&+式形\")) \"&+式形\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("&+式形"))), String::from("&+式形"));
    println!("(check-equal? (complex-print (complex-parse \"[[_:構物]?]?\")) \"[[_:構物]?]?\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("[[_:構物]?]?"))), String::from("[[_:構物]?]?"));
    println!("(check-equal? (complex-print (complex-parse \"[[[_:[_:構物]]?]?]@h\")) \"[[[_:[_:構物]]?]?]@h\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("[[[_:[_:構物]]?]?]@h"))), String::from("[[[_:[_:構物]]?]?]@h"));
    println!("(check-equal? (complex-print (complex-parse \"^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))\")) \"^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))"))), String::from("^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))"));
    println!("(check-equal? (complex-print (complex-parse \":>構物\")) \":>構物\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from(":>構物"))), String::from(":>構物"));
    println!("(check-equal? (complex-print (complex-parse \"(&+化滅 :>連頸 (&+式形 引用:式形 &+式形) (&+化滅 :>連頸 (&+式形 引用:式形 引用:式形) (&+化滅 :>連頸 (&+式形 引用:式形 A) ())))\")) \"(&+化滅 :>連頸 (&+式形 引用:式形 &+式形) (&+化滅 :>連頸 (&+式形 引用:式形 引用:式形) (&+化滅 :>連頸 (&+式形 引用:式形 A) ())))\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("(&+化滅 :>連頸 (&+式形 引用:式形 &+式形) (&+化滅 :>連頸 (&+式形 引用:式形 引用:式形) (&+化滅 :>連頸 (&+式形 引用:式形 A) ())))"))), String::from("(&+化滅 :>連頸 (&+式形 引用:式形 &+式形) (&+化滅 :>連頸 (&+式形 引用:式形 引用:式形) (&+化滅 :>連頸 (&+式形 引用:式形 A) ())))"));
    println!("(check-equal? (complex-print (complex-parse \"#(化滅 (序甲:化滅) ((&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) (&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) 序甲:化滅))\")) \"#(化滅 (序甲:化滅) ((&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) (&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) 序甲:化滅))\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(化滅 (序甲:化滅) ((&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) (&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) 序甲:化滅))"))), String::from("#(化滅 (序甲:化滅) ((&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) (&+式形 引用:式形 #(化滅 (吾自:化滅 序甲:化滅) (序甲:化滅 (吾自:化滅 吾自:化滅 序甲:化滅)))) 序甲:化滅))"));
    println!("(check-equal? (complex-print (complex-parse \";(#(序乙) 序甲)\")) \";(#(序乙) 序甲)\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from(";(#(序乙) 序甲)"))), String::from(";(#(序乙) 序甲)"));
    println!("(check-equal? (complex-print (complex-parse \"a/b/c/d\")) \"a/b/c/d\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("a/b/c/d"))), String::from("a/b/c/d"));
    println!("(check-equal? (complex-print (complex-parse \"a/b\")) \"a/b\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("a/b"))), String::from("a/b"));
    println!("(check-equal? (complex-print (complex-parse \"a/[_:b]/[c/d]\")) \"a/[_:b]/[c/d]\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("a/[_:b]/[c/d]"))), String::from("a/[_:b]/[c/d]"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ((h g))) h)\"))) \"g\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ((h g))) h)")))), String::from("g"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"%([_:連頸]? (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))\"))) \"#(爻陰)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("%([_:連頸]? (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))")))), String::from("#(爻陰)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"%(如若:化滅 (#(爻陰) A B))\"))) \"B\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("%(如若:化滅 (#(爻陰) A B))")))), String::from("B"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"%(如若:化滅 (#(爻陽) A B))\"))) \"A\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("%(如若:化滅 (#(爻陽) A B))")))), String::from("A"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"%(如若:化滅 (%([_:連頸]? (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲)))))) A B))\"))) \"B\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("%(如若:化滅 (%([_:連頸]? (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲)))))) A B))")))), String::from("B"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"^($(#(映表 ()) (&+式形 :&>化滅 () ())) ())\"))) \"()\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("^($(#(映表 ()) (&+式形 :&>化滅 () ())) ())")))), String::from("()"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) ((&+式形 :&>化滅 (X) X) ()))\"))) \"()\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) ((&+式形 :&>化滅 (X) X) ()))")))), String::from("()"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) ((&+式形 :&>化滅 (X) X) (&+式形 引用:式形 H)))\"))) \"H\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) ((&+式形 :&>化滅 (X) X) (&+式形 引用:式形 H)))")))), String::from("H"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ((X G))) ((&+式形 :&>化滅 () X)))\"))) \"G\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ((X G))) ((&+式形 :&>化滅 () X)))")))), String::from("G"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ((X G))) ((&+式形 :&>化滅 (A) (&+化滅 :>連頸 A X)) (&+式形 引用:式形 J)))\"))) \"(J . G)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ((X G))) ((&+式形 :&>化滅 (A) (&+化滅 :>連頸 A X)) (&+式形 引用:式形 J)))")))), String::from("(J . G)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ((X G))) ((&+式形 :&>化滅 (A F) (&+化滅 :>連頸 A F)) (&+式形 引用:式形 J) X))\"))) \"(J . G)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ((X G))) ((&+式形 :&>化滅 (A F) (&+化滅 :>連頸 A F)) (&+式形 引用:式形 J) X))")))), String::from("(J . G)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (&+化滅 等同? () ()))\"))) \"#(爻陽)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (&+化滅 等同? () ()))")))), String::from("#(爻陽)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (&+化滅 等同? (&+式形 引用:式形 (((&+式形 引用:式形 A) B))) (&+式形 引用:式形 (((&+式形 引用:式形 A) B)))))\"))) \"#(爻陽)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (&+化滅 等同? (&+式形 引用:式形 (((&+式形 引用:式形 A) B))) (&+式形 引用:式形 (((&+式形 引用:式形 A) B)))))")))), String::from("#(爻陽)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (&+化滅 等同? (&+式形 引用:式形 (((&+式形 引用:式形 A) B))) (&+式形 引用:式形 (((&+式形 引用:式形 A) C)))))\"))) \"#(爻陰)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (&+化滅 等同? (&+式形 引用:式形 (((&+式形 引用:式形 A) B))) (&+式形 引用:式形 (((&+式形 引用:式形 A) C)))))")))), String::from("#(爻陰)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) H))\"))) \"H\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) H))")))), String::from("H"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 (化滅 省略一物 連頸) 特定其物)) () ()))\"))) \"(())\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 (化滅 省略一物 連頸) 特定其物)) () ()))")))), String::from("(())"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (()))\"))) \"#(爻陰)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (()))")))), String::from("#(爻陰)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) ()))\"))) \"#(爻陰)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) ()))")))), String::from("#(爻陰)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (%(#(符名 太始初核 (一類何物 (化滅 省略一物 連頸) 特定其物)) (() ()))))\"))) \"#(爻陽)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (%(#(符名 太始初核 (一類何物 (化滅 省略一物 連頸) 特定其物)) (() ()))))")))), String::from("#(爻陽)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) N)\"))) \"#(謬誤 太始初核 (&+化滅 (解算:化滅 (#(映表 ()) N))))\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) N)")))), String::from("#(謬誤 太始初核 (&+化滅 (解算:化滅 (#(映表 ()) N))))"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"^(#(化滅 (X) X) (()))\"))) \"()\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("^(#(化滅 (X) X) (()))")))), String::from("()"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"^(#(化滅 X X) (A B))\"))) \"(A B)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("^(#(化滅 X X) (A B))")))), String::from("(A B)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 (化滅 (連頸) 省略一物) 首始)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) (8 1 9))))\"))) \"8\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 (化滅 (連頸) 省略一物) 首始)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) (8 1 9))))")))), String::from("8"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"^(#(化滅 (X . Y) Y) (A B C D 8))\"))) \"(B C D 8)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("^(#(化滅 (X . Y) Y) (A B C D 8))")))), String::from("(B C D 8)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))\"))) \"#(爻陰)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("%(#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 連頸 省略一物)))) (^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))))")))), String::from("#(爻陰)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))\"))) \"#(謬誤 太始初核 (宇宙亡矣 省略一物))\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("^(#(化滅 (序甲) (序甲 序甲)) (#(化滅 (序甲) (序甲 序甲))))")))), String::from("#(謬誤 太始初核 (宇宙亡矣 省略一物))"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 式形)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(式形 #(化滅 (E . X) X)))))\"))) \"()\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 式形)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(式形 #(化滅 (E . X) X)))))")))), String::from("()"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 式形)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(式形 #(化滅 (E . Y) Y))) A B))\"))) \"(A B)\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 式形)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(式形 #(化滅 (E . Y) Y))) A B))")))), String::from("(A B)"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 式形)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(式形 #(化滅 (E) E)))))\"))) \"#(映表 ())\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 式形)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(式形 #(化滅 (E) E)))))")))), String::from("#(映表 ())"));
    println!("(check-equal? (complex-print (force-all-rec (complex-parse \"$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 解算)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(映表 ())) ()))\"))) \"()\")");
    assert_eq!(l.complex_print(&l.force_all_rec(&l.complex_parse(&String::from("$(#(映表 ()) (#(符名 太始初核 (式形 (太始初核 化滅))) #(符名 太始初核 (一類何物 化滅 解算)) (#(符名 太始初核 (式形 (太始初核 式形))) #(符名 太始初核 (一類何物 式形 引用)) #(映表 ())) ()))")))), String::from("()"));
    println!("(check-equal? (simple-print (complex-parse \"構物.符名\")) \"#(符名 太始初核 (一類何物 (化滅 (構物) 省略一物) 符名))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("構物.符名"))), String::from("#(符名 太始初核 (一類何物 (化滅 (構物) 省略一物) 符名))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (一類何物 (化滅 (構物) 省略一物) 符名))\")) \"構物.符名\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (一類何物 (化滅 (構物) 省略一物) 符名))"))), String::from("構物.符名"));
    println!("(check-equal? (simple-print (complex-parse \"&式形\")) \"#(符名 太始初核 (式形 式形))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("&式形"))), String::from("#(符名 太始初核 (式形 式形))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (式形 式形))\")) \"&式形\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (式形 式形))"))), String::from("&式形"));
    println!("(check-equal? (simple-print (complex-parse \"解算:化滅\")) \"#(符名 太始初核 (一類何物 化滅 解算))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("解算:化滅"))), String::from("#(符名 太始初核 (一類何物 化滅 解算))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (一類何物 化滅 解算))\")) \"解算:化滅\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (一類何物 化滅 解算))"))), String::from("解算:化滅"));
    println!("(check-equal? (simple-print (complex-parse \"&+式形\")) \"#(符名 太始初核 (式形 (太始初核 式形)))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("&+式形"))), String::from("#(符名 太始初核 (式形 (太始初核 式形)))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (式形 (太始初核 式形)))\")) \"&+式形\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (式形 (太始初核 式形)))"))), String::from("&+式形"));
    println!("(check-equal? (simple-print (complex-parse \"[_:構物]?\")) \"#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 構物 省略一物))))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("[_:構物]?"))), String::from("#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 構物 省略一物))))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 構物 省略一物))))\")) \"[_:構物]?\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (一類何物 化滅 (是非 (一類何物 構物 省略一物))))"))), String::from("[_:構物]?"));
    println!("(check-equal? (simple-print (complex-parse \"等同?\")) \"#(符名 太始初核 (一類何物 化滅 (是非 等同)))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("等同?"))), String::from("#(符名 太始初核 (一類何物 化滅 (是非 等同)))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (一類何物 化滅 (是非 等同)))\")) \"等同?\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (一類何物 化滅 (是非 等同)))"))), String::from("等同?"));
    println!("(check-equal? (simple-print (complex-parse \"化滅@應用\")) \"#(符名 太始初核 (一類何物 (化滅 (化滅 . 省略一物) 省略一物) 應用))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("化滅@應用"))), String::from("#(符名 太始初核 (一類何物 (化滅 (化滅 . 省略一物) 省略一物) 應用))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (一類何物 (化滅 (化滅 . 省略一物) 省略一物) 應用))\")) \"化滅@應用\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (一類何物 (化滅 (化滅 . 省略一物) 省略一物) 應用))"))), String::from("化滅@應用"));
    println!("(check-equal? (simple-print (complex-parse \":&>化滅\")) \"#(符名 太始初核 (一類何物 (式形 (化滅 省略一物 化滅)) 特定其物))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from(":&>化滅"))), String::from("#(符名 太始初核 (一類何物 (式形 (化滅 省略一物 化滅)) 特定其物))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (一類何物 (式形 (化滅 省略一物 化滅)) 特定其物))\")) \":&>化滅\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (一類何物 (式形 (化滅 省略一物 化滅)) 特定其物))"))), String::from(":&>化滅"));
    println!("(check-equal? (simple-print (complex-parse \"列序.[_:構物]\")) \"#(符名 太始初核 (一類何物 (化滅 (列序) 省略一物) (一類何物 構物 省略一物)))\")");
    assert_eq!(l.simple_print(&l.complex_parse(&String::from("列序.[_:構物]"))), String::from("#(符名 太始初核 (一類何物 (化滅 (列序) 省略一物) (一類何物 構物 省略一物)))"));
    println!("(check-equal? (complex-print (complex-parse \"#(符名 太始初核 (一類何物 (化滅 (列序) 省略一物) (一類何物 構物 省略一物)))\")) \"列序.[_:構物]\")");
    assert_eq!(l.complex_print(&l.complex_parse(&String::from("#(符名 太始初核 (一類何物 (化滅 (列序) 省略一物) (一類何物 構物 省略一物)))"))), String::from("列序.[_:構物]"));
    println!("(check-equal? (complex-print (machinetext-parse (machinetext-print (complex-parse \"符名\")))) \"符名\")");
    assert_eq!(l.complex_print(&l.machinetext_parse(&l.machinetext_print(&l.complex_parse(&String::from("符名"))))), String::from("符名"));
    println!("(check-equal? (complex-print (machinetext-parse (machinetext-print (complex-parse \"()\")))) \"()\")");
    assert_eq!(l.complex_print(&l.machinetext_parse(&l.machinetext_print(&l.complex_parse(&String::from("()"))))), String::from("()"));
    println!("(check-equal? (complex-print (machinetext-parse (machinetext-print (complex-parse \"(a b)\")))) \"(a b)\")");
    assert_eq!(l.complex_print(&l.machinetext_parse(&l.machinetext_print(&l.complex_parse(&String::from("(a b)"))))), String::from("(a b)"));
    println!("(check-equal? (complex-print (machinetext-parse (machinetext-print (complex-parse \"(a b . #(c d #(e)))\")))) \"(a b . #(c d #(e)))\")");
    assert_eq!(l.complex_print(&l.machinetext_parse(&l.machinetext_print(&l.complex_parse(&String::from("(a b . #(c d #(e)))"))))), String::from("(a b . #(c d #(e)))"));
    println!("(check-equal? (machinetext-print (machinetext-parse \"_\")) \"_\")");
    assert_eq!(l.machinetext_print(&l.machinetext_parse(&String::from("_"))), String::from("_"));
    println!("(check-equal? (machinetext-print (machinetext-parse \"#^符名^.^太始初核^.._^一類何物^...^化滅^.._..^一類何物^.^列序^_^省略一物^_^構物^.^省略一物^_\")) \"#^符名^.^太始初核^.._^一類何物^...^化滅^.._..^一類何物^.^列序^_^省略一物^_^構物^.^省略一物^_\")");
    assert_eq!(l.machinetext_print(&l.machinetext_parse(&String::from("#^符名^.^太始初核^.._^一類何物^...^化滅^.._..^一類何物^.^列序^_^省略一物^_^構物^.^省略一物^_"))), String::from("#^符名^.^太始初核^.._^一類何物^...^化滅^.._..^一類何物^.^列序^_^省略一物^_^構物^.^省略一物^_"));
}
