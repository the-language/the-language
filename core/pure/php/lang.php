<?php
/* Generated by make.rkt */
/*
    The Language
    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
$__TS__ArrayPush = (function ($arr = NULL, ...$lUa_Vararg_LuA) {
    $items = ((object)["array" => $lUa_Vararg_LuA]);
    $lUaTmP_1_LuAtMp = $items;
    $lUaTmP_2_LuAtMp = (is_string($lUaTmP_1_LuAtMp) ? strlen($lUaTmP_1_LuAtMp) : count($lUaTmP_1_LuAtMp->array));
    $lUaTmP_3_LuAtMp = 1;
    for ($lUa_I_LuA = 1; $lUaTmP_3_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_2_LuAtMp : $lUa_I_LuA >= $lUaTmP_2_LuAtMp; $lUa_I_LuA += $lUaTmP_3_LuAtMp) {
        $____ = $lUa_I_LuA;
        $item = $lUaTmP_1_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
        $arr->array[count($arr->array)] = $item;
    }
    return (is_string($arr) ? strlen($arr) : count($arr->array));
});
$__TS__ArrayUnshift = (function ($arr = NULL, ...$lUa_Vararg_LuA) {
    $items = ((object)["array" => $lUa_Vararg_LuA]);
    
    {
        $i = ((is_string($items) ? strlen($items) : count($items->array)) - 1);
        while (($i >= 0)) {
            array_splice($arr->array, 0, 0, [$items->array[($i + 0)]]);
            $i = ($i - 1);
        }
    }

    return (is_string($arr) ? strlen($arr) : count($arr->array));
});
$LANG_ERROR = NULL;
$LANG_ASSERT = NULL;
$recordstring_null_p = NULL;
$recordstring_shadow_copy = NULL;
$trampoline_return = NULL;
$trampoline_delay = NULL;
$atom_t = NULL;
$construction_t = NULL;
$null_t = NULL;
$data_t = NULL;
$just_t = NULL;
$delay_evaluate_t = NULL;
$delay_builtin_func_t = NULL;
$delay_builtin_form_t = NULL;
$delay_apply_t = NULL;
$comment_t = NULL;
$hole_t = NULL;
$new_comment = NULL;
$comment_p = NULL;
$comment_comment = NULL;
$comment_x = NULL;
$un_comment_all = NULL;
$atom_p = NULL;
$un_atom = NULL;
$atom_equal_p = NULL;
$new_construction = NULL;
$construction_p = NULL;
$construction_head = NULL;
$construction_tail = NULL;
$null_v = NULL;
$null_p = NULL;
$new_data = NULL;
$data_p = NULL;
$data_name = NULL;
$data_list = NULL;
$just_p = NULL;
$un_just = NULL;
$evaluate = NULL;
$delay_evaluate_p = NULL;
$delay_evaluate_env = NULL;
$delay_evaluate_x = NULL;
$builtin_form_apply = NULL;
$delay_builtin_form_p = NULL;
$delay_builtin_form_env = NULL;
$delay_builtin_form_f = NULL;
$delay_builtin_form_xs = NULL;
$builtin_func_apply = NULL;
$delay_builtin_func_p = NULL;
$delay_builtin_func_f = NULL;
$delay_builtin_func_xs = NULL;
$apply = NULL;
$delay_apply_p = NULL;
$delay_apply_f = NULL;
$delay_apply_xs = NULL;
$force_all_rec = NULL;
$unlazy_all_rec = NULL;
$new_hole_do = NULL;
$hole_p = NULL;
$lang_assert_equal_set_do = NULL;
$hole_set_do = NULL;
$lang_copy_do = NULL;
$system_atom = NULL;
$name_atom = NULL;
$function_atom = NULL;
$form_atom = NULL;
$mapping_atom = NULL;
$error_atom = NULL;
$the_world_stopped_v = NULL;
$data_name_function_builtin_systemName = NULL;
$data_list_function_builtin_systemName = NULL;
$data_p_function_builtin_systemName = NULL;
$construction_p_function_builtin_systemName = NULL;
$construction_head_function_builtin_systemName = NULL;
$construction_tail_function_builtin_systemName = NULL;
$atom_p_function_builtin_systemName = NULL;
$null_p_function_builtin_systemName = NULL;
$equal_p_function_builtin_systemName = NULL;
$apply_function_builtin_systemName = NULL;
$evaluate_function_builtin_systemName = NULL;
$if_function_builtin_systemName = NULL;
$quote_form_builtin_systemName = NULL;
$lambda_form_builtin_systemName = NULL;
$function_builtin_use_systemName = NULL;
$form_builtin_use_systemName = NULL;
$form_use_systemName = NULL;
$comment_form_builtin_systemName = NULL;
$new_error = NULL;
$jsArray_to_list = NULL;
$new_list = NULL;
$un_just_all = NULL;
$delay_p = NULL;
$delay_just_p = NULL;
$lazy_p = NULL;
$force_all_inner = NULL;
$force1 = NULL;
$force_all = NULL;
$force_uncomment_all = NULL;
$unlazy1 = NULL;
$unlazy_list_1_keepcomment = NULL;
$name_unlazy1_p3 = NULL;
$make_enviroment_null_v = NULL;
$enviroment_null_p = NULL;
$enviroment_helper_print0 = NULL;
$enviroment_helper_print_step = NULL;
$enviroment_helper_node_expand = NULL;
$enviroment_helper_tree_shadow_copy = NULL;
$enviroment_set_helper = NULL;
$env_null_v = NULL;
$env_set = NULL;
$env_get = NULL;
$must_env_get = NULL;
$env2val = NULL;
$env_foreach = NULL;
$real_evaluate = NULL;
$real_builtin_func_apply_s = NULL;
$real_apply = NULL;
$real_builtin_func_apply = NULL;
$real_builtin_form_apply = NULL;
$make_quote = NULL;
$new_lambda = NULL;
$jsbool_equal_p_inner = NULL;
$equal_p = NULL;
$simple_print = NULL;
$LANG_ERROR = (function () {
    throw new Exception("TheLanguage PANIC");
});
$LANG_ASSERT = (function ($x = NULL) use (&$LANG_ERROR) {
    if (!($x)) {
        return $LANG_ERROR();
    }
});
$recordstring_null_p = (function ($x = NULL) {
    foreach ($x as $lUa_I_LuA => $lUa_V_LuA) {
        $k = $lUa_I_LuA;
        return false;
    }
    return true;
});
$recordstring_shadow_copy = (function ($x = NULL) {
    $result = ((object)["array" => []]);
    foreach ($x as $lUa_I_LuA => $lUa_V_LuA) {
        $k = $lUa_I_LuA;
        $result->array[(is_int($k) ? $k - 1 : $k)] = $x->array[(is_int($k) ? $k - 1 : $k)];
    }
    return $result;
});
$trampoline_return = (function ($x = NULL) {
    return (function () use (&$x) {
        return ((object)["array" => [false, $x]]);
    });
});
$trampoline_delay = (function ($x = NULL) {
    return (function () use (&$x) {
        return ((object)["array" => [true, $x()]]);
    });
});
$new_comment = (function ($comment = NULL, $x = NULL) use (&$comment_t) {
    return ((object)["array" => [$comment_t, $comment, $x]]);
});
$comment_p = (function ($x = NULL) use (&$comment_t) {
    return ($x->array[0] === $comment_t);
});
$comment_comment = (function ($x = NULL) {
    return $x->array[1];
});
$comment_x = (function ($x = NULL) {
    return $x->array[2];
});
$un_comment_all = (function ($x = NULL) use (&$comment_p, &$comment_x) {
    while ($comment_p($x)) {
        $x = $comment_x($x);
    }
    return $x;
});
$atom_p = (function ($x = NULL) use (&$atom_t) {
    return ($x->array[0] === $atom_t);
});
$un_atom = (function ($x = NULL) {
    return $x->array[1];
});
$atom_equal_p = (function ($x = NULL, $y = NULL) use (&$lang_assert_equal_set_do, &$un_atom) {
    if (($x === $y)) {
        return true;
    }
    if (($un_atom($x) === $un_atom($y))) {
        $lang_assert_equal_set_do($x, $y);
        return true;
    } else {
        return false;
    }

});
$new_construction = (function ($x = NULL, $y = NULL) use (&$construction_t) {
    return ((object)["array" => [$construction_t, $x, $y]]);
});
$construction_p = (function ($x = NULL) use (&$construction_t) {
    return ($x->array[0] === $construction_t);
});
$construction_head = (function ($x = NULL) {
    return $x->array[1];
});
$construction_tail = (function ($x = NULL) {
    return $x->array[2];
});
$null_p = (function ($x = NULL) use (&$null_t) {
    return ($x->array[0] === $null_t);
});
$new_data = (function ($x = NULL, $y = NULL) use (&$data_t) {
    return ((object)["array" => [$data_t, $x, $y]]);
});
$data_p = (function ($x = NULL) use (&$data_t) {
    return ($x->array[0] === $data_t);
});
$data_name = (function ($x = NULL) {
    return $x->array[1];
});
$data_list = (function ($x = NULL) {
    return $x->array[2];
});
$just_p = (function ($x = NULL) use (&$just_t) {
    return ($x->array[0] === $just_t);
});
$un_just = (function ($x = NULL) {
    return $x->array[1];
});
$evaluate = (function ($x = NULL, $y = NULL) use (&$delay_evaluate_t) {
    return ((object)["array" => [$delay_evaluate_t, $x, $y]]);
});
$delay_evaluate_p = (function ($x = NULL) use (&$delay_evaluate_t) {
    return ($x->array[0] === $delay_evaluate_t);
});
$delay_evaluate_env = (function ($x = NULL) {
    return $x->array[1];
});
$delay_evaluate_x = (function ($x = NULL) {
    return $x->array[2];
});
$builtin_form_apply = (function ($x = NULL, $y = NULL, $z = NULL) use (&$delay_builtin_form_t) {
    return ((object)["array" => [$delay_builtin_form_t, $x, $y, $z]]);
});
$delay_builtin_form_p = (function ($x = NULL) use (&$delay_builtin_form_t) {
    return ($x->array[0] === $delay_builtin_form_t);
});
$delay_builtin_form_env = (function ($x = NULL) {
    return $x->array[1];
});
$delay_builtin_form_f = (function ($x = NULL) {
    return $x->array[2];
});
$delay_builtin_form_xs = (function ($x = NULL) {
    return $x->array[3];
});
$builtin_func_apply = (function ($x = NULL, $y = NULL) use (&$delay_builtin_func_t) {
    return ((object)["array" => [$delay_builtin_func_t, $x, $y]]);
});
$delay_builtin_func_p = (function ($x = NULL) use (&$delay_builtin_func_t) {
    return ($x->array[0] === $delay_builtin_func_t);
});
$delay_builtin_func_f = (function ($x = NULL) {
    return $x->array[1];
});
$delay_builtin_func_xs = (function ($x = NULL) {
    return $x->array[2];
});
$apply = (function ($f = NULL, $xs = NULL) use (&$delay_apply_t) {
    return ((object)["array" => [$delay_apply_t, $f, $xs]]);
});
$delay_apply_p = (function ($x = NULL) use (&$delay_apply_t) {
    return ($x->array[0] === $delay_apply_t);
});
$delay_apply_f = (function ($x = NULL) {
    return $x->array[1];
});
$delay_apply_xs = (function ($x = NULL) {
    return $x->array[2];
});
$force_all_rec = (function ($raw = NULL) use (&$comment_p, &$construction_p, &$data_p, &$force_all, &$force_all_rec) {
    $x = $force_all($raw);
    $conslike = (function ($xx = NULL) use (&$force_all_rec) {
        $xx->array[1] = $force_all_rec($xx->array[1]);
        $xx->array[2] = $force_all_rec($xx->array[2]);
        return $xx;
    });
    if ($data_p($x)) {
        return $conslike($x);
    } elseif ($construction_p($x)) {
        return $conslike($x);
    } elseif ($comment_p($x)) {
        return $conslike($x);
    }
    return $x;
});
$new_hole_do = (function () use (&$hole_t) {
    return ((object)["array" => [$hole_t]]);
});
$hole_p = (function ($x = NULL) use (&$hole_t) {
    return ($x->array[0] === $hole_t);
});
$lang_assert_equal_set_do = (function ($x = NULL, $y = NULL) use (&$just_t, &$null_v) {
    if (($x === $y)) {
        return;
    }
    if (($x === $null_v)) {
        $x = $y;
        $y = $null_v;
    }
    $x->array[0] = $just_t;
    $x->array[1] = $y;
    $x->array[2] = false;
    $x->array[3] = false;
});
$hole_set_do = (function ($rawx = NULL, $rawy = NULL) use (&$LANG_ASSERT, &$hole_p) {
    $LANG_ASSERT($hole_p($rawx));
    $LANG_ASSERT(!($hole_p($rawy)));
    $x = $rawx;
    $y = $rawy;
    $x->array[0] = $y->array[0];
    $x->array[1] = $y->array[1];
    $x->array[2] = $y->array[2];
    $x->array[3] = $y->array[3];
});
$lang_copy_do = (function ($x = NULL) use (&$hole_set_do, &$new_hole_do) {
    $ret = $new_hole_do();
    $hole_set_do($ret, $x);
    return $ret;
});
$new_error = (function ($name = NULL, $list = NULL) use (&$error_atom, &$new_construction, &$new_data, &$null_v) {
    return $new_data($error_atom, $new_construction($name, $new_construction($list, $null_v)));
});
$jsArray_to_list = (function ($xs = NULL) use (&$new_construction, &$null_v) {
    $ret = $null_v;
    
    {
        $i = ((is_string($xs) ? strlen($xs) : count($xs->array)) - 1);
        while (($i >= 0)) {
            $ret = $new_construction($xs->array[($i + 0)], $ret);
            $i = ($i - 1);
        }
    }

    return $ret;
});
$new_list = (function (...$lUa_Vararg_LuA) use (&$jsArray_to_list) {
    $xs = ((object)["array" => $lUa_Vararg_LuA]);
    return $jsArray_to_list($xs);
});
$un_just_all = (function ($raw = NULL) use (&$__TS__ArrayPush, &$just_p, &$lang_assert_equal_set_do, &$un_just) {
    if (!($just_p($raw))) {
        return $raw;
    }
    $x = $raw;
    $xs = ((object)["array" => []]);
    while ($just_p($x)) {
        $__TS__ArrayPush($xs, $x);
        $x = $un_just($x);
    }
    $lUaTmP_4_LuAtMp = $xs;
    $lUaTmP_5_LuAtMp = (is_string($lUaTmP_4_LuAtMp) ? strlen($lUaTmP_4_LuAtMp) : count($lUaTmP_4_LuAtMp->array));
    $lUaTmP_6_LuAtMp = 1;
    for ($lUa_I_LuA = 1; $lUaTmP_6_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_5_LuAtMp : $lUa_I_LuA >= $lUaTmP_5_LuAtMp; $lUa_I_LuA += $lUaTmP_6_LuAtMp) {
        $____ = $lUa_I_LuA;
        $v = $lUaTmP_4_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
        $lang_assert_equal_set_do($v, $x);
    }
    return $x;
});
$delay_p = (function ($x = NULL) use (&$delay_apply_p, &$delay_builtin_form_p, &$delay_builtin_func_p, &$delay_evaluate_p) {
    return ((($delay_evaluate_p($x) || $delay_builtin_form_p($x)) ||
        $delay_builtin_func_p($x)) ||
        $delay_apply_p($x));
});
$delay_just_p = (function ($x = NULL) use (&$delay_p, &$just_p) {
    return ($just_p($x) || $delay_p($x));
});
$lazy_p = (function ($x = NULL) use (&$comment_p, &$delay_just_p) {
    return ($delay_just_p($x) || $comment_p($x));
});
$force_all_inner = (function ($raw = NULL, $parents_history = NULL, $ref_novalue_replace = NULL, $xs = NULL) use (&$LANG_ASSERT, &$LANG_ERROR, &$__TS__ArrayPush, &$apply_function_builtin_systemName, &$atom_p_function_builtin_systemName, &$builtin_func_apply, &$construction_head_function_builtin_systemName, &$construction_p_function_builtin_systemName, &$construction_tail_function_builtin_systemName, &$data_list_function_builtin_systemName, &$data_name_function_builtin_systemName, &$data_p_function_builtin_systemName, &$delay_apply_p, &$delay_builtin_form_p, &$delay_builtin_func_f, &$delay_builtin_func_p, &$delay_builtin_func_xs, &$delay_evaluate_p, &$delay_just_p, &$equal_p, &$equal_p_function_builtin_systemName, &$evaluate_function_builtin_systemName, &$force1, &$force_all_inner, &$if_function_builtin_systemName, &$lang_assert_equal_set_do, &$null_p_function_builtin_systemName, &$simple_print, &$the_world_stopped_v) {
    if (($parents_history === NULL)) {
        $parents_history = ((object)["array" => []]);
    }
    if (($ref_novalue_replace === NULL)) {
        $ref_novalue_replace = ((object)["array" => [false, false]]);
    }
    if (($xs === NULL)) {
        $xs = ((object)["array" => []]);
    }
    $x = NULL;
    $do_rewrite = NULL;
    $do_rewrite_force_all = NULL;
    $do_rewrite = (function ($newval = NULL) use (&$lang_assert_equal_set_do, &$x, &$xs) {
        $lang_assert_equal_set_do($x, $newval);
        
        {
            $i = 0;
            while (($i < (is_string($xs) ? strlen($xs) : count($xs->array)))) {
                $lang_assert_equal_set_do($xs->array[($i + 0)], $newval);
                $i = ($i + 1);
            }
        }

        return $newval;
    });
    $do_rewrite_force_all = (function ($newval = NULL) use (&$__TS__ArrayPush, &$delay_just_p, &$do_rewrite, &$force_all_inner, &$parents_history, &$x, &$xs) {
        $do_rewrite($newval);
        if ($delay_just_p($newval)) {
            $__TS__ArrayPush($xs, $x);
            return $force_all_inner($newval, $parents_history, ((object)["array" => [false, false]]), $xs);
        }
        return $newval;
    });
    $history = ((object)["array" => []]);
    $x = $raw;
    $replace_this_with_stopped = (function () use (&$do_rewrite_force_all, &$ref_novalue_replace, &$the_world_stopped_v) {
        $ref_novalue_replace->array[1] = true;
        return $do_rewrite_force_all($the_world_stopped_v);
    });
    $make_history = (function () use (&$history, &$parents_history) {
        $ret = ((object)["array" => []]);
        foreach ($history as $lUa_I_LuA => $lUa_V_LuA) {
            $x_id = $lUa_I_LuA;
            $ret->array[(is_int($x_id) ? $x_id - 1 : $x_id)] = true;
        }
        foreach ($parents_history as $lUa_I_LuA => $lUa_V_LuA) {
            $x_id_1 = $lUa_I_LuA;
            $ret->array[(is_int($x_id_1) ? $x_id_1 - 1 : $x_id_1)] = true;
        }
        return $ret;
    });
    
    {
        $i = 0;
        while (($delay_just_p($x) && ($i < 32))) {
            $__TS__ArrayPush($xs, $x);
            $x = $force1($x);
            $i = ($i + 1);
        }
    }

    while ($delay_just_p($x)) {
        $x_id = $simple_print($x);
        if (($parents_history->array[(is_int($x_id) ? $x_id - 1 : $x_id)] === true)) {
            return $replace_this_with_stopped();
        }
        if (($history->array[(is_int($x_id) ? $x_id - 1 : $x_id)] === true)) {
            $ref_novalue_replace->array[0] = true;
            if ($delay_evaluate_p($x)) {
                return $replace_this_with_stopped();
            } elseif ($delay_builtin_func_p($x)) {
                $f = $delay_builtin_func_f($x);
                $xs_1 = $delay_builtin_func_xs($x);
                $elim_s = ((object)[
                    "array" => [
                        $data_name_function_builtin_systemName,
                        $data_list_function_builtin_systemName,
                        $data_p_function_builtin_systemName,
                        $construction_p_function_builtin_systemName,
                        $construction_head_function_builtin_systemName,
                        $construction_tail_function_builtin_systemName,
                        $atom_p_function_builtin_systemName,
                        $null_p_function_builtin_systemName
                    ]
                ]);
                $is_elim = false;
                $lUaTmP_7_LuAtMp = $elim_s;
                $lUaTmP_8_LuAtMp = (is_string($lUaTmP_7_LuAtMp) ? strlen($lUaTmP_7_LuAtMp) : count($lUaTmP_7_LuAtMp->array));
                $lUaTmP_9_LuAtMp = 1;
                for ($lUa_I_LuA = 1; $lUaTmP_9_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_8_LuAtMp : $lUa_I_LuA >= $lUaTmP_8_LuAtMp; $lUa_I_LuA += $lUaTmP_9_LuAtMp) {
                    $____ = $lUa_I_LuA;
                    $elim_s_v = $lUaTmP_7_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
                    if ($equal_p($elim_s_v, $f)) {
                        $is_elim = true;
                        break;
                    }
                }
                if ($is_elim) {
                    $LANG_ASSERT(((is_string($xs_1) ? strlen($xs_1) : count($xs_1->array)) === 1));
                    $LANG_ASSERT(($ref_novalue_replace->array[1] === false));
                    $inner = $force_all_inner($xs_1->array[0], $make_history(), $ref_novalue_replace);
                    if ($ref_novalue_replace->array[1]) {
                        return $do_rewrite_force_all($builtin_func_apply($f, ((object)["array" => [$inner]])));
                    } else {
                        return $LANG_ERROR();
                    }

                }
                if ($equal_p($f, $equal_p_function_builtin_systemName)) {
                    return $replace_this_with_stopped();
                } elseif ($equal_p($f, $apply_function_builtin_systemName)) {
                    return $replace_this_with_stopped();
                } elseif ($equal_p($f, $evaluate_function_builtin_systemName)) {
                    return $replace_this_with_stopped();
                } elseif ($equal_p($f, $if_function_builtin_systemName)) {
                    $LANG_ASSERT(((is_string($xs_1) ? strlen($xs_1) : count($xs_1->array)) === 3));
                    $LANG_ASSERT(($ref_novalue_replace->array[1] === false));
                    $tf = $force_all_inner($xs_1->array[0], $make_history(), $ref_novalue_replace);
                    if ($ref_novalue_replace->array[1]) {
                        return $do_rewrite_force_all($builtin_func_apply(
                            $if_function_builtin_systemName,
                            ((object)["array" => [$tf, $xs_1->array[1], $xs_1->array[2]]])
                        ));
                    } else {
                        return $LANG_ERROR();
                    }

                }
                return $LANG_ERROR();
            } elseif ($delay_builtin_form_p($x)) {
                return $replace_this_with_stopped();
            } elseif ($delay_apply_p($x)) {
                return $replace_this_with_stopped();
            }
            return $LANG_ERROR();
        }
        $history->array[(is_int($x_id) ? $x_id - 1 : $x_id)] = true;
        $__TS__ArrayPush($xs, $x);
        $x = $force1($x);
    }
    return $do_rewrite($x);
});
$force1 = (function ($raw = NULL) use (&$LANG_ASSERT, &$delay_apply_f, &$delay_apply_p, &$delay_apply_xs, &$delay_builtin_form_env, &$delay_builtin_form_f, &$delay_builtin_form_p, &$delay_builtin_form_xs, &$delay_builtin_func_f, &$delay_builtin_func_p, &$delay_builtin_func_xs, &$delay_evaluate_env, &$delay_evaluate_p, &$delay_evaluate_x, &$just_p, &$lang_assert_equal_set_do, &$real_apply, &$real_builtin_form_apply, &$real_builtin_func_apply, &$real_evaluate, &$un_just_all) {
    $x = $un_just_all($raw);
    $ret = NULL;
    $LANG_ASSERT(!($just_p($x)));
    if ($delay_evaluate_p($x)) {
        $ret = $real_evaluate($delay_evaluate_env($x), $delay_evaluate_x($x), $raw);
    } elseif ($delay_builtin_form_p($x)) {
        $ret = $real_builtin_form_apply(
            $delay_builtin_form_env($x),
            $delay_builtin_form_f($x),
            $delay_builtin_form_xs($x),
            $raw
        );
    } elseif ($delay_builtin_func_p($x)) {
        $ret = $real_builtin_func_apply($delay_builtin_func_f($x), $delay_builtin_func_xs($x), $raw);
    } elseif ($delay_apply_p($x)) {
        $ret = $real_apply($delay_apply_f($x), $delay_apply_xs($x), $raw);
    } else {
        $ret = $x;
    }

    $ret = $un_just_all($ret);
    $lang_assert_equal_set_do($x, $ret);
    return $ret;
});
$force_all = (function ($raw = NULL) use (&$force_all_inner) {
    return $force_all_inner($raw);
});
$force_uncomment_all = (function ($x = NULL) use (&$comment_p, &$delay_just_p, &$force_all, &$un_comment_all) {
    while (($delay_just_p($x) || $comment_p($x))) {
        $x = $force_all($un_comment_all($x));
    }
    return $x;
});
$unlazy1 = (function ($x = NULL) use (&$comment_p, &$comment_x, &$force1) {
    while ($comment_p($x)) {
        $x = $comment_x($x);
    }
    $x = $force1($x);
    while ($comment_p($x)) {
        $x = $comment_x($x);
    }
    return $x;
});
$unlazy_list_1_keepcomment = (function ($list = NULL, $not_list_k = NULL, $delay_just_k = NULL, $k = NULL) use (&$__TS__ArrayPush, &$comment_comment, &$comment_p, &$comment_x, &$construction_head, &$construction_p, &$construction_tail, &$delay_just_p, &$force1, &$null_p, &$un_just_all) {
    $ret = ((object)["array" => []]);
    $comments = ((object)["array" => []]);
    $i = $un_just_all($list);
    $not_forced = true;
    while (true) {
        if ($null_p($i)) {
            return $k($comments, $ret);
        } elseif ($comment_p($i)) {
            $__TS__ArrayPush($comments, $comment_comment($i));
            $i = $comment_x($i);
        } elseif ($construction_p($i)) {
            $__TS__ArrayPush($ret, $construction_head($i));
            $i = $construction_tail($i);
        } elseif ($delay_just_p($i)) {
            if ($not_forced) {
                $not_forced = false;
                $i = $force1($i);
            } else {
                return $delay_just_k();
            }

        } else {
            return $not_list_k();
        }

    }
});
$name_unlazy1_p3 = (function ($x = NULL) use (&$atom_equal_p, &$atom_p, &$data_name, &$data_p, &$lazy_p, &$name_atom, &$unlazy1) {
    if ($lazy_p($x)) {
        $x = $unlazy1($x);
    }
    if ($lazy_p($x)) {
        return NULL;
    }
    if ($atom_p($x)) {
        return true;
    }
    if (!($data_p($x))) {
        return false;
    }
    $n = $data_name($x);
    if ($lazy_p($n)) {
        $n = $unlazy1($n);
    }
    if ($lazy_p($n)) {
        return NULL;
    }
    if (!($atom_p($n))) {
        return false;
    }
    return $atom_equal_p($n, $name_atom);
});
$make_enviroment_null_v = (function () {
    return ((object)["array" => [true, ((object)["array" => []]), NULL]]);
});
$enviroment_null_p = (function ($x = NULL) use (&$recordstring_null_p) {
    if ($x->array[0]) {
        return $recordstring_null_p($x->array[1]);
    }
    return false;
});
$enviroment_helper_print0 = (function ($x = NULL, $refe = NULL, $ret = NULL) use (&$LANG_ERROR, &$__TS__ArrayPush, &$atom_p, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$force_uncomment_all, &$null_p, &$un_atom) {
    $x = $force_uncomment_all($x);
    if ($atom_p($x)) {
        $__TS__ArrayPush($ret, "^", $un_atom($x));
    } elseif ($construction_p($x)) {
        $__TS__ArrayPush($ret, ".");
        $__TS__ArrayPush($refe, $construction_head($x), $construction_tail($x));
    } elseif ($null_p($x)) {
        $__TS__ArrayPush($ret, "_");
    } elseif ($data_p($x)) {
        $__TS__ArrayPush($ret, "#");
        $__TS__ArrayPush($refe, $data_name($x), $data_list($x));
    } else {
        return $LANG_ERROR();
    }

});
$enviroment_helper_print_step = (function ($xs = NULL) use (&$enviroment_helper_print0) {
    $rs = ((object)["array" => []]);
    $ss = ((object)["array" => []]);
    $lUaTmP_10_LuAtMp = $xs;
    $lUaTmP_11_LuAtMp = (is_string($lUaTmP_10_LuAtMp) ? strlen($lUaTmP_10_LuAtMp) : count($lUaTmP_10_LuAtMp->array));
    $lUaTmP_12_LuAtMp = 1;
    for ($lUa_I_LuA = 1; $lUaTmP_12_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_11_LuAtMp : $lUa_I_LuA >= $lUaTmP_11_LuAtMp; $lUa_I_LuA += $lUaTmP_12_LuAtMp) {
        $____ = $lUa_I_LuA;
        $x = $lUaTmP_10_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
        $enviroment_helper_print0($x, $rs, $ss);
    }
    return ((object)["array" => [$ss, $rs]]);
});
$enviroment_helper_node_expand = (function ($env = NULL) use (&$LANG_ASSERT, &$enviroment_helper_print_step) {
    $e = $enviroment_helper_print_step($env->array[1]);
    $es = $e->array[0];
    $ev = $e->array[1];
    $t = ((object)["array" => []]);
    $LANG_ASSERT(((is_string($es) ? strlen($es) : count($es->array)) !== 0));
    $lUaTmP_13_LuAtMp = $es->array[((is_string($es) ? strlen($es) : count($es->array)) - 1)];
    $t->array[(is_int($lUaTmP_13_LuAtMp) ? $lUaTmP_13_LuAtMp - 1 : $lUaTmP_13_LuAtMp)] = ((object)["array" => [false, $ev, $env->array[2]]]);
    $result = ((object)["array" => [true, $t, NULL]]);
    
    {
        $i = ((is_string($es) ? strlen($es) : count($es->array)) - 2);
        while (($i >= 0)) {
            $t_1 = ((object)["array" => []]);
            $lUaTmP_14_LuAtMp = $es->array[($i + 0)];
            $t_1->array[(is_int($lUaTmP_14_LuAtMp) ? $lUaTmP_14_LuAtMp - 1 : $lUaTmP_14_LuAtMp)] = $result;
            $result = ((object)["array" => [true, $t_1, NULL]]);
            $i = ($i - 1);
        }
    }

    return $result;
});
$enviroment_helper_tree_shadow_copy = (function ($x = NULL) use (&$recordstring_shadow_copy) {
    return ((object)["array" => [true, $recordstring_shadow_copy($x->array[1]), NULL]]);
});
$enviroment_set_helper = (function (
    $env = NULL,
    $key = NULL,
    $val = NULL,
    $return_pointer = NULL,
    $real_return = NULL
) use (&$LANG_ASSERT, &$LANG_ERROR, &$enviroment_helper_node_expand, &$enviroment_helper_print_step, &$enviroment_helper_tree_shadow_copy, &$enviroment_null_p, &$enviroment_set_helper, &$make_enviroment_null_v, &$trampoline_delay, &$trampoline_return) {
    if (((is_string($key) ? strlen($key) : count($key->array)) === 0)) {
        $LANG_ASSERT(($enviroment_null_p($env) ||
            (($env->array[0] === false) && ($env->array[1]->array["length"] === 0))));
        $return_pointer->array[0] = false;
        $return_pointer->array[1] = $key;
        $return_pointer->array[2] = $val;
        return $trampoline_return($real_return);
    }
    if ($env->array[0]) {
        $result_tmp = $enviroment_helper_tree_shadow_copy($env);
        $return_pointer->array[0] = $result_tmp->array[0];
        $return_pointer->array[1] = $result_tmp->array[1];
        $return_pointer->array[2] = $result_tmp->array[2];
        $result = $return_pointer;
        $a = $enviroment_helper_print_step($key);
        $astr = $a->array[0];
        $av = $a->array[1];
        $pointer = $result;
        
        {
            $i = 0;
            while (($i < (is_string($astr) ? strlen($astr) : count($astr->array)))) {
                $k = $astr->array[($i + 0)];
                $m = NULL;
                if (($pointer->array[1]->array[(is_int($k) ? $k - 1 : $k)] !== NULL)) {
                    $t = $pointer->array[1]->array[(is_int($k) ? $k - 1 : $k)];
                    if ($t->array[-1]) {
                        $m = $enviroment_helper_tree_shadow_copy($t);
                    } else {
                        if (($t->array[0]->array["length"] === 0)) {
                            $LANG_ASSERT(($i === ((is_string($astr) ? strlen($astr) : count($astr->array)) - 1)));
                            $p = $make_enviroment_null_v();
                            $pointer->array[1]->array[(is_int($k) ? $k - 1 : $k)] = $p;
                            $p->array[0] = false;
                            $p->array[1] = $av;
                            $p->array[2] = $val;
                            return $trampoline_return($real_return);
                        }
                        $m = $enviroment_helper_node_expand($t);
                    }

                } else {
                    $m = ((object)["array" => [true, ((object)["array" => []]), NULL]]);
                }

                $LANG_ASSERT(($m !== NULL));
                $pointer->array[1]->array[(is_int($k) ? $k - 1 : $k)] = $m;
                $pointer = $m;
                $i = ($i + 1);
            }
        }

        if ($enviroment_null_p($pointer)) {
            $p_1 = $pointer;
            $p_1->array[0] = false;
            $p_1->array[1] = $av;
            $p_1->array[2] = $val;
            return $trampoline_return($real_return);
        } else {
            return $trampoline_delay(
                (function () use (&$av, &$enviroment_set_helper, &$pointer, &$real_return, &$val) {
                    return $enviroment_set_helper($pointer, $av, $val, $pointer, $real_return);
                })
            );
        }

    } else {
        return $trampoline_delay(
            (function () use (&$env, &$enviroment_helper_node_expand, &$enviroment_set_helper, &$key, &$real_return, &$return_pointer, &$val) {
                return $enviroment_set_helper($enviroment_helper_node_expand($env), $key, $val, $return_pointer, $real_return);
            })
        );
    }

    return $LANG_ERROR();
});
$env_set = (function ($env = NULL, $key = NULL, $val = NULL) use (&$equal_p) {
    $ret = ((object)["array" => []]);
    
    {
        $i = 0;
        while (($i < (is_string($env) ? strlen($env) : count($env->array)))) {
            if ($equal_p($env->array[(($i + 0) + 0)], $key)) {
                $ret->array[(($i + 0) + 0)] = $key;
                $ret->array[(($i + 1) + 0)] = $val;
                
                {
                    $i = ($i + 2);
                    while (($i < (is_string($env) ? strlen($env) : count($env->array)))) {
                        $ret->array[(($i + 0) + 0)] = $env->array[(($i + 0) + 0)];
                        $ret->array[(($i + 1) + 0)] = $env->array[(($i + 1) + 0)];
                        $i = ($i + 2);
                    }
                }

                return $ret;
            } else {
                $ret->array[(($i + 0) + 0)] = $env->array[(($i + 0) + 0)];
                $ret->array[(($i + 1) + 0)] = $env->array[(($i + 1) + 0)];
            }

            $i = ($i + 2);
        }
    }

    $ret->array[(((is_string($env) ? strlen($env) : count($env->array)) + 0) + 0)] = $key;
    $ret->array[(((is_string($env) ? strlen($env) : count($env->array)) + 1) + 0)] = $val;
    return $ret;
});
$env_get = (function ($env = NULL, $key = NULL, $default_v = NULL) use (&$equal_p) {
    
    {
        $i = 0;
        while (($i < (is_string($env) ? strlen($env) : count($env->array)))) {
            if ($equal_p($env->array[(($i + 0) + 0)], $key)) {
                return $env->array[(($i + 1) + 0)];
            }
            $i = ($i + 2);
        }
    }

    return $default_v;
});
$must_env_get = (function ($env = NULL, $key = NULL) use (&$LANG_ERROR, &$equal_p) {
    
    {
        $i = 0;
        while (($i < (is_string($env) ? strlen($env) : count($env->array)))) {
            if ($equal_p($env->array[(($i + 0) + 0)], $key)) {
                return $env->array[(($i + 1) + 0)];
            }
            $i = ($i + 2);
        }
    }

    return $LANG_ERROR();
});
$env2val = (function ($env = NULL) use (&$mapping_atom, &$new_construction, &$new_data, &$new_list, &$null_v) {
    $ret = $null_v;
    
    {
        $i = 0;
        while (($i < (is_string($env) ? strlen($env) : count($env->array)))) {
            $ret = $new_construction($new_list($env->array[(($i + 0) + 0)], $env->array[(($i + 1) + 0)]), $ret);
            $i = ($i + 2);
        }
    }

    return $new_data($mapping_atom, $new_list($ret));
});
$env_foreach = (function ($env = NULL, $f = NULL) {
    
    {
        $i = 0;
        while (($i < (is_string($env) ? strlen($env) : count($env->array)))) {
            $f($env->array[(($i + 0) + 0)], $env->array[(($i + 1) + 0)]);
            $i = ($i + 2);
        }
    }

});
$real_evaluate = (function ($env = NULL, $raw = NULL, $selfvalraw = NULL) use (&$__TS__ArrayPush, &$apply, &$atom_equal_p, &$atom_p, &$builtin_form_apply, &$builtin_func_apply, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay_just_p, &$env2val, &$env_get, &$equal_p, &$evaluate, &$evaluate_function_builtin_systemName, &$force1, &$force_all, &$form_atom, &$form_builtin_use_systemName, &$form_use_systemName, &$function_builtin_use_systemName, &$name_unlazy1_p3, &$new_error, &$new_list, &$null_p, &$system_atom, &$unlazy_list_1_keepcomment) {
    $x = $force1($raw);
    if ($delay_just_p($x)) {
        return $selfvalraw;
    }
    $error_v = (function () use (&$env, &$env2val, &$evaluate_function_builtin_systemName, &$function_builtin_use_systemName, &$new_error, &$new_list, &$system_atom, &$x) {
        return $new_error($system_atom, $new_list(
            $function_builtin_use_systemName,
            $new_list($evaluate_function_builtin_systemName, $new_list($env2val($env), $x))
        ));
    });
    if ($construction_p($x)) {
        return $unlazy_list_1_keepcomment($x, $error_v, (function () use (&$selfvalraw) {
            return $selfvalraw;
        }), (function ($comments = NULL, $xs = NULL) use (&$__TS__ArrayPush, &$apply, &$atom_equal_p, &$atom_p, &$builtin_form_apply, &$builtin_func_apply, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay_just_p, &$env, &$env2val, &$equal_p, &$error_v, &$evaluate, &$force1, &$force_all, &$form_atom, &$form_builtin_use_systemName, &$form_use_systemName, &$function_builtin_use_systemName, &$null_p, &$selfvalraw) {
            if (((is_string($comments) ? strlen($comments) : count($comments->array)) !== 0)) {
                throw new Exception("WIP");
            }
            if ($equal_p($xs->array[0], $form_builtin_use_systemName)) {
                if (((is_string($xs) ? strlen($xs) : count($xs->array)) === 1)) {
                    return $error_v();
                }
                $f = $xs->array[1];
                $args = ((object)["array" => []]);
                
                {
                    $i = 2;
                    while (($i < (is_string($xs) ? strlen($xs) : count($xs->array)))) {
                        $__TS__ArrayPush($args, $xs->array[($i + 0)]);
                        $i = ($i + 1);
                    }
                }

                return $builtin_form_apply($env, $f, $args);
            } elseif ($equal_p($xs->array[0], $form_use_systemName)) {
                if (((is_string($xs) ? strlen($xs) : count($xs->array)) === 1)) {
                    return $error_v();
                }
                $f_1 = $force_all($evaluate($env, $xs->array[1]));
                if (!($data_p($f_1))) {
                    return $error_v();
                }
                $f_type = $force1($data_name($f_1));
                if ($delay_just_p($f_type)) {
                    return $selfvalraw;
                }
                if (!($atom_p($f_type))) {
                    return $error_v();
                }
                if (!($atom_equal_p($f_type, $form_atom))) {
                    return $error_v();
                }
                $f_list = $force1($data_list($f_1));
                if ($delay_just_p($f_list)) {
                    return $selfvalraw;
                }
                if (!($construction_p($f_list))) {
                    return $error_v();
                }
                $f_x = $construction_head($f_list);
                $f_list_cdr = $force1($construction_tail($f_list));
                if ($delay_just_p($f_list_cdr)) {
                    return $selfvalraw;
                }
                if (!($null_p($f_list_cdr))) {
                    return $error_v();
                }
                $args_1 = ((object)["array" => [$env2val($env)]]);
                
                {
                    $i_1 = 2;
                    while (($i_1 < (is_string($xs) ? strlen($xs) : count($xs->array)))) {
                        $__TS__ArrayPush($args_1, $xs->array[($i_1 + 0)]);
                        $i_1 = ($i_1 + 1);
                    }
                }

                return $apply($f_x, $args_1);
            } elseif ($equal_p($xs->array[0], $function_builtin_use_systemName)) {
                if (((is_string($xs) ? strlen($xs) : count($xs->array)) === 1)) {
                    return $error_v();
                }
                $f_2 = $xs->array[1];
                $args_2 = ((object)["array" => []]);
                
                {
                    $i_2 = 2;
                    while (($i_2 < (is_string($xs) ? strlen($xs) : count($xs->array)))) {
                        $__TS__ArrayPush($args_2, $evaluate($env, $xs->array[($i_2 + 0)]));
                        $i_2 = ($i_2 + 1);
                    }
                }

                return $builtin_func_apply($f_2, $args_2);
            } else {
                $f_3 = $evaluate($env, $xs->array[0]);
                $args_3 = ((object)["array" => []]);
                
                {
                    $i_3 = 1;
                    while (($i_3 < (is_string($xs) ? strlen($xs) : count($xs->array)))) {
                        $__TS__ArrayPush($args_3, $evaluate($env, $xs->array[($i_3 + 0)]));
                        $i_3 = ($i_3 + 1);
                    }
                }

                return $apply($f_3, $args_3);
            }

        }));
    } elseif ($null_p($x)) {
        return $x;
    }
    $r = $name_unlazy1_p3($x);
    if (($r === NULL)) {
        return $selfvalraw;
    }
    if (($r === true)) {
        return $env_get($env, $x, $error_v());
    }
    return $error_v();
});
$real_apply = (function ($f = NULL, $xs = NULL, $selfvalraw = NULL) use (&$apply_function_builtin_systemName, &$atom_equal_p, &$atom_p, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay_just_p, &$env_null_v, &$env_set, &$evaluate, &$force1, &$force_all, &$force_all_rec, &$function_atom, &$function_builtin_use_systemName, &$jsArray_to_list, &$name_unlazy1_p3, &$new_construction, &$new_error, &$new_list, &$null_p, &$null_v, &$system_atom) {
    $error_v = (function () use (&$apply_function_builtin_systemName, &$f, &$function_builtin_use_systemName, &$jsArray_to_list, &$new_error, &$new_list, &$system_atom, &$xs) {
        return $new_error($system_atom, $new_list(
            $function_builtin_use_systemName,
            $new_list($apply_function_builtin_systemName, $new_list($f, $jsArray_to_list($xs)))
        ));
    });
    $f = $force1($f);
    if ($delay_just_p($f)) {
        return $selfvalraw;
    }
    if (!($data_p($f))) {
        return $error_v();
    }
    $f_type = $force_all($data_name($f));
    if (!(($atom_p($f_type) && $atom_equal_p($f_type, $function_atom)))) {
        return $error_v();
    }
    $f_list = $force_all($data_list($f));
    if (!($construction_p($f_list))) {
        return $error_v();
    }
    $args_pat = $force_all_rec($construction_head($f_list));
    $f_list_cdr = $force_all($construction_tail($f_list));
    if (!(($construction_p($f_list_cdr) &&
        $null_p($force_all($construction_tail($f_list_cdr)))))) {
        return $error_v();
    }
    $f_code = $construction_head($f_list_cdr);
    $env = $env_null_v;
    $xs_i = 0;
    while (!($null_p($args_pat))) {
        $r = $name_unlazy1_p3($args_pat);
        if (($r === NULL)) {
            return $selfvalraw;
        }
        if (($r === true)) {
            $x = $null_v;
            
            {
                $i = ((is_string($xs) ? strlen($xs) : count($xs->array)) - 1);
                while (($i >= $xs_i)) {
                    $x = $new_construction($xs->array[($i + 0)], $x);
                    $i = ($i - 1);
                }
            }

            $env = $env_set($env, $args_pat, $x);
            $xs_i = (is_string($xs) ? strlen($xs) : count($xs->array));
            $args_pat = $null_v;
        } elseif ($construction_p($args_pat)) {
            if (($xs_i < (is_string($xs) ? strlen($xs) : count($xs->array)))) {
                $x_1 = $xs->array[($xs_i + 0)];
                $xs_i = ($xs_i + 1);
                $env = $env_set($env, $construction_head($args_pat), $x_1);
                $args_pat = $construction_tail($args_pat);
            } else {
                return $error_v();
            }

        } else {
            return $error_v();
        }

    }
    if (((is_string($xs) ? strlen($xs) : count($xs->array)) !== $xs_i)) {
        return $error_v();
    }
    return $evaluate($env, $f_code);
});
$real_builtin_func_apply = (function ($f = NULL, $xs = NULL, $selfvalraw = NULL) use (&$LANG_ERROR, &$equal_p, &$function_builtin_use_systemName, &$jsArray_to_list, &$new_error, &$new_list, &$real_builtin_func_apply_s, &$system_atom) {
    $error_v = (function () use (&$f, &$function_builtin_use_systemName, &$jsArray_to_list, &$new_error, &$new_list, &$system_atom, &$xs) {
        return $new_error(
            $system_atom,
            $new_list($function_builtin_use_systemName, $new_list($f, $jsArray_to_list($xs)))
        );
    });
    $lUaTmP_15_LuAtMp = $real_builtin_func_apply_s;
    $lUaTmP_16_LuAtMp = (is_string($lUaTmP_15_LuAtMp) ? strlen($lUaTmP_15_LuAtMp) : count($lUaTmP_15_LuAtMp->array));
    $lUaTmP_17_LuAtMp = 1;
    for ($lUa_I_LuA = 1; $lUaTmP_17_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_16_LuAtMp : $lUa_I_LuA >= $lUaTmP_16_LuAtMp; $lUa_I_LuA += $lUaTmP_17_LuAtMp) {
        $____ = $lUa_I_LuA;
        $xx = $lUaTmP_15_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
        if ($equal_p($f, $xx->array[0])) {
            if (((is_string($xs) ? strlen($xs) : count($xs->array)) !== $xx->array[1])) {
                return $error_v();
            }
            if (($xx->array[1] === 1)) {
                return $xx->array[2]($xs->array[0], $error_v, $selfvalraw);
            } elseif (($xx->array[1] === 2)) {
                return $xx->array[2]($xs->array[0], $xs->array[1], $error_v, $selfvalraw);
            } elseif (($xx->array[1] === 3)) {
                return $xx->array[2]($xs->array[0], $xs->array[1], $xs->array[2], $error_v, $selfvalraw);
            }
            return $LANG_ERROR();
        }
    }
    return $error_v();
});
$real_builtin_form_apply = (function ($env = NULL, $f = NULL, $xs = NULL, $selfvalraw = NULL) use (&$comment_form_builtin_systemName, &$env2val, &$equal_p, &$evaluate, &$form_builtin_use_systemName, &$jsArray_to_list, &$lambda_form_builtin_systemName, &$new_comment, &$new_error, &$new_lambda, &$new_list, &$quote_form_builtin_systemName, &$system_atom) {
    $error_v = (function () use (&$env, &$env2val, &$f, &$form_builtin_use_systemName, &$jsArray_to_list, &$new_error, &$new_list, &$system_atom, &$xs) {
        return $new_error($system_atom, $new_list(
            $form_builtin_use_systemName,
            $new_list($env2val($env), $f, $jsArray_to_list($xs))
        ));
    });
    if ($equal_p($f, $quote_form_builtin_systemName)) {
        if (((is_string($xs) ? strlen($xs) : count($xs->array)) !== 1)) {
            return $error_v();
        }
        return $xs->array[0];
    } elseif ($equal_p($f, $lambda_form_builtin_systemName)) {
        if (((is_string($xs) ? strlen($xs) : count($xs->array)) !== 2)) {
            return $error_v();
        }
        return $new_lambda($env, $xs->array[0], $xs->array[1], $error_v);
    } elseif ($equal_p($f, $comment_form_builtin_systemName)) {
        if (((is_string($xs) ? strlen($xs) : count($xs->array)) !== 2)) {
            return $error_v();
        }
        return $new_comment($xs->array[0], $evaluate($env, $xs->array[1]));
    }
    return $error_v();
});
$make_quote = (function ($x = NULL) use (&$form_builtin_use_systemName, &$new_list, &$quote_form_builtin_systemName) {
    return $new_list($form_builtin_use_systemName, $quote_form_builtin_systemName, $x);
});
$new_lambda = (function ($env = NULL, $args_pat = NULL, $body = NULL, $error_v = NULL) use (&$LANG_ASSERT, &$__TS__ArrayPush, &$construction_head, &$construction_p, &$construction_tail, &$env_foreach, &$equal_p, &$function_atom, &$jsArray_to_list, &$make_quote, &$must_env_get, &$name_unlazy1_p3, &$new_construction, &$new_data, &$new_list, &$null_p, &$null_v, &$unlazy_all_rec) {
    $args_pat = $unlazy_all_rec($args_pat);
    $args_pat_vars = ((object)["array" => []]);
    $args_pat_is_dot = false;
    $args_pat_iter = $args_pat;
    while (!($null_p($args_pat_iter))) {
        $r = $name_unlazy1_p3($args_pat_iter);
        $LANG_ASSERT(($r !== NULL));
        if ($r) {
            $__TS__ArrayPush($args_pat_vars, $args_pat_iter);
            $args_pat_is_dot = true;
            $args_pat_iter = $null_v;
        } elseif ($construction_p($args_pat_iter)) {
            $__TS__ArrayPush($args_pat_vars, $construction_head($args_pat_iter));
            $args_pat_iter = $construction_tail($args_pat_iter);
        } else {
            return $error_v();
        }

    }
    $args_pat_vars_val = NULL;
    if ($args_pat_is_dot) {
        $args_pat_vars_val = $jsArray_to_list($args_pat_vars);
    } else {
        $args_pat_vars_val = $args_pat;
    }

    $env_vars = ((object)["array" => []]);
    $env_foreach(
        $env,
        (function ($k = NULL, $v = NULL) use (&$__TS__ArrayPush, &$args_pat_vars, &$env_vars, &$equal_p) {
            
            {
                $i = 0;
                while (($i <
                    (is_string($args_pat_vars) ? strlen($args_pat_vars) : count($args_pat_vars->array)))) {
                    if ($equal_p($args_pat_vars->array[($i + 0)], $k)) {
                        return;
                    }
                    $i = ($i + 1);
                }
            }

            $__TS__ArrayPush($env_vars, $k);
        })
    );
    $new_args_pat = $args_pat_vars_val;
    
    {
        $i = ((is_string($env_vars) ? strlen($env_vars) : count($env_vars->array)) - 1);
        while (($i >= 0)) {
            $new_args_pat = $new_construction($env_vars->array[($i + 0)], $new_args_pat);
            $i = ($i - 1);
        }
    }

    $new_args = $args_pat_vars_val;
    
    {
        $i_1 = ((is_string($env_vars) ? strlen($env_vars) : count($env_vars->array)) - 1);
        while (($i_1 >= 0)) {
            $new_args = $new_construction($make_quote($must_env_get($env, $env_vars->array[($i_1 + 0)])), $new_args);
            $i_1 = ($i_1 - 1);
        }
    }

    return $new_data($function_atom, $new_list($args_pat, $new_construction(
        $make_quote($new_data($function_atom, $new_list($new_args_pat, $body))),
        $new_args
    )));
});
$jsbool_equal_p_inner = (function ($x = NULL, $y = NULL) use (&$LANG_ERROR, &$atom_equal_p, &$atom_p, &$comment_p, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$force_all, &$jsbool_equal_p_inner, &$lang_assert_equal_set_do, &$null_p, &$un_comment_all) {
    if (($x === $y)) {
        return true;
    }
    $x = $force_all($x);
    $y = $force_all($y);
    if (($x === $y)) {
        return true;
    }
    $end_2 = (function ($xx = NULL, $yy = NULL, $f1 = NULL, $f2 = NULL) use (&$jsbool_equal_p_inner, &$lang_assert_equal_set_do) {
        $r1 = $jsbool_equal_p_inner($f1($xx), $f1($yy));
        $r2 = $jsbool_equal_p_inner($f2($xx), $f2($yy));
        if ((($r1 === true) && ($r2 === true))) {
            $lang_assert_equal_set_do($xx, $yy);
            return true;
        } elseif ((($r1 !== false) && ($r2 !== false))) {
            return NULL;
        } else {
            return false;
        }

    });
    if ($comment_p($x)) {
        $x2 = $un_comment_all($x);
        $ret = $jsbool_equal_p_inner($x2, $y);
        if (($ret === true)) {
            $ret = NULL;
        }
        return $ret;
    } elseif ($comment_p($y)) {
        $y2 = $un_comment_all($y);
        $ret_1 = $jsbool_equal_p_inner($x, $y2);
        if (($ret_1 === true)) {
            $ret_1 = NULL;
        }
        return $ret_1;
    } elseif ($null_p($x)) {
        if (!($null_p($y))) {
            return false;
        }
        $lang_assert_equal_set_do($x, $y);
        return true;
    } elseif ($atom_p($x)) {
        if (!($atom_p($y))) {
            return false;
        }
        return $atom_equal_p($x, $y);
    } elseif ($construction_p($x)) {
        if (!($construction_p($y))) {
            return false;
        }
        return $end_2($x, $y, $construction_head, $construction_tail);
    } elseif ($data_p($x)) {
        if (!($data_p($y))) {
            return false;
        }
        return $end_2($x, $y, $data_name, $data_list);
    }
    return $LANG_ERROR();
});
$equal_p = (function ($x = NULL, $y = NULL) use (&$jsbool_equal_p_inner) {
    return ($jsbool_equal_p_inner($x, $y) !== false);
});
$simple_print = (function ($x = NULL) use (&$LANG_ERROR, &$atom_p, &$comment_comment, &$comment_p, &$comment_x, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay_apply_f, &$delay_apply_p, &$delay_apply_xs, &$delay_builtin_form_env, &$delay_builtin_form_f, &$delay_builtin_form_p, &$delay_builtin_form_xs, &$delay_builtin_func_f, &$delay_builtin_func_p, &$delay_builtin_func_xs, &$delay_evaluate_env, &$delay_evaluate_p, &$delay_evaluate_x, &$env2val, &$jsArray_to_list, &$new_construction, &$null_p, &$simple_print, &$un_atom, &$un_just_all) {
    $x = $un_just_all($x);
    $temp = "";
    $prefix = "";
    if ($null_p($x)) {
        return "()";
    } elseif ($construction_p($x)) {
        $temp = "(";
        $prefix = "";
        while ($construction_p($x)) {
            $temp = (((string)$temp) .
                (((string)$prefix) . ((string)$simple_print($construction_head($x)))));
            $prefix = " ";
            $x = $un_just_all($construction_tail($x));
        }
        if ($null_p($x)) {
            $temp = (((string)$temp) . ")");
        } else {
            $temp = (((string)$temp) . (" . " . (((string)$simple_print($x)) . ")")));
        }

        return $temp;
    } elseif ($data_p($x)) {
        return ("#" . ((string)$simple_print($new_construction($data_name($x), $data_list($x)))));
    } elseif ($atom_p($x)) {
        return $un_atom($x);
    } elseif ($comment_p($x)) {
        return (";(" .
            (((string)$simple_print($comment_comment($x))) .
            (" " . (((string)$simple_print($comment_x($x))) . ")"))));
    } elseif ($delay_evaluate_p($x)) {
        return ("\$(" .
            (((string)$simple_print($env2val($delay_evaluate_env($x)))) .
            (" " . (((string)$simple_print($delay_evaluate_x($x))) . ")"))));
    } elseif ($delay_builtin_func_p($x)) {
        return ("%(" .
            (((string)$simple_print($delay_builtin_func_f($x))) .
            (" " .
            (((string)$simple_print($jsArray_to_list($delay_builtin_func_xs($x)))) . ")"))));
    } elseif ($delay_builtin_form_p($x)) {
        return ("@(" .
            (((string)$simple_print($env2val($delay_builtin_form_env($x)))) .
            (" " .
            (((string)$simple_print($delay_builtin_form_f($x))) .
            (" " .
            (((string)$simple_print($jsArray_to_list($delay_builtin_form_xs($x)))) . ")"))))));
    } elseif ($delay_apply_p($x)) {
        return ("^(" .
            (((string)$simple_print($delay_apply_f($x))) .
            (" " . (((string)$simple_print($jsArray_to_list($delay_apply_xs($x)))) . ")"))));
    }
    return $LANG_ERROR();
});
$run_trampoline = (function ($x = NULL) {
    $i = $x();
    while ($i->array[0]) {
        $i = $i->array[1]();
    }
    return $i->array[1];
});
$atom_t = 0;
$construction_t = 1;
$null_t = 2;
$data_t = 3;
$just_t = 4;
$delay_evaluate_t = 5;
$delay_builtin_func_t = 6;
$delay_builtin_form_t = 7;
$delay_apply_t = 8;
$comment_t = 10;
$hole_t = 9;
$new_atom = (function ($x = NULL) use (&$atom_t) {
    return ((object)["array" => [$atom_t, $x]]);
});
$null_v = ((object)["array" => [$null_t]]);
$force_uncomment_all_rec = (function ($raw = NULL) use (&$comment_p, &$construction_p, &$data_p, &$force_all_rec, &$force_uncomment_all, &$force_uncomment_all_rec, &$lang_copy_do) {
    $x = $force_uncomment_all($raw);
    $conslike = (function ($xx = NULL) use (&$comment_p, &$force_all_rec, &$force_uncomment_all_rec, &$lang_copy_do) {
        $xx->array[1] = $force_all_rec($xx->array[1]);
        $xx->array[2] = $force_all_rec($xx->array[2]);
        if (($comment_p($xx->array[1]) || $comment_p($xx->array[2]))) {
            $ret = $lang_copy_do($xx);
            $a = $xx->array[1];
            $d = $xx->array[2];
            $a1 = $force_uncomment_all_rec($a);
            $d1 = $force_uncomment_all_rec($d);
            $ret->array[1] = $a1;
            $ret->array[2] = $d1;
            return $ret;
        } else {
            return $xx;
        }

    });
    if ($data_p($x)) {
        return $conslike($x);
    } elseif ($construction_p($x)) {
        return $conslike($x);
    }
    return $x;
});
$unlazy_all_rec = $force_uncomment_all_rec;
$system_atom = $new_atom("太始初核");
$name_atom = $new_atom("符名");
$function_atom = $new_atom("化滅");
$form_atom = $new_atom("式形");
$equal_atom = $new_atom("等同");
$evaluate_sym = $new_atom("解算");
$theThing_atom = $new_atom("特定其物");
$something_atom = $new_atom("省略一物");
$mapping_atom = $new_atom("映表");
$if_atom = $new_atom("如若");
$typeAnnotation_atom = $new_atom("一類何物");
$isOrNot_atom = $new_atom("是非");
$sub_atom = $new_atom("其子");
$true_atom = $new_atom("爻陽");
$false_atom = $new_atom("爻陰");
$quote_atom = $new_atom("引用");
$apply_atom = $new_atom("應用");
$null_atom = $new_atom("間空");
$construction_atom = $new_atom("連頸");
$data_atom = $new_atom("構物");
$error_atom = $new_atom("謬誤");
$atom_atom = $new_atom("詞素");
$list_atom = $new_atom("列序");
$head_atom = $new_atom("首始");
$tail_atom = $new_atom("尾末");
$thing_atom = $new_atom("之物");
$theWorldStopped_atom = $new_atom("宇宙亡矣");
$effect_atom = $new_atom("效應");
$comment_atom = $new_atom("註疏");
$the_world_stopped_v = $new_error($system_atom, $new_list($theWorldStopped_atom, $something_atom));
$systemName_make = (function ($x = NULL) use (&$name_atom, &$new_construction, &$new_data, &$null_v, &$system_atom) {
    return $new_data($name_atom, $new_construction($system_atom, $new_construction($x, $null_v)));
});
$make_builtin_f_new_sym_f = (function ($x_sym = NULL) use (&$function_atom, &$new_list, &$something_atom, &$systemName_make, &$theThing_atom, &$typeAnnotation_atom) {
    return $systemName_make($new_list(
        $typeAnnotation_atom,
        $new_list($function_atom, $something_atom, $x_sym),
        $theThing_atom
    ));
});
$make_builtin_f_get_sym_f = (function ($t_sym = NULL, $x_sym = NULL) use (&$function_atom, &$new_list, &$something_atom, &$systemName_make, &$typeAnnotation_atom) {
    return $systemName_make($new_list(
        $typeAnnotation_atom,
        $new_list($function_atom, $new_list($t_sym), $something_atom),
        $x_sym
    ));
});
$make_builtin_f_p_sym_f = (function ($t_sym = NULL) use (&$function_atom, &$isOrNot_atom, &$new_list, &$something_atom, &$systemName_make, &$typeAnnotation_atom) {
    return $systemName_make($new_list(
        $typeAnnotation_atom,
        $function_atom,
        $new_list($isOrNot_atom, $new_list($typeAnnotation_atom, $t_sym, $something_atom))
    ));
});
$new_data_function_builtin_systemName = $make_builtin_f_new_sym_f($data_atom);
$data_name_function_builtin_systemName = $make_builtin_f_get_sym_f($data_atom, $name_atom);
$data_list_function_builtin_systemName = $make_builtin_f_get_sym_f($data_atom, $list_atom);
$data_p_function_builtin_systemName = $make_builtin_f_p_sym_f($data_atom);
$new_construction_function_builtin_systemName = $make_builtin_f_new_sym_f($construction_atom);
$construction_p_function_builtin_systemName = $make_builtin_f_p_sym_f($construction_atom);
$construction_head_function_builtin_systemName = $make_builtin_f_get_sym_f($construction_atom, $head_atom);
$construction_tail_function_builtin_systemName = $make_builtin_f_get_sym_f($construction_atom, $tail_atom);
$atom_p_function_builtin_systemName = $make_builtin_f_p_sym_f($atom_atom);
$null_p_function_builtin_systemName = $make_builtin_f_p_sym_f($null_atom);
$equal_p_function_builtin_systemName = $systemName_make(
    $new_list($typeAnnotation_atom, $function_atom, $new_list($isOrNot_atom, $equal_atom))
);
$apply_function_builtin_systemName = $systemName_make($new_list($typeAnnotation_atom, $new_list(
    $function_atom,
    $new_construction($function_atom, $something_atom),
    $something_atom
), $apply_atom));
$evaluate_function_builtin_systemName = $systemName_make($new_list($typeAnnotation_atom, $function_atom, $evaluate_sym));
$list_chooseOne_function_builtin_systemName = $make_builtin_f_get_sym_f($list_atom, $new_list($typeAnnotation_atom, $thing_atom, $something_atom));
$if_function_builtin_systemName = $systemName_make($new_list($typeAnnotation_atom, $function_atom, $if_atom));
$quote_form_builtin_systemName = $systemName_make($new_list($typeAnnotation_atom, $form_atom, $quote_atom));
$lambda_form_builtin_systemName = $systemName_make($new_list(
    $typeAnnotation_atom,
    $new_list($form_atom, $new_list($function_atom, $something_atom, $function_atom)),
    $theThing_atom
));
$function_builtin_use_systemName = $systemName_make($new_list($form_atom, $new_list($system_atom, $function_atom)));
$form_builtin_use_systemName = $systemName_make($new_list($form_atom, $new_list($system_atom, $form_atom)));
$form_use_systemName = $systemName_make($new_list($form_atom, $form_atom));
$comment_function_builtin_systemName = $systemName_make($new_list($typeAnnotation_atom, $function_atom, $comment_atom));
$comment_form_builtin_systemName = $systemName_make($new_list($typeAnnotation_atom, $form_atom, $comment_atom));
$false_v = $new_data($false_atom, $new_list());
$true_v = $new_data($true_atom, $new_list());
$list_to_jsArray = (function ($xs = NULL, $k_done = NULL, $k_tail = NULL) use (&$__TS__ArrayPush, &$construction_head, &$construction_p, &$construction_tail, &$null_p) {
    $ret = ((object)["array" => []]);
    while ($construction_p($xs)) {
        $__TS__ArrayPush($ret, $construction_head($xs));
        $xs = $construction_tail($xs);
    }
    if ($null_p($xs)) {
        return $k_done($ret);
    }
    return $k_tail($ret, $xs);
});
$maybe_list_to_jsArray = (function ($xs = NULL) use (&$list_to_jsArray) {
    return $list_to_jsArray($xs, (function ($x = NULL) {
        return $x;
    }), (function ($_1 = NULL, $_2 = NULL) {
        return false;
    }));
});
$un_just_comment_all = (function ($x = NULL) use (&$comment_p, &$just_p, &$un_comment_all, &$un_just_all) {
    while (($just_p($x) || $comment_p($x))) {
        $x = $un_just_all($un_comment_all($x));
    }
    return $x;
});
$delay2delay_evaluate = (function ($x = NULL) use (&$LANG_ERROR, &$delay_apply_p, &$delay_builtin_form_p, &$delay_builtin_func_p, &$delay_evaluate_p) {
    if ($delay_evaluate_p($x)) {
        return $x;
    } elseif ($delay_builtin_form_p($x)) {
        throw new Exception("WIP");
    } elseif ($delay_builtin_func_p($x)) {
        throw new Exception("WIP");
    } elseif ($delay_apply_p($x)) {
        throw new Exception("WIP");
    }
    return $LANG_ERROR();
});
$delay_env = (function ($x = NULL) use (&$delay2delay_evaluate, &$delay_evaluate_env) {
    return $delay_evaluate_env($delay2delay_evaluate($x));
});
$delay_x = (function ($x = NULL) use (&$delay2delay_evaluate, &$delay_evaluate_x) {
    return $delay_evaluate_x($delay2delay_evaluate($x));
});
$force_uncomment1 = (function ($raw = NULL) use (&$comment_p, &$comment_x, &$force1) {
    if ($comment_p($raw)) {
        return $comment_x($raw);
    } else {
        return $force1($raw);
    }

});
$enviroment_null_v = $make_enviroment_null_v();
$enviroment_set = (function ($env = NULL, $key = NULL, $val = NULL) use (&$enviroment_set_helper, &$make_enviroment_null_v, &$run_trampoline) {
    $result = $make_enviroment_null_v();
    return $run_trampoline(
        $enviroment_set_helper($env, ((object)["array" => [$key]]), $val, $result, $result)
    );
});
$env_null_v = ((object)["array" => []]);
$val2env = (function ($x = NULL) use (&$__TS__ArrayPush, &$atom_equal_p, &$atom_p, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$equal_p, &$force_all, &$mapping_atom, &$null_p) {
    $x = $force_all($x);
    if (!($data_p($x))) {
        return false;
    }
    $s = $force_all($data_name($x));
    if (!($atom_p($s))) {
        return false;
    }
    if (!($atom_equal_p($s, $mapping_atom))) {
        return false;
    }
    $s = $force_all($data_list($x));
    if (!($construction_p($s))) {
        return false;
    }
    if (!($null_p($force_all($construction_tail($s))))) {
        return false;
    }
    $ret = ((object)["array" => []]);
    $xs = $force_all($construction_head($s));
    while (!($null_p($xs))) {
        if (!($construction_p($xs))) {
            return false;
        }
        $x_1 = $force_all($construction_head($xs));
        $xs = $force_all($construction_tail($xs));
        if (!($construction_p($x_1))) {
            return false;
        }
        $k = $construction_head($x_1);
        $x_1 = $force_all($construction_tail($x_1));
        if (!($construction_p($x_1))) {
            return false;
        }
        $v = $construction_head($x_1);
        if (!($null_p($force_all($construction_tail($x_1))))) {
            return false;
        }
        $not_breaked = true;
        
        {
            $i = 0;
            while (($i < (is_string($ret) ? strlen($ret) : count($ret->array)))) {
                if ($equal_p($ret->array[(($i + 0) + 0)], $k)) {
                    $ret->array[(($i + 1) + 0)] = $v;
                    $not_breaked = false;
                    break;
                }
                $i = ($i + 2);
            }
        }

        if ($not_breaked) {
            $__TS__ArrayPush($ret, $k, $v);
        }
    }
    return $ret;
});
$make_builtin_p_func = (function ($p_sym = NULL, $p_jsfunc = NULL) use (&$builtin_func_apply, &$delay_just_p, &$false_v, &$force1, &$true_v) {
    return ((object)[
        "array" => [
            $p_sym,
            1,
            (function ($x = NULL) use (&$builtin_func_apply, &$delay_just_p, &$false_v, &$force1, &$p_jsfunc, &$p_sym, &$true_v) {
                $x = $force1($x);
                if ($delay_just_p($x)) {
                    return $builtin_func_apply($p_sym, ((object)["array" => [$x]]));
                }
                if ($p_jsfunc($x)) {
                    return $true_v;
                }
                return $false_v;
            })
        ]
    ]);
});
$make_builtin_get_func = (function ($f_sym = NULL, $p_jsfunc = NULL, $f_jsfunc = NULL) use (&$builtin_func_apply, &$delay_just_p, &$force1) {
    return ((object)[
        "array" => [
            $f_sym,
            1,
            (function ($x = NULL, $error_v = NULL) use (&$builtin_func_apply, &$delay_just_p, &$f_jsfunc, &$f_sym, &$force1, &$p_jsfunc) {
                $x = $force1($x);
                if ($delay_just_p($x)) {
                    return $builtin_func_apply($f_sym, ((object)["array" => [$x]]));
                }
                if ($p_jsfunc($x)) {
                    return $f_jsfunc($x);
                }
                return $error_v();
            })
        ]
    ]);
});
$real_builtin_func_apply_s = ((object)[
    "array" => [
        $make_builtin_p_func($data_p_function_builtin_systemName, $data_p),
        ((object)["array" => [$new_data_function_builtin_systemName, 2, $new_data]]),
        $make_builtin_get_func($data_name_function_builtin_systemName, $data_p, $data_name),
        $make_builtin_get_func($data_list_function_builtin_systemName, $data_p, $data_list),
        $make_builtin_p_func($null_p_function_builtin_systemName, $null_p),
        ((object)["array" => [$new_construction_function_builtin_systemName, 2, $new_construction]]),
        $make_builtin_p_func($construction_p_function_builtin_systemName, $construction_p),
        $make_builtin_get_func(
            $construction_head_function_builtin_systemName,
            $construction_p,
            $construction_head
        ),
        $make_builtin_get_func(
            $construction_tail_function_builtin_systemName,
            $construction_p,
            $construction_tail
        ),
        ((object)[
            "array" => [
                $equal_p_function_builtin_systemName,
                2,
                (function ($x = NULL, $y = NULL, $error_v = NULL) use (&$LANG_ASSERT, &$LANG_ERROR, &$atom_equal_p, &$atom_p, &$builtin_func_apply, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay_just_p, &$equal_p_function_builtin_systemName, &$false_v, &$force1, &$if_function_builtin_systemName, &$null_p, &$true_v) {
                    if (($x === $y)) {
                        return $true_v;
                    }
                    $x = $force1($x);
                    $y = $force1($y);
                    if (($delay_just_p($x) || $delay_just_p($y))) {
                        return $builtin_func_apply($equal_p_function_builtin_systemName, ((object)["array" => [$x, $y]]));
                    }
                    if (($x === $y)) {
                        return $true_v;
                    }
                    $H_if = (function ($b = NULL, $xx = NULL, $yy = NULL) use (&$builtin_func_apply, &$if_function_builtin_systemName) {
                        return $builtin_func_apply($if_function_builtin_systemName, ((object)["array" => [$b, $xx, $yy]]));
                    });
                    $H_and = (function ($xx = NULL, $yy = NULL) use (&$H_if, &$false_v) {
                        return $H_if($xx, $yy, $false_v);
                    });
                    $LANG_ASSERT(!($delay_just_p($x)));
                    $end_2 = (function ($xx = NULL, $yy = NULL, $f1 = NULL, $f2 = NULL) use (&$H_and, &$builtin_func_apply, &$equal_p_function_builtin_systemName) {
                        return $H_and(
                            $builtin_func_apply($equal_p_function_builtin_systemName, ((object)["array" => [$f1($xx), $f1($yy)]])),
                            $builtin_func_apply($equal_p_function_builtin_systemName, ((object)["array" => [$f2($xx), $f2($yy)]]))
                        );
                    });
                    if ($null_p($x)) {
                        if (!($null_p($x))) {
                            return $false_v;
                        }
                        return $true_v;
                    } elseif ($atom_p($x)) {
                        if (!($atom_p($y))) {
                            return $false_v;
                        }
                        if ($atom_equal_p($x, $y)) {
                            return $true_v;
                        } else {
                            return $false_v;
                        }

                    } elseif ($data_p($x)) {
                        if (!($data_p($y))) {
                            return $false_v;
                        }
                        return $end_2($x, $y, $data_name, $data_list);
                    } elseif ($construction_p($x)) {
                        if (!($construction_p($y))) {
                            return $false_v;
                        }
                        return $end_2($x, $y, $construction_head, $construction_tail);
                    }
                    return $LANG_ERROR();
                })
            ]
        ]),
        ((object)[
            "array" => [
                $apply_function_builtin_systemName,
                2,
                (function ($f = NULL, $xs = NULL, $error_v = NULL) use (&$__TS__ArrayPush, &$apply, &$construction_head, &$construction_p, &$construction_tail, &$force_all, &$null_p) {
                    $jslist = ((object)["array" => []]);
                    $iter = $force_all($xs);
                    while ($construction_p($iter)) {
                        $__TS__ArrayPush($jslist, $construction_head($iter));
                        $iter = $force_all($construction_tail($iter));
                    }
                    if (!($null_p($iter))) {
                        return $error_v();
                    }
                    return $apply($f, $jslist);
                })
            ]
        ]),
        ((object)[
            "array" => [
                $evaluate_function_builtin_systemName,
                2,
                (function ($env = NULL, $x = NULL, $error_v = NULL) use (&$evaluate, &$val2env) {
                    $maybeenv = $val2env($env);
                    if (($maybeenv === false)) {
                        return $error_v();
                    }
                    return $evaluate($maybeenv, $x);
                })
            ]
        ]),
        $make_builtin_p_func($atom_p_function_builtin_systemName, $atom_p),
        ((object)[
            "array" => [
                $list_chooseOne_function_builtin_systemName,
                1,
                (function ($xs = NULL, $error_v = NULL) use (&$builtin_func_apply, &$construction_head, &$construction_p, &$delay_just_p, &$force1, &$list_chooseOne_function_builtin_systemName) {
                    $xs = $force1($xs);
                    if ($delay_just_p($xs)) {
                        return $builtin_func_apply($list_chooseOne_function_builtin_systemName, ((object)["array" => [$xs]]));
                    }
                    if (!($construction_p($xs))) {
                        return $error_v();
                    }
                    return $construction_head($xs);
                })
            ]
        ]),
        ((object)[
            "array" => [
                $if_function_builtin_systemName,
                3,
                (function ($b = NULL, $x = NULL, $y = NULL, $error_v = NULL) use (&$atom_equal_p, &$atom_p, &$builtin_func_apply, &$data_name, &$data_p, &$delay_just_p, &$false_atom, &$force1, &$force_all, &$if_function_builtin_systemName, &$true_atom) {
                    $b = $force1($b);
                    if ($delay_just_p($b)) {
                        return $builtin_func_apply($if_function_builtin_systemName, ((object)["array" => [$b, $x, $y]]));
                    }
                    if (!($data_p($b))) {
                        return $error_v();
                    }
                    $nam = $force_all($data_name($b));
                    if (!($atom_p($nam))) {
                        return $error_v();
                    }
                    if ($atom_equal_p($nam, $true_atom)) {
                        return $x;
                    }
                    if ($atom_equal_p($nam, $false_atom)) {
                        return $y;
                    }
                    return $error_v();
                })
            ]
        ]),
        ((object)["array" => [$comment_function_builtin_systemName, 2, $new_comment]])
    ]
]);
$jsbool_no_force_isomorphism_p = (function ($x = NULL, $y = NULL) use (&$LANG_ERROR, &$atom_equal_p, &$atom_p, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay_p, &$jsbool_no_force_isomorphism_p, &$lang_assert_equal_set_do, &$null_p, &$null_v, &$un_just_all) {
    if (($x === $y)) {
        return true;
    }
    $x = $un_just_all($x);
    $y = $un_just_all($y);
    if (($x === $y)) {
        return true;
    }
    $end_2 = (function ($xx = NULL, $yy = NULL, $f1 = NULL, $f2 = NULL) use (&$jsbool_no_force_isomorphism_p, &$lang_assert_equal_set_do) {
        if (($jsbool_no_force_isomorphism_p($f1($xx), $f1($yy)) &&
            $jsbool_no_force_isomorphism_p($f2($xx), $f2($yy)))) {
            $lang_assert_equal_set_do($xx, $yy);
            return true;
        } else {
            return false;
        }

    });
    if ($null_p($x)) {
        if (!($null_p($y))) {
            return false;
        }
        $lang_assert_equal_set_do($x, $null_v);
        $lang_assert_equal_set_do($y, $null_v);
        return true;
    } elseif ($atom_p($x)) {
        if (!($atom_p($y))) {
            return false;
        }
        return $atom_equal_p($x, $y);
    } elseif ($construction_p($x)) {
        if (!($construction_p($y))) {
            return false;
        }
        return $end_2($x, $y, $construction_head, $construction_tail);
    } elseif ($data_p($x)) {
        if (!($data_p($y))) {
            return false;
        }
        return $end_2($x, $y, $data_name, $data_list);
    } elseif ($delay_p($x)) {
        return false;
    }
    return $LANG_ERROR();
});
$complex_parse = (function ($x = NULL) use (&$LANG_ASSERT, &$__TS__ArrayPush, &$apply, &$atom_p, &$builtin_form_apply, &$builtin_func_apply, &$construction_head, &$construction_p, &$construction_tail, &$evaluate, &$form_atom, &$function_atom, &$hole_set_do, &$isOrNot_atom, &$jsArray_to_list, &$list_to_jsArray, &$new_atom, &$new_comment, &$new_construction, &$new_data, &$new_hole_do, &$new_list, &$null_p, &$null_v, &$something_atom, &$sub_atom, &$systemName_make, &$system_atom, &$theThing_atom, &$typeAnnotation_atom, &$val2env) {
    $state_const = NULL;
    $state = NULL;
    $eof = NULL;
    $get = NULL;
    $put = NULL;
    $parse_error = NULL;
    $a_space_p = NULL;
    $space = NULL;
    $atom = NULL;
    $readlist = NULL;
    $data = NULL;
    $readeval = NULL;
    $readfuncapply = NULL;
    $readformbuiltin = NULL;
    $readapply = NULL;
    $readcomment = NULL;
    $a_atom_p = NULL;
    $val = NULL;
    $un_maybe = NULL;
    $not_eof = NULL;
    $assert_get = NULL;
    $readsysname_no_pack_inner_must = NULL;
    $may_xfx_xf = NULL;
    $readsysname_no_pack = NULL;
    $readsysname = NULL;
    $eof = (function () use (&$state, &$state_const) {
        return ((is_string($state_const) ? strlen($state_const) : count($state_const->array)) ===
            $state);
    });
    $get = (function () use (&$LANG_ASSERT, &$eof, &$state, &$state_const) {
        $LANG_ASSERT(!($eof()));
        $lUaTmP_18_LuAtMp = ($state + 0);
        $ret = substr($state_const, $lUaTmP_18_LuAtMp, ($state + 1) - $lUaTmP_18_LuAtMp);
        $state = ($state + 1);
        return $ret;
    });
    $put = (function ($chr = NULL) use (&$LANG_ASSERT, &$state, &$state_const) {
        $lUaTmP_19_LuAtMp = ($state - 1);
        $LANG_ASSERT((substr($state_const, $lUaTmP_19_LuAtMp, $state - $lUaTmP_19_LuAtMp) === $chr));
        $state = ($state - 1);
    });
    $parse_error = (function ($x_1 = NULL) {
        if (($x_1 === NULL)) {
            $x_1 = "";
        }
        throw new Exception(("TheLanguage parse ERROR!" . ((string)$x_1)));
    });
    $a_space_p = (function ($chr = NULL) {
        return (((($chr === " ") || ($chr === "\n")) || ($chr === "\t")) || ($chr === "\r"));
    });
    $space = (function () use (&$a_space_p, &$eof, &$get, &$put) {
        if ($eof()) {
            return false;
        }
        $x_1 = $get();
        if (!($a_space_p($x_1))) {
            $put($x_1);
            return false;
        }
        while (($a_space_p($x_1) && !($eof()))) {
            $x_1 = $get();
        }
        if (!($a_space_p($x_1))) {
            $put($x_1);
        }
        return true;
    });
    $atom = (function () use (&$a_atom_p, &$eof, &$get, &$new_atom, &$put) {
        if ($eof()) {
            return false;
        }
        $x_1 = $get();
        $ret = "";
        if (!($a_atom_p($x_1))) {
            $put($x_1);
            return false;
        }
        while (($a_atom_p($x_1) && !($eof()))) {
            $ret = (((string)$ret) . ((string)$x_1));
            $x_1 = $get();
        }
        if ($a_atom_p($x_1)) {
            $ret = (((string)$ret) . ((string)$x_1));
        } else {
            $put($x_1);
        }

        return $new_atom($ret);
    });
    $readlist = (function () use (&$eof, &$get, &$hole_set_do, &$new_construction, &$new_hole_do, &$null_v, &$parse_error, &$put, &$space, &$val) {
        if ($eof()) {
            return false;
        }
        $x_1 = $get();
        if (($x_1 !== "(")) {
            $put($x_1);
            return false;
        }
        $ret_last = $new_hole_do();
        $ret = $ret_last;
        $last_add_do = (function ($val_1 = NULL) use (&$hole_set_do, &$new_construction, &$new_hole_do, &$ret_last) {
            $ret_last2 = $new_hole_do();
            $hole_set_do($ret_last, $new_construction($val_1, $ret_last2));
            $ret_last = $ret_last2;
        });
        while (true) {
            $space();
            if ($eof()) {
                return $parse_error();
            }
            $x_1 = $get();
            if (($x_1 === ")")) {
                $hole_set_do($ret_last, $null_v);
                return $ret;
            }
            if (($x_1 === ".")) {
                $space();
                $e = $val();
                $hole_set_do($ret_last, $e);
                $space();
                if ($eof()) {
                    return $parse_error();
                }
                $x_1 = $get();
                if (($x_1 !== ")")) {
                    return $parse_error();
                }
                return $ret;
            }
            $put($x_1);
            $e_1 = $val();
            $last_add_do($e_1);
        }
    });
    $data = (function () use (&$construction_head, &$construction_p, &$construction_tail, &$eof, &$get, &$new_data, &$parse_error, &$put, &$readlist) {
        if ($eof()) {
            return false;
        }
        $x_1 = $get();
        if (($x_1 !== "#")) {
            $put($x_1);
            return false;
        }
        $xs = $readlist();
        if (($xs === false)) {
            return $parse_error();
        }
        if (!($construction_p($xs))) {
            return $parse_error();
        }
        return $new_data($construction_head($xs), $construction_tail($xs));
    });
    $a_atom_p = (function ($chr = NULL) use (&$a_space_p) {
        if ($a_space_p($chr)) {
            return false;
        }
        $lUaTmP_20_LuAtMp = ((object)[
            "array" => ["(", ")", "!", "#", ".", "\$", "%", "^", "@", "~", "/", "-", ">", "_", ":", "?", "[", "]", "&", ";"]
        ]);
        $lUaTmP_21_LuAtMp = (is_string($lUaTmP_20_LuAtMp) ? strlen($lUaTmP_20_LuAtMp) : count($lUaTmP_20_LuAtMp->array));
        $lUaTmP_22_LuAtMp = 1;
        for ($lUa_I_LuA = 1; $lUaTmP_22_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_21_LuAtMp : $lUa_I_LuA >= $lUaTmP_21_LuAtMp; $lUa_I_LuA += $lUaTmP_22_LuAtMp) {
            $____ = $lUa_I_LuA;
            $v = $lUaTmP_20_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
            if (($v === $chr)) {
                return false;
            }
        }
        return true;
    });
    $val = (function () use (&$data, &$parse_error, &$readapply, &$readcomment, &$readeval, &$readformbuiltin, &$readfuncapply, &$readlist, &$readsysname, &$space) {
        $space();
        $fs = ((object)[
            "array" => [
                $readlist,
                $readsysname,
                $data,
                $readeval,
                $readfuncapply,
                $readformbuiltin,
                $readapply,
                $readcomment
            ]
        ]);
        $lUaTmP_23_LuAtMp = $fs;
        $lUaTmP_24_LuAtMp = (is_string($lUaTmP_23_LuAtMp) ? strlen($lUaTmP_23_LuAtMp) : count($lUaTmP_23_LuAtMp->array));
        $lUaTmP_25_LuAtMp = 1;
        for ($lUa_I_LuA = 1; $lUaTmP_25_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_24_LuAtMp : $lUa_I_LuA >= $lUaTmP_24_LuAtMp; $lUa_I_LuA += $lUaTmP_25_LuAtMp) {
            $____ = $lUa_I_LuA;
            $f = $lUaTmP_23_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
            $x_1 = $f();
            if (($x_1 !== false)) {
                return $x_1;
            }
        }
        return $parse_error();
    });
    $un_maybe = (function ($vl = NULL) use (&$parse_error) {
        if (($vl === false)) {
            return $parse_error();
        }
        return $vl;
    });
    $not_eof = (function () use (&$eof) {
        return !($eof());
    });
    $assert_get = (function ($c = NULL) use (&$get, &$not_eof, &$un_maybe) {
        $un_maybe($not_eof());
        $un_maybe(($get() === $c));
    });
    $readsysname_no_pack_inner_must = (function ($strict = NULL) use (&$assert_get, &$atom, &$data, &$parse_error, &$readapply, &$readcomment, &$readeval, &$readformbuiltin, &$readfuncapply, &$readlist, &$readsysname_no_pack, &$readsysname_no_pack_inner_must) {
        if (($strict === NULL)) {
            $strict = false;
        }
        $readsysname_no_pack_bracket = (function () use (&$assert_get, &$readsysname_no_pack_inner_must) {
            $assert_get("[");
            $x_1 = $readsysname_no_pack_inner_must();
            $assert_get("]");
            return $x_1;
        });
        $fs = NULL;
        if ($strict) {
            $fs = ((object)[
                "array" => [
                    $readlist,
                    $atom,
                    $readsysname_no_pack_bracket,
                    $data,
                    $readeval,
                    $readfuncapply,
                    $readformbuiltin,
                    $readapply,
                    $readcomment
                ]
            ]);
        } else {
            $fs = ((object)[
                "array" => [
                    $readlist,
                    $readsysname_no_pack,
                    $data,
                    $readeval,
                    $readfuncapply,
                    $readformbuiltin,
                    $readapply,
                    $readcomment
                ]
            ]);
        }

        $lUaTmP_26_LuAtMp = $fs;
        $lUaTmP_27_LuAtMp = (is_string($lUaTmP_26_LuAtMp) ? strlen($lUaTmP_26_LuAtMp) : count($lUaTmP_26_LuAtMp->array));
        $lUaTmP_28_LuAtMp = 1;
        for ($lUa_I_LuA = 1; $lUaTmP_28_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_27_LuAtMp : $lUa_I_LuA >= $lUaTmP_27_LuAtMp; $lUa_I_LuA += $lUaTmP_28_LuAtMp) {
            $____ = $lUa_I_LuA;
            $f = $lUaTmP_26_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
            $x_1 = $f();
            if (($x_1 !== false)) {
                return $x_1;
            }
        }
        return $parse_error();
    });
    $may_xfx_xf = (function ($vl = NULL) use (&$__TS__ArrayPush, &$eof, &$function_atom, &$get, &$isOrNot_atom, &$jsArray_to_list, &$new_construction, &$new_list, &$put, &$readsysname_no_pack_inner_must, &$something_atom, &$sub_atom, &$typeAnnotation_atom) {
        if ($eof()) {
            return $vl;
        }
        $head = $get();
        if (($head === ".")) {
            $y = $readsysname_no_pack_inner_must();
            return $new_list(
                $typeAnnotation_atom,
                $new_list($function_atom, $new_list($vl), $something_atom),
                $y
            );
        } elseif (($head === ":")) {
            $y_1 = $readsysname_no_pack_inner_must();
            return $new_list($typeAnnotation_atom, $y_1, $vl);
        } elseif (($head === "~")) {
            return $new_list($isOrNot_atom, $vl);
        } elseif (($head === "@")) {
            $y_2 = $readsysname_no_pack_inner_must();
            return $new_list(
                $typeAnnotation_atom,
                $new_list($function_atom, $new_construction($vl, $something_atom), $something_atom),
                $y_2
            );
        } elseif (($head === "?")) {
            return $new_list($typeAnnotation_atom, $function_atom, $new_list($isOrNot_atom, $vl));
        } elseif (($head === "/")) {
            $ys = ((object)["array" => [$vl]]);
            while (true) {
                $y_3 = $readsysname_no_pack_inner_must(true);
                $__TS__ArrayPush($ys, $y_3);
                if ($eof()) {
                    break;
                }
                $c0 = $get();
                if (($c0 !== "/")) {
                    $put($c0);
                    break;
                }
            }
            return $new_list($sub_atom, $jsArray_to_list($ys));
        } else {
            $put($head);
            return $vl;
        }

    });
    $readsysname_no_pack = (function () use (&$assert_get, &$atom, &$eof, &$form_atom, &$function_atom, &$get, &$may_xfx_xf, &$new_list, &$not_eof, &$put, &$readsysname_no_pack_inner_must, &$something_atom, &$system_atom, &$theThing_atom, &$typeAnnotation_atom, &$un_maybe) {
        if ($eof()) {
            return false;
        }
        $head = $get();
        if (($head === "&")) {
            $un_maybe($not_eof());
            $c0 = $get();
            if (($c0 === "+")) {
                $x_1 = $readsysname_no_pack_inner_must();
                return $new_list($form_atom, $new_list($system_atom, $x_1));
            } else {
                $put($c0);
            }

            $x_2 = $readsysname_no_pack_inner_must();
            return $new_list($form_atom, $x_2);
        } elseif (($head === ":")) {
            $un_maybe($not_eof());
            $c0_1 = $get();
            if (($c0_1 === "&")) {
                $assert_get(">");
                $x_3 = $readsysname_no_pack_inner_must();
                return $new_list(
                    $typeAnnotation_atom,
                    $new_list($form_atom, $new_list($function_atom, $something_atom, $x_3)),
                    $theThing_atom
                );
            } elseif (($c0_1 === ">")) {
                $x_4 = $readsysname_no_pack_inner_must();
                return $new_list(
                    $typeAnnotation_atom,
                    $new_list($function_atom, $something_atom, $x_4),
                    $theThing_atom
                );
            } else {
                $put($c0_1);
            }

            $x_5 = $readsysname_no_pack_inner_must();
            return $new_list($typeAnnotation_atom, $x_5, $theThing_atom);
        } elseif (($head === "+")) {
            $x_6 = $readsysname_no_pack_inner_must();
            return $new_list($system_atom, $x_6);
        } elseif (($head === "[")) {
            $x_7 = $readsysname_no_pack_inner_must();
            $assert_get("]");
            return $may_xfx_xf($x_7);
        } elseif (($head === "_")) {
            $assert_get(":");
            $x_8 = $readsysname_no_pack_inner_must();
            return $new_list($typeAnnotation_atom, $x_8, $something_atom);
        } else {
            $put($head);
            $x_9 = $atom();
            if (($x_9 === false)) {
                return false;
            }
            return $may_xfx_xf($x_9);
        }

    });
    $readsysname = (function () use (&$atom_p, &$readsysname_no_pack, &$systemName_make) {
        $x_1 = $readsysname_no_pack();
        if (($x_1 === false)) {
            return false;
        }
        if ($atom_p($x_1)) {
            return $x_1;
        }
        return $systemName_make($x_1);
    });
    $state_const = $x;
    $state = 0;
    $make_read_two = (function ($prefix = NULL, $k = NULL) use (&$construction_head, &$construction_p, &$construction_tail, &$eof, &$get, &$null_p, &$parse_error, &$put, &$readlist) {
        return (function () use (&$construction_head, &$construction_p, &$construction_tail, &$eof, &$get, &$k, &$null_p, &$parse_error, &$prefix, &$put, &$readlist) {
            if ($eof()) {
                return false;
            }
            $c = $get();
            if (($c !== $prefix)) {
                $put($c);
                return false;
            }
            $xs = $readlist();
            if (($xs === false)) {
                return $parse_error();
            }
            if (!($construction_p($xs))) {
                return $parse_error();
            }
            $x_1 = $construction_tail($xs);
            if (!(($construction_p($x_1) && $null_p($construction_tail($x_1))))) {
                return $parse_error();
            }
            return $k($construction_head($xs), $construction_head($x_1));
        });
    });
    $make_read_three = (function ($prefix = NULL, $k = NULL) use (&$construction_head, &$construction_p, &$construction_tail, &$eof, &$get, &$null_p, &$parse_error, &$put, &$readlist) {
        return (function () use (&$construction_head, &$construction_p, &$construction_tail, &$eof, &$get, &$k, &$null_p, &$parse_error, &$prefix, &$put, &$readlist) {
            if ($eof()) {
                return false;
            }
            $c = $get();
            if (($c !== $prefix)) {
                $put($c);
                return false;
            }
            $xs = $readlist();
            if (($xs === false)) {
                return $parse_error();
            }
            if (!($construction_p($xs))) {
                return $parse_error();
            }
            $x_1 = $construction_tail($xs);
            if (!($construction_p($x_1))) {
                return $parse_error();
            }
            $x_d = $construction_tail($x_1);
            if (!(($construction_p($x_d) && $null_p($construction_tail($x_d))))) {
                return $parse_error();
            }
            return $k($construction_head($xs), $construction_head($x_1), $construction_head($x_d));
        });
    });
    $readeval = $make_read_two(
        "\$",
        (function ($ev = NULL, $val_1 = NULL) use (&$evaluate, &$parse_error, &$val2env) {
            $env = $val2env($ev);
            if (($env === false)) {
                return $parse_error();
            }
            return $evaluate($env, $val_1);
        })
    );
    $readfuncapply = $make_read_two(
        "%",
        (function ($f = NULL, $xs = NULL) use (&$builtin_func_apply, &$list_to_jsArray, &$parse_error) {
            $jsxs = $list_to_jsArray($xs, (function ($v = NULL) {
                return $v;
            }), (function ($_1 = NULL, $_2 = NULL) use (&$parse_error) {
                return $parse_error();
            }));
            return $builtin_func_apply($f, $jsxs);
        })
    );
    $readformbuiltin = $make_read_three(
        "@",
        (function ($e = NULL, $f = NULL, $xs = NULL) use (&$builtin_form_apply, &$list_to_jsArray, &$parse_error, &$val2env) {
            $jsxs = $list_to_jsArray($xs, (function ($v = NULL) {
                return $v;
            }), (function ($_1 = NULL, $_2 = NULL) use (&$parse_error) {
                return $parse_error();
            }));
            $env = $val2env($e);
            if (($env === false)) {
                return $parse_error();
            }
            return $builtin_form_apply($env, $f, $jsxs);
        })
    );
    $readapply = $make_read_two(
        "^",
        (function ($f = NULL, $xs = NULL) use (&$apply, &$list_to_jsArray, &$parse_error) {
            $jsxs = $list_to_jsArray($xs, (function ($v = NULL) {
                return $v;
            }), (function ($_1 = NULL, $_2 = NULL) use (&$parse_error) {
                return $parse_error();
            }));
            return $apply($f, $jsxs);
        })
    );
    $readcomment = $make_read_two(";", (function ($comment = NULL, $x_1 = NULL) use (&$new_comment) {
        return $new_comment($comment, $x_1);
    }));
    return $val();
});
$complex_print = (function ($val = NULL) use (&$LANG_ERROR, &$atom_p, &$comment_comment, &$comment_p, &$comment_x, &$complex_parse, &$complex_print, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay_apply_f, &$delay_apply_p, &$delay_apply_xs, &$delay_builtin_form_env, &$delay_builtin_form_f, &$delay_builtin_form_p, &$delay_builtin_form_xs, &$delay_builtin_func_f, &$delay_builtin_func_p, &$delay_builtin_func_xs, &$delay_evaluate_env, &$delay_evaluate_p, &$delay_evaluate_x, &$env2val, &$form_atom, &$function_atom, &$isOrNot_atom, &$jsArray_to_list, &$jsbool_no_force_isomorphism_p, &$maybe_list_to_jsArray, &$name_atom, &$new_construction, &$null_p, &$simple_print, &$something_atom, &$sub_atom, &$systemName_make, &$system_atom, &$theThing_atom, &$typeAnnotation_atom, &$un_atom) {
    $print_sys_name = (function ($x = NULL, $is_inner_bool = NULL) use (&$atom_p, &$construction_head, &$construction_p, &$construction_tail, &$form_atom, &$function_atom, &$isOrNot_atom, &$jsbool_no_force_isomorphism_p, &$maybe_list_to_jsArray, &$print_sys_name, &$simple_print, &$something_atom, &$sub_atom, &$systemName_make, &$system_atom, &$theThing_atom, &$typeAnnotation_atom, &$un_atom) {
        if ($atom_p($x)) {
            return $un_atom($x);
        }
        $inner_bracket = (function ($vl = NULL) use (&$is_inner_bool) {
            if ($is_inner_bool) {
                return ("[" . (((string)$vl) . "]"));
            } else {
                return $vl;
            }

        });
        $maybe_xs = $maybe_list_to_jsArray($x);
        if (((($maybe_xs !== false) &&
            ((is_string($maybe_xs) ? strlen($maybe_xs) : count($maybe_xs->array)) === 3)) &&
            $jsbool_no_force_isomorphism_p($maybe_xs->array[0], $typeAnnotation_atom))) {
            $maybe_lst_2 = $maybe_list_to_jsArray($maybe_xs->array[1]);
            if (((($maybe_lst_2 !== false) &&
                ((is_string($maybe_lst_2) ? strlen($maybe_lst_2) : count($maybe_lst_2->array)) ===
                3)) &&
                $jsbool_no_force_isomorphism_p($maybe_lst_2->array[0], $function_atom))) {
                $var_2_1 = $maybe_lst_2->array[1];
                $maybe_lst_3 = $maybe_list_to_jsArray($var_2_1);
                if (((($maybe_lst_3 !== false) &&
                    ((is_string($maybe_lst_3) ? strlen($maybe_lst_3) : count($maybe_lst_3->array)) ===
                    1)) &&
                    $jsbool_no_force_isomorphism_p($maybe_lst_2->array[2], $something_atom))) {
                    return $inner_bracket((((string)$print_sys_name($maybe_lst_3->array[0], true)) .
                        ("." . ((string)$print_sys_name($maybe_xs->array[2], true)))));
                } elseif ((($construction_p($var_2_1) &&
                    $jsbool_no_force_isomorphism_p($construction_tail($var_2_1), $something_atom)) &&
                    $jsbool_no_force_isomorphism_p($maybe_lst_2->array[2], $something_atom))) {
                    return $inner_bracket((((string)$print_sys_name($construction_head($var_2_1), true)) .
                        ("@" . ((string)$print_sys_name($maybe_xs->array[2], true)))));
                } elseif (($jsbool_no_force_isomorphism_p($var_2_1, $something_atom) &&
                    $jsbool_no_force_isomorphism_p($maybe_xs->array[2], $theThing_atom))) {
                    return $inner_bracket((":>" . ((string)$print_sys_name($maybe_lst_2->array[2], true))));
                }
            }
            $maybe_lst_44 = $maybe_list_to_jsArray($maybe_xs->array[2]);
            if (((($jsbool_no_force_isomorphism_p($maybe_xs->array[1], $function_atom) &&
                ($maybe_lst_44 !== false)) &&
                ((is_string($maybe_lst_44) ? strlen($maybe_lst_44) : count($maybe_lst_44->array)) ===
                2)) &&
                $jsbool_no_force_isomorphism_p($maybe_lst_44->array[0], $isOrNot_atom))) {
                return $inner_bracket((((string)$print_sys_name($maybe_lst_44->array[1], true)) . "?"));
            }
            if ((((($maybe_lst_2 !== false) &&
                ((is_string($maybe_lst_2) ? strlen($maybe_lst_2) : count($maybe_lst_2->array)) ===
                2)) &&
                $jsbool_no_force_isomorphism_p($maybe_xs->array[2], $theThing_atom)) &&
                $jsbool_no_force_isomorphism_p($maybe_lst_2->array[0], $form_atom))) {
                $maybe_lst_88 = $maybe_list_to_jsArray($maybe_lst_2->array[1]);
                if ((((($maybe_lst_88 !== false) &&
                    ((is_string($maybe_lst_88) ? strlen($maybe_lst_88) : count($maybe_lst_88->array)) ===
                    3)) &&
                    $jsbool_no_force_isomorphism_p($maybe_lst_88->array[0], $function_atom)) &&
                    $jsbool_no_force_isomorphism_p($maybe_lst_88->array[1], $something_atom))) {
                    return $inner_bracket((":&>" . ((string)$print_sys_name($maybe_lst_88->array[2], true))));
                }
            }
            $hd = NULL;
            if ($jsbool_no_force_isomorphism_p($maybe_xs->array[2], $something_atom)) {
                $hd = "_";
            } elseif ($jsbool_no_force_isomorphism_p($maybe_xs->array[2], $theThing_atom)) {
                $hd = "";
            } else {
                $hd = $print_sys_name($maybe_xs->array[2], true);
            }

            return $inner_bracket((((string)$hd) . (":" . ((string)$print_sys_name($maybe_xs->array[1], true)))));
        } elseif ((($maybe_xs !== false) &&
            ((is_string($maybe_xs) ? strlen($maybe_xs) : count($maybe_xs->array)) === 2))) {
            if ($jsbool_no_force_isomorphism_p($maybe_xs->array[0], $form_atom)) {
                $maybe_lst_288 = $maybe_list_to_jsArray($maybe_xs->array[1]);
                if (((($maybe_lst_288 !== false) &&
                    ((is_string($maybe_lst_288) ? strlen($maybe_lst_288) : count($maybe_lst_288->array)) ===
                    2)) &&
                    $jsbool_no_force_isomorphism_p($maybe_lst_288->array[0], $system_atom))) {
                    return $inner_bracket(("&+" . ((string)$print_sys_name($maybe_lst_288->array[1], true))));
                }
                return $inner_bracket(("&" . ((string)$print_sys_name($maybe_xs->array[1], true))));
            } elseif ($jsbool_no_force_isomorphism_p($maybe_xs->array[0], $isOrNot_atom)) {
                return $inner_bracket((((string)$print_sys_name($maybe_xs->array[1], true)) . "~"));
            } elseif ($jsbool_no_force_isomorphism_p($maybe_xs->array[0], $system_atom)) {
                return $inner_bracket(("+" . ((string)$print_sys_name($maybe_xs->array[1], true))));
            } elseif ($jsbool_no_force_isomorphism_p($maybe_xs->array[0], $sub_atom)) {
                $maybe_lst_8934 = $maybe_list_to_jsArray($maybe_xs->array[1]);
                if ((($maybe_lst_8934 !== false) &&
                    ((is_string($maybe_lst_8934) ? strlen($maybe_lst_8934) : count($maybe_lst_8934->array)) >
                    1))) {
                    $tmp = $print_sys_name($maybe_lst_8934->array[0], true);
                    
                    {
                        $i = 1;
                        while (($i <
                            (is_string($maybe_lst_8934) ? strlen($maybe_lst_8934) : count($maybe_lst_8934->array)))) {
                            $tmp = (((string)$tmp) .
                                ("/" . ((string)$print_sys_name($maybe_lst_8934->array[($i + 0)], true))));
                            $i = ($i + 1);
                        }
                    }

                    return $inner_bracket($tmp);
                }
            }
        }
        if ($is_inner_bool) {
            return $simple_print($x);
        } else {
            return $simple_print($systemName_make($x));
        }

    });
    $x = $complex_parse($simple_print($val));
    $temp = "";
    $prefix = "";
    if ($null_p($x)) {
        return "()";
    } elseif ($construction_p($x)) {
        $temp = "(";
        $prefix = "";
        while ($construction_p($x)) {
            $temp = (((string)$temp) .
                (((string)$prefix) . ((string)$complex_print($construction_head($x)))));
            $prefix = " ";
            $x = $construction_tail($x);
        }
        if ($null_p($x)) {
            $temp = (((string)$temp) . ")");
        } else {
            $temp = (((string)$temp) . (" . " . (((string)$complex_print($x)) . ")")));
        }

        return $temp;
    } elseif ($data_p($x)) {
        $name = $data_name($x);
        $list = $data_list($x);
        $maybe_xs = $maybe_list_to_jsArray($list);
        if ((((($maybe_xs !== false) &&
            ((is_string($maybe_xs) ? strlen($maybe_xs) : count($maybe_xs->array)) === 2)) &&
            $jsbool_no_force_isomorphism_p($name, $name_atom)) &&
            $jsbool_no_force_isomorphism_p($maybe_xs->array[0], $system_atom))) {
            return $print_sys_name($maybe_xs->array[1], false);
        }
        return ("#" . ((string)$complex_print($new_construction($name, $list))));
    } elseif ($atom_p($x)) {
        return $un_atom($x);
    } elseif ($comment_p($x)) {
        return (";(" .
            (((string)$complex_print($comment_comment($x))) .
            (" " . (((string)$complex_print($comment_x($x))) . ")"))));
    } elseif ($delay_evaluate_p($x)) {
        return ("\$(" .
            (((string)$complex_print($env2val($delay_evaluate_env($x)))) .
            (" " . (((string)$complex_print($delay_evaluate_x($x))) . ")"))));
    } elseif ($delay_builtin_func_p($x)) {
        return ("%(" .
            (((string)$complex_print($delay_builtin_func_f($x))) .
            (" " .
            (((string)$complex_print($jsArray_to_list($delay_builtin_func_xs($x)))) . ")"))));
    } elseif ($delay_builtin_form_p($x)) {
        return ("@(" .
            (((string)$complex_print($env2val($delay_builtin_form_env($x)))) .
            (" " .
            (((string)$complex_print($delay_builtin_form_f($x))) .
            (" " .
            (((string)$complex_print($jsArray_to_list($delay_builtin_form_xs($x)))) . ")"))))));
    } elseif ($delay_apply_p($x)) {
        return ("^(" .
            (((string)$complex_print($delay_apply_f($x))) .
            (" " . (((string)$complex_print($jsArray_to_list($delay_apply_xs($x)))) . ")"))));
    }
    return $LANG_ERROR();
});
$machinetext_parse = (function ($rawstr = NULL) use (&$__TS__ArrayUnshift, &$evaluate, &$new_atom, &$new_construction, &$new_data, &$null_v, &$val2env) {
    $state = NULL;
    $is_eof = NULL;
    $is_not_eof = NULL;
    $is_eof = (function () use (&$state) {
        return ($state === 0);
    });
    $is_not_eof = (function () use (&$is_eof) {
        return !($is_eof());
    });
    $state = (is_string($rawstr) ? strlen($rawstr) : count($rawstr->array));
    $parse_error = (function ($x = NULL) {
        if (($x === NULL)) {
            $x = "";
        }
        throw new Exception(("MT parse ERROR " . ((string)$x)));
    });
    $parse_assert = (function ($x = NULL) use (&$parse_error) {
        if (!($x)) {
            return $parse_error();
        }
    });
    $get_do = (function () use (&$is_not_eof, &$parse_assert, &$rawstr, &$state) {
        $parse_assert($is_not_eof());
        $state = ($state - 1);
        $lUaTmP_29_LuAtMp = ($state + 0);
        return substr($rawstr, $lUaTmP_29_LuAtMp, ($state + 1) - $lUaTmP_29_LuAtMp);
    });
    $stack = ((object)["array" => []]);
    $conslike = (function ($c = NULL) use (&$__TS__ArrayUnshift, &$parse_error, &$stack) {
        $y = array_pop($stack->array);
        $x = array_pop($stack->array);
        if ((($x === NULL) || ($y === NULL))) {
            return $parse_error();
        } else {
            return $__TS__ArrayUnshift($stack, $c($x, $y));
        }

    });
    while ($is_not_eof()) {
        $chr = $get_do();
        if (($chr === "^")) {
            $tmp = "";
            while (true) {
                $chr_1 = $get_do();
                if (($chr_1 === "^")) {
                    break;
                }
                $tmp = (((string)$chr_1) . ((string)$tmp));
            }
            $__TS__ArrayUnshift($stack, $new_atom($tmp));
        } elseif (($chr === ".")) {
            $conslike($new_construction);
        } elseif (($chr === "#")) {
            $conslike($new_data);
        } elseif (($chr === "\$")) {
            $conslike(
                (function ($env = NULL, $val = NULL) use (&$evaluate, &$parse_error, &$val2env) {
                    $r_env = $val2env($env);
                    if (($r_env === false)) {
                        return $parse_error();
                    } else {
                        return $evaluate($r_env, $val);
                    }

                })
            );
        } elseif (($chr === "_")) {
            $__TS__ArrayUnshift($stack, $null_v);
        } else {
            return $parse_error();
        }

    }
    $parse_assert($is_eof());
    $parse_assert(((is_string($stack) ? strlen($stack) : count($stack->array)) === 1));
    return $stack->array[0];
});
$machinetext_print = (function ($x = NULL) use (&$LANG_ERROR, &$__TS__ArrayPush, &$atom_p, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$delay2delay_evaluate, &$delay_evaluate_env, &$delay_evaluate_x, &$delay_p, &$env2val, &$null_p, &$un_atom, &$un_just_all) {
    $stack = ((object)["array" => [$x]]);
    $result = "";
    while (((is_string($stack) ? strlen($stack) : count($stack->array)) !== 0)) {
        $new_stack = ((object)["array" => []]);
        $lUaTmP_30_LuAtMp = $stack;
        $lUaTmP_31_LuAtMp = (is_string($lUaTmP_30_LuAtMp) ? strlen($lUaTmP_30_LuAtMp) : count($lUaTmP_30_LuAtMp->array));
        $lUaTmP_32_LuAtMp = 1;
        for ($lUa_I_LuA = 1; $lUaTmP_32_LuAtMp >= 0 ? $lUa_I_LuA <= $lUaTmP_31_LuAtMp : $lUa_I_LuA >= $lUaTmP_31_LuAtMp; $lUa_I_LuA += $lUaTmP_32_LuAtMp) {
            $____ = $lUa_I_LuA;
            $x_1 = $lUaTmP_30_LuAtMp->array[(is_int($____) ? $____ - 1 : $____)];
            $x_1 = $un_just_all($x_1);
            $conslike = (function ($xx = NULL, $s = NULL, $g1 = NULL, $g2 = NULL) use (&$__TS__ArrayPush, &$new_stack, &$result) {
                $result = (((string)$result) . ((string)$s));
                return $__TS__ArrayPush($new_stack, $g1($xx), $g2($xx));
            });
            if ($atom_p($x_1)) {
                $result = (((string)$result) . ((string)("^" . (((string)$un_atom($x_1)) . "^"))));
            } elseif ($construction_p($x_1)) {
                $conslike($x_1, ".", $construction_head, $construction_tail);
            } elseif ($null_p($x_1)) {
                $result = (((string)$result) . ((string)"_"));
            } elseif ($data_p($x_1)) {
                $conslike($x_1, "#", $data_name, $data_list);
            } elseif ($delay_p($x_1)) {
                $y = $delay2delay_evaluate($x_1);
                $conslike($y, "\$", (function ($vl = NULL) use (&$delay_evaluate_env, &$env2val) {
                    return $env2val($delay_evaluate_env($vl));
                }), $delay_evaluate_x);
            } else {
                return $LANG_ERROR();
            }

        }
        $stack = $new_stack;
    }
    return $result;
});
$return_effect_systemName = $systemName_make($new_construction(
    $sub_atom,
    $new_construction($new_construction($effect_atom, $new_construction($new_construction(
        $typeAnnotation_atom,
        $new_construction($thing_atom, $new_construction($something_atom, $null_v))
    ), $null_v)), $null_v)
));
$bind_effect_systemName = $systemName_make($new_construction($sub_atom, $new_construction(
    $new_construction($effect_atom, $new_construction($construction_atom, $null_v)),
    $null_v
)));
$new_effect_bind = (function ($monad = NULL, $func = NULL) use (&$bind_effect_systemName, &$new_data, &$new_list) {
    return $new_data($bind_effect_systemName, $new_list($monad, $func));
});
$new_effect_return = (function ($x = NULL) use (&$new_data, &$return_effect_systemName) {
    return $new_data($return_effect_systemName, $x);
});
$run_monad_helper = (function (
    $return_handler = NULL,
    $op_handler = NULL,
    $code = NULL,
    $state = NULL,
    $next = NULL
) use (&$apply, &$bind_effect_systemName, &$construction_head, &$construction_p, &$construction_tail, &$data_list, &$data_name, &$data_p, &$equal_p, &$force_all, &$function_atom, &$make_quote, &$new_atom, &$new_data, &$new_list, &$null_p, &$return_effect_systemName, &$run_monad_helper, &$trampoline_delay) {
    if (($next === NULL)) {
        $next = false;
    }
    $make_bind = (function ($x = NULL, $f = NULL) {
        throw new Exception("WIP");
    });
    $code = $force_all($code);
    if ($data_p($code)) {
        $name = $data_name($code);
        $list = $data_list($code);
        if ($equal_p($name, $return_effect_systemName)) {
            $list = $force_all($list);
            if ($construction_p($list)) {
                $list_a = $construction_head($list);
                $list_d = $force_all($construction_tail($list));
                if ($null_p($list_d)) {
                    if (($next === false)) {
                        $upval_v = $list_a;
                        $upval_st = $state;
                        $r = (function () use (&$return_handler, &$upval_st, &$upval_v) {
                            return $return_handler($upval_v, $upval_st);
                        });
                        return $trampoline_delay($r);
                    } else {
                        $upval_rt = NULL;
                        $upval_rt = $return_handler;
                        $upval_op = NULL;
                        $upval_op = $op_handler;
                        $upval_v_1 = $list_a;
                        $upval_st_1 = $state;
                        $r_1 = (function () use (&$apply, &$next, &$run_monad_helper, &$upval_op, &$upval_rt, &$upval_st_1, &$upval_v_1) {
                            return $run_monad_helper($upval_rt, $upval_op, $apply($next, $upval_v_1), $upval_st_1);
                        });
                        return $trampoline_delay($r_1);
                    }

                }
            }
        } elseif ($equal_p($name, $bind_effect_systemName)) {
            $list = $force_all($list);
            if ($construction_p($list)) {
                $list_a_1 = $construction_head($list);
                $list_d_1 = $force_all($construction_tail($list));
                if ($construction_p($list_d_1)) {
                    $list_d_a = $construction_head($list_d_1);
                    $list_d_d = $force_all($construction_tail($list_d_1));
                    if ($null_p($list_d_d)) {
                        if (($next === false)) {
                            $upval_rt_1 = NULL;
                            $upval_rt_1 = $return_handler;
                            $upval_op_1 = NULL;
                            $upval_op_1 = $op_handler;
                            $upval_a = $list_a_1;
                            $upval_b = $list_d_a;
                            $upval_st_2 = $state;
                            $r_2 = (function () use (&$run_monad_helper, &$upval_a, &$upval_b, &$upval_op_1, &$upval_rt_1, &$upval_st_2) {
                                return $run_monad_helper($upval_rt_1, $upval_op_1, $upval_a, $upval_st_2, $upval_b);
                            });
                            return $trampoline_delay($r_2);
                        } else {
                            $upval_rt_2 = NULL;
                            $upval_rt_2 = $return_handler;
                            $upval_op_2 = NULL;
                            $upval_op_2 = $op_handler;
                            $upval_a_1 = $list_a_1;
                            $upval_b_1 = $list_d_a;
                            $upval_st_3 = $state;
                            $upval_nt = $next;
                            $x = $new_atom("序甲");
                            $r_3 = (function () use (&$function_atom, &$make_bind, &$make_quote, &$new_data, &$new_list, &$run_monad_helper, &$upval_a_1, &$upval_b_1, &$upval_nt, &$upval_op_2, &$upval_rt_2, &$upval_st_3, &$x) {
                                return $run_monad_helper(
                                    $upval_rt_2,
                                    $upval_op_2,
                                    $upval_a_1,
                                    $upval_st_3,
                                    $new_data($function_atom, $new_list(
                                        $new_list($x),
                                        $make_bind($new_list($make_quote($upval_b_1), $x), $make_quote($upval_nt))
                                    ))
                                );
                            });
                            return $trampoline_delay($r_3);
                        }

                    }
                }
            }
        }
    }
    if (($next === false)) {
        return $trampoline_delay((function () use (&$code, &$op_handler, &$return_handler, &$state) {
            return $op_handler($code, $state, $return_handler);
        }));
    } else {
        return $trampoline_delay(
            (function () use (&$apply, &$code, &$next, &$op_handler, &$return_handler, &$run_monad_helper, &$state, &$trampoline_delay) {
                return $op_handler(
                    $code,
                    $state,
                    (function ($val2 = NULL, $state2 = NULL) use (&$apply, &$next, &$op_handler, &$return_handler, &$run_monad_helper, &$trampoline_delay) {
                        return $trampoline_delay(
                            (function () use (&$apply, &$next, &$op_handler, &$return_handler, &$run_monad_helper, &$state2, &$val2) {
                                return $run_monad_helper(
                                    $return_handler,
                                    $op_handler,
                                    $apply($next, ((object)["array" => [$val2]])),
                                    $state2
                                );
                            })
                        );
                    })
                );
            })
        );
    }

});
$run_monad_trampoline = (function ($return_handler = NULL, $op_handler = NULL, $code = NULL, $state = NULL) use (&$run_monad_helper) {
    return $run_monad_helper($return_handler, $op_handler, $code, $state);
});
$run_monad_stackoverflow = (function ($return_handler = NULL, $op_handler = NULL, $code = NULL, $state = NULL) use (&$run_monad_helper, &$run_trampoline, &$trampoline_return) {
    return $run_trampoline(
        $run_monad_helper((function ($v = NULL, $s = NULL) use (&$return_handler, &$trampoline_return) {
            return $trampoline_return($return_handler($v, $s));
        }), (function ($op = NULL, $st = NULL, $rs = NULL) use (&$op_handler, &$run_trampoline, &$trampoline_return) {
            return $trampoline_return(
                $op_handler($op, $st, (function ($v = NULL, $s = NULL) use (&$rs, &$run_trampoline) {
                    return $run_trampoline($rs($v, $s));
                }))
            );
        }), $code, $state)
    );
});
$____exports = ((object)["array" => []]);
$____exports->array["trampoline_return"] = $trampoline_return;
$____exports->array["trampoline_delay"] = $trampoline_delay;
$____exports->array["run_trampoline"] = $run_trampoline;
$____exports->array["new_comment"] = $new_comment;
$____exports->array["comment_p"] = $comment_p;
$____exports->array["comment_comment"] = $comment_comment;
$____exports->array["comment_x"] = $comment_x;
$____exports->array["un_comment_all"] = $un_comment_all;
$____exports->array["new_atom"] = $new_atom;
$____exports->array["atom_p"] = $atom_p;
$____exports->array["un_atom"] = $un_atom;
$____exports->array["atom_equal_p"] = $atom_equal_p;
$____exports->array["new_construction"] = $new_construction;
$____exports->array["construction_p"] = $construction_p;
$____exports->array["construction_head"] = $construction_head;
$____exports->array["construction_tail"] = $construction_tail;
$____exports->array["null_v"] = $null_v;
$____exports->array["null_p"] = $null_p;
$____exports->array["new_data"] = $new_data;
$____exports->array["data_p"] = $data_p;
$____exports->array["data_name"] = $data_name;
$____exports->array["data_list"] = $data_list;
$____exports->array["just_p"] = $just_p;
$____exports->array["evaluate"] = $evaluate;
$____exports->array["apply"] = $apply;
$____exports->array["force_all_rec"] = $force_all_rec;
$____exports->array["force_uncomment_all_rec"] = $force_uncomment_all_rec;
$____exports->array["unlazy_all_rec"] = $unlazy_all_rec;
$____exports->array["jsArray_to_list"] = $jsArray_to_list;
$____exports->array["maybe_list_to_jsArray"] = $maybe_list_to_jsArray;
$____exports->array["new_list"] = $new_list;
$____exports->array["un_just_all"] = $un_just_all;
$____exports->array["un_just_comment_all"] = $un_just_comment_all;
$____exports->array["delay_p"] = $delay_p;
$____exports->array["delay_just_p"] = $delay_just_p;
$____exports->array["lazy_p"] = $lazy_p;
$____exports->array["delay_env"] = $delay_env;
$____exports->array["delay_x"] = $delay_x;
$____exports->array["force_all"] = $force_all;
$____exports->array["force1"] = $force1;
$____exports->array["force_uncomment1"] = $force_uncomment1;
$____exports->array["force_uncomment_all"] = $force_uncomment_all;
$____exports->array["unlazy1"] = $unlazy1;
$____exports->array["env_null_v"] = $env_null_v;
$____exports->array["env_set"] = $env_set;
$____exports->array["env_get"] = $env_get;
$____exports->array["env2val"] = $env2val;
$____exports->array["env_foreach"] = $env_foreach;
$____exports->array["val2env"] = $val2env;
$____exports->array["equal_p"] = $equal_p;
$____exports->array["simple_print"] = $simple_print;
$____exports->array["complex_parse"] = $complex_parse;
$____exports->array["complex_print"] = $complex_print;
$____exports->array["machinetext_parse"] = $machinetext_parse;
$____exports->array["machinetext_print"] = $machinetext_print;
$____exports->array["return_effect_systemName"] = $return_effect_systemName;
$____exports->array["bind_effect_systemName"] = $bind_effect_systemName;
$____exports->array["new_effect_bind"] = $new_effect_bind;
$____exports->array["new_effect_return"] = $new_effect_return;
$____exports->array["run_monad_trampoline"] = $run_monad_trampoline;
$____exports->array["run_monad_stackoverflow"] = $run_monad_stackoverflow;
