# Generated by make.rkt
__all__ = ['__esModule', 'new_symbol', 'symbol_p', 'un_symbol', 'new_construction', 'construction_p', 'construction_head', 'construction_tail', 'null_v', 'null_p', 'new_data', 'data_p', 'data_name', 'data_list', 'new_error', 'error_p', 'error_name', 'error_list', 'evaluate', 'apply', 'force_all_rec', 'system_symbol', 'name_symbol', 'function_symbol', 'form_symbol', 'equal_symbol', 'evaluate_sym', 'theThing_symbol', 'something_symbol', 'mapping_symbol', 'if_symbol', 'typeAnnotation_symbol', 'isOrNot_symbol', 'sub_symbol', 'true_symbol', 'false_symbol', 'quote_symbol', 'apply_symbol', 'null_symbol', 'construction_symbol', 'data_symbol', 'error_symbol', 'symbol_symbol', 'list_symbol', 'head_symbol', 'tail_symbol', 'thing_symbol', 'theWorldStopped_symbol', 'effect_symbol', 'sequentialWordFormation_symbol', 'inputOutput_symbol', 'new_data_function_builtin_systemName', 'data_name_function_builtin_systemName', 'data_list_function_builtin_systemName', 'data_p_function_builtin_systemName', 'new_error_function_builtin_systemName', 'error_name_function_builtin_systemName', 'error_list_function_builtin_systemName', 'error_p_function_builtin_systemName', 'new_construction_function_builtin_systemName', 'construction_p_function_builtin_systemName', 'construction_head_function_builtin_systemName', 'construction_tail_function_builtin_systemName', 'symbol_p_function_builtin_systemName', 'null_p_function_builtin_systemName', 'equal_p_function_builtin_systemName', 'apply_function_builtin_systemName', 'evaluate_function_builtin_systemName', 'list_chooseOne_function_builtin_systemName', 'if_function_builtin_systemName', 'quote_form_builtin_systemName', 'lambda_form_builtin_systemName', 'function_builtin_use_systemName', 'form_builtin_use_systemName', 'form_use_systemName', 'jsArray_to_list', 'maybe_list_to_jsArray', 'new_list', 'delay_p', 'force_all', 'force1', 'env_null_v', 'env_set', 'env_get', 'env2val', 'env_foreach', 'val2env', 'equal_p', 'simple_print', 'simple_print_force_all_rec', 'simple_parse', 'complex_parse', 'complex_print']

# Don't look below, you will not understand this Python code :) I don't.

from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers([u'simple_parse', u'env_set', u'builtin_form_apply', u'mapping_symbol', u'new_list', u'evaluate_function_builtin_systemName', u'error_symbol', u'equal_p_function_builtin_systemName', u'real_evaluate', u'error_name_function_builtin_systemName', u'system_symbol', u'error_list', u'new_error', u'exports', u'inputOutput_symbol', u'evaluate', u'must_env_get', u'make_builtin_f_get_sym_f', u'head_symbol', u'new_error_function_builtin_systemName', u'make_builtin_get_func', u'env_foreach', u'val2env', u'list_chooseOne_function_builtin_systemName', u'real_builtin_func_apply_s', u'env_null_v', u'function_builtin_use_systemName', u'list_to_jsArray', u'maybe_list_to_jsArray', u'env2val', u'list_symbol', u'form_symbol', u'theThing_symbol', u'real_builtin_func_apply', u'un_just', u'name_symbol', u'effect_symbol', u'delay_builtin_func_xs', u'false_v', u'error_name', u'null_p', u'null_t', u'true_v', u'null_v', u'make_builtin_f_new_sym_f', u'just_t', u'jsArray_to_list', u'just_p', u'new_construction', u'data_name_function_builtin_systemName', u'name_p', u'delay_builtin_func_f', u'complex_parse', u'make_builtin_p_func', u'apply_function_builtin_systemName', u'the_world_stopped_v', u'ERROR', u'delay_builtin_func_t', u'if_symbol', u'delay_builtin_func_p', u'construction_head_function_builtin_systemName', u'jsbool_equal_p', u'delay_builtin_form_t', u'false_symbol', u'delay_builtin_form_p', u'delay_evaluate_t', u'if_function_builtin_systemName', u'delay_evaluate_p', u'un_just_all', u'lang_set_do', u'delay_builtin_form_f', u'delay_evaluate_x', u'jsbool_no_force_equal_p', u'null_p_function_builtin_systemName', u'sequentialWordFormation_symbol', u'symbol_p', u'delay_apply_f', u'data_name', u'delay_builtin_form_env', u'symbol_t', u'symbol_equal_p', u'make_builtin_f_p_sym_f', u'delay_apply_t', u'apply', u'delay_apply_p', u'new_construction_function_builtin_systemName', u'something_symbol', u'real_apply', u'data_p', u'data_t', u'new_symbol', u'force_all', u'new_data', u'complex_print', u'force_all_rec', u'simple_print', u'real_builtin_form_apply', u'isOrNot_symbol', u'new_data_function_builtin_systemName', u'any_delay_just_p', u'data_symbol', u'env_get', u'sub_symbol', u'systemName_make', u'construction_head', u'lambda_form_builtin_systemName', u'construction_p', u'construction_t', u'form_builtin_use_systemName', u'construction_tail', u'error_p_function_builtin_systemName', u'ASSERT', u'null_symbol', u'function_symbol', u'error_list_function_builtin_systemName', u'simple_print_force_all_rec', u'error_t', u'construction_tail_function_builtin_systemName', u'symbol_symbol', u'quote_symbol', u'error_p', u'data_list', u'theWorldStopped_symbol', u'construction_symbol', u'data_list_function_builtin_systemName', u'apply_symbol', u'form_use_systemName', u'builtin_func_apply', u'tail_symbol', u'thing_symbol', u'evaluate_sym', u'data_p_function_builtin_systemName', u'construction_p_function_builtin_systemName', u'delay_evaluate_env', u'new_lambda', u'un_symbol', u'symbol_p_function_builtin_systemName', u'typeAnnotation_symbol', u'true_symbol', u'quote_form_builtin_systemName', u'force1', u'delay_apply_xs', u'equal_symbol', u'delay_builtin_form_xs'])
@Js
def PyJsHoisted_real_builtin_func_apply_(f, xs, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'f':f}, var)
    var.registers([u'f', u'i', u'error_v', u'actually_length', u'f_1', u'xs'])
    var.put(u'error_v', var.get(u'new_error')(var.get(u'system_symbol'), var.get(u'new_list')(var.get(u'function_builtin_use_systemName'), var.get(u'new_list')(var.get(u'f'), var.get(u'jsArray_to_list')(var.get(u'xs'))))))
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'real_builtin_func_apply_s').get(u'length')):
        try:
            if var.get(u'jsbool_equal_p')(var.get(u'f'), var.get(u'real_builtin_func_apply_s').get(var.get(u'i')).get(u'0')):
                var.put(u'actually_length', var.get(u'real_builtin_func_apply_s').get(var.get(u'i')).get(u'1'))
                if PyJsStrictNeq(var.get(u'xs').get(u'length'),var.get(u'actually_length')):
                    return var.get(u'error_v')
                var.put(u'f_1', var.get(u'real_builtin_func_apply_s').get(var.get(u'i')).get(u'2'))
                if PyJsStrictEq(var.get(u'actually_length'),Js(1.0)):
                    return var.get(u'f_1')(var.get(u'xs').get(u'0'), var.get(u'error_v'))
                else:
                    if PyJsStrictEq(var.get(u'actually_length'),Js(2.0)):
                        return var.get(u'f_1')(var.get(u'xs').get(u'0'), var.get(u'xs').get(u'1'), var.get(u'error_v'))
                    else:
                        if PyJsStrictEq(var.get(u'actually_length'),Js(3.0)):
                            return var.get(u'f_1')(var.get(u'xs').get(u'0'), var.get(u'xs').get(u'1'), var.get(u'xs').get(u'2'), var.get(u'error_v'))
                return var.get(u'ERROR')()
        finally:
                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    return var.get(u'error_v')
PyJsHoisted_real_builtin_func_apply_.func_name = u'real_builtin_func_apply'
var.put(u'real_builtin_func_apply', PyJsHoisted_real_builtin_func_apply_)
@Js
def PyJsHoisted_new_lambda_(env, args_pat, body, error_v, this, arguments, var=var):
    var = Scope({u'body':body, u'args_pat':args_pat, u'env':env, u'this':this, u'error_v':error_v, u'arguments':arguments}, var)
    var.registers([u'body', u'args_pat', u'args_pat_is_dot', u'i', u'make_quote', u'make_error_v', u'args_pat_vars', u'env', u'args_pat_vars_val', u'new_args_pat', u'error_v', u'new_args', u'env_vars', u'args_pat_iter'])
    @Js
    def PyJsHoisted_make_quote_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'x'])
        return var.get(u'new_list')(var.get(u'form_builtin_use_systemName'), var.get(u'quote_form_builtin_systemName'), var.get(u'x'))
    PyJsHoisted_make_quote_.func_name = u'make_quote'
    var.put(u'make_quote', PyJsHoisted_make_quote_)
    @Js
    def PyJsHoisted_make_error_v_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        if PyJsStrictEq(var.get(u'error_v'),Js(False)):
            return var.get(u'new_error')(var.get(u'system_symbol'), var.get(u'new_list')(var.get(u'form_builtin_use_systemName'), var.get(u'new_list')(var.get(u'env2val')(var.get(u'env')), var.get(u'lambda_form_builtin_systemName'), var.get(u'jsArray_to_list')(Js([var.get(u'args_pat'), var.get(u'body')])))))
        else:
            return var.get(u'error_v')
    PyJsHoisted_make_error_v_.func_name = u'make_error_v'
    var.put(u'make_error_v', PyJsHoisted_make_error_v_)
    if PyJsStrictEq(var.get(u'error_v'),PyJsComma(Js(0.0), Js(None))):
        var.put(u'error_v', Js(False))
    pass
    pass
    var.put(u'args_pat', var.get(u'force_all_rec')(var.get(u'args_pat')))
    var.put(u'args_pat_vars', Js([]))
    var.put(u'args_pat_is_dot', Js(False))
    var.put(u'args_pat_iter', var.get(u'args_pat'))
    while var.get(u'null_p')(var.get(u'args_pat_iter')).neg():
        if var.get(u'name_p')(var.get(u'args_pat_iter')):
            var.get(u'args_pat_vars').callprop(u'push', var.get(u'args_pat_iter'))
            var.put(u'args_pat_is_dot', Js(True))
            var.put(u'args_pat_iter', var.get(u'null_v'))
        else:
            if var.get(u'construction_p')(var.get(u'args_pat_iter')):
                var.get(u'args_pat_vars').callprop(u'push', var.get(u'construction_head')(var.get(u'args_pat_iter')))
                var.put(u'args_pat_iter', var.get(u'construction_tail')(var.get(u'args_pat_iter')))
            else:
                return var.get(u'make_error_v')()
    var.put(u'args_pat_vars_val', var.get(u'args_pat'))
    if var.get(u'args_pat_is_dot'):
        var.put(u'args_pat_vars_val', var.get(u'jsArray_to_list')(var.get(u'args_pat_vars')))
    var.put(u'env_vars', Js([]))
    @Js
    def PyJs_anonymous_13_(k, v, this, arguments, var=var):
        var = Scope({u'this':this, u'k':k, u'arguments':arguments, u'v':v}, var)
        var.registers([u'i', u'k', u'v'])
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'args_pat_vars').get(u'length')):
            try:
                if var.get(u'jsbool_equal_p')(var.get(u'args_pat_vars').get(var.get(u'i')), var.get(u'k')):
                    return var.get('undefined')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.get(u'env_vars').callprop(u'push', var.get(u'k'))
    PyJs_anonymous_13_._set_name(u'anonymous')
    var.get(u'env_foreach')(var.get(u'env'), PyJs_anonymous_13_)
    var.put(u'new_args_pat', var.get(u'args_pat_vars_val'))
    #for JS loop
    var.put(u'i', (var.get(u'env_vars').get(u'length')-Js(1.0)))
    while (var.get(u'i')>=Js(0.0)):
        try:
            var.put(u'new_args_pat', var.get(u'new_construction')(var.get(u'env_vars').get(var.get(u'i')), var.get(u'new_args_pat')))
        finally:
                (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
    var.put(u'new_args', var.get(u'args_pat_vars_val'))
    #for JS loop
    var.put(u'i', (var.get(u'env_vars').get(u'length')-Js(1.0)))
    while (var.get(u'i')>=Js(0.0)):
        try:
            var.put(u'new_args', var.get(u'new_construction')(var.get(u'make_quote')(var.get(u'must_env_get')(var.get(u'env'), var.get(u'env_vars').get(var.get(u'i')))), var.get(u'new_args')))
        finally:
                (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
    return var.get(u'new_data')(var.get(u'function_symbol'), var.get(u'new_list')(var.get(u'args_pat'), var.get(u'new_construction')(var.get(u'make_quote')(var.get(u'new_data')(var.get(u'function_symbol'), var.get(u'new_list')(var.get(u'new_args_pat'), var.get(u'body')))), var.get(u'new_args'))))
PyJsHoisted_new_lambda_.func_name = u'new_lambda'
var.put(u'new_lambda', PyJsHoisted_new_lambda_)
@Js
def PyJsHoisted_force_all_(raw, parents_history, ref_novalue_replace, this, arguments, var=var):
    var = Scope({u'ref_novalue_replace':ref_novalue_replace, u'raw':raw, u'this':this, u'arguments':arguments, u'parents_history':parents_history}, var)
    var.registers([u'x_id', u'make_history', u'i', u'f', u'is_elim', u'ref_novalue_replace', u'raw', u'do_rewrite_force_all', u'inner', u'replace_this_with_stopped', u'xs', u'tf', u'x', u'xs_1', u'elim_s', u'parents_history', u'history'])
    @Js
    def PyJsHoisted_replace_this_with_stopped_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'i'])
        var.get(u'ref_novalue_replace').put(u'1', Js(True))
        var.get(u'lang_set_do')(var.get(u'x'), var.get(u'the_world_stopped_v'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'xs').get(u'length')):
            try:
                var.get(u'lang_set_do')(var.get(u'xs').get(var.get(u'i')), var.get(u'the_world_stopped_v'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'the_world_stopped_v')
    PyJsHoisted_replace_this_with_stopped_.func_name = u'replace_this_with_stopped'
    var.put(u'replace_this_with_stopped', PyJsHoisted_replace_this_with_stopped_)
    @Js
    def PyJsHoisted_do_rewrite_force_all_(newval, this, arguments, var=var):
        var = Scope({u'this':this, u'newval':newval, u'arguments':arguments}, var)
        var.registers([u'i', u'newval'])
        var.get(u'lang_set_do')(var.get(u'x'), var.get(u'newval'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'xs').get(u'length')):
            try:
                var.get(u'lang_set_do')(var.get(u'xs').get(var.get(u'i')), var.get(u'newval'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        if var.get(u'any_delay_just_p')(var.get(u'newval')):
            var.put(u'newval', var.get(u'force_all')(var.get(u'newval')))
            var.get(u'lang_set_do')(var.get(u'x'), var.get(u'newval'))
            #for JS loop
            var.put(u'i', Js(0.0))
            while (var.get(u'i')<var.get(u'xs').get(u'length')):
                try:
                    var.get(u'lang_set_do')(var.get(u'xs').get(var.get(u'i')), var.get(u'newval'))
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'newval')
    PyJsHoisted_do_rewrite_force_all_.func_name = u'do_rewrite_force_all'
    var.put(u'do_rewrite_force_all', PyJsHoisted_do_rewrite_force_all_)
    @Js
    def PyJsHoisted_make_history_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x_id', u'ret'])
        PyJs_Object_5_ = Js({})
        var.put(u'ret', PyJs_Object_5_)
        for PyJsTemp in var.get(u'history'):
            var.put(u'x_id', PyJsTemp)
            var.get(u'ret').put(var.get(u'x_id'), Js(True))
        for PyJsTemp in var.get(u'parents_history'):
            var.put(u'x_id', PyJsTemp)
            var.get(u'ret').put(var.get(u'x_id'), Js(True))
        return var.get(u'ret')
    PyJsHoisted_make_history_.func_name = u'make_history'
    var.put(u'make_history', PyJsHoisted_make_history_)
    if PyJsStrictEq(var.get(u'parents_history'),PyJsComma(Js(0.0), Js(None))):
        PyJs_Object_3_ = Js({})
        var.put(u'parents_history', PyJs_Object_3_)
    if PyJsStrictEq(var.get(u'ref_novalue_replace'),PyJsComma(Js(0.0), Js(None))):
        var.put(u'ref_novalue_replace', Js([Js(False), Js(False)]))
    PyJs_Object_4_ = Js({})
    var.put(u'history', PyJs_Object_4_)
    var.put(u'x', var.get(u'raw'))
    var.put(u'xs', Js([]))
    pass
    pass
    pass
    while var.get(u'any_delay_just_p')(var.get(u'x')):
        var.put(u'x_id', var.get(u'simple_print')(var.get(u'x')))
        if PyJsStrictEq(var.get(u'parents_history').get(var.get(u'x_id')),Js(True)):
            return var.get(u'replace_this_with_stopped')()
        if PyJsStrictEq(var.get(u'history').get(var.get(u'x_id')),Js(True)):
            var.get(u'ref_novalue_replace').put(u'0', Js(True))
            if var.get(u'delay_evaluate_p')(var.get(u'x')):
                return var.get(u'replace_this_with_stopped')()
            else:
                if var.get(u'delay_builtin_func_p')(var.get(u'x')):
                    var.put(u'f', var.get(u'delay_builtin_func_f')(var.get(u'x')))
                    var.put(u'xs_1', var.get(u'delay_builtin_func_xs')(var.get(u'x')))
                    var.put(u'elim_s', Js([var.get(u'data_name_function_builtin_systemName'), var.get(u'data_list_function_builtin_systemName'), var.get(u'data_p_function_builtin_systemName'), var.get(u'error_name_function_builtin_systemName'), var.get(u'error_list_function_builtin_systemName'), var.get(u'error_p_function_builtin_systemName'), var.get(u'construction_p_function_builtin_systemName'), var.get(u'construction_head_function_builtin_systemName'), var.get(u'construction_tail_function_builtin_systemName'), var.get(u'symbol_p_function_builtin_systemName'), var.get(u'null_p_function_builtin_systemName')]))
                    var.put(u'is_elim', Js(False))
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'elim_s').get(u'length')):
                        try:
                            if var.get(u'jsbool_equal_p')(var.get(u'elim_s').get(var.get(u'i')), var.get(u'f')):
                                var.put(u'is_elim', Js(True))
                        finally:
                                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                    if var.get(u'is_elim'):
                        var.get(u'ASSERT')(PyJsStrictEq(var.get(u'xs_1').get(u'length'),Js(1.0)))
                        var.get(u'ASSERT')(PyJsStrictEq(var.get(u'ref_novalue_replace').get(u'1'),Js(False)))
                        var.put(u'inner', var.get(u'force_all')(var.get(u'xs_1').get(u'0'), var.get(u'make_history')(), var.get(u'ref_novalue_replace')))
                        if var.get(u'ref_novalue_replace').get(u'1'):
                            return var.get(u'do_rewrite_force_all')(var.get(u'builtin_func_apply')(var.get(u'f'), Js([var.get(u'inner')])))
                        else:
                            return var.get(u'ERROR')()
                    if var.get(u'jsbool_equal_p')(var.get(u'f'), var.get(u'equal_p_function_builtin_systemName')):
                        return var.get(u'replace_this_with_stopped')()
                    else:
                        if var.get(u'jsbool_equal_p')(var.get(u'f'), var.get(u'apply_function_builtin_systemName')):
                            return var.get(u'replace_this_with_stopped')()
                        else:
                            if var.get(u'jsbool_equal_p')(var.get(u'f'), var.get(u'evaluate_function_builtin_systemName')):
                                return var.get(u'replace_this_with_stopped')()
                            else:
                                if var.get(u'jsbool_equal_p')(var.get(u'f'), var.get(u'if_function_builtin_systemName')):
                                    var.get(u'ASSERT')(PyJsStrictEq(var.get(u'xs_1').get(u'length'),Js(3.0)))
                                    var.get(u'ASSERT')(PyJsStrictEq(var.get(u'ref_novalue_replace').get(u'1'),Js(False)))
                                    var.put(u'tf', var.get(u'force_all')(var.get(u'xs_1').get(u'0'), var.get(u'make_history')(), var.get(u'ref_novalue_replace')))
                                    if var.get(u'ref_novalue_replace').get(u'1'):
                                        return var.get(u'do_rewrite_force_all')(var.get(u'builtin_func_apply')(var.get(u'if_function_builtin_systemName'), Js([var.get(u'tf'), var.get(u'xs_1').get(u'1'), var.get(u'xs_1').get(u'2')])))
                                    else:
                                        return var.get(u'ERROR')()
                    return var.get(u'ERROR')()
                else:
                    if var.get(u'delay_builtin_form_p')(var.get(u'x')):
                        return var.get(u'replace_this_with_stopped')()
                    else:
                        if var.get(u'delay_apply_p')(var.get(u'x')):
                            return var.get(u'replace_this_with_stopped')()
            return var.get(u'ERROR')()
        var.get(u'history').put(var.get(u'x_id'), Js(True))
        var.get(u'xs').callprop(u'push', var.get(u'x'))
        var.put(u'x', var.get(u'force1')(var.get(u'x')))
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'xs').get(u'length')):
        try:
            var.get(u'lang_set_do')(var.get(u'xs').get(var.get(u'i')), var.get(u'x'))
        finally:
                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    return var.get(u'x')
PyJsHoisted_force_all_.func_name = u'force_all'
var.put(u'force_all', PyJsHoisted_force_all_)
@Js
def PyJsHoisted_symbol_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),Js(0.0))
PyJsHoisted_symbol_p_.func_name = u'symbol_p'
var.put(u'symbol_p', PyJsHoisted_symbol_p_)
@Js
def PyJsHoisted_delay_apply_f_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_delay_apply_f_.func_name = u'delay_apply_f'
var.put(u'delay_apply_f', PyJsHoisted_delay_apply_f_)
@Js
def PyJsHoisted_data_name_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_data_name_.func_name = u'data_name'
var.put(u'data_name', PyJsHoisted_data_name_)
@Js
def PyJsHoisted_delay_builtin_form_env_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_delay_builtin_form_env_.func_name = u'delay_builtin_form_env'
var.put(u'delay_builtin_form_env', PyJsHoisted_delay_builtin_form_env_)
@Js
def PyJsHoisted_builtin_form_apply_(x, y, z, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'z':z, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x', u'z'])
    return Js([var.get(u'delay_builtin_form_t'), var.get(u'x'), var.get(u'y'), var.get(u'z')])
PyJsHoisted_builtin_form_apply_.func_name = u'builtin_form_apply'
var.put(u'builtin_form_apply', PyJsHoisted_builtin_form_apply_)
@Js
def PyJsHoisted_ASSERT_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    if var.get(u'x').neg():
        return var.get(u'ERROR')()
PyJsHoisted_ASSERT_.func_name = u'ASSERT'
var.put(u'ASSERT', PyJsHoisted_ASSERT_)
@Js
def PyJsHoisted_new_list_(this, arguments, var=var):
    var = Scope({u'this':this, u'arguments':arguments}, var)
    var.registers([u'xs', u'_i'])
    var.put(u'xs', Js([]))
    #for JS loop
    var.put(u'_i', Js(0.0))
    while (var.get(u'_i')<var.get(u'arguments').get(u'length')):
        try:
            var.get(u'xs').put(var.get(u'_i'), var.get(u'arguments').get(var.get(u'_i')))
        finally:
                (var.put(u'_i',Js(var.get(u'_i').to_number())+Js(1))-Js(1))
    return var.get(u'jsArray_to_list')(var.get(u'xs'))
PyJsHoisted_new_list_.func_name = u'new_list'
var.put(u'new_list', PyJsHoisted_new_list_)
@Js
def PyJsHoisted_symbol_equal_p_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x'])
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return Js(True)
    if PyJsStrictEq(var.get(u'un_symbol')(var.get(u'x')),var.get(u'un_symbol')(var.get(u'y'))):
        var.get(u'lang_set_do')(var.get(u'x'), var.get(u'y'))
        return Js(True)
    else:
        return Js(False)
PyJsHoisted_symbol_equal_p_.func_name = u'symbol_equal_p'
var.put(u'symbol_equal_p', PyJsHoisted_symbol_equal_p_)
@Js
def PyJsHoisted_env_get_(env, key, default_v, this, arguments, var=var):
    var = Scope({u'this':this, u'default_v':default_v, u'key':key, u'env':env, u'arguments':arguments}, var)
    var.registers([u'i', u'default_v', u'key', u'env'])
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'env').get(u'length')):
        try:
            if var.get(u'jsbool_equal_p')(var.get(u'env').get((var.get(u'i')+Js(0.0))), var.get(u'key')):
                return var.get(u'env').get((var.get(u'i')+Js(1.0)))
        finally:
                var.put(u'i', (var.get(u'i')+Js(2.0)))
    return var.get(u'default_v')
PyJsHoisted_env_get_.func_name = u'env_get'
var.put(u'env_get', PyJsHoisted_env_get_)
@Js
def PyJsHoisted_un_symbol_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_un_symbol_.func_name = u'un_symbol'
var.put(u'un_symbol', PyJsHoisted_un_symbol_)
@Js
def PyJsHoisted_apply_(f, xs, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'f':f}, var)
    var.registers([u'xs', u'f'])
    return Js([var.get(u'delay_apply_t'), var.get(u'f'), var.get(u'xs')])
PyJsHoisted_apply_.func_name = u'apply'
var.put(u'apply', PyJsHoisted_apply_)
@Js
def PyJsHoisted_delay_builtin_func_xs_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'2')
PyJsHoisted_delay_builtin_func_xs_.func_name = u'delay_builtin_func_xs'
var.put(u'delay_builtin_func_xs', PyJsHoisted_delay_builtin_func_xs_)
@Js
def PyJsHoisted_delay_apply_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'delay_apply_t'))
PyJsHoisted_delay_apply_p_.func_name = u'delay_apply_p'
var.put(u'delay_apply_p', PyJsHoisted_delay_apply_p_)
@Js
def PyJsHoisted_env2val_(env, this, arguments, var=var):
    var = Scope({u'this':this, u'arguments':arguments, u'env':env}, var)
    var.registers([u'i', u'env', u'ret'])
    var.put(u'ret', var.get(u'null_v'))
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'env').get(u'length')):
        try:
            var.put(u'ret', var.get(u'new_construction')(var.get(u'new_list')(var.get(u'env').get((var.get(u'i')+Js(0.0))), var.get(u'env').get((var.get(u'i')+Js(1.0)))), var.get(u'ret')))
        finally:
                var.put(u'i', (var.get(u'i')+Js(2.0)))
    return var.get(u'new_data')(var.get(u'mapping_symbol'), var.get(u'new_list')(var.get(u'ret')))
PyJsHoisted_env2val_.func_name = u'env2val'
var.put(u'env2val', PyJsHoisted_env2val_)
@Js
def PyJsHoisted_simple_print_force_all_rec_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'simple_print')(var.get(u'force_all_rec')(var.get(u'x')))
PyJsHoisted_simple_print_force_all_rec_.func_name = u'simple_print_force_all_rec'
var.put(u'simple_print_force_all_rec', PyJsHoisted_simple_print_force_all_rec_)
@Js
def PyJsHoisted_real_evaluate_(env, raw, this, arguments, var=var):
    var = Scope({u'this':this, u'raw':raw, u'arguments':arguments, u'env':env}, var)
    var.registers([u'f_list', u'f', u'i', u'error_v', u'args', u'rest', u'raw', u'f_type', u'env', u'xs', u'x', u'f_x', u'f_list_cdr'])
    var.put(u'x', var.get(u'force1')(var.get(u'raw')))
    if var.get(u'any_delay_just_p')(var.get(u'x')):
        return var.get(u'evaluate')(var.get(u'env'), var.get(u'x'))
    var.put(u'error_v', var.get(u'new_error')(var.get(u'system_symbol'), var.get(u'new_list')(var.get(u'function_builtin_use_systemName'), var.get(u'new_list')(var.get(u'evaluate_function_builtin_systemName'), var.get(u'new_list')(var.get(u'env2val')(var.get(u'env')), var.get(u'x'))))))
    if var.get(u'construction_p')(var.get(u'x')):
        var.put(u'xs', Js([]))
        var.put(u'rest', var.get(u'x'))
        while var.get(u'null_p')(var.get(u'rest')).neg():
            if var.get(u'any_delay_just_p')(var.get(u'rest')):
                return var.get(u'evaluate')(var.get(u'env'), var.get(u'x'))
            else:
                if var.get(u'construction_p')(var.get(u'rest')):
                    var.get(u'xs').callprop(u'push', var.get(u'construction_head')(var.get(u'rest')))
                    var.put(u'rest', var.get(u'force1')(var.get(u'construction_tail')(var.get(u'rest'))))
                else:
                    return var.get(u'error_v')
        if var.get(u'jsbool_equal_p')(var.get(u'xs').get(u'0'), var.get(u'form_builtin_use_systemName')):
            if PyJsStrictEq(var.get(u'xs').get(u'length'),Js(1.0)):
                return var.get(u'error_v')
            var.put(u'f', var.get(u'xs').get(u'1'))
            var.put(u'args', Js([]))
            #for JS loop
            var.put(u'i', Js(2.0))
            while (var.get(u'i')<var.get(u'xs').get(u'length')):
                try:
                    var.get(u'args').put((var.get(u'i')-Js(2.0)), var.get(u'xs').get(var.get(u'i')))
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
            return var.get(u'builtin_form_apply')(var.get(u'env'), var.get(u'f'), var.get(u'args'))
        else:
            if var.get(u'jsbool_equal_p')(var.get(u'xs').get(u'0'), var.get(u'form_use_systemName')):
                if PyJsStrictEq(var.get(u'xs').get(u'length'),Js(1.0)):
                    return var.get(u'error_v')
                var.put(u'f', var.get(u'force_all')(var.get(u'evaluate')(var.get(u'env'), var.get(u'xs').get(u'1'))))
                if var.get(u'data_p')(var.get(u'f')).neg():
                    return var.get(u'error_v')
                var.put(u'f_type', var.get(u'force1')(var.get(u'data_name')(var.get(u'f'))))
                if var.get(u'any_delay_just_p')(var.get(u'f_type')):
                    return var.get(u'evaluate')(var.get(u'env'), var.get(u'x'))
                if var.get(u'symbol_p')(var.get(u'f_type')).neg():
                    return var.get(u'error_v')
                if var.get(u'symbol_equal_p')(var.get(u'f_type'), var.get(u'form_symbol')).neg():
                    return var.get(u'error_v')
                var.put(u'f_list', var.get(u'force1')(var.get(u'data_list')(var.get(u'f'))))
                if var.get(u'any_delay_just_p')(var.get(u'f_list')):
                    return var.get(u'evaluate')(var.get(u'env'), var.get(u'x'))
                if var.get(u'construction_p')(var.get(u'f_list')).neg():
                    return var.get(u'error_v')
                var.put(u'f_x', var.get(u'construction_head')(var.get(u'f_list')))
                var.put(u'f_list_cdr', var.get(u'force1')(var.get(u'construction_tail')(var.get(u'f_list'))))
                if var.get(u'any_delay_just_p')(var.get(u'f_list_cdr')):
                    return var.get(u'evaluate')(var.get(u'env'), var.get(u'x'))
                if var.get(u'null_p')(var.get(u'f_list_cdr')).neg():
                    return var.get(u'error_v')
                var.put(u'args', Js([var.get(u'env2val')(var.get(u'env'))]))
                #for JS loop
                var.put(u'i', Js(2.0))
                while (var.get(u'i')<var.get(u'xs').get(u'length')):
                    try:
                        var.get(u'args').put((var.get(u'i')-Js(1.0)), var.get(u'xs').get(var.get(u'i')))
                    finally:
                            (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                return var.get(u'apply')(var.get(u'f_x'), var.get(u'args'))
            else:
                if var.get(u'jsbool_equal_p')(var.get(u'xs').get(u'0'), var.get(u'function_builtin_use_systemName')):
                    if PyJsStrictEq(var.get(u'xs').get(u'length'),Js(1.0)):
                        return var.get(u'error_v')
                    var.put(u'f', var.get(u'xs').get(u'1'))
                    var.put(u'args', Js([]))
                    #for JS loop
                    var.put(u'i', Js(2.0))
                    while (var.get(u'i')<var.get(u'xs').get(u'length')):
                        try:
                            var.get(u'args').put((var.get(u'i')-Js(2.0)), var.get(u'evaluate')(var.get(u'env'), var.get(u'xs').get(var.get(u'i'))))
                        finally:
                                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                    return var.get(u'builtin_func_apply')(var.get(u'f'), var.get(u'args'))
                else:
                    var.put(u'f', var.get(u'evaluate')(var.get(u'env'), var.get(u'xs').get(u'0')))
                    var.put(u'args', Js([]))
                    #for JS loop
                    var.put(u'i', Js(1.0))
                    while (var.get(u'i')<var.get(u'xs').get(u'length')):
                        try:
                            var.get(u'args').put((var.get(u'i')-Js(1.0)), var.get(u'evaluate')(var.get(u'env'), var.get(u'xs').get(var.get(u'i'))))
                        finally:
                                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                    return var.get(u'apply')(var.get(u'f'), var.get(u'args'))
    else:
        if var.get(u'null_p')(var.get(u'x')):
            return var.get(u'x')
        else:
            if var.get(u'name_p')(var.get(u'x')):
                return var.get(u'env_get')(var.get(u'env'), var.get(u'x'), var.get(u'error_v'))
            else:
                if var.get(u'error_p')(var.get(u'x')):
                    return var.get(u'error_v')
    return var.get(u'ERROR')()
PyJsHoisted_real_evaluate_.func_name = u'real_evaluate'
var.put(u'real_evaluate', PyJsHoisted_real_evaluate_)
@Js
def PyJsHoisted_error_name_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_error_name_.func_name = u'error_name'
var.put(u'error_name', PyJsHoisted_error_name_)
@Js
def PyJsHoisted_env_set_(env, key, val, this, arguments, var=var):
    var = Scope({u'this':this, u'val':val, u'key':key, u'env':env, u'arguments':arguments}, var)
    var.registers([u'i', u'key', u'val', u'env', u'ret'])
    var.put(u'ret', Js([]))
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'env').get(u'length')):
        try:
            if var.get(u'jsbool_equal_p')(var.get(u'env').get((var.get(u'i')+Js(0.0))), var.get(u'key')):
                var.get(u'ret').put((var.get(u'i')+Js(0.0)), var.get(u'key'))
                var.get(u'ret').put((var.get(u'i')+Js(1.0)), var.get(u'val'))
                #for JS loop
                var.put(u'i', (var.get(u'i')+Js(2.0)))
                while (var.get(u'i')<var.get(u'env').get(u'length')):
                    try:
                        var.get(u'ret').put((var.get(u'i')+Js(0.0)), var.get(u'env').get((var.get(u'i')+Js(0.0))))
                        var.get(u'ret').put((var.get(u'i')+Js(1.0)), var.get(u'env').get((var.get(u'i')+Js(1.0))))
                    finally:
                            var.put(u'i', (var.get(u'i')+Js(2.0)))
                return var.get(u'ret')
            else:
                var.get(u'ret').put((var.get(u'i')+Js(0.0)), var.get(u'env').get((var.get(u'i')+Js(0.0))))
                var.get(u'ret').put((var.get(u'i')+Js(1.0)), var.get(u'env').get((var.get(u'i')+Js(1.0))))
        finally:
                var.put(u'i', (var.get(u'i')+Js(2.0)))
    var.get(u'ret').put((var.get(u'env').get(u'length')+Js(0.0)), var.get(u'key'))
    var.get(u'ret').put((var.get(u'env').get(u'length')+Js(1.0)), var.get(u'val'))
    return var.get(u'ret')
PyJsHoisted_env_set_.func_name = u'env_set'
var.put(u'env_set', PyJsHoisted_env_set_)
@Js
def PyJsHoisted_error_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'error_t'))
PyJsHoisted_error_p_.func_name = u'error_p'
var.put(u'error_p', PyJsHoisted_error_p_)
@Js
def PyJsHoisted_real_apply_(f, xs, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'f':f}, var)
    var.registers([u'f_code', u'args_pat', u'xs_i', u'i', u'make_error_v', u'f', u'f_list', u'f_type', u'env', u'xs', u'x', u'f_list_cdr'])
    @Js
    def PyJsHoisted_make_error_v_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u'new_error')(var.get(u'system_symbol'), var.get(u'new_list')(var.get(u'function_builtin_use_systemName'), var.get(u'new_list')(var.get(u'apply_function_builtin_systemName'), var.get(u'new_list')(var.get(u'f'), var.get(u'jsArray_to_list')(var.get(u'xs'))))))
    PyJsHoisted_make_error_v_.func_name = u'make_error_v'
    var.put(u'make_error_v', PyJsHoisted_make_error_v_)
    pass
    var.put(u'f', var.get(u'force1')(var.get(u'f')))
    if var.get(u'any_delay_just_p')(var.get(u'f')):
        return var.get(u'apply')(var.get(u'f'), var.get(u'xs'))
    if var.get(u'data_p')(var.get(u'f')).neg():
        return var.get(u'make_error_v')()
    var.put(u'f_type', var.get(u'force_all')(var.get(u'data_name')(var.get(u'f'))))
    if (var.get(u'symbol_p')(var.get(u'f_type')) and var.get(u'symbol_equal_p')(var.get(u'f_type'), var.get(u'function_symbol'))).neg():
        return var.get(u'make_error_v')()
    var.put(u'f_list', var.get(u'force_all')(var.get(u'data_list')(var.get(u'f'))))
    if var.get(u'construction_p')(var.get(u'f_list')).neg():
        return var.get(u'make_error_v')()
    var.put(u'args_pat', var.get(u'force_all_rec')(var.get(u'construction_head')(var.get(u'f_list'))))
    var.put(u'f_list_cdr', var.get(u'force_all')(var.get(u'construction_tail')(var.get(u'f_list'))))
    if (var.get(u'construction_p')(var.get(u'f_list_cdr')) and var.get(u'null_p')(var.get(u'force_all')(var.get(u'construction_tail')(var.get(u'f_list_cdr'))))).neg():
        return var.get(u'make_error_v')()
    var.put(u'f_code', var.get(u'construction_head')(var.get(u'f_list_cdr')))
    var.put(u'env', var.get(u'env_null_v'))
    var.put(u'xs_i', Js(0.0))
    while var.get(u'null_p')(var.get(u'args_pat')).neg():
        if var.get(u'name_p')(var.get(u'args_pat')):
            var.put(u'x', var.get(u'null_v'))
            #for JS loop
            var.put(u'i', (var.get(u'xs').get(u'length')-Js(1.0)))
            while (var.get(u'i')>=var.get(u'xs_i')):
                try:
                    var.put(u'x', var.get(u'new_construction')(var.get(u'xs').get(var.get(u'i')), var.get(u'x')))
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
            var.put(u'env', var.get(u'env_set')(var.get(u'env'), var.get(u'args_pat'), var.get(u'x')))
            var.put(u'xs_i', var.get(u'xs').get(u'length'))
            var.put(u'args_pat', var.get(u'null_v'))
        else:
            if var.get(u'construction_p')(var.get(u'args_pat')):
                if (var.get(u'xs_i')<var.get(u'xs').get(u'length')):
                    var.put(u'x', var.get(u'xs').get(var.get(u'xs_i')))
                    (var.put(u'xs_i',Js(var.get(u'xs_i').to_number())+Js(1))-Js(1))
                    var.put(u'env', var.get(u'env_set')(var.get(u'env'), var.get(u'construction_head')(var.get(u'args_pat')), var.get(u'x')))
                    var.put(u'args_pat', var.get(u'construction_tail')(var.get(u'args_pat')))
                else:
                    return var.get(u'make_error_v')()
            else:
                return var.get(u'make_error_v')()
    if PyJsStrictNeq(var.get(u'xs').get(u'length'),var.get(u'xs_i')):
        return var.get(u'make_error_v')()
    return var.get(u'evaluate')(var.get(u'env'), var.get(u'f_code'))
PyJsHoisted_real_apply_.func_name = u'real_apply'
var.put(u'real_apply', PyJsHoisted_real_apply_)
@Js
def PyJsHoisted_null_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'null_t'))
PyJsHoisted_null_p_.func_name = u'null_p'
var.put(u'null_p', PyJsHoisted_null_p_)
@Js
def PyJsHoisted_data_list_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'2')
PyJsHoisted_data_list_.func_name = u'data_list'
var.put(u'data_list', PyJsHoisted_data_list_)
@Js
def PyJsHoisted_data_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'data_t'))
PyJsHoisted_data_p_.func_name = u'data_p'
var.put(u'data_p', PyJsHoisted_data_p_)
@Js
def PyJsHoisted_delay_builtin_func_f_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_delay_builtin_func_f_.func_name = u'delay_builtin_func_f'
var.put(u'delay_builtin_func_f', PyJsHoisted_delay_builtin_func_f_)
@Js
def PyJsHoisted_force1_(raw, this, arguments, var=var):
    var = Scope({u'this':this, u'raw':raw, u'arguments':arguments}, var)
    var.registers([u'x', u'ret', u'raw'])
    var.put(u'x', var.get(u'un_just_all')(var.get(u'raw')))
    pass
    var.get(u'ASSERT')(var.get(u'just_p')(var.get(u'x')).neg())
    if var.get(u'delay_evaluate_p')(var.get(u'x')):
        var.put(u'ret', var.get(u'real_evaluate')(var.get(u'delay_evaluate_env')(var.get(u'x')), var.get(u'delay_evaluate_x')(var.get(u'x'))))
    else:
        if var.get(u'delay_builtin_form_p')(var.get(u'x')):
            var.put(u'ret', var.get(u'real_builtin_form_apply')(var.get(u'delay_builtin_form_env')(var.get(u'x')), var.get(u'delay_builtin_form_f')(var.get(u'x')), var.get(u'delay_builtin_form_xs')(var.get(u'x'))))
        else:
            if var.get(u'delay_builtin_func_p')(var.get(u'x')):
                var.put(u'ret', var.get(u'real_builtin_func_apply')(var.get(u'delay_builtin_func_f')(var.get(u'x')), var.get(u'delay_builtin_func_xs')(var.get(u'x'))))
            else:
                if var.get(u'delay_apply_p')(var.get(u'x')):
                    var.put(u'ret', var.get(u'real_apply')(var.get(u'delay_apply_f')(var.get(u'x')), var.get(u'delay_apply_xs')(var.get(u'x'))))
                else:
                    var.put(u'ret', var.get(u'x'))
    var.put(u'ret', var.get(u'un_just_all')(var.get(u'ret')))
    var.get(u'lang_set_do')(var.get(u'x'), var.get(u'ret'))
    return var.get(u'ret')
PyJsHoisted_force1_.func_name = u'force1'
var.put(u'force1', PyJsHoisted_force1_)
@Js
def PyJsHoisted_error_list_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'2')
PyJsHoisted_error_list_.func_name = u'error_list'
var.put(u'error_list', PyJsHoisted_error_list_)
@Js
def PyJsHoisted_jsArray_to_list_(xs, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
    var.registers([u'i', u'xs', u'ret'])
    var.put(u'ret', var.get(u'null_v'))
    #for JS loop
    var.put(u'i', (var.get(u'xs').get(u'length')-Js(1.0)))
    while (var.get(u'i')>=Js(0.0)):
        try:
            var.put(u'ret', var.get(u'new_construction')(var.get(u'xs').get(var.get(u'i')), var.get(u'ret')))
        finally:
                (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
    return var.get(u'ret')
PyJsHoisted_jsArray_to_list_.func_name = u'jsArray_to_list'
var.put(u'jsArray_to_list', PyJsHoisted_jsArray_to_list_)
@Js
def PyJsHoisted_just_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'just_t'))
PyJsHoisted_just_p_.func_name = u'just_p'
var.put(u'just_p', PyJsHoisted_just_p_)
@Js
def PyJsHoisted_new_construction_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x'])
    return Js([var.get(u'construction_t'), var.get(u'x'), var.get(u'y')])
PyJsHoisted_new_construction_.func_name = u'new_construction'
var.put(u'new_construction', PyJsHoisted_new_construction_)
@Js
def PyJsHoisted_new_error_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x'])
    return Js([var.get(u'error_t'), var.get(u'x'), var.get(u'y')])
PyJsHoisted_new_error_.func_name = u'new_error'
var.put(u'new_error', PyJsHoisted_new_error_)
@Js
def PyJsHoisted_new_data_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x'])
    return Js([var.get(u'data_t'), var.get(u'x'), var.get(u'y')])
PyJsHoisted_new_data_.func_name = u'new_data'
var.put(u'new_data', PyJsHoisted_new_data_)
@Js
def PyJsHoisted_name_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return (var.get(u'symbol_p')(var.get(u'x')) or var.get(u'data_p')(var.get(u'x')))
PyJsHoisted_name_p_.func_name = u'name_p'
var.put(u'name_p', PyJsHoisted_name_p_)
@Js
def PyJsHoisted_make_builtin_f_get_sym_f_(t_sym, x_sym, this, arguments, var=var):
    var = Scope({u'this':this, u'x_sym':x_sym, u't_sym':t_sym, u'arguments':arguments}, var)
    var.registers([u'x_sym', u't_sym'])
    return var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'new_list')(var.get(u't_sym')), var.get(u'something_symbol')), var.get(u'x_sym')))
PyJsHoisted_make_builtin_f_get_sym_f_.func_name = u'make_builtin_f_get_sym_f'
var.put(u'make_builtin_f_get_sym_f', PyJsHoisted_make_builtin_f_get_sym_f_)
@Js
def PyJsHoisted_evaluate_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x'])
    return Js([var.get(u'delay_evaluate_t'), var.get(u'x'), var.get(u'y')])
PyJsHoisted_evaluate_.func_name = u'evaluate'
var.put(u'evaluate', PyJsHoisted_evaluate_)
@Js
def PyJsHoisted_must_env_get_(env, key, this, arguments, var=var):
    var = Scope({u'this':this, u'key':key, u'env':env, u'arguments':arguments}, var)
    var.registers([u'i', u'key', u'env'])
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'env').get(u'length')):
        try:
            if var.get(u'jsbool_equal_p')(var.get(u'env').get((var.get(u'i')+Js(0.0))), var.get(u'key')):
                return var.get(u'env').get((var.get(u'i')+Js(1.0)))
        finally:
                var.put(u'i', (var.get(u'i')+Js(2.0)))
    return var.get(u'ERROR')()
PyJsHoisted_must_env_get_.func_name = u'must_env_get'
var.put(u'must_env_get', PyJsHoisted_must_env_get_)
@Js
def PyJsHoisted_force_all_rec_(raw, this, arguments, var=var):
    var = Scope({u'this':this, u'raw':raw, u'arguments':arguments}, var)
    var.registers([u'a', u'x', u'd', u'raw'])
    var.put(u'x', var.get(u'force_all')(var.get(u'raw')))
    if var.get(u'data_p')(var.get(u'x')):
        var.put(u'a', var.get(u'x').get(u'1'))
        var.put(u'd', var.get(u'x').get(u'2'))
        var.get(u'x').put(u'1', var.get(u'force_all_rec')(var.get(u'a')))
        var.get(u'x').put(u'2', var.get(u'force_all_rec')(var.get(u'd')))
        return var.get(u'x')
    else:
        if var.get(u'error_p')(var.get(u'x')):
            var.put(u'a', var.get(u'x').get(u'1'))
            var.put(u'd', var.get(u'x').get(u'2'))
            var.get(u'x').put(u'1', var.get(u'force_all_rec')(var.get(u'a')))
            var.get(u'x').put(u'2', var.get(u'force_all_rec')(var.get(u'd')))
            return var.get(u'x')
        else:
            if var.get(u'construction_p')(var.get(u'x')):
                var.put(u'a', var.get(u'x').get(u'1'))
                var.put(u'd', var.get(u'x').get(u'2'))
                var.get(u'x').put(u'1', var.get(u'force_all_rec')(var.get(u'a')))
                var.get(u'x').put(u'2', var.get(u'force_all_rec')(var.get(u'd')))
                return var.get(u'x')
    return var.get(u'x')
PyJsHoisted_force_all_rec_.func_name = u'force_all_rec'
var.put(u'force_all_rec', PyJsHoisted_force_all_rec_)
@Js
def PyJsHoisted_make_builtin_f_p_sym_f_(t_sym, this, arguments, var=var):
    var = Scope({u'this':this, u't_sym':t_sym, u'arguments':arguments}, var)
    var.registers([u't_sym'])
    return var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'function_symbol'), var.get(u'new_list')(var.get(u'isOrNot_symbol'), var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u't_sym'), var.get(u'something_symbol')))))
PyJsHoisted_make_builtin_f_p_sym_f_.func_name = u'make_builtin_f_p_sym_f'
var.put(u'make_builtin_f_p_sym_f', PyJsHoisted_make_builtin_f_p_sym_f_)
@Js
def PyJsHoisted_complex_parse_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'readapply', u'make_read_two', u'parse_error', u'readerror', u'val', u'not_eof', u'make_read_three', u'state', u'readformbuiltin', u'readsysname', u'readsysname_no_pack', u'get', u'put', u'symbol', u'state_const', u'readfuncapply', u'a_space_p', u'un_maybe', u'data', u'readeval', u'assert_get', u'eof', u'a_symbol_p', u'list', u'space', u'x'])
    @Js
    def PyJsHoisted_assert_get_(c, this, arguments, var=var):
        var = Scope({u'this':this, u'c':c, u'arguments':arguments}, var)
        var.registers([u'c'])
        var.get(u'un_maybe')(var.get(u'not_eof')())
        var.get(u'un_maybe')(PyJsStrictEq(var.get(u'get')(),var.get(u'c')))
    PyJsHoisted_assert_get_.func_name = u'assert_get'
    var.put(u'assert_get', PyJsHoisted_assert_get_)
    @Js
    def PyJsHoisted_make_read_three_(prefix, k, this, arguments, var=var):
        var = Scope({u'this':this, u'prefix':prefix, u'k':k, u'arguments':arguments}, var)
        var.registers([u'prefix', u'k'])
        @Js
        def PyJs_anonymous_27_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'xs', u'c', u'x_d', u'x'])
            if var.get(u'eof')():
                return Js(False)
            var.put(u'c', var.get(u'get')())
            if PyJsStrictNeq(var.get(u'c'),var.get(u'prefix')):
                var.get(u'put')(var.get(u'c'))
                return Js(False)
            var.put(u'xs', var.get(u'list')())
            if PyJsStrictEq(var.get(u'xs'),Js(False)):
                return var.get(u'parse_error')()
            if var.get(u'construction_p')(var.get(u'xs')).neg():
                return var.get(u'parse_error')()
            var.put(u'x', var.get(u'construction_tail')(var.get(u'xs')))
            if var.get(u'construction_p')(var.get(u'x')).neg():
                return var.get(u'parse_error')()
            var.put(u'x_d', var.get(u'construction_tail')(var.get(u'x')))
            if (var.get(u'construction_p')(var.get(u'x_d')) and var.get(u'null_p')(var.get(u'construction_tail')(var.get(u'x_d')))).neg():
                return var.get(u'parse_error')()
            return var.get(u'k')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_head')(var.get(u'x')), var.get(u'construction_head')(var.get(u'x_d')))
        PyJs_anonymous_27_._set_name(u'anonymous')
        return PyJs_anonymous_27_
    PyJsHoisted_make_read_three_.func_name = u'make_read_three'
    var.put(u'make_read_three', PyJsHoisted_make_read_three_)
    @Js
    def PyJsHoisted_eof_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return PyJsStrictEq(var.get(u'state_const').get(u'length'),var.get(u'state'))
    PyJsHoisted_eof_.func_name = u'eof'
    var.put(u'eof', PyJsHoisted_eof_)
    @Js
    def PyJsHoisted_val_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'fs', u'x_3'])
        var.get(u'space')()
        var.put(u'fs', Js([var.get(u'list'), var.get(u'readsysname'), var.get(u'data'), var.get(u'readerror'), var.get(u'readeval'), var.get(u'readfuncapply'), var.get(u'readformbuiltin'), var.get(u'readapply')]))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'fs').get(u'length')):
            try:
                var.put(u'x_3', var.get(u'fs').callprop(var.get(u'i')))
                if PyJsStrictNeq(var.get(u'x_3'),Js(False)):
                    return var.get(u'x_3')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'parse_error')()
    PyJsHoisted_val_.func_name = u'val'
    var.put(u'val', PyJsHoisted_val_)
    @Js
    def PyJsHoisted_space_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if var.get(u'a_space_p')(var.get(u'x')).neg():
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        while (var.get(u'a_space_p')(var.get(u'x')) and var.get(u'eof')().neg()):
            var.put(u'x', var.get(u'get')())
        if var.get(u'a_space_p')(var.get(u'x')).neg():
            var.get(u'put')(var.get(u'x'))
        return Js(True)
    PyJsHoisted_space_.func_name = u'space'
    var.put(u'space', PyJsHoisted_space_)
    @Js
    def PyJsHoisted_a_symbol_p_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'i', u'x', u'not_xs'])
        if var.get(u'a_space_p')(var.get(u'x')):
            return Js(False)
        var.put(u'not_xs', Js([Js(u'('), Js(u')'), Js(u'!'), Js(u'#'), Js(u'.'), Js(u'$'), Js(u'%'), Js(u'^'), Js(u'@'), Js(u'~'), Js(u'/'), Js(u'-'), Js(u'>'), Js(u'_'), Js(u':'), Js(u'?'), Js(u'['), Js(u']'), Js(u'&')]))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'not_xs').get(u'length')):
            try:
                if PyJsStrictEq(var.get(u'x'),var.get(u'not_xs').get(var.get(u'i'))):
                    return Js(False)
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return Js(True)
    PyJsHoisted_a_symbol_p_.func_name = u'a_symbol_p'
    var.put(u'a_symbol_p', PyJsHoisted_a_symbol_p_)
    @Js
    def PyJsHoisted_symbol_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x', u'ret'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        var.put(u'ret', Js(u''))
        if var.get(u'a_symbol_p')(var.get(u'x')).neg():
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        while (var.get(u'a_symbol_p')(var.get(u'x')) and var.get(u'eof')().neg()):
            var.put(u'ret', var.get(u'x'), u'+')
            var.put(u'x', var.get(u'get')())
        if var.get(u'a_symbol_p')(var.get(u'x')):
            var.put(u'ret', var.get(u'x'), u'+')
        else:
            var.get(u'put')(var.get(u'x'))
        return var.get(u'new_symbol')(var.get(u'ret'))
    PyJsHoisted_symbol_.func_name = u'symbol'
    var.put(u'symbol', PyJsHoisted_symbol_)
    @Js
    def PyJsHoisted_get_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'ret'])
        var.get(u'ASSERT')(var.get(u'eof')().neg())
        var.put(u'ret', var.get(u'state_const').get(var.get(u'state')))
        (var.put(u'state',Js(var.get(u'state').to_number())+Js(1))-Js(1))
        return var.get(u'ret')
    PyJsHoisted_get_.func_name = u'get'
    var.put(u'get', PyJsHoisted_get_)
    @Js
    def PyJsHoisted_list_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'e_2', u'e', u'ret', u'set_last', u'x', u'HOLE', u'last_add'])
        @Js
        def PyJsHoisted_set_last_(lst, this, arguments, var=var):
            var = Scope({u'this':this, u'lst':lst, u'arguments':arguments}, var)
            var.registers([u'x', u'lst', u'd'])
            if PyJsStrictEq(var.get(u'ret'),var.get(u'HOLE')):
                var.put(u'ret', var.get(u'lst'))
                return var.get('undefined')
            var.put(u'x', var.get(u'ret'))
            while Js(True):
                if var.get(u'construction_p')(var.get(u'x')).neg():
                    return var.get(u'ERROR')()
                var.put(u'd', var.get(u'construction_tail')(var.get(u'x')))
                if PyJsStrictEq(var.get(u'd'),var.get(u'HOLE')):
                    break
                var.put(u'x', var.get(u'construction_tail')(var.get(u'x')))
            if var.get(u'construction_p')(var.get(u'x')).neg():
                return var.get(u'ERROR')()
            if PyJsStrictNeq(var.get(u'construction_tail')(var.get(u'x')),var.get(u'HOLE')):
                return var.get(u'ERROR')()
            var.get(u'x').put(u'2', var.get(u'lst'))
        PyJsHoisted_set_last_.func_name = u'set_last'
        var.put(u'set_last', PyJsHoisted_set_last_)
        @Js
        def PyJsHoisted_last_add_(x, this, arguments, var=var):
            var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
            var.registers([u'x'])
            var.get(u'set_last')(var.get(u'new_construction')(var.get(u'x'), var.get(u'HOLE')))
        PyJsHoisted_last_add_.func_name = u'last_add'
        var.put(u'last_add', PyJsHoisted_last_add_)
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if PyJsStrictNeq(var.get(u'x'),Js(u'(')):
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        var.put(u'HOLE', var.get(u'new_symbol')(Js(u'!!@@READ||HOLE@@!!')))
        var.put(u'ret', var.get(u'HOLE'))
        pass
        pass
        while Js(True):
            var.get(u'space')()
            if var.get(u'eof')():
                return var.get(u'parse_error')()
            var.put(u'x', var.get(u'get')())
            if PyJsStrictEq(var.get(u'x'),Js(u')')):
                var.get(u'set_last')(var.get(u'null_v'))
                return var.get(u'ret')
            if PyJsStrictEq(var.get(u'x'),Js(u'.')):
                var.get(u'space')()
                var.put(u'e_2', var.get(u'val')())
                var.get(u'set_last')(var.get(u'e_2'))
                var.get(u'space')()
                if var.get(u'eof')():
                    return var.get(u'parse_error')()
                var.put(u'x', var.get(u'get')())
                if PyJsStrictNeq(var.get(u'x'),Js(u')')):
                    return var.get(u'parse_error')()
                return var.get(u'ret')
            var.get(u'put')(var.get(u'x'))
            var.put(u'e', var.get(u'val')())
            var.get(u'last_add')(var.get(u'e'))
    PyJsHoisted_list_.func_name = u'list'
    var.put(u'list', PyJsHoisted_list_)
    @Js
    def PyJsHoisted_not_eof_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u'eof')().neg()
    PyJsHoisted_not_eof_.func_name = u'not_eof'
    var.put(u'not_eof', PyJsHoisted_not_eof_)
    @Js
    def PyJsHoisted_readsysname_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x'])
        var.put(u'x', var.get(u'readsysname_no_pack')())
        if PyJsStrictEq(var.get(u'x'),Js(False)):
            return Js(False)
        if var.get(u'symbol_p')(var.get(u'x')):
            return var.get(u'x')
        return var.get(u'systemName_make')(var.get(u'x'))
    PyJsHoisted_readsysname_.func_name = u'readsysname'
    var.put(u'readsysname', PyJsHoisted_readsysname_)
    @Js
    def PyJsHoisted_un_maybe_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'x'])
        if PyJsStrictEq(var.get(u'x'),Js(False)):
            return var.get(u'parse_error')()
        return var.get(u'x')
    PyJsHoisted_un_maybe_.func_name = u'un_maybe'
    var.put(u'un_maybe', PyJsHoisted_un_maybe_)
    @Js
    def PyJsHoisted_a_space_p_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'x'])
        return (((PyJsStrictEq(var.get(u'x'),Js(u' ')) or PyJsStrictEq(var.get(u'x'),Js(u'\n'))) or PyJsStrictEq(var.get(u'x'),Js(u'\t'))) or PyJsStrictEq(var.get(u'x'),Js(u'\r')))
    PyJsHoisted_a_space_p_.func_name = u'a_space_p'
    var.put(u'a_space_p', PyJsHoisted_a_space_p_)
    @Js
    def PyJsHoisted_make_read_two_(prefix, k, this, arguments, var=var):
        var = Scope({u'this':this, u'prefix':prefix, u'k':k, u'arguments':arguments}, var)
        var.registers([u'prefix', u'k'])
        @Js
        def PyJs_anonymous_26_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'xs', u'c', u'x'])
            if var.get(u'eof')():
                return Js(False)
            var.put(u'c', var.get(u'get')())
            if PyJsStrictNeq(var.get(u'c'),var.get(u'prefix')):
                var.get(u'put')(var.get(u'c'))
                return Js(False)
            var.put(u'xs', var.get(u'list')())
            if PyJsStrictEq(var.get(u'xs'),Js(False)):
                return var.get(u'parse_error')()
            if var.get(u'construction_p')(var.get(u'xs')).neg():
                return var.get(u'parse_error')()
            var.put(u'x', var.get(u'construction_tail')(var.get(u'xs')))
            if (var.get(u'construction_p')(var.get(u'x')) and var.get(u'null_p')(var.get(u'construction_tail')(var.get(u'x')))).neg():
                return var.get(u'parse_error')()
            return var.get(u'k')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_head')(var.get(u'x')))
        PyJs_anonymous_26_._set_name(u'anonymous')
        return PyJs_anonymous_26_
    PyJsHoisted_make_read_two_.func_name = u'make_read_two'
    var.put(u'make_read_two', PyJsHoisted_make_read_two_)
    @Js
    def PyJsHoisted_put_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'x'])
        var.get(u'ASSERT')(PyJsStrictEq(var.get(u'state_const').get((var.get(u'state')-Js(1.0))),var.get(u'x')))
        (var.put(u'state',Js(var.get(u'state').to_number())-Js(1))+Js(1))
    PyJsHoisted_put_.func_name = u'put'
    var.put(u'put', PyJsHoisted_put_)
    @Js
    def PyJsHoisted_parse_error_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        PyJsTempException = JsToPyException(Js(u'TheLanguage parse ERROR!'))
        raise PyJsTempException
    PyJsHoisted_parse_error_.func_name = u'parse_error'
    var.put(u'parse_error', PyJsHoisted_parse_error_)
    @Js
    def PyJsHoisted_readsysname_no_pack_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'head', u'may_xfx_xf', u'x_10', u'x_11', u'x_12', u'readsysname_no_pack_inner_must', u'x_6', u'x_7', u'x_4', u'x_5', u'c0', u'x_8', u'x_9'])
        @Js
        def PyJsHoisted_may_xfx_xf_(x, this, arguments, var=var):
            var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
            var.registers([u'y', u'x', u'head', u'c0', u'ys'])
            if var.get(u'eof')():
                return var.get(u'x')
            var.put(u'head', var.get(u'get')())
            if PyJsStrictEq(var.get(u'head'),Js(u'.')):
                var.put(u'y', var.get(u'readsysname_no_pack_inner_must')())
                return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'new_list')(var.get(u'x')), var.get(u'something_symbol')), var.get(u'y'))
            else:
                if PyJsStrictEq(var.get(u'head'),Js(u':')):
                    var.put(u'y', var.get(u'readsysname_no_pack_inner_must')())
                    return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'y'), var.get(u'x'))
                else:
                    if PyJsStrictEq(var.get(u'head'),Js(u'~')):
                        return var.get(u'new_list')(var.get(u'isOrNot_symbol'), var.get(u'x'))
                    else:
                        if PyJsStrictEq(var.get(u'head'),Js(u'@')):
                            var.put(u'y', var.get(u'readsysname_no_pack_inner_must')())
                            return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'new_construction')(var.get(u'x'), var.get(u'something_symbol')), var.get(u'something_symbol')), var.get(u'y'))
                        else:
                            if PyJsStrictEq(var.get(u'head'),Js(u'?')):
                                return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'function_symbol'), var.get(u'new_list')(var.get(u'isOrNot_symbol'), var.get(u'x')))
                            else:
                                if PyJsStrictEq(var.get(u'head'),Js(u'/')):
                                    var.put(u'ys', Js([var.get(u'x')]))
                                    while Js(True):
                                        var.put(u'y', var.get(u'readsysname_no_pack_inner_must')(Js(True)))
                                        var.get(u'ys').callprop(u'push', var.get(u'y'))
                                        if var.get(u'eof')():
                                            break
                                        var.put(u'c0', var.get(u'get')())
                                        if PyJsStrictNeq(var.get(u'c0'),Js(u'/')):
                                            var.get(u'put')(var.get(u'c0'))
                                            break
                                    return var.get(u'new_list')(var.get(u'sub_symbol'), var.get(u'jsArray_to_list')(var.get(u'ys')))
                                else:
                                    var.get(u'put')(var.get(u'head'))
                                    return var.get(u'x')
            return var.get(u'ERROR')()
        PyJsHoisted_may_xfx_xf_.func_name = u'may_xfx_xf'
        var.put(u'may_xfx_xf', PyJsHoisted_may_xfx_xf_)
        @Js
        def PyJsHoisted_readsysname_no_pack_inner_must_(strict, this, arguments, var=var):
            var = Scope({u'this':this, u'strict':strict, u'arguments':arguments}, var)
            var.registers([u'i', u'strict', u'readsysname_no_pack_bracket', u'fs', u'x_13'])
            @Js
            def PyJsHoisted_readsysname_no_pack_bracket_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'x'])
                var.get(u'assert_get')(Js(u'['))
                var.put(u'x', var.get(u'readsysname_no_pack_inner_must')())
                var.get(u'assert_get')(Js(u']'))
                return var.get(u'x')
            PyJsHoisted_readsysname_no_pack_bracket_.func_name = u'readsysname_no_pack_bracket'
            var.put(u'readsysname_no_pack_bracket', PyJsHoisted_readsysname_no_pack_bracket_)
            if PyJsStrictEq(var.get(u'strict'),PyJsComma(Js(0.0), Js(None))):
                var.put(u'strict', Js(False))
            pass
            def PyJs_LONG_38_(var=var):
                return (Js([var.get(u'list'), var.get(u'symbol'), var.get(u'readsysname_no_pack_bracket'), var.get(u'data'), var.get(u'readerror'), var.get(u'readeval'), var.get(u'readfuncapply'), var.get(u'readformbuiltin'), var.get(u'readapply')]) if var.get(u'strict') else Js([var.get(u'list'), var.get(u'readsysname_no_pack'), var.get(u'data'), var.get(u'readerror'), var.get(u'readeval'), var.get(u'readfuncapply'), var.get(u'readformbuiltin'), var.get(u'readapply')]))
            var.put(u'fs', PyJs_LONG_38_())
            #for JS loop
            var.put(u'i', Js(0.0))
            while (var.get(u'i')<var.get(u'fs').get(u'length')):
                try:
                    var.put(u'x_13', var.get(u'fs').callprop(var.get(u'i')))
                    if PyJsStrictNeq(var.get(u'x_13'),Js(False)):
                        return var.get(u'x_13')
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
            return var.get(u'parse_error')()
        PyJsHoisted_readsysname_no_pack_inner_must_.func_name = u'readsysname_no_pack_inner_must'
        var.put(u'readsysname_no_pack_inner_must', PyJsHoisted_readsysname_no_pack_inner_must_)
        if var.get(u'eof')():
            return Js(False)
        var.put(u'head', var.get(u'get')())
        if PyJsStrictEq(var.get(u'head'),Js(u'&')):
            var.get(u'un_maybe')(var.get(u'not_eof')())
            var.put(u'c0', var.get(u'get')())
            if PyJsStrictEq(var.get(u'c0'),Js(u'+')):
                var.put(u'x_4', var.get(u'readsysname_no_pack_inner_must')())
                return var.get(u'new_list')(var.get(u'form_symbol'), var.get(u'new_list')(var.get(u'system_symbol'), var.get(u'x_4')))
            else:
                var.get(u'put')(var.get(u'c0'))
            var.put(u'x_5', var.get(u'readsysname_no_pack_inner_must')())
            return var.get(u'new_list')(var.get(u'form_symbol'), var.get(u'x_5'))
        else:
            if PyJsStrictEq(var.get(u'head'),Js(u':')):
                var.get(u'un_maybe')(var.get(u'not_eof')())
                var.put(u'c0', var.get(u'get')())
                if PyJsStrictEq(var.get(u'c0'),Js(u'&')):
                    var.get(u'assert_get')(Js(u'>'))
                    var.put(u'x_6', var.get(u'readsysname_no_pack_inner_must')())
                    return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'form_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'something_symbol'), var.get(u'x_6'))), var.get(u'theThing_symbol'))
                else:
                    if PyJsStrictEq(var.get(u'c0'),Js(u'>')):
                        var.put(u'x_7', var.get(u'readsysname_no_pack_inner_must')())
                        return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'something_symbol'), var.get(u'x_7')), var.get(u'theThing_symbol'))
                    else:
                        var.get(u'put')(var.get(u'c0'))
                var.put(u'x_8', var.get(u'readsysname_no_pack_inner_must')())
                return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'x_8'), var.get(u'theThing_symbol'))
            else:
                if PyJsStrictEq(var.get(u'head'),Js(u'+')):
                    var.put(u'x_9', var.get(u'readsysname_no_pack_inner_must')())
                    return var.get(u'new_list')(var.get(u'system_symbol'), var.get(u'x_9'))
                else:
                    if PyJsStrictEq(var.get(u'head'),Js(u'[')):
                        var.put(u'x_10', var.get(u'readsysname_no_pack_inner_must')())
                        var.get(u'assert_get')(Js(u']'))
                        return var.get(u'may_xfx_xf')(var.get(u'x_10'))
                    else:
                        if PyJsStrictEq(var.get(u'head'),Js(u'_')):
                            var.get(u'assert_get')(Js(u':'))
                            var.put(u'x_11', var.get(u'readsysname_no_pack_inner_must')())
                            return var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'x_11'), var.get(u'something_symbol'))
                        else:
                            var.get(u'put')(var.get(u'head'))
                            var.put(u'x_12', var.get(u'symbol')())
                            if PyJsStrictEq(var.get(u'x_12'),Js(False)):
                                return Js(False)
                            return var.get(u'may_xfx_xf')(var.get(u'x_12'))
        return var.get(u'ERROR')()
        pass
        pass
        return var.get(u'ERROR')()
    PyJsHoisted_readsysname_no_pack_.func_name = u'readsysname_no_pack'
    var.put(u'readsysname_no_pack', PyJsHoisted_readsysname_no_pack_)
    @Js
    def PyJsHoisted_data_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x', u'xs'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if PyJsStrictNeq(var.get(u'x'),Js(u'#')):
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        var.put(u'xs', var.get(u'list')())
        if PyJsStrictEq(var.get(u'xs'),Js(False)):
            return var.get(u'parse_error')()
        if var.get(u'construction_p')(var.get(u'xs')).neg():
            return var.get(u'parse_error')()
        return var.get(u'new_data')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_tail')(var.get(u'xs')))
    PyJsHoisted_data_.func_name = u'data'
    var.put(u'data', PyJsHoisted_data_)
    @Js
    def PyJsHoisted_readerror_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x', u'xs'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if PyJsStrictNeq(var.get(u'x'),Js(u'!')):
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        var.put(u'xs', var.get(u'list')())
        if PyJsStrictEq(var.get(u'xs'),Js(False)):
            return var.get(u'parse_error')()
        if var.get(u'construction_p')(var.get(u'xs')).neg():
            return var.get(u'parse_error')()
        return var.get(u'new_error')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_tail')(var.get(u'xs')))
    PyJsHoisted_readerror_.func_name = u'readerror'
    var.put(u'readerror', PyJsHoisted_readerror_)
    var.put(u'state_const', var.get(u'x'))
    var.put(u'state', Js(0.0))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_28_(e, x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'e':e, u'arguments':arguments}, var)
        var.registers([u'x', u'e', u'env'])
        var.put(u'env', var.get(u'val2env')(var.get(u'e')))
        if PyJsStrictEq(var.get(u'env'),Js(False)):
            return var.get(u'parse_error')()
        return var.get(u'evaluate')(var.get(u'env'), var.get(u'x'))
    PyJs_anonymous_28_._set_name(u'anonymous')
    var.put(u'readeval', var.get(u'make_read_two')(Js(u'$'), PyJs_anonymous_28_))
    @Js
    def PyJs_anonymous_29_(f, xs, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'f':f}, var)
        var.registers([u'xs', u'jsxs', u'f'])
        @Js
        def PyJs_anonymous_30_(xs, this, arguments, var=var):
            var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
            var.registers([u'xs'])
            return var.get(u'xs')
        PyJs_anonymous_30_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_31_(xs, y, this, arguments, var=var):
            var = Scope({u'y':y, u'xs':xs, u'this':this, u'arguments':arguments}, var)
            var.registers([u'y', u'xs'])
            return var.get(u'parse_error')()
        PyJs_anonymous_31_._set_name(u'anonymous')
        var.put(u'jsxs', var.get(u'list_to_jsArray')(var.get(u'xs'), PyJs_anonymous_30_, PyJs_anonymous_31_))
        return var.get(u'builtin_func_apply')(var.get(u'f'), var.get(u'jsxs'))
    PyJs_anonymous_29_._set_name(u'anonymous')
    var.put(u'readfuncapply', var.get(u'make_read_two')(Js(u'%'), PyJs_anonymous_29_))
    @Js
    def PyJs_anonymous_32_(e, f, xs, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'e':e, u'arguments':arguments, u'f':f}, var)
        var.registers([u'xs', u'jsxs', u'e', u'env', u'f'])
        @Js
        def PyJs_anonymous_33_(xs, this, arguments, var=var):
            var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
            var.registers([u'xs'])
            return var.get(u'xs')
        PyJs_anonymous_33_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_34_(xs, y, this, arguments, var=var):
            var = Scope({u'y':y, u'xs':xs, u'this':this, u'arguments':arguments}, var)
            var.registers([u'y', u'xs'])
            return var.get(u'parse_error')()
        PyJs_anonymous_34_._set_name(u'anonymous')
        var.put(u'jsxs', var.get(u'list_to_jsArray')(var.get(u'xs'), PyJs_anonymous_33_, PyJs_anonymous_34_))
        var.put(u'env', var.get(u'val2env')(var.get(u'e')))
        if PyJsStrictEq(var.get(u'env'),Js(False)):
            return var.get(u'parse_error')()
        return var.get(u'builtin_form_apply')(var.get(u'env'), var.get(u'f'), var.get(u'jsxs'))
    PyJs_anonymous_32_._set_name(u'anonymous')
    var.put(u'readformbuiltin', var.get(u'make_read_three')(Js(u'@'), PyJs_anonymous_32_))
    @Js
    def PyJs_anonymous_35_(f, xs, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'f':f}, var)
        var.registers([u'xs', u'jsxs', u'f'])
        @Js
        def PyJs_anonymous_36_(xs, this, arguments, var=var):
            var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
            var.registers([u'xs'])
            return var.get(u'xs')
        PyJs_anonymous_36_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_37_(xs, y, this, arguments, var=var):
            var = Scope({u'y':y, u'xs':xs, u'this':this, u'arguments':arguments}, var)
            var.registers([u'y', u'xs'])
            return var.get(u'parse_error')()
        PyJs_anonymous_37_._set_name(u'anonymous')
        var.put(u'jsxs', var.get(u'list_to_jsArray')(var.get(u'xs'), PyJs_anonymous_36_, PyJs_anonymous_37_))
        return var.get(u'apply')(var.get(u'f'), var.get(u'jsxs'))
    PyJs_anonymous_35_._set_name(u'anonymous')
    var.put(u'readapply', var.get(u'make_read_two')(Js(u'^'), PyJs_anonymous_35_))
    pass
    pass
    return var.get(u'val')()
    pass
    pass
    pass
    pass
    pass
PyJsHoisted_complex_parse_.func_name = u'complex_parse'
var.put(u'complex_parse', PyJsHoisted_complex_parse_)
@Js
def PyJsHoisted_simple_print_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x', u'prefix', u'temp'])
    var.put(u'x', var.get(u'un_just_all')(var.get(u'x')))
    var.put(u'temp', Js(u''))
    var.put(u'prefix', Js(u''))
    if var.get(u'null_p')(var.get(u'x')):
        return Js(u'()')
    else:
        if var.get(u'construction_p')(var.get(u'x')):
            var.put(u'temp', Js(u'('))
            var.put(u'prefix', Js(u''))
            while var.get(u'construction_p')(var.get(u'x')):
                var.put(u'temp', (var.get(u'prefix')+var.get(u'simple_print')(var.get(u'construction_head')(var.get(u'x')))), u'+')
                var.put(u'prefix', Js(u' '))
                var.put(u'x', var.get(u'un_just_all')(var.get(u'construction_tail')(var.get(u'x'))))
            if var.get(u'null_p')(var.get(u'x')):
                var.put(u'temp', Js(u')'), u'+')
            else:
                var.put(u'temp', ((Js(u' . ')+var.get(u'simple_print')(var.get(u'x')))+Js(u')')), u'+')
            return var.get(u'temp')
        else:
            if var.get(u'data_p')(var.get(u'x')):
                return (Js(u'#')+var.get(u'simple_print')(var.get(u'new_construction')(var.get(u'data_name')(var.get(u'x')), var.get(u'data_list')(var.get(u'x')))))
            else:
                if var.get(u'error_p')(var.get(u'x')):
                    return (Js(u'!')+var.get(u'simple_print')(var.get(u'new_construction')(var.get(u'error_name')(var.get(u'x')), var.get(u'error_list')(var.get(u'x')))))
                else:
                    if var.get(u'symbol_p')(var.get(u'x')):
                        return var.get(u'un_symbol')(var.get(u'x'))
                    else:
                        if var.get(u'delay_evaluate_p')(var.get(u'x')):
                            return ((((Js(u'$(')+var.get(u'simple_print')(var.get(u'env2val')(var.get(u'delay_evaluate_env')(var.get(u'x')))))+Js(u' '))+var.get(u'simple_print')(var.get(u'delay_evaluate_x')(var.get(u'x'))))+Js(u')'))
                        else:
                            if var.get(u'delay_builtin_func_p')(var.get(u'x')):
                                return ((((Js(u'%(')+var.get(u'simple_print')(var.get(u'delay_builtin_func_f')(var.get(u'x'))))+Js(u' '))+var.get(u'simple_print')(var.get(u'jsArray_to_list')(var.get(u'delay_builtin_func_xs')(var.get(u'x')))))+Js(u')'))
                            else:
                                if var.get(u'delay_builtin_form_p')(var.get(u'x')):
                                    return ((((((Js(u'@(')+var.get(u'simple_print')(var.get(u'env2val')(var.get(u'delay_builtin_form_env')(var.get(u'x')))))+Js(u' '))+var.get(u'simple_print')(var.get(u'delay_builtin_form_f')(var.get(u'x'))))+Js(u' '))+var.get(u'simple_print')(var.get(u'jsArray_to_list')(var.get(u'delay_builtin_form_xs')(var.get(u'x')))))+Js(u')'))
                                else:
                                    if var.get(u'delay_apply_p')(var.get(u'x')):
                                        return ((((Js(u'^(')+var.get(u'simple_print')(var.get(u'delay_apply_f')(var.get(u'x'))))+Js(u' '))+var.get(u'simple_print')(var.get(u'jsArray_to_list')(var.get(u'delay_apply_xs')(var.get(u'x')))))+Js(u')'))
    return var.get(u'ERROR')()
PyJsHoisted_simple_print_.func_name = u'simple_print'
var.put(u'simple_print', PyJsHoisted_simple_print_)
@Js
def PyJsHoisted_make_builtin_p_func_(p_sym, p_jsfunc, this, arguments, var=var):
    var = Scope({u'this':this, u'p_sym':p_sym, u'p_jsfunc':p_jsfunc, u'arguments':arguments}, var)
    var.registers([u'p_sym', u'p_jsfunc'])
    @Js
    def PyJs_anonymous_6_(x, error_v, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'error_v':error_v, u'arguments':arguments}, var)
        var.registers([u'x', u'error_v'])
        var.put(u'x', var.get(u'force1')(var.get(u'x')))
        if var.get(u'any_delay_just_p')(var.get(u'x')):
            return var.get(u'builtin_func_apply')(var.get(u'p_sym'), Js([var.get(u'x')]))
        if var.get(u'p_jsfunc')(var.get(u'x')):
            return var.get(u'true_v')
        return var.get(u'false_v')
    PyJs_anonymous_6_._set_name(u'anonymous')
    return Js([var.get(u'p_sym'), Js(1.0), PyJs_anonymous_6_])
PyJsHoisted_make_builtin_p_func_.func_name = u'make_builtin_p_func'
var.put(u'make_builtin_p_func', PyJsHoisted_make_builtin_p_func_)
@Js
def PyJsHoisted_lang_set_do_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x'])
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return var.get('undefined')
    var.get(u'x').put(u'0', var.get(u'just_t'))
    var.get(u'x').put(u'1', var.get(u'y'))
    var.get(u'x').put(u'2', Js(False))
    var.get(u'x').put(u'3', Js(False))
PyJsHoisted_lang_set_do_.func_name = u'lang_set_do'
var.put(u'lang_set_do', PyJsHoisted_lang_set_do_)
@Js
def PyJsHoisted_delay_evaluate_env_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_delay_evaluate_env_.func_name = u'delay_evaluate_env'
var.put(u'delay_evaluate_env', PyJsHoisted_delay_evaluate_env_)
@Js
def PyJsHoisted_make_builtin_get_func_(f_sym, p_jsfunc, f_jsfunc, this, arguments, var=var):
    var = Scope({u'this':this, u'p_jsfunc':p_jsfunc, u'arguments':arguments, u'f_jsfunc':f_jsfunc, u'f_sym':f_sym}, var)
    var.registers([u'p_jsfunc', u'f_jsfunc', u'f_sym'])
    @Js
    def PyJs_anonymous_7_(x, error_v, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'error_v':error_v, u'arguments':arguments}, var)
        var.registers([u'x', u'error_v'])
        var.put(u'x', var.get(u'force1')(var.get(u'x')))
        if var.get(u'any_delay_just_p')(var.get(u'x')):
            return var.get(u'builtin_func_apply')(var.get(u'f_sym'), Js([var.get(u'x')]))
        if var.get(u'p_jsfunc')(var.get(u'x')):
            return var.get(u'f_jsfunc')(var.get(u'x'))
        return var.get(u'error_v')
    PyJs_anonymous_7_._set_name(u'anonymous')
    return Js([var.get(u'f_sym'), Js(1.0), PyJs_anonymous_7_])
PyJsHoisted_make_builtin_get_func_.func_name = u'make_builtin_get_func'
var.put(u'make_builtin_get_func', PyJsHoisted_make_builtin_get_func_)
@Js
def PyJsHoisted_any_delay_just_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return ((((var.get(u'just_p')(var.get(u'x')) or var.get(u'delay_evaluate_p')(var.get(u'x'))) or var.get(u'delay_builtin_form_p')(var.get(u'x'))) or var.get(u'delay_builtin_func_p')(var.get(u'x'))) or var.get(u'delay_apply_p')(var.get(u'x')))
PyJsHoisted_any_delay_just_p_.func_name = u'any_delay_just_p'
var.put(u'any_delay_just_p', PyJsHoisted_any_delay_just_p_)
@Js
def PyJsHoisted_ERROR_(this, arguments, var=var):
    var = Scope({u'this':this, u'arguments':arguments}, var)
    var.registers([])
    PyJsTempException = JsToPyException(Js(u'TheLanguage PANIC'))
    raise PyJsTempException
PyJsHoisted_ERROR_.func_name = u'ERROR'
var.put(u'ERROR', PyJsHoisted_ERROR_)
@Js
def PyJsHoisted_construction_tail_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'2')
PyJsHoisted_construction_tail_.func_name = u'construction_tail'
var.put(u'construction_tail', PyJsHoisted_construction_tail_)
@Js
def PyJsHoisted_simple_parse_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x', u'make_read_three', u'readapply', u'eof', u'val', u'get', u'a_symbol_p', u'list', u'symbol', u'space', u'state_const', u'readformbuiltin', u'state', u'readfuncapply', u'a_space_p', u'make_read_two', u'put', u'parse_error', u'data', u'readeval', u'readerror'])
    @Js
    def PyJsHoisted_make_read_three_(prefix, k, this, arguments, var=var):
        var = Scope({u'this':this, u'prefix':prefix, u'k':k, u'arguments':arguments}, var)
        var.registers([u'prefix', u'k'])
        @Js
        def PyJs_anonymous_15_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'xs', u'c', u'x_d', u'x'])
            if var.get(u'eof')():
                return Js(False)
            var.put(u'c', var.get(u'get')())
            if PyJsStrictNeq(var.get(u'c'),var.get(u'prefix')):
                var.get(u'put')(var.get(u'c'))
                return Js(False)
            var.put(u'xs', var.get(u'list')())
            if PyJsStrictEq(var.get(u'xs'),Js(False)):
                return var.get(u'parse_error')()
            if var.get(u'construction_p')(var.get(u'xs')).neg():
                return var.get(u'parse_error')()
            var.put(u'x', var.get(u'construction_tail')(var.get(u'xs')))
            if var.get(u'construction_p')(var.get(u'x')).neg():
                return var.get(u'parse_error')()
            var.put(u'x_d', var.get(u'construction_tail')(var.get(u'x')))
            if (var.get(u'construction_p')(var.get(u'x_d')) and var.get(u'null_p')(var.get(u'construction_tail')(var.get(u'x_d')))).neg():
                return var.get(u'parse_error')()
            return var.get(u'k')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_head')(var.get(u'x')), var.get(u'construction_head')(var.get(u'x_d')))
        PyJs_anonymous_15_._set_name(u'anonymous')
        return PyJs_anonymous_15_
    PyJsHoisted_make_read_three_.func_name = u'make_read_three'
    var.put(u'make_read_three', PyJsHoisted_make_read_three_)
    @Js
    def PyJsHoisted_eof_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return PyJsStrictEq(var.get(u'state_const').get(u'length'),var.get(u'state'))
    PyJsHoisted_eof_.func_name = u'eof'
    var.put(u'eof', PyJsHoisted_eof_)
    @Js
    def PyJsHoisted_val_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'fs', u'x_2'])
        var.get(u'space')()
        var.put(u'fs', Js([var.get(u'list'), var.get(u'symbol'), var.get(u'data'), var.get(u'readerror'), var.get(u'readeval'), var.get(u'readfuncapply'), var.get(u'readformbuiltin'), var.get(u'readapply')]))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'fs').get(u'length')):
            try:
                var.put(u'x_2', var.get(u'fs').callprop(var.get(u'i')))
                if PyJsStrictNeq(var.get(u'x_2'),Js(False)):
                    return var.get(u'x_2')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'parse_error')()
    PyJsHoisted_val_.func_name = u'val'
    var.put(u'val', PyJsHoisted_val_)
    @Js
    def PyJsHoisted_space_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if var.get(u'a_space_p')(var.get(u'x')).neg():
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        while (var.get(u'a_space_p')(var.get(u'x')) and var.get(u'eof')().neg()):
            var.put(u'x', var.get(u'get')())
        if var.get(u'a_space_p')(var.get(u'x')).neg():
            var.get(u'put')(var.get(u'x'))
        return Js(True)
    PyJsHoisted_space_.func_name = u'space'
    var.put(u'space', PyJsHoisted_space_)
    @Js
    def PyJsHoisted_a_symbol_p_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'i', u'x', u'not_xs'])
        if var.get(u'a_space_p')(var.get(u'x')):
            return Js(False)
        var.put(u'not_xs', Js([Js(u'('), Js(u')'), Js(u'!'), Js(u'#'), Js(u'.'), Js(u'$'), Js(u'%'), Js(u'^'), Js(u'@'), Js(u'~'), Js(u'/'), Js(u'-'), Js(u'>'), Js(u'_'), Js(u':'), Js(u'?'), Js(u'['), Js(u']'), Js(u'&')]))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'not_xs').get(u'length')):
            try:
                if PyJsStrictEq(var.get(u'x'),var.get(u'not_xs').get(var.get(u'i'))):
                    return Js(False)
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return Js(True)
    PyJsHoisted_a_symbol_p_.func_name = u'a_symbol_p'
    var.put(u'a_symbol_p', PyJsHoisted_a_symbol_p_)
    @Js
    def PyJsHoisted_symbol_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x', u'ret'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        var.put(u'ret', Js(u''))
        if var.get(u'a_symbol_p')(var.get(u'x')).neg():
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        while (var.get(u'a_symbol_p')(var.get(u'x')) and var.get(u'eof')().neg()):
            var.put(u'ret', var.get(u'x'), u'+')
            var.put(u'x', var.get(u'get')())
        if var.get(u'a_symbol_p')(var.get(u'x')):
            var.put(u'ret', var.get(u'x'), u'+')
        else:
            var.get(u'put')(var.get(u'x'))
        return var.get(u'new_symbol')(var.get(u'ret'))
    PyJsHoisted_symbol_.func_name = u'symbol'
    var.put(u'symbol', PyJsHoisted_symbol_)
    @Js
    def PyJsHoisted_get_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'ret'])
        var.get(u'ASSERT')(var.get(u'eof')().neg())
        var.put(u'ret', var.get(u'state_const').get(var.get(u'state')))
        (var.put(u'state',Js(var.get(u'state').to_number())+Js(1))-Js(1))
        return var.get(u'ret')
    PyJsHoisted_get_.func_name = u'get'
    var.put(u'get', PyJsHoisted_get_)
    @Js
    def PyJsHoisted_list_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'e_1', u'e', u'ret', u'set_last', u'x', u'HOLE', u'last_add'])
        @Js
        def PyJsHoisted_set_last_(lst, this, arguments, var=var):
            var = Scope({u'this':this, u'lst':lst, u'arguments':arguments}, var)
            var.registers([u'x', u'lst', u'd'])
            if PyJsStrictEq(var.get(u'ret'),var.get(u'HOLE')):
                var.put(u'ret', var.get(u'lst'))
                return var.get('undefined')
            var.put(u'x', var.get(u'ret'))
            while Js(True):
                if var.get(u'construction_p')(var.get(u'x')).neg():
                    return var.get(u'ERROR')()
                var.put(u'd', var.get(u'construction_tail')(var.get(u'x')))
                if PyJsStrictEq(var.get(u'd'),var.get(u'HOLE')):
                    break
                var.put(u'x', var.get(u'construction_tail')(var.get(u'x')))
            if var.get(u'construction_p')(var.get(u'x')).neg():
                return var.get(u'ERROR')()
            if PyJsStrictNeq(var.get(u'construction_tail')(var.get(u'x')),var.get(u'HOLE')):
                return var.get(u'ERROR')()
            var.get(u'x').put(u'2', var.get(u'lst'))
        PyJsHoisted_set_last_.func_name = u'set_last'
        var.put(u'set_last', PyJsHoisted_set_last_)
        @Js
        def PyJsHoisted_last_add_(x, this, arguments, var=var):
            var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
            var.registers([u'x'])
            var.get(u'set_last')(var.get(u'new_construction')(var.get(u'x'), var.get(u'HOLE')))
        PyJsHoisted_last_add_.func_name = u'last_add'
        var.put(u'last_add', PyJsHoisted_last_add_)
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if PyJsStrictNeq(var.get(u'x'),Js(u'(')):
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        var.put(u'HOLE', var.get(u'new_symbol')(Js(u'!!@@READ||HOLE@@!!')))
        var.put(u'ret', var.get(u'HOLE'))
        pass
        pass
        while Js(True):
            var.get(u'space')()
            if var.get(u'eof')():
                return var.get(u'parse_error')()
            var.put(u'x', var.get(u'get')())
            if PyJsStrictEq(var.get(u'x'),Js(u')')):
                var.get(u'set_last')(var.get(u'null_v'))
                return var.get(u'ret')
            if PyJsStrictEq(var.get(u'x'),Js(u'.')):
                var.get(u'space')()
                var.put(u'e_1', var.get(u'val')())
                var.get(u'set_last')(var.get(u'e_1'))
                var.get(u'space')()
                if var.get(u'eof')():
                    return var.get(u'parse_error')()
                var.put(u'x', var.get(u'get')())
                if PyJsStrictNeq(var.get(u'x'),Js(u')')):
                    return var.get(u'parse_error')()
                return var.get(u'ret')
            var.get(u'put')(var.get(u'x'))
            var.put(u'e', var.get(u'val')())
            var.get(u'last_add')(var.get(u'e'))
    PyJsHoisted_list_.func_name = u'list'
    var.put(u'list', PyJsHoisted_list_)
    @Js
    def PyJsHoisted_a_space_p_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'x'])
        return (((PyJsStrictEq(var.get(u'x'),Js(u' ')) or PyJsStrictEq(var.get(u'x'),Js(u'\n'))) or PyJsStrictEq(var.get(u'x'),Js(u'\t'))) or PyJsStrictEq(var.get(u'x'),Js(u'\r')))
    PyJsHoisted_a_space_p_.func_name = u'a_space_p'
    var.put(u'a_space_p', PyJsHoisted_a_space_p_)
    @Js
    def PyJsHoisted_make_read_two_(prefix, k, this, arguments, var=var):
        var = Scope({u'this':this, u'prefix':prefix, u'k':k, u'arguments':arguments}, var)
        var.registers([u'prefix', u'k'])
        @Js
        def PyJs_anonymous_14_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'xs', u'c', u'x'])
            if var.get(u'eof')():
                return Js(False)
            var.put(u'c', var.get(u'get')())
            if PyJsStrictNeq(var.get(u'c'),var.get(u'prefix')):
                var.get(u'put')(var.get(u'c'))
                return Js(False)
            var.put(u'xs', var.get(u'list')())
            if PyJsStrictEq(var.get(u'xs'),Js(False)):
                return var.get(u'parse_error')()
            if var.get(u'construction_p')(var.get(u'xs')).neg():
                return var.get(u'parse_error')()
            var.put(u'x', var.get(u'construction_tail')(var.get(u'xs')))
            if (var.get(u'construction_p')(var.get(u'x')) and var.get(u'null_p')(var.get(u'construction_tail')(var.get(u'x')))).neg():
                return var.get(u'parse_error')()
            return var.get(u'k')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_head')(var.get(u'x')))
        PyJs_anonymous_14_._set_name(u'anonymous')
        return PyJs_anonymous_14_
    PyJsHoisted_make_read_two_.func_name = u'make_read_two'
    var.put(u'make_read_two', PyJsHoisted_make_read_two_)
    @Js
    def PyJsHoisted_put_(x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
        var.registers([u'x'])
        var.get(u'ASSERT')(PyJsStrictEq(var.get(u'state_const').get((var.get(u'state')-Js(1.0))),var.get(u'x')))
        (var.put(u'state',Js(var.get(u'state').to_number())-Js(1))+Js(1))
    PyJsHoisted_put_.func_name = u'put'
    var.put(u'put', PyJsHoisted_put_)
    @Js
    def PyJsHoisted_parse_error_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        PyJsTempException = JsToPyException(Js(u'TheLanguage parse ERROR!'))
        raise PyJsTempException
    PyJsHoisted_parse_error_.func_name = u'parse_error'
    var.put(u'parse_error', PyJsHoisted_parse_error_)
    @Js
    def PyJsHoisted_data_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x', u'xs'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if PyJsStrictNeq(var.get(u'x'),Js(u'#')):
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        var.put(u'xs', var.get(u'list')())
        if PyJsStrictEq(var.get(u'xs'),Js(False)):
            return var.get(u'parse_error')()
        if var.get(u'construction_p')(var.get(u'xs')).neg():
            return var.get(u'parse_error')()
        return var.get(u'new_data')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_tail')(var.get(u'xs')))
    PyJsHoisted_data_.func_name = u'data'
    var.put(u'data', PyJsHoisted_data_)
    @Js
    def PyJsHoisted_readerror_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'x', u'xs'])
        if var.get(u'eof')():
            return Js(False)
        var.put(u'x', var.get(u'get')())
        if PyJsStrictNeq(var.get(u'x'),Js(u'!')):
            var.get(u'put')(var.get(u'x'))
            return Js(False)
        var.put(u'xs', var.get(u'list')())
        if PyJsStrictEq(var.get(u'xs'),Js(False)):
            return var.get(u'parse_error')()
        if var.get(u'construction_p')(var.get(u'xs')).neg():
            return var.get(u'parse_error')()
        return var.get(u'new_error')(var.get(u'construction_head')(var.get(u'xs')), var.get(u'construction_tail')(var.get(u'xs')))
    PyJsHoisted_readerror_.func_name = u'readerror'
    var.put(u'readerror', PyJsHoisted_readerror_)
    var.put(u'state_const', var.get(u'x'))
    var.put(u'state', Js(0.0))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_16_(e, x, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'e':e, u'arguments':arguments}, var)
        var.registers([u'x', u'e', u'env'])
        var.put(u'env', var.get(u'val2env')(var.get(u'e')))
        if PyJsStrictEq(var.get(u'env'),Js(False)):
            return var.get(u'parse_error')()
        return var.get(u'evaluate')(var.get(u'env'), var.get(u'x'))
    PyJs_anonymous_16_._set_name(u'anonymous')
    var.put(u'readeval', var.get(u'make_read_two')(Js(u'$'), PyJs_anonymous_16_))
    @Js
    def PyJs_anonymous_17_(f, xs, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'f':f}, var)
        var.registers([u'xs', u'jsxs', u'f'])
        @Js
        def PyJs_anonymous_18_(xs, this, arguments, var=var):
            var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
            var.registers([u'xs'])
            return var.get(u'xs')
        PyJs_anonymous_18_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_19_(xs, y, this, arguments, var=var):
            var = Scope({u'y':y, u'xs':xs, u'this':this, u'arguments':arguments}, var)
            var.registers([u'y', u'xs'])
            return var.get(u'parse_error')()
        PyJs_anonymous_19_._set_name(u'anonymous')
        var.put(u'jsxs', var.get(u'list_to_jsArray')(var.get(u'xs'), PyJs_anonymous_18_, PyJs_anonymous_19_))
        return var.get(u'builtin_func_apply')(var.get(u'f'), var.get(u'jsxs'))
    PyJs_anonymous_17_._set_name(u'anonymous')
    var.put(u'readfuncapply', var.get(u'make_read_two')(Js(u'%'), PyJs_anonymous_17_))
    @Js
    def PyJs_anonymous_20_(e, f, xs, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'e':e, u'arguments':arguments, u'f':f}, var)
        var.registers([u'xs', u'jsxs', u'e', u'env', u'f'])
        @Js
        def PyJs_anonymous_21_(xs, this, arguments, var=var):
            var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
            var.registers([u'xs'])
            return var.get(u'xs')
        PyJs_anonymous_21_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_22_(xs, y, this, arguments, var=var):
            var = Scope({u'y':y, u'xs':xs, u'this':this, u'arguments':arguments}, var)
            var.registers([u'y', u'xs'])
            return var.get(u'parse_error')()
        PyJs_anonymous_22_._set_name(u'anonymous')
        var.put(u'jsxs', var.get(u'list_to_jsArray')(var.get(u'xs'), PyJs_anonymous_21_, PyJs_anonymous_22_))
        var.put(u'env', var.get(u'val2env')(var.get(u'e')))
        if PyJsStrictEq(var.get(u'env'),Js(False)):
            return var.get(u'parse_error')()
        return var.get(u'builtin_form_apply')(var.get(u'env'), var.get(u'f'), var.get(u'jsxs'))
    PyJs_anonymous_20_._set_name(u'anonymous')
    var.put(u'readformbuiltin', var.get(u'make_read_three')(Js(u'@'), PyJs_anonymous_20_))
    @Js
    def PyJs_anonymous_23_(f, xs, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'f':f}, var)
        var.registers([u'xs', u'jsxs', u'f'])
        @Js
        def PyJs_anonymous_24_(xs, this, arguments, var=var):
            var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
            var.registers([u'xs'])
            return var.get(u'xs')
        PyJs_anonymous_24_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_25_(xs, y, this, arguments, var=var):
            var = Scope({u'y':y, u'xs':xs, u'this':this, u'arguments':arguments}, var)
            var.registers([u'y', u'xs'])
            return var.get(u'parse_error')()
        PyJs_anonymous_25_._set_name(u'anonymous')
        var.put(u'jsxs', var.get(u'list_to_jsArray')(var.get(u'xs'), PyJs_anonymous_24_, PyJs_anonymous_25_))
        return var.get(u'apply')(var.get(u'f'), var.get(u'jsxs'))
    PyJs_anonymous_23_._set_name(u'anonymous')
    var.put(u'readapply', var.get(u'make_read_two')(Js(u'^'), PyJs_anonymous_23_))
    pass
    pass
    return var.get(u'val')()
PyJsHoisted_simple_parse_.func_name = u'simple_parse'
var.put(u'simple_parse', PyJsHoisted_simple_parse_)
@Js
def PyJsHoisted_real_builtin_form_apply_(env, f, xs, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'env':env, u'f':f}, var)
    var.registers([u'xs', u'error_v', u'env', u'f'])
    var.put(u'error_v', var.get(u'new_error')(var.get(u'system_symbol'), var.get(u'new_list')(var.get(u'form_builtin_use_systemName'), var.get(u'new_list')(var.get(u'env2val')(var.get(u'env')), var.get(u'f'), var.get(u'jsArray_to_list')(var.get(u'xs'))))))
    if var.get(u'jsbool_equal_p')(var.get(u'f'), var.get(u'quote_form_builtin_systemName')):
        if PyJsStrictNeq(var.get(u'xs').get(u'length'),Js(1.0)):
            return var.get(u'error_v')
        return var.get(u'xs').get(u'0')
    else:
        if var.get(u'jsbool_equal_p')(var.get(u'f'), var.get(u'lambda_form_builtin_systemName')):
            if PyJsStrictNeq(var.get(u'xs').get(u'length'),Js(2.0)):
                return var.get(u'error_v')
            return var.get(u'new_lambda')(var.get(u'env'), var.get(u'xs').get(u'0'), var.get(u'xs').get(u'1'), var.get(u'error_v'))
    return var.get(u'error_v')
PyJsHoisted_real_builtin_form_apply_.func_name = u'real_builtin_form_apply'
var.put(u'real_builtin_form_apply', PyJsHoisted_real_builtin_form_apply_)
@Js
def PyJsHoisted_delay_builtin_func_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'delay_builtin_func_t'))
PyJsHoisted_delay_builtin_func_p_.func_name = u'delay_builtin_func_p'
var.put(u'delay_builtin_func_p', PyJsHoisted_delay_builtin_func_p_)
@Js
def PyJsHoisted_env_foreach_(env, f, this, arguments, var=var):
    var = Scope({u'this':this, u'arguments':arguments, u'env':env, u'f':f}, var)
    var.registers([u'i', u'env', u'f'])
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'env').get(u'length')):
        try:
            var.get(u'f')(var.get(u'env').get((var.get(u'i')+Js(0.0))), var.get(u'env').get((var.get(u'i')+Js(1.0))))
        finally:
                var.put(u'i', (var.get(u'i')+Js(2.0)))
PyJsHoisted_env_foreach_.func_name = u'env_foreach'
var.put(u'env_foreach', PyJsHoisted_env_foreach_)
@Js
def PyJsHoisted_complex_print_(val, this, arguments, var=var):
    var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
    var.registers([u'maybe_xs', u'name_1', u'val', u'temp', u'list', u'prefix', u'print_sys_name', u'x'])
    @Js
    def PyJsHoisted_print_sys_name_(x, where, this, arguments, var=var):
        var = Scope({u'this':this, u'x':x, u'where':where, u'arguments':arguments}, var)
        var.registers([u'maybe_xs', u'tmp', u'maybe_lst_288', u'maybe_lst_88', u'i', u'where', u'maybe_lst_44', u'maybe_lst_8934', u'var_2_1', u'inner_bracket', u'x', u'maybe_lst_2', u'maybe_lst_3', u'hd'])
        @Js
        def PyJsHoisted_inner_bracket_(x, this, arguments, var=var):
            var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
            var.registers([u'x'])
            if PyJsStrictEq(var.get(u'where'),Js(u'inner')):
                return ((Js(u'[')+var.get(u'x'))+Js(u']'))
            else:
                if PyJsStrictEq(var.get(u'where'),Js(u'top')):
                    return var.get(u'x')
            return var.get(u'ERROR')()
        PyJsHoisted_inner_bracket_.func_name = u'inner_bracket'
        var.put(u'inner_bracket', PyJsHoisted_inner_bracket_)
        if var.get(u'symbol_p')(var.get(u'x')):
            return var.get(u'un_symbol')(var.get(u'x'))
        pass
        var.put(u'maybe_xs', var.get(u'maybe_list_to_jsArray')(var.get(u'x')))
        if ((PyJsStrictNeq(var.get(u'maybe_xs'),Js(False)) and PyJsStrictEq(var.get(u'maybe_xs').get(u'length'),Js(3.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'0'), var.get(u'typeAnnotation_symbol'))):
            var.put(u'maybe_lst_2', var.get(u'maybe_list_to_jsArray')(var.get(u'maybe_xs').get(u'1')))
            if ((PyJsStrictNeq(var.get(u'maybe_lst_2'),Js(False)) and PyJsStrictEq(var.get(u'maybe_lst_2').get(u'length'),Js(3.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_2').get(u'0'), var.get(u'function_symbol'))):
                var.put(u'var_2_1', var.get(u'maybe_lst_2').get(u'1'))
                var.put(u'maybe_lst_3', var.get(u'maybe_list_to_jsArray')(var.get(u'var_2_1')))
                if ((PyJsStrictNeq(var.get(u'maybe_lst_3'),Js(False)) and PyJsStrictEq(var.get(u'maybe_lst_3').get(u'length'),Js(1.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_2').get(u'2'), var.get(u'something_symbol'))):
                    return var.get(u'inner_bracket')(((var.get(u'print_sys_name')(var.get(u'maybe_lst_3').get(u'0'), Js(u'inner'))+Js(u'.'))+var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'2'), Js(u'inner'))))
                else:
                    if ((var.get(u'construction_p')(var.get(u'var_2_1')) and var.get(u'jsbool_no_force_equal_p')(var.get(u'construction_tail')(var.get(u'var_2_1')), var.get(u'something_symbol'))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_2').get(u'2'), var.get(u'something_symbol'))):
                        return var.get(u'inner_bracket')(((var.get(u'print_sys_name')(var.get(u'construction_head')(var.get(u'var_2_1')), Js(u'inner'))+Js(u'@'))+var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'2'), Js(u'inner'))))
                    else:
                        if (var.get(u'jsbool_no_force_equal_p')(var.get(u'var_2_1'), var.get(u'something_symbol')) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'2'), var.get(u'theThing_symbol'))):
                            return var.get(u'inner_bracket')((Js(u':>')+var.get(u'print_sys_name')(var.get(u'maybe_lst_2').get(u'2'), Js(u'inner'))))
            var.put(u'maybe_lst_44', var.get(u'maybe_list_to_jsArray')(var.get(u'maybe_xs').get(u'2')))
            if (((var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'1'), var.get(u'function_symbol')) and PyJsStrictNeq(var.get(u'maybe_lst_44'),Js(False))) and PyJsStrictEq(var.get(u'maybe_lst_44').get(u'length'),Js(2.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_44').get(u'0'), var.get(u'isOrNot_symbol'))):
                return var.get(u'inner_bracket')((var.get(u'print_sys_name')(var.get(u'maybe_lst_44').get(u'1'), Js(u'inner'))+Js(u'?')))
            if (((PyJsStrictNeq(var.get(u'maybe_lst_2'),Js(False)) and PyJsStrictEq(var.get(u'maybe_lst_2').get(u'length'),Js(2.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'2'), var.get(u'theThing_symbol'))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_2').get(u'0'), var.get(u'form_symbol'))):
                var.put(u'maybe_lst_88', var.get(u'maybe_list_to_jsArray')(var.get(u'maybe_lst_2').get(u'1')))
                if (((PyJsStrictNeq(var.get(u'maybe_lst_88'),Js(False)) and PyJsStrictEq(var.get(u'maybe_lst_88').get(u'length'),Js(3.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_88').get(u'0'), var.get(u'function_symbol'))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_88').get(u'1'), var.get(u'something_symbol'))):
                    return var.get(u'inner_bracket')((Js(u':&>')+var.get(u'print_sys_name')(var.get(u'maybe_lst_88').get(u'2'), Js(u'inner'))))
            var.put(u'hd', (Js(u'_') if var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'2'), var.get(u'something_symbol')) else (Js(u'') if var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'2'), var.get(u'theThing_symbol')) else var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'2'), Js(u'inner')))))
            return var.get(u'inner_bracket')(((var.get(u'hd')+Js(u':'))+var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'1'), Js(u'inner'))))
        else:
            if (PyJsStrictNeq(var.get(u'maybe_xs'),Js(False)) and PyJsStrictEq(var.get(u'maybe_xs').get(u'length'),Js(2.0))):
                if var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'0'), var.get(u'form_symbol')):
                    var.put(u'maybe_lst_288', var.get(u'maybe_list_to_jsArray')(var.get(u'maybe_xs').get(u'1')))
                    if ((PyJsStrictNeq(var.get(u'maybe_lst_288'),Js(False)) and PyJsStrictEq(var.get(u'maybe_lst_288').get(u'length'),Js(2.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_lst_288').get(u'0'), var.get(u'system_symbol'))):
                        return var.get(u'inner_bracket')((Js(u'&+')+var.get(u'print_sys_name')(var.get(u'maybe_lst_288').get(u'1'), Js(u'inner'))))
                    return var.get(u'inner_bracket')((Js(u'&')+var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'1'), Js(u'inner'))))
                else:
                    if var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'0'), var.get(u'isOrNot_symbol')):
                        return var.get(u'inner_bracket')((var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'1'), Js(u'inner'))+Js(u'~')))
                    else:
                        if var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'0'), var.get(u'system_symbol')):
                            return var.get(u'inner_bracket')((Js(u'+')+var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'1'), Js(u'inner'))))
                        else:
                            if var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'0'), var.get(u'sub_symbol')):
                                var.put(u'maybe_lst_8934', var.get(u'maybe_list_to_jsArray')(var.get(u'maybe_xs').get(u'1')))
                                if (PyJsStrictNeq(var.get(u'maybe_lst_8934'),Js(False)) and (var.get(u'maybe_lst_8934').get(u'length')>Js(1.0))):
                                    var.put(u'tmp', var.get(u'print_sys_name')(var.get(u'maybe_lst_8934').get(u'0'), Js(u'inner')))
                                    #for JS loop
                                    var.put(u'i', Js(1.0))
                                    while (var.get(u'i')<var.get(u'maybe_lst_8934').get(u'length')):
                                        try:
                                            var.put(u'tmp', (Js(u'/')+var.get(u'print_sys_name')(var.get(u'maybe_lst_8934').get(var.get(u'i')), Js(u'inner'))), u'+')
                                        finally:
                                                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                                    return var.get(u'inner_bracket')(var.get(u'tmp'))
        if PyJsStrictEq(var.get(u'where'),Js(u'inner')):
            return var.get(u'simple_print')(var.get(u'x'))
        else:
            if PyJsStrictEq(var.get(u'where'),Js(u'top')):
                return var.get(u'simple_print')(var.get(u'systemName_make')(var.get(u'x')))
        return var.get(u'ERROR')()
    PyJsHoisted_print_sys_name_.func_name = u'print_sys_name'
    var.put(u'print_sys_name', PyJsHoisted_print_sys_name_)
    pass
    var.put(u'x', var.get(u'simple_parse')(var.get(u'simple_print')(var.get(u'val'))))
    var.put(u'temp', Js(u''))
    var.put(u'prefix', Js(u''))
    if var.get(u'null_p')(var.get(u'x')):
        return Js(u'()')
    else:
        if var.get(u'construction_p')(var.get(u'x')):
            var.put(u'temp', Js(u'('))
            var.put(u'prefix', Js(u''))
            while var.get(u'construction_p')(var.get(u'x')):
                var.put(u'temp', (var.get(u'prefix')+var.get(u'complex_print')(var.get(u'construction_head')(var.get(u'x')))), u'+')
                var.put(u'prefix', Js(u' '))
                var.put(u'x', var.get(u'construction_tail')(var.get(u'x')))
            if var.get(u'null_p')(var.get(u'x')):
                var.put(u'temp', Js(u')'), u'+')
            else:
                var.put(u'temp', ((Js(u' . ')+var.get(u'complex_print')(var.get(u'x')))+Js(u')')), u'+')
            return var.get(u'temp')
        else:
            if var.get(u'data_p')(var.get(u'x')):
                var.put(u'name_1', var.get(u'data_name')(var.get(u'x')))
                var.put(u'list', var.get(u'data_list')(var.get(u'x')))
                var.put(u'maybe_xs', var.get(u'maybe_list_to_jsArray')(var.get(u'list')))
                if (((PyJsStrictNeq(var.get(u'maybe_xs'),Js(False)) and PyJsStrictEq(var.get(u'maybe_xs').get(u'length'),Js(2.0))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'name_1'), var.get(u'name_symbol'))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'maybe_xs').get(u'0'), var.get(u'system_symbol'))):
                    return var.get(u'print_sys_name')(var.get(u'maybe_xs').get(u'1'), Js(u'top'))
                return (Js(u'#')+var.get(u'complex_print')(var.get(u'new_construction')(var.get(u'name_1'), var.get(u'list'))))
            else:
                if var.get(u'error_p')(var.get(u'x')):
                    return (Js(u'!')+var.get(u'complex_print')(var.get(u'new_construction')(var.get(u'error_name')(var.get(u'x')), var.get(u'error_list')(var.get(u'x')))))
                else:
                    if var.get(u'symbol_p')(var.get(u'x')):
                        return var.get(u'un_symbol')(var.get(u'x'))
                    else:
                        if var.get(u'delay_evaluate_p')(var.get(u'x')):
                            return ((((Js(u'$(')+var.get(u'complex_print')(var.get(u'env2val')(var.get(u'delay_evaluate_env')(var.get(u'x')))))+Js(u' '))+var.get(u'complex_print')(var.get(u'delay_evaluate_x')(var.get(u'x'))))+Js(u')'))
                        else:
                            if var.get(u'delay_builtin_func_p')(var.get(u'x')):
                                return ((((Js(u'%(')+var.get(u'complex_print')(var.get(u'delay_builtin_func_f')(var.get(u'x'))))+Js(u' '))+var.get(u'complex_print')(var.get(u'jsArray_to_list')(var.get(u'delay_builtin_func_xs')(var.get(u'x')))))+Js(u')'))
                            else:
                                if var.get(u'delay_builtin_form_p')(var.get(u'x')):
                                    return ((((((Js(u'@(')+var.get(u'complex_print')(var.get(u'env2val')(var.get(u'delay_builtin_form_env')(var.get(u'x')))))+Js(u' '))+var.get(u'complex_print')(var.get(u'delay_builtin_form_f')(var.get(u'x'))))+Js(u' '))+var.get(u'complex_print')(var.get(u'jsArray_to_list')(var.get(u'delay_builtin_form_xs')(var.get(u'x')))))+Js(u')'))
                                else:
                                    if var.get(u'delay_apply_p')(var.get(u'x')):
                                        return ((((Js(u'^(')+var.get(u'complex_print')(var.get(u'delay_apply_f')(var.get(u'x'))))+Js(u' '))+var.get(u'complex_print')(var.get(u'jsArray_to_list')(var.get(u'delay_apply_xs')(var.get(u'x')))))+Js(u')'))
    return var.get(u'ERROR')()
PyJsHoisted_complex_print_.func_name = u'complex_print'
var.put(u'complex_print', PyJsHoisted_complex_print_)
@Js
def PyJsHoisted_new_symbol_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return Js([var.get(u'symbol_t'), var.get(u'x')])
PyJsHoisted_new_symbol_.func_name = u'new_symbol'
var.put(u'new_symbol', PyJsHoisted_new_symbol_)
@Js
def PyJsHoisted_delay_builtin_form_f_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'2')
PyJsHoisted_delay_builtin_form_f_.func_name = u'delay_builtin_form_f'
var.put(u'delay_builtin_form_f', PyJsHoisted_delay_builtin_form_f_)
@Js
def PyJsHoisted_val2env_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x', u'i', u'k', u'x_1', u'ret', u's', u'not_breaked', u'v', u'xs'])
    var.put(u'x', var.get(u'force_all')(var.get(u'x')))
    if var.get(u'data_p')(var.get(u'x')).neg():
        return Js(False)
    var.put(u's', var.get(u'force_all')(var.get(u'data_name')(var.get(u'x'))))
    if var.get(u'symbol_p')(var.get(u's')).neg():
        return Js(False)
    if var.get(u'symbol_equal_p')(var.get(u's'), var.get(u'mapping_symbol')).neg():
        return Js(False)
    var.put(u's', var.get(u'force_all')(var.get(u'data_list')(var.get(u'x'))))
    if var.get(u'construction_p')(var.get(u's')).neg():
        return Js(False)
    if var.get(u'null_p')(var.get(u'force_all')(var.get(u'construction_tail')(var.get(u's')))).neg():
        return Js(False)
    var.put(u'ret', Js([]))
    var.put(u'xs', var.get(u'force_all')(var.get(u'construction_head')(var.get(u's'))))
    while var.get(u'null_p')(var.get(u'xs')).neg():
        if var.get(u'construction_p')(var.get(u'xs')).neg():
            return Js(False)
        var.put(u'x_1', var.get(u'force_all')(var.get(u'construction_head')(var.get(u'xs'))))
        var.put(u'xs', var.get(u'force_all')(var.get(u'construction_tail')(var.get(u'xs'))))
        if var.get(u'construction_p')(var.get(u'x_1')).neg():
            return Js(False)
        var.put(u'k', var.get(u'construction_head')(var.get(u'x_1')))
        var.put(u'x_1', var.get(u'force_all')(var.get(u'construction_tail')(var.get(u'x_1'))))
        if var.get(u'construction_p')(var.get(u'x_1')).neg():
            return Js(False)
        var.put(u'v', var.get(u'construction_head')(var.get(u'x_1')))
        if var.get(u'null_p')(var.get(u'force_all')(var.get(u'construction_tail')(var.get(u'x_1')))).neg():
            return Js(False)
        var.put(u'not_breaked', Js(True))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'ret').get(u'length')):
            try:
                if var.get(u'jsbool_equal_p')(var.get(u'ret').get((var.get(u'i')+Js(0.0))), var.get(u'k')):
                    var.get(u'ret').put((var.get(u'i')+Js(1.0)), var.get(u'v'))
                    var.put(u'not_breaked', Js(False))
                    break
            finally:
                    var.put(u'i', (var.get(u'i')+Js(2.0)))
        if var.get(u'not_breaked'):
            var.get(u'ret').callprop(u'push', var.get(u'k'))
            var.get(u'ret').callprop(u'push', var.get(u'v'))
    return var.get(u'ret')
PyJsHoisted_val2env_.func_name = u'val2env'
var.put(u'val2env', PyJsHoisted_val2env_)
@Js
def PyJsHoisted_jsbool_equal_p_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'end_2', u'x'])
    @Js
    def PyJsHoisted_end_2_(x, y, f1, f2, this, arguments, var=var):
        var = Scope({u'f1':f1, u'f2':f2, u'arguments':arguments, u'y':y, u'x':x, u'this':this}, var)
        var.registers([u'y', u'x', u'f2', u'f1'])
        if (var.get(u'jsbool_equal_p')(var.get(u'f1')(var.get(u'x')), var.get(u'f1')(var.get(u'y'))) and var.get(u'jsbool_equal_p')(var.get(u'f2')(var.get(u'x')), var.get(u'f2')(var.get(u'y')))):
            var.get(u'lang_set_do')(var.get(u'x'), var.get(u'y'))
            return Js(True)
        else:
            return Js(False)
    PyJsHoisted_end_2_.func_name = u'end_2'
    var.put(u'end_2', PyJsHoisted_end_2_)
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return Js(True)
    var.put(u'x', var.get(u'force_all')(var.get(u'x')))
    var.put(u'y', var.get(u'force_all')(var.get(u'y')))
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return Js(True)
    pass
    if var.get(u'null_p')(var.get(u'x')):
        if var.get(u'null_p')(var.get(u'y')).neg():
            return Js(False)
        var.get(u'lang_set_do')(var.get(u'x'), var.get(u'null_v'))
        var.get(u'lang_set_do')(var.get(u'y'), var.get(u'null_v'))
        return Js(True)
    else:
        if var.get(u'symbol_p')(var.get(u'x')):
            if var.get(u'symbol_p')(var.get(u'y')).neg():
                return Js(False)
            return var.get(u'symbol_equal_p')(var.get(u'x'), var.get(u'y'))
        else:
            if var.get(u'construction_p')(var.get(u'x')):
                if var.get(u'construction_p')(var.get(u'y')).neg():
                    return Js(False)
                return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'construction_head'), var.get(u'construction_tail'))
            else:
                if var.get(u'error_p')(var.get(u'x')):
                    if var.get(u'error_p')(var.get(u'y')).neg():
                        return Js(False)
                    return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'error_name'), var.get(u'error_list'))
                else:
                    if var.get(u'data_p')(var.get(u'x')):
                        if var.get(u'data_p')(var.get(u'y')).neg():
                            return Js(False)
                        return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'data_name'), var.get(u'data_list'))
    return var.get(u'ERROR')()
PyJsHoisted_jsbool_equal_p_.func_name = u'jsbool_equal_p'
var.put(u'jsbool_equal_p', PyJsHoisted_jsbool_equal_p_)
@Js
def PyJsHoisted_builtin_func_apply_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'x'])
    return Js([var.get(u'delay_builtin_func_t'), var.get(u'x'), var.get(u'y')])
PyJsHoisted_builtin_func_apply_.func_name = u'builtin_func_apply'
var.put(u'builtin_func_apply', PyJsHoisted_builtin_func_apply_)
@Js
def PyJsHoisted_list_to_jsArray_(xs, k_done, k_tail, this, arguments, var=var):
    var = Scope({u'k_done':k_done, u'xs':xs, u'k_tail':k_tail, u'this':this, u'arguments':arguments}, var)
    var.registers([u'k_done', u'xs', u'k_tail', u'ret'])
    var.put(u'ret', Js([]))
    while var.get(u'construction_p')(var.get(u'xs')):
        var.get(u'ret').callprop(u'push', var.get(u'construction_head')(var.get(u'xs')))
        var.put(u'xs', var.get(u'construction_tail')(var.get(u'xs')))
    if var.get(u'null_p')(var.get(u'xs')):
        return var.get(u'k_done')(var.get(u'ret'))
    return var.get(u'k_tail')(var.get(u'ret'), var.get(u'xs'))
PyJsHoisted_list_to_jsArray_.func_name = u'list_to_jsArray'
var.put(u'list_to_jsArray', PyJsHoisted_list_to_jsArray_)
@Js
def PyJsHoisted_make_builtin_f_new_sym_f_(x_sym, this, arguments, var=var):
    var = Scope({u'this':this, u'x_sym':x_sym, u'arguments':arguments}, var)
    var.registers([u'x_sym'])
    return var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'something_symbol'), var.get(u'x_sym')), var.get(u'theThing_symbol')))
PyJsHoisted_make_builtin_f_new_sym_f_.func_name = u'make_builtin_f_new_sym_f'
var.put(u'make_builtin_f_new_sym_f', PyJsHoisted_make_builtin_f_new_sym_f_)
@Js
def PyJsHoisted_maybe_list_to_jsArray_(xs, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
    var.registers([u'xs'])
    @Js
    def PyJs_anonymous_1_(xs, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'arguments':arguments}, var)
        var.registers([u'xs'])
        return var.get(u'xs')
    PyJs_anonymous_1_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_2_(xs, x, this, arguments, var=var):
        var = Scope({u'this':this, u'xs':xs, u'arguments':arguments, u'x':x}, var)
        var.registers([u'xs', u'x'])
        return Js(False)
    PyJs_anonymous_2_._set_name(u'anonymous')
    return var.get(u'list_to_jsArray')(var.get(u'xs'), PyJs_anonymous_1_, PyJs_anonymous_2_)
PyJsHoisted_maybe_list_to_jsArray_.func_name = u'maybe_list_to_jsArray'
var.put(u'maybe_list_to_jsArray', PyJsHoisted_maybe_list_to_jsArray_)
@Js
def PyJsHoisted_delay_builtin_form_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'delay_builtin_form_t'))
PyJsHoisted_delay_builtin_form_p_.func_name = u'delay_builtin_form_p'
var.put(u'delay_builtin_form_p', PyJsHoisted_delay_builtin_form_p_)
@Js
def PyJsHoisted_systemName_make_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'new_data')(var.get(u'name_symbol'), var.get(u'new_list')(var.get(u'system_symbol'), var.get(u'x')))
PyJsHoisted_systemName_make_.func_name = u'systemName_make'
var.put(u'systemName_make', PyJsHoisted_systemName_make_)
@Js
def PyJsHoisted_construction_head_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_construction_head_.func_name = u'construction_head'
var.put(u'construction_head', PyJsHoisted_construction_head_)
@Js
def PyJsHoisted_delay_evaluate_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'delay_evaluate_t'))
PyJsHoisted_delay_evaluate_p_.func_name = u'delay_evaluate_p'
var.put(u'delay_evaluate_p', PyJsHoisted_delay_evaluate_p_)
@Js
def PyJsHoisted_un_just_all_(raw, this, arguments, var=var):
    var = Scope({u'this':this, u'raw':raw, u'arguments':arguments}, var)
    var.registers([u'i', u'x', u'raw', u'xs'])
    var.put(u'x', var.get(u'raw'))
    var.put(u'xs', Js([]))
    while var.get(u'just_p')(var.get(u'x')):
        var.get(u'xs').callprop(u'push', var.get(u'x'))
        var.put(u'x', var.get(u'un_just')(var.get(u'x')))
    #for JS loop
    var.put(u'i', Js(0.0))
    while (var.get(u'i')<var.get(u'xs').get(u'length')):
        try:
            var.get(u'lang_set_do')(var.get(u'xs').get(var.get(u'i')), var.get(u'x'))
        finally:
                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    return var.get(u'x')
PyJsHoisted_un_just_all_.func_name = u'un_just_all'
var.put(u'un_just_all', PyJsHoisted_un_just_all_)
@Js
def PyJsHoisted_delay_apply_xs_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'2')
PyJsHoisted_delay_apply_xs_.func_name = u'delay_apply_xs'
var.put(u'delay_apply_xs', PyJsHoisted_delay_apply_xs_)
@Js
def PyJsHoisted_construction_p_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return PyJsStrictEq(var.get(u'x').get(u'0'),var.get(u'construction_t'))
PyJsHoisted_construction_p_.func_name = u'construction_p'
var.put(u'construction_p', PyJsHoisted_construction_p_)
@Js
def PyJsHoisted_un_just_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'1')
PyJsHoisted_un_just_.func_name = u'un_just'
var.put(u'un_just', PyJsHoisted_un_just_)
@Js
def PyJsHoisted_delay_evaluate_x_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'2')
PyJsHoisted_delay_evaluate_x_.func_name = u'delay_evaluate_x'
var.put(u'delay_evaluate_x', PyJsHoisted_delay_evaluate_x_)
@Js
def PyJsHoisted_jsbool_no_force_equal_p_(x, y, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
    var.registers([u'y', u'end_2', u'x'])
    @Js
    def PyJsHoisted_end_2_(x, y, f1, f2, this, arguments, var=var):
        var = Scope({u'f1':f1, u'f2':f2, u'arguments':arguments, u'y':y, u'x':x, u'this':this}, var)
        var.registers([u'y', u'x', u'f2', u'f1'])
        if (var.get(u'jsbool_no_force_equal_p')(var.get(u'f1')(var.get(u'x')), var.get(u'f1')(var.get(u'y'))) and var.get(u'jsbool_no_force_equal_p')(var.get(u'f2')(var.get(u'x')), var.get(u'f2')(var.get(u'y')))):
            var.get(u'lang_set_do')(var.get(u'x'), var.get(u'y'))
            return Js(True)
        else:
            return Js(False)
    PyJsHoisted_end_2_.func_name = u'end_2'
    var.put(u'end_2', PyJsHoisted_end_2_)
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return Js(True)
    var.put(u'x', var.get(u'un_just_all')(var.get(u'x')))
    var.put(u'y', var.get(u'un_just_all')(var.get(u'y')))
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return Js(True)
    pass
    if var.get(u'null_p')(var.get(u'x')):
        if var.get(u'null_p')(var.get(u'y')).neg():
            return Js(False)
        var.get(u'lang_set_do')(var.get(u'x'), var.get(u'null_v'))
        var.get(u'lang_set_do')(var.get(u'y'), var.get(u'null_v'))
        return Js(True)
    else:
        if var.get(u'symbol_p')(var.get(u'x')):
            if var.get(u'symbol_p')(var.get(u'y')).neg():
                return Js(False)
            return var.get(u'symbol_equal_p')(var.get(u'x'), var.get(u'y'))
        else:
            if var.get(u'construction_p')(var.get(u'x')):
                if var.get(u'construction_p')(var.get(u'y')).neg():
                    return Js(False)
                return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'construction_head'), var.get(u'construction_tail'))
            else:
                if var.get(u'error_p')(var.get(u'x')):
                    if var.get(u'error_p')(var.get(u'y')).neg():
                        return Js(False)
                    return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'error_name'), var.get(u'error_list'))
                else:
                    if var.get(u'data_p')(var.get(u'x')):
                        if var.get(u'data_p')(var.get(u'y')).neg():
                            return Js(False)
                        return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'data_name'), var.get(u'data_list'))
                    else:
                        if var.get(u'delay_evaluate_p')(var.get(u'x')):
                            return Js(False)
                        else:
                            if var.get(u'delay_builtin_func_p')(var.get(u'x')):
                                return Js(False)
                            else:
                                if var.get(u'delay_builtin_form_p')(var.get(u'x')):
                                    return Js(False)
                                else:
                                    if var.get(u'delay_apply_p')(var.get(u'x')):
                                        return Js(False)
    return var.get(u'ERROR')()
PyJsHoisted_jsbool_no_force_equal_p_.func_name = u'jsbool_no_force_equal_p'
var.put(u'jsbool_no_force_equal_p', PyJsHoisted_jsbool_no_force_equal_p_)
@Js
def PyJsHoisted_delay_builtin_form_xs_(x, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'arguments':arguments}, var)
    var.registers([u'x'])
    return var.get(u'x').get(u'3')
PyJsHoisted_delay_builtin_form_xs_.func_name = u'delay_builtin_form_xs'
var.put(u'delay_builtin_form_xs', PyJsHoisted_delay_builtin_form_xs_)
PyJs_Object_0_ = Js({})
var.put(u'exports', PyJs_Object_0_)
Js(u'use strict')
var.get(u'exports').put(u'__esModule', Js(True))
pass
pass
var.put(u'symbol_t', Js(0.0))
var.put(u'construction_t', Js(1.0))
var.put(u'null_t', Js(2.0))
var.put(u'data_t', Js(3.0))
var.put(u'error_t', Js(4.0))
var.put(u'just_t', Js(5.0))
var.put(u'delay_evaluate_t', Js(6.0))
var.put(u'delay_builtin_func_t', Js(7.0))
var.put(u'delay_builtin_form_t', Js(8.0))
var.put(u'delay_apply_t', Js(9.0))
pass
var.get(u'exports').put(u'new_symbol', var.get(u'new_symbol'))
pass
var.get(u'exports').put(u'symbol_p', var.get(u'symbol_p'))
pass
var.get(u'exports').put(u'un_symbol', var.get(u'un_symbol'))
pass
var.get(u'exports').put(u'new_construction', var.get(u'new_construction'))
pass
var.get(u'exports').put(u'construction_p', var.get(u'construction_p'))
pass
var.get(u'exports').put(u'construction_head', var.get(u'construction_head'))
pass
var.get(u'exports').put(u'construction_tail', var.get(u'construction_tail'))
var.put(u'null_v', Js([var.get(u'null_t')]))
var.get(u'exports').put(u'null_v', var.get(u'null_v'))
pass
var.get(u'exports').put(u'null_p', var.get(u'null_p'))
pass
var.get(u'exports').put(u'new_data', var.get(u'new_data'))
pass
var.get(u'exports').put(u'data_p', var.get(u'data_p'))
pass
var.get(u'exports').put(u'data_name', var.get(u'data_name'))
pass
var.get(u'exports').put(u'data_list', var.get(u'data_list'))
pass
var.get(u'exports').put(u'new_error', var.get(u'new_error'))
pass
var.get(u'exports').put(u'error_p', var.get(u'error_p'))
pass
var.get(u'exports').put(u'error_name', var.get(u'error_name'))
pass
var.get(u'exports').put(u'error_list', var.get(u'error_list'))
pass
pass
pass
pass
var.get(u'exports').put(u'evaluate', var.get(u'evaluate'))
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
var.get(u'exports').put(u'apply', var.get(u'apply'))
pass
pass
pass
pass
var.get(u'exports').put(u'force_all_rec', var.get(u'force_all_rec'))
var.put(u'system_symbol', var.get(u'new_symbol')(Js(u'\u592a\u59cb\u521d\u6838')))
var.get(u'exports').put(u'system_symbol', var.get(u'system_symbol'))
var.put(u'name_symbol', var.get(u'new_symbol')(Js(u'\u7b26\u540d')))
var.get(u'exports').put(u'name_symbol', var.get(u'name_symbol'))
var.put(u'function_symbol', var.get(u'new_symbol')(Js(u'\u5316\u6ec5')))
var.get(u'exports').put(u'function_symbol', var.get(u'function_symbol'))
var.put(u'form_symbol', var.get(u'new_symbol')(Js(u'\u5f0f\u5f62')))
var.get(u'exports').put(u'form_symbol', var.get(u'form_symbol'))
var.put(u'equal_symbol', var.get(u'new_symbol')(Js(u'\u7b49\u540c')))
var.get(u'exports').put(u'equal_symbol', var.get(u'equal_symbol'))
var.put(u'evaluate_sym', var.get(u'new_symbol')(Js(u'\u89e3\u7b97')))
var.get(u'exports').put(u'evaluate_sym', var.get(u'evaluate_sym'))
var.put(u'theThing_symbol', var.get(u'new_symbol')(Js(u'\u7279\u5b9a\u5176\u7269')))
var.get(u'exports').put(u'theThing_symbol', var.get(u'theThing_symbol'))
var.put(u'something_symbol', var.get(u'new_symbol')(Js(u'\u7701\u7565\u4e00\u7269')))
var.get(u'exports').put(u'something_symbol', var.get(u'something_symbol'))
var.put(u'mapping_symbol', var.get(u'new_symbol')(Js(u'\u6620\u8868')))
var.get(u'exports').put(u'mapping_symbol', var.get(u'mapping_symbol'))
var.put(u'if_symbol', var.get(u'new_symbol')(Js(u'\u82e5')))
var.get(u'exports').put(u'if_symbol', var.get(u'if_symbol'))
var.put(u'typeAnnotation_symbol', var.get(u'new_symbol')(Js(u'\u4e00\u985e\u4f55\u7269')))
var.get(u'exports').put(u'typeAnnotation_symbol', var.get(u'typeAnnotation_symbol'))
var.put(u'isOrNot_symbol', var.get(u'new_symbol')(Js(u'\u662f\u975e')))
var.get(u'exports').put(u'isOrNot_symbol', var.get(u'isOrNot_symbol'))
var.put(u'sub_symbol', var.get(u'new_symbol')(Js(u'\u5176\u5b50')))
var.get(u'exports').put(u'sub_symbol', var.get(u'sub_symbol'))
var.put(u'true_symbol', var.get(u'new_symbol')(Js(u'\u967d')))
var.get(u'exports').put(u'true_symbol', var.get(u'true_symbol'))
var.put(u'false_symbol', var.get(u'new_symbol')(Js(u'\u9670')))
var.get(u'exports').put(u'false_symbol', var.get(u'false_symbol'))
var.put(u'quote_symbol', var.get(u'new_symbol')(Js(u'\u5f15\u7528')))
var.get(u'exports').put(u'quote_symbol', var.get(u'quote_symbol'))
var.put(u'apply_symbol', var.get(u'new_symbol')(Js(u'\u61c9\u7528')))
var.get(u'exports').put(u'apply_symbol', var.get(u'apply_symbol'))
var.put(u'null_symbol', var.get(u'new_symbol')(Js(u'\u7a7a')))
var.get(u'exports').put(u'null_symbol', var.get(u'null_symbol'))
var.put(u'construction_symbol', var.get(u'new_symbol')(Js(u'\u9023')))
var.get(u'exports').put(u'construction_symbol', var.get(u'construction_symbol'))
var.put(u'data_symbol', var.get(u'new_symbol')(Js(u'\u69cb')))
var.get(u'exports').put(u'data_symbol', var.get(u'data_symbol'))
var.put(u'error_symbol', var.get(u'new_symbol')(Js(u'\u8aa4')))
var.get(u'exports').put(u'error_symbol', var.get(u'error_symbol'))
var.put(u'symbol_symbol', var.get(u'new_symbol')(Js(u'\u8a5e\u7d20')))
var.get(u'exports').put(u'symbol_symbol', var.get(u'symbol_symbol'))
var.put(u'list_symbol', var.get(u'new_symbol')(Js(u'\u5217')))
var.get(u'exports').put(u'list_symbol', var.get(u'list_symbol'))
var.put(u'head_symbol', var.get(u'new_symbol')(Js(u'\u9996')))
var.get(u'exports').put(u'head_symbol', var.get(u'head_symbol'))
var.put(u'tail_symbol', var.get(u'new_symbol')(Js(u'\u5c3e')))
var.get(u'exports').put(u'tail_symbol', var.get(u'tail_symbol'))
var.put(u'thing_symbol', var.get(u'new_symbol')(Js(u'\u7269')))
var.get(u'exports').put(u'thing_symbol', var.get(u'thing_symbol'))
var.put(u'theWorldStopped_symbol', var.get(u'new_symbol')(Js(u'\u5b87\u5b99\u4ea1\u77e3')))
var.get(u'exports').put(u'theWorldStopped_symbol', var.get(u'theWorldStopped_symbol'))
var.put(u'effect_symbol', var.get(u'new_symbol')(Js(u'\u6548\u61c9')))
var.get(u'exports').put(u'effect_symbol', var.get(u'effect_symbol'))
var.put(u'sequentialWordFormation_symbol', var.get(u'new_symbol')(Js(u'\u70ba\u7b26\u540d\u9023')))
var.get(u'exports').put(u'sequentialWordFormation_symbol', var.get(u'sequentialWordFormation_symbol'))
var.put(u'inputOutput_symbol', var.get(u'new_symbol')(Js(u'\u51fa\u5165\u6539\u6ec5')))
var.get(u'exports').put(u'inputOutput_symbol', var.get(u'inputOutput_symbol'))
var.put(u'the_world_stopped_v', var.get(u'new_error')(var.get(u'system_symbol'), var.get(u'new_list')(var.get(u'theWorldStopped_symbol'), var.get(u'something_symbol'))))
pass
pass
pass
pass
var.put(u'new_data_function_builtin_systemName', var.get(u'make_builtin_f_new_sym_f')(var.get(u'data_symbol')))
var.get(u'exports').put(u'new_data_function_builtin_systemName', var.get(u'new_data_function_builtin_systemName'))
var.put(u'data_name_function_builtin_systemName', var.get(u'make_builtin_f_get_sym_f')(var.get(u'data_symbol'), var.get(u'name_symbol')))
var.get(u'exports').put(u'data_name_function_builtin_systemName', var.get(u'data_name_function_builtin_systemName'))
var.put(u'data_list_function_builtin_systemName', var.get(u'make_builtin_f_get_sym_f')(var.get(u'data_symbol'), var.get(u'list_symbol')))
var.get(u'exports').put(u'data_list_function_builtin_systemName', var.get(u'data_list_function_builtin_systemName'))
var.put(u'data_p_function_builtin_systemName', var.get(u'make_builtin_f_p_sym_f')(var.get(u'data_symbol')))
var.get(u'exports').put(u'data_p_function_builtin_systemName', var.get(u'data_p_function_builtin_systemName'))
var.put(u'new_error_function_builtin_systemName', var.get(u'make_builtin_f_new_sym_f')(var.get(u'error_symbol')))
var.get(u'exports').put(u'new_error_function_builtin_systemName', var.get(u'new_error_function_builtin_systemName'))
var.put(u'error_name_function_builtin_systemName', var.get(u'make_builtin_f_get_sym_f')(var.get(u'error_symbol'), var.get(u'name_symbol')))
var.get(u'exports').put(u'error_name_function_builtin_systemName', var.get(u'error_name_function_builtin_systemName'))
var.put(u'error_list_function_builtin_systemName', var.get(u'make_builtin_f_get_sym_f')(var.get(u'error_symbol'), var.get(u'list_symbol')))
var.get(u'exports').put(u'error_list_function_builtin_systemName', var.get(u'error_list_function_builtin_systemName'))
var.put(u'error_p_function_builtin_systemName', var.get(u'make_builtin_f_p_sym_f')(var.get(u'error_symbol')))
var.get(u'exports').put(u'error_p_function_builtin_systemName', var.get(u'error_p_function_builtin_systemName'))
var.put(u'new_construction_function_builtin_systemName', var.get(u'make_builtin_f_new_sym_f')(var.get(u'construction_symbol')))
var.get(u'exports').put(u'new_construction_function_builtin_systemName', var.get(u'new_construction_function_builtin_systemName'))
var.put(u'construction_p_function_builtin_systemName', var.get(u'make_builtin_f_p_sym_f')(var.get(u'construction_symbol')))
var.get(u'exports').put(u'construction_p_function_builtin_systemName', var.get(u'construction_p_function_builtin_systemName'))
var.put(u'construction_head_function_builtin_systemName', var.get(u'make_builtin_f_get_sym_f')(var.get(u'construction_symbol'), var.get(u'head_symbol')))
var.get(u'exports').put(u'construction_head_function_builtin_systemName', var.get(u'construction_head_function_builtin_systemName'))
var.put(u'construction_tail_function_builtin_systemName', var.get(u'make_builtin_f_get_sym_f')(var.get(u'construction_symbol'), var.get(u'tail_symbol')))
var.get(u'exports').put(u'construction_tail_function_builtin_systemName', var.get(u'construction_tail_function_builtin_systemName'))
var.put(u'symbol_p_function_builtin_systemName', var.get(u'make_builtin_f_p_sym_f')(var.get(u'symbol_symbol')))
var.get(u'exports').put(u'symbol_p_function_builtin_systemName', var.get(u'symbol_p_function_builtin_systemName'))
var.put(u'null_p_function_builtin_systemName', var.get(u'make_builtin_f_p_sym_f')(var.get(u'null_symbol')))
var.get(u'exports').put(u'null_p_function_builtin_systemName', var.get(u'null_p_function_builtin_systemName'))
var.put(u'equal_p_function_builtin_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'function_symbol'), var.get(u'new_list')(var.get(u'isOrNot_symbol'), var.get(u'equal_symbol')))))
var.get(u'exports').put(u'equal_p_function_builtin_systemName', var.get(u'equal_p_function_builtin_systemName'))
var.put(u'apply_function_builtin_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'new_construction')(var.get(u'function_symbol'), var.get(u'something_symbol')), var.get(u'something_symbol')), var.get(u'apply_symbol'))))
var.get(u'exports').put(u'apply_function_builtin_systemName', var.get(u'apply_function_builtin_systemName'))
var.put(u'evaluate_function_builtin_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'function_symbol'), var.get(u'evaluate_sym'))))
var.get(u'exports').put(u'evaluate_function_builtin_systemName', var.get(u'evaluate_function_builtin_systemName'))
var.put(u'list_chooseOne_function_builtin_systemName', var.get(u'make_builtin_f_get_sym_f')(var.get(u'list_symbol'), var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'thing_symbol'), var.get(u'something_symbol'))))
var.get(u'exports').put(u'list_chooseOne_function_builtin_systemName', var.get(u'list_chooseOne_function_builtin_systemName'))
var.put(u'if_function_builtin_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'function_symbol'), var.get(u'if_symbol'))))
var.get(u'exports').put(u'if_function_builtin_systemName', var.get(u'if_function_builtin_systemName'))
var.put(u'quote_form_builtin_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'form_symbol'), var.get(u'quote_symbol'))))
var.get(u'exports').put(u'quote_form_builtin_systemName', var.get(u'quote_form_builtin_systemName'))
var.put(u'lambda_form_builtin_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'typeAnnotation_symbol'), var.get(u'new_list')(var.get(u'form_symbol'), var.get(u'new_list')(var.get(u'function_symbol'), var.get(u'something_symbol'), var.get(u'function_symbol'))), var.get(u'theThing_symbol'))))
var.get(u'exports').put(u'lambda_form_builtin_systemName', var.get(u'lambda_form_builtin_systemName'))
var.put(u'function_builtin_use_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'form_symbol'), var.get(u'new_list')(var.get(u'system_symbol'), var.get(u'function_symbol')))))
var.get(u'exports').put(u'function_builtin_use_systemName', var.get(u'function_builtin_use_systemName'))
var.put(u'form_builtin_use_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'form_symbol'), var.get(u'new_list')(var.get(u'system_symbol'), var.get(u'form_symbol')))))
var.get(u'exports').put(u'form_builtin_use_systemName', var.get(u'form_builtin_use_systemName'))
var.put(u'form_use_systemName', var.get(u'systemName_make')(var.get(u'new_list')(var.get(u'form_symbol'), var.get(u'form_symbol'))))
var.get(u'exports').put(u'form_use_systemName', var.get(u'form_use_systemName'))
var.put(u'false_v', var.get(u'new_data')(var.get(u'false_symbol'), var.get(u'new_list')()))
var.put(u'true_v', var.get(u'new_data')(var.get(u'true_symbol'), var.get(u'new_list')()))
pass
pass
var.get(u'exports').put(u'jsArray_to_list', var.get(u'jsArray_to_list'))
pass
pass
var.get(u'exports').put(u'maybe_list_to_jsArray', var.get(u'maybe_list_to_jsArray'))
pass
var.get(u'exports').put(u'new_list', var.get(u'new_list'))
pass
pass
var.get(u'exports').put(u'delay_p', var.get(u'any_delay_just_p'))
pass
var.get(u'exports').put(u'force_all', var.get(u'force_all'))
pass
var.get(u'exports').put(u'force1', var.get(u'force1'))
var.put(u'env_null_v', Js([]))
var.get(u'exports').put(u'env_null_v', var.get(u'env_null_v'))
pass
var.get(u'exports').put(u'env_set', var.get(u'env_set'))
pass
var.get(u'exports').put(u'env_get', var.get(u'env_get'))
pass
pass
var.get(u'exports').put(u'env2val', var.get(u'env2val'))
pass
var.get(u'exports').put(u'env_foreach', var.get(u'env_foreach'))
pass
var.get(u'exports').put(u'val2env', var.get(u'val2env'))
pass
pass
pass
pass
@Js
def PyJs_anonymous_8_(x, y, error_v, this, arguments, var=var):
    var = Scope({u'y':y, u'x':x, u'error_v':error_v, u'this':this, u'arguments':arguments}, var)
    var.registers([u'end_2', u'error_v', u'H_if', u'H_and', u'y', u'x'])
    @Js
    def PyJsHoisted_end_2_(x, y, f1, f2, this, arguments, var=var):
        var = Scope({u'f1':f1, u'f2':f2, u'arguments':arguments, u'y':y, u'x':x, u'this':this}, var)
        var.registers([u'y', u'x', u'f2', u'f1'])
        return var.get(u'H_and')(var.get(u'builtin_func_apply')(var.get(u'equal_p_function_builtin_systemName'), Js([var.get(u'f1')(var.get(u'x')), var.get(u'f1')(var.get(u'y'))])), var.get(u'builtin_func_apply')(var.get(u'equal_p_function_builtin_systemName'), Js([var.get(u'f2')(var.get(u'x')), var.get(u'f2')(var.get(u'y'))])))
    PyJsHoisted_end_2_.func_name = u'end_2'
    var.put(u'end_2', PyJsHoisted_end_2_)
    @Js
    def PyJsHoisted_H_if_(b, x, y, this, arguments, var=var):
        var = Scope({u'y':y, u'x':x, u'b':b, u'this':this, u'arguments':arguments}, var)
        var.registers([u'y', u'x', u'b'])
        return var.get(u'builtin_func_apply')(var.get(u'if_function_builtin_systemName'), Js([var.get(u'b'), var.get(u'x'), var.get(u'y')]))
    PyJsHoisted_H_if_.func_name = u'H_if'
    var.put(u'H_if', PyJsHoisted_H_if_)
    @Js
    def PyJsHoisted_H_and_(x, y, this, arguments, var=var):
        var = Scope({u'y':y, u'x':x, u'this':this, u'arguments':arguments}, var)
        var.registers([u'y', u'x'])
        return var.get(u'H_if')(var.get(u'x'), var.get(u'y'), var.get(u'false_v'))
    PyJsHoisted_H_and_.func_name = u'H_and'
    var.put(u'H_and', PyJsHoisted_H_and_)
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return var.get(u'true_v')
    var.put(u'x', var.get(u'force1')(var.get(u'x')))
    var.put(u'y', var.get(u'force1')(var.get(u'y')))
    if (var.get(u'any_delay_just_p')(var.get(u'x')) or var.get(u'any_delay_just_p')(var.get(u'y'))):
        return var.get(u'builtin_func_apply')(var.get(u'equal_p_function_builtin_systemName'), Js([var.get(u'x'), var.get(u'y')]))
    if PyJsStrictEq(var.get(u'x'),var.get(u'y')):
        return var.get(u'true_v')
    pass
    pass
    var.get(u'ASSERT')(var.get(u'any_delay_just_p')(var.get(u'x')).neg())
    pass
    if var.get(u'null_p')(var.get(u'x')):
        if var.get(u'null_p')(var.get(u'x')).neg():
            return var.get(u'false_v')
        return var.get(u'true_v')
    else:
        if var.get(u'symbol_p')(var.get(u'x')):
            if var.get(u'symbol_p')(var.get(u'y')).neg():
                return var.get(u'false_v')
            return (var.get(u'true_v') if var.get(u'symbol_equal_p')(var.get(u'x'), var.get(u'y')) else var.get(u'false_v'))
        else:
            if var.get(u'data_p')(var.get(u'x')):
                if var.get(u'data_p')(var.get(u'y')).neg():
                    return var.get(u'false_v')
                return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'data_name'), var.get(u'data_list'))
            else:
                if var.get(u'construction_p')(var.get(u'x')):
                    if var.get(u'construction_p')(var.get(u'y')).neg():
                        return var.get(u'false_v')
                    return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'construction_head'), var.get(u'construction_tail'))
                else:
                    if var.get(u'error_p')(var.get(u'x')):
                        if var.get(u'error_p')(var.get(u'y')).neg():
                            return var.get(u'false_v')
                        return var.get(u'end_2')(var.get(u'x'), var.get(u'y'), var.get(u'error_name'), var.get(u'error_list'))
    return var.get(u'ERROR')()
PyJs_anonymous_8_._set_name(u'anonymous')
@Js
def PyJs_anonymous_9_(f, xs, error_v, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'error_v':error_v, u'arguments':arguments, u'f':f}, var)
    var.registers([u'xs', u'error_v', u'jslist', u'iter', u'f'])
    var.put(u'jslist', Js([]))
    var.put(u'iter', var.get(u'force_all')(var.get(u'xs')))
    while var.get(u'construction_p')(var.get(u'iter')):
        var.get(u'jslist').callprop(u'push', var.get(u'construction_head')(var.get(u'iter')))
        var.put(u'iter', var.get(u'force_all')(var.get(u'construction_tail')(var.get(u'iter'))))
    if var.get(u'null_p')(var.get(u'iter')).neg():
        return var.get(u'error_v')
    return var.get(u'apply')(var.get(u'f'), var.get(u'jslist'))
PyJs_anonymous_9_._set_name(u'anonymous')
@Js
def PyJs_anonymous_10_(env, x, error_v, this, arguments, var=var):
    var = Scope({u'this':this, u'x':x, u'error_v':error_v, u'arguments':arguments, u'env':env}, var)
    var.registers([u'maybeenv', u'error_v', u'env', u'x'])
    var.put(u'maybeenv', var.get(u'val2env')(var.get(u'env')))
    if PyJsStrictEq(var.get(u'maybeenv'),Js(False)):
        return var.get(u'error_v')
    return var.get(u'evaluate')(var.get(u'maybeenv'), var.get(u'x'))
PyJs_anonymous_10_._set_name(u'anonymous')
@Js
def PyJs_anonymous_11_(xs, error_v, this, arguments, var=var):
    var = Scope({u'this':this, u'xs':xs, u'error_v':error_v, u'arguments':arguments}, var)
    var.registers([u'xs', u'error_v'])
    var.put(u'xs', var.get(u'force1')(var.get(u'xs')))
    if var.get(u'any_delay_just_p')(var.get(u'xs')):
        return var.get(u'builtin_func_apply')(var.get(u'list_chooseOne_function_builtin_systemName'), Js([var.get(u'xs')]))
    if var.get(u'construction_p')(var.get(u'xs')).neg():
        return var.get(u'error_v')
    return var.get(u'construction_head')(var.get(u'xs'))
PyJs_anonymous_11_._set_name(u'anonymous')
@Js
def PyJs_anonymous_12_(b, x, y, error_v, this, arguments, var=var):
    var = Scope({u'this':this, u'b':b, u'arguments':arguments, u'y':y, u'x':x, u'error_v':error_v}, var)
    var.registers([u'y', u'x', u'error_v', u'b', u'nam'])
    var.put(u'b', var.get(u'force1')(var.get(u'b')))
    if var.get(u'any_delay_just_p')(var.get(u'b')):
        return var.get(u'builtin_func_apply')(var.get(u'if_function_builtin_systemName'), Js([var.get(u'b'), var.get(u'x'), var.get(u'y')]))
    if var.get(u'data_p')(var.get(u'b')).neg():
        return var.get(u'error_v')
    var.put(u'nam', var.get(u'force_all')(var.get(u'data_name')(var.get(u'b'))))
    if var.get(u'symbol_p')(var.get(u'nam')).neg():
        return var.get(u'error_v')
    if var.get(u'symbol_equal_p')(var.get(u'nam'), var.get(u'true_symbol')):
        return var.get(u'x')
    if var.get(u'symbol_equal_p')(var.get(u'nam'), var.get(u'false_symbol')):
        return var.get(u'y')
    return var.get(u'error_v')
PyJs_anonymous_12_._set_name(u'anonymous')
var.put(u'real_builtin_func_apply_s', Js([var.get(u'make_builtin_p_func')(var.get(u'data_p_function_builtin_systemName'), var.get(u'data_p')), Js([var.get(u'new_data_function_builtin_systemName'), Js(2.0), var.get(u'new_data')]), var.get(u'make_builtin_get_func')(var.get(u'data_name_function_builtin_systemName'), var.get(u'data_p'), var.get(u'data_name')), var.get(u'make_builtin_get_func')(var.get(u'data_list_function_builtin_systemName'), var.get(u'data_p'), var.get(u'data_list')), var.get(u'make_builtin_p_func')(var.get(u'error_p_function_builtin_systemName'), var.get(u'error_p')), Js([var.get(u'new_error_function_builtin_systemName'), Js(2.0), var.get(u'new_error')]), var.get(u'make_builtin_get_func')(var.get(u'error_name_function_builtin_systemName'), var.get(u'error_p'), var.get(u'error_name')), var.get(u'make_builtin_get_func')(var.get(u'error_list_function_builtin_systemName'), var.get(u'error_p'), var.get(u'error_list')), var.get(u'make_builtin_p_func')(var.get(u'null_p_function_builtin_systemName'), var.get(u'null_p')), Js([var.get(u'new_construction_function_builtin_systemName'), Js(2.0), var.get(u'new_construction')]), var.get(u'make_builtin_p_func')(var.get(u'construction_p_function_builtin_systemName'), var.get(u'construction_p')), var.get(u'make_builtin_get_func')(var.get(u'construction_head_function_builtin_systemName'), var.get(u'construction_p'), var.get(u'construction_head')), var.get(u'make_builtin_get_func')(var.get(u'construction_tail_function_builtin_systemName'), var.get(u'construction_p'), var.get(u'construction_tail')), Js([var.get(u'equal_p_function_builtin_systemName'), Js(2.0), PyJs_anonymous_8_]), Js([var.get(u'apply_function_builtin_systemName'), Js(2.0), PyJs_anonymous_9_]), Js([var.get(u'evaluate_function_builtin_systemName'), Js(2.0), PyJs_anonymous_10_]), var.get(u'make_builtin_p_func')(var.get(u'symbol_p_function_builtin_systemName'), var.get(u'symbol_p')), Js([var.get(u'list_chooseOne_function_builtin_systemName'), Js(1.0), PyJs_anonymous_11_]), Js([var.get(u'if_function_builtin_systemName'), Js(3.0), PyJs_anonymous_12_])]))
pass
pass
pass
pass
pass
var.get(u'exports').put(u'equal_p', var.get(u'jsbool_equal_p'))
pass
pass
var.get(u'exports').put(u'simple_print', var.get(u'simple_print'))
pass
var.get(u'exports').put(u'simple_print_force_all_rec', var.get(u'simple_print_force_all_rec'))
pass
var.get(u'exports').put(u'simple_parse', var.get(u'simple_parse'))
pass
var.get(u'exports').put(u'complex_parse', var.get(u'complex_parse'))
pass
var.get(u'exports').put(u'complex_print', var.get(u'complex_print'))
pass


# Add lib to the module scope
exports = var.to_python().exports
__esModule = exports.__esModule
new_symbol = exports.new_symbol
symbol_p = exports.symbol_p
un_symbol = exports.un_symbol
new_construction = exports.new_construction
construction_p = exports.construction_p
construction_head = exports.construction_head
construction_tail = exports.construction_tail
null_v = exports.null_v
null_p = exports.null_p
new_data = exports.new_data
data_p = exports.data_p
data_name = exports.data_name
data_list = exports.data_list
new_error = exports.new_error
error_p = exports.error_p
error_name = exports.error_name
error_list = exports.error_list
evaluate = exports.evaluate
apply = exports.apply
force_all_rec = exports.force_all_rec
system_symbol = exports.system_symbol
name_symbol = exports.name_symbol
function_symbol = exports.function_symbol
form_symbol = exports.form_symbol
equal_symbol = exports.equal_symbol
evaluate_sym = exports.evaluate_sym
theThing_symbol = exports.theThing_symbol
something_symbol = exports.something_symbol
mapping_symbol = exports.mapping_symbol
if_symbol = exports.if_symbol
typeAnnotation_symbol = exports.typeAnnotation_symbol
isOrNot_symbol = exports.isOrNot_symbol
sub_symbol = exports.sub_symbol
true_symbol = exports.true_symbol
false_symbol = exports.false_symbol
quote_symbol = exports.quote_symbol
apply_symbol = exports.apply_symbol
null_symbol = exports.null_symbol
construction_symbol = exports.construction_symbol
data_symbol = exports.data_symbol
error_symbol = exports.error_symbol
symbol_symbol = exports.symbol_symbol
list_symbol = exports.list_symbol
head_symbol = exports.head_symbol
tail_symbol = exports.tail_symbol
thing_symbol = exports.thing_symbol
theWorldStopped_symbol = exports.theWorldStopped_symbol
effect_symbol = exports.effect_symbol
sequentialWordFormation_symbol = exports.sequentialWordFormation_symbol
inputOutput_symbol = exports.inputOutput_symbol
new_data_function_builtin_systemName = exports.new_data_function_builtin_systemName
data_name_function_builtin_systemName = exports.data_name_function_builtin_systemName
data_list_function_builtin_systemName = exports.data_list_function_builtin_systemName
data_p_function_builtin_systemName = exports.data_p_function_builtin_systemName
new_error_function_builtin_systemName = exports.new_error_function_builtin_systemName
error_name_function_builtin_systemName = exports.error_name_function_builtin_systemName
error_list_function_builtin_systemName = exports.error_list_function_builtin_systemName
error_p_function_builtin_systemName = exports.error_p_function_builtin_systemName
new_construction_function_builtin_systemName = exports.new_construction_function_builtin_systemName
construction_p_function_builtin_systemName = exports.construction_p_function_builtin_systemName
construction_head_function_builtin_systemName = exports.construction_head_function_builtin_systemName
construction_tail_function_builtin_systemName = exports.construction_tail_function_builtin_systemName
symbol_p_function_builtin_systemName = exports.symbol_p_function_builtin_systemName
null_p_function_builtin_systemName = exports.null_p_function_builtin_systemName
equal_p_function_builtin_systemName = exports.equal_p_function_builtin_systemName
apply_function_builtin_systemName = exports.apply_function_builtin_systemName
evaluate_function_builtin_systemName = exports.evaluate_function_builtin_systemName
list_chooseOne_function_builtin_systemName = exports.list_chooseOne_function_builtin_systemName
if_function_builtin_systemName = exports.if_function_builtin_systemName
quote_form_builtin_systemName = exports.quote_form_builtin_systemName
lambda_form_builtin_systemName = exports.lambda_form_builtin_systemName
function_builtin_use_systemName = exports.function_builtin_use_systemName
form_builtin_use_systemName = exports.form_builtin_use_systemName
form_use_systemName = exports.form_use_systemName
jsArray_to_list = exports.jsArray_to_list
maybe_list_to_jsArray = exports.maybe_list_to_jsArray
new_list = exports.new_list
delay_p = exports.delay_p
force_all = exports.force_all
force1 = exports.force1
env_null_v = exports.env_null_v
env_set = exports.env_set
env_get = exports.env_get
env2val = exports.env2val
env_foreach = exports.env_foreach
val2env = exports.val2env
equal_p = exports.equal_p
simple_print = exports.simple_print
simple_print_force_all_rec = exports.simple_print_force_all_rec
simple_parse = exports.simple_parse
complex_parse = exports.complex_parse
complex_print = exports.complex_print
