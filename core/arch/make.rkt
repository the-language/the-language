#lang rash
;; in-dir is in the demo file still
(require rash/demo/setup)
(require make)
(require racket/match)
(define (id x) x)
(define c-copyright "/*
    The Language
    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
")
(define haskell-copyright "
--    The Language
--    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

--    This program is free software: you can redistribute it and/or modify
--    it under the terms of the GNU Affero General Public License as published
--    by the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.

--    This program is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU Affero General Public License for more details.

--    You should have received a copy of the GNU Affero General Public License
--    along with this program.  If not, see <https://www.gnu.org/licenses/>.

")
(define c-generatedby "/* Generated by make.rkt */\n")
(define haskell-generatedby "-- Generated by make.rkt\n")
(make
    (("all" ("ecmascript/lang.js"
             "ecmascript/lang.raw.js"
             "lua/lang.lua"
             "php/lang.php")
            (void))
     ("ecmascript/lang.raw.js" ("ecmascript/lang.js") (void)) ;; 生成代碼寫在"ecmascript/lang.js生成裡
     ("ecmascript/lang.js" ("typescript/lang.ts") {
        in-dir "typescript" {
            touch lang.js
            rm lang.js
            npx tsc --build tsconfig.json
            (define raw #{cat lang.js})
            (define full (string-append
                c-generatedby
                "(function(){\n"
                raw
                "\n})();"
            ))
            echo $full &>! lang.full.js
            (define google-closure-exports (string-append
                c-generatedby
                "var exports = {};\n"
                #{grep "^exports." lang.full.js | awk (id "{print $1}") | sed (id "s|^\\(.*\\)$|\\1 = 'something';|")}
                ))
            echo $google-closure-exports &>! lang.externs.js
            npx google-closure-compiler -W QUIET --assume_function_wrapper --language_out ECMASCRIPT3 --js lang.full.js --externs lang.externs.js -O ADVANCED &>! lang.js
            cp lang.js ../ecmascript
            (define lang.pretty-print.js (string-append
                c-generatedby
                #{npx js-beautify lang.js}
                ))
            echo $lang.pretty-print.js &>! lang.pretty-print.js
            echo $raw &>! ../ecmascript/lang.raw.js
     }})
     ("lua/lang.lua" ("typescript/lang.ts") {
         in-dir "lua" {
             npx tstl -p tsconfig.json
             (define out (string-append
                 haskell-generatedby
                 haskell-copyright
                 #{sed (id "s|local exports = exports or {};|local exports = {};|") lang.lua}
                 ))
             echo $out &>! lang.lua
     }})
     ("php/lang.php" ("ecmascript/lang.raw.js" "php/runtime.php") {
         in-dir "php" {
             (define js-file (string-append
                 "var the_language=(function(){var exports={};\n"
                 #{cat ../ecmascript/lang.raw.js}
                 "\nreturn exports;})();"
                 ))
             (define raw #{echo $js-file | npx js2php --runtime runtime.php --quiet})
             echo ka
             (define out (string-append
                 "<?php\n"
                 c-generatedby
                 c-copyright
                 (match raw
                     [(regexp #rx"<?php\nrequire_once\\(\"runtime.php\"\\);\n(.*)" (list _ x)) x])
                 ))
             echo $out &>! lang.php
     }})

     )
    (current-command-line-arguments))
