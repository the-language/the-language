#lang rash
;; in-dir is in the demo file still
(require rash/demo/setup)
(require make)
(require racket)
(define (id x) x)
(define c-copyright "/*
    The Language
    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
")
(define haskell-copyright "
--    The Language
--    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

--    This program is free software: you can redistribute it and/or modify
--    it under the terms of the GNU Affero General Public License as published
--    by the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.

--    This program is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU Affero General Public License for more details.

--    You should have received a copy of the GNU Affero General Public License
--    along with this program.  If not, see <https://www.gnu.org/licenses/>.

")
(define c-generatedby "/* Generated by make.rkt */\n")
(define haskell-generatedby "-- Generated by make.rkt\n")
(define bash-generatedby "# Generated by make.rkt\n")
(define (ecmascript/exports.list-parse) (filter-not (lambda (x) (equal? x "")) (string-split #{cat ../ecmascript/exports.list} "\n")))
(make
    (("all" ("ecmascript/lang.js"
             "ecmascript/lang.raw.js"
             "lua/lang.lua"
             "ecmascript6/lang.js"
             "python/lang.py"
             "php/lang.php")
            (void))
     ("ecmascript/lang.raw.js" ("ecmascript/lang.js") (void)) ;; 生成代碼寫在"ecmascript/lang.js生成裡
     ("ecmascript/exports.list" ("ecmascript/lang.js") (void)) ;; 生成代碼寫在"ecmascript/lang.js生成裡
     ("ecmascript/lang.js" ("typescript/lang.ts") {
        in-dir "typescript" {
            yarn
            touch lang.js
            rm lang.js
            npx tsc --build tsconfig.json
            (define raw (string-append c-generatedby (match (string-split #{cat lang.js} "\n")
                [(list "\"use strict\";" "exports.__esModule = true;" xs ...) (apply string-append (map (lambda (x) (string-append x"\n")) xs))])))
            |> id raw &>! ../ecmascript/lang.raw.js
            (define exports
                (filter-not
                    (lambda (x) (equal? x ""))
                    (string-split
                        #{grep "^exports." ../ecmascript/lang.raw.js | awk (id "{print $1}") | sed (id "s|^exports.\\(.*\\)$|\\1|")}
                        "\n")))
            (define exports.list (apply string-append (map (lambda (x) (string-append x"\n")) exports)))
            (define google-closure-exports (string-append
                c-generatedby
                "var exports = {};\n"
                (apply string-append (map (lambda (x) (string-append "exports."x"='something';\n")) exports))
                ))
            |> id google-closure-exports &>! lang.externs.js
            npx google-closure-compiler -W QUIET --assume_function_wrapper --language_out ECMASCRIPT3 --js ../ecmascript/lang.raw.js --externs lang.externs.js -O ADVANCED &>! lang.js
            cp lang.js ../ecmascript
            |> id exports.list &>! ../ecmascript/exports.list
            touch ../ecmascript/lang.raw.js ;; 因為"ecmascript/lang.raw.js"生成之實現
     }})
     ("lua/lang.lua" ("typescript/lang.ts") {
         in-dir "lua" {
             yarn
             npx tstl -p tsconfig.json
             (define out (string-append
                 haskell-generatedby
                 haskell-copyright
                 #{sed (id "s|local exports = exports or {};|local exports = {};|") lang.lua}
                 ))
             |> id out &>! lang.lua
     }})
     ("ecmascript6/lang.js" ("typescript/lang.ts") {
         in-dir "ecmascript6" {
             yarn
             npx tsc --build tsconfig.json
             (define raw #{cat lang.js})
             |> string-append c-generatedby raw &>! lang.js
     }})
     ("python/lang.py" ("ecmascript/lang.js" "ecmascript/exports.list") {
         in-dir "python" {
             (define raw-js (string-append
                 "var exports={};"
                 #{cat ../ecmascript/lang.js}))
             |> id raw-js &>! lang.js
             |> id "import js2py\njs2py.translate_file('lang.js','lang.py')\n" | python
             (define exports (ecmascript/exports.list-parse))
             (define exports-py (string-append
                 "exports = var.to_python().exports\n"
                 (apply string-append (map (lambda (x) (string-append x" = exports."x"\n")) exports))
                 ))
             (define all-py (string-append
                 "__all__ = ["
                 (apply string-append (add-between (map (lambda (x) (string-append "'"x"'")) exports)", "))
                 "]\n"
                 ))
             (define py-raw (string-split #{cat lang.py} "\n"))
             (match-define (list py-raw-head py-raw-body ... py-raw-tail) py-raw)
             (define py (string-append
                 bash-generatedby
                 (match py-raw-head ["__all__ = ['lang']" all-py])
                 (apply string-append (map (lambda (x) (string-append x"\n")) py-raw-body))
                 "\n"
                 (match py-raw-tail ["lang = var.to_python()" exports-py])))
             |> id py &>! lang.py
     }})
     ("php/lang.php" ("ecmascript/lang.raw.js" "ecmascript/exports.list") {
         ;; TODO
         ;; * env_foreach
         ;; * without mbstring
         in-dir "php" {
             yarn
             (define exports-function-* (list->set '(
                 new_list
                 )))
             (define exports-function-1 (list->set '(
                 new_symbol
                 symbol_p
                 un_symbol
                 construction_p
                 construction_head
                 construction_tail
                 null_p
                 data_p
                 data_name
                 data_list
                 error_p
                 error_name
                 error_list
                 force_all_rec
                 jsArray_to_list
                 maybe_list_to_jsArray
                 delay_p
                 force_all
                 force1
                 env2val
                 val2env
                 simple_print
                 simple_print_force_all_rec
                 simple_parse
                 complex_parse
                 complex_print
                 )))
             (define exports-function-2 (list->set '(
                 equal_p
                 evaluate
                 apply
                 new_construction
                 new_data
                 new_error
                 )))
             (define exports-function-3 (list->set '(
                 env_set
                 env_get
                 env_foreach ;; 應該有BUG,因為傳入函數
                 )))
             (define exports-value (list->set '(
                 null_v
                 env_null_v
                 inputOutput_symbol
                 system_symbol
                 name_symbol
                 function_symbol
                 form_symbol
                 equal_symbol
                 evaluate_sym
                 theThing_symbol
                 something_symbol
                 mapping_symbol
                 if_symbol
                 typeAnnotation_symbol
                 isOrNot_symbol
                 sub_symbol
                 true_symbol
                 false_symbol
                 quote_symbol
                 apply_symbol
                 null_symbol
                 construction_symbol
                 data_symbol
                 error_symbol
                 symbol_symbol
                 list_symbol
                 head_symbol
                 tail_symbol
                 thing_symbol
                 theWorldStopped_symbol
                 effect_symbol
                 sequentialWordFormation_symbol
                 new_data_function_builtin_systemName
                 data_name_function_builtin_systemName
                 data_list_function_builtin_systemName
                 data_p_function_builtin_systemName
                 new_error_function_builtin_systemName
                 error_name_function_builtin_systemName
                 error_list_function_builtin_systemName
                 error_p_function_builtin_systemName
                 new_construction_function_builtin_systemName
                 construction_p_function_builtin_systemName
                 construction_head_function_builtin_systemName
                 construction_tail_function_builtin_systemName
                 symbol_p_function_builtin_systemName
                 null_p_function_builtin_systemName
                 equal_p_function_builtin_systemName
                 apply_function_builtin_systemName
                 evaluate_function_builtin_systemName
                 list_chooseOne_function_builtin_systemName
                 if_function_builtin_systemName
                 quote_form_builtin_systemName
                 lambda_form_builtin_systemName
                 function_builtin_use_systemName
                 form_builtin_use_systemName
                 form_use_systemName
                 )))
             (define exports (ecmascript/exports.list-parse))
             (define raw-js (string-append "var exports={};\n" #{cat ../ecmascript/lang.raw.js}))
             |> id raw-js &>! lang.js
             (define raw-php-list (string-split #{npx js2php lang.js} "\n"))
             (define lang.php (string-append
                 "<?php\n"
                 c-generatedby
                 c-copyright
                 "\n"
                 (match raw-php-list [(list "<?php" xs ...) (apply string-append (map (lambda (x) (string-append x"\n")) xs))])
                 "\n"
                 (apply string-append (map
                     (lambda (export-sym)
                        (define export-str (symbol->string export-sym))
                        (cond
                            [(set-member? exports-function-* export-sym)
                             (string-append
                                 "function "export-str
                                 "(...$args){global $"export-str";return call($"export-str",...$args);}\n")]
                            [(set-member? exports-function-1 export-sym)
                             (string-append
                                 "function "export-str
                                 "($argx){global $"export-str";return call($"export-str",$argx);}\n")]
                            [(set-member? exports-function-2 export-sym)
                             (string-append
                                 "function "export-str
                                 "($argx,$argy){global $"export-str";return call($"export-str",$argx,$argy);}\n")]
                            [(set-member? exports-function-3 export-sym)
                             (string-append
                                 "function "export-str
                                 "($argx,$argy,$argz){global $"export-str";return call($"export-str",$argx,$argy,$argz);}\n")]
                            [(set-member? exports-value export-sym) ""]
                            [else (raise "ERROR!")]))
                     (map string->symbol exports)))
                 "?>\n"
                 ))
             |> id lang.php &>! lang.php
     }})
     )
    (current-command-line-arguments))
