source_filename = "test"
target datalayout = "e-m:e-p:64:64-i64:64-f80:128-n8:16:32:64-S128"

@cf = internal unnamed_addr global i1 false
@pf = internal unnamed_addr global i1 false
@zf = internal unnamed_addr global i1 false
@of = internal unnamed_addr global i1 false
@xmm0 = internal unnamed_addr global i128 0
@xmm1 = internal unnamed_addr global i128 0
@rax = internal unnamed_addr global i64 0
@rcx = internal unnamed_addr global i64 0
@rdx = internal unnamed_addr global i64 0
@rbx = internal unnamed_addr global i64 0
@rsp = internal unnamed_addr global i64 0
@rbp = internal unnamed_addr global i64 0
@rsi = internal unnamed_addr global i64 0
@rdi = internal unnamed_addr global i64 0
@r8 = internal unnamed_addr global i64 0
@r10 = internal unnamed_addr global i64 0
@r11 = internal unnamed_addr global i64 0
@r12 = internal unnamed_addr global i64 0
@r13 = internal unnamed_addr global i64 0
@r14 = internal unnamed_addr global i64 0
@r15 = internal unnamed_addr global i64 0
@global_var_129b.7475 = local_unnamed_addr constant i64 -1404199492896485437
@global_var_5047.7476 = local_unnamed_addr constant i64 2216628163
@global_var_108.7479 = constant i64 5011178175217008693
@global_var_107.7480 = constant [3 x i8] c"D5\00"
@global_var_6c.7484 = constant i64 6381881047449075765
@0 = external global i32
@global_var_44.7477 = constant i32* inttoptr (i64 37188846989213760 to i32*)

define i64 @"_ZN4lang12lang_luaj$6512initupvalue1EJvPN3org4luaj3vm28LuaValueE"() local_unnamed_addr {
dec_label_pc_50:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang12lang_luaj$324callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_60:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang17lang_luaj$76$15$112initupvalue1EJvPN3org4luaj3vm28LuaValueE"() local_unnamed_addr {
dec_label_pc_80:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang17lang_luaj$77$20$112initupvalue1EJvPN3org4luaj3vm28LuaValueE"() local_unnamed_addr {
dec_label_pc_90:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang15lang_luaj$77$144callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_a0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang12lang_luaj$204callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_130:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang12lang_luaj$4112initupvalue1EJvPN3org4luaj3vm28LuaValueE"() local_unnamed_addr {
dec_label_pc_150:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang14lang_luaj$77$44callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_160:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang16lang_luaj$76$7$14callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_1e0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang12lang_luaj$174callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_230:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang12lang_luaj$164callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_250:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_268() local_unnamed_addr {
dec_label_pc_268:
  %v0_26b = load i64, i64* @rax, align 8
  ret i64 %v0_26b
}

define i64 @"_ZN4lang11lang_luaj$74callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_270:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN4lang9lang_luaj12initupvalue1EJvPN3org4luaj3vm28LuaValueE() local_unnamed_addr {
dec_label_pc_290:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang14lang_luaj$76$44callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_2a0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang12lang_luaj$504callEJPN3org4luaj3vm28LuaValueES5_S5_"() local_unnamed_addr {
dec_label_pc_320:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_330(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_330:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v0_330 = load i64, i64* inttoptr (i64 823 to i64*), align 8
  %v2_3d8.pre = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_330, i64* @rbx, align 8
  store i64 %v2_3d8.pre, i64* @rax, align 8
  store i64 %v2_3d8.pre, i64* @rdi, align 8
  %v1_3e5242 = inttoptr i64 %v0_330 to i64*
  %v2_3e5243 = load i64, i64* %v1_3e5242, align 8
  store i64 %v2_3e5243, i64* @rdx, align 8
  store i64 %v0_330, i64* @rdi, align 8
  %v4_3f4 = trunc i64 %v2_3d8.pre to i8
  %v5_3f4 = icmp eq i8 %v4_3f4, 0
  %v1_3f6 = icmp eq i1 %v5_3f4, false
  br i1 %v1_3f6, label %dec_label_pc_340.lr.ph, label %dec_label_pc_3fc

dec_label_pc_340.lr.ph:                           ; preds = %dec_label_pc_330
  %v2_3af.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_340

dec_label_pc_340:                                 ; preds = %dec_label_pc_340, %dec_label_pc_340.lr.ph
  %v1_3e5245 = phi i64* [ %v1_3e5242, %dec_label_pc_340.lr.ph ], [ %v1_3e5, %dec_label_pc_340 ]
  %v0_3c2244 = phi i64 [ %v0_330, %dec_label_pc_340.lr.ph ], [ %v2_3c2, %dec_label_pc_340 ]
  %v2_340 = load i64, i64* %v1_3e5245, align 8
  store i64 %v2_340, i64* @rax, align 8
  store i64 %v2_3d8.pre, i64* @rdx, align 8
  store i64 %v2_3d8.pre, i64* @rdi, align 8
  %v2_379 = load i64, i64* %v1_3e5245, align 8
  store i64 %v2_379, i64* @rax, align 8
  store i64 %v2_3af.pre, i64* @rcx, align 8
  store i64 %v2_379, i64* @rdx, align 8
  store i64 %v2_3af.pre, i64* @rdi, align 8
  %v2_3c2 = load i64, i64* %v1_3e5245, align 8
  store i64 %v2_3c2, i64* @rax, align 8
  store i64 %v0_3c2244, i64* @rdi, align 8
  store i64 %v2_3c2, i64* @rbx, align 8
  store i64 %v2_3d8.pre, i64* @rax, align 8
  store i64 %v2_3d8.pre, i64* @rdi, align 8
  %v1_3e5 = inttoptr i64 %v2_3c2 to i64*
  %v2_3e5 = load i64, i64* %v1_3e5, align 8
  store i64 %v2_3e5, i64* @rdx, align 8
  store i64 %v2_3c2, i64* @rdi, align 8
  br label %dec_label_pc_340

dec_label_pc_3fc:                                 ; preds = %dec_label_pc_330
  %v0_3fc = load i64, i64* inttoptr (i64 1027 to i64*), align 8
  store i64 %v0_3fc, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  ret i64 %v0_3fc
}

define i64 @"_ZN4lang17lang_luaj$77$22$112initupvalue1EJvPN3org4luaj3vm28LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_410:
  store i64 %arg1, i64* @rdi, align 8
  %v2_410 = add i64 %arg1, 24
  %v3_410 = inttoptr i64 %v2_410 to i64*
  store i64 %arg2, i64* %v3_410, align 8
  %v0_414 = load i64, i64* @rax, align 8
  ret i64 %v0_414
}

define i64 @"_ZN4lang12lang_luaj$274callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_420:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$244callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_440:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang14lang_luaj$77$34callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_460:
  store i64 %arg1, i64* @rdi, align 8
  %v0_464 = load i64, i64* @rdi, align 8
  %v1_464 = add i64 %v0_464, 24
  %v2_464 = inttoptr i64 %v1_464 to i64*
  %v3_464 = load i64, i64* %v2_464, align 8
  store i64 %v3_464, i64* @rdi, align 8
  %v1_46f = inttoptr i64 %v3_464 to i64*
  %v2_46f = load i64, i64* %v1_46f, align 8
  store i64 %v2_46f, i64* @rax, align 8
  %v1_47f = inttoptr i64 %v2_46f to i64*
  %v2_47f = load i64, i64* %v1_47f, align 8
  store i64 %v2_47f, i64* @rdx, align 8
  store i64 %v2_46f, i64* @rdi, align 8
  %v0_48b = load i64, i64* inttoptr (i64 1170 to i64*), align 8
  store i64 %v0_48b, i64* @rax, align 8
  ret i64 %v0_48b
}

define i64 @"_ZN4lang15lang_luaj$77$1212initupvalue1EJvPN3org4luaj3vm28LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4a0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4a0 = add i64 %arg1, 24
  %v3_4a0 = inttoptr i64 %v2_4a0 to i64*
  store i64 %arg2, i64* %v3_4a0, align 8
  %v0_4a4 = load i64, i64* @rax, align 8
  ret i64 %v0_4a4
}

define i64 @"_ZN4lang12lang_luaj$294callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$124callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$77$21$112initupvalue1EJvPN3org4luaj3vm28LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4f0 = add i64 %arg1, 24
  %v3_4f0 = inttoptr i64 %v2_4f0 to i64*
  store i64 %arg2, i64* %v3_4f0, align 8
  %v0_4f4 = load i64, i64* @rax, align 8
  ret i64 %v0_4f4
}

define i64 @"_ZN4lang11lang_luaj$34callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_500:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v0_50a = load i64, i64* inttoptr (i64 1297 to i64*), align 8
  store i64 %v0_50a, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_52a = trunc i64 %arg2 to i8
  %v5_52a = icmp eq i8 %v4_52a, 0
  %v0_52c = load i64, i64* inttoptr (i64 1331 to i64*), align 8
  store i64 %v0_52c, i64* @rax, align 8
  %v2_533 = load i64, i64* inttoptr (i64 1339 to i64*), align 8
  %v3_533 = select i1 %v5_52a, i64 %v2_533, i64 %v0_52c
  store i64 %v3_533, i64* @rax, align 8
  ret i64 %v3_533
}

define i64 @"_ZN4lang11lang_luaj$44callEJPN3org4luaj3vm28LuaValueES5_"() local_unnamed_addr {
dec_label_pc_540:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_543(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_543:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_543 = load i64, i64* @rax, align 8
  %v1_543 = add i64 %v0_543, -119
  %v2_543 = inttoptr i64 %v1_543 to i8*
  %v3_543 = load i8, i8* %v2_543, align 1
  %v4_543 = load i64, i64* @rcx, align 8
  %v5_543 = trunc i64 %v4_543 to i8
  %v6_543 = or i8 %v5_543, %v3_543
  store i8 %v6_543, i8* %v2_543, align 1
  %v0_546 = load i64, i64* @rax, align 8
  %tmp235 = trunc i64 %v0_546 to i8
  %v5_54d = mul i8 %tmp235, 2
  %v21_54d = inttoptr i64 %v0_546 to i8*
  store i8 %v5_54d, i8* %v21_54d, align 1
  %v2_54f = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_54f = load i64, i64* @rax, align 8
  %v4_54f = trunc i64 %v3_54f to i8
  %v5_54f = add i8 %v4_54f, %v2_54f
  %v21_54f = inttoptr i64 %v3_54f to i8*
  store i8 %v5_54f, i8* %v21_54f, align 1
  %v0_55b = load i64, i64* @rax, align 8
  ret i64 %v0_55b
}

define i64 @"_ZN4lang15lang_luaj$77$134callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_560:
  store i64 %arg1, i64* @rdi, align 8
  %v0_564 = load i64, i64* @rdi, align 8
  %v1_564 = add i64 %v0_564, 24
  %v2_564 = inttoptr i64 %v1_564 to i64*
  %v3_564 = load i64, i64* %v2_564, align 8
  store i64 %v3_564, i64* @rdi, align 8
  %v1_568 = inttoptr i64 %v3_564 to i64*
  %v2_568 = load i64, i64* %v1_568, align 8
  store i64 %v2_568, i64* @rax, align 8
  %v1_571 = inttoptr i64 %v2_568 to i64*
  %v2_571 = load i64, i64* %v1_571, align 8
  store i64 %v2_571, i64* @rdx, align 8
  store i64 %v2_568, i64* @rdi, align 8
  ret i64 %v2_568
}

define i64 @"_ZN4lang11lang_luaj$84callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_590:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$234callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$76$17$112initupvalue1EJvPN3org4luaj3vm28LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_5d0 = add i64 %arg1, 24
  %v3_5d0 = inttoptr i64 %v2_5d0 to i64*
  store i64 %arg2, i64* %v3_5d0, align 8
  %v0_5d4 = load i64, i64* @rax, align 8
  ret i64 %v0_5d4
}

define i64 @"_ZN4lang12lang_luaj$284callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$334callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_600:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang14lang_luaj$76$34callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_620:
  store i64 %arg1, i64* @rdi, align 8
  %v0_624 = load i64, i64* @rdi, align 8
  %v1_624 = add i64 %v0_624, 24
  %v2_624 = inttoptr i64 %v1_624 to i64*
  %v3_624 = load i64, i64* %v2_624, align 8
  store i64 %v3_624, i64* @rdi, align 8
  %v1_62f = inttoptr i64 %v3_624 to i64*
  %v2_62f = load i64, i64* %v1_62f, align 8
  store i64 %v2_62f, i64* @rax, align 8
  %v1_63f = inttoptr i64 %v2_62f to i64*
  %v2_63f = load i64, i64* %v1_63f, align 8
  store i64 %v2_63f, i64* @rdx, align 8
  store i64 %v2_62f, i64* @rdi, align 8
  %v0_64b = load i64, i64* inttoptr (i64 1618 to i64*), align 8
  store i64 %v0_64b, i64* @rax, align 8
  ret i64 %v0_64b
}

define i64 @"_ZN4lang11lang_luaj$14callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_660:
  store i64 %arg1, i64* @rdi, align 8
  %v0_664 = load i64, i64* @rdi, align 8
  %v1_664 = add i64 %v0_664, 24
  %v2_664 = inttoptr i64 %v1_664 to i64*
  %v3_664 = load i64, i64* %v2_664, align 8
  store i64 %v3_664, i64* @rdi, align 8
  %v1_66f = inttoptr i64 %v3_664 to i64*
  %v2_66f = load i64, i64* %v1_66f, align 8
  store i64 %v2_66f, i64* @rax, align 8
  %v1_67f = inttoptr i64 %v2_66f to i64*
  %v2_67f = load i64, i64* %v1_67f, align 8
  store i64 %v2_67f, i64* @rdx, align 8
  store i64 %v2_66f, i64* @rdi, align 8
  %v0_68b = load i64, i64* inttoptr (i64 1682 to i64*), align 8
  store i64 %v0_68b, i64* @rax, align 8
  ret i64 %v0_68b
}

define i64 @"_ZN4lang12lang_luaj$364callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang11lang_luaj$212initupvalue1EJvPN3org4luaj3vm28LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6c0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_6c0 = add i64 %arg1, 24
  %v3_6c0 = inttoptr i64 %v2_6c0 to i64*
  store i64 %arg2, i64* %v3_6c0, align 8
  %v0_6c4 = load i64, i64* @rax, align 8
  ret i64 %v0_6c4
}

define i64 @"_ZN4lang14lang_luaj$65$14callEJPN3org4luaj3vm28LuaValueES5_S5_"() local_unnamed_addr {
dec_label_pc_6d0:
  %v0_6d0 = load i64, i64* inttoptr (i64 1751 to i64*), align 8
  store i64 %v0_6d0, i64* @rax, align 8
  ret i64 %v0_6d0
}

define i64 @"_ZN4lang25lang_luaj$__TS__ArrayPush4callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6e0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6e0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_6e1 = load i64, i64* @rbx, align 8
  %v0_6e2 = load i64, i64* @rdx, align 8
  store i64 %v0_6e2, i64* %rbp.global-to-local, align 8
  %v0_6e5 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_6e5, i64* @rbx, align 8
  store i64 %v0_6e5, i64* @rdi, align 8
  store i64 %v0_6e5, i64* @rax, align 8
  store i64 %v0_6e5, i64* @rdx, align 8
  %v0_6fb = load i64, i64* inttoptr (i64 1794 to i64*), align 8
  store i64 %v0_6fb, i64* @rcx, align 8
  store i64 %v0_6e2, i64* @rdx, align 8
  store i64 %v0_6e5, i64* @rax, align 8
  store i64 %v0_6e5, i64* @rdi, align 8
  store i64 %v0_6e1, i64* @rbx, align 8
  store i64 %v0_6e0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_6e5
}

define i64 @"_ZN4lang12lang_luaj$374callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_730:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$76$16$112initupvalue1EJvPN3org4luaj3vm28LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_750:
  store i64 %arg1, i64* @rdi, align 8
  %v2_750 = add i64 %arg1, 24
  %v3_750 = inttoptr i64 %v2_750 to i64*
  store i64 %arg2, i64* %v3_750, align 8
  %v0_754 = load i64, i64* @rax, align 8
  ret i64 %v0_754
}

define i64 @"_ZN4lang12lang_luaj$134callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_760:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaDouble6islongEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_780:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v1_780 = add i64 %arg1, 8
  %v2_780 = inttoptr i64 %v1_780 to i64*
  %v3_780 = load i64, i64* %v2_780, align 8
  %v4_780 = call i128 @__asm_movsd(i64 %v3_780)
  %v0_785 = load i64, i64* inttoptr (i64 1933 to i64*), align 8
  %v1_785 = call i128 @__asm_movsd(i64 %v0_785)
  call void @__asm_ucomisd(i128 %v4_780, i128 %v1_785)
  %v0_791 = load i1, i1* %cf.global-to-local, align 1
  %v1_791 = icmp eq i1 %v0_791, false
  br i1 %v1_791, label %dec_label_pc_7b5, label %dec_label_pc_793

dec_label_pc_793:                                 ; preds = %dec_label_pc_780
  %v2_791 = load i64, i64* @rax, align 8
  ret i64 %v2_791

dec_label_pc_7b5:                                 ; preds = %dec_label_pc_780
  call void @__asm_ucomisd(i128 %v1_785, i128 %v4_780)
  store i64 0, i64* @rdx, align 8
  %v0_7be = load i1, i1* %pf.global-to-local, align 1
  %v1_7be = icmp eq i1 %v0_7be, false
  %v2_7be = zext i1 %v1_7be to i64
  %v3_7be = load i64, i64* @rax, align 8
  %v4_7be = and i64 %v3_7be, 4294967040
  %v0_7c1 = load i1, i1* %zf.global-to-local, align 1
  %v1_7c1 = icmp eq i1 %v0_7c1, false
  %v5_7be.op = or i64 %v4_7be, %v2_7be
  %v7_7c1 = select i1 %v1_7c1, i64 0, i64 %v5_7be.op
  store i64 %v7_7c1, i64* @rax, align 8
  ret i64 %v7_7c1
}

define i64 @_ZN3org4luaj3vm29LuaDouble6tobyteEJcv(i64 %arg1) local_unnamed_addr {
dec_label_pc_7e0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_7e0 = add i64 %arg1, 8
  %v2_7e0 = inttoptr i64 %v1_7e0 to i64*
  %v3_7e0 = load i64, i64* %v2_7e0, align 8
  %v4_7e0 = call i128 @__asm_movsd(i64 %v3_7e0)
  store i64 4294967295, i64* @rax, align 8
  %v1_7ea = load i64, i64* inttoptr (i64 2034 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_7e0, i64 %v1_7ea)
  %v0_80d = load i64, i64* @rax, align 8
  ret i64 %v0_80d
}

define i64 @_ZN3org4luaj3vm29LuaDouble6tocharEJwv(i64 %arg1) local_unnamed_addr {
dec_label_pc_820:
  store i64 %arg1, i64* @rdi, align 8
  %v1_820 = add i64 %arg1, 8
  %v2_820 = inttoptr i64 %v1_820 to i64*
  %v3_820 = load i64, i64* %v2_820, align 8
  %v4_820 = call i128 @__asm_movsd(i64 %v3_820)
  store i64 4294967295, i64* @rax, align 8
  %v1_82a = load i64, i64* inttoptr (i64 2098 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_820, i64 %v1_82a)
  %v0_84d = load i64, i64* @rax, align 8
  ret i64 %v0_84d
}

define i128 @_ZN3org4luaj3vm29LuaDouble7tofloatEJfv(i64 %arg1) local_unnamed_addr {
dec_label_pc_860:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_860 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_860 = call i128 @__asm_pxor(i128 %v0_860, i128 %v0_860)
  store i128 %v2_860, i128* %xmm0.global-to-local, align 8
  %v0_864 = load i64, i64* @rdi, align 8
  %v1_864 = add i64 %v0_864, 8
  %v2_864 = inttoptr i64 %v1_864 to i64*
  %v3_864 = load i64, i64* %v2_864, align 8
  %v4_864 = call i128 @__asm_cvtsd2ss(i64 %v3_864)
  store i128 %v4_864, i128* %xmm0.global-to-local, align 8
  ret i128 %v4_864
}

define i64 @_ZN3org4luaj3vm29LuaDouble7toshortEJsv(i64 %arg1) local_unnamed_addr {
dec_label_pc_870:
  store i64 %arg1, i64* @rdi, align 8
  %v1_870 = add i64 %arg1, 8
  %v2_870 = inttoptr i64 %v1_870 to i64*
  %v3_870 = load i64, i64* %v2_870, align 8
  %v4_870 = call i128 @__asm_movsd(i64 %v3_870)
  store i64 4294967295, i64* @rax, align 8
  %v1_87a = load i64, i64* inttoptr (i64 2178 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_870, i64 %v1_87a)
  %v0_89d = load i64, i64* @rax, align 8
  ret i64 %v0_89d
}

define i128 @_ZN3org4luaj3vm29LuaDouble9optdoubleEJdd(i64 %arg1) local_unnamed_addr {
dec_label_pc_8b0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8b0 = add i64 %arg1, 8
  %v2_8b0 = inttoptr i64 %v1_8b0 to i64*
  %v3_8b0 = load i64, i64* %v2_8b0, align 8
  %v4_8b0 = call i128 @__asm_movsd(i64 %v3_8b0)
  ret i128 %v4_8b0
}

define i64 @_ZN3org4luaj3vm29LuaDouble6optintEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_8c0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8c0 = add i64 %arg1, 8
  %v2_8c0 = inttoptr i64 %v1_8c0 to i64*
  %v3_8c0 = load i64, i64* %v2_8c0, align 8
  %v4_8c0 = call i128 @__asm_movsd(i64 %v3_8c0)
  store i64 4294967295, i64* @rax, align 8
  %v1_8ca = load i64, i64* inttoptr (i64 2258 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_8c0, i64 %v1_8ca)
  %v0_8ed = load i64, i64* @rax, align 8
  ret i64 %v0_8ed
}

define i64 @_ZN3org4luaj3vm29LuaDouble7optlongEJxx(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_900:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_900 = add i64 %arg1, 8
  %v2_900 = inttoptr i64 %v1_900 to i64*
  %v3_900 = load i64, i64* %v2_900, align 8
  %v4_900 = call i128 @__asm_movsd(i64 %v3_900)
  store i64 9223372036854775807, i64* @rax, align 8
  %v1_90f = load i64, i64* inttoptr (i64 2327 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_900, i64 %v1_90f)
  %v0_917 = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_917, label %dec_label_pc_920, label %dec_label_pc_919

dec_label_pc_919:                                 ; preds = %dec_label_pc_900
  %v1_917 = load i64, i64* @rax, align 8
  ret i64 %v1_917

dec_label_pc_920:                                 ; preds = %dec_label_pc_900
  %v0_920 = load i64, i64* inttoptr (i64 2344 to i64*), align 8
  %v1_920 = call i128 @__asm_movsd(i64 %v0_920)
  call void @__asm_ucomisd(i128 %v1_920, i128 %v4_900)
  %v0_92c = load i1, i1* %cf.global-to-local, align 1
  %v1_92c = icmp eq i1 %v0_92c, false
  br i1 %v1_92c, label %dec_label_pc_940, label %dec_label_pc_92e

dec_label_pc_92e:                                 ; preds = %dec_label_pc_920
  %v2_92c = load i64, i64* @rax, align 8
  ret i64 %v2_92c

dec_label_pc_940:                                 ; preds = %dec_label_pc_920
  store i64 -9223372036854775808, i64* @rax, align 8
  ret i64 -9223372036854775808
}

define i64 @_ZN3org4luaj3vm29LuaDouble2eqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_950:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_957 = load i64, i64* @rdi, align 8
  %v1_957 = add i64 %v0_957, 8
  %v2_957 = inttoptr i64 %v1_957 to i64*
  %v3_957 = load i64, i64* %v2_957, align 8
  %v4_957 = call i128 @__asm_movsd(i64 %v3_957)
  %v0_95c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_95c, i64* @rdi, align 8
  %v0_965 = load i64, i64* @rax, align 8
  %v4_965 = trunc i64 %v0_965 to i8
  %v5_965 = icmp eq i8 %v4_965, 0
  %v0_967 = load i64, i64* inttoptr (i64 2414 to i64*), align 8
  store i64 %v0_967, i64* @rax, align 8
  %v2_96e = load i64, i64* inttoptr (i64 2422 to i64*), align 8
  %v3_96e = select i1 %v5_965, i64 %v2_96e, i64 %v0_967
  store i64 %v3_96e, i64* @rax, align 8
  ret i64 %v3_96e
}

define i64 @_ZN3org4luaj3vm29LuaDouble5raweqEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_980:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_987 = load i64, i64* @rdi, align 8
  %v1_987 = add i64 %v0_987, 8
  %v2_987 = inttoptr i64 %v1_987 to i64*
  %v3_987 = load i64, i64* %v2_987, align 8
  %v4_987 = call i128 @__asm_movsd(i64 %v3_987)
  %v0_98c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_98c, i64* @rdi, align 8
  %v0_999 = load i64, i64* @rax, align 8
  ret i64 %v0_999
}

define i64 @_ZN3org4luaj3vm29LuaDouble5raweqEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_9a0:
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v1_9a0 = add i64 %arg1, 8
  %v2_9a0 = inttoptr i64 %v1_9a0 to i64*
  %v3_9a0 = load i64, i64* %v2_9a0, align 8
  %v4_9a0 = call i128 @__asm_movsd(i64 %v3_9a0)
  store i64 0, i64* @rdx, align 8
  %v1_9aa = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_9a0, i128 %v1_9aa)
  %v0_9ae = load i1, i1* %pf.global-to-local, align 1
  %v1_9ae = icmp eq i1 %v0_9ae, false
  %v2_9ae = zext i1 %v1_9ae to i64
  %v3_9ae = load i64, i64* @rax, align 8
  %v4_9ae = and i64 %v3_9ae, 4294967040
  %v5_9ae = or i64 %v4_9ae, %v2_9ae
  %v0_9b1 = load i1, i1* %zf.global-to-local, align 1
  %v1_9b1 = icmp eq i1 %v0_9b1, false
  %v4_9b1 = load i64, i64* @rdx, align 8
  %v6_9b1.v = select i1 %v1_9b1, i64 %v4_9b1, i64 %v5_9ae
  %v7_9b1 = and i64 %v6_9b1.v, 4294967295
  store i64 %v7_9b1, i64* @rax, align 8
  ret i64 %v7_9b1
}

define i64 @_ZN3org4luaj3vm29LuaDouble5raweqEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9c0:
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_9c0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_9c0 = call i128 @__asm_pxor(i128 %v0_9c0, i128 %v0_9c0)
  store i128 %v2_9c0, i128* %xmm0.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %v0_9c9 = load i64, i64* @rdi, align 8
  %v1_9c9 = add i64 %v0_9c9, 8
  %v2_9c9 = inttoptr i64 %v1_9c9 to i64*
  %v3_9c9 = load i64, i64* %v2_9c9, align 8
  %v4_9c9 = call i128 @__asm_movsd(i64 %v3_9c9)
  %v1_9ce = trunc i64 %arg2 to i32
  %v2_9ce = call i128 @__asm_cvtsi2sd.7468(i32 %v1_9ce)
  store i128 %v2_9ce, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v2_9ce, i128 %v4_9c9)
  %v0_9d6 = load i1, i1* %pf.global-to-local, align 1
  %v1_9d6 = icmp eq i1 %v0_9d6, false
  %v2_9d6 = zext i1 %v1_9d6 to i64
  %v3_9d6 = load i64, i64* @rax, align 8
  %v4_9d6 = and i64 %v3_9d6, 4294967040
  %v5_9d6 = or i64 %v4_9d6, %v2_9d6
  %v0_9d9 = load i1, i1* %zf.global-to-local, align 1
  %v1_9d9 = icmp eq i1 %v0_9d9, false
  %v4_9d9 = load i64, i64* @rdx, align 8
  %v6_9d9.v = select i1 %v1_9d9, i64 %v4_9d9, i64 %v5_9d6
  %v7_9d9 = and i64 %v6_9d9.v, 4294967295
  store i64 %v7_9d9, i64* @rax, align 8
  ret i64 %v7_9d9
}

define i64 @_ZN3org4luaj3vm29LuaDouble3addEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_9e7 = load i64, i64* @rdi, align 8
  %v1_9e7 = add i64 %v0_9e7, 8
  %v2_9e7 = inttoptr i64 %v1_9e7 to i64*
  %v3_9e7 = load i64, i64* %v2_9e7, align 8
  %v4_9e7 = call i128 @__asm_movsd(i64 %v3_9e7)
  %v0_9ec = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_9ec, i64* @rdi, align 8
  %v0_9f9 = load i64, i64* @rax, align 8
  ret i64 %v0_9f9
}

define i64 @_ZN3org4luaj3vm29LuaDouble3subEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a00:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_a07 = load i64, i64* @rdi, align 8
  %v1_a07 = add i64 %v0_a07, 8
  %v2_a07 = inttoptr i64 %v1_a07 to i64*
  %v3_a07 = load i64, i64* %v2_a07, align 8
  %v4_a07 = call i128 @__asm_movsd(i64 %v3_a07)
  %v0_a0c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a0c, i64* @rdi, align 8
  %v0_a19 = load i64, i64* @rax, align 8
  ret i64 %v0_a19
}

define i64 @_ZN3org4luaj3vm29LuaDouble3mulEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a20:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_a27 = load i64, i64* @rdi, align 8
  %v1_a27 = add i64 %v0_a27, 8
  %v2_a27 = inttoptr i64 %v1_a27 to i64*
  %v3_a27 = load i64, i64* %v2_a27, align 8
  %v4_a27 = call i128 @__asm_movsd(i64 %v3_a27)
  %v0_a2c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a2c, i64* @rdi, align 8
  %v0_a39 = load i64, i64* @rax, align 8
  ret i64 %v0_a39
}

define i64 @_ZN3org4luaj3vm29LuaDouble3powEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_a47 = load i64, i64* @rdi, align 8
  %v1_a47 = add i64 %v0_a47, 8
  %v2_a47 = inttoptr i64 %v1_a47 to i64*
  %v3_a47 = load i64, i64* %v2_a47, align 8
  %v4_a47 = call i128 @__asm_movsd(i64 %v3_a47)
  %v0_a4c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a4c, i64* @rdi, align 8
  %v0_a59 = load i64, i64* @rax, align 8
  ret i64 %v0_a59
}

define i64 @_ZN3org4luaj3vm29LuaDouble3divEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a60:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_a67 = load i64, i64* @rdi, align 8
  %v1_a67 = add i64 %v0_a67, 8
  %v2_a67 = inttoptr i64 %v1_a67 to i64*
  %v3_a67 = load i64, i64* %v2_a67, align 8
  %v4_a67 = call i128 @__asm_movsd(i64 %v3_a67)
  %v0_a6c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a6c, i64* @rdi, align 8
  %v0_a79 = load i64, i64* @rax, align 8
  ret i64 %v0_a79
}

define i64 @_ZN3org4luaj3vm29LuaDouble3modEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a80:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_a87 = load i64, i64* @rdi, align 8
  %v1_a87 = add i64 %v0_a87, 8
  %v2_a87 = inttoptr i64 %v1_a87 to i64*
  %v3_a87 = load i64, i64* %v2_a87, align 8
  %v4_a87 = call i128 @__asm_movsd(i64 %v3_a87)
  %v0_a8c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a8c, i64* @rdi, align 8
  %v0_a99 = load i64, i64* @rax, align 8
  ret i64 %v0_a99
}

define i64 @_ZN3org4luaj3vm29LuaDouble2ltEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_aa0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_aa7 = load i64, i64* @rdi, align 8
  %v1_aa7 = add i64 %v0_aa7, 8
  %v2_aa7 = inttoptr i64 %v1_aa7 to i64*
  %v3_aa7 = load i64, i64* %v2_aa7, align 8
  %v4_aa7 = call i128 @__asm_movsd(i64 %v3_aa7)
  %v0_aac = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_aac, i64* @rdi, align 8
  %v0_ab5 = load i64, i64* @rax, align 8
  %v4_ab5 = trunc i64 %v0_ab5 to i8
  %v5_ab5 = icmp eq i8 %v4_ab5, 0
  %v0_ab7 = load i64, i64* inttoptr (i64 2750 to i64*), align 8
  store i64 %v0_ab7, i64* @rax, align 8
  %v2_abe = load i64, i64* inttoptr (i64 2758 to i64*), align 8
  %v3_abe = select i1 %v5_ab5, i64 %v2_abe, i64 %v0_ab7
  store i64 %v3_abe, i64* @rax, align 8
  ret i64 %v3_abe
}

define i64 @_ZN3org4luaj3vm29LuaDouble2ltEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_ad0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_ad0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_ad0 = add i64 %arg1, 8
  %v3_ad0 = inttoptr i64 %v2_ad0 to i64*
  %v4_ad0 = load i64, i64* %v3_ad0, align 8
  call void @__asm_ucomisd.7467(i128 %v0_ad0, i64 %v4_ad0)
  %v0_ad5 = load i64, i64* inttoptr (i64 2780 to i64*), align 8
  store i64 %v0_ad5, i64* @rax, align 8
  %v0_adc = load i1, i1* %cf.global-to-local, align 1
  %v1_adc = load i1, i1* %zf.global-to-local, align 1
  %v2_adc = or i1 %v0_adc, %v1_adc
  %v3_adc = icmp ne i1 %v2_adc, true
  %v5_adc = load i64, i64* inttoptr (i64 2788 to i64*), align 8
  %v6_adc = select i1 %v3_adc, i64 %v5_adc, i64 %v0_ad5
  store i64 %v6_adc, i64* @rax, align 8
  ret i64 %v6_adc
}

define i64 @_ZN3org4luaj3vm29LuaDouble2ltEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_af0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_af0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_af0 = call i128 @__asm_pxor(i128 %v0_af0, i128 %v0_af0)
  store i128 %v2_af0, i128* %xmm0.global-to-local, align 8
  %v0_af4 = load i64, i64* inttoptr (i64 2811 to i64*), align 8
  store i64 %v0_af4, i64* @rax, align 8
  %v1_afb = trunc i64 %arg2 to i32
  %v2_afb = call i128 @__asm_cvtsi2sd.7468(i32 %v1_afb)
  store i128 %v2_afb, i128* %xmm0.global-to-local, align 8
  %v1_aff = load i64, i64* @rdi, align 8
  %v2_aff = add i64 %v1_aff, 8
  %v3_aff = inttoptr i64 %v2_aff to i64*
  %v4_aff = load i64, i64* %v3_aff, align 8
  call void @__asm_ucomisd.7467(i128 %v2_afb, i64 %v4_aff)
  %v0_b04 = load i1, i1* %cf.global-to-local, align 1
  %v1_b04 = load i1, i1* %zf.global-to-local, align 1
  %v2_b04 = or i1 %v0_b04, %v1_b04
  %v3_b04 = icmp ne i1 %v2_b04, true
  %v4_b04 = load i64, i64* @rax, align 8
  %v5_b04 = load i64, i64* inttoptr (i64 2828 to i64*), align 8
  %v6_b04 = select i1 %v3_b04, i64 %v5_b04, i64 %v4_b04
  store i64 %v6_b04, i64* @rax, align 8
  ret i64 %v6_b04
}

define i64 @_ZN3org4luaj3vm29LuaDouble4lt_bEJbPNS1_8LuaValueE() local_unnamed_addr {
dec_label_pc_b10:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_b14(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b14:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_b17 = load i64, i64* @rdi, align 8
  %v1_b17 = add i64 %v0_b17, 8
  %v2_b17 = inttoptr i64 %v1_b17 to i64*
  %v3_b17 = load i64, i64* %v2_b17, align 8
  %v4_b17 = call i128 @__asm_movsd(i64 %v3_b17)
  %v0_b1c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_b1c, i64* @rdi, align 8
  %v0_b29 = load i64, i64* @rax, align 8
  ret i64 %v0_b29
}

define i64 @_ZN3org4luaj3vm29LuaDouble4lt_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b30:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_b30 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_b30 = call i128 @__asm_pxor(i128 %v0_b30, i128 %v0_b30)
  store i128 %v2_b30, i128* %xmm0.global-to-local, align 8
  %v1_b34 = trunc i64 %arg2 to i32
  %v2_b34 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_b34)
  store i128 %v2_b34, i128* %xmm0.global-to-local, align 8
  %v1_b38 = load i64, i64* @rdi, align 8
  %v2_b38 = add i64 %v1_b38, 8
  %v3_b38 = inttoptr i64 %v2_b38 to i64*
  %v4_b38 = load i64, i64* %v3_b38, align 8
  call void @__asm_ucomisd.7467(i128 %v2_b34, i64 %v4_b38)
  %v0_b3d = load i1, i1* %cf.global-to-local, align 1
  %v1_b3d = load i1, i1* %zf.global-to-local, align 1
  %v2_b3d = or i1 %v0_b3d, %v1_b3d
  %v3_b3d = icmp ne i1 %v2_b3d, true
  %v4_b3d = zext i1 %v3_b3d to i64
  %v5_b3d = load i64, i64* @rax, align 8
  %v6_b3d = and i64 %v5_b3d, -256
  %v7_b3d = or i64 %v4_b3d, %v6_b3d
  store i64 %v7_b3d, i64* @rax, align 8
  ret i64 %v7_b3d
}

define i64 @_ZN3org4luaj3vm29LuaDouble4lt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_b50:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_b50 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_b50 = add i64 %arg1, 8
  %v3_b50 = inttoptr i64 %v2_b50 to i64*
  %v4_b50 = load i64, i64* %v3_b50, align 8
  call void @__asm_ucomisd.7467(i128 %v0_b50, i64 %v4_b50)
  %v0_b55 = load i1, i1* %cf.global-to-local, align 1
  %v1_b55 = load i1, i1* %zf.global-to-local, align 1
  %v2_b55 = or i1 %v0_b55, %v1_b55
  %v3_b55 = icmp ne i1 %v2_b55, true
  %v4_b55 = zext i1 %v3_b55 to i64
  %v5_b55 = load i64, i64* @rax, align 8
  %v6_b55 = and i64 %v5_b55, -256
  %v7_b55 = or i64 %v4_b55, %v6_b55
  store i64 %v7_b55, i64* @rax, align 8
  ret i64 %v7_b55
}

define i64 @_ZN3org4luaj3vm29LuaDouble4lteqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b60:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_b67 = load i64, i64* @rdi, align 8
  %v1_b67 = add i64 %v0_b67, 8
  %v2_b67 = inttoptr i64 %v1_b67 to i64*
  %v3_b67 = load i64, i64* %v2_b67, align 8
  %v4_b67 = call i128 @__asm_movsd(i64 %v3_b67)
  %v0_b6c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_b6c, i64* @rdi, align 8
  %v0_b75 = load i64, i64* @rax, align 8
  %v4_b75 = trunc i64 %v0_b75 to i8
  %v5_b75 = icmp eq i8 %v4_b75, 0
  %v0_b77 = load i64, i64* inttoptr (i64 2942 to i64*), align 8
  store i64 %v0_b77, i64* @rax, align 8
  %v2_b7e = load i64, i64* inttoptr (i64 2950 to i64*), align 8
  %v3_b7e = select i1 %v5_b75, i64 %v2_b7e, i64 %v0_b77
  store i64 %v3_b7e, i64* @rax, align 8
  ret i64 %v3_b7e
}

define i64 @_ZN3org4luaj3vm29LuaDouble4lteqEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_b90:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v1_b90 = add i64 %arg1, 8
  %v2_b90 = inttoptr i64 %v1_b90 to i64*
  %v3_b90 = load i64, i64* %v2_b90, align 8
  %v4_b90 = call i128 @__asm_movsd(i64 %v3_b90)
  %v0_b95 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_b95, i128 %v4_b90)
  %v0_b99 = load i1, i1* %cf.global-to-local, align 1
  %v1_b99 = load i1, i1* %zf.global-to-local, align 1
  %v2_b99 = or i1 %v0_b99, %v1_b99
  br i1 %v2_b99, label %dec_label_pc_ba8, label %dec_label_pc_b9b

dec_label_pc_b9b:                                 ; preds = %dec_label_pc_b90
  %v0_b9b = load i64, i64* inttoptr (i64 2978 to i64*), align 8
  store i64 %v0_b9b, i64* @rax, align 8
  ret i64 %v0_b9b

dec_label_pc_ba8:                                 ; preds = %dec_label_pc_b90
  %v1_ba2 = load i64, i64* @rax, align 8
  ret i64 %v1_ba2
}

define i64 @function_baa() local_unnamed_addr {
dec_label_pc_baa:
  %v0_baf = load i64, i64* @rax, align 8
  ret i64 %v0_baf
}

define i64 @function_bb1() local_unnamed_addr {
dec_label_pc_bb1:
  %v0_bb1 = load i32, i32* inttoptr (i64 2999 to i32*), align 4
  %v1_bb1 = zext i32 %v0_bb1 to i64
  store i64 %v1_bb1, i64* @rax, align 8
  ret i64 %v1_bb1
}

define i64 @_ZN3org4luaj3vm29LuaDouble4lteqEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_bc0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_bc0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_bc0 = call i128 @__asm_pxor(i128 %v0_bc0, i128 %v0_bc0)
  store i128 %v2_bc0, i128* %xmm0.global-to-local, align 8
  %v0_bc4 = load i64, i64* @rdi, align 8
  %v1_bc4 = add i64 %v0_bc4, 8
  %v2_bc4 = inttoptr i64 %v1_bc4 to i64*
  %v3_bc4 = load i64, i64* %v2_bc4, align 8
  %v4_bc4 = call i128 @__asm_movsd(i64 %v3_bc4)
  %v1_bc9 = trunc i64 %arg2 to i32
  %v2_bc9 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_bc9)
  store i128 %v2_bc9, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v2_bc9, i128 %v4_bc4)
  %v0_bd1 = load i1, i1* %cf.global-to-local, align 1
  %v1_bd1 = load i1, i1* %zf.global-to-local, align 1
  %v2_bd1 = or i1 %v0_bd1, %v1_bd1
  br i1 %v2_bd1, label %dec_label_pc_be0, label %dec_label_pc_bd3

dec_label_pc_bd3:                                 ; preds = %dec_label_pc_bc0
  %v0_bd3 = load i64, i64* inttoptr (i64 3034 to i64*), align 8
  store i64 %v0_bd3, i64* @rax, align 8
  ret i64 %v0_bd3

dec_label_pc_be0:                                 ; preds = %dec_label_pc_bc0
  %v1_bda = load i64, i64* @rax, align 8
  ret i64 %v1_bda
}

define i64 @function_be2() local_unnamed_addr {
dec_label_pc_be2:
  %v0_be7 = load i64, i64* @rax, align 8
  ret i64 %v0_be7
}

define i64 @function_be9() local_unnamed_addr {
dec_label_pc_be9:
  %v0_be9 = load i32, i32* inttoptr (i64 3055 to i32*), align 4
  %v1_be9 = zext i32 %v0_be9 to i64
  store i64 %v1_be9, i64* @rax, align 8
  ret i64 %v1_be9
}

define i64 @_ZN3org4luaj3vm29LuaDouble6lteq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_bf0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_bf7 = load i64, i64* @rdi, align 8
  %v1_bf7 = add i64 %v0_bf7, 8
  %v2_bf7 = inttoptr i64 %v1_bf7 to i64*
  %v3_bf7 = load i64, i64* %v2_bf7, align 8
  %v4_bf7 = call i128 @__asm_movsd(i64 %v3_bf7)
  %v0_bfc = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_bfc, i64* @rdi, align 8
  %v0_c09 = load i64, i64* @rax, align 8
  ret i64 %v0_c09
}

define i64 @_ZN3org4luaj3vm29LuaDouble6lteq_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c10:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_c10 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_c10 = call i128 @__asm_pxor(i128 %v0_c10, i128 %v0_c10)
  store i128 %v2_c10, i128* %xmm0.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  %v0_c19 = load i64, i64* @rdi, align 8
  %v1_c19 = add i64 %v0_c19, 8
  %v2_c19 = inttoptr i64 %v1_c19 to i64*
  %v3_c19 = load i64, i64* %v2_c19, align 8
  %v4_c19 = call i128 @__asm_movsd(i64 %v3_c19)
  %v1_c1e = trunc i64 %arg2 to i32
  %v2_c1e = call i128 @__asm_cvtsi2sd.7468(i32 %v1_c1e)
  store i128 %v2_c1e, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v2_c1e, i128 %v4_c19)
  %v0_c26 = load i1, i1* %cf.global-to-local, align 1
  %v1_c26 = load i1, i1* %zf.global-to-local, align 1
  %v2_c26 = or i1 %v0_c26, %v1_c26
  br i1 %v2_c26, label %dec_label_pc_c28, label %dec_label_pc_c10.dec_label_pc_c37_crit_edge

dec_label_pc_c10.dec_label_pc_c37_crit_edge:      ; preds = %dec_label_pc_c10
  %v0_c37.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_c37

dec_label_pc_c28:                                 ; preds = %dec_label_pc_c10
  call void @__asm_ucomisd(i128 %v4_c19, i128 %v2_c1e)
  store i64 0, i64* @rdx, align 8
  %v0_c31 = load i1, i1* %pf.global-to-local, align 1
  %v1_c31 = icmp eq i1 %v0_c31, false
  %v2_c31 = zext i1 %v1_c31 to i64
  %v3_c31 = load i64, i64* @rax, align 8
  %v4_c31 = and i64 %v3_c31, 4294967040
  %v0_c34 = load i1, i1* %zf.global-to-local, align 1
  %v1_c34 = icmp eq i1 %v0_c34, false
  %v5_c31.op = or i64 %v4_c31, %v2_c31
  %v7_c34 = select i1 %v1_c34, i64 0, i64 %v5_c31.op
  store i64 %v7_c34, i64* @rax, align 8
  br label %dec_label_pc_c37

dec_label_pc_c37:                                 ; preds = %dec_label_pc_c10.dec_label_pc_c37_crit_edge, %dec_label_pc_c28
  %v0_c37 = phi i64 [ %v0_c37.pre, %dec_label_pc_c10.dec_label_pc_c37_crit_edge ], [ %v7_c34, %dec_label_pc_c28 ]
  ret i64 %v0_c37
}

define i64 @_ZN3org4luaj3vm29LuaDouble6lteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_c40:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v1_c40 = add i64 %arg1, 8
  %v2_c40 = inttoptr i64 %v1_c40 to i64*
  %v3_c40 = load i64, i64* %v2_c40, align 8
  %v4_c40 = call i128 @__asm_movsd(i64 %v3_c40)
  store i64 1, i64* @rax, align 8
  %v0_c4a = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_c4a, i128 %v4_c40)
  %v0_c4e = load i1, i1* %cf.global-to-local, align 1
  %v1_c4e = load i1, i1* %zf.global-to-local, align 1
  %v2_c4e = or i1 %v0_c4e, %v1_c4e
  br i1 %v2_c4e, label %dec_label_pc_c50, label %dec_label_pc_c40.dec_label_pc_c5f_crit_edge

dec_label_pc_c40.dec_label_pc_c5f_crit_edge:      ; preds = %dec_label_pc_c40
  %v0_c5f.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_c5f

dec_label_pc_c50:                                 ; preds = %dec_label_pc_c40
  %v1_c50 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_c40, i128 %v1_c50)
  store i64 0, i64* @rdx, align 8
  %v0_c59 = load i1, i1* %pf.global-to-local, align 1
  %v1_c59 = icmp eq i1 %v0_c59, false
  %v2_c59 = zext i1 %v1_c59 to i64
  %v3_c59 = load i64, i64* @rax, align 8
  %v4_c59 = and i64 %v3_c59, 4294967040
  %v0_c5c = load i1, i1* %zf.global-to-local, align 1
  %v1_c5c = icmp eq i1 %v0_c5c, false
  %v5_c59.op = or i64 %v4_c59, %v2_c59
  %v7_c5c = select i1 %v1_c5c, i64 0, i64 %v5_c59.op
  store i64 %v7_c5c, i64* @rax, align 8
  br label %dec_label_pc_c5f

dec_label_pc_c5f:                                 ; preds = %dec_label_pc_c40.dec_label_pc_c5f_crit_edge, %dec_label_pc_c50
  %v0_c5f = phi i64 [ %v0_c5f.pre, %dec_label_pc_c40.dec_label_pc_c5f_crit_edge ], [ %v7_c5c, %dec_label_pc_c50 ]
  ret i64 %v0_c5f
}

define i64 @_ZN3org4luaj3vm29LuaDouble2gtEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c60:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_c67 = load i64, i64* @rdi, align 8
  %v1_c67 = add i64 %v0_c67, 8
  %v2_c67 = inttoptr i64 %v1_c67 to i64*
  %v3_c67 = load i64, i64* %v2_c67, align 8
  %v4_c67 = call i128 @__asm_movsd(i64 %v3_c67)
  %v0_c6c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_c6c, i64* @rdi, align 8
  %v0_c75 = load i64, i64* @rax, align 8
  %v4_c75 = trunc i64 %v0_c75 to i8
  %v5_c75 = icmp eq i8 %v4_c75, 0
  %v0_c77 = load i64, i64* inttoptr (i64 3198 to i64*), align 8
  store i64 %v0_c77, i64* @rax, align 8
  %v2_c7e = load i64, i64* inttoptr (i64 3206 to i64*), align 8
  %v3_c7e = select i1 %v5_c75, i64 %v2_c7e, i64 %v0_c77
  store i64 %v3_c7e, i64* @rax, align 8
  ret i64 %v3_c7e
}

define i64 @_ZN3org4luaj3vm29LuaDouble2gtEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_c90:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v1_c90 = add i64 %arg1, 8
  %v2_c90 = inttoptr i64 %v1_c90 to i64*
  %v3_c90 = load i64, i64* %v2_c90, align 8
  %v4_c90 = call i128 @__asm_movsd(i64 %v3_c90)
  %v0_c95 = load i64, i64* inttoptr (i64 3228 to i64*), align 8
  store i64 %v0_c95, i64* @rax, align 8
  %v1_c9c = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_c90, i128 %v1_c9c)
  %v0_ca0 = load i1, i1* %cf.global-to-local, align 1
  %v1_ca0 = load i1, i1* %zf.global-to-local, align 1
  %v2_ca0 = or i1 %v0_ca0, %v1_ca0
  %v3_ca0 = icmp ne i1 %v2_ca0, true
  %v4_ca0 = load i64, i64* @rax, align 8
  %v5_ca0 = load i64, i64* inttoptr (i64 3240 to i64*), align 8
  %v6_ca0 = select i1 %v3_ca0, i64 %v5_ca0, i64 %v4_ca0
  store i64 %v6_ca0, i64* @rax, align 8
  ret i64 %v6_ca0
}

define i64 @_ZN3org4luaj3vm29LuaDouble2gtEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_cb0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_cb0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_cb0 = call i128 @__asm_pxor(i128 %v0_cb0, i128 %v0_cb0)
  store i128 %v2_cb0, i128* %xmm0.global-to-local, align 8
  %v0_cb4 = load i64, i64* inttoptr (i64 3259 to i64*), align 8
  store i64 %v0_cb4, i64* @rax, align 8
  %v0_cbb = load i64, i64* @rdi, align 8
  %v1_cbb = add i64 %v0_cbb, 8
  %v2_cbb = inttoptr i64 %v1_cbb to i64*
  %v3_cbb = load i64, i64* %v2_cbb, align 8
  %v4_cbb = call i128 @__asm_movsd(i64 %v3_cbb)
  %v1_cc0 = trunc i64 %arg2 to i32
  %v2_cc0 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_cc0)
  store i128 %v2_cc0, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_cbb, i128 %v2_cc0)
  %v0_cc8 = load i1, i1* %cf.global-to-local, align 1
  %v1_cc8 = load i1, i1* %zf.global-to-local, align 1
  %v2_cc8 = or i1 %v0_cc8, %v1_cc8
  %v3_cc8 = icmp ne i1 %v2_cc8, true
  %v4_cc8 = load i64, i64* @rax, align 8
  %v5_cc8 = load i64, i64* inttoptr (i64 3280 to i64*), align 16
  %v6_cc8 = select i1 %v3_cc8, i64 %v5_cc8, i64 %v4_cc8
  store i64 %v6_cc8, i64* @rax, align 8
  ret i64 %v6_cc8
}

define i64 @_ZN3org4luaj3vm29LuaDouble4gt_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ce0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_ce7 = load i64, i64* @rdi, align 8
  %v1_ce7 = add i64 %v0_ce7, 8
  %v2_ce7 = inttoptr i64 %v1_ce7 to i64*
  %v3_ce7 = load i64, i64* %v2_ce7, align 8
  %v4_ce7 = call i128 @__asm_movsd(i64 %v3_ce7)
  %v0_cec = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_cec, i64* @rdi, align 8
  %v0_cf9 = load i64, i64* @rax, align 8
  ret i64 %v0_cf9
}

define i64 @_ZN3org4luaj3vm29LuaDouble4gt_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d00:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_d00 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_d00 = call i128 @__asm_pxor(i128 %v0_d00, i128 %v0_d00)
  store i128 %v2_d00, i128* %xmm0.global-to-local, align 8
  %v0_d04 = load i64, i64* @rdi, align 8
  %v1_d04 = add i64 %v0_d04, 8
  %v2_d04 = inttoptr i64 %v1_d04 to i64*
  %v3_d04 = load i64, i64* %v2_d04, align 8
  %v4_d04 = call i128 @__asm_movsd(i64 %v3_d04)
  %v1_d09 = trunc i64 %arg2 to i32
  %v2_d09 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_d09)
  store i128 %v2_d09, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_d04, i128 %v2_d09)
  %v0_d11 = load i1, i1* %cf.global-to-local, align 1
  %v1_d11 = load i1, i1* %zf.global-to-local, align 1
  %v2_d11 = or i1 %v0_d11, %v1_d11
  %v3_d11 = icmp ne i1 %v2_d11, true
  %v4_d11 = zext i1 %v3_d11 to i64
  %v5_d11 = load i64, i64* @rax, align 8
  %v6_d11 = and i64 %v5_d11, -256
  %v7_d11 = or i64 %v4_d11, %v6_d11
  store i64 %v7_d11, i64* @rax, align 8
  ret i64 %v7_d11
}

define i64 @_ZN3org4luaj3vm29LuaDouble4gt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_d20:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v1_d20 = add i64 %arg1, 8
  %v2_d20 = inttoptr i64 %v1_d20 to i64*
  %v3_d20 = load i64, i64* %v2_d20, align 8
  %v4_d20 = call i128 @__asm_movsd(i64 %v3_d20)
  %v1_d25 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_d20, i128 %v1_d25)
  %v0_d29 = load i1, i1* %cf.global-to-local, align 1
  %v1_d29 = load i1, i1* %zf.global-to-local, align 1
  %v2_d29 = or i1 %v0_d29, %v1_d29
  %v3_d29 = icmp ne i1 %v2_d29, true
  %v4_d29 = zext i1 %v3_d29 to i64
  %v5_d29 = load i64, i64* @rax, align 8
  %v6_d29 = and i64 %v5_d29, -256
  %v7_d29 = or i64 %v4_d29, %v6_d29
  store i64 %v7_d29, i64* @rax, align 8
  ret i64 %v7_d29
}

define i64 @_ZN3org4luaj3vm29LuaDouble4gteqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d30:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_d37 = load i64, i64* @rdi, align 8
  %v1_d37 = add i64 %v0_d37, 8
  %v2_d37 = inttoptr i64 %v1_d37 to i64*
  %v3_d37 = load i64, i64* %v2_d37, align 8
  %v4_d37 = call i128 @__asm_movsd(i64 %v3_d37)
  %v0_d3c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_d3c, i64* @rdi, align 8
  %v0_d45 = load i64, i64* @rax, align 8
  %v4_d45 = trunc i64 %v0_d45 to i8
  %v5_d45 = icmp eq i8 %v4_d45, 0
  %v0_d47 = load i64, i64* inttoptr (i64 3406 to i64*), align 8
  store i64 %v0_d47, i64* @rax, align 8
  %v2_d4e = load i64, i64* inttoptr (i64 3414 to i64*), align 8
  %v3_d4e = select i1 %v5_d45, i64 %v2_d4e, i64 %v0_d47
  store i64 %v3_d4e, i64* @rax, align 8
  ret i64 %v3_d4e
}

define i64 @_ZN3org4luaj3vm29LuaDouble4gteqEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_d60:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_d60 = add i64 %arg1, 8
  %v2_d60 = inttoptr i64 %v1_d60 to i64*
  %v3_d60 = load i64, i64* %v2_d60, align 8
  %v4_d60 = call i128 @__asm_movsd(i64 %v3_d60)
  %v0_d65 = load i64, i64* inttoptr (i64 3436 to i64*), align 8
  store i64 %v0_d65, i64* @rax, align 8
  %v1_d6c = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_d60, i128 %v1_d6c)
  %v0_d70 = load i1, i1* %cf.global-to-local, align 1
  %v1_d70 = load i64, i64* @rax, align 8
  %v2_d70 = load i64, i64* inttoptr (i64 3448 to i64*), align 8
  %v3_d70 = select i1 %v0_d70, i64 %v2_d70, i64 %v1_d70
  store i64 %v3_d70, i64* @rax, align 8
  ret i64 %v3_d70
}

define i64 @_ZN3org4luaj3vm29LuaDouble4gteqEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d80:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d80 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_d80 = call i128 @__asm_pxor(i128 %v0_d80, i128 %v0_d80)
  store i128 %v2_d80, i128* %xmm0.global-to-local, align 8
  %v0_d84 = load i64, i64* inttoptr (i64 3467 to i64*), align 8
  store i64 %v0_d84, i64* @rax, align 8
  %v0_d8b = load i64, i64* @rdi, align 8
  %v1_d8b = add i64 %v0_d8b, 8
  %v2_d8b = inttoptr i64 %v1_d8b to i64*
  %v3_d8b = load i64, i64* %v2_d8b, align 8
  %v4_d8b = call i128 @__asm_movsd(i64 %v3_d8b)
  %v1_d90 = trunc i64 %arg2 to i32
  %v2_d90 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_d90)
  store i128 %v2_d90, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_d8b, i128 %v2_d90)
  %v0_d98 = load i1, i1* %cf.global-to-local, align 1
  %v1_d98 = load i64, i64* @rax, align 8
  %v2_d98 = load i64, i64* inttoptr (i64 3488 to i64*), align 32
  %v3_d98 = select i1 %v0_d98, i64 %v2_d98, i64 %v1_d98
  store i64 %v3_d98, i64* @rax, align 8
  ret i64 %v3_d98
}

define i64 @_ZN3org4luaj3vm29LuaDouble6gteq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_db0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_db7 = load i64, i64* @rdi, align 8
  %v1_db7 = add i64 %v0_db7, 8
  %v2_db7 = inttoptr i64 %v1_db7 to i64*
  %v3_db7 = load i64, i64* %v2_db7, align 8
  %v4_db7 = call i128 @__asm_movsd(i64 %v3_db7)
  %v0_dbc = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_dbc, i64* @rdi, align 8
  %v0_dc9 = load i64, i64* @rax, align 8
  ret i64 %v0_dc9
}

define i64 @_ZN3org4luaj3vm29LuaDouble6gteq_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_dd0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_dd0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_dd0 = call i128 @__asm_pxor(i128 %v0_dd0, i128 %v0_dd0)
  store i128 %v2_dd0, i128* %xmm0.global-to-local, align 8
  %v0_dd4 = load i64, i64* @rdi, align 8
  %v1_dd4 = add i64 %v0_dd4, 8
  %v2_dd4 = inttoptr i64 %v1_dd4 to i64*
  %v3_dd4 = load i64, i64* %v2_dd4, align 8
  %v4_dd4 = call i128 @__asm_movsd(i64 %v3_dd4)
  %v1_dd9 = trunc i64 %arg2 to i32
  %v2_dd9 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_dd9)
  store i128 %v2_dd9, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_dd4, i128 %v2_dd9)
  %v0_de1 = load i1, i1* %cf.global-to-local, align 1
  %v1_de1 = icmp eq i1 %v0_de1, false
  %v2_de1 = zext i1 %v1_de1 to i64
  %v3_de1 = load i64, i64* @rax, align 8
  %v4_de1 = and i64 %v3_de1, -256
  %v5_de1 = or i64 %v4_de1, %v2_de1
  store i64 %v5_de1, i64* @rax, align 8
  ret i64 %v5_de1
}

define i64 @_ZN3org4luaj3vm29LuaDouble6gteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_df0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_df0 = add i64 %arg1, 8
  %v2_df0 = inttoptr i64 %v1_df0 to i64*
  %v3_df0 = load i64, i64* %v2_df0, align 8
  %v4_df0 = call i128 @__asm_movsd(i64 %v3_df0)
  %v1_df5 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_df0, i128 %v1_df5)
  %v0_df9 = load i1, i1* %cf.global-to-local, align 1
  %v1_df9 = icmp eq i1 %v0_df9, false
  %v2_df9 = zext i1 %v1_df9 to i64
  %v3_df9 = load i64, i64* @rax, align 8
  %v4_df9 = and i64 %v3_df9, -256
  %v5_df9 = or i64 %v4_df9, %v2_df9
  store i64 %v5_df9, i64* @rax, align 8
  ret i64 %v5_df9
}

define i64 @_ZN3org4luaj3vm29LuaDouble6strcmpEJiPNS1_9LuaStringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_e00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble10optjstringEJPN4java4lang6StringES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_e20:
  store i64 %arg1, i64* @rdi, align 8
  %v2_e24 = load i64, i64* @rdi, align 8
  store i64 %v2_e24, i64* @rax, align 8
  ret i64 %v2_e24
}

define i64 @_ZN3org4luaj3vm29LuaDouble9optnumberEJPNS1_9LuaNumberES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_e40:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaDouble8tonumberEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_e50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaDouble8checkintEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_e60:
  store i64 %arg1, i64* @rdi, align 8
  %v1_e60 = add i64 %arg1, 8
  %v2_e60 = inttoptr i64 %v1_e60 to i64*
  %v3_e60 = load i64, i64* %v2_e60, align 8
  %v4_e60 = call i128 @__asm_movsd(i64 %v3_e60)
  store i64 4294967295, i64* @rax, align 8
  %v1_e6a = load i64, i64* inttoptr (i64 3698 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_e60, i64 %v1_e6a)
  %v0_e8d = load i64, i64* @rax, align 8
  ret i64 %v0_e8d
}

define i64 @_ZN3org4luaj3vm29LuaDouble9checklongEJxv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_ea0:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_ea0 = add i64 %arg1, 8
  %v2_ea0 = inttoptr i64 %v1_ea0 to i64*
  %v3_ea0 = load i64, i64* %v2_ea0, align 8
  %v4_ea0 = call i128 @__asm_movsd(i64 %v3_ea0)
  store i64 9223372036854775807, i64* @rax, align 8
  %v1_eaf = load i64, i64* inttoptr (i64 3767 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_ea0, i64 %v1_eaf)
  %v0_eb7 = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_eb7, label %dec_label_pc_ec0, label %dec_label_pc_eb9

dec_label_pc_eb9:                                 ; preds = %dec_label_pc_ea0
  %v1_eb7 = load i64, i64* @rax, align 8
  ret i64 %v1_eb7

dec_label_pc_ec0:                                 ; preds = %dec_label_pc_ea0
  %v0_ec0 = load i64, i64* inttoptr (i64 3784 to i64*), align 8
  %v1_ec0 = call i128 @__asm_movsd(i64 %v0_ec0)
  call void @__asm_ucomisd(i128 %v1_ec0, i128 %v4_ea0)
  %v0_ecc = load i1, i1* %cf.global-to-local, align 1
  %v1_ecc = icmp eq i1 %v0_ecc, false
  br i1 %v1_ecc, label %dec_label_pc_ee0, label %dec_label_pc_ece

dec_label_pc_ece:                                 ; preds = %dec_label_pc_ec0
  %v2_ecc = load i64, i64* @rax, align 8
  ret i64 %v2_ecc

dec_label_pc_ee0:                                 ; preds = %dec_label_pc_ec0
  store i64 -9223372036854775808, i64* @rax, align 8
  ret i64 -9223372036854775808
}

define i64 @_ZN3org4luaj3vm29LuaDouble11checknumberEJPNS1_9LuaNumberEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_ef0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i128 @_ZN3org4luaj3vm29LuaDouble11checkdoubleEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_f00:
  store i64 %arg1, i64* @rdi, align 8
  %v1_f00 = add i64 %arg1, 8
  %v2_f00 = inttoptr i64 %v1_f00 to i64*
  %v3_f00 = load i64, i64* %v2_f00, align 8
  %v4_f00 = call i128 @__asm_movsd(i64 %v3_f00)
  ret i128 %v4_f00
}

define i64 @_ZN3org4luaj3vm29LuaDouble12checkjstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_f10:
  store i64 %arg1, i64* @rdi, align 8
  %v2_f14 = load i64, i64* @rdi, align 8
  store i64 %v2_f14, i64* @rax, align 8
  ret i64 %v2_f14
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11_io_tmpfileEJPNS1_7VarargsEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_f30:
  store i64 %arg1, i64* @rdi, align 8
  %v2_f34 = load i64, i64* @rdi, align 8
  store i64 %v2_f34, i64* @rax, align 8
  ret i64 %v2_f34
}

define i64 @_ZN3org4luaj3vm23lib5IoLib9_io_popenEJPNS1_7VarargsEPN4java4lang6StringES9_(i64 %arg1) local_unnamed_addr {
dec_label_pc_f50:
  store i64 %arg1, i64* @rdi, align 8
  %v2_f54 = load i64, i64* @rdi, align 8
  store i64 %v2_f54, i64* @rax, align 8
  ret i64 %v2_f54
}

define i64 @_ZN3org4luaj3vm23lib5IoLib13successresultEJPNS1_7VarargsEv() local_unnamed_addr {
dec_label_pc_f70:
  %v0_f70 = load i64, i64* inttoptr (i64 3959 to i64*), align 8
  store i64 %v0_f70, i64* @rax, align 8
  ret i64 %v0_f70
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib7iowriteEJPNS1_7VarargsEPNS2_10IoLib$FileES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_f80:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f80 = load i64, i64* %r13.global-to-local, align 8
  %v0_f82 = load i64, i64* %r12.global-to-local, align 8
  %v0_f84 = load i64, i64* @rdi, align 8
  store i64 %v0_f84, i64* %r12.global-to-local, align 8
  %v0_f87 = load i64, i64* %rbp.global-to-local, align 8
  %v0_f88 = load i64, i64* @rbx, align 8
  %v0_f89 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_f89, i64* %rbp.global-to-local, align 8
  store i64 %v0_f89, i64* @rdi, align 8
  store i64 %v0_f89, i64* @rax, align 8
  %v4_f99 = trunc i64 %v0_f89 to i32
  %tmp246 = icmp slt i32 %v4_f99, 1
  br i1 %tmp246, label %dec_label_pc_fcf, label %dec_label_pc_f9d

dec_label_pc_f9d:                                 ; preds = %dec_label_pc_f80
  store i64 %v0_f89, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rbx, align 8
  br label %dec_label_pc_fa8

dec_label_pc_fa8:                                 ; preds = %dec_label_pc_fa8, %dec_label_pc_f9d
  %v2_fca4 = phi i32 [ %v2_fb1, %dec_label_pc_fa8 ], [ 1, %dec_label_pc_f9d ]
  %v2_fb1 = add i32 %v2_fca4, 1
  %v17_fb1 = zext i32 %v2_fb1 to i64
  %v5_fcd = icmp slt i64 %v0_f89, %v17_fb1
  br i1 %v5_fcd, label %dec_label_pc_fcf.loopexit, label %dec_label_pc_fa8

dec_label_pc_fcf.loopexit:                        ; preds = %dec_label_pc_fa8
  store i64 %v0_f89, i64* @rax, align 8
  store i64 %v17_fb1, i64* @rbx, align 8
  store i64 %v0_f84, i64* @rdi, align 8
  store i64 %v0_f89, i64* @rdx, align 8
  br label %dec_label_pc_fcf

dec_label_pc_fcf:                                 ; preds = %dec_label_pc_fcf.loopexit, %dec_label_pc_f80
  store i64 %v0_f84, i64* @rax, align 8
  store i64 %v0_f88, i64* @rbx, align 8
  store i64 %v0_f87, i64* %rbp.global-to-local, align 8
  store i64 %v0_f82, i64* %r12.global-to-local, align 8
  store i64 %v0_f80, i64* %r13.global-to-local, align 8
  ret i64 %v0_f84
}

define i64 @"_ZN3org4luaj3vm23lib10IoLib$File3getEJPNS1_8LuaValueES5_"(i64 %arg1) local_unnamed_addr {
dec_label_pc_fe0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_fe4 = load i64, i64* @rdi, align 8
  %v1_fe4 = add i64 %v0_fe4, 8
  %v2_fe4 = inttoptr i64 %v1_fe4 to i64*
  %v3_fe4 = load i64, i64* %v2_fe4, align 8
  store i64 %v3_fe4, i64* @rax, align 8
  %v1_fe8 = add i64 %v3_fe4, 48
  %v2_fe8 = inttoptr i64 %v1_fe8 to i64*
  %v3_fe8 = load i64, i64* %v2_fe8, align 8
  store i64 %v3_fe8, i64* @rdi, align 8
  %v1_fec = inttoptr i64 %v3_fe8 to i64*
  %v2_fec = load i64, i64* %v1_fec, align 8
  store i64 %v2_fec, i64* @rax, align 8
  ret i64 %v2_fec
}

define i64 @"_ZN3org4luaj3vm23lib10IoLib$File9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_1000:
  %v0_1000 = load i64, i64* inttoptr (i64 4103 to i64*), align 8
  store i64 %v0_1000, i64* @rax, align 8
  ret i64 %v0_1000
}

define i64 @_ZN3org4luaj3vm23lib10PackageLib11setIsLoadedEJvPN4java4lang6StringEPNS1_8LuaTableE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1010:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1010 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1011 = load i64, i64* @rbx, align 8
  %v0_1012 = load i64, i64* @rdx, align 8
  store i64 %v0_1012, i64* %rbp.global-to-local, align 8
  %v0_1015 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1015, i64* @rbx, align 8
  %v0_101c = load i64, i64* @rdi, align 8
  %v1_101c = add i64 %v0_101c, 32
  %v2_101c = inttoptr i64 %v1_101c to i64*
  %v3_101c = load i64, i64* %v2_101c, align 8
  store i64 %v3_101c, i64* @rdi, align 8
  %v0_1020 = load i64, i64* inttoptr (i64 4135 to i64*), align 8
  store i64 %v0_1020, i64* %rsi.global-to-local, align 8
  %v1_1027 = inttoptr i64 %v3_101c to i64*
  %v2_1027 = load i64, i64* %v1_1027, align 8
  store i64 %v2_1027, i64* @rax, align 8
  %v1_1030 = inttoptr i64 %v2_1027 to i64*
  %v2_1030 = load i64, i64* %v1_1030, align 8
  store i64 %v2_1030, i64* @rcx, align 8
  store i64 %v0_1015, i64* %rsi.global-to-local, align 8
  store i64 %v2_1027, i64* @rdi, align 8
  store i64 %v0_1011, i64* @rbx, align 8
  store i64 %v0_1010, i64* %rbp.global-to-local, align 8
  ret i64 %v2_1027
}

define i64 @_ZN3org4luaj3vm23lib10PackageLib9tojstringEJPN4java4lang6StringEv() local_unnamed_addr {
dec_label_pc_1050:
  %v0_1050 = load i64, i64* inttoptr (i64 4183 to i64*), align 8
  store i64 %v0_1050, i64* @rax, align 8
  ret i64 %v0_1050
}

define i64 @_ZN3org4luaj3vm23lib10PackageLib15isClassnamePartEJbw(i64 %arg1) local_unnamed_addr {
dec_label_pc_1060:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1063 = load i64, i64* @rdi, align 8
  %v1_1063 = trunc i64 %v0_1063 to i32
  %v8_1066 = icmp sgt i32 %v1_1063, 96
  br i1 %v8_1066, label %dec_label_pc_1068, label %dec_label_pc_1098

dec_label_pc_1068:                                ; preds = %dec_label_pc_1060
  store i64 1, i64* @rax, align 8
  %v8_1070 = icmp sgt i32 %v1_1063, 122
  br i1 %v8_1070, label %dec_label_pc_1072, label %dec_label_pc_1094

dec_label_pc_1072:                                ; preds = %dec_label_pc_10a2, %dec_label_pc_109d, %dec_label_pc_1068, %dec_label_pc_10b0
  %v1_1072 = add i64 %v0_1063, -36
  store i64 %v1_1072, i64* @rcx, align 8
  store i64 0, i64* @rax, align 8
  %v1_1077 = trunc i64 %v1_1072 to i32
  %tmp257 = icmp ult i32 %v1_1077, 60
  br i1 %tmp257, label %dec_label_pc_107c, label %dec_label_pc_1094

dec_label_pc_107c:                                ; preds = %dec_label_pc_1072
  store i64 1, i64* @rax, align 8
  store i64 576460752303424513, i64* @rdx, align 8
  %v2_108b = urem i64 %v1_1072, 64
  %v4_108b = icmp eq i64 %v2_108b, 0
  br i1 %v4_108b, label %bb252, label %bb

bb:                                               ; preds = %dec_label_pc_107c
  %v5_108b = shl i64 1, %v2_108b
  store i64 %v5_108b, i64* @rax, align 8
  br label %bb252

bb252:                                            ; preds = %dec_label_pc_107c, %bb
  %v3_1091 = phi i64 [ 1, %dec_label_pc_107c ], [ %v5_108b, %bb ]
  %v2_108e = and i64 %v3_1091, 576460752303424513
  %v3_108e = icmp eq i64 %v2_108e, 0
  %v1_1091 = icmp eq i1 %v3_108e, false
  %v2_1091 = zext i1 %v1_1091 to i64
  %v4_1091 = and i64 %v3_1091, -256
  %v5_1091 = or i64 %v2_1091, %v4_1091
  store i64 %v5_1091, i64* @rax, align 8
  br label %dec_label_pc_1094

dec_label_pc_1094:                                ; preds = %dec_label_pc_1072, %dec_label_pc_1068, %bb252
  %v0_1094 = phi i64 [ 0, %dec_label_pc_1072 ], [ 1, %dec_label_pc_1068 ], [ %v5_1091, %bb252 ]
  ret i64 %v0_1094

dec_label_pc_1098:                                ; preds = %dec_label_pc_1060
  %v9_109b = icmp sgt i32 %v1_1063, 64
  br i1 %v9_109b, label %dec_label_pc_10b0, label %dec_label_pc_109d

dec_label_pc_109d:                                ; preds = %dec_label_pc_1098
  %v8_10a0 = icmp sgt i32 %v1_1063, 47
  br i1 %v8_10a0, label %dec_label_pc_10a2, label %dec_label_pc_1072

dec_label_pc_10a2:                                ; preds = %dec_label_pc_109d
  %v8_10a5 = icmp sgt i32 %v1_1063, 57
  br i1 %v8_10a5, label %dec_label_pc_1072, label %dec_label_pc_10b5

dec_label_pc_10b0:                                ; preds = %dec_label_pc_1098
  %v9_10b3 = icmp sgt i32 %v1_1063, 90
  br i1 %v9_10b3, label %dec_label_pc_1072, label %dec_label_pc_10b5

dec_label_pc_10b5:                                ; preds = %dec_label_pc_10a2, %dec_label_pc_10b0
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm23lib14VarArgFunction4callEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_10c0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_10c4 = load i64, i64* @rdi, align 8
  store i64 %v2_10c4, i64* @rax, align 8
  store i64 %v2_10c4, i64* @rdx, align 8
  ret i64 %v2_10c4
}

define i64 @_ZN3org4luaj3vm23lib14VarArgFunction4callEJPNS1_8LuaValueES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_10f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_10f4 = load i64, i64* @rdi, align 8
  store i64 %v2_10f4, i64* @rax, align 8
  store i64 %v2_10f4, i64* @rdx, align 8
  ret i64 %v2_10f4
}

define i64 @_ZN3org4luaj3vm23lib14VarArgFunction6invokeEJPNS1_7VarargsES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1110:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1114 = load i64, i64* @rdi, align 8
  store i64 %v2_1114, i64* @rax, align 8
  store i64 %v2_1114, i64* @rdx, align 8
  ret i64 %v2_1114
}

define i64 @_ZN3org4luaj3vm23lib14VarArgFunction8onInvokeEJPNS1_7VarargsES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1130:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1134 = load i64, i64* @rdi, align 8
  store i64 %v2_1134, i64* @rax, align 8
  ret i64 %v2_1134
}

define i64 @_ZN3org4luaj3vm23lib16ThreeArgFunction4callEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_1150:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1154 = load i64, i64* inttoptr (i64 4443 to i64*), align 8
  %v2_115b = load i64, i64* @rdi, align 8
  store i64 %v2_115b, i64* @rax, align 8
  store i64 %v0_1154, i64* @rcx, align 8
  store i64 %v0_1154, i64* @rdx, align 8
  ret i64 %v2_115b
}

define i64 @_ZN3org4luaj3vm23lib16ThreeArgFunction4callEJPNS1_8LuaValueES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1170:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1174 = load i64, i64* inttoptr (i64 4475 to i64*), align 8
  store i64 %v0_1174, i64* @rdx, align 8
  %v2_117b = load i64, i64* @rdi, align 8
  store i64 %v2_117b, i64* @rax, align 8
  store i64 %v0_1174, i64* @rcx, align 8
  ret i64 %v2_117b
}

define i64 @_ZN3org4luaj3vm23lib16ThreeArgFunction4callEJPNS1_8LuaValueES5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1190:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1194 = load i64, i64* @rdi, align 8
  store i64 %v2_1194, i64* @rax, align 8
  %v0_1197 = load i64, i64* inttoptr (i64 4510 to i64*), align 8
  store i64 %v0_1197, i64* @rcx, align 8
  ret i64 %v2_1194
}

define i64 @_ZN3org4luaj3vm23lib16ThreeArgFunction6invokeEJPNS1_7VarargsES5_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11b0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_11b6 = load i64, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rax, align 8
  store i64 2, i64* @rcx, align 8
  store i64 %v0_11b6, i64* @rdx, align 8
  ret i64 2
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$max6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1210:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1214 = load i64, i64* %rsi.global-to-local, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_1214, i64* @rdi, align 8
  store i64 %v0_1214, i64* @rax, align 8
  ret i64 %v0_1214
}

define i64 @_ZN3org4luaj3vm23lib7MathLib18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_1290:
  store i64 0, i64* @global_var_129b.7475, align 8
  %v0_129b = load i64, i64* @rax, align 8
  ret i64 %v0_129b
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$exp4callEJdd"(i64 %arg1) local_unnamed_addr {
dec_label_pc_12a0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12a4 = load i64, i64* @rdi, align 8
  %v1_12a4 = add i64 %v0_12a4, 24
  %v2_12a4 = inttoptr i64 %v1_12a4 to i64*
  %v3_12a4 = load i64, i64* %v2_12a4, align 8
  store i64 %v3_12a4, i64* @rdi, align 8
  %v0_12a8 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_12a8 = call i128 @__asm_movapd(i128 %v0_12a8)
  %v0_12ac = load i64, i64* inttoptr (i64 4788 to i64*), align 8
  %v1_12ac = call i128 @__asm_movsd(i64 %v0_12ac)
  store i128 %v1_12ac, i128* %xmm0.global-to-local, align 8
  %v0_12b4 = load i64, i64* @rdi, align 8
  %v1_12b4 = inttoptr i64 %v0_12b4 to i64*
  %v2_12b4 = load i64, i64* %v1_12b4, align 8
  store i64 %v2_12b4, i64* @rax, align 8
  ret i64 %v2_12b4
}

define i128 @"_ZN3org4luaj3vm23lib13MathLib$ldexp4callEJddd"() local_unnamed_addr {
dec_label_pc_12d0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %v0_12d0 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_12d0 = load i64, i64* inttoptr (i64 4824 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_12d0, i64 %v1_12d0)
  %v0_12d8 = load i1, i1* %cf.global-to-local, align 1
  %v1_12d8 = icmp eq i1 %v0_12d8, false
  br i1 %v1_12d8, label %dec_label_pc_1320, label %dec_label_pc_12da

dec_label_pc_12da:                                ; preds = %dec_label_pc_12d0
  %v2_12d8 = load i128, i128* %xmm0.global-to-local, align 8
  ret i128 %v2_12d8

dec_label_pc_1320:                                ; preds = %dec_label_pc_12d0
  %v0_1320 = load i64, i64* inttoptr (i64 4904 to i64*), align 8
  %v1_1320 = call i128 @__asm_movsd(i64 %v0_1320)
  store i128 %v1_1320, i128* %xmm1.global-to-local, align 8
  %v0_1328 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_1328 = call i128 @__asm_mulsd(i128 %v0_1328, i128 %v1_1320)
  store i128 %v2_1328, i128* %xmm0.global-to-local, align 8
  ret i128 %v2_1328
}

define i128 @"_ZN3org4luaj3vm23lib11MathLib$abs4callEJdd"() local_unnamed_addr {
dec_label_pc_1330:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_1330 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_1330 = load i128, i128* inttoptr (i64 4920 to i128*), align 8
  %v2_1330 = call i128 @__asm_andpd(i128 %v0_1330, i128 %v1_1330)
  store i128 %v2_1330, i128* %xmm0.global-to-local, align 8
  ret i128 %v2_1330
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$min6invokeEJPNS1_7VarargsES5_"() local_unnamed_addr {
dec_label_pc_1340:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_1348(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1348:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1349 = load i64, i64* %rbp.global-to-local, align 8
  %v0_134a = load i64, i64* %r13.global-to-local, align 8
  %v0_134d = load i64, i64* @rbx, align 8
  %v2_134e = load i64, i64* %rsi.global-to-local, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_134a, i64* @rax, align 8
  store i64 %v0_134a, i64* @rdi, align 8
  %v1_1369 = trunc i64 %v0_134a to i32
  %v9_136c = icmp sgt i32 %v1_1369, 1
  br i1 %v9_136c, label %dec_label_pc_136e, label %dec_label_pc_13af

dec_label_pc_136e:                                ; preds = %dec_label_pc_1348
  store i64 2, i64* @rbx, align 8
  %v4_13a1 = trunc i64 %v0_134a to i8
  %v5_13a1 = icmp eq i8 %v4_13a1, 0
  %v1_13a3 = icmp eq i1 %v5_13a1, false
  br label %dec_label_pc_1380

dec_label_pc_1380:                                ; preds = %dec_label_pc_1380, %dec_label_pc_136e
  %v4_13a33 = phi i64 [ %v4_13a3, %dec_label_pc_1380 ], [ %v2_134e, %dec_label_pc_136e ]
  %v17_13a72 = phi i32 [ %v2_13a7, %dec_label_pc_1380 ], [ 2, %dec_label_pc_136e ]
  %v4_13a3 = select i1 %v1_13a3, i64 %v0_134a, i64 %v4_13a33
  %v2_13a7 = add i32 %v17_13a72, 1
  %v17_13a7 = zext i32 %v2_13a7 to i64
  %v5_13ad = icmp slt i64 %v0_134a, %v17_13a7
  br i1 %v5_13ad, label %dec_label_pc_13af.loopexit, label %dec_label_pc_1380

dec_label_pc_13af.loopexit:                       ; preds = %dec_label_pc_1380
  store i64 %v0_134a, i64* @rax, align 8
  store i64 %v17_13a7, i64* @rbx, align 8
  store i64 %v4_13a33, i64* %rsi.global-to-local, align 8
  store i64 %v0_134a, i64* @rdi, align 8
  store i64 %v0_134a, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_13af

dec_label_pc_13af:                                ; preds = %dec_label_pc_13af.loopexit, %dec_label_pc_1348
  %v0_13af = phi i64 [ %v4_13a3, %dec_label_pc_13af.loopexit ], [ %v2_134e, %dec_label_pc_1348 ]
  store i64 %v0_13af, i64* @rax, align 8
  store i64 %v0_134d, i64* @rbx, align 8
  store i64 %v0_1349, i64* %rbp.global-to-local, align 8
  store i64 %arg3, i64* %r13.global-to-local, align 8
  ret i64 %v0_13af
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame3setEJvPNS1_10LuaClosureEPNS1_7VarargsEP6JArrayIPNS1_8LuaValueEE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_13c0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_13c0 = add i64 %arg1, 8
  %v3_13c0 = inttoptr i64 %v2_13c0 to i64*
  store i64 %arg2, i64* %v3_13c0, align 8
  %v0_13c4 = load i64, i64* @rdx, align 8
  %v1_13c4 = load i64, i64* @rdi, align 8
  %v2_13c4 = add i64 %v1_13c4, 24
  %v3_13c4 = inttoptr i64 %v2_13c4 to i64*
  store i64 %v0_13c4, i64* %v3_13c4, align 8
  %v0_13c8 = load i64, i64* @rcx, align 8
  %v1_13c8 = load i64, i64* @rdi, align 8
  %v2_13c8 = add i64 %v1_13c8, 32
  %v3_13c8 = inttoptr i64 %v2_13c8 to i64*
  store i64 %v0_13c8, i64* %v3_13c8, align 8
  %v0_13cc = load i64, i64* @rax, align 8
  ret i64 %v0_13cc
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame3setEJvPNS1_11LuaFunctionE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_13d0 = add i64 %arg1, 8
  %v3_13d0 = inttoptr i64 %v2_13d0 to i64*
  store i64 %arg2, i64* %v3_13d0, align 8
  %v0_13d4 = load i64, i64* @rax, align 8
  ret i64 %v0_13d4
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame5resetEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_13e0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_13e0 = add i64 %arg1, 8
  %v2_13e0 = inttoptr i64 %v1_13e0 to i64*
  store i64 0, i64* %v2_13e0, align 8
  %v0_13e8 = load i64, i64* @rdi, align 8
  %v1_13e8 = add i64 %v0_13e8, 24
  %v2_13e8 = inttoptr i64 %v1_13e8 to i64*
  store i64 0, i64* %v2_13e8, align 8
  %v0_13f0 = load i64, i64* @rdi, align 8
  %v1_13f0 = add i64 %v0_13f0, 32
  %v2_13f0 = inttoptr i64 %v1_13f0 to i64*
  store i64 0, i64* %v2_13f0, align 8
  %v0_13f8 = load i64, i64* @rax, align 8
  ret i64 %v0_13f8
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame11linedefinedEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1400 = load i64, i64* @rbx, align 8
  %v0_1401 = load i64, i64* @rdi, align 8
  store i64 %v0_1401, i64* @rbx, align 8
  %v1_1404 = add i64 %v0_1401, 8
  %v2_1404 = inttoptr i64 %v1_1404 to i64*
  %v3_1404 = load i64, i64* %v2_1404, align 8
  store i64 %v3_1404, i64* @rdi, align 8
  %v1_1408 = inttoptr i64 %v3_1404 to i64*
  %v2_1408 = load i64, i64* %v1_1408, align 8
  store i64 %v2_1408, i64* @rax, align 8
  %v4_1411 = trunc i64 %v2_1408 to i8
  %v5_1411 = icmp eq i8 %v4_1411, 0
  store i64 4294967295, i64* @rdx, align 8
  br i1 %v5_1411, label %dec_label_pc_142e, label %dec_label_pc_141a

dec_label_pc_141a:                                ; preds = %dec_label_pc_1400
  %v3_141a = load i64, i64* %v2_1404, align 8
  store i64 %v3_141a, i64* @rdi, align 8
  %v1_141e = inttoptr i64 %v3_141a to i64*
  %v2_141e = load i64, i64* %v1_141e, align 8
  store i64 %v2_141e, i64* @rax, align 8
  %v1_1427 = add i64 %v2_141e, 8
  %v2_1427 = inttoptr i64 %v1_1427 to i64*
  %v3_1427 = load i64, i64* %v2_1427, align 8
  store i64 %v3_1427, i64* @rax, align 8
  %v1_142b = add i64 %v3_1427, 64
  %v2_142b = inttoptr i64 %v1_142b to i32*
  %v3_142b = load i32, i32* %v2_142b, align 4
  %v4_142b = zext i32 %v3_142b to i64
  store i64 %v4_142b, i64* @rdx, align 8
  br label %dec_label_pc_142e

dec_label_pc_142e:                                ; preds = %dec_label_pc_141a, %dec_label_pc_1400
  %v0_142e = phi i64 [ %v4_142b, %dec_label_pc_141a ], [ 4294967295, %dec_label_pc_1400 ]
  store i64 %v0_142e, i64* @rax, align 8
  store i64 %v0_1400, i64* @rbx, align 8
  ret i64 %v0_142e
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame12getlocalnameEJPNS1_9LuaStringEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1440:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1440 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1441 = load i64, i64* @rbx, align 8
  %v0_1442 = load i64, i64* @rdi, align 8
  store i64 %v0_1442, i64* @rbx, align 8
  %v0_1445 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1445, i64* %rbp.global-to-local, align 8
  %v1_144b = add i64 %v0_1442, 8
  %v2_144b = inttoptr i64 %v1_144b to i64*
  %v3_144b = load i64, i64* %v2_144b, align 8
  store i64 %v3_144b, i64* @rdi, align 8
  %v1_144f = inttoptr i64 %v3_144b to i64*
  %v2_144f = load i64, i64* %v1_144f, align 8
  store i64 %v2_144f, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  %v4_145c = trunc i64 %v2_144f to i8
  %v5_145c = icmp eq i8 %v4_145c, 0
  br i1 %v5_145c, label %dec_label_pc_147c, label %dec_label_pc_1460

dec_label_pc_1460:                                ; preds = %dec_label_pc_1440
  %v3_1460 = load i64, i64* %v2_144b, align 8
  store i64 %v3_1460, i64* @rdi, align 8
  %v1_1464 = inttoptr i64 %v3_1460 to i64*
  %v2_1464 = load i64, i64* %v1_1464, align 8
  store i64 %v2_1464, i64* @rax, align 8
  %v1_146d = add i64 %v2_1464, 8
  %v2_146d = inttoptr i64 %v1_146d to i64*
  %v3_146d = load i64, i64* %v2_146d, align 8
  store i64 %v3_146d, i64* @rdi, align 8
  %v1_1471 = add i64 %v0_1442, 16
  %v2_1471 = inttoptr i64 %v1_1471 to i32*
  %v3_1471 = load i32, i32* %v2_1471, align 4
  %v4_1471 = zext i32 %v3_1471 to i64
  store i64 %v4_1471, i64* @rdx, align 8
  %v1_1476 = inttoptr i64 %v3_146d to i64*
  %v2_1476 = load i64, i64* %v1_1476, align 8
  store i64 %v2_1476, i64* @rax, align 8
  br label %dec_label_pc_147c

dec_label_pc_147c:                                ; preds = %dec_label_pc_1460, %dec_label_pc_1440
  %v0_1482 = phi i64 [ %v2_1476, %dec_label_pc_1460 ], [ 0, %dec_label_pc_1440 ]
  store i64 %v0_1441, i64* @rbx, align 8
  store i64 %v0_1440, i64* %rbp.global-to-local, align 8
  ret i64 %v0_1482
}

define i64 @"_ZN3org4luaj3vm23lib17DebugLib$setlocal6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1490:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1490 = load i64, i64* %r15.global-to-local, align 8
  %v0_1492 = load i64, i64* %r14.global-to-local, align 8
  %v0_1494 = load i64, i64* @rdi, align 8
  store i64 %v0_1494, i64* %r14.global-to-local, align 8
  %v0_1497 = load i64, i64* %r13.global-to-local, align 8
  %v0_1499 = load i64, i64* %r12.global-to-local, align 8
  %v0_149b = load i64, i64* %rbp.global-to-local, align 8
  %v0_149c = load i64, i64* @rbx, align 8
  %v0_149d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_149d, i64* @rbx, align 8
  store i64 %v0_149d, i64* @rdi, align 8
  store i64 %v0_149d, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v4_14b5 = trunc i64 %v0_149d to i8
  %v5_14b5 = icmp eq i8 %v4_14b5, 0
  %v1_14b7 = icmp eq i1 %v5_14b5, false
  br i1 %v1_14b7, label %dec_label_pc_1570, label %dec_label_pc_14bd

dec_label_pc_14bd:                                ; preds = %dec_label_pc_1490
  %v1_14bd = add i64 %v0_1494, 24
  %v2_14bd = inttoptr i64 %v1_14bd to i64*
  %v3_14bd = load i64, i64* %v2_14bd, align 8
  store i64 %v3_14bd, i64* @rax, align 8
  store i64 3, i64* %r15.global-to-local, align 8
  store i64 2, i64* %r12.global-to-local, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_14d2 = add i64 %v3_14bd, 24
  %v2_14d2 = inttoptr i64 %v1_14d2 to i64*
  %v3_14d2 = load i64, i64* %v2_14d2, align 8
  store i64 %v3_14d2, i64* @rax, align 8
  %v1_14d6 = add i64 %v3_14d2, 72
  %v2_14d6 = inttoptr i64 %v1_14d6 to i64*
  %storemerge.pre = load i64, i64* %v2_14d6, align 8
  br label %dec_label_pc_14da

dec_label_pc_14da:                                ; preds = %dec_label_pc_1570, %dec_label_pc_14bd
  %v2_1506.pre-phi = phi i64* [ %.pre6, %dec_label_pc_1570 ], [ %v2_14bd, %dec_label_pc_14bd ]
  %storemerge = phi i64 [ 1, %dec_label_pc_1570 ], [ %storemerge.pre, %dec_label_pc_14bd ]
  %v0_1500 = phi i64 [ 4, %dec_label_pc_1570 ], [ 3, %dec_label_pc_14bd ]
  %v0_152c = phi i64 [ 3, %dec_label_pc_1570 ], [ 2, %dec_label_pc_14bd ]
  %v0_152f = phi i64 [ 2, %dec_label_pc_1570 ], [ 1, %dec_label_pc_14bd ]
  store i64 %storemerge, i64* %r13.global-to-local, align 8
  store i64 %v0_152f, i64* %rbp.global-to-local, align 8
  store i64 %v0_152f, i64* %r12.global-to-local, align 8
  store i64 %v0_152c, i64* @rax, align 8
  store i64 %v0_149d, i64* @rdi, align 8
  store i64 %v0_1500, i64* %rsi.global-to-local, align 8
  %v3_1506 = load i64, i64* %v2_1506.pre-phi, align 8
  store i64 %v3_1506, i64* @rdi, align 8
  store i64 %v0_152c, i64* @rbx, align 8
  store i64 %storemerge, i64* %rsi.global-to-local, align 8
  %v1_1510 = inttoptr i64 %v3_1506 to i64*
  %v2_1510 = load i64, i64* %v1_1510, align 8
  store i64 %v2_1510, i64* @rax, align 8
  %v1_1519 = inttoptr i64 %v2_1510 to i64*
  %v2_1519 = load i64, i64* %v1_1519, align 8
  store i64 %v2_1519, i64* @rdx, align 8
  store i64 %v0_152f, i64* %rsi.global-to-local, align 8
  store i64 %v2_1510, i64* @rdi, align 8
  %v1_1524 = icmp eq i64 %v2_1510, 0
  br i1 %v1_1524, label %dec_label_pc_1550, label %dec_label_pc_1529

dec_label_pc_1529:                                ; preds = %dec_label_pc_14da
  %v2_1529 = load i64, i64* %v1_1519, align 8
  store i64 %v2_1529, i64* @rcx, align 8
  store i64 %v0_152c, i64* @rdx, align 8
  store i64 %v0_152f, i64* %rsi.global-to-local, align 8
  store i64 %v2_1510, i64* @rdi, align 8
  store i64 %v0_149c, i64* @rbx, align 8
  store i64 %v0_149b, i64* %rbp.global-to-local, align 8
  store i64 %v0_1499, i64* %r12.global-to-local, align 8
  store i64 %v0_1497, i64* %r13.global-to-local, align 8
  store i64 %v0_1492, i64* %r14.global-to-local, align 8
  store i64 %v0_1490, i64* %r15.global-to-local, align 8
  ret i64 %v2_1510

dec_label_pc_1550:                                ; preds = %dec_label_pc_14da
  %v0_1550 = load i64, i64* inttoptr (i64 5463 to i64*), align 8
  store i64 %v0_1550, i64* @rax, align 8
  store i64 %v0_149c, i64* @rbx, align 8
  store i64 %v0_149b, i64* %rbp.global-to-local, align 8
  store i64 %v0_1499, i64* %r12.global-to-local, align 8
  store i64 %v0_1497, i64* %r13.global-to-local, align 8
  store i64 %v0_1492, i64* %r14.global-to-local, align 8
  store i64 %v0_1490, i64* %r15.global-to-local, align 8
  ret i64 %v0_1550

dec_label_pc_1570:                                ; preds = %dec_label_pc_1490
  store i64 1, i64* @rax, align 8
  store i64 %v0_149d, i64* @rdi, align 8
  store i64 4, i64* %r15.global-to-local, align 8
  store i64 3, i64* %r12.global-to-local, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  %.pre = add i64 %v0_1494, 24
  %.pre6 = inttoptr i64 %.pre to i64*
  br label %dec_label_pc_14da
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib9tracebackEJPN4java4lang6StringEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15a0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_15a1 = load i64, i64* @rdi, align 8
  store i64 %v2_15a1, i64* @rax, align 8
  store i64 %v2_15a1, i64* @rdx, align 8
  ret i64 %v2_15a1
}

define i64 @"_ZN3org4luaj3vm23lib8DebugLib9callstackEJPNS2_18DebugLib$CallStackEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_15c0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_15c4 = load i64, i64* @rdi, align 8
  store i64 %v0_15c4, i64* @rax, align 8
  ret i64 %v0_15c4
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$getuservalue4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15e0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_15e3 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_15f0 = trunc i64 %arg2 to i8
  %v5_15f0 = icmp eq i8 %v4_15f0, 0
  store i64 %arg2, i64* @rax, align 8
  %v2_15f5 = load i64, i64* inttoptr (i64 5629 to i64*), align 8
  %v3_15f5 = select i1 %v5_15f0, i64 %v2_15f5, i64 %arg2
  store i64 %v3_15f5, i64* @rax, align 8
  store i64 %v0_15e3, i64* @rbx, align 8
  ret i64 %v3_15f5
}

define i64 @"_ZN3org4luaj3vm23lib20DebugLib$getregistry4callEJPNS1_8LuaValueEv"() local_unnamed_addr {
dec_label_pc_1600:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_1605() local_unnamed_addr {
dec_label_pc_1605:
  %v0_1605 = load i64, i64* @rax, align 8
  %v1_1605 = add i64 %v0_1605, 24
  %v2_1605 = inttoptr i64 %v1_1605 to i32*
  %v3_1605 = load i32, i32* %v2_1605, align 4
  %v4_1605 = zext i32 %v3_1605 to i64
  store i64 %v4_1605, i64* @rax, align 8
  ret i64 %v4_1605
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$getmetatable4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1610:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_1620 = icmp eq i64 %arg2, 0
  %v2_1623 = load i64, i64* inttoptr (i64 5675 to i64*), align 8
  %v3_1623 = select i1 %v1_1620, i64 %v2_1623, i64 %arg2
  store i64 %v3_1623, i64* @rax, align 8
  ret i64 %v3_1623
}

define i64 @"_ZN3org4luaj3vm23lib14DebugLib$debug4callEJPNS1_8LuaValueEv"() local_unnamed_addr {
dec_label_pc_1630:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_1633() local_unnamed_addr {
dec_label_pc_1633:
  %v2_1633 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_1633 = load i64, i64* @rax, align 8
  %v4_1633 = trunc i64 %v3_1633 to i8
  %v5_1633 = add i8 %v4_1633, %v2_1633
  %v21_1633 = inttoptr i64 %v3_1633 to i8*
  store i8 %v5_1633, i8* %v21_1633, align 1
  %v2_1635 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_1635 = load i64, i64* @rax, align 8
  %v4_1635 = trunc i64 %v3_1635 to i8
  %v5_1635 = add i8 %v4_1635, %v2_1635
  %v21_1635 = inttoptr i64 %v3_1635 to i8*
  store i8 %v5_1635, i8* %v21_1635, align 1
  %v0_1637 = load i64, i64* @rax, align 8
  ret i64 %v0_1637
}

define i64 @"_ZN3org4luaj3vm23lib17DebugLib$getlocal6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1640:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1640 = load i64, i64* %r14.global-to-local, align 8
  %v0_1642 = load i64, i64* %r13.global-to-local, align 8
  %v0_1644 = load i64, i64* %r12.global-to-local, align 8
  %v0_1646 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1647 = load i64, i64* @rdi, align 8
  store i64 %v0_1647, i64* %rbp.global-to-local, align 8
  %v0_164a = load i64, i64* @rbx, align 8
  %v2_164b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_164b, i64* @rax, align 8
  store i64 %v2_164b, i64* @rbx, align 8
  store i64 %v2_164b, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v4_165f = trunc i64 %v2_164b to i8
  %v5_165f = icmp eq i8 %v4_165f, 0
  %v1_1661 = icmp eq i1 %v5_165f, false
  br i1 %v1_1661, label %dec_label_pc_16e0, label %dec_label_pc_1663

dec_label_pc_1663:                                ; preds = %dec_label_pc_1640
  %v1_1663 = add i64 %v0_1647, 24
  %v2_1663 = inttoptr i64 %v1_1663 to i64*
  %v3_1663 = load i64, i64* %v2_1663, align 8
  store i64 %v3_1663, i64* @rax, align 8
  store i64 2, i64* %r14.global-to-local, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_1672 = add i64 %v3_1663, 24
  %v2_1672 = inttoptr i64 %v1_1672 to i64*
  %v3_1672 = load i64, i64* %v2_1672, align 8
  store i64 %v3_1672, i64* @rax, align 8
  %v1_1676 = add i64 %v3_1672, 72
  %v2_1676 = inttoptr i64 %v1_1676 to i64*
  %v3_1676 = load i64, i64* %v2_1676, align 8
  br label %dec_label_pc_167a

dec_label_pc_167a:                                ; preds = %dec_label_pc_16e0, %dec_label_pc_1663
  %v2_1698.pre-phi = phi i64* [ %.pre4, %dec_label_pc_16e0 ], [ %v2_1663, %dec_label_pc_1663 ]
  %storemerge = phi i64 [ 1, %dec_label_pc_16e0 ], [ %v3_1676, %dec_label_pc_1663 ]
  %v0_168f = phi i64 [ 3, %dec_label_pc_16e0 ], [ 2, %dec_label_pc_1663 ]
  %v0_16be = phi i64 [ 2, %dec_label_pc_16e0 ], [ 1, %dec_label_pc_1663 ]
  store i64 %storemerge, i64* %r13.global-to-local, align 8
  store i64 %v0_16be, i64* %r12.global-to-local, align 8
  store i64 %v0_16be, i64* @rax, align 8
  store i64 %v2_164b, i64* @rdi, align 8
  store i64 %v0_168f, i64* %rsi.global-to-local, align 8
  %v3_1698 = load i64, i64* %v2_1698.pre-phi, align 8
  store i64 %v3_1698, i64* @rdi, align 8
  store i64 %v0_16be, i64* @rbx, align 8
  store i64 %storemerge, i64* %rsi.global-to-local, align 8
  %v1_16a1 = inttoptr i64 %v3_1698 to i64*
  %v2_16a1 = load i64, i64* %v1_16a1, align 8
  store i64 %v2_16a1, i64* @rax, align 8
  %v1_16aa = inttoptr i64 %v2_16a1 to i64*
  %v2_16aa = load i64, i64* %v1_16aa, align 8
  store i64 %v2_16aa, i64* @rdx, align 8
  store i64 %v0_16be, i64* %rsi.global-to-local, align 8
  store i64 %v2_16a1, i64* @rdi, align 8
  %v1_16b6 = icmp eq i64 %v2_16a1, 0
  br i1 %v1_16b6, label %dec_label_pc_16d0, label %dec_label_pc_16bb

dec_label_pc_16bb:                                ; preds = %dec_label_pc_167a
  %v2_16bb = load i64, i64* %v1_16aa, align 8
  store i64 %v2_16bb, i64* @rdx, align 8
  store i64 %v0_16be, i64* %rsi.global-to-local, align 8
  store i64 %v2_16a1, i64* @rdi, align 8
  store i64 %v0_164a, i64* @rbx, align 8
  store i64 %v0_1646, i64* %rbp.global-to-local, align 8
  store i64 %v0_1644, i64* %r12.global-to-local, align 8
  store i64 %v0_1642, i64* %r13.global-to-local, align 8
  store i64 %v0_1640, i64* %r14.global-to-local, align 8
  ret i64 %v2_16a1

dec_label_pc_16d0:                                ; preds = %dec_label_pc_167a
  %v0_16d0 = load i64, i64* inttoptr (i64 5847 to i64*), align 8
  store i64 %v0_16d0, i64* @rax, align 8
  store i64 %v0_164a, i64* @rbx, align 8
  store i64 %v0_1646, i64* %rbp.global-to-local, align 8
  store i64 %v0_1644, i64* %r12.global-to-local, align 8
  store i64 %v0_1642, i64* %r13.global-to-local, align 8
  store i64 %v0_1640, i64* %r14.global-to-local, align 8
  ret i64 %v0_16d0

dec_label_pc_16e0:                                ; preds = %dec_label_pc_1640
  store i64 1, i64* @rax, align 8
  store i64 %v2_164b, i64* @rdi, align 8
  store i64 3, i64* %r14.global-to-local, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  %.pre = add i64 %v0_1647, 24
  %.pre4 = inttoptr i64 %.pre to i64*
  br label %dec_label_pc_167a
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction4bindEJvPNS1_8LuaValueEPN4java4lang5ClassEP6JArrayIPNS7_6StringEE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1710:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_1714 = load i64, i64* @rdi, align 8
  store i64 %v2_1714, i64* @rax, align 8
  ret i64 %v2_1714
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction4callEJPNS1_8LuaValueES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1730:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1734 = load i64, i64* @rdi, align 8
  store i64 %v2_1734, i64* @rax, align 8
  ret i64 %v2_1734
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction4callEJPNS1_8LuaValueES5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1750:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1754 = load i64, i64* @rdi, align 8
  store i64 %v2_1754, i64* @rax, align 8
  ret i64 %v2_1754
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction4callEJPNS1_8LuaValueES5_S5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1770:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1774 = load i64, i64* @rdi, align 8
  store i64 %v2_1774, i64* @rax, align 8
  ret i64 %v2_1774
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction4callEJPNS1_8LuaValueES5_S5_S5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1790:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1794 = load i64, i64* @rdi, align 8
  store i64 %v2_1794, i64* @rax, align 8
  ret i64 %v2_1794
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction6invokeEJPNS1_7VarargsES5_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17b0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17b6 = load i64, i64* %rbp.global-to-local, align 8
  %v0_17b7 = load i64, i64* @rdi, align 8
  store i64 %v0_17b7, i64* %rbp.global-to-local, align 8
  %v0_17ba = load i64, i64* @rbx, align 8
  %v2_17bb = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_17bb, i64* @rax, align 8
  store i64 %v2_17bb, i64* @rbx, align 8
  store i64 %v2_17bb, i64* @rdi, align 8
  %v1_17c7 = trunc i64 %v2_17bb to i32
  %v6_17c7 = icmp eq i32 %v1_17c7, 0
  %v11_17c7 = icmp eq i32 %v1_17c7, 1
  br i1 %v11_17c7, label %dec_label_pc_18f0, label %dec_label_pc_17d0

dec_label_pc_17d0:                                ; preds = %dec_label_pc_17b0
  %v8_17d0 = icmp sgt i32 %v1_17c7, 1
  br i1 %v8_17d0, label %dec_label_pc_17d6, label %dec_label_pc_1870

dec_label_pc_17d6:                                ; preds = %dec_label_pc_17d0
  %v11_17d6 = icmp eq i32 %v1_17c7, 2
  br i1 %v11_17d6, label %dec_label_pc_1830, label %dec_label_pc_17db

dec_label_pc_17db:                                ; preds = %dec_label_pc_17d6
  %v11_17db = icmp eq i32 %v1_17c7, 3
  %v1_17de = icmp eq i1 %v11_17db, false
  br i1 %v1_17de, label %dec_label_pc_1890, label %dec_label_pc_17e4

dec_label_pc_17e4:                                ; preds = %dec_label_pc_17db
  store i64 2, i64* @rax, align 8
  store i64 2, i64* @rcx, align 8
  store i64 %v2_17bb, i64* @rdx, align 8
  store i64 %v0_17b7, i64* @rdi, align 8
  store i64 %v0_17ba, i64* @rbx, align 8
  store i64 %v0_17b6, i64* %rbp.global-to-local, align 8
  ret i64 2

dec_label_pc_1830:                                ; preds = %dec_label_pc_17d6
  store i64 %v2_17bb, i64* @rax, align 8
  store i64 %v2_17bb, i64* @rcx, align 8
  store i64 %v2_17bb, i64* @rdx, align 8
  store i64 %v0_17b7, i64* @rdi, align 8
  store i64 %v0_17ba, i64* @rbx, align 8
  store i64 %v0_17b6, i64* %rbp.global-to-local, align 8
  ret i64 %v2_17bb

dec_label_pc_1870:                                ; preds = %dec_label_pc_17d0
  %v1_1872 = icmp eq i1 %v6_17c7, false
  br i1 %v1_1872, label %dec_label_pc_1890, label %dec_label_pc_1874

dec_label_pc_1874:                                ; preds = %dec_label_pc_1870
  store i64 %v2_17bb, i64* @rax, align 8
  store i64 %v0_17b7, i64* @rdi, align 8
  store i64 %v0_17ba, i64* @rbx, align 8
  store i64 %v0_17b6, i64* %rbp.global-to-local, align 8
  ret i64 %v2_17bb

dec_label_pc_1890:                                ; preds = %dec_label_pc_1870, %dec_label_pc_17db
  store i64 3, i64* @rax, align 8
  store i64 2, i64* @rcx, align 8
  store i64 %v2_17bb, i64* @rdx, align 8
  store i64 %v0_17b7, i64* @rdi, align 8
  store i64 %v0_17ba, i64* @rbx, align 8
  store i64 %v0_17b6, i64* %rbp.global-to-local, align 8
  ret i64 3

dec_label_pc_18f0:                                ; preds = %dec_label_pc_17b0
  store i64 %v2_17bb, i64* @rax, align 8
  store i64 %v2_17bb, i64* @rdx, align 8
  store i64 %v0_17b7, i64* @rdi, align 8
  store i64 %v0_17ba, i64* @rbx, align 8
  store i64 %v0_17b6, i64* %rbp.global-to-local, align 8
  ret i64 %v2_17bb
}

define i64 @_ZN3org4luaj3vm23lib15ZeroArgFunction4callEJPNS1_8LuaValueES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1920:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1924 = load i64, i64* @rdi, align 8
  store i64 %v2_1924, i64* @rax, align 8
  ret i64 %v2_1924
}

define i64 @_ZN3org4luaj3vm23lib15ZeroArgFunction4callEJPNS1_8LuaValueES5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1940:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1944 = load i64, i64* @rdi, align 8
  store i64 %v2_1944, i64* @rax, align 8
  ret i64 %v2_1944
}

define i64 @_ZN3org4luaj3vm23lib15ZeroArgFunction4callEJPNS1_8LuaValueES5_S5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1960:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1964 = load i64, i64* @rdi, align 8
  store i64 %v2_1964, i64* @rax, align 8
  ret i64 %v2_1964
}

define i64 @_ZN3org4luaj3vm23lib15ZeroArgFunction6invokeEJPNS1_7VarargsES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1980:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1984 = load i64, i64* @rdi, align 8
  store i64 %v2_1984, i64* @rax, align 8
  ret i64 %v2_1984
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState5resetEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_19a0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_19a0 = add i64 %arg1, 32
  %v2_19a0 = inttoptr i64 %v1_19a0 to i32*
  store i32 0, i32* %v2_19a0, align 4
  %v0_19a7 = load i64, i64* @rax, align 8
  ret i64 %v0_19a7
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState10max_expandEJiiii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_19b0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_19b0 = load i64, i64* %r15.global-to-local, align 8
  %v0_19b2 = load i64, i64* %r14.global-to-local, align 8
  %v0_19b4 = load i64, i64* @rcx, align 8
  store i64 %v0_19b4, i64* %r14.global-to-local, align 8
  %v0_19b7 = load i64, i64* %r13.global-to-local, align 8
  %v0_19b9 = load i64, i64* %r12.global-to-local, align 8
  %v0_19bb = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_19bb, i64* %r13.global-to-local, align 8
  %v0_19be = load i64, i64* %rbp.global-to-local, align 8
  %v0_19bf = load i64, i64* @rbx, align 8
  store i64 0, i64* %r12.global-to-local, align 8
  %v0_19c3 = load i64, i64* @rdi, align 8
  store i64 %v0_19c3, i64* @rbx, align 8
  %v1_19fb = add i64 %v0_19c3, 8
  %v2_19fb = inttoptr i64 %v1_19fb to i64*
  br label %dec_label_pc_19fb

dec_label_pc_19d0:                                ; preds = %dec_label_pc_19fb
  %v3_19d0 = load i64, i64* %v2_19fb, align 8
  store i64 %v3_19d0, i64* @rdi, align 8
  store i64 %v3_19ff, i64* %rsi.global-to-local, align 8
  %v2_19d7 = add nuw nsw i64 %v0_1a18, 1
  %v17_19d7 = and i64 %v2_19d7, 4294967295
  store i64 %v17_19d7, i64* %r12.global-to-local, align 8
  %v1_19db = inttoptr i64 %v3_19d0 to i64*
  %v2_19db = load i64, i64* %v1_19db, align 8
  store i64 %v2_19db, i64* @rax, align 8
  store i64 %v2_19db, i64* %rsi.global-to-local, align 8
  store i64 %v0_19c3, i64* @rdi, align 8
  %v4_19f7 = trunc i64 %v2_19db to i8
  %v5_19f7 = icmp eq i8 %v4_19f7, 0
  br i1 %v5_19f7, label %dec_label_pc_1a14, label %dec_label_pc_19fb

dec_label_pc_19fb:                                ; preds = %dec_label_pc_19d0, %dec_label_pc_19b0
  %v0_1a18 = phi i64 [ %v17_19d7, %dec_label_pc_19d0 ], [ 0, %dec_label_pc_19b0 ]
  %v3_19fb = load i64, i64* %v2_19fb, align 8
  store i64 %v3_19fb, i64* @rdi, align 8
  %v3_19ff = add i64 %v0_1a18, %v0_19bb
  store i64 %v3_19ff, i64* %r15.global-to-local, align 8
  store i64 %v0_1a18, i64* %rbp.global-to-local, align 8
  %v1_1a06 = inttoptr i64 %v3_19fb to i64*
  %v2_1a06 = load i64, i64* %v1_1a06, align 8
  store i64 %v2_1a06, i64* @rax, align 8
  %v8_1a12 = icmp sgt i64 %v2_1a06, %v3_19ff
  br i1 %v8_1a12, label %dec_label_pc_19d0, label %dec_label_pc_1a14

dec_label_pc_1a14:                                ; preds = %dec_label_pc_19d0, %dec_label_pc_19fb
  %rdi.promoted = phi i64 [ %v0_19c3, %dec_label_pc_19d0 ], [ %v3_19fb, %dec_label_pc_19fb ]
  %v4_1a14 = trunc i64 %v0_1a18 to i32
  %v6_1a14 = icmp slt i32 %v4_1a14, 0
  br i1 %v6_1a14, label %dec_label_pc_1a58, label %dec_label_pc_1a18

dec_label_pc_1a18:                                ; preds = %dec_label_pc_1a14
  %v3_1a18 = trunc i64 %v0_19bb to i32
  %v20_1a18 = and i64 %v3_19ff, 4294967295
  store i64 %v20_1a18, i64* %rbp.global-to-local, align 8
  %v2_1a1b = add i64 %v0_19b4, 1
  %v17_1a1b = and i64 %v2_1a1b, 4294967295
  store i64 %v17_1a1b, i64* %r14.global-to-local, align 8
  %v2_1a1f = add i32 %v3_1a18, -1
  %v17_1a1f = zext i32 %v2_1a1f to i64
  store i64 %v17_1a1f, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_1a30

dec_label_pc_1a28:                                ; preds = %dec_label_pc_1a30
  %v1_1a28 = trunc i64 %v0_1a28 to i32
  %v2_1a28 = add i32 %v1_1a28, -1
  %v17_1a28 = zext i32 %v2_1a28 to i64
  store i64 %v17_1a28, i64* %rbp.global-to-local, align 8
  %v14_1a2b = icmp eq i32 %v2_1a28, %v2_1a1f
  br i1 %v14_1a2b, label %dec_label_pc_1a58.loopexit, label %dec_label_pc_1a30

dec_label_pc_1a30:                                ; preds = %dec_label_pc_1a28, %dec_label_pc_1a18
  %v0_1a28 = phi i64 [ %v17_1a28, %dec_label_pc_1a28 ], [ %v20_1a18, %dec_label_pc_1a18 ]
  %v2_1a306 = phi i64 [ %v0_19c3, %dec_label_pc_1a28 ], [ %rdi.promoted, %dec_label_pc_1a18 ]
  %v1_1a3e = trunc i64 %v2_1a306 to i32
  %v11_1a3e = icmp eq i32 %v1_1a3e, -1
  br i1 %v11_1a3e, label %dec_label_pc_1a28, label %dec_label_pc_1a43

dec_label_pc_1a43:                                ; preds = %dec_label_pc_1a30
  store i64 %v0_19c3, i64* @rdi, align 8
  store i64 %v2_1a306, i64* @rax, align 8
  store i64 %v17_1a1b, i64* @rdx, align 8
  store i64 %v0_1a28, i64* %rsi.global-to-local, align 8
  store i64 %v0_19bf, i64* @rbx, align 8
  store i64 %v0_19be, i64* %rbp.global-to-local, align 8
  store i64 %v0_19b9, i64* %r12.global-to-local, align 8
  store i64 %v0_19b7, i64* %r13.global-to-local, align 8
  store i64 %v0_19b2, i64* %r14.global-to-local, align 8
  store i64 %v0_19b0, i64* %r15.global-to-local, align 8
  ret i64 %v2_1a306

dec_label_pc_1a58.loopexit:                       ; preds = %dec_label_pc_1a28
  store i64 %v0_19c3, i64* @rdi, align 8
  store i64 %v2_1a306, i64* @rax, align 8
  store i64 %v17_1a1b, i64* @rdx, align 8
  store i64 %v0_1a28, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1a58

dec_label_pc_1a58:                                ; preds = %dec_label_pc_1a58.loopexit, %dec_label_pc_1a14
  store i64 4294967295, i64* @rax, align 8
  store i64 %v0_19bf, i64* @rbx, align 8
  store i64 %v0_19be, i64* %rbp.global-to-local, align 8
  store i64 %v0_19b9, i64* %r12.global-to-local, align 8
  store i64 %v0_19b7, i64* %r13.global-to-local, align 8
  store i64 %v0_19b2, i64* %r14.global-to-local, align 8
  store i64 %v0_19b0, i64* %r15.global-to-local, align 8
  ret i64 4294967295
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState10min_expandEJiiii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1a70:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1a70 = load i64, i64* %r15.global-to-local, align 8
  %v0_1a72 = load i64, i64* %r14.global-to-local, align 8
  %v0_1a74 = load i64, i64* @rdx, align 8
  store i64 %v0_1a74, i64* %r15.global-to-local, align 8
  %v0_1a77 = load i64, i64* %r13.global-to-local, align 8
  %v0_1a79 = load i64, i64* %r12.global-to-local, align 8
  %v0_1a7b = load i64, i64* @rcx, align 8
  store i64 %v0_1a7b, i64* %r13.global-to-local, align 8
  %v0_1a7e = load i64, i64* %rbp.global-to-local, align 8
  %v0_1a7f = load i64, i64* @rbx, align 8
  %v0_1a80 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1a80, i64* %rbp.global-to-local, align 8
  %v0_1a82 = load i64, i64* @rdi, align 8
  store i64 %v0_1a82, i64* @rbx, align 8
  %v1_1a85 = add i64 %v0_1a7b, 1
  store i64 %v1_1a85, i64* %r14.global-to-local, align 8
  %v1_1a90 = add i64 %v0_1a82, 8
  %v2_1a90 = inttoptr i64 %v1_1a90 to i64*
  store i64 %v0_1a82, i64* @rax, align 8
  store i64 %v1_1a85, i64* @rdx, align 8
  %v1_1ad7 = trunc i64 %v0_1a82 to i32
  %v11_1ad7 = icmp eq i32 %v1_1ad7, -1
  store i64 %v0_1a82, i64* %r12.global-to-local, align 8
  br i1 %v11_1ad7, label %dec_label_pc_1a90, label %dec_label_pc_1adf

dec_label_pc_1a90:                                ; preds = %dec_label_pc_1a70, %dec_label_pc_1ac6
  %v0_1ac6258 = phi i64 [ %v17_1ac6, %dec_label_pc_1ac6 ], [ %v0_1a80, %dec_label_pc_1a70 ]
  %v3_1a90 = load i64, i64* %v2_1a90, align 8
  store i64 %v3_1a90, i64* @rdi, align 8
  %v1_1a94 = inttoptr i64 %v3_1a90 to i64*
  %v2_1a94 = load i64, i64* %v1_1a94, align 8
  store i64 %v2_1a94, i64* @rax, align 8
  %v5_1a9f = icmp slt i64 %v0_1ac6258, %v2_1a94
  br i1 %v5_1a9f, label %dec_label_pc_1aa1, label %dec_label_pc_1adf

dec_label_pc_1aa1:                                ; preds = %dec_label_pc_1a90
  %v3_1aa1 = load i64, i64* %v2_1a90, align 8
  store i64 %v3_1aa1, i64* @rdi, align 8
  store i64 %v0_1ac6258, i64* %rsi.global-to-local, align 8
  %v1_1aa7 = inttoptr i64 %v3_1aa1 to i64*
  %v2_1aa7 = load i64, i64* %v1_1aa7, align 8
  store i64 %v2_1aa7, i64* @rax, align 8
  store i64 %v0_1a74, i64* @rdx, align 8
  store i64 %v2_1aa7, i64* %rsi.global-to-local, align 8
  store i64 %v0_1a82, i64* @rdi, align 8
  %v4_1ac2 = trunc i64 %v2_1aa7 to i8
  %v5_1ac2 = icmp eq i8 %v4_1ac2, 0
  br i1 %v5_1ac2, label %dec_label_pc_1adf, label %dec_label_pc_1ac6

dec_label_pc_1ac6:                                ; preds = %dec_label_pc_1aa1
  %v2_1ac6 = add i64 %v0_1ac6258, 1
  %v17_1ac6 = and i64 %v2_1ac6, 4294967295
  store i64 %v17_1ac6, i64* %rbp.global-to-local, align 8
  store i64 %v0_1a82, i64* @rax, align 8
  store i64 %v1_1a85, i64* @rdx, align 8
  store i64 %v17_1ac6, i64* %rsi.global-to-local, align 8
  store i64 %v0_1a82, i64* @rdi, align 8
  store i64 %v0_1a82, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_1a90

dec_label_pc_1adf:                                ; preds = %dec_label_pc_1aa1, %dec_label_pc_1a90, %dec_label_pc_1a70
  store i64 %v0_1a82, i64* @rax, align 8
  store i64 %v0_1a7f, i64* @rbx, align 8
  store i64 %v0_1a7e, i64* %rbp.global-to-local, align 8
  store i64 %v0_1a79, i64* %r12.global-to-local, align 8
  store i64 %v0_1a77, i64* %r13.global-to-local, align 8
  store i64 %v0_1a72, i64* %r14.global-to-local, align 8
  store i64 %v0_1a70, i64* %r15.global-to-local, align 8
  ret i64 %v0_1a82
}

define i64 @"_ZN3org4luaj3vm23lib13StringLib$len4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1b00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm23lib19StringLib$GMatchAux6invokeEJPNS1_7VarargsES5_"(i64 %arg1) local_unnamed_addr {
dec_label_pc_1b30:
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_1b30 = load i64, i64* @rdi, align 8
  %v1_1b30 = add i64 %v0_1b30, 40
  %v2_1b30 = inttoptr i64 %v1_1b30 to i32*
  %v3_1b30 = load i32, i32* %v2_1b30, align 4
  %v4_1b30 = zext i32 %v3_1b30 to i64
  store i64 %v4_1b30, i64* @rax, align 8
  %v1_1b33 = add i64 %v0_1b30, 24
  %v2_1b33 = inttoptr i64 %v1_1b33 to i32*
  %v3_1b33 = load i32, i32* %v2_1b33, align 4
  %v5_1b36 = sext i32 %v3_1b33 to i64
  %v6_1b36 = icmp slt i64 %v5_1b36, %v4_1b30
  br i1 %v6_1b36, label %dec_label_pc_1b99, label %dec_label_pc_1b38

dec_label_pc_1b38:                                ; preds = %dec_label_pc_1b30
  %v0_1b38 = load i64, i64* @rbx, align 8
  store i64 %v0_1b38, i64* %stack_var_-8, align 8
  store i64 %v0_1b30, i64* @rbx, align 8
  br label %dec_label_pc_1b4e

dec_label_pc_1b40:                                ; preds = %dec_label_pc_1b4e
  %v2_1b43 = add i32 %v3_1b40, 1
  %v17_1b43 = zext i32 %v2_1b43 to i64
  store i64 %v17_1b43, i64* @rax, align 8
  %v1_1b46 = add i64 %v0_1b46, 24
  %v2_1b46 = inttoptr i64 %v1_1b46 to i32*
  %v3_1b46 = load i32, i32* %v2_1b46, align 4
  store i32 %v2_1b43, i32* %v2_1b5e, align 4
  %v5_1b4c = sext i32 %v3_1b46 to i64
  %v6_1b4c = icmp slt i64 %v5_1b4c, %v17_1b43
  br i1 %v6_1b4c, label %dec_label_pc_1b90, label %dec_label_pc_1b40.dec_label_pc_1b4e_crit_edge

dec_label_pc_1b40.dec_label_pc_1b4e_crit_edge:    ; preds = %dec_label_pc_1b40
  %v0_1b4e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_1b4e

dec_label_pc_1b4e:                                ; preds = %dec_label_pc_1b40.dec_label_pc_1b4e_crit_edge, %dec_label_pc_1b38
  %v0_1b46 = phi i64 [ %v0_1b4e.pre, %dec_label_pc_1b40.dec_label_pc_1b4e_crit_edge ], [ %v0_1b30, %dec_label_pc_1b38 ]
  %v1_1b4e = add i64 %v0_1b46, 32
  %v2_1b4e = inttoptr i64 %v1_1b4e to i64*
  %v3_1b4e = load i64, i64* %v2_1b4e, align 8
  store i64 %v3_1b4e, i64* @rdi, align 8
  %v1_1b52 = inttoptr i64 %v3_1b4e to i64*
  %v2_1b52 = load i64, i64* %v1_1b52, align 8
  store i64 %v2_1b52, i64* @rax, align 8
  %v3_1b58 = load i64, i64* %v2_1b4e, align 8
  store i64 %v3_1b58, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v1_1b5e = add i64 %v0_1b46, 40
  %v2_1b5e = inttoptr i64 %v1_1b5e to i32*
  %v1_1b61 = inttoptr i64 %v3_1b58 to i64*
  %v2_1b61 = load i64, i64* %v1_1b61, align 8
  store i64 %v2_1b61, i64* @rax, align 8
  %v4_1b67 = trunc i64 %v2_1b61 to i32
  %v6_1b67 = icmp slt i32 %v4_1b67, 0
  %v3_1b40 = load i32, i32* %v2_1b5e, align 4
  br i1 %v6_1b67, label %dec_label_pc_1b40, label %dec_label_pc_1b6b

dec_label_pc_1b6b:                                ; preds = %dec_label_pc_1b4e
  %v4_1b40 = zext i32 %v3_1b40 to i64
  store i64 %v4_1b40, i64* @rdx, align 8
  %v3_1b6e = load i64, i64* %v2_1b4e, align 8
  store i64 %v3_1b6e, i64* @rdi, align 8
  %v1_1b72 = add i64 %v2_1b61, 1
  store i64 %v1_1b72, i64* @rcx, align 8
  %v14_1b7a = icmp eq i32 %v4_1b67, %v3_1b40
  %v1_1b7f = icmp eq i1 %v14_1b7a, false
  %v6_1b7f.v = select i1 %v1_1b7f, i64 %v2_1b61, i64 %v1_1b72
  %v1_1b82 = trunc i64 %v6_1b7f.v to i32
  store i32 %v1_1b82, i32* %v2_1b5e, align 4
  %v0_1b85 = load i64, i64* @rax, align 8
  store i64 %v0_1b85, i64* @rcx, align 8
  %v2_1b8b = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_1b8b, i64* @rbx, align 8
  ret i64 %v0_1b85

dec_label_pc_1b90:                                ; preds = %dec_label_pc_1b40
  %v0_1b90 = load i64, i64* inttoptr (i64 7063 to i64*), align 8
  store i64 %v0_1b90, i64* @rax, align 8
  %v2_1b97 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_1b97, i64* @rbx, align 8
  ret i64 %v0_1b90

dec_label_pc_1b99:                                ; preds = %dec_label_pc_1b30
  ret i64 %v4_1b30
}

define i64 @function_1ba0() local_unnamed_addr {
dec_label_pc_1ba0:
  %v0_1ba0 = load i64, i64* @rax, align 8
  ret i64 %v0_1ba0
}

define i64 @"_ZN3org4luaj3vm23lib12BaseLib$next6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1bb0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 1
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$loadfile6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1c00:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1c00 = load i64, i64* %r13.global-to-local, align 8
  %v0_1c02 = load i64, i64* %r12.global-to-local, align 8
  %v0_1c04 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1c05 = load i64, i64* @rbx, align 8
  %v0_1c06 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1c06, i64* @rbx, align 8
  %v0_1c09 = load i64, i64* @rdi, align 8
  store i64 %v0_1c09, i64* %rbp.global-to-local, align 8
  store i64 %v0_1c06, i64* @rdi, align 8
  store i64 %v0_1c06, i64* @rax, align 8
  %v4_1c21 = trunc i64 %v0_1c06 to i8
  %v5_1c21 = icmp eq i8 %v4_1c21, 0
  store i64 1, i64* %rsi.global-to-local, align 8
  br i1 %v5_1c21, label %dec_label_pc_1cc0, label %dec_label_pc_1d26

dec_label_pc_1cc0:                                ; preds = %dec_label_pc_1c00
  store i64 1, i64* @rax, align 8
  store i64 %v0_1c06, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1d26

dec_label_pc_1d26:                                ; preds = %dec_label_pc_1cc0, %dec_label_pc_1c00
  store i64 1, i64* @rax, align 8
  %v0_1c31 = load i64, i64* inttoptr (i64 7224 to i64*), align 8
  store i64 %v0_1c31, i64* @rcx, align 8
  store i64 1, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_1c06, i64* @rdi, align 8
  store i64 1, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  %v0_1cec = load i64, i64* inttoptr (i64 7411 to i64*), align 8
  store i64 %v0_1cec, i64* @rdx, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_1c06, i64* @rdi, align 8
  store i64 1, i64* %r12.global-to-local, align 8
  %v1_1d04 = add i64 %v0_1c09, 24
  %v2_1d04 = inttoptr i64 %v1_1d04 to i64*
  %v3_1d04 = load i64, i64* %v2_1d04, align 8
  store i64 %v3_1d04, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v0_1c06, i64* @rdi, align 8
  %v1_1d10 = add i64 %v3_1d04, 24
  %v2_1d10 = inttoptr i64 %v1_1d10 to i64*
  %v3_1d10 = load i64, i64* %v2_1d10, align 8
  store i64 %v3_1d10, i64* @rdx, align 8
  store i64 3, i64* @rax, align 8
  %v3_1d26 = load i64, i64* %v2_1d04, align 8
  store i64 %v3_1d26, i64* @rdi, align 8
  store i64 3, i64* @rcx, align 8
  store i64 1, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_1c05, i64* @rbx, align 8
  store i64 %v0_1c04, i64* %rbp.global-to-local, align 8
  store i64 %v0_1c02, i64* %r12.global-to-local, align 8
  store i64 %v0_1c00, i64* %r13.global-to-local, align 8
  ret i64 3
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawget4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1d50:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rcx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm23lib20BaseLib$getmetatable4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1d80:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1d80 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_1d8d = icmp eq i64 %arg2, 0
  br i1 %v1_1d8d, label %dec_label_pc_1dc0, label %dec_label_pc_1d92

dec_label_pc_1d92:                                ; preds = %dec_label_pc_1d80
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_1d98 = load i64, i64* inttoptr (i64 7583 to i64*), align 8
  store i64 %v0_1d98, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %v0_1d80, i64* @rbx, align 8
  ret i64 %arg2

dec_label_pc_1dc0:                                ; preds = %dec_label_pc_1d80
  %v0_1dc0 = load i64, i64* inttoptr (i64 7623 to i64*), align 8
  store i64 %v0_1dc0, i64* @rax, align 8
  ret i64 %v0_1dc0
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$inext6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1dd0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 1
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$tonumber4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1e20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$print6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1e40:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1e40 = load i64, i64* %r15.global-to-local, align 8
  %v0_1e42 = load i64, i64* %r14.global-to-local, align 8
  %v0_1e44 = load i64, i64* %r13.global-to-local, align 8
  %v0_1e46 = load i64, i64* %r12.global-to-local, align 8
  %v0_1e48 = load i64, i64* @rdi, align 8
  store i64 %v0_1e48, i64* %r13.global-to-local, align 8
  %v0_1e4b = load i64, i64* %rbp.global-to-local, align 8
  %v0_1e4c = load i64, i64* @rbx, align 8
  %v0_1e4d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1e4d, i64* %r12.global-to-local, align 8
  %v1_1e54 = add i64 %v0_1e48, 32
  %v2_1e54 = inttoptr i64 %v1_1e54 to i64*
  %v3_1e54 = load i64, i64* %v2_1e54, align 8
  store i64 %v3_1e54, i64* @rax, align 8
  %v0_1e58 = load i64, i64* inttoptr (i64 7775 to i64*), align 8
  store i64 %v0_1e58, i64* %rsi.global-to-local, align 8
  %v1_1e5f = add i64 %v3_1e54, 24
  %v2_1e5f = inttoptr i64 %v1_1e5f to i64*
  %v3_1e5f = load i64, i64* %v2_1e5f, align 8
  store i64 %v3_1e5f, i64* @rdi, align 8
  %v1_1e63 = inttoptr i64 %v3_1e5f to i64*
  %v2_1e63 = load i64, i64* %v1_1e63, align 8
  store i64 %v2_1e63, i64* %r14.global-to-local, align 8
  store i64 %v0_1e58, i64* @rax, align 8
  store i64 %v0_1e4d, i64* @rdi, align 8
  %v4_1e79 = trunc i64 %v0_1e58 to i32
  %tmp257 = icmp slt i32 %v4_1e79, 1
  br i1 %tmp257, label %dec_label_pc_1f06, label %dec_label_pc_1e81

dec_label_pc_1e81:                                ; preds = %dec_label_pc_1e40
  store i64 %v0_1e58, i64* %r15.global-to-local, align 8
  store i64 1, i64* @rbx, align 8
  br label %dec_label_pc_1eaf.outer

dec_label_pc_1e90:                                ; preds = %dec_label_pc_1eaf
  %v3_1f01 = trunc i64 %v2_1eb8 to i32
  %v9_1e93 = icmp sgt i32 %v3_1f01, 1
  br i1 %v9_1e93, label %dec_label_pc_1e95, label %dec_label_pc_1eaf

dec_label_pc_1e95:                                ; preds = %dec_label_pc_1e90
  %v3_1e95 = load i64, i64* %v2_1e54, align 8
  store i64 %v3_1e95, i64* @rax, align 8
  store i64 9, i64* %rsi.global-to-local, align 8
  %v1_1e9e = add i64 %v3_1e95, 24
  %v2_1e9e = inttoptr i64 %v1_1e9e to i64*
  %v3_1e9e = load i64, i64* %v2_1e9e, align 8
  store i64 %v3_1e9e, i64* @rax, align 8
  %v1_1ea2 = add i64 %v3_1e9e, 48
  %v2_1ea2 = inttoptr i64 %v1_1ea2 to i64*
  %v3_1ea2 = load i64, i64* %v2_1ea2, align 8
  store i64 %v3_1ea2, i64* @rdi, align 8
  %v1_1ea6 = inttoptr i64 %v3_1ea2 to i64*
  %v2_1ea6 = load i64, i64* %v1_1ea6, align 8
  store i64 %v2_1ea6, i64* @rax, align 8
  br label %dec_label_pc_1eaf.outer

dec_label_pc_1eaf.outer:                          ; preds = %dec_label_pc_1e95, %dec_label_pc_1e81
  %v0_1eb3.ph = phi i64 [ %v17_1eb8, %dec_label_pc_1e95 ], [ 1, %dec_label_pc_1e81 ]
  %v2_1eaf.ph = phi i64 [ 9, %dec_label_pc_1e95 ], [ %v0_1e58, %dec_label_pc_1e81 ]
  br label %dec_label_pc_1eaf

dec_label_pc_1eaf:                                ; preds = %dec_label_pc_1eaf.outer, %dec_label_pc_1e90
  %v0_1eb3 = phi i64 [ %v17_1eb8, %dec_label_pc_1e90 ], [ %v0_1eb3.ph, %dec_label_pc_1eaf.outer ]
  store i64 %v2_1eaf.ph, i64* @rax, align 8
  %v2_1eb8 = add nuw nsw i64 %v0_1eb3, 1
  %v17_1eb8 = and i64 %v2_1eb8, 4294967295
  store i64 %v17_1eb8, i64* @rbx, align 8
  store i64 %v2_1eaf.ph, i64* %rsi.global-to-local, align 8
  store i64 %v2_1eaf.ph, i64* @rdx, align 8
  store i64 %v2_1eaf.ph, i64* @rdi, align 8
  %v3_1ed9 = load i64, i64* %v2_1e54, align 8
  store i64 %v3_1ed9, i64* @rdx, align 8
  store i64 %v2_1eaf.ph, i64* @rdi, align 8
  %v1_1ee0 = add i64 %v3_1ed9, 24
  %v2_1ee0 = inttoptr i64 %v1_1ee0 to i64*
  %v3_1ee0 = load i64, i64* %v2_1ee0, align 8
  store i64 %v3_1ee0, i64* @rdx, align 8
  %v1_1ee4 = add i64 %v3_1ee0, 48
  %v2_1ee4 = inttoptr i64 %v1_1ee4 to i64*
  %v3_1ee4 = load i64, i64* %v2_1ee4, align 8
  store i64 %v3_1ee4, i64* %rbp.global-to-local, align 8
  store i64 %v2_1eaf.ph, i64* @rdx, align 8
  %v1_1ef1 = inttoptr i64 %v3_1ee4 to i64*
  %v2_1ef1 = load i64, i64* %v1_1ef1, align 8
  store i64 %v2_1ef1, i64* @rdx, align 8
  store i64 %v2_1eaf.ph, i64* %rsi.global-to-local, align 8
  store i64 %v3_1ee4, i64* @rdi, align 8
  %v5_1f04 = icmp slt i64 %v0_1e58, %v17_1eb8
  br i1 %v5_1f04, label %dec_label_pc_1f06.loopexit, label %dec_label_pc_1e90

dec_label_pc_1f06.loopexit:                       ; preds = %dec_label_pc_1eaf
  br label %dec_label_pc_1f06

dec_label_pc_1f06:                                ; preds = %dec_label_pc_1f06.loopexit, %dec_label_pc_1e40
  %v3_1f06 = load i64, i64* %v2_1e54, align 8
  store i64 %v3_1f06, i64* @rax, align 8
  store i64 10, i64* %rsi.global-to-local, align 8
  %v1_1f0f = add i64 %v3_1f06, 24
  %v2_1f0f = inttoptr i64 %v1_1f0f to i64*
  %v3_1f0f = load i64, i64* %v2_1f0f, align 8
  store i64 %v3_1f0f, i64* @rax, align 8
  %v1_1f13 = add i64 %v3_1f0f, 48
  %v2_1f13 = inttoptr i64 %v1_1f13 to i64*
  %v3_1f13 = load i64, i64* %v2_1f13, align 8
  store i64 %v3_1f13, i64* @rdi, align 8
  %v1_1f17 = inttoptr i64 %v3_1f13 to i64*
  %v2_1f17 = load i64, i64* %v1_1f17, align 8
  store i64 %v2_1f17, i64* @rax, align 8
  %v0_1f20 = load i64, i64* inttoptr (i64 7975 to i64*), align 8
  store i64 %v0_1f20, i64* @rax, align 8
  store i64 %v0_1e4c, i64* @rbx, align 8
  store i64 %v0_1e4b, i64* %rbp.global-to-local, align 8
  store i64 %v0_1e46, i64* %r12.global-to-local, align 8
  store i64 %v0_1e44, i64* %r13.global-to-local, align 8
  store i64 %v0_1e42, i64* %r14.global-to-local, align 8
  store i64 %v0_1e40, i64* %r15.global-to-local, align 8
  ret i64 %v0_1f20
}

define i64 @_ZN3org4luaj3vm23lib14TwoArgFunction4callEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f40:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f44 = load i64, i64* inttoptr (i64 8011 to i64*), align 8
  %v2_1f4b = load i64, i64* @rdi, align 8
  store i64 %v2_1f4b, i64* @rax, align 8
  store i64 %v0_1f44, i64* @rdx, align 8
  ret i64 %v2_1f4b
}

define i64 @_ZN3org4luaj3vm23lib14TwoArgFunction4callEJPNS1_8LuaValueES5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f60:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1f64 = load i64, i64* @rdi, align 8
  store i64 %v2_1f64, i64* @rax, align 8
  %v0_1f67 = load i64, i64* inttoptr (i64 8046 to i64*), align 8
  store i64 %v0_1f67, i64* @rdx, align 8
  ret i64 %v2_1f64
}

define i64 @_ZN3org4luaj3vm23lib14TwoArgFunction4callEJPNS1_8LuaValueES5_S5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f80:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1f84 = load i64, i64* @rdi, align 8
  store i64 %v2_1f84, i64* @rax, align 8
  ret i64 %v2_1f84
}

define i64 @_ZN3org4luaj3vm23lib14TwoArgFunction6invokeEJPNS1_7VarargsES5_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1fa0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rcx, align 8
  store i64 %arg2, i64* @rdx, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm23lib14OneArgFunction4callEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_1fe0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1fe4 = load i64, i64* @rdi, align 8
  store i64 %v2_1fe4, i64* @rax, align 8
  ret i64 %v2_1fe4
}

define i64 @_ZN3org4luaj3vm23lib14OneArgFunction4callEJPNS1_8LuaValueES5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2000:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2004 = load i64, i64* @rdi, align 8
  store i64 %v2_2004, i64* @rax, align 8
  ret i64 %v2_2004
}

define i64 @_ZN3org4luaj3vm23lib14OneArgFunction4callEJPNS1_8LuaValueES5_S5_S5_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2020:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2024 = load i64, i64* @rdi, align 8
  store i64 %v2_2024, i64* @rax, align 8
  ret i64 %v2_2024
}

define i64 @_ZN3org4luaj3vm23lib14OneArgFunction6invokeEJPNS1_7VarargsES5_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2040:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdx, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26Buffer8setvalueEJPS2_PNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2060:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2060 = load i64, i64* inttoptr (i64 8295 to i64*), align 8
  store i64 %v0_2060, i64* @rdx, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_206a = add i64 %arg1, 16
  %v2_206a = inttoptr i64 %v1_206a to i32*
  store i32 0, i32* %v2_206a, align 4
  %v0_2071 = load i64, i64* @rdi, align 8
  %v1_2071 = add i64 %v0_2071, 20
  %v2_2071 = inttoptr i64 %v1_2071 to i32*
  store i32 0, i32* %v2_2071, align 4
  %v0_2078 = load i64, i64* %rsi.global-to-local, align 8
  %v1_2078 = load i64, i64* @rdi, align 8
  %v2_2078 = add i64 %v1_2078, 24
  %v3_2078 = inttoptr i64 %v2_2078 to i64*
  store i64 %v0_2078, i64* %v3_2078, align 8
  %v0_207c = load i64, i64* @rdx, align 8
  %v1_207c = load i64, i64* @rdi, align 8
  %v2_207c = add i64 %v1_207c, 8
  %v3_207c = inttoptr i64 %v2_207c to i64*
  store i64 %v0_207c, i64* %v3_207c, align 8
  %v0_2080 = load i64, i64* @rax, align 8
  ret i64 %v0_2080
}

define i64 @_ZN3org4luaj3vm26LuaNil9tojstringEJPN4java4lang6StringEv() local_unnamed_addr {
dec_label_pc_2090:
  %v0_2090 = load i64, i64* inttoptr (i64 8343 to i64*), align 8
  store i64 %v0_2090, i64* @rax, align 8
  ret i64 %v0_2090
}

define i64 @"_ZN3org4luaj3vm26LuaNil4not$EJPNS1_8LuaValueEv"() local_unnamed_addr {
dec_label_pc_20a0:
  %v0_20a0 = load i64, i64* inttoptr (i64 8359 to i64*), align 8
  store i64 %v0_20a0, i64* @rax, align 8
  ret i64 %v0_20a0
}

define i64 @_ZN3org4luaj3vm26LuaNil12getmetatableEJPNS1_8LuaValueEv() local_unnamed_addr {
dec_label_pc_20b0:
  %v0_20b0 = load i64, i64* inttoptr (i64 8375 to i64*), align 8
  store i64 %v0_20b0, i64* @rax, align 8
  ret i64 %v0_20b0
}

define i64 @_ZN3org4luaj3vm26LuaNil11checknotnilEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_20c0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_20c4 = load i64, i64* @rdi, align 8
  store i64 %v2_20c4, i64* @rax, align 8
  ret i64 %v2_20c4
}

define i64 @_ZN3org4luaj3vm26LuaNil10optbooleanEJbb(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil10optclosureEJPNS1_10LuaClosureES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil9optdoubleEJdd() local_unnamed_addr {
dec_label_pc_2100:
  %v0_2100 = load i64, i64* @rax, align 8
  ret i64 %v0_2100
}

define i64 @_ZN3org4luaj3vm26LuaNil11optfunctionEJPNS1_11LuaFunctionES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2110:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil6optintEJii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2120:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil10optintegerEJPNS1_10LuaIntegerES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2130:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil7optlongEJxx(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2140:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil9optnumberEJPNS1_9LuaNumberES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2150:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil8opttableEJPNS1_8LuaTableES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2160:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil9optthreadEJPNS1_9LuaThreadES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2170:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil10optjstringEJPN4java4lang6StringES6_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2180:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil9optstringEJPNS1_9LuaStringES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2190:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil11optuserdataEJPN4java4lang6ObjectES6_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_21a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil11optuserdataEJPN4java4lang6ObjectEPNS4_5ClassES6_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_21b0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg3, i64* @rax, align 8
  ret i64 %arg3
}

define i64 @_ZN3org4luaj3vm215TailcallVarargs3argEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_21c0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_21c0 = load i64, i64* @rbx, align 8
  %v0_21c1 = load i64, i64* @rdi, align 8
  store i64 %v0_21c1, i64* @rbx, align 8
  %v1_21c8 = add i64 %v0_21c1, 24
  %v2_21c8 = inttoptr i64 %v1_21c8 to i64*
  %v3_21c8 = load i64, i64* %v2_21c8, align 8
  store i64 %v3_21c8, i64* @rdi, align 8
  %v1_21cc = icmp eq i64 %v3_21c8, 0
  br i1 %v1_21cc, label %dec_label_pc_21e0, label %dec_label_pc_21d1

dec_label_pc_21d1:                                ; preds = %dec_label_pc_21c0
  %v1_21d1 = inttoptr i64 %v3_21c8 to i64*
  %v2_21d1 = load i64, i64* %v1_21d1, align 8
  store i64 %v2_21d1, i64* @rax, align 8
  store i64 %v0_21c0, i64* @rbx, align 8
  ret i64 %v2_21d1

dec_label_pc_21e0:                                ; preds = %dec_label_pc_21c0
  store i64 0, i64* @rax, align 8
  store i64 %v0_21c1, i64* @rdi, align 8
  %v3_21ed = load i64, i64* %v2_21c8, align 8
  store i64 %v3_21ed, i64* @rdi, align 8
  %v1_21f5 = inttoptr i64 %v3_21ed to i64*
  %v2_21f5 = load i64, i64* %v1_21f5, align 8
  store i64 %v2_21f5, i64* @rax, align 8
  store i64 %v0_21c0, i64* @rbx, align 8
  ret i64 %v2_21f5
}

define i64 @_ZN3org4luaj3vm215TailcallVarargs4arg1EJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2210:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2210 = load i64, i64* @rbx, align 8
  %v0_2211 = load i64, i64* @rdi, align 8
  store i64 %v0_2211, i64* @rbx, align 8
  %v1_2214 = add i64 %v0_2211, 24
  %v2_2214 = inttoptr i64 %v1_2214 to i64*
  %v3_2214 = load i64, i64* %v2_2214, align 8
  store i64 %v3_2214, i64* @rdi, align 8
  %v1_2218 = icmp eq i64 %v3_2214, 0
  br i1 %v1_2218, label %dec_label_pc_2228, label %dec_label_pc_221d

dec_label_pc_221d:                                ; preds = %dec_label_pc_2210
  %v1_221d = inttoptr i64 %v3_2214 to i64*
  %v2_221d = load i64, i64* %v1_221d, align 8
  store i64 %v2_221d, i64* @rax, align 8
  store i64 %v0_2210, i64* @rbx, align 8
  ret i64 %v2_221d

dec_label_pc_2228:                                ; preds = %dec_label_pc_2210
  store i64 0, i64* @rax, align 8
  store i64 %v0_2211, i64* @rdi, align 8
  %v3_2231 = load i64, i64* %v2_2214, align 8
  store i64 %v3_2231, i64* @rdi, align 8
  %v1_2235 = inttoptr i64 %v3_2231 to i64*
  %v2_2235 = load i64, i64* %v1_2235, align 8
  store i64 %v2_2235, i64* @rax, align 8
  store i64 %v0_2210, i64* @rbx, align 8
  ret i64 %v2_2235
}

define i64 @_ZN3org4luaj3vm215TailcallVarargs4nargEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2240:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2240 = load i64, i64* @rbx, align 8
  %v0_2241 = load i64, i64* @rdi, align 8
  store i64 %v0_2241, i64* @rbx, align 8
  %v1_2244 = add i64 %v0_2241, 24
  %v2_2244 = inttoptr i64 %v1_2244 to i64*
  %v3_2244 = load i64, i64* %v2_2244, align 8
  store i64 %v3_2244, i64* @rdi, align 8
  %v1_2248 = icmp eq i64 %v3_2244, 0
  br i1 %v1_2248, label %dec_label_pc_2258, label %dec_label_pc_224d

dec_label_pc_224d:                                ; preds = %dec_label_pc_2240
  %v1_224d = inttoptr i64 %v3_2244 to i64*
  %v2_224d = load i64, i64* %v1_224d, align 8
  store i64 %v2_224d, i64* @rax, align 8
  store i64 %v0_2240, i64* @rbx, align 8
  ret i64 %v2_224d

dec_label_pc_2258:                                ; preds = %dec_label_pc_2240
  store i64 0, i64* @rax, align 8
  store i64 %v0_2241, i64* @rdi, align 8
  %v3_2261 = load i64, i64* %v2_2244, align 8
  store i64 %v3_2261, i64* @rdi, align 8
  %v1_2265 = inttoptr i64 %v3_2261 to i64*
  %v2_2265 = load i64, i64* %v1_2265, align 8
  store i64 %v2_2265, i64* @rax, align 8
  store i64 %v0_2240, i64* @rbx, align 8
  ret i64 %v2_2265
}

define i64 @_ZN3org4luaj3vm215TailcallVarargs7subargsEJPNS1_7VarargsEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2270:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2270 = load i64, i64* @rbx, align 8
  %v0_2271 = load i64, i64* @rdi, align 8
  store i64 %v0_2271, i64* @rbx, align 8
  %v1_2278 = add i64 %v0_2271, 24
  %v2_2278 = inttoptr i64 %v1_2278 to i64*
  %v3_2278 = load i64, i64* %v2_2278, align 8
  store i64 %v3_2278, i64* @rdi, align 8
  %v1_227c = icmp eq i64 %v3_2278, 0
  br i1 %v1_227c, label %dec_label_pc_2290, label %dec_label_pc_2281

dec_label_pc_2281:                                ; preds = %dec_label_pc_2270
  %v1_2281 = inttoptr i64 %v3_2278 to i64*
  %v2_2281 = load i64, i64* %v1_2281, align 8
  store i64 %v2_2281, i64* @rax, align 8
  store i64 %v0_2270, i64* @rbx, align 8
  ret i64 %v2_2281

dec_label_pc_2290:                                ; preds = %dec_label_pc_2270
  store i64 0, i64* @rax, align 8
  store i64 %v0_2271, i64* @rdi, align 8
  %v3_229d = load i64, i64* %v2_2278, align 8
  store i64 %v3_229d, i64* @rdi, align 8
  %v1_22a5 = inttoptr i64 %v3_229d to i64*
  %v2_22a5 = load i64, i64* %v1_22a5, align 8
  store i64 %v2_22a5, i64* @rax, align 8
  store i64 %v0_2270, i64* @rbx, align 8
  ret i64 %v2_22a5
}

define i64 @_ZN3org4luaj3vm28LuaValue6tobyteEJcv() local_unnamed_addr {
dec_label_pc_22c0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6tocharEJwv() local_unnamed_addr {
dec_label_pc_22d0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i128 @_ZN3org4luaj3vm28LuaValue8todoubleEJdv() local_unnamed_addr {
dec_label_pc_22e0:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_22e0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_22e0 = call i128 @__asm_pxor(i128 %v0_22e0, i128 %v0_22e0)
  store i128 %v2_22e0, i128* %xmm0.global-to-local, align 8
  ret i128 %v2_22e0
}

define i128 @_ZN3org4luaj3vm28LuaValue7tofloatEJfv() local_unnamed_addr {
dec_label_pc_22f0:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_22f0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_22f0 = call i128 @__asm_pxor(i128 %v0_22f0, i128 %v0_22f0)
  store i128 %v2_22f0, i128* %xmm0.global-to-local, align 8
  ret i128 %v2_22f0
}

define i64 @_ZN3org4luaj3vm28LuaValue6tolongEJxv() local_unnamed_addr {
dec_label_pc_2300:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7toshortEJsv() local_unnamed_addr {
dec_label_pc_2310:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10touserdataEJPN4java4lang6ObjectEv() local_unnamed_addr {
dec_label_pc_2320:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10touserdataEJPN4java4lang6ObjectEPNS4_5ClassE() local_unnamed_addr {
dec_label_pc_2330:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8toStringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2340:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2344 = load i64, i64* @rdi, align 8
  store i64 %v2_2344, i64* @rax, align 8
  ret i64 %v2_2344
}

define i64 @_ZN3org4luaj3vm28LuaValue10optbooleanEJbb(i64 %arg1) local_unnamed_addr {
dec_label_pc_2360:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10optclosureEJPNS1_10LuaClosureES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2380:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9optdoubleEJdd(i64 %arg1) local_unnamed_addr {
dec_label_pc_23a0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_23a4 = load i64, i64* @rdi, align 8
  store i64 %v2_23a4, i64* @rax, align 8
  %v0_23b4 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_23b4 = call i128 @__asm_pxor(i128 %v0_23b4, i128 %v0_23b4)
  store i128 %v2_23b4, i128* %xmm0.global-to-local, align 8
  %v0_23bc = load i64, i64* @rax, align 8
  ret i64 %v0_23bc
}

define i64 @_ZN3org4luaj3vm28LuaValue11optfunctionEJPNS1_11LuaFunctionES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_23c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6optintEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_23e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10optintegerEJPNS1_10LuaIntegerES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2400:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7optlongEJxx(i64 %arg1) local_unnamed_addr {
dec_label_pc_2420:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9optnumberEJPNS1_9LuaNumberES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2440:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10optjstringEJPN4java4lang6StringES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2460:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9optstringEJPNS1_9LuaStringES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2480:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8opttableEJPNS1_8LuaTableES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_24a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9optthreadEJPNS1_9LuaThreadES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_24c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11optuserdataEJPN4java4lang6ObjectES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_24e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8optvalueEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2500:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaValue12checkbooleanEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2510:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12checkclosureEJPNS1_10LuaClosureEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2530:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11checkdoubleEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2550:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_2554 = load i64, i64* @rdi, align 8
  store i64 %v2_2554, i64* @rax, align 8
  %v0_2564 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2564 = call i128 @__asm_pxor(i128 %v0_2564, i128 %v0_2564)
  store i128 %v2_2564, i128* %xmm0.global-to-local, align 8
  %v0_256c = load i64, i64* @rax, align 8
  ret i64 %v0_256c
}

define i64 @_ZN3org4luaj3vm28LuaValue13checkfunctionEJPNS1_11LuaFunctionEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2570:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12checkglobalsEJPNS1_7GlobalsEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2590:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8checkintEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_25b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12checkintegerEJPNS1_10LuaIntegerEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_25d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9checklongEJxv(i64 %arg1) local_unnamed_addr {
dec_label_pc_25f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11checknumberEJPNS1_9LuaNumberEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2610:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12checkjstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2630:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11checkstringEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2650:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10checktableEJPNS1_8LuaTableEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2670:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11checkthreadEJPNS1_9LuaThreadEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2690:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue13checkuserdataEJPN4java4lang6ObjectEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_26b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue13checkuserdataEJPN4java4lang6ObjectEPNS4_5ClassE(i64 %arg1) local_unnamed_addr {
dec_label_pc_26d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawgetEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_26f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_26f4 = load i64, i64* @rdi, align 8
  store i64 %v2_26f4, i64* @rax, align 8
  ret i64 %v2_26f4
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawsetEJvPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2710:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2714 = load i64, i64* @rdi, align 8
  store i64 %v2_2714, i64* @rax, align 8
  ret i64 %v2_2714
}

define i64 @_ZN3org4luaj3vm28LuaValue10rawsetlistEJviPNS1_7VarargsE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2730:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2730 = load i64, i64* %r15.global-to-local, align 8
  %v0_2732 = load i64, i64* %r14.global-to-local, align 8
  %v0_2734 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2734, i64* %r15.global-to-local, align 8
  %v0_2737 = load i64, i64* %r13.global-to-local, align 8
  %v0_2739 = load i64, i64* %r12.global-to-local, align 8
  %v0_273b = load i64, i64* @rdi, align 8
  store i64 %v0_273b, i64* %r12.global-to-local, align 8
  %v0_273e = load i64, i64* %rbp.global-to-local, align 8
  %v0_273f = load i64, i64* @rbx, align 8
  %v0_2740 = load i64, i64* @rdx, align 8
  store i64 %v0_2740, i64* %rbp.global-to-local, align 8
  store i64 %v0_2740, i64* @rdi, align 8
  store i64 %v0_2740, i64* @rax, align 8
  %v4_2750 = trunc i64 %v0_2740 to i32
  %tmp249 = icmp slt i32 %v4_2750, 1
  br i1 %tmp249, label %dec_label_pc_278b, label %dec_label_pc_2754

dec_label_pc_2754:                                ; preds = %dec_label_pc_2730
  store i64 %v0_2740, i64* %r14.global-to-local, align 8
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_2760

dec_label_pc_2760:                                ; preds = %dec_label_pc_2760, %dec_label_pc_2754
  %v2_27865 = phi i64 [ %v17_2768, %dec_label_pc_2760 ], [ 0, %dec_label_pc_2754 ]
  %v2_2768 = add nuw nsw i64 %v2_27865, 1
  %v17_2768 = and i64 %v2_2768, 4294967295
  %v3_2786 = trunc i64 %v2_2768 to i32
  %v14_2786 = icmp eq i32 %v4_2750, %v3_2786
  %v1_2789 = icmp eq i1 %v14_2786, false
  br i1 %v1_2789, label %dec_label_pc_2760, label %dec_label_pc_278b.loopexit

dec_label_pc_278b.loopexit:                       ; preds = %dec_label_pc_2760
  %v3_2764.le = add i64 %v2_27865, %v0_2734
  store i64 %v0_2740, i64* @rax, align 8
  store i64 %v17_2768, i64* @rbx, align 8
  store i64 %v3_2764.le, i64* %r13.global-to-local, align 8
  store i64 %v3_2764.le, i64* %rsi.global-to-local, align 8
  store i64 %v0_273b, i64* @rdi, align 8
  store i64 %v0_2740, i64* @rcx, align 8
  br label %dec_label_pc_278b

dec_label_pc_278b:                                ; preds = %dec_label_pc_278b.loopexit, %dec_label_pc_2730
  store i64 %v0_273f, i64* @rbx, align 8
  store i64 %v0_273e, i64* %rbp.global-to-local, align 8
  store i64 %v0_2739, i64* %r12.global-to-local, align 8
  store i64 %v0_2737, i64* %r13.global-to-local, align 8
  store i64 %v0_2732, i64* %r14.global-to-local, align 8
  store i64 %v0_2730, i64* %r15.global-to-local, align 8
  ret i64 %v0_2740
}

define i64 @_ZN3org4luaj3vm28LuaValue7presizeEJvi(i64 %arg1) local_unnamed_addr {
dec_label_pc_27a0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_27a4 = load i64, i64* @rdi, align 8
  store i64 %v2_27a4, i64* @rax, align 8
  ret i64 %v2_27a4
}

define i64 @_ZN3org4luaj3vm28LuaValue5inextEJPNS1_7VarargsEPS2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_27c0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_27c4 = load i64, i64* @rdi, align 8
  store i64 %v2_27c4, i64* @rax, align 8
  ret i64 %v2_27c4
}

define i64 @_ZN3org4luaj3vm28LuaValue4loadEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27e0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_27e4 = load i64, i64* @rdi, align 8
  store i64 %v0_27e4, i64* @rdx, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue3argEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2800:
  store i64 %arg1, i64* @rdi, align 8
  %v1_2800 = trunc i64 %arg2 to i32
  %v11_2800 = icmp eq i32 %v1_2800, 1
  store i64 %arg1, i64* @rax, align 8
  %v1_2806 = icmp eq i1 %v11_2800, false
  %v3_2806 = load i64, i64* inttoptr (i64 10254 to i64*), align 8
  %v4_2806 = select i1 %v1_2806, i64 %v3_2806, i64 %arg1
  store i64 %v4_2806, i64* @rax, align 8
  ret i64 %v4_2806
}

define i64 @_ZN3org4luaj3vm28LuaValue12getmetatableEJPS2_v() local_unnamed_addr {
dec_label_pc_2810:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm28LuaValue12setmetatableEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2820:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2824 = load i64, i64* @rdi, align 8
  store i64 %v2_2824, i64* @rax, align 8
  ret i64 %v2_2824
}

define i64 @_ZN3org4luaj3vm28LuaValue4callEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_2840:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2841 = load i64, i64* @rdi, align 8
  store i64 %v2_2841, i64* @rax, align 8
  store i64 %v2_2841, i64* @rdx, align 8
  ret i64 %v2_2841
}

define i64 @_ZN3org4luaj3vm28LuaValue4callEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2860:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2865 = load i64, i64* @rdi, align 8
  store i64 %v0_2865, i64* @rax, align 8
  store i64 %v0_2865, i64* @rcx, align 8
  store i64 %arg2, i64* @rdx, align 8
  ret i64 %v0_2865
}

define i64 @_ZN3org4luaj3vm28LuaValue4callEJPS2_S3_S3_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2890:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2893 = load i64, i64* @rdx, align 8
  %v2_2897 = load i64, i64* @rdi, align 8
  store i64 %v2_2897, i64* @rax, align 8
  %v0_289d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2893, i64* @rcx, align 8
  store i64 %v0_289d, i64* @rdx, align 8
  store i64 %v2_2897, i64* %rsi.global-to-local, align 8
  ret i64 %v2_2897
}

define i64 @_ZN3org4luaj3vm28LuaValue6methodEJPS2_PN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_28d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_28d1 = load i64, i64* @rdi, align 8
  store i64 %v2_28d1, i64* @rax, align 8
  store i64 %v2_28d1, i64* @rdx, align 8
  ret i64 %v2_28d1
}

define i64 @_ZN3org4luaj3vm28LuaValue6methodEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_28f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_28f1 = load i64, i64* @rdi, align 8
  store i64 %v2_28f1, i64* @rax, align 8
  store i64 %v2_28f1, i64* @rdx, align 8
  ret i64 %v2_28f1
}

define i64 @_ZN3org4luaj3vm28LuaValue6methodEJPS2_PN4java4lang6StringES3_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2910:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2915 = load i64, i64* @rdi, align 8
  store i64 %v0_2915, i64* @rax, align 8
  store i64 %v0_2915, i64* @rcx, align 8
  ret i64 %v0_2915
}

define i64 @_ZN3org4luaj3vm28LuaValue6methodEJPS2_S3_S3_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2940:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2945 = load i64, i64* @rdi, align 8
  store i64 %v0_2945, i64* @rax, align 8
  store i64 %v0_2945, i64* @rcx, align 8
  ret i64 %v0_2945
}

define i64 @_ZN3org4luaj3vm28LuaValue6methodEJPS2_PN4java4lang6StringES3_S3_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2970:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_2977 = load i64, i64* @rdi, align 8
  store i64 %v2_2977, i64* @rax, align 8
  ret i64 %v2_2977
}

define i64 @_ZN3org4luaj3vm28LuaValue6methodEJPS2_S3_S3_S3_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_29b0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_29b7 = load i64, i64* @rdi, align 8
  store i64 %v2_29b7, i64* @rax, align 8
  ret i64 %v2_29b7
}

define i64 @_ZN3org4luaj3vm28LuaValue6invokeEJPNS1_7VarargsEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_29f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_29f4 = load i64, i64* @rdi, align 8
  store i64 %v2_29f4, i64* @rax, align 8
  ret i64 %v2_29f4
}

define i64 @_ZN3org4luaj3vm28LuaValue6invokeEJPNS1_7VarargsES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2a10:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2a15 = load i64, i64* @rdi, align 8
  store i64 %v0_2a15, i64* @rax, align 8
  store i64 %v0_2a15, i64* @rcx, align 8
  store i64 %arg2, i64* @rdx, align 8
  ret i64 %v0_2a15
}

define i64 @_ZN3org4luaj3vm28LuaValue12invokemethodEJPNS1_7VarargsEPN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_2a40:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2a41 = load i64, i64* @rdi, align 8
  store i64 %v2_2a41, i64* @rax, align 8
  store i64 %v2_2a41, i64* @rdx, align 8
  ret i64 %v2_2a41
}

define i64 @_ZN3org4luaj3vm28LuaValue12invokemethodEJPNS1_7VarargsEPS2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2a60:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2a61 = load i64, i64* @rdi, align 8
  store i64 %v2_2a61, i64* @rax, align 8
  store i64 %v2_2a61, i64* @rdx, align 8
  ret i64 %v2_2a61
}

define i64 @_ZN3org4luaj3vm28LuaValue6callmtEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_2a80:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2a84 = load i64, i64* @rdi, align 8
  store i64 %v2_2a84, i64* @rax, align 8
  %v0_2a87 = load i64, i64* inttoptr (i64 10894 to i64*), align 8
  store i64 %v0_2a87, i64* @rdx, align 8
  ret i64 %v2_2a84
}

define i64 @"_ZN3org4luaj3vm28LuaValue4not$EJPS2_v"() local_unnamed_addr {
dec_label_pc_2aa0:
  %v0_2aa0 = load i64, i64* inttoptr (i64 10919 to i64*), align 8
  store i64 %v0_2aa0, i64* @rax, align 8
  ret i64 %v0_2aa0
}

define i64 @_ZN3org4luaj3vm28LuaValue3negEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ab0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2ab0 = load i64, i64* @rbx, align 8
  %v2_2ab1 = load i64, i64* @rdi, align 8
  store i64 %v2_2ab1, i64* @rax, align 8
  store i64 %v2_2ab1, i64* @rdx, align 8
  store i64 %v0_2ab0, i64* @rbx, align 8
  ret i64 %v2_2ab1
}

define i64 @_ZN3org4luaj3vm28LuaValue3lenEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ae0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2ae0 = load i64, i64* @rbx, align 8
  %v2_2ae1 = load i64, i64* @rdi, align 8
  store i64 %v2_2ae1, i64* @rax, align 8
  store i64 %v2_2ae1, i64* @rdx, align 8
  store i64 %v0_2ae0, i64* @rbx, align 8
  ret i64 %v2_2ae1
}

define i64 @_ZN3org4luaj3vm28LuaValue6lengthEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b10:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2b14 = load i64, i64* @rdi, align 8
  store i64 %v2_2b14, i64* @rax, align 8
  store i64 %v2_2b14, i64* @rdx, align 8
  ret i64 %v2_2b14
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawlenEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b30:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6equalsEJbPN4java4lang6ObjectE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2b50:
  store i64 %arg1, i64* @rdi, align 8
  %v12_2b50 = icmp eq i64 %arg1, %arg2
  %v1_2b53 = zext i1 %v12_2b50 to i64
  %v2_2b53 = load i64, i64* @rax, align 8
  %v3_2b53 = and i64 %v2_2b53, -256
  %v4_2b53 = or i64 %v3_2b53, %v1_2b53
  store i64 %v4_2b53, i64* @rax, align 8
  ret i64 %v4_2b53
}

define i64 @_ZN3org4luaj3vm28LuaValue2eqEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b60:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2b64 = load i64, i64* @rdi, align 8
  store i64 %v2_2b64, i64* @rax, align 8
  %v4_2b6d = trunc i64 %v2_2b64 to i8
  %v5_2b6d = icmp eq i8 %v4_2b6d, 0
  %v0_2b6f = load i64, i64* inttoptr (i64 11126 to i64*), align 8
  store i64 %v0_2b6f, i64* @rax, align 8
  %v2_2b76 = load i64, i64* inttoptr (i64 11134 to i64*), align 8
  %v3_2b76 = select i1 %v5_2b6d, i64 %v2_2b76, i64 %v0_2b6f
  store i64 %v3_2b76, i64* @rax, align 8
  ret i64 %v3_2b76
}

define i64 @_ZN3org4luaj3vm28LuaValue3neqEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b90:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2b94 = load i64, i64* @rdi, align 8
  store i64 %v2_2b94, i64* @rax, align 8
  %v4_2b9d = trunc i64 %v2_2b94 to i8
  %v5_2b9d = icmp eq i8 %v4_2b9d, 0
  %v0_2b9f = load i64, i64* inttoptr (i64 11174 to i64*), align 8
  store i64 %v0_2b9f, i64* @rax, align 8
  %v2_2ba6 = load i64, i64* inttoptr (i64 11182 to i64*), align 8
  %v3_2ba6 = select i1 %v5_2b9d, i64 %v2_2ba6, i64 %v0_2b9f
  store i64 %v3_2ba6, i64* @rax, align 8
  ret i64 %v3_2ba6
}

define i64 @_ZN3org4luaj3vm28LuaValue5neq_bEJbPS2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_2bc0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2bc4 = load i64, i64* @rdi, align 8
  %v2_2bcd = and i64 %v2_2bc4, 4294967295
  %v9_2bcd = xor i64 %v2_2bcd, 1
  store i64 %v9_2bcd, i64* @rax, align 8
  ret i64 %v9_2bcd
}

define i64 @_ZN3org4luaj3vm28LuaValue5raweqEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2be0:
  store i64 %arg1, i64* @rdi, align 8
  %v12_2be0 = icmp eq i64 %arg1, %arg2
  %v1_2be3 = zext i1 %v12_2be0 to i64
  %v2_2be3 = load i64, i64* @rax, align 8
  %v3_2be3 = and i64 %v2_2be3, -256
  %v4_2be3 = or i64 %v3_2be3, %v1_2be3
  store i64 %v4_2be3, i64* @rax, align 8
  ret i64 %v4_2be3
}

define i64 @_ZN3org4luaj3vm28LuaValue5raweqEJbPNS1_9LuaStringE() local_unnamed_addr {
dec_label_pc_2bf0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue5raweqEJbd() local_unnamed_addr {
dec_label_pc_2c00:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue5raweqEJbi() local_unnamed_addr {
dec_label_pc_2c10:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3addEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2c20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2c27 = load i64, i64* @rdi, align 8
  store i64 %v2_2c27, i64* @rax, align 8
  ret i64 %v2_2c27
}

define i64 @_ZN3org4luaj3vm28LuaValue3addEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2c40:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2c44 = load i64, i64* @rdi, align 8
  store i64 %v2_2c44, i64* @rax, align 8
  ret i64 %v2_2c44
}

define i64 @_ZN3org4luaj3vm28LuaValue3addEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2c60:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2c60 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2c60 = call i128 @__asm_pxor(i128 %v0_2c60, i128 %v0_2c60)
  store i128 %v2_2c60, i128* %xmm0.global-to-local, align 8
  %v2_2c68 = load i64, i64* @rdi, align 8
  store i64 %v2_2c68, i64* @rax, align 8
  %v1_2c6b = trunc i64 %arg2 to i32
  %v2_2c6b = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2c6b)
  store i128 %v2_2c6b, i128* %xmm0.global-to-local, align 8
  %v0_2c79 = load i64, i64* @rax, align 8
  ret i64 %v0_2c79
}

define i64 @_ZN3org4luaj3vm28LuaValue3subEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2c80:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2c87 = load i64, i64* @rdi, align 8
  store i64 %v2_2c87, i64* @rax, align 8
  ret i64 %v2_2c87
}

define i64 @_ZN3org4luaj3vm28LuaValue3subEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ca0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2ca4 = load i64, i64* @rdi, align 8
  store i64 %v2_2ca4, i64* @rax, align 8
  ret i64 %v2_2ca4
}

define i64 @_ZN3org4luaj3vm28LuaValue3subEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_2cc0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2cc4 = load i64, i64* @rdi, align 8
  store i64 %v2_2cc4, i64* @rax, align 8
  ret i64 %v2_2cc4
}

define i64 @_ZN3org4luaj3vm28LuaValue7subFromEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ce0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2ce4 = load i64, i64* @rdi, align 8
  store i64 %v2_2ce4, i64* @rax, align 8
  ret i64 %v2_2ce4
}

define i64 @_ZN3org4luaj3vm28LuaValue7subFromEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2d00:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2d00 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2d00 = call i128 @__asm_pxor(i128 %v0_2d00, i128 %v0_2d00)
  store i128 %v2_2d00, i128* %xmm0.global-to-local, align 8
  %v2_2d08 = load i64, i64* @rdi, align 8
  store i64 %v2_2d08, i64* @rax, align 8
  %v1_2d0b = trunc i64 %arg2 to i32
  %v2_2d0b = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2d0b)
  store i128 %v2_2d0b, i128* %xmm0.global-to-local, align 8
  %v0_2d19 = load i64, i64* @rax, align 8
  ret i64 %v0_2d19
}

define i64 @_ZN3org4luaj3vm28LuaValue3mulEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2d20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2d27 = load i64, i64* @rdi, align 8
  store i64 %v2_2d27, i64* @rax, align 8
  ret i64 %v2_2d27
}

define i64 @_ZN3org4luaj3vm28LuaValue3mulEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2d40:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2d44 = load i64, i64* @rdi, align 8
  store i64 %v2_2d44, i64* @rax, align 8
  ret i64 %v2_2d44
}

define i64 @_ZN3org4luaj3vm28LuaValue3mulEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2d60:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2d60 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2d60 = call i128 @__asm_pxor(i128 %v0_2d60, i128 %v0_2d60)
  store i128 %v2_2d60, i128* %xmm0.global-to-local, align 8
  %v2_2d68 = load i64, i64* @rdi, align 8
  store i64 %v2_2d68, i64* @rax, align 8
  %v1_2d6b = trunc i64 %arg2 to i32
  %v2_2d6b = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2d6b)
  store i128 %v2_2d6b, i128* %xmm0.global-to-local, align 8
  %v0_2d79 = load i64, i64* @rax, align 8
  ret i64 %v0_2d79
}

define i64 @_ZN3org4luaj3vm28LuaValue3powEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2d80:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2d87 = load i64, i64* @rdi, align 8
  store i64 %v2_2d87, i64* @rax, align 8
  ret i64 %v2_2d87
}

define i64 @_ZN3org4luaj3vm28LuaValue3powEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2da0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2da4 = load i64, i64* @rdi, align 8
  store i64 %v2_2da4, i64* @rax, align 8
  ret i64 %v2_2da4
}

define i64 @_ZN3org4luaj3vm28LuaValue3powEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_2dc0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2dc4 = load i64, i64* @rdi, align 8
  store i64 %v2_2dc4, i64* @rax, align 8
  ret i64 %v2_2dc4
}

define i64 @_ZN3org4luaj3vm28LuaValue7powWithEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2de0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2de4 = load i64, i64* @rdi, align 8
  store i64 %v2_2de4, i64* @rax, align 8
  ret i64 %v2_2de4
}

define i64 @_ZN3org4luaj3vm28LuaValue7powWithEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2e00:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2e00 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2e00 = call i128 @__asm_pxor(i128 %v0_2e00, i128 %v0_2e00)
  store i128 %v2_2e00, i128* %xmm0.global-to-local, align 8
  %v2_2e08 = load i64, i64* @rdi, align 8
  store i64 %v2_2e08, i64* @rax, align 8
  %v1_2e0b = trunc i64 %arg2 to i32
  %v2_2e0b = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2e0b)
  store i128 %v2_2e0b, i128* %xmm0.global-to-local, align 8
  %v0_2e19 = load i64, i64* @rax, align 8
  ret i64 %v0_2e19
}

define i64 @_ZN3org4luaj3vm28LuaValue3divEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2e20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2e27 = load i64, i64* @rdi, align 8
  store i64 %v2_2e27, i64* @rax, align 8
  ret i64 %v2_2e27
}

define i64 @_ZN3org4luaj3vm28LuaValue3divEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2e40:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2e44 = load i64, i64* @rdi, align 8
  store i64 %v2_2e44, i64* @rax, align 8
  ret i64 %v2_2e44
}

define i64 @_ZN3org4luaj3vm28LuaValue3divEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_2e60:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2e64 = load i64, i64* @rdi, align 8
  store i64 %v2_2e64, i64* @rax, align 8
  ret i64 %v2_2e64
}

define i64 @_ZN3org4luaj3vm28LuaValue7divIntoEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2e80:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2e84 = load i64, i64* @rdi, align 8
  store i64 %v2_2e84, i64* @rax, align 8
  ret i64 %v2_2e84
}

define i64 @_ZN3org4luaj3vm28LuaValue3modEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2ea0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2ea7 = load i64, i64* @rdi, align 8
  store i64 %v2_2ea7, i64* @rax, align 8
  ret i64 %v2_2ea7
}

define i64 @_ZN3org4luaj3vm28LuaValue3modEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ec0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2ec4 = load i64, i64* @rdi, align 8
  store i64 %v2_2ec4, i64* @rax, align 8
  ret i64 %v2_2ec4
}

define i64 @_ZN3org4luaj3vm28LuaValue3modEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ee0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2ee4 = load i64, i64* @rdi, align 8
  store i64 %v2_2ee4, i64* @rax, align 8
  ret i64 %v2_2ee4
}

define i64 @_ZN3org4luaj3vm28LuaValue7modFromEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2f00:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2f04 = load i64, i64* @rdi, align 8
  store i64 %v2_2f04, i64* @rax, align 8
  ret i64 %v2_2f04
}

define i64 @_ZN3org4luaj3vm28LuaValue2ltEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2f20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2f27 = load i64, i64* @rdi, align 8
  store i64 %v2_2f27, i64* @rax, align 8
  ret i64 %v2_2f27
}

define i64 @_ZN3org4luaj3vm28LuaValue4lt_bEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2f40:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2f44 = load i64, i64* @rdi, align 8
  store i64 %v2_2f44, i64* @rax, align 8
  store i64 %v2_2f44, i64* @rdx, align 8
  ret i64 %v2_2f44
}

define i64 @_ZN3org4luaj3vm28LuaValue4lteqEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2f70:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v2_2f77 = load i64, i64* @rdi, align 8
  store i64 %v2_2f77, i64* @rax, align 8
  ret i64 %v2_2f77
}

define i64 @_ZN3org4luaj3vm28LuaValue6lteq_bEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2f90:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2f94 = load i64, i64* @rdi, align 8
  store i64 %v2_2f94, i64* @rax, align 8
  store i64 %v2_2f94, i64* @rdx, align 8
  ret i64 %v2_2f94
}

define i64 @_ZN3org4luaj3vm28LuaValue2gtEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2fc0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2fc4 = load i64, i64* @rdi, align 8
  store i64 %v0_2fc4, i64* @rdx, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue2gtEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_2fe0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_2fe4 = load i64, i64* @rdi, align 8
  store i64 %v2_2fe4, i64* @rax, align 8
  ret i64 %v2_2fe4
}

define i64 @_ZN3org4luaj3vm28LuaValue4gt_bEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3000:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3007 = load i64, i64* @rdi, align 8
  store i64 %v0_3007, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v0_300d = load i64, i64* inttoptr (i64 12308 to i64*), align 8
  store i64 %v0_300d, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue4gteqEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3030:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3034 = load i64, i64* @rdi, align 8
  store i64 %v0_3034, i64* @rdx, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue4gteqEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_3050:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3054 = load i64, i64* @rdi, align 8
  store i64 %v2_3054, i64* @rax, align 8
  ret i64 %v2_3054
}

define i64 @_ZN3org4luaj3vm28LuaValue6gteq_bEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3070:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3077 = load i64, i64* @rdi, align 8
  store i64 %v0_3077, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v0_307d = load i64, i64* inttoptr (i64 12420 to i64*), align 8
  store i64 %v0_307d, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue6gteq_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_30a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6gteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_30c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6concatEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_30e0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_30e4 = load i64, i64* @rdi, align 8
  store i64 %v2_30e4, i64* @rax, align 8
  ret i64 %v2_30e4
}

define i64 @_ZN3org4luaj3vm28LuaValue8concatToEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3100:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3107 = load i64, i64* @rdi, align 8
  store i64 %v0_3107, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue8concatToEJPS2_PNS1_9LuaNumberE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3120:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3127 = load i64, i64* @rdi, align 8
  store i64 %v0_3127, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue8concatToEJPS2_PNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3140:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3147 = load i64, i64* @rdi, align 8
  store i64 %v0_3147, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm28LuaValue4and$EJPS2_S3_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3160:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3162 = load i64, i64* @rdi, align 8
  %v0_3165 = load i64, i64* %rsi.global-to-local, align 8
  %v4_3175 = trunc i64 %v0_3162 to i8
  %v5_3175 = icmp eq i8 %v4_3175, 0
  %v1_317a = icmp eq i1 %v5_3175, false
  %v4_317a = select i1 %v1_317a, i64 %v0_3165, i64 %v0_3162
  store i64 %v4_317a, i64* @rax, align 8
  ret i64 %v4_317a
}

define i64 @"_ZN3org4luaj3vm28LuaValue3or$EJPS2_S3_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3190:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3195 = load i64, i64* @rdi, align 8
  %v4_31a5 = trunc i64 %v0_3195 to i8
  %v5_31a5 = icmp eq i8 %v4_31a5, 0
  %v1_31aa = icmp eq i1 %v5_31a5, false
  %v4_31aa = select i1 %v1_31aa, i64 %v0_3195, i64 %arg2
  store i64 %v4_31aa, i64* @rax, align 8
  ret i64 %v4_31aa
}

define i64 @_ZN3org4luaj3vm28LuaValue9testfor_bEJbPS2_S3_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_31c0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_31ca = load i64, i64* @rdx, align 8
  %v2_3209 = urem i64 %v0_31ca, 2
  store i64 %v2_3209, i64* @rax, align 8
  ret i64 %v2_3209
}

define i64 @_ZN3org4luaj3vm28LuaValue8strvalueEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3220:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11strongvalueEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_3240:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaValue7metatagEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3250:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3250 = load i64, i64* @rbx, align 8
  %v2_3251 = load i64, i64* @rdi, align 8
  store i64 %v2_3251, i64* @rax, align 8
  %v0_3254 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3254, i64* @rbx, align 8
  %v1_325d = icmp eq i64 %v2_3251, 0
  br i1 %v1_325d, label %dec_label_pc_3278, label %dec_label_pc_3262

dec_label_pc_3262:                                ; preds = %dec_label_pc_3250
  store i64 %v2_3251, i64* @rdx, align 8
  store i64 %v0_3250, i64* @rbx, align 8
  ret i64 %v2_3251

dec_label_pc_3278:                                ; preds = %dec_label_pc_3250
  %v0_3278 = load i64, i64* inttoptr (i64 12927 to i64*), align 8
  store i64 %v0_3278, i64* @rax, align 8
  store i64 %v0_3250, i64* @rbx, align 8
  ret i64 %v0_3278
}

define i64 @_ZN3org4luaj3vm28LuaValue8onInvokeEJPNS1_7VarargsES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3290:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3294 = load i64, i64* @rdi, align 8
  store i64 %v2_3294, i64* @rax, align 8
  ret i64 %v2_3294
}

define i64 @_ZN3org4luaj3vm28LuaValue12initupvalue1EJvPS2_() local_unnamed_addr {
dec_label_pc_32b0:
  %v0_32b0 = load i64, i64* @rax, align 8
  ret i64 %v0_32b0
}

define i64 @"_ZN3org4luaj3vm213LuaValue$None3argEJPNS1_8LuaValueEi"() local_unnamed_addr {
dec_label_pc_32c0:
  %v0_32c0 = load i64, i64* inttoptr (i64 12999 to i64*), align 8
  store i64 %v0_32c0, i64* @rax, align 8
  ret i64 %v0_32c0
}

define i64 @"_ZN3org4luaj3vm213LuaValue$None4nargEJiv"() local_unnamed_addr {
dec_label_pc_32d0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm213LuaValue$None4arg1EJPNS1_8LuaValueEv"() local_unnamed_addr {
dec_label_pc_32e0:
  %v0_32e0 = load i64, i64* inttoptr (i64 13031 to i64*), align 8
  store i64 %v0_32e0, i64* @rax, align 8
  ret i64 %v0_32e0
}

define i64 @"_ZN3org4luaj3vm213LuaValue$None9tojstringEJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_32f0:
  %v0_32f0 = load i64, i64* inttoptr (i64 13047 to i64*), align 8
  store i64 %v0_32f0, i64* @rax, align 8
  ret i64 %v0_32f0
}

define i64 @_ZN3org4luaj3vm29LuaNumber4typeEJiv() local_unnamed_addr {
dec_label_pc_3300:
  store i64 3, i64* @rax, align 8
  ret i64 3
}

define i64 @"_ZN3org4luaj3vm29LuaNumber9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_3310:
  %v0_3310 = load i64, i64* inttoptr (i64 13079 to i64*), align 8
  store i64 %v0_3310, i64* @rax, align 8
  ret i64 %v0_3310
}

define i64 @_ZN3org4luaj3vm29LuaNumber11checknumberEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_3320:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaNumber9optnumberEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3330:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaNumber8tonumberEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3340:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaNumber12getmetatableEJPNS1_8LuaValueEv() local_unnamed_addr {
dec_label_pc_3350:
  %v0_3350 = load i64, i64* inttoptr (i64 13143 to i64*), align 8
  store i64 %v0_3350, i64* @rax, align 8
  ret i64 %v0_3350
}

define i64 @_ZN3org4luaj3vm29LuaNumber6concatEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3360:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3367 = load i64, i64* @rdi, align 8
  store i64 %v0_3367, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaNumber8concatToEJPNS1_8LuaValueEPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3380:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdx, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaNumber8concatToEJPNS1_8LuaValueEPNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_33c0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_33c1 = load i64, i64* @rdi, align 8
  store i64 %v2_33c1, i64* @rax, align 8
  store i64 %v2_33c1, i64* @rdx, align 8
  ret i64 %v2_33c1
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot4restEJPNS1_13LuaTable$SlotEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_33e0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_33e0 = add i64 %arg1, 24
  %v2_33e0 = inttoptr i64 %v1_33e0 to i64*
  %v3_33e0 = load i64, i64* %v2_33e0, align 8
  store i64 %v3_33e0, i64* @rax, align 8
  ret i64 %v3_33e0
}

define i64 @"_ZN3org4luaj3vm219WeakTable$WeakValue4typeEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_33f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_33f4 = load i64, i64* @rdi, align 8
  store i64 %v2_33f4, i64* @rax, align 8
  %v0_33f7 = load i64, i64* inttoptr (i64 13310 to i64*), align 8
  store i64 %v0_33f7, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm219WeakTable$WeakValue9typename$EJPN4java4lang6StringEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3420:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3424 = load i64, i64* @rdi, align 8
  store i64 %v2_3424, i64* @rax, align 8
  %v0_3427 = load i64, i64* inttoptr (i64 13358 to i64*), align 8
  store i64 %v0_3427, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29WeakTable11useWeakKeysEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3450:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3450 = add i64 %arg1, 8
  %v2_3450 = inttoptr i64 %v1_3450 to i8*
  %v3_3450 = load i8, i8* %v2_3450, align 1
  %v4_3450 = zext i8 %v3_3450 to i64
  store i64 %v4_3450, i64* @rax, align 8
  ret i64 %v4_3450
}

define i64 @_ZN3org4luaj3vm29WeakTable13useWeakValuesEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3460:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3460 = add i64 %arg1, 9
  %v2_3460 = inttoptr i64 %v1_3460 to i8*
  %v3_3460 = load i8, i8* %v2_3460, align 1
  %v4_3460 = zext i8 %v3_3460 to i64
  store i64 %v4_3460, i64* @rax, align 8
  ret i64 %v4_3460
}

define i64 @_ZN3org4luaj3vm29WeakTable10toLuaValueEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3470:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3470 = add i64 %arg1, 16
  %v2_3470 = inttoptr i64 %v1_3470 to i64*
  %v3_3470 = load i64, i64* %v2_3470, align 8
  store i64 %v3_3470, i64* @rax, align 8
  ret i64 %v3_3470
}

define i64 @"_ZN3org4luaj3vm221WeakTable$WeakKeySlot3setEJPNS1_13LuaTable$SlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3480:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v2_3483 = add i64 %arg1, 16
  %v3_3483 = inttoptr i64 %v2_3483 to i64*
  store i64 %arg2, i64* %v3_3483, align 8
  %v0_3487 = load i64, i64* @rax, align 8
  ret i64 %v0_3487
}

define i64 @_ZN3org4luaj3vm210LuaBoolean4typeEJiv() local_unnamed_addr {
dec_label_pc_3490:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @"_ZN3org4luaj3vm210LuaBoolean9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_34a0:
  %v0_34a0 = load i64, i64* inttoptr (i64 13479 to i64*), align 8
  store i64 %v0_34a0, i64* @rax, align 8
  ret i64 %v0_34a0
}

define i64 @"_ZN3org4luaj3vm210LuaBoolean4not$EJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_34b0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_34b0 = add i64 %arg1, 8
  %v2_34b0 = inttoptr i64 %v1_34b0 to i8*
  %v3_34b0 = load i8, i8* %v2_34b0, align 1
  %v10_34b0 = icmp eq i8 %v3_34b0, 0
  %v0_34b4 = load i64, i64* inttoptr (i64 13499 to i64*), align 8
  store i64 %v0_34b4, i64* @rax, align 8
  %v2_34bb = load i64, i64* inttoptr (i64 13507 to i64*), align 8
  %v3_34bb = select i1 %v10_34b0, i64 %v2_34bb, i64 %v0_34b4
  store i64 %v3_34bb, i64* @rax, align 8
  ret i64 %v3_34bb
}

define i64 @_ZN3org4luaj3vm210LuaBoolean9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_34d0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_34d0 = add i64 %arg1, 8
  %v2_34d0 = inttoptr i64 %v1_34d0 to i8*
  %v3_34d0 = load i8, i8* %v2_34d0, align 1
  %v10_34d0 = icmp eq i8 %v3_34d0, 0
  %v0_34d4 = load i64, i64* inttoptr (i64 13531 to i64*), align 8
  store i64 %v0_34d4, i64* @rax, align 8
  %v2_34db = load i64, i64* inttoptr (i64 13539 to i64*), align 8
  %v3_34db = select i1 %v10_34d0, i64 %v2_34db, i64 %v0_34d4
  store i64 %v3_34db, i64* @rax, align 8
  ret i64 %v3_34db
}

define i64 @_ZN3org4luaj3vm210LuaBoolean10optbooleanEJbb(i64 %arg1) local_unnamed_addr {
dec_label_pc_34f0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_34f0 = add i64 %arg1, 8
  %v2_34f0 = inttoptr i64 %v1_34f0 to i8*
  %v3_34f0 = load i8, i8* %v2_34f0, align 1
  %v4_34f0 = zext i8 %v3_34f0 to i64
  store i64 %v4_34f0, i64* @rax, align 8
  ret i64 %v4_34f0
}

define i64 @_ZN3org4luaj3vm210LuaBoolean12checkbooleanEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3500:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3500 = add i64 %arg1, 8
  %v2_3500 = inttoptr i64 %v1_3500 to i8*
  %v3_3500 = load i8, i8* %v2_3500, align 1
  %v4_3500 = zext i8 %v3_3500 to i64
  store i64 %v4_3500, i64* @rax, align 8
  ret i64 %v4_3500
}

define i64 @_ZN3org4luaj3vm210LuaBoolean12getmetatableEJPNS1_8LuaValueEv() local_unnamed_addr {
dec_label_pc_3510:
  %v0_3510 = load i64, i64* inttoptr (i64 13591 to i64*), align 8
  store i64 %v0_3510, i64* @rax, align 8
  ret i64 %v0_3510
}

define i64 @"_ZN3org4luaj3vm219Varargs$PairVarargs4nargEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3520:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3524 = load i64, i64* @rdi, align 8
  %v1_3524 = add i64 %v0_3524, 16
  %v2_3524 = inttoptr i64 %v1_3524 to i64*
  %v3_3524 = load i64, i64* %v2_3524, align 8
  store i64 %v3_3524, i64* @rdi, align 8
  %v1_3528 = inttoptr i64 %v3_3524 to i64*
  %v2_3528 = load i64, i64* %v1_3528, align 8
  %v2_352e = add i64 %v2_3528, 1
  %v17_352e = and i64 %v2_352e, 4294967295
  store i64 %v17_352e, i64* @rax, align 8
  ret i64 %v17_352e
}

define i64 @"_ZN3org4luaj3vm219Varargs$PairVarargs4arg1EJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3540:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3540 = add i64 %arg1, 8
  %v2_3540 = inttoptr i64 %v1_3540 to i64*
  %v3_3540 = load i64, i64* %v2_3540, align 8
  store i64 %v3_3540, i64* @rax, align 8
  ret i64 %v3_3540
}

define i64 @_ZN3org4luaj3vm27Varargs4evalEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_3550:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm27Varargs4typeEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_3560:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3564 = load i64, i64* @rdi, align 8
  store i64 %v2_3564, i64* @rax, align 8
  store i64 %v2_3564, i64* @rdx, align 8
  ret i64 %v2_3564
}

define i64 @_ZN3org4luaj3vm27Varargs5isnilEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3580:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3584 = load i64, i64* @rdi, align 8
  store i64 %v2_3584, i64* @rax, align 8
  store i64 %v2_3584, i64* @rdx, align 8
  ret i64 %v2_3584
}

define i64 @_ZN3org4luaj3vm27Varargs10isfunctionEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_35a0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_35a4 = load i64, i64* @rdi, align 8
  store i64 %v2_35a4, i64* @rax, align 8
  store i64 %v2_35a4, i64* @rdx, align 8
  ret i64 %v2_35a4
}

define i64 @_ZN3org4luaj3vm27Varargs8isnumberEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_35c0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_35c4 = load i64, i64* @rdi, align 8
  store i64 %v2_35c4, i64* @rax, align 8
  store i64 %v2_35c4, i64* @rdx, align 8
  ret i64 %v2_35c4
}

define i64 @_ZN3org4luaj3vm27Varargs8isstringEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_35e0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_35e4 = load i64, i64* @rdi, align 8
  store i64 %v2_35e4, i64* @rax, align 8
  store i64 %v2_35e4, i64* @rdx, align 8
  ret i64 %v2_35e4
}

define i64 @_ZN3org4luaj3vm27Varargs7istableEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3600:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3604 = load i64, i64* @rdi, align 8
  store i64 %v2_3604, i64* @rax, align 8
  store i64 %v2_3604, i64* @rdx, align 8
  ret i64 %v2_3604
}

define i64 @_ZN3org4luaj3vm27Varargs8isthreadEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3620:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3624 = load i64, i64* @rdi, align 8
  store i64 %v2_3624, i64* @rax, align 8
  store i64 %v2_3624, i64* @rdx, align 8
  ret i64 %v2_3624
}

define i64 @_ZN3org4luaj3vm27Varargs10isuserdataEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3640:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3644 = load i64, i64* @rdi, align 8
  store i64 %v2_3644, i64* @rax, align 8
  store i64 %v2_3644, i64* @rdx, align 8
  ret i64 %v2_3644
}

define i64 @_ZN3org4luaj3vm27Varargs10optbooleanEJbib(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3660:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3661 = load i64, i64* @rdi, align 8
  store i64 %v2_3661, i64* @rax, align 8
  store i64 %v2_3661, i64* @rdx, align 8
  ret i64 %v2_3661
}

define i64 @_ZN3org4luaj3vm27Varargs10optclosureEJPNS1_10LuaClosureEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3680:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3681 = load i64, i64* @rdi, align 8
  store i64 %v2_3681, i64* @rax, align 8
  store i64 %v2_3681, i64* @rcx, align 8
  ret i64 %v2_3681
}

define i64 @_ZN3org4luaj3vm27Varargs9optdoubleEJdid(i64 %arg1) local_unnamed_addr {
dec_label_pc_36a0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_36a4 = load i64, i64* @rdi, align 8
  store i64 %v2_36a4, i64* @rax, align 8
  %v0_36a7 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_36a7 = call i64 @__asm_movsd.7465(i128 %v0_36a7)
  %v2_36b0 = load i64, i64* @rdi, align 8
  store i64 %v2_36b0, i64* @rdx, align 8
  %v0_36b3 = load i64, i64* @rax, align 8
  store i64 %v0_36b3, i64* @rdi, align 8
  %v4_36b6 = call i128 @__asm_movsd(i64 %v1_36a7)
  store i128 %v4_36b6, i128* %xmm0.global-to-local, align 8
  %v0_36c6 = load i64, i64* @rax, align 8
  ret i64 %v0_36c6
}

define i64 @_ZN3org4luaj3vm27Varargs11optfunctionEJPNS1_11LuaFunctionEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_36d0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_36d1 = load i64, i64* @rdi, align 8
  store i64 %v2_36d1, i64* @rax, align 8
  store i64 %v2_36d1, i64* @rcx, align 8
  ret i64 %v2_36d1
}

define i64 @_ZN3org4luaj3vm27Varargs6optintEJiii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_36f0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_36f1 = load i64, i64* @rdi, align 8
  store i64 %v2_36f1, i64* @rax, align 8
  store i64 %v2_36f1, i64* @rcx, align 8
  ret i64 %v2_36f1
}

define i64 @_ZN3org4luaj3vm27Varargs10optintegerEJPNS1_10LuaIntegerEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3710:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3711 = load i64, i64* @rdi, align 8
  store i64 %v2_3711, i64* @rax, align 8
  store i64 %v2_3711, i64* @rcx, align 8
  ret i64 %v2_3711
}

define i64 @_ZN3org4luaj3vm27Varargs7optlongEJxix(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3730:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3731 = load i64, i64* @rdi, align 8
  store i64 %v2_3731, i64* @rax, align 8
  store i64 %v2_3731, i64* @rcx, align 8
  ret i64 %v2_3731
}

define i64 @_ZN3org4luaj3vm27Varargs9optnumberEJPNS1_9LuaNumberEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3750:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3751 = load i64, i64* @rdi, align 8
  store i64 %v2_3751, i64* @rax, align 8
  store i64 %v2_3751, i64* @rcx, align 8
  ret i64 %v2_3751
}

define i64 @_ZN3org4luaj3vm27Varargs10optjstringEJPN4java4lang6StringEiS6_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3770:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3771 = load i64, i64* @rdi, align 8
  store i64 %v2_3771, i64* @rax, align 8
  store i64 %v2_3771, i64* @rcx, align 8
  ret i64 %v2_3771
}

define i64 @_ZN3org4luaj3vm27Varargs9optstringEJPNS1_9LuaStringEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3790:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3791 = load i64, i64* @rdi, align 8
  store i64 %v2_3791, i64* @rax, align 8
  store i64 %v2_3791, i64* @rcx, align 8
  ret i64 %v2_3791
}

define i64 @_ZN3org4luaj3vm27Varargs8opttableEJPNS1_8LuaTableEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_37b0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_37b1 = load i64, i64* @rdi, align 8
  store i64 %v2_37b1, i64* @rax, align 8
  store i64 %v2_37b1, i64* @rcx, align 8
  ret i64 %v2_37b1
}

define i64 @_ZN3org4luaj3vm27Varargs9optthreadEJPNS1_9LuaThreadEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_37d0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_37d1 = load i64, i64* @rdi, align 8
  store i64 %v2_37d1, i64* @rax, align 8
  store i64 %v2_37d1, i64* @rcx, align 8
  ret i64 %v2_37d1
}

define i64 @_ZN3org4luaj3vm27Varargs11optuserdataEJPN4java4lang6ObjectEiS6_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_37f0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_37f1 = load i64, i64* @rdi, align 8
  store i64 %v2_37f1, i64* @rax, align 8
  store i64 %v2_37f1, i64* @rcx, align 8
  ret i64 %v2_37f1
}

define i64 @_ZN3org4luaj3vm27Varargs11optuserdataEJPN4java4lang6ObjectEiPNS4_5ClassES6_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3810:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3812 = load i64, i64* @rcx, align 8
  %v2_381c = load i64, i64* @rdi, align 8
  store i64 %v2_381c, i64* @rax, align 8
  store i64 %v0_3812, i64* @rdx, align 8
  ret i64 %v2_381c
}

define i64 @_ZN3org4luaj3vm27Varargs12checkbooleanEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3840:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3844 = load i64, i64* @rdi, align 8
  store i64 %v2_3844, i64* @rax, align 8
  store i64 %v2_3844, i64* @rdx, align 8
  ret i64 %v2_3844
}

define i64 @_ZN3org4luaj3vm27Varargs12checkclosureEJPNS1_10LuaClosureEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3860:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3864 = load i64, i64* @rdi, align 8
  store i64 %v2_3864, i64* @rax, align 8
  store i64 %v2_3864, i64* @rdx, align 8
  ret i64 %v2_3864
}

define i64 @_ZN3org4luaj3vm27Varargs11checkdoubleEJdi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3880:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3884 = load i64, i64* @rdi, align 8
  store i64 %v2_3884, i64* @rax, align 8
  store i64 %v2_3884, i64* @rdx, align 8
  ret i64 %v2_3884
}

define i64 @_ZN3org4luaj3vm27Varargs13checkfunctionEJPNS1_11LuaFunctionEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_38b0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_38b4 = load i64, i64* @rdi, align 8
  store i64 %v2_38b4, i64* @rax, align 8
  store i64 %v2_38b4, i64* @rdx, align 8
  ret i64 %v2_38b4
}

define i64 @_ZN3org4luaj3vm27Varargs8checkintEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_38d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_38d4 = load i64, i64* @rdi, align 8
  store i64 %v2_38d4, i64* @rax, align 8
  store i64 %v2_38d4, i64* @rdx, align 8
  ret i64 %v2_38d4
}

define i64 @_ZN3org4luaj3vm27Varargs12checkintegerEJPNS1_10LuaIntegerEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3900:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3904 = load i64, i64* @rdi, align 8
  store i64 %v2_3904, i64* @rax, align 8
  store i64 %v2_3904, i64* @rdx, align 8
  ret i64 %v2_3904
}

define i64 @_ZN3org4luaj3vm27Varargs9checklongEJxi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3920:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3924 = load i64, i64* @rdi, align 8
  store i64 %v2_3924, i64* @rax, align 8
  store i64 %v2_3924, i64* @rdx, align 8
  ret i64 %v2_3924
}

define i64 @_ZN3org4luaj3vm27Varargs11checknumberEJPNS1_9LuaNumberEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3950:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3954 = load i64, i64* @rdi, align 8
  store i64 %v2_3954, i64* @rax, align 8
  store i64 %v2_3954, i64* @rdx, align 8
  ret i64 %v2_3954
}

define i64 @_ZN3org4luaj3vm27Varargs12checkjstringEJPN4java4lang6StringEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3970:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3974 = load i64, i64* @rdi, align 8
  store i64 %v2_3974, i64* @rax, align 8
  store i64 %v2_3974, i64* @rdx, align 8
  ret i64 %v2_3974
}

define i64 @_ZN3org4luaj3vm27Varargs11checkstringEJPNS1_9LuaStringEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3990:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3994 = load i64, i64* @rdi, align 8
  store i64 %v2_3994, i64* @rax, align 8
  store i64 %v2_3994, i64* @rdx, align 8
  ret i64 %v2_3994
}

define i64 @_ZN3org4luaj3vm27Varargs10checktableEJPNS1_8LuaTableEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_39b0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_39b4 = load i64, i64* @rdi, align 8
  store i64 %v2_39b4, i64* @rax, align 8
  store i64 %v2_39b4, i64* @rdx, align 8
  ret i64 %v2_39b4
}

define i64 @_ZN3org4luaj3vm27Varargs11checkthreadEJPNS1_9LuaThreadEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_39d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_39d4 = load i64, i64* @rdi, align 8
  store i64 %v2_39d4, i64* @rax, align 8
  store i64 %v2_39d4, i64* @rdx, align 8
  ret i64 %v2_39d4
}

define i64 @_ZN3org4luaj3vm27Varargs13checkuserdataEJPN4java4lang6ObjectEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_39f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_39f4 = load i64, i64* @rdi, align 8
  store i64 %v2_39f4, i64* @rax, align 8
  store i64 %v2_39f4, i64* @rdx, align 8
  ret i64 %v2_39f4
}

define i64 @_ZN3org4luaj3vm27Varargs13checkuserdataEJPN4java4lang6ObjectEiPNS4_5ClassE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3a10:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3a11 = load i64, i64* @rdi, align 8
  store i64 %v2_3a11, i64* @rax, align 8
  store i64 %v2_3a11, i64* @rcx, align 8
  ret i64 %v2_3a11
}

define i64 @_ZN3org4luaj3vm27Varargs11checknotnilEJPNS1_8LuaValueEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a30:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3a34 = load i64, i64* @rdi, align 8
  store i64 %v2_3a34, i64* @rax, align 8
  store i64 %v2_3a34, i64* @rdx, align 8
  ret i64 %v2_3a34
}

define i64 @_ZN3org4luaj3vm27Varargs9tobooleanEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a50:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3a54 = load i64, i64* @rdi, align 8
  store i64 %v2_3a54, i64* @rax, align 8
  store i64 %v2_3a54, i64* @rdx, align 8
  ret i64 %v2_3a54
}

define i64 @_ZN3org4luaj3vm27Varargs6tobyteEJci(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a70:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3a74 = load i64, i64* @rdi, align 8
  store i64 %v2_3a74, i64* @rax, align 8
  store i64 %v2_3a74, i64* @rdx, align 8
  ret i64 %v2_3a74
}

define i64 @_ZN3org4luaj3vm27Varargs6tocharEJwi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a90:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3a94 = load i64, i64* @rdi, align 8
  store i64 %v2_3a94, i64* @rax, align 8
  store i64 %v2_3a94, i64* @rdx, align 8
  ret i64 %v2_3a94
}

define i64 @_ZN3org4luaj3vm27Varargs8todoubleEJdi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ab0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3ab4 = load i64, i64* @rdi, align 8
  store i64 %v2_3ab4, i64* @rax, align 8
  store i64 %v2_3ab4, i64* @rdx, align 8
  ret i64 %v2_3ab4
}

define i64 @_ZN3org4luaj3vm27Varargs7tofloatEJfi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ad0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3ad4 = load i64, i64* @rdi, align 8
  store i64 %v2_3ad4, i64* @rax, align 8
  store i64 %v2_3ad4, i64* @rdx, align 8
  ret i64 %v2_3ad4
}

define i64 @_ZN3org4luaj3vm27Varargs5tointEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_3af0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3af4 = load i64, i64* @rdi, align 8
  store i64 %v2_3af4, i64* @rax, align 8
  store i64 %v2_3af4, i64* @rdx, align 8
  ret i64 %v2_3af4
}

define i64 @_ZN3org4luaj3vm27Varargs6tolongEJxi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3b10:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3b14 = load i64, i64* @rdi, align 8
  store i64 %v2_3b14, i64* @rax, align 8
  store i64 %v2_3b14, i64* @rdx, align 8
  ret i64 %v2_3b14
}

define i64 @_ZN3org4luaj3vm27Varargs9tojstringEJPN4java4lang6StringEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3b30:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3b34 = load i64, i64* @rdi, align 8
  store i64 %v2_3b34, i64* @rax, align 8
  store i64 %v2_3b34, i64* @rdx, align 8
  ret i64 %v2_3b34
}

define i64 @_ZN3org4luaj3vm27Varargs7toshortEJsi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3b50:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3b54 = load i64, i64* @rdi, align 8
  store i64 %v2_3b54, i64* @rax, align 8
  store i64 %v2_3b54, i64* @rdx, align 8
  ret i64 %v2_3b54
}

define i64 @_ZN3org4luaj3vm27Varargs10touserdataEJPN4java4lang6ObjectEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_3b70:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3b74 = load i64, i64* @rdi, align 8
  store i64 %v2_3b74, i64* @rax, align 8
  store i64 %v2_3b74, i64* @rdx, align 8
  ret i64 %v2_3b74
}

define i64 @_ZN3org4luaj3vm27Varargs10touserdataEJPN4java4lang6ObjectEiPNS4_5ClassE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3b90:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3b91 = load i64, i64* @rdi, align 8
  store i64 %v2_3b91, i64* @rax, align 8
  store i64 %v2_3b91, i64* @rcx, align 8
  ret i64 %v2_3b91
}

define i64 @_ZN3org4luaj3vm27Varargs8toStringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3bb0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3bb4 = load i64, i64* @rdi, align 8
  store i64 %v2_3bb4, i64* @rax, align 8
  ret i64 %v2_3bb4
}

define i64 @"_ZN3org4luaj3vm220Varargs$ArrayVarargs4nargEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3bd0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3bd0 = load i64, i64* @rbx, align 8
  %v0_3bd1 = load i64, i64* @rdi, align 8
  %v1_3bd1 = add i64 %v0_3bd1, 8
  %v2_3bd1 = inttoptr i64 %v1_3bd1 to i64*
  %v3_3bd1 = load i64, i64* %v2_3bd1, align 8
  store i64 %v3_3bd1, i64* @rax, align 8
  %v1_3bd5 = add i64 %v0_3bd1, 16
  %v2_3bd5 = inttoptr i64 %v1_3bd5 to i64*
  %v3_3bd5 = load i64, i64* %v2_3bd5, align 8
  store i64 %v3_3bd5, i64* @rdi, align 8
  %v1_3bd9 = add i64 %v3_3bd1, 8
  %v2_3bd9 = inttoptr i64 %v1_3bd9 to i32*
  %v3_3bd9 = load i32, i32* %v2_3bd9, align 4
  %v4_3bd9 = zext i32 %v3_3bd9 to i64
  store i64 %v4_3bd9, i64* @rbx, align 8
  %v1_3bdc = inttoptr i64 %v3_3bd5 to i64*
  %v2_3bdc = load i64, i64* %v1_3bdc, align 8
  %v1_3be2 = trunc i64 %v2_3bdc to i32
  %v4_3be2 = add i32 %v1_3be2, %v3_3bd9
  %v20_3be2 = zext i32 %v4_3be2 to i64
  store i64 %v20_3be2, i64* @rax, align 8
  store i64 %v0_3bd0, i64* @rbx, align 8
  ret i64 %v20_3be2
}

define i64 @"_ZN3org4luaj3vm218Varargs$SubVarargs4arg1EJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3bf0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3bf4 = load i64, i64* @rdi, align 8
  %v1_3bf4 = add i64 %v0_3bf4, 8
  %v2_3bf4 = inttoptr i64 %v1_3bf4 to i64*
  %v3_3bf4 = load i64, i64* %v2_3bf4, align 8
  store i64 %v3_3bf4, i64* @rax, align 8
  %v1_3bfb = inttoptr i64 %v3_3bf4 to i64*
  %v2_3bfb = load i64, i64* %v1_3bfb, align 8
  store i64 %v2_3bfb, i64* @rdx, align 8
  store i64 %v3_3bf4, i64* @rdi, align 8
  ret i64 %v3_3bf4
}

define i64 @"_ZN3org4luaj3vm218Varargs$SubVarargs4nargEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3c10:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3c10 = add i64 %arg1, 20
  %v2_3c10 = inttoptr i64 %v1_3c10 to i32*
  %v3_3c10 = load i32, i32* %v2_3c10, align 4
  %v2_3c13 = add i32 %v3_3c10, 1
  %v17_3c13 = zext i32 %v2_3c13 to i64
  store i64 %v17_3c13, i64* @rax, align 8
  %v3_3c16 = add i64 %arg1, 16
  %v4_3c16 = inttoptr i64 %v3_3c16 to i32*
  %v5_3c16 = load i32, i32* %v4_3c16, align 4
  %v6_3c16 = sub i32 %v2_3c13, %v5_3c16
  %v22_3c16 = zext i32 %v6_3c16 to i64
  store i64 %v22_3c16, i64* @rax, align 8
  ret i64 %v22_3c16
}

define i64 @"_ZN3org4luaj3vm224Varargs$ArrayPartVarargs4nargEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3c20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3c20 = load i64, i64* @rbx, align 8
  %v0_3c21 = load i64, i64* @rdi, align 8
  %v1_3c21 = add i64 %v0_3c21, 24
  %v2_3c21 = inttoptr i64 %v1_3c21 to i32*
  %v3_3c21 = load i32, i32* %v2_3c21, align 4
  %v4_3c21 = zext i32 %v3_3c21 to i64
  store i64 %v4_3c21, i64* @rbx, align 8
  %v1_3c24 = add i64 %v0_3c21, 32
  %v2_3c24 = inttoptr i64 %v1_3c24 to i64*
  %v3_3c24 = load i64, i64* %v2_3c24, align 8
  store i64 %v3_3c24, i64* @rdi, align 8
  %v1_3c28 = inttoptr i64 %v3_3c24 to i64*
  %v2_3c28 = load i64, i64* %v1_3c28, align 8
  %v1_3c2e = trunc i64 %v2_3c28 to i32
  %v4_3c2e = add i32 %v1_3c2e, %v3_3c21
  %v20_3c2e = zext i32 %v4_3c2e to i64
  store i64 %v20_3c2e, i64* @rax, align 8
  store i64 %v0_3c20, i64* @rbx, align 8
  ret i64 %v20_3c2e
}

define i64 @_ZN3org4luaj3vm29LuaThread4typeEJiv() local_unnamed_addr {
dec_label_pc_3c40:
  store i64 8, i64* @rax, align 8
  ret i64 8
}

define i64 @"_ZN3org4luaj3vm29LuaThread9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_3c50:
  %v0_3c50 = load i64, i64* inttoptr (i64 15447 to i64*), align 8
  store i64 %v0_3c50, i64* @rax, align 8
  ret i64 %v0_3c50
}

define i64 @_ZN3org4luaj3vm29LuaThread9optthreadEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3c60:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaThread11checkthreadEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_3c70:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaThread12getmetatableEJPNS1_8LuaValueEv() local_unnamed_addr {
dec_label_pc_3c80:
  %v0_3c80 = load i64, i64* inttoptr (i64 15495 to i64*), align 8
  store i64 %v0_3c80, i64* @rax, align 8
  ret i64 %v0_3c80
}

define i64 @_ZN3org4luaj3vm29LuaThread12isMainThreadEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3c90:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3c90 = add i64 %arg1, 8
  %v2_3c90 = inttoptr i64 %v1_3c90 to i64*
  %v3_3c90 = load i64, i64* %v2_3c90, align 8
  store i64 %v3_3c90, i64* @rax, align 8
  %v1_3c94 = add i64 %v3_3c90, 24
  %v2_3c94 = inttoptr i64 %v1_3c94 to i64*
  %v3_3c94 = load i64, i64* %v2_3c94, align 8
  %v10_3c94 = icmp eq i64 %v3_3c94, 0
  %v1_3c99 = zext i1 %v10_3c94 to i64
  %v3_3c99 = and i64 %v3_3c90, -256
  %v4_3c99 = or i64 %v1_3c99, %v3_3c99
  store i64 %v4_3c99, i64* @rax, align 8
  ret i64 %v4_3c99
}

define i64 @_ZN3org4luaj3vm211LuaUserdata4typeEJiv() local_unnamed_addr {
dec_label_pc_3ca0:
  store i64 7, i64* @rax, align 8
  ret i64 7
}

define i64 @"_ZN3org4luaj3vm211LuaUserdata9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_3cb0:
  %v0_3cb0 = load i64, i64* inttoptr (i64 15543 to i64*), align 8
  store i64 %v0_3cb0, i64* @rax, align 8
  ret i64 %v0_3cb0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata8hashCodeEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3cc0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3cc4 = load i64, i64* @rdi, align 8
  %v1_3cc4 = add i64 %v0_3cc4, 8
  %v2_3cc4 = inttoptr i64 %v1_3cc4 to i64*
  %v3_3cc4 = load i64, i64* %v2_3cc4, align 8
  store i64 %v3_3cc4, i64* @rdi, align 8
  %v1_3cc8 = inttoptr i64 %v3_3cc4 to i64*
  %v2_3cc8 = load i64, i64* %v1_3cc8, align 8
  store i64 %v2_3cc8, i64* @rax, align 8
  ret i64 %v2_3cc8
}

define i64 @_ZN3org4luaj3vm211LuaUserdata11optuserdataEJPN4java4lang6ObjectES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ce0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3ce0 = add i64 %arg1, 8
  %v2_3ce0 = inttoptr i64 %v1_3ce0 to i64*
  %v3_3ce0 = load i64, i64* %v2_3ce0, align 8
  store i64 %v3_3ce0, i64* @rax, align 8
  ret i64 %v3_3ce0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata12getmetatableEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3cf0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3cf0 = add i64 %arg1, 16
  %v2_3cf0 = inttoptr i64 %v1_3cf0 to i64*
  %v3_3cf0 = load i64, i64* %v2_3cf0, align 8
  store i64 %v3_3cf0, i64* @rax, align 8
  ret i64 %v3_3cf0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata12setmetatableEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3d00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v2_3d03 = add i64 %arg1, 16
  %v3_3d03 = inttoptr i64 %v2_3d03 to i64*
  store i64 %arg2, i64* %v3_3d03, align 8
  %v0_3d07 = load i64, i64* @rax, align 8
  ret i64 %v0_3d07
}

define i64 @_ZN3org4luaj3vm211LuaUserdata13checkuserdataEJPN4java4lang6ObjectEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3d10:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3d10 = add i64 %arg1, 8
  %v2_3d10 = inttoptr i64 %v1_3d10 to i64*
  %v3_3d10 = load i64, i64* %v2_3d10, align 8
  store i64 %v3_3d10, i64* @rax, align 8
  ret i64 %v3_3d10
}

define i64 @_ZN3org4luaj3vm211LuaUserdata2eqEJPNS1_8LuaValueES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3d20:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3d24 = load i64, i64* @rdi, align 8
  store i64 %v2_3d24, i64* @rax, align 8
  %v4_3d2d = trunc i64 %v2_3d24 to i8
  %v5_3d2d = icmp eq i8 %v4_3d2d, 0
  %v0_3d2f = load i64, i64* inttoptr (i64 15670 to i64*), align 8
  store i64 %v0_3d2f, i64* @rax, align 8
  %v2_3d36 = load i64, i64* inttoptr (i64 15678 to i64*), align 8
  %v3_3d36 = select i1 %v5_3d2d, i64 %v2_3d36, i64 %v0_3d2f
  store i64 %v3_3d36, i64* @rax, align 8
  ret i64 %v3_3d36
}

define i64 @_ZN3org4luaj3vm211LuaUserdata5raweqEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3d50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3d57 = load i64, i64* @rdi, align 8
  store i64 %v0_3d57, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm211LuaFunction4typeEJiv() local_unnamed_addr {
dec_label_pc_3d70:
  store i64 6, i64* @rax, align 8
  ret i64 6
}

define i64 @"_ZN3org4luaj3vm211LuaFunction9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_3d80:
  %v0_3d80 = load i64, i64* inttoptr (i64 15751 to i64*), align 8
  store i64 %v0_3d80, i64* @rax, align 8
  ret i64 %v0_3d80
}

define i64 @_ZN3org4luaj3vm211LuaFunction13checkfunctionEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_3d90:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm211LuaFunction11optfunctionEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3da0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm211LuaFunction12getmetatableEJPNS1_8LuaValueEv() local_unnamed_addr {
dec_label_pc_3db0:
  %v0_3db0 = load i64, i64* inttoptr (i64 15799 to i64*), align 8
  store i64 %v0_3db0, i64* @rax, align 8
  ret i64 %v0_3db0
}

define i64 @_ZN3org4luaj3vm211LuaFunction4nameEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3dc0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3dc4 = load i64, i64* @rdi, align 8
  store i64 %v2_3dc4, i64* @rax, align 8
  ret i64 %v2_3dc4
}

define i64 @_ZN3org4luaj3vm25Print2idEJPN4java4lang6StringEPNS1_9PrototypeE() local_unnamed_addr {
dec_label_pc_3de0:
  %v0_3de0 = load i64, i64* inttoptr (i64 15847 to i64*), align 8
  store i64 %v0_3de0, i64* @rax, align 8
  ret i64 %v0_3de0
}

define i64 @_ZN3org4luaj3vm28LuaError8getCauseEJPN4java4lang9ThrowableEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3df0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3df0 = add i64 %arg1, 64
  %v2_3df0 = inttoptr i64 %v1_3df0 to i64*
  %v3_3df0 = load i64, i64* %v2_3df0, align 8
  store i64 %v3_3df0, i64* @rax, align 8
  ret i64 %v3_3df0
}

define i64 @"_ZN3org4luaj3vm218Globals$UTF8Stream5closeEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e00:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3e04 = load i64, i64* @rdi, align 8
  %v1_3e04 = add i64 %v0_3e04, 32
  %v2_3e04 = inttoptr i64 %v1_3e04 to i64*
  %v3_3e04 = load i64, i64* %v2_3e04, align 8
  store i64 %v3_3e04, i64* @rdi, align 8
  %v1_3e08 = inttoptr i64 %v3_3e04 to i64*
  %v2_3e08 = load i64, i64* %v1_3e08, align 8
  store i64 %v2_3e08, i64* @rax, align 8
  ret i64 %v2_3e08
}

define i64 @"_ZN3org4luaj3vm217Globals$StrReader5closeEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e20:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3e20 = add i64 %arg1, 28
  %v2_3e20 = inttoptr i64 %v1_3e20 to i32*
  %v3_3e20 = load i32, i32* %v2_3e20, align 4
  %v4_3e20 = zext i32 %v3_3e20 to i64
  store i64 %v4_3e20, i64* @rax, align 8
  %v3_3e23 = add i64 %arg1, 24
  %v4_3e23 = inttoptr i64 %v3_3e23 to i32*
  store i32 %v3_3e20, i32* %v4_3e23, align 4
  %v0_3e26 = load i64, i64* @rax, align 8
  ret i64 %v0_3e26
}

define i64 @"_ZN3org4luaj3vm222Globals$BufferedStream5closeEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e30:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3e34 = load i64, i64* @rdi, align 8
  %v1_3e34 = add i64 %v0_3e34, 24
  %v2_3e34 = inttoptr i64 %v1_3e34 to i64*
  %v3_3e34 = load i64, i64* %v2_3e34, align 8
  store i64 %v3_3e34, i64* @rdi, align 8
  %v1_3e38 = inttoptr i64 %v3_3e34 to i64*
  %v2_3e38 = load i64, i64* %v1_3e38, align 8
  store i64 %v2_3e38, i64* @rax, align 8
  ret i64 %v2_3e38
}

define i64 @_ZN3org4luaj3vm27Globals12checkglobalsEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @"_ZN3org4luaj3vm230Globals$AbstractBufferedStream4readEJiP6JArrayIcE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3e60:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_3e64 = add i64 %arg2, 8
  %v2_3e64 = inttoptr i64 %v1_3e64 to i32*
  %v3_3e64 = load i32, i32* %v2_3e64, align 4
  %v4_3e64 = zext i32 %v3_3e64 to i64
  store i64 %v4_3e64, i64* @rcx, align 8
  %v2_3e67 = load i64, i64* @rdi, align 8
  store i64 %v2_3e67, i64* @rax, align 8
  store i64 0, i64* @rdx, align 8
  ret i64 %v2_3e67
}

define i64 @"_ZN3org4luaj3vm230Globals$AbstractBufferedStream4skipEJxx"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3e80:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3e80 = add i64 %arg1, 16
  %v2_3e80 = inttoptr i64 %v1_3e80 to i32*
  %v3_3e80 = load i32, i32* %v2_3e80, align 4
  %v4_3e80 = sext i32 %v3_3e80 to i64
  store i64 %v4_3e80, i64* @rdx, align 8
  %v1_3e84 = add i64 %arg1, 20
  %v2_3e84 = inttoptr i64 %v1_3e84 to i32*
  %v3_3e84 = load i32, i32* %v2_3e84, align 4
  %v4_3e87 = sub i32 %v3_3e84, %v3_3e80
  %v20_3e87 = zext i32 %v4_3e87 to i64
  %v2_3e8b = sub i64 %v20_3e87, %arg2
  %v10_3e8b = and i64 %v2_3e8b, %arg2
  %v11_3e8b = icmp slt i64 %v10_3e8b, 0
  %v12_3e8b = icmp eq i64 %v2_3e8b, 0
  %v13_3e8b = icmp slt i64 %v2_3e8b, 0
  %v3_3e8e = icmp eq i1 %v13_3e8b, %v11_3e8b
  %v4_3e8e = icmp eq i1 %v12_3e8b, false
  %v5_3e8e = icmp eq i1 %v3_3e8e, %v4_3e8e
  %v8_3e8e = select i1 %v5_3e8e, i64 %arg2, i64 %v20_3e87
  store i64 %v8_3e8e, i64* @rax, align 8
  %v2_3e92 = add i64 %v8_3e8e, %v4_3e80
  store i64 %v2_3e92, i64* @rdx, align 8
  %v1_3e95 = trunc i64 %v2_3e92 to i32
  store i32 %v1_3e95, i32* %v2_3e80, align 4
  %v0_3e98 = load i64, i64* @rax, align 8
  ret i64 %v0_3e98
}

define i64 @"_ZN3org4luaj3vm230Globals$AbstractBufferedStream9availableEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ea0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3ea0 = add i64 %arg1, 20
  %v2_3ea0 = inttoptr i64 %v1_3ea0 to i32*
  %v3_3ea0 = load i32, i32* %v2_3ea0, align 4
  %v4_3ea0 = zext i32 %v3_3ea0 to i64
  store i64 %v4_3ea0, i64* @rax, align 8
  %v3_3ea3 = add i64 %arg1, 16
  %v4_3ea3 = inttoptr i64 %v3_3ea3 to i32*
  %v5_3ea3 = load i32, i32* %v4_3ea3, align 4
  %v6_3ea3 = sub i32 %v3_3ea0, %v5_3ea3
  %v22_3ea3 = zext i32 %v6_3ea3 to i64
  store i64 %v22_3ea3, i64* @rax, align 8
  ret i64 %v22_3ea3
}

define i64 @_ZN3org4luaj3vm217NonTableMetatable10toLuaValueEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3eb0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3eb0 = add i64 %arg1, 8
  %v2_3eb0 = inttoptr i64 %v1_3eb0 to i64*
  %v3_3eb0 = load i64, i64* %v2_3eb0, align 8
  store i64 %v3_3eb0, i64* @rax, align 8
  ret i64 %v3_3eb0
}

define i64 @_ZN3org4luaj3vm210LuaInteger6tobyteEJcv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ec0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3ec0 = add i64 %arg1, 8
  %v2_3ec0 = inttoptr i64 %v1_3ec0 to i32*
  %v3_3ec0 = load i32, i32* %v2_3ec0, align 4
  %v4_3ec0 = zext i32 %v3_3ec0 to i64
  store i64 %v4_3ec0, i64* @rax, align 8
  ret i64 %v4_3ec0
}

define i64 @_ZN3org4luaj3vm210LuaInteger6tocharEJwv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ed0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3ed0 = add i64 %arg1, 8
  %v2_3ed0 = inttoptr i64 %v1_3ed0 to i32*
  %v3_3ed0 = load i32, i32* %v2_3ed0, align 4
  %v4_3ed0 = zext i32 %v3_3ed0 to i64
  store i64 %v4_3ed0, i64* @rax, align 8
  ret i64 %v4_3ed0
}

define i128 @_ZN3org4luaj3vm210LuaInteger7tofloatEJfv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ee0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ee0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_3ee0 = call i128 @__asm_pxor(i128 %v0_3ee0, i128 %v0_3ee0)
  store i128 %v2_3ee0, i128* %xmm0.global-to-local, align 8
  %v0_3ee4 = load i64, i64* @rdi, align 8
  %v1_3ee4 = add i64 %v0_3ee4, 8
  %v2_3ee4 = inttoptr i64 %v1_3ee4 to i32*
  %v3_3ee4 = load i32, i32* %v2_3ee4, align 4
  %v4_3ee4 = call i128 @__asm_cvtsi2ss(i32 %v3_3ee4)
  store i128 %v4_3ee4, i128* %xmm0.global-to-local, align 8
  ret i128 %v4_3ee4
}

define i64 @_ZN3org4luaj3vm210LuaInteger7toshortEJsv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ef0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3ef0 = add i64 %arg1, 8
  %v2_3ef0 = inttoptr i64 %v1_3ef0 to i32*
  %v3_3ef0 = load i32, i32* %v2_3ef0, align 4
  %v4_3ef0 = zext i32 %v3_3ef0 to i64
  store i64 %v4_3ef0, i64* @rax, align 8
  ret i64 %v4_3ef0
}

define i128 @_ZN3org4luaj3vm210LuaInteger9optdoubleEJdd(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f00:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3f00 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_3f00 = call i128 @__asm_pxor(i128 %v0_3f00, i128 %v0_3f00)
  store i128 %v2_3f00, i128* %xmm0.global-to-local, align 8
  %v0_3f04 = load i64, i64* @rdi, align 8
  %v1_3f04 = add i64 %v0_3f04, 8
  %v2_3f04 = inttoptr i64 %v1_3f04 to i32*
  %v3_3f04 = load i32, i32* %v2_3f04, align 4
  %v4_3f04 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_3f04)
  store i128 %v4_3f04, i128* %xmm0.global-to-local, align 8
  ret i128 %v4_3f04
}

define i64 @_ZN3org4luaj3vm210LuaInteger6optintEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f10:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3f10 = add i64 %arg1, 8
  %v2_3f10 = inttoptr i64 %v1_3f10 to i32*
  %v3_3f10 = load i32, i32* %v2_3f10, align 4
  %v4_3f10 = zext i32 %v3_3f10 to i64
  store i64 %v4_3f10, i64* @rax, align 8
  ret i64 %v4_3f10
}

define i64 @_ZN3org4luaj3vm210LuaInteger10optintegerEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm210LuaInteger7optlongEJxx(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f30:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3f30 = add i64 %arg1, 8
  %v2_3f30 = inttoptr i64 %v1_3f30 to i32*
  %v3_3f30 = load i32, i32* %v2_3f30, align 4
  %v4_3f30 = sext i32 %v3_3f30 to i64
  store i64 %v4_3f30, i64* @rax, align 8
  ret i64 %v4_3f30
}

define i64 @_ZN3org4luaj3vm210LuaInteger12checkintegerEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f40:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm210LuaInteger2eqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3f50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3f57 = load i64, i64* @rdi, align 8
  %v1_3f57 = add i64 %v0_3f57, 8
  %v2_3f57 = inttoptr i64 %v1_3f57 to i32*
  %v3_3f57 = load i32, i32* %v2_3f57, align 4
  %v4_3f57 = zext i32 %v3_3f57 to i64
  store i64 %v4_3f57, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_3f66 = trunc i64 %arg2 to i8
  %v5_3f66 = icmp eq i8 %v4_3f66, 0
  %v0_3f68 = load i64, i64* inttoptr (i64 16239 to i64*), align 8
  store i64 %v0_3f68, i64* @rax, align 8
  %v2_3f6f = load i64, i64* inttoptr (i64 16247 to i64*), align 8
  %v3_3f6f = select i1 %v5_3f66, i64 %v2_3f6f, i64 %v0_3f68
  store i64 %v3_3f6f, i64* @rax, align 8
  ret i64 %v3_3f6f
}

define i64 @_ZN3org4luaj3vm210LuaInteger5raweqEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3f80:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3f87 = load i64, i64* @rdi, align 8
  %v1_3f87 = add i64 %v0_3f87, 8
  %v2_3f87 = inttoptr i64 %v1_3f87 to i32*
  %v3_3f87 = load i32, i32* %v2_3f87, align 4
  %v4_3f87 = zext i32 %v3_3f87 to i64
  store i64 %v4_3f87, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger5raweqEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_3fa0:
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_3fa0 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_3fa0 = call i128 @__asm_pxor(i128 %v0_3fa0, i128 %v0_3fa0)
  store i128 %v2_3fa0, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %v0_3fa9 = load i64, i64* @rdi, align 8
  %v1_3fa9 = add i64 %v0_3fa9, 8
  %v2_3fa9 = inttoptr i64 %v1_3fa9 to i32*
  %v3_3fa9 = load i32, i32* %v2_3fa9, align 4
  %v4_3fa9 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_3fa9)
  store i128 %v4_3fa9, i128* %xmm1.global-to-local, align 8
  %v1_3fae = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_3fa9, i128 %v1_3fae)
  %v0_3fb2 = load i1, i1* %pf.global-to-local, align 1
  %v1_3fb2 = icmp eq i1 %v0_3fb2, false
  %v2_3fb2 = zext i1 %v1_3fb2 to i64
  %v3_3fb2 = load i64, i64* @rax, align 8
  %v4_3fb2 = and i64 %v3_3fb2, 4294967040
  %v5_3fb2 = or i64 %v4_3fb2, %v2_3fb2
  %v0_3fb5 = load i1, i1* %zf.global-to-local, align 1
  %v1_3fb5 = icmp eq i1 %v0_3fb5, false
  %v4_3fb5 = load i64, i64* @rdx, align 8
  %v6_3fb5.v = select i1 %v1_3fb5, i64 %v4_3fb5, i64 %v5_3fb2
  %v7_3fb5 = and i64 %v6_3fb5.v, 4294967295
  store i64 %v7_3fb5, i64* @rax, align 8
  ret i64 %v7_3fb5
}

define i64 @_ZN3org4luaj3vm210LuaInteger5raweqEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3fc0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3fc0 = add i64 %arg1, 8
  %v2_3fc0 = inttoptr i64 %v1_3fc0 to i32*
  %v3_3fc0 = load i32, i32* %v2_3fc0, align 4
  %v5_3fc0 = trunc i64 %arg2 to i32
  %v16_3fc0 = icmp eq i32 %v3_3fc0, %v5_3fc0
  %v1_3fc3 = zext i1 %v16_3fc0 to i64
  %v2_3fc3 = load i64, i64* @rax, align 8
  %v3_3fc3 = and i64 %v2_3fc3, -256
  %v4_3fc3 = or i64 %v3_3fc3, %v1_3fc3
  store i64 %v4_3fc3, i64* @rax, align 8
  ret i64 %v4_3fc3
}

define i64 @_ZN3org4luaj3vm210LuaInteger3addEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3fd0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3fd7 = load i64, i64* @rdi, align 8
  %v1_3fd7 = add i64 %v0_3fd7, 8
  %v2_3fd7 = inttoptr i64 %v1_3fd7 to i32*
  %v3_3fd7 = load i32, i32* %v2_3fd7, align 4
  %v4_3fd7 = zext i32 %v3_3fd7 to i64
  store i64 %v4_3fd7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger3subEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3ff0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_3ff7 = load i64, i64* @rdi, align 8
  %v1_3ff7 = add i64 %v0_3ff7, 8
  %v2_3ff7 = inttoptr i64 %v1_3ff7 to i32*
  %v3_3ff7 = load i32, i32* %v2_3ff7, align 4
  %v4_3ff7 = zext i32 %v3_3ff7 to i64
  store i64 %v4_3ff7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger3mulEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4010:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4017 = load i64, i64* @rdi, align 8
  %v1_4017 = add i64 %v0_4017, 8
  %v2_4017 = inttoptr i64 %v1_4017 to i32*
  %v3_4017 = load i32, i32* %v2_4017, align 4
  %v4_4017 = zext i32 %v3_4017 to i64
  store i64 %v4_4017, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger3powEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4030:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4037 = load i64, i64* @rdi, align 8
  %v1_4037 = add i64 %v0_4037, 8
  %v2_4037 = inttoptr i64 %v1_4037 to i32*
  %v3_4037 = load i32, i32* %v2_4037, align 4
  %v4_4037 = zext i32 %v3_4037 to i64
  store i64 %v4_4037, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger3divEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4050:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4050 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_4050 = call i128 @__asm_pxor(i128 %v0_4050, i128 %v0_4050)
  store i128 %v2_4050, i128* %xmm0.global-to-local, align 8
  %v2_4058 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_4058, i64* @rax, align 8
  %v0_405b = load i64, i64* @rdi, align 8
  %v1_405b = add i64 %v0_405b, 8
  %v2_405b = inttoptr i64 %v1_405b to i32*
  %v3_405b = load i32, i32* %v2_405b, align 4
  %v4_405b = call i128 @__asm_cvtsi2sd.7468(i32 %v3_405b)
  store i128 %v4_405b, i128* %xmm0.global-to-local, align 8
  %v0_4060 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_4060, i64* @rdi, align 8
  %v0_406d = load i64, i64* @rax, align 8
  ret i64 %v0_406d
}

define i64 @_ZN3org4luaj3vm210LuaInteger3modEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4070:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4070 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_4070 = call i128 @__asm_pxor(i128 %v0_4070, i128 %v0_4070)
  store i128 %v2_4070, i128* %xmm0.global-to-local, align 8
  %v2_4078 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_4078, i64* @rax, align 8
  %v0_407b = load i64, i64* @rdi, align 8
  %v1_407b = add i64 %v0_407b, 8
  %v2_407b = inttoptr i64 %v1_407b to i32*
  %v3_407b = load i32, i32* %v2_407b, align 4
  %v4_407b = call i128 @__asm_cvtsi2sd.7468(i32 %v3_407b)
  store i128 %v4_407b, i128* %xmm0.global-to-local, align 8
  %v0_4080 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_4080, i64* @rdi, align 8
  %v0_408d = load i64, i64* @rax, align 8
  ret i64 %v0_408d
}

define i64 @_ZN3org4luaj3vm210LuaInteger2ltEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4090:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4097 = load i64, i64* @rdi, align 8
  %v1_4097 = add i64 %v0_4097, 8
  %v2_4097 = inttoptr i64 %v1_4097 to i32*
  %v3_4097 = load i32, i32* %v2_4097, align 4
  %v4_4097 = zext i32 %v3_4097 to i64
  store i64 %v4_4097, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_40a6 = trunc i64 %arg2 to i8
  %v5_40a6 = icmp eq i8 %v4_40a6, 0
  %v0_40a8 = load i64, i64* inttoptr (i64 16559 to i64*), align 8
  store i64 %v0_40a8, i64* @rax, align 8
  %v2_40af = load i64, i64* inttoptr (i64 16567 to i64*), align 8
  %v3_40af = select i1 %v5_40a6, i64 %v2_40af, i64 %v0_40a8
  store i64 %v3_40af, i64* @rax, align 8
  ret i64 %v3_40af
}

define i64 @_ZN3org4luaj3vm210LuaInteger2ltEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_40c0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_40c0 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_40c0 = call i128 @__asm_pxor(i128 %v0_40c0, i128 %v0_40c0)
  store i128 %v2_40c0, i128* %xmm1.global-to-local, align 8
  %v0_40c4 = load i64, i64* inttoptr (i64 16587 to i64*), align 8
  store i64 %v0_40c4, i64* @rax, align 8
  %v0_40cb = load i64, i64* @rdi, align 8
  %v1_40cb = add i64 %v0_40cb, 8
  %v2_40cb = inttoptr i64 %v1_40cb to i32*
  %v3_40cb = load i32, i32* %v2_40cb, align 4
  %v4_40cb = call i128 @__asm_cvtsi2sd.7468(i32 %v3_40cb)
  store i128 %v4_40cb, i128* %xmm1.global-to-local, align 8
  %v0_40d0 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_40d0, i128 %v4_40cb)
  %v0_40d4 = load i1, i1* %cf.global-to-local, align 1
  %v1_40d4 = load i1, i1* %zf.global-to-local, align 1
  %v2_40d4 = or i1 %v0_40d4, %v1_40d4
  %v3_40d4 = icmp ne i1 %v2_40d4, true
  %v4_40d4 = load i64, i64* @rax, align 8
  %v5_40d4 = load i64, i64* inttoptr (i64 16604 to i64*), align 8
  %v6_40d4 = select i1 %v3_40d4, i64 %v5_40d4, i64 %v4_40d4
  store i64 %v6_40d4, i64* @rax, align 8
  ret i64 %v6_40d4
}

define i64 @_ZN3org4luaj3vm210LuaInteger2ltEJPNS1_8LuaValueEi() local_unnamed_addr {
dec_label_pc_40e0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_40e4() local_unnamed_addr {
dec_label_pc_40e4:
  %of.global-to-local = alloca i1, align 1
  %sf.global-to-local = alloca i1, align 1
  %v0_40e4 = load i32, i32* inttoptr (i64 16618 to i32*), align 4
  %v1_40e4 = zext i32 %v0_40e4 to i64
  store i64 %v1_40e4, i64* @rax, align 8
  %v0_40ea = load i1, i1* %sf.global-to-local, align 1
  %v1_40ea = load i1, i1* %of.global-to-local, align 1
  %v2_40ea = icmp eq i1 %v0_40ea, %v1_40ea
  %v4_40ea = load i64, i64* inttoptr (i64 16626 to i64*), align 8
  %v5_40ea = select i1 %v2_40ea, i64 %v4_40ea, i64 %v1_40e4
  store i64 %v5_40ea, i64* @rax, align 8
  ret i64 %v5_40ea
}

define i64 @_ZN3org4luaj3vm210LuaInteger4lt_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4100:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4107 = load i64, i64* @rdi, align 8
  %v1_4107 = add i64 %v0_4107, 8
  %v2_4107 = inttoptr i64 %v1_4107 to i32*
  %v3_4107 = load i32, i32* %v2_4107, align 4
  %v4_4107 = zext i32 %v3_4107 to i64
  store i64 %v4_4107, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger4lt_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4120:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4120 = add i64 %arg1, 8
  %v2_4120 = inttoptr i64 %v1_4120 to i32*
  %v3_4120 = load i32, i32* %v2_4120, align 4
  %v5_4120 = trunc i64 %arg2 to i32
  %v6_4120 = sub i32 %v3_4120, %v5_4120
  %v12_4120 = xor i32 %v3_4120, %v5_4120
  %v13_4120 = xor i32 %v6_4120, %v3_4120
  %v14_4120 = and i32 %v13_4120, %v12_4120
  %v15_4120 = icmp slt i32 %v14_4120, 0
  %v17_4120 = icmp slt i32 %v6_4120, 0
  %v2_4123 = icmp ne i1 %v17_4120, %v15_4120
  %v3_4123 = zext i1 %v2_4123 to i64
  %v4_4123 = load i64, i64* @rax, align 8
  %v5_4123 = and i64 %v4_4123, -256
  %v6_4123 = or i64 %v5_4123, %v3_4123
  store i64 %v6_4123, i64* @rax, align 8
  ret i64 %v6_4123
}

define i64 @_ZN3org4luaj3vm210LuaInteger4lt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_4130:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_4130 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_4130 = call i128 @__asm_pxor(i128 %v0_4130, i128 %v0_4130)
  store i128 %v2_4130, i128* %xmm1.global-to-local, align 8
  %v0_4134 = load i64, i64* @rdi, align 8
  %v1_4134 = add i64 %v0_4134, 8
  %v2_4134 = inttoptr i64 %v1_4134 to i32*
  %v3_4134 = load i32, i32* %v2_4134, align 4
  %v4_4134 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_4134)
  store i128 %v4_4134, i128* %xmm1.global-to-local, align 8
  %v0_4139 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_4139, i128 %v4_4134)
  %v0_413d = load i1, i1* %cf.global-to-local, align 1
  %v1_413d = load i1, i1* %zf.global-to-local, align 1
  %v2_413d = or i1 %v0_413d, %v1_413d
  %v3_413d = icmp ne i1 %v2_413d, true
  %v4_413d = zext i1 %v3_413d to i64
  %v5_413d = load i64, i64* @rax, align 8
  %v6_413d = and i64 %v5_413d, -256
  %v7_413d = or i64 %v4_413d, %v6_413d
  store i64 %v7_413d, i64* @rax, align 8
  ret i64 %v7_413d
}

define i64 @_ZN3org4luaj3vm210LuaInteger4lteqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4150:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4157 = load i64, i64* @rdi, align 8
  %v1_4157 = add i64 %v0_4157, 8
  %v2_4157 = inttoptr i64 %v1_4157 to i32*
  %v3_4157 = load i32, i32* %v2_4157, align 4
  %v4_4157 = zext i32 %v3_4157 to i64
  store i64 %v4_4157, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4166 = trunc i64 %arg2 to i8
  %v5_4166 = icmp eq i8 %v4_4166, 0
  %v0_4168 = load i64, i64* inttoptr (i64 16751 to i64*), align 8
  store i64 %v0_4168, i64* @rax, align 8
  %v2_416f = load i64, i64* inttoptr (i64 16759 to i64*), align 8
  %v3_416f = select i1 %v5_4166, i64 %v2_416f, i64 %v0_4168
  store i64 %v3_416f, i64* @rax, align 8
  ret i64 %v3_416f
}

define i64 @_ZN3org4luaj3vm210LuaInteger4lteqEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_4180:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_4180 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_4180 = call i128 @__asm_pxor(i128 %v0_4180, i128 %v0_4180)
  store i128 %v2_4180, i128* %xmm1.global-to-local, align 8
  %v0_4184 = load i64, i64* @rdi, align 8
  %v1_4184 = add i64 %v0_4184, 8
  %v2_4184 = inttoptr i64 %v1_4184 to i32*
  %v3_4184 = load i32, i32* %v2_4184, align 4
  %v4_4184 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_4184)
  store i128 %v4_4184, i128* %xmm1.global-to-local, align 8
  %v0_4189 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_4189, i128 %v4_4184)
  %v0_418d = load i1, i1* %cf.global-to-local, align 1
  %v1_418d = load i1, i1* %zf.global-to-local, align 1
  %v2_418d = or i1 %v0_418d, %v1_418d
  br i1 %v2_418d, label %dec_label_pc_41a0, label %dec_label_pc_418f

dec_label_pc_418f:                                ; preds = %dec_label_pc_41a6, %dec_label_pc_4180
  %v0_418f = load i64, i64* inttoptr (i64 16790 to i64*), align 8
  store i64 %v0_418f, i64* @rax, align 8
  ret i64 %v0_418f

dec_label_pc_41a0:                                ; preds = %dec_label_pc_4180
  %v1_41a0 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_4184, i128 %v1_41a0)
  %v0_41a4 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_41a4, label %dec_label_pc_41a8, label %dec_label_pc_41a6

dec_label_pc_41a6:                                ; preds = %dec_label_pc_41a0
  %v0_41a6 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_41a6, label %dec_label_pc_418f, label %dec_label_pc_41a8

dec_label_pc_41a8:                                ; preds = %dec_label_pc_41a6, %dec_label_pc_41a0
  %v0_41a8 = load i64, i64* inttoptr (i64 16815 to i64*), align 8
  store i64 %v0_41a8, i64* @rax, align 8
  ret i64 %v0_41a8
}

define i64 @_ZN3org4luaj3vm210LuaInteger4lteqEJPNS1_8LuaValueEi() local_unnamed_addr {
dec_label_pc_41b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_41b7(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_41b7:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_41b7 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_41b7 = load i64, i64* @rax, align 8
  %v4_41b7 = trunc i64 %v3_41b7 to i8
  %v5_41b7 = add i8 %v4_41b7, %v2_41b7
  %v21_41b7 = inttoptr i64 %v3_41b7 to i8*
  store i8 %v5_41b7, i8* %v21_41b7, align 1
  %v0_41b9 = load i64, i64* @rax, align 8
  %v1_41b9 = add i64 %v0_41b9, 15
  %v2_41b9 = inttoptr i64 %v1_41b9 to i8*
  %v3_41b9 = load i8, i8* %v2_41b9, align 1
  %v4_41b9 = load i64, i64* @rcx, align 8
  %v5_41b9 = trunc i64 %v4_41b9 to i8
  %v6_41b9 = add i8 %v5_41b9, %v3_41b9
  store i8 %v6_41b9, i8* %v2_41b9, align 1
  %v0_41bc = load i64, i64* @rax, align 8
  ret i64 %v0_41bc
}

define i64 @_ZN3org4luaj3vm210LuaInteger6lteq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_41d7 = load i64, i64* @rdi, align 8
  %v1_41d7 = add i64 %v0_41d7, 8
  %v2_41d7 = inttoptr i64 %v1_41d7 to i32*
  %v3_41d7 = load i32, i32* %v2_41d7, align 4
  %v4_41d7 = zext i32 %v3_41d7 to i64
  store i64 %v4_41d7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger6lteq_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41f0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_41f0 = add i64 %arg1, 8
  %v2_41f0 = inttoptr i64 %v1_41f0 to i32*
  %v3_41f0 = load i32, i32* %v2_41f0, align 4
  %v5_41f0 = trunc i64 %arg2 to i32
  %v6_41f0 = sub i32 %v3_41f0, %v5_41f0
  %v12_41f0 = xor i32 %v3_41f0, %v5_41f0
  %v13_41f0 = xor i32 %v6_41f0, %v3_41f0
  %v14_41f0 = and i32 %v13_41f0, %v12_41f0
  %v15_41f0 = icmp slt i32 %v14_41f0, 0
  %v16_41f0 = icmp eq i32 %v6_41f0, 0
  %v17_41f0 = icmp slt i32 %v6_41f0, 0
  %v3_41f3 = icmp ne i1 %v17_41f0, %v15_41f0
  %v4_41f3 = or i1 %v16_41f0, %v3_41f3
  %v5_41f3 = zext i1 %v4_41f3 to i64
  %v6_41f3 = load i64, i64* @rax, align 8
  %v7_41f3 = and i64 %v6_41f3, -256
  %v8_41f3 = or i64 %v5_41f3, %v7_41f3
  store i64 %v8_41f3, i64* @rax, align 8
  ret i64 %v8_41f3
}

define i64 @_ZN3org4luaj3vm210LuaInteger6lteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_4200:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_4200 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_4200 = call i128 @__asm_pxor(i128 %v0_4200, i128 %v0_4200)
  store i128 %v2_4200, i128* %xmm1.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  %v0_4209 = load i64, i64* @rdi, align 8
  %v1_4209 = add i64 %v0_4209, 8
  %v2_4209 = inttoptr i64 %v1_4209 to i32*
  %v3_4209 = load i32, i32* %v2_4209, align 4
  %v4_4209 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_4209)
  store i128 %v4_4209, i128* %xmm1.global-to-local, align 8
  %v0_420e = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_420e, i128 %v4_4209)
  %v0_4212 = load i1, i1* %cf.global-to-local, align 1
  %v1_4212 = load i1, i1* %zf.global-to-local, align 1
  %v2_4212 = or i1 %v0_4212, %v1_4212
  br i1 %v2_4212, label %dec_label_pc_4214, label %dec_label_pc_4200.dec_label_pc_4223_crit_edge

dec_label_pc_4200.dec_label_pc_4223_crit_edge:    ; preds = %dec_label_pc_4200
  %v0_4223.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_4223

dec_label_pc_4214:                                ; preds = %dec_label_pc_4200
  %v1_4214 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_4209, i128 %v1_4214)
  store i64 0, i64* @rdx, align 8
  %v0_421d = load i1, i1* %pf.global-to-local, align 1
  %v1_421d = icmp eq i1 %v0_421d, false
  %v2_421d = zext i1 %v1_421d to i64
  %v3_421d = load i64, i64* @rax, align 8
  %v4_421d = and i64 %v3_421d, 4294967040
  %v0_4220 = load i1, i1* %zf.global-to-local, align 1
  %v1_4220 = icmp eq i1 %v0_4220, false
  %v5_421d.op = or i64 %v4_421d, %v2_421d
  %v7_4220 = select i1 %v1_4220, i64 0, i64 %v5_421d.op
  store i64 %v7_4220, i64* @rax, align 8
  br label %dec_label_pc_4223

dec_label_pc_4223:                                ; preds = %dec_label_pc_4200.dec_label_pc_4223_crit_edge, %dec_label_pc_4214
  %v0_4223 = phi i64 [ %v0_4223.pre, %dec_label_pc_4200.dec_label_pc_4223_crit_edge ], [ %v7_4220, %dec_label_pc_4214 ]
  ret i64 %v0_4223
}

define i64 @_ZN3org4luaj3vm210LuaInteger2gtEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4230:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4237 = load i64, i64* @rdi, align 8
  %v1_4237 = add i64 %v0_4237, 8
  %v2_4237 = inttoptr i64 %v1_4237 to i32*
  %v3_4237 = load i32, i32* %v2_4237, align 4
  %v4_4237 = zext i32 %v3_4237 to i64
  store i64 %v4_4237, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4246 = trunc i64 %arg2 to i8
  %v5_4246 = icmp eq i8 %v4_4246, 0
  %v0_4248 = load i64, i64* inttoptr (i64 16975 to i64*), align 8
  store i64 %v0_4248, i64* @rax, align 8
  %v2_424f = load i64, i64* inttoptr (i64 16983 to i64*), align 8
  %v3_424f = select i1 %v5_4246, i64 %v2_424f, i64 %v0_4248
  store i64 %v3_424f, i64* @rax, align 8
  ret i64 %v3_424f
}

define i64 @_ZN3org4luaj3vm210LuaInteger2gtEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_4260:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_4260 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_4260 = call i128 @__asm_pxor(i128 %v0_4260, i128 %v0_4260)
  store i128 %v2_4260, i128* %xmm1.global-to-local, align 8
  %v0_4264 = load i64, i64* inttoptr (i64 17003 to i64*), align 8
  store i64 %v0_4264, i64* @rax, align 8
  %v0_426b = load i64, i64* @rdi, align 8
  %v1_426b = add i64 %v0_426b, 8
  %v2_426b = inttoptr i64 %v1_426b to i32*
  %v3_426b = load i32, i32* %v2_426b, align 4
  %v4_426b = call i128 @__asm_cvtsi2sd.7468(i32 %v3_426b)
  store i128 %v4_426b, i128* %xmm1.global-to-local, align 8
  %v1_4270 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_426b, i128 %v1_4270)
  %v0_4274 = load i1, i1* %cf.global-to-local, align 1
  %v1_4274 = load i1, i1* %zf.global-to-local, align 1
  %v2_4274 = or i1 %v0_4274, %v1_4274
  %v3_4274 = icmp ne i1 %v2_4274, true
  %v4_4274 = load i64, i64* @rax, align 8
  %v5_4274 = load i64, i64* inttoptr (i64 17020 to i64*), align 8
  %v6_4274 = select i1 %v3_4274, i64 %v5_4274, i64 %v4_4274
  store i64 %v6_4274, i64* @rax, align 8
  ret i64 %v6_4274
}

define i64 @_ZN3org4luaj3vm210LuaInteger2gtEJPNS1_8LuaValueEi() local_unnamed_addr {
dec_label_pc_4280:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_4284() local_unnamed_addr {
dec_label_pc_4284:
  %of.global-to-local = alloca i1, align 1
  %sf.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  %v0_4284 = load i32, i32* inttoptr (i64 17034 to i32*), align 4
  %v1_4284 = zext i32 %v0_4284 to i64
  store i64 %v1_4284, i64* @rax, align 8
  %v0_428a = load i1, i1* %zf.global-to-local, align 1
  %v1_428a = load i1, i1* %sf.global-to-local, align 1
  %v2_428a = load i1, i1* %of.global-to-local, align 1
  %v3_428a = icmp ne i1 %v1_428a, %v2_428a
  %v4_428a = or i1 %v0_428a, %v3_428a
  %v6_428a = load i64, i64* inttoptr (i64 17042 to i64*), align 8
  %v7_428a = select i1 %v4_428a, i64 %v6_428a, i64 %v1_4284
  store i64 %v7_428a, i64* @rax, align 8
  ret i64 %v7_428a
}

define i64 @_ZN3org4luaj3vm210LuaInteger4gt_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_42a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_42a7 = load i64, i64* @rdi, align 8
  %v1_42a7 = add i64 %v0_42a7, 8
  %v2_42a7 = inttoptr i64 %v1_42a7 to i32*
  %v3_42a7 = load i32, i32* %v2_42a7, align 4
  %v4_42a7 = zext i32 %v3_42a7 to i64
  store i64 %v4_42a7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger4gt_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_42c0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_42c0 = add i64 %arg1, 8
  %v2_42c0 = inttoptr i64 %v1_42c0 to i32*
  %v3_42c0 = load i32, i32* %v2_42c0, align 4
  %v5_42c0 = trunc i64 %arg2 to i32
  %v6_42c0 = sub i32 %v3_42c0, %v5_42c0
  %v12_42c0 = xor i32 %v3_42c0, %v5_42c0
  %v13_42c0 = xor i32 %v6_42c0, %v3_42c0
  %v14_42c0 = and i32 %v13_42c0, %v12_42c0
  %v15_42c0 = icmp slt i32 %v14_42c0, 0
  %v16_42c0 = icmp eq i32 %v6_42c0, 0
  %v17_42c0 = icmp slt i32 %v6_42c0, 0
  %v3_42c3 = icmp eq i1 %v17_42c0, %v15_42c0
  %v4_42c3 = icmp eq i1 %v16_42c0, false
  %v5_42c3 = icmp eq i1 %v3_42c3, %v4_42c3
  %v6_42c3 = zext i1 %v5_42c3 to i64
  %v7_42c3 = load i64, i64* @rax, align 8
  %v8_42c3 = and i64 %v7_42c3, -256
  %v9_42c3 = or i64 %v6_42c3, %v8_42c3
  store i64 %v9_42c3, i64* @rax, align 8
  ret i64 %v9_42c3
}

define i64 @_ZN3org4luaj3vm210LuaInteger4gt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_42d0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_42d0 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_42d0 = call i128 @__asm_pxor(i128 %v0_42d0, i128 %v0_42d0)
  store i128 %v2_42d0, i128* %xmm1.global-to-local, align 8
  %v0_42d4 = load i64, i64* @rdi, align 8
  %v1_42d4 = add i64 %v0_42d4, 8
  %v2_42d4 = inttoptr i64 %v1_42d4 to i32*
  %v3_42d4 = load i32, i32* %v2_42d4, align 4
  %v4_42d4 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_42d4)
  store i128 %v4_42d4, i128* %xmm1.global-to-local, align 8
  %v1_42d9 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_42d4, i128 %v1_42d9)
  %v0_42dd = load i1, i1* %cf.global-to-local, align 1
  %v1_42dd = load i1, i1* %zf.global-to-local, align 1
  %v2_42dd = or i1 %v0_42dd, %v1_42dd
  %v3_42dd = icmp ne i1 %v2_42dd, true
  %v4_42dd = zext i1 %v3_42dd to i64
  %v5_42dd = load i64, i64* @rax, align 8
  %v6_42dd = and i64 %v5_42dd, -256
  %v7_42dd = or i64 %v4_42dd, %v6_42dd
  store i64 %v7_42dd, i64* @rax, align 8
  ret i64 %v7_42dd
}

define i64 @_ZN3org4luaj3vm210LuaInteger4gteqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_42f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_42f7 = load i64, i64* @rdi, align 8
  %v1_42f7 = add i64 %v0_42f7, 8
  %v2_42f7 = inttoptr i64 %v1_42f7 to i32*
  %v3_42f7 = load i32, i32* %v2_42f7, align 4
  %v4_42f7 = zext i32 %v3_42f7 to i64
  store i64 %v4_42f7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4306 = trunc i64 %arg2 to i8
  %v5_4306 = icmp eq i8 %v4_4306, 0
  %v0_4308 = load i64, i64* inttoptr (i64 17167 to i64*), align 8
  store i64 %v0_4308, i64* @rax, align 8
  %v2_430f = load i64, i64* inttoptr (i64 17175 to i64*), align 8
  %v3_430f = select i1 %v5_4306, i64 %v2_430f, i64 %v0_4308
  store i64 %v3_430f, i64* @rax, align 8
  ret i64 %v3_430f
}

define i64 @_ZN3org4luaj3vm210LuaInteger4gteqEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_4320:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4320 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_4320 = call i128 @__asm_pxor(i128 %v0_4320, i128 %v0_4320)
  store i128 %v2_4320, i128* %xmm1.global-to-local, align 8
  %v0_4324 = load i64, i64* inttoptr (i64 17195 to i64*), align 8
  store i64 %v0_4324, i64* @rax, align 8
  %v0_432b = load i64, i64* @rdi, align 8
  %v1_432b = add i64 %v0_432b, 8
  %v2_432b = inttoptr i64 %v1_432b to i32*
  %v3_432b = load i32, i32* %v2_432b, align 4
  %v4_432b = call i128 @__asm_cvtsi2sd.7468(i32 %v3_432b)
  store i128 %v4_432b, i128* %xmm1.global-to-local, align 8
  %v1_4330 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_432b, i128 %v1_4330)
  %v0_4334 = load i1, i1* %cf.global-to-local, align 1
  %v1_4334 = load i64, i64* @rax, align 8
  %v2_4334 = load i64, i64* inttoptr (i64 17212 to i64*), align 8
  %v3_4334 = select i1 %v0_4334, i64 %v2_4334, i64 %v1_4334
  store i64 %v3_4334, i64* @rax, align 8
  ret i64 %v3_4334
}

define i64 @_ZN3org4luaj3vm210LuaInteger4gteqEJPNS1_8LuaValueEi() local_unnamed_addr {
dec_label_pc_4340:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_4344() local_unnamed_addr {
dec_label_pc_4344:
  %of.global-to-local = alloca i1, align 1
  %sf.global-to-local = alloca i1, align 1
  %v0_4344 = load i32, i32* inttoptr (i64 17226 to i32*), align 4
  %v1_4344 = zext i32 %v0_4344 to i64
  store i64 %v1_4344, i64* @rax, align 8
  %v0_434a = load i1, i1* %sf.global-to-local, align 1
  %v1_434a = load i1, i1* %of.global-to-local, align 1
  %v2_434a = icmp ne i1 %v0_434a, %v1_434a
  %v4_434a = load i64, i64* inttoptr (i64 17234 to i64*), align 8
  %v5_434a = select i1 %v2_434a, i64 %v4_434a, i64 %v1_4344
  store i64 %v5_434a, i64* @rax, align 8
  ret i64 %v5_434a
}

define i64 @_ZN3org4luaj3vm210LuaInteger6gteq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4360:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4367 = load i64, i64* @rdi, align 8
  %v1_4367 = add i64 %v0_4367, 8
  %v2_4367 = inttoptr i64 %v1_4367 to i32*
  %v3_4367 = load i32, i32* %v2_4367, align 4
  %v4_4367 = zext i32 %v3_4367 to i64
  store i64 %v4_4367, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaInteger6gteq_bEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4380:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4380 = add i64 %arg1, 8
  %v2_4380 = inttoptr i64 %v1_4380 to i32*
  %v3_4380 = load i32, i32* %v2_4380, align 4
  %v5_4380 = trunc i64 %arg2 to i32
  %v6_4380 = sub i32 %v3_4380, %v5_4380
  %v12_4380 = xor i32 %v3_4380, %v5_4380
  %v13_4380 = xor i32 %v6_4380, %v3_4380
  %v14_4380 = and i32 %v13_4380, %v12_4380
  %v15_4380 = icmp slt i32 %v14_4380, 0
  %v17_4380 = icmp slt i32 %v6_4380, 0
  %v2_4383 = icmp eq i1 %v17_4380, %v15_4380
  %v3_4383 = zext i1 %v2_4383 to i64
  %v4_4383 = load i64, i64* @rax, align 8
  %v5_4383 = and i64 %v4_4383, -256
  %v6_4383 = or i64 %v5_4383, %v3_4383
  store i64 %v6_4383, i64* @rax, align 8
  ret i64 %v6_4383
}

define i64 @_ZN3org4luaj3vm210LuaInteger6gteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_4390:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4390 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_4390 = call i128 @__asm_pxor(i128 %v0_4390, i128 %v0_4390)
  store i128 %v2_4390, i128* %xmm1.global-to-local, align 8
  %v0_4394 = load i64, i64* @rdi, align 8
  %v1_4394 = add i64 %v0_4394, 8
  %v2_4394 = inttoptr i64 %v1_4394 to i32*
  %v3_4394 = load i32, i32* %v2_4394, align 4
  %v4_4394 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_4394)
  store i128 %v4_4394, i128* %xmm1.global-to-local, align 8
  %v1_4399 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_4394, i128 %v1_4399)
  %v0_439d = load i1, i1* %cf.global-to-local, align 1
  %v1_439d = icmp eq i1 %v0_439d, false
  %v2_439d = zext i1 %v1_439d to i64
  %v3_439d = load i64, i64* @rax, align 8
  %v4_439d = and i64 %v3_439d, -256
  %v5_439d = or i64 %v4_439d, %v2_439d
  store i64 %v5_439d, i64* @rax, align 8
  ret i64 %v5_439d
}

define i64 @_ZN3org4luaj3vm210LuaInteger6strcmpEJiPNS1_9LuaStringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_43b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger8checkintEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_43d0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_43d0 = add i64 %arg1, 8
  %v2_43d0 = inttoptr i64 %v1_43d0 to i32*
  %v3_43d0 = load i32, i32* %v2_43d0, align 4
  %v4_43d0 = zext i32 %v3_43d0 to i64
  store i64 %v4_43d0, i64* @rax, align 8
  ret i64 %v4_43d0
}

define i64 @_ZN3org4luaj3vm210LuaInteger9checklongEJxv(i64 %arg1) local_unnamed_addr {
dec_label_pc_43e0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_43e0 = add i64 %arg1, 8
  %v2_43e0 = inttoptr i64 %v1_43e0 to i32*
  %v3_43e0 = load i32, i32* %v2_43e0, align 4
  %v4_43e0 = sext i32 %v3_43e0 to i64
  store i64 %v4_43e0, i64* @rax, align 8
  ret i64 %v4_43e0
}

define i128 @_ZN3org4luaj3vm210LuaInteger11checkdoubleEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_43f0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_43f0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_43f0 = call i128 @__asm_pxor(i128 %v0_43f0, i128 %v0_43f0)
  store i128 %v2_43f0, i128* %xmm0.global-to-local, align 8
  %v0_43f4 = load i64, i64* @rdi, align 8
  %v1_43f4 = add i64 %v0_43f4, 8
  %v2_43f4 = inttoptr i64 %v1_43f4 to i32*
  %v3_43f4 = load i32, i32* %v2_43f4, align 4
  %v4_43f4 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_43f4)
  store i128 %v4_43f4, i128* %xmm0.global-to-local, align 8
  ret i128 %v4_43f4
}

define i64 @_ZN3org4luaj3vm29LuaString12getmetatableEJPNS1_8LuaValueEv() local_unnamed_addr {
dec_label_pc_4400:
  %v0_4400 = load i64, i64* inttoptr (i64 17415 to i64*), align 8
  store i64 %v0_4400, i64* @rax, align 8
  ret i64 %v0_4400
}

define i64 @_ZN3org4luaj3vm29LuaString4typeEJiv() local_unnamed_addr {
dec_label_pc_4410:
  store i64 4, i64* @rax, align 8
  ret i64 4
}

define i64 @"_ZN3org4luaj3vm29LuaString9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_4420:
  %v0_4420 = load i64, i64* inttoptr (i64 17447 to i64*), align 8
  store i64 %v0_4420, i64* @rax, align 8
  ret i64 %v0_4420
}

define i64 @_ZN3org4luaj3vm29LuaString2ltEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4430:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4437 = load i64, i64* @rdi, align 8
  store i64 %v0_4437, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4446 = trunc i64 %arg2 to i32
  %v0_4448 = load i64, i64* inttoptr (i64 17487 to i64*), align 8
  store i64 %v0_4448, i64* @rax, align 8
  %tmp237 = icmp slt i32 %v4_4446, 1
  %v6_444f = load i64, i64* inttoptr (i64 17495 to i64*), align 8
  %v7_444f = select i1 %tmp237, i64 %v6_444f, i64 %v0_4448
  store i64 %v7_444f, i64* @rax, align 8
  ret i64 %v7_444f
}

define i64 @_ZN3org4luaj3vm29LuaString4lt_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4460:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4467 = load i64, i64* @rdi, align 8
  store i64 %v0_4467, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4476 = trunc i64 %arg2 to i32
  %v5_4476 = icmp eq i32 %v4_4476, 0
  %v6_4476 = icmp slt i32 %v4_4476, 0
  %v3_4478 = icmp eq i1 %v6_4476, false
  %v4_4478 = icmp eq i1 %v5_4476, false
  %v5_4478 = icmp eq i1 %v3_4478, %v4_4478
  %v6_4478 = zext i1 %v5_4478 to i64
  %v8_4478 = and i64 %arg2, -256
  %v9_4478 = or i64 %v6_4478, %v8_4478
  store i64 %v9_4478, i64* @rax, align 8
  ret i64 %v9_4478
}

define i64 @_ZN3org4luaj3vm29LuaString4lteqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4480:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4487 = load i64, i64* @rdi, align 8
  store i64 %v0_4487, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4496 = trunc i64 %arg2 to i32
  %v6_4496 = icmp slt i32 %v4_4496, 0
  %v0_4498 = load i64, i64* inttoptr (i64 17567 to i64*), align 8
  store i64 %v0_4498, i64* @rax, align 8
  %v2_449f = load i64, i64* inttoptr (i64 17575 to i64*), align 8
  %v3_449f = select i1 %v6_4496, i64 %v2_449f, i64 %v0_4498
  store i64 %v3_449f, i64* @rax, align 8
  ret i64 %v3_449f
}

define i64 @_ZN3org4luaj3vm29LuaString6lteq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_44b7 = load i64, i64* @rdi, align 8
  store i64 %v0_44b7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %tmp237 = icmp slt i64 %arg2, 0
  %v3_44c6 = zext i1 %tmp237 to i64
  %v3_44c8 = urem i64 %v3_44c6, 2
  %v10_44c8 = xor i64 %v3_44c8, 1
  store i64 %v10_44c8, i64* @rax, align 8
  ret i64 %v10_44c8
}

define i64 @_ZN3org4luaj3vm29LuaString2gtEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_44d7 = load i64, i64* @rdi, align 8
  store i64 %v0_44d7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_44e6 = trunc i64 %arg2 to i32
  %v6_44e6 = icmp slt i32 %v4_44e6, 0
  %v0_44e8 = load i64, i64* inttoptr (i64 17647 to i64*), align 8
  store i64 %v0_44e8, i64* @rax, align 8
  %v1_44ef = icmp eq i1 %v6_44e6, false
  %v3_44ef = load i64, i64* inttoptr (i64 17655 to i64*), align 8
  %v4_44ef = select i1 %v1_44ef, i64 %v3_44ef, i64 %v0_44e8
  store i64 %v4_44ef, i64* @rax, align 8
  ret i64 %v4_44ef
}

define i64 @_ZN3org4luaj3vm29LuaString4gt_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4500:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4507 = load i64, i64* @rdi, align 8
  store i64 %v0_4507, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %tmp237 = icmp slt i64 %arg2, 0
  %v3_4516 = zext i1 %tmp237 to i64
  %v10_4516 = urem i64 %v3_4516, 2
  store i64 %v10_4516, i64* @rax, align 8
  ret i64 %v10_4516
}

define i64 @_ZN3org4luaj3vm29LuaString4gteqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4520:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4527 = load i64, i64* @rdi, align 8
  store i64 %v0_4527, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4536 = trunc i64 %arg2 to i32
  %v5_4536 = icmp eq i32 %v4_4536, 0
  %v6_4536 = icmp slt i32 %v4_4536, 0
  %v0_4538 = load i64, i64* inttoptr (i64 17727 to i64*), align 8
  store i64 %v0_4538, i64* @rax, align 8
  %v3_453f = icmp eq i1 %v6_4536, false
  %v4_453f = icmp eq i1 %v5_4536, false
  %v5_453f = icmp eq i1 %v3_453f, %v4_453f
  %v7_453f = load i64, i64* inttoptr (i64 17735 to i64*), align 8
  %v8_453f = select i1 %v5_453f, i64 %v7_453f, i64 %v0_4538
  store i64 %v8_453f, i64* @rax, align 8
  ret i64 %v8_453f
}

define i64 @_ZN3org4luaj3vm29LuaString6gteq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4550:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4557 = load i64, i64* @rdi, align 8
  store i64 %v0_4557, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_4566 = trunc i64 %arg2 to i32
  %tmp237 = icmp slt i32 %v4_4566, 1
  %v5_4568 = zext i1 %tmp237 to i64
  %v7_4568 = and i64 %arg2, -256
  %v8_4568 = or i64 %v5_4568, %v7_4568
  store i64 %v8_4568, i64* @rax, align 8
  ret i64 %v8_4568
}

define i64 @_ZN3org4luaj3vm29LuaString6gteq_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_4570:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6gteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_4590:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6concatEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_45b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_45b7 = load i64, i64* @rdi, align 8
  store i64 %v0_45b7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaString8concatToEJPNS1_8LuaValueEPNS1_9LuaNumberE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_45d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdx, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaString6strcmpEJiPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4600:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4607 = load i64, i64* @rdi, align 8
  store i64 %v0_4607, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v2_4616 = sub i64 0, %arg2
  %v13_4616 = and i64 %v2_4616, 4294967295
  store i64 %v13_4616, i64* @rax, align 8
  ret i64 %v13_4616
}

define i64 @_ZN3org4luaj3vm29LuaString8checkintEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4620:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4620 = load i64, i64* @rsp, align 8
  %v5_4620 = icmp ult i64 %v0_4620, 8
  store i1 %v5_4620, i1* %cf.global-to-local, align 1
  %v2_4624 = load i64, i64* @rdi, align 8
  store i64 %v2_4624, i64* @rax, align 8
  %v0_462d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_462d = load i64, i64* inttoptr (i64 17973 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_462d, i64 %v1_462d)
  store i64 4294967295, i64* @rax, align 8
  %v0_463a = load i1, i1* %cf.global-to-local, align 1
  %v1_463a = icmp eq i1 %v0_463a, false
  br i1 %v1_463a, label %dec_label_pc_4655, label %dec_label_pc_463c

dec_label_pc_463c:                                ; preds = %dec_label_pc_4620
  ret i64 4294967295

dec_label_pc_4655:                                ; preds = %dec_label_pc_4620
  %v0_4655 = load i64, i64* @rsp, align 8
  %v5_4655 = icmp ugt i64 %v0_4655, -9
  store i1 %v5_4655, i1* %cf.global-to-local, align 1
  ret i64 4294967295
}

define i64 @_ZN3org4luaj3vm29LuaString9checklongEJxv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4670:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4670 = load i64, i64* @rsp, align 8
  %v5_4670 = icmp ult i64 %v0_4670, 8
  store i1 %v5_4670, i1* %cf.global-to-local, align 1
  %v2_4674 = load i64, i64* @rdi, align 8
  store i64 %v2_4674, i64* @rax, align 8
  %v0_467d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_467d = load i64, i64* inttoptr (i64 18053 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_467d, i64 %v1_467d)
  store i64 9223372036854775807, i64* @rax, align 8
  %v0_468f = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_468f, label %dec_label_pc_46a0, label %dec_label_pc_4691

dec_label_pc_4691:                                ; preds = %dec_label_pc_46c8, %dec_label_pc_4670
  %v0_4695 = phi i64 [ -9223372036854775808, %dec_label_pc_46c8 ], [ 9223372036854775807, %dec_label_pc_4670 ]
  %v0_4691 = load i64, i64* @rsp, align 8
  %v5_4691 = icmp ugt i64 %v0_4691, -9
  store i1 %v5_4691, i1* %cf.global-to-local, align 1
  ret i64 %v0_4695

dec_label_pc_46a0:                                ; preds = %dec_label_pc_4670
  %v0_46a0 = load i64, i64* inttoptr (i64 18088 to i64*), align 8
  %v1_46a0 = call i128 @__asm_movsd(i64 %v0_46a0)
  %v1_46a8 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_46a0, i128 %v1_46a8)
  %v0_46ac = load i1, i1* %cf.global-to-local, align 1
  %v1_46ac = icmp eq i1 %v0_46ac, false
  br i1 %v1_46ac, label %dec_label_pc_46c8, label %dec_label_pc_46ae

dec_label_pc_46ae:                                ; preds = %dec_label_pc_46a0
  %v2_46ac = load i64, i64* @rax, align 8
  ret i64 %v2_46ac

dec_label_pc_46c8:                                ; preds = %dec_label_pc_46a0
  store i64 -9223372036854775808, i64* @rax, align 8
  br label %dec_label_pc_4691
}

define i64 @_ZN3org4luaj3vm29LuaString6tobyteEJcv(i64 %arg1) local_unnamed_addr {
dec_label_pc_46e0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_46e4 = load i64, i64* @rdi, align 8
  store i64 %v2_46e4, i64* @rax, align 8
  ret i64 %v2_46e4
}

define i64 @_ZN3org4luaj3vm29LuaString6tocharEJwv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4700:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4704 = load i64, i64* @rdi, align 8
  store i64 %v2_4704, i64* @rax, align 8
  ret i64 %v2_4704
}

define i64 @_ZN3org4luaj3vm29LuaString7tofloatEJfv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4720:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_4724 = load i64, i64* @rdi, align 8
  store i64 %v2_4724, i64* @rax, align 8
  %v0_472d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_472d = call i128 @__asm_cvtsd2ss.7471(i128 %v0_472d)
  store i128 %v1_472d, i128* %xmm0.global-to-local, align 8
  %v0_4735 = load i64, i64* @rax, align 8
  ret i64 %v0_4735
}

define i64 @_ZN3org4luaj3vm29LuaString5tointEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4740:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4744 = load i64, i64* @rdi, align 8
  store i64 %v2_4744, i64* @rax, align 8
  ret i64 %v2_4744
}

define i64 @_ZN3org4luaj3vm29LuaString6tolongEJxv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4760:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4760 = load i64, i64* @rsp, align 8
  %v5_4760 = icmp ult i64 %v0_4760, 8
  store i1 %v5_4760, i1* %cf.global-to-local, align 1
  %v2_4764 = load i64, i64* @rdi, align 8
  store i64 %v2_4764, i64* @rax, align 8
  %v0_476d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_476d = load i64, i64* inttoptr (i64 18293 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_476d, i64 %v1_476d)
  store i64 9223372036854775807, i64* @rax, align 8
  %v0_477f = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_477f, label %dec_label_pc_4790, label %dec_label_pc_4781

dec_label_pc_4781:                                ; preds = %dec_label_pc_47b8, %dec_label_pc_4760
  %v0_4785 = phi i64 [ -9223372036854775808, %dec_label_pc_47b8 ], [ 9223372036854775807, %dec_label_pc_4760 ]
  %v0_4781 = load i64, i64* @rsp, align 8
  %v5_4781 = icmp ugt i64 %v0_4781, -9
  store i1 %v5_4781, i1* %cf.global-to-local, align 1
  ret i64 %v0_4785

dec_label_pc_4790:                                ; preds = %dec_label_pc_4760
  %v0_4790 = load i64, i64* inttoptr (i64 18328 to i64*), align 8
  %v1_4790 = call i128 @__asm_movsd(i64 %v0_4790)
  %v1_4798 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_4790, i128 %v1_4798)
  %v0_479c = load i1, i1* %cf.global-to-local, align 1
  %v1_479c = icmp eq i1 %v0_479c, false
  br i1 %v1_479c, label %dec_label_pc_47b8, label %dec_label_pc_479e

dec_label_pc_479e:                                ; preds = %dec_label_pc_4790
  %v2_479c = load i64, i64* @rax, align 8
  ret i64 %v2_479c

dec_label_pc_47b8:                                ; preds = %dec_label_pc_4790
  store i64 -9223372036854775808, i64* @rax, align 8
  br label %dec_label_pc_4781
}

define i64 @_ZN3org4luaj3vm29LuaString7toshortEJsv(i64 %arg1) local_unnamed_addr {
dec_label_pc_47d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_47d4 = load i64, i64* @rdi, align 8
  store i64 %v2_47d4, i64* @rax, align 8
  ret i64 %v2_47d4
}

define i64 @_ZN3org4luaj3vm29LuaString9optdoubleEJdd(i64 %arg1) local_unnamed_addr {
dec_label_pc_47f0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_47f4 = load i64, i64* @rdi, align 8
  store i64 %v2_47f4, i64* @rax, align 8
  ret i64 %v2_47f4
}

define i64 @_ZN3org4luaj3vm29LuaString6optintEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_4810:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4814 = load i64, i64* @rdi, align 8
  store i64 %v2_4814, i64* @rax, align 8
  ret i64 %v2_4814
}

define i64 @_ZN3org4luaj3vm29LuaString10optintegerEJPNS1_10LuaIntegerES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_4830:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4834 = load i64, i64* @rdi, align 8
  store i64 %v2_4834, i64* @rax, align 8
  ret i64 %v2_4834
}

define i64 @_ZN3org4luaj3vm29LuaString7optlongEJxx(i64 %arg1) local_unnamed_addr {
dec_label_pc_4850:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4854 = load i64, i64* @rdi, align 8
  store i64 %v2_4854, i64* @rax, align 8
  ret i64 %v2_4854
}

define i64 @_ZN3org4luaj3vm29LuaString9optnumberEJPNS1_9LuaNumberES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_4870:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4874 = load i64, i64* @rdi, align 8
  store i64 %v2_4874, i64* @rax, align 8
  ret i64 %v2_4874
}

define i64 @_ZN3org4luaj3vm29LuaString9optstringEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_4890:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaString8tostringEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_48a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm29LuaString10optjstringEJPN4java4lang6StringES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_48b0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_48b4 = load i64, i64* @rdi, align 8
  store i64 %v2_48b4, i64* @rax, align 8
  ret i64 %v2_48b4
}

define i64 @_ZN3org4luaj3vm29LuaString8hashCodeEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_48d0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_48d0 = add i64 %arg1, 24
  %v2_48d0 = inttoptr i64 %v1_48d0 to i32*
  %v3_48d0 = load i32, i32* %v2_48d0, align 4
  %v4_48d0 = zext i32 %v3_48d0 to i64
  store i64 %v4_48d0, i64* @rax, align 8
  ret i64 %v4_48d0
}

define i64 @_ZN3org4luaj3vm29LuaString2eqEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_48e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_48e7 = load i64, i64* @rdi, align 8
  store i64 %v0_48e7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_48f6 = trunc i64 %arg2 to i8
  %v5_48f6 = icmp eq i8 %v4_48f6, 0
  %v0_48f8 = load i64, i64* inttoptr (i64 18687 to i64*), align 8
  store i64 %v0_48f8, i64* @rax, align 8
  %v2_48ff = load i64, i64* inttoptr (i64 18695 to i64*), align 8
  %v3_48ff = select i1 %v5_48f6, i64 %v2_48ff, i64 %v0_48f8
  store i64 %v3_48ff, i64* @rax, align 8
  ret i64 %v3_48ff
}

define i64 @_ZN3org4luaj3vm29LuaString5raweqEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4910:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4917 = load i64, i64* @rdi, align 8
  store i64 %v0_4917, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaString5writeEJvPN4java2io16DataOutputStreamEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4930:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4937 = load i64, i64* @rdx, align 8
  %v1_4937 = trunc i64 %v0_4937 to i32
  %v2_4937 = load i64, i64* @rdi, align 8
  %v3_4937 = add i64 %v2_4937, 16
  %v4_4937 = inttoptr i64 %v3_4937 to i32*
  %v5_4937 = load i32, i32* %v4_4937, align 4
  %v6_4937 = add i32 %v5_4937, %v1_4937
  %v22_4937 = zext i32 %v6_4937 to i64
  store i64 %v22_4937, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaString6rawlenEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4950:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4950 = add i64 %arg1, 20
  %v2_4950 = inttoptr i64 %v1_4950 to i32*
  %v3_4950 = load i32, i32* %v2_4950, align 4
  %v4_4950 = zext i32 %v3_4950 to i64
  store i64 %v4_4950, i64* @rax, align 8
  ret i64 %v4_4950
}

define i64 @_ZN3org4luaj3vm29LuaString12checkjstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4960:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4964 = load i64, i64* @rdi, align 8
  store i64 %v2_4964, i64* @rax, align 8
  ret i64 %v2_4964
}

define i64 @_ZN3org4luaj3vm29LuaString11checkstringEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_4980:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @"_ZN3org4luaj3vm220LuaTable$IntKeyEntry8arraykeyEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4990:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4990 = load i64, i64* @rdi, align 8
  %v1_4990 = add i64 %v0_4990, 8
  %v2_4990 = inttoptr i64 %v1_4990 to i32*
  %v3_4990 = load i32, i32* %v2_4990, align 4
  %v4_4990 = zext i32 %v3_4990 to i64
  store i64 %v4_4990, i64* @rax, align 8
  %tmp238 = icmp slt i32 %v3_4990, 1
  br i1 %tmp238, label %dec_label_pc_49a0, label %dec_label_pc_4997

dec_label_pc_4997:                                ; preds = %dec_label_pc_4990
  %v2_4997 = load i64, i64* %rsi.global-to-local, align 8
  %v8_4999 = icmp sgt i64 %v4_4990, %v2_4997
  br i1 %v8_4999, label %dec_label_pc_49a0, label %dec_label_pc_499b

dec_label_pc_499b:                                ; preds = %dec_label_pc_4997
  ret i64 %v4_4990

dec_label_pc_49a0:                                ; preds = %dec_label_pc_4997, %dec_label_pc_4990
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm220LuaTable$IntKeyEntry5valueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_49b0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_49b0 = add i64 %arg1, 16
  %v2_49b0 = inttoptr i64 %v1_49b0 to i64*
  %v3_49b0 = load i64, i64* %v2_49b0, align 8
  store i64 %v3_49b0, i64* @rax, align 8
  ret i64 %v3_49b0
}

define i64 @"_ZN3org4luaj3vm220LuaTable$IntKeyEntry3setEJPNS1_14LuaTable$EntryEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_49c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v2_49c3 = add i64 %arg1, 16
  %v3_49c3 = inttoptr i64 %v2_49c3 to i64*
  store i64 %arg2, i64* %v3_49c3, align 8
  %v0_49c7 = load i64, i64* @rax, align 8
  ret i64 %v0_49c7
}

define i64 @"_ZN3org4luaj3vm220LuaTable$IntKeyEntry5keyeqEJbPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_49d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_49d7 = load i64, i64* @rdi, align 8
  %v1_49d7 = add i64 %v0_49d7, 8
  %v2_49d7 = inttoptr i64 %v1_49d7 to i32*
  %v3_49d7 = load i32, i32* %v2_49d7, align 4
  %v4_49d7 = zext i32 %v3_49d7 to i64
  store i64 %v4_49d7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaTable4typeEJiv() local_unnamed_addr {
dec_label_pc_49f0:
  store i64 5, i64* @rax, align 8
  ret i64 5
}

define i64 @"_ZN3org4luaj3vm28LuaTable9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_4a00:
  %v0_4a00 = load i64, i64* inttoptr (i64 18951 to i64*), align 8
  store i64 %v0_4a00, i64* @rax, align 8
  ret i64 %v0_4a00
}

define i64 @_ZN3org4luaj3vm28LuaTable10checktableEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_4a10:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaTable8opttableEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_4a20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaTable14getArrayLengthEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4a30:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4a30 = add i64 %arg1, 8
  %v2_4a30 = inttoptr i64 %v1_4a30 to i64*
  %v3_4a30 = load i64, i64* %v2_4a30, align 8
  store i64 %v3_4a30, i64* @rax, align 8
  %v1_4a34 = add i64 %v3_4a30, 8
  %v2_4a34 = inttoptr i64 %v1_4a34 to i32*
  %v3_4a34 = load i32, i32* %v2_4a34, align 4
  %v4_4a34 = zext i32 %v3_4a34 to i64
  store i64 %v4_4a34, i64* @rax, align 8
  ret i64 %v4_4a34
}

define i64 @_ZN3org4luaj3vm28LuaTable13getHashLengthEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4a40:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4a40 = add i64 %arg1, 16
  %v2_4a40 = inttoptr i64 %v1_4a40 to i64*
  %v3_4a40 = load i64, i64* %v2_4a40, align 8
  store i64 %v3_4a40, i64* @rax, align 8
  %v1_4a44 = add i64 %v3_4a40, 8
  %v2_4a44 = inttoptr i64 %v1_4a44 to i32*
  %v3_4a44 = load i32, i32* %v2_4a44, align 4
  %v4_4a44 = zext i32 %v3_4a44 to i64
  store i64 %v4_4a44, i64* @rax, align 8
  ret i64 %v4_4a44
}

define i64 @_ZN3org4luaj3vm28LuaTable6removeEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4a50:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4a50 = load i64, i64* %r14.global-to-local, align 8
  %v0_4a54 = load i64, i64* %r12.global-to-local, align 8
  %v0_4a56 = load i64, i64* %rbp.global-to-local, align 8
  %v0_4a57 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_4a57, i64* %r12.global-to-local, align 8
  %v0_4a5a = load i64, i64* @rbx, align 8
  %v2_4a5b = load i64, i64* @rdi, align 8
  store i64 %v2_4a5b, i64* @rax, align 8
  store i64 %v2_4a5b, i64* @rbx, align 8
  %v4_4a67 = trunc i64 %v0_4a57 to i32
  %v5_4a67 = icmp eq i32 %v4_4a67, 0
  br i1 %v5_4a67, label %dec_label_pc_4b00, label %dec_label_pc_4a70

dec_label_pc_4a70:                                ; preds = %dec_label_pc_4a50
  %v5_4a73 = icmp slt i64 %v2_4a5b, %v0_4a57
  br i1 %v5_4a73, label %dec_label_pc_4af0, label %dec_label_pc_4a75

dec_label_pc_4a75:                                ; preds = %dec_label_pc_4b00, %dec_label_pc_4a70
  %v0_4a78 = phi i64 [ %v2_4a5b, %dec_label_pc_4b00 ], [ %v0_4a57, %dec_label_pc_4a70 ]
  store i64 %v2_4a5b, i64* @rax, align 8
  store i64 %v0_4a78, i64* %rsi.global-to-local, align 8
  store i64 %v2_4a5b, i64* %r14.global-to-local, align 8
  store i64 %v2_4a5b, i64* %rbp.global-to-local, align 8
  %.pre = trunc i64 %v2_4a5b to i8
  %v5_4ac9251 = icmp eq i8 %.pre, 0
  br i1 %v5_4ac9251, label %dec_label_pc_4a90, label %dec_label_pc_4acd

dec_label_pc_4a90:                                ; preds = %dec_label_pc_4a75, %dec_label_pc_4a90
  br label %dec_label_pc_4a90

dec_label_pc_4acd:                                ; preds = %dec_label_pc_4a75
  store i64 %v2_4a5b, i64* @rax, align 8
  %v3_4ade = load i64, i64* inttoptr (i64 19174 to i64*), align 8
  store i64 %v3_4ade, i64* @rax, align 8
  store i64 %v0_4a5a, i64* @rbx, align 8
  store i64 %v0_4a56, i64* %rbp.global-to-local, align 8
  store i64 %v0_4a54, i64* %r12.global-to-local, align 8
  store i64 %v0_4a50, i64* %r14.global-to-local, align 8
  ret i64 %v3_4ade

dec_label_pc_4af0:                                ; preds = %dec_label_pc_4a70
  %v0_4af0 = load i64, i64* inttoptr (i64 19191 to i64*), align 8
  store i64 %v0_4af0, i64* @rax, align 8
  store i64 %v0_4a5a, i64* @rbx, align 8
  store i64 %v0_4a54, i64* %r12.global-to-local, align 8
  ret i64 %v0_4af0

dec_label_pc_4b00:                                ; preds = %dec_label_pc_4a50
  store i64 %v2_4a5b, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_4a75
}

define i64 @_ZN3org4luaj3vm28LuaTable6insertEJviPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4b10:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4b10 = load i64, i64* %rsi.global-to-local, align 8
  %v4_4b10 = trunc i64 %v0_4b10 to i32
  %v5_4b10 = icmp eq i32 %v4_4b10, 0
  %v0_4b12 = load i64, i64* %r14.global-to-local, align 8
  %v0_4b14 = load i64, i64* %r13.global-to-local, align 8
  %v0_4b16 = load i64, i64* %r12.global-to-local, align 8
  %v0_4b18 = load i64, i64* @rdi, align 8
  store i64 %v0_4b18, i64* %r12.global-to-local, align 8
  %v0_4b1b = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_4b10, i64* %rbp.global-to-local, align 8
  %v0_4b1e = load i64, i64* @rbx, align 8
  %v0_4b1f = load i64, i64* @rdx, align 8
  store i64 %v0_4b1f, i64* @rbx, align 8
  %v1_4b22 = icmp eq i1 %v5_4b10, false
  br i1 %v1_4b22, label %dec_label_pc_4b5e.preheader, label %dec_label_pc_4b80

dec_label_pc_4b5e.preheader:                      ; preds = %dec_label_pc_4b10, %dec_label_pc_4b80
  %v0_4b3414 = phi i64 [ %v0_4b10, %dec_label_pc_4b10 ], [ %v1_4b89, %dec_label_pc_4b80 ]
  %v1_4b5e4 = inttoptr i64 %v0_4b1f to i64*
  %v2_4b5e5 = load i64, i64* %v1_4b5e4, align 8
  store i64 %v2_4b5e5, i64* @rax, align 8
  store i64 %v0_4b1f, i64* @rdi, align 8
  %v4_4b6a6 = trunc i64 %v2_4b5e5 to i8
  %v5_4b6a7 = icmp eq i8 %v4_4b6a6, 0
  br i1 %v5_4b6a7, label %dec_label_pc_4b30, label %dec_label_pc_4b6e

dec_label_pc_4b30:                                ; preds = %dec_label_pc_4b5e.preheader, %dec_label_pc_4b30
  %v0_4b4d = phi i64 [ %v1_4b39, %dec_label_pc_4b30 ], [ %v0_4b3414, %dec_label_pc_4b5e.preheader ]
  %v1_4b39 = add i64 %v0_4b4d, 1
  store i64 %v1_4b39, i64* %r13.global-to-local, align 8
  store i64 %v0_4b1f, i64* %r14.global-to-local, align 8
  store i64 %v0_4b18, i64* @rax, align 8
  store i64 %v0_4b4d, i64* %rsi.global-to-local, align 8
  store i64 %v0_4b1f, i64* @rbx, align 8
  store i64 %v1_4b39, i64* %rbp.global-to-local, align 8
  store i64 %v0_4b18, i64* @rdi, align 8
  %v2_4b5e = load i64, i64* %v1_4b5e4, align 8
  store i64 %v2_4b5e, i64* @rax, align 8
  store i64 %v0_4b1f, i64* @rdi, align 8
  %v4_4b6a = trunc i64 %v2_4b5e to i8
  %v5_4b6a = icmp eq i8 %v4_4b6a, 0
  br i1 %v5_4b6a, label %dec_label_pc_4b30, label %dec_label_pc_4b5e.dec_label_pc_4b6e_crit_edge

dec_label_pc_4b5e.dec_label_pc_4b6e_crit_edge:    ; preds = %dec_label_pc_4b30
  br label %dec_label_pc_4b6e

dec_label_pc_4b6e:                                ; preds = %dec_label_pc_4b5e.dec_label_pc_4b6e_crit_edge, %dec_label_pc_4b5e.preheader
  %v0_4b76 = phi i64 [ %v2_4b5e, %dec_label_pc_4b5e.dec_label_pc_4b6e_crit_edge ], [ %v2_4b5e5, %dec_label_pc_4b5e.preheader ]
  store i64 %v0_4b1e, i64* @rbx, align 8
  store i64 %v0_4b1b, i64* %rbp.global-to-local, align 8
  store i64 %v0_4b16, i64* %r12.global-to-local, align 8
  store i64 %v0_4b14, i64* %r13.global-to-local, align 8
  store i64 %v0_4b12, i64* %r14.global-to-local, align 8
  ret i64 %v0_4b76

dec_label_pc_4b80:                                ; preds = %dec_label_pc_4b10
  store i64 %v0_4b18, i64* @rax, align 8
  %v1_4b89 = add i64 %v0_4b18, 1
  store i64 %v1_4b89, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_4b5e.preheader
}

define i64 @_ZN3org4luaj3vm28LuaTable6rawlenEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4b90:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4b90 = load i64, i64* %r14.global-to-local, align 8
  %v0_4b92 = load i64, i64* %r13.global-to-local, align 8
  %v0_4b94 = load i64, i64* @rdi, align 8
  store i64 %v0_4b94, i64* %r14.global-to-local, align 8
  %v0_4b97 = load i64, i64* %r12.global-to-local, align 8
  %v0_4b99 = load i64, i64* %rbp.global-to-local, align 8
  store i64 0, i64* %r12.global-to-local, align 8
  %v0_4b9d = load i64, i64* @rbx, align 8
  store i64 %v0_4b94, i64* @rax, align 8
  %v1_4ba7 = add i64 %v0_4b94, 1
  store i64 %v1_4ba7, i64* @rbx, align 8
  %.pre = trunc i64 %v0_4b94 to i8
  %v5_4bdd279 = icmp eq i8 %.pre, 0
  br i1 %v5_4bdd279, label %dec_label_pc_4bb0, label %dec_label_pc_4be8

dec_label_pc_4bb0:                                ; preds = %dec_label_pc_4b90, %dec_label_pc_4bb0
  br label %dec_label_pc_4bb0

dec_label_pc_4be8:                                ; preds = %dec_label_pc_4b90
  store i64 %v1_4ba7, i64* %rbp.global-to-local, align 8
  store i64 %v0_4b94, i64* @rax, align 8
  store i64 %v0_4b94, i64* @rdx, align 8
  %v7_4bf0 = icmp sgt i64 %v1_4ba7, 1
  br i1 %v7_4bf0, label %dec_label_pc_4c1e, label %dec_label_pc_4c25.loopexit6

dec_label_pc_4c1e:                                ; preds = %dec_label_pc_4be8, %dec_label_pc_4c1e
  %v0_4bf2 = phi i64 [ %v10_4c04, %dec_label_pc_4c1e ], [ %v1_4ba7, %dec_label_pc_4be8 ]
  %v1_4bfc = trunc i64 %v0_4bf2 to i32
  %tmp287 = icmp slt i32 %v1_4bfc, 0
  %v3_4bfc = zext i1 %tmp287 to i32
  %v4_4bff = add i32 %v3_4bfc, %v1_4bfc
  %v3_4c04 = sdiv i32 %v4_4bff, 2
  %v10_4c04 = zext i32 %v3_4c04 to i64
  %v8_4c23 = icmp ugt i32 %v3_4c04, 1
  br i1 %v8_4c23, label %dec_label_pc_4c1e, label %dec_label_pc_4c25.loopexit

dec_label_pc_4c25.loopexit:                       ; preds = %dec_label_pc_4c1e
  store i64 %v10_4c04, i64* %rbp.global-to-local, align 8
  store i64 1, i64* %r13.global-to-local, align 8
  store i64 %v0_4b94, i64* @rax, align 8
  store i64 %v10_4c04, i64* @rbx, align 8
  store i64 %v0_4b94, i64* @rdx, align 8
  br label %dec_label_pc_4c25

dec_label_pc_4c25.loopexit6:                      ; preds = %dec_label_pc_4be8
  store i64 1, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_4c25

dec_label_pc_4c25:                                ; preds = %dec_label_pc_4c25.loopexit6, %dec_label_pc_4c25.loopexit
  store i64 0, i64* @rax, align 8
  store i64 %v0_4b9d, i64* @rbx, align 8
  store i64 %v0_4b99, i64* %rbp.global-to-local, align 8
  store i64 %v0_4b97, i64* %r12.global-to-local, align 8
  store i64 %v0_4b92, i64* %r13.global-to-local, align 8
  store i64 %v0_4b90, i64* %r14.global-to-local, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable15checkLoadFactorEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4c40:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4c40 = add i64 %arg1, 16
  %v2_4c40 = inttoptr i64 %v1_4c40 to i64*
  %v3_4c40 = load i64, i64* %v2_4c40, align 8
  store i64 %v3_4c40, i64* @rax, align 8
  %v1_4c44 = add i64 %v3_4c40, 8
  %v2_4c44 = inttoptr i64 %v1_4c44 to i32*
  %v3_4c44 = load i32, i32* %v2_4c44, align 4
  %v4_4c44 = zext i32 %v3_4c44 to i64
  store i64 %v4_4c44, i64* @rax, align 8
  %v1_4c47 = add i64 %arg1, 24
  %v2_4c47 = inttoptr i64 %v1_4c47 to i32*
  %v3_4c47 = load i32, i32* %v2_4c47, align 4
  %v6_4c47 = sub i32 %v3_4c47, %v3_4c44
  %v12_4c47 = xor i32 %v3_4c47, %v3_4c44
  %v13_4c47 = xor i32 %v6_4c47, %v3_4c47
  %v14_4c47 = and i32 %v13_4c47, %v12_4c47
  %v15_4c47 = icmp slt i32 %v14_4c47, 0
  %v17_4c47 = icmp slt i32 %v6_4c47, 0
  %v2_4c4a = icmp eq i1 %v17_4c47, %v15_4c47
  %v3_4c4a = zext i1 %v2_4c4a to i64
  %v5_4c4a = and i64 %v4_4c44, 4294967040
  %v6_4c4a = or i64 %v3_4c4a, %v5_4c4a
  store i64 %v6_4c4a, i64* @rax, align 8
  ret i64 %v6_4c4a
}

define i64 @_ZN3org4luaj3vm28LuaTable8keyCountEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4c50:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4c52 = load i64, i64* %r12.global-to-local, align 8
  %v0_4c54 = load i64, i64* @rdi, align 8
  store i64 %v0_4c54, i64* %r12.global-to-local, align 8
  %v0_4c57 = load i64, i64* %rbp.global-to-local, align 8
  %v0_4c58 = load i64, i64* @rbx, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  %v0_4c5f = load i64, i64* inttoptr (i64 19558 to i64*), align 8
  store i64 %v0_4c5f, i64* @rbx, align 8
  %v4_4c9e = trunc i64 %v0_4c54 to i8
  %v5_4c9e = icmp eq i8 %v4_4c9e, 0
  br label %dec_label_pc_4c70

dec_label_pc_4c70:                                ; preds = %dec_label_pc_4c70, %dec_label_pc_4c50
  br i1 %v5_4c9e, label %dec_label_pc_4c70, label %dec_label_pc_4ca2

dec_label_pc_4ca2:                                ; preds = %dec_label_pc_4c70
  store i64 %v0_4c54, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_4c58, i64* @rbx, align 8
  store i64 %v0_4c57, i64* %rbp.global-to-local, align 8
  store i64 %v0_4c52, i64* %r12.global-to-local, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable2eqEJPNS1_8LuaValueES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_4cb0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4cb4 = load i64, i64* @rdi, align 8
  store i64 %v2_4cb4, i64* @rax, align 8
  %v4_4cbd = trunc i64 %v2_4cb4 to i8
  %v5_4cbd = icmp eq i8 %v4_4cbd, 0
  %v0_4cbf = load i64, i64* inttoptr (i64 19654 to i64*), align 8
  store i64 %v0_4cbf, i64* @rax, align 8
  %v2_4cc6 = load i64, i64* inttoptr (i64 19662 to i64*), align 8
  %v3_4cc6 = select i1 %v5_4cbd, i64 %v2_4cc6, i64 %v0_4cbf
  store i64 %v3_4cc6, i64* @rax, align 8
  ret i64 %v3_4cc6
}

define i64 @_ZN3org4luaj3vm28LuaTable6unpackEJPNS1_7VarargsEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4ce0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4ce1 = load i64, i64* @rdi, align 8
  store i64 %v2_4ce1, i64* @rax, align 8
  store i64 %v2_4ce1, i64* @rcx, align 8
  store i64 %v2_4ce1, i64* @rdx, align 8
  ret i64 %v2_4ce1
}

define i64 @_ZN3org4luaj3vm28LuaTable6unpackEJPNS1_7VarargsEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4d10:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4d12 = load i64, i64* @rdi, align 8
  store i64 %v0_4d12, i64* @rax, align 8
  store i64 %v0_4d12, i64* @rcx, align 8
  store i64 %v0_4d12, i64* @rdx, align 8
  ret i64 %v0_4d12
}

define i64 @_ZN3org4luaj3vm28LuaTable13useWeakValuesEJbv() local_unnamed_addr {
dec_label_pc_4d40:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable10toLuaValueEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_4d50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaTable4wrapEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4d60:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot5firstEJPNS1_19LuaTable$StrongSlotEv"() local_unnamed_addr {
dec_label_pc_4d70:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot4findEJPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"() local_unnamed_addr {
dec_label_pc_4d80:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot4restEJPNS1_13LuaTable$SlotEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4d90:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4d90 = add i64 %arg1, 16
  %v2_4d90 = inttoptr i64 %v1_4d90 to i64*
  %v3_4d90 = load i64, i64* %v2_4d90, align 8
  store i64 %v3_4d90, i64* @rax, align 8
  ret i64 %v3_4d90
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot8arraykeyEJii"() local_unnamed_addr {
dec_label_pc_4da0:
  store i64 4294967295, i64* @rax, align 8
  ret i64 4294967295
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot6relinkEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4db0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry8arraykeyEJii"() local_unnamed_addr {
dec_label_pc_4dc0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry4nargEJiv"() local_unnamed_addr {
dec_label_pc_4dd0:
  store i64 2, i64* @rax, align 8
  ret i64 2
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry4arg1EJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4de0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4de4 = load i64, i64* @rdi, align 8
  store i64 %v2_4de4, i64* @rax, align 8
  ret i64 %v2_4de4
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry5firstEJPNS1_19LuaTable$StrongSlotEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4e00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry4restEJPNS1_13LuaTable$SlotEv"() local_unnamed_addr {
dec_label_pc_4e10:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry4findEJPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4e20:
  store i64 %arg1, i64* @rdi, align 8
  %v2_4e20 = load i64, i64* @rdi, align 8
  %v4_4e2d = trunc i64 %v2_4e20 to i8
  %v5_4e2d = icmp eq i8 %v4_4e2d, 0
  %v1_4e34 = icmp eq i1 %v5_4e2d, false
  %v4_4e34 = select i1 %v1_4e34, i64 %v2_4e20, i64 0
  store i64 %v4_4e34, i64* @rax, align 8
  ret i64 %v4_4e34
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry3setEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4e40:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_4e44 = load i64, i64* @rdi, align 8
  store i64 %v2_4e44, i64* @rax, align 8
  ret i64 %v2_4e44
}

define i64 @"_ZN3org4luaj3vm220LuaTable$NormalEntry3keyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4e60:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4e60 = add i64 %arg1, 8
  %v2_4e60 = inttoptr i64 %v1_4e60 to i64*
  %v3_4e60 = load i64, i64* %v2_4e60, align 8
  store i64 %v3_4e60, i64* @rax, align 8
  ret i64 %v3_4e60
}

define i64 @"_ZN3org4luaj3vm220LuaTable$NormalEntry5valueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4e70:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4e70 = add i64 %arg1, 16
  %v2_4e70 = inttoptr i64 %v1_4e70 to i64*
  %v3_4e70 = load i64, i64* %v2_4e70, align 8
  store i64 %v3_4e70, i64* @rax, align 8
  ret i64 %v3_4e70
}

define i64 @"_ZN3org4luaj3vm220LuaTable$NormalEntry3setEJPNS1_14LuaTable$EntryEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4e80:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v2_4e83 = add i64 %arg1, 16
  %v3_4e83 = inttoptr i64 %v2_4e83 to i64*
  store i64 %arg2, i64* %v3_4e83, align 8
  %v0_4e87 = load i64, i64* @rax, align 8
  ret i64 %v0_4e87
}

define i64 @"_ZN3org4luaj3vm220LuaTable$NormalEntry9toVarargsEJPNS1_7VarargsEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4e90:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @"_ZN3org4luaj3vm220LuaTable$NormalEntry5keyeqEJbPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4ea0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4ea7 = load i64, i64* @rdi, align 8
  %v1_4ea7 = add i64 %v0_4ea7, 8
  %v2_4ea7 = inttoptr i64 %v1_4ea7 to i64*
  %v3_4ea7 = load i64, i64* %v2_4ea7, align 8
  store i64 %v3_4ea7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot3keyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4ec0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4ec4 = load i64, i64* @rdi, align 8
  %v1_4ec4 = add i64 %v0_4ec4, 8
  %v2_4ec4 = inttoptr i64 %v1_4ec4 to i64*
  %v3_4ec4 = load i64, i64* %v2_4ec4, align 8
  store i64 %v3_4ec4, i64* @rdi, align 8
  %v1_4ec8 = inttoptr i64 %v3_4ec4 to i64*
  %v2_4ec8 = load i64, i64* %v1_4ec8, align 8
  store i64 %v2_4ec8, i64* @rax, align 8
  ret i64 %v2_4ec8
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot8keyindexEJii"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4ee0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4ee4 = load i64, i64* @rdi, align 8
  %v1_4ee4 = add i64 %v0_4ee4, 8
  %v2_4ee4 = inttoptr i64 %v1_4ee4 to i64*
  %v3_4ee4 = load i64, i64* %v2_4ee4, align 8
  store i64 %v3_4ee4, i64* @rdi, align 8
  %v1_4ee8 = inttoptr i64 %v3_4ee4 to i64*
  %v2_4ee8 = load i64, i64* %v1_4ee8, align 8
  store i64 %v2_4ee8, i64* @rax, align 8
  ret i64 %v2_4ee8
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot5valueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4f00:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4f04 = load i64, i64* @rdi, align 8
  %v1_4f04 = add i64 %v0_4f04, 8
  %v2_4f04 = inttoptr i64 %v1_4f04 to i64*
  %v3_4f04 = load i64, i64* %v2_4f04, align 8
  store i64 %v3_4f04, i64* @rdi, align 8
  %v1_4f08 = inttoptr i64 %v3_4f04 to i64*
  %v2_4f08 = load i64, i64* %v1_4f08, align 8
  store i64 %v2_4f08, i64* @rax, align 8
  ret i64 %v2_4f08
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot9toVarargsEJPNS1_7VarargsEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4f20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4f24 = load i64, i64* @rdi, align 8
  %v1_4f24 = add i64 %v0_4f24, 8
  %v2_4f24 = inttoptr i64 %v1_4f24 to i64*
  %v3_4f24 = load i64, i64* %v2_4f24, align 8
  store i64 %v3_4f24, i64* @rdi, align 8
  %v1_4f28 = inttoptr i64 %v3_4f24 to i64*
  %v2_4f28 = load i64, i64* %v1_4f28, align 8
  store i64 %v2_4f28, i64* @rax, align 8
  ret i64 %v2_4f28
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot5firstEJPNS1_19LuaTable$StrongSlotEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4f40:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4f40 = add i64 %arg1, 8
  %v2_4f40 = inttoptr i64 %v1_4f40 to i64*
  %v3_4f40 = load i64, i64* %v2_4f40, align 8
  store i64 %v3_4f40, i64* @rax, align 8
  ret i64 %v3_4f40
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot4findEJPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4f50:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4f50 = load i64, i64* @rbx, align 8
  %v0_4f51 = load i64, i64* @rdi, align 8
  store i64 %v0_4f51, i64* @rbx, align 8
  %v1_4f54 = add i64 %v0_4f51, 8
  %v2_4f54 = inttoptr i64 %v1_4f54 to i64*
  %v3_4f54 = load i64, i64* %v2_4f54, align 8
  store i64 %v3_4f54, i64* @rdi, align 8
  %v1_4f58 = inttoptr i64 %v3_4f54 to i64*
  %v2_4f58 = load i64, i64* %v1_4f58, align 8
  %v4_4f61 = trunc i64 %v2_4f58 to i8
  %v5_4f61 = icmp eq i8 %v4_4f61, 0
  %v1_4f68 = icmp eq i1 %v5_4f61, false
  %v4_4f68 = select i1 %v1_4f68, i64 %v0_4f51, i64 0
  store i64 %v4_4f68, i64* @rax, align 8
  store i64 %v0_4f50, i64* @rbx, align 8
  ret i64 %v4_4f68
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot5keyeqEJbPNS1_8LuaValueE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4f70:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4f74 = load i64, i64* @rdi, align 8
  %v1_4f74 = add i64 %v0_4f74, 8
  %v2_4f74 = inttoptr i64 %v1_4f74 to i64*
  %v3_4f74 = load i64, i64* %v2_4f74, align 8
  store i64 %v3_4f74, i64* @rdi, align 8
  %v1_4f78 = inttoptr i64 %v3_4f74 to i64*
  %v2_4f78 = load i64, i64* %v1_4f78, align 8
  store i64 %v2_4f78, i64* @rax, align 8
  ret i64 %v2_4f78
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot4restEJPNS1_13LuaTable$SlotEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4f90:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4f90 = add i64 %arg1, 16
  %v2_4f90 = inttoptr i64 %v1_4f90 to i64*
  %v3_4f90 = load i64, i64* %v2_4f90, align 8
  store i64 %v3_4f90, i64* @rax, align 8
  ret i64 %v3_4f90
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot8arraykeyEJii"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4fa0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4fa4 = load i64, i64* @rdi, align 8
  %v1_4fa4 = add i64 %v0_4fa4, 8
  %v2_4fa4 = inttoptr i64 %v1_4fa4 to i64*
  %v3_4fa4 = load i64, i64* %v2_4fa4, align 8
  store i64 %v3_4fa4, i64* @rdi, align 8
  %v1_4fa8 = inttoptr i64 %v3_4fa4 to i64*
  %v2_4fa8 = load i64, i64* %v1_4fa8, align 8
  store i64 %v2_4fa8, i64* @rax, align 8
  ret i64 %v2_4fa8
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot7setnextEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4fc0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4fc0 = icmp eq i64 %arg2, 0
  br i1 %v1_4fc0, label %dec_label_pc_4fd0, label %dec_label_pc_4fc5

dec_label_pc_4fc5:                                ; preds = %dec_label_pc_4fc0
  store i64 %arg1, i64* @rax, align 8
  %v2_4fc8 = add i64 %arg1, 16
  %v3_4fc8 = inttoptr i64 %v2_4fc8 to i64*
  store i64 %arg2, i64* %v3_4fc8, align 8
  %v0_4fcc = load i64, i64* @rax, align 8
  ret i64 %v0_4fcc

dec_label_pc_4fd0:                                ; preds = %dec_label_pc_4fc0
  %v1_4fd0 = add i64 %arg1, 8
  %v2_4fd0 = inttoptr i64 %v1_4fd0 to i64*
  %v3_4fd0 = load i64, i64* %v2_4fd0, align 8
  store i64 %v3_4fd0, i64* @rax, align 8
  ret i64 %v3_4fd0
}

define i64 @"_ZN3org4luaj3vm225LuaTable$NumberValueEntry3keyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_4fe0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_4fe0 = add i64 %arg1, 16
  %v2_4fe0 = inttoptr i64 %v1_4fe0 to i64*
  %v3_4fe0 = load i64, i64* %v2_4fe0, align 8
  store i64 %v3_4fe0, i64* @rax, align 8
  ret i64 %v3_4fe0
}

define i64 @"_ZN3org4luaj3vm225LuaTable$NumberValueEntry5keyeqEJbPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4ff0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_4ff7 = load i64, i64* @rdi, align 8
  %v1_4ff7 = add i64 %v0_4ff7, 16
  %v2_4ff7 = inttoptr i64 %v1_4ff7 to i64*
  %v3_4ff7 = load i64, i64* %v2_4ff7, align 8
  store i64 %v3_4ff7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm210LuaClosure9isclosureEJbv() local_unnamed_addr {
dec_label_pc_5010:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm210LuaClosure10optclosureEJPS2_S3_(i64 %arg1) local_unnamed_addr {
dec_label_pc_5020:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm210LuaClosure12checkclosureEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_5030:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_5040:
  store i8 0, i8* bitcast (i64* @global_var_5047.7476 to i8*), align 8
  %v0_5047 = load i64, i64* @rax, align 8
  ret i64 %v0_5047
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState9dumpBlockEJvP6JArrayIcEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_5050:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5054 = load i64, i64* @rdi, align 8
  %v1_5054 = add i64 %v0_5054, 24
  %v2_5054 = inttoptr i64 %v1_5054 to i64*
  %v3_5054 = load i64, i64* %v2_5054, align 8
  store i64 %v3_5054, i64* @rdi, align 8
  %v0_5058 = load i64, i64* @rdx, align 8
  store i64 %v0_5058, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  %v1_505c = inttoptr i64 %v3_5054 to i64*
  %v2_505c = load i64, i64* %v1_505c, align 8
  store i64 %v2_505c, i64* @rax, align 8
  ret i64 %v2_505c
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState8dumpCharEJvi(i64 %arg1) local_unnamed_addr {
dec_label_pc_5070:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5074 = load i64, i64* @rdi, align 8
  %v1_5074 = add i64 %v0_5074, 24
  %v2_5074 = inttoptr i64 %v1_5074 to i64*
  %v3_5074 = load i64, i64* %v2_5074, align 8
  store i64 %v3_5074, i64* @rdi, align 8
  %v1_5078 = inttoptr i64 %v3_5074 to i64*
  %v2_5078 = load i64, i64* %v1_5078, align 8
  store i64 %v2_5078, i64* @rax, align 8
  ret i64 %v2_5078
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState10dumpStringEJvPNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5090:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5090 = load i64, i64* %r12.global-to-local, align 8
  %v0_5092 = load i64, i64* %rbp.global-to-local, align 8
  %v0_5093 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_5093, i64* %rbp.global-to-local, align 8
  %v0_5096 = load i64, i64* @rbx, align 8
  %v0_509a = load i64, i64* @rdi, align 8
  store i64 %v0_509a, i64* @rbx, align 8
  store i64 %v0_5093, i64* @rdx, align 8
  store i64 %v0_5093, i64* %r12.global-to-local, align 8
  %v1_50bb = add i64 %v0_5093, 1
  store i64 %v1_50bb, i64* %rsi.global-to-local, align 8
  store i64 %v1_50bb, i64* @rax, align 8
  %v1_50c7 = add i64 %v0_509a, 24
  %v2_50c7 = inttoptr i64 %v1_50c7 to i64*
  %v3_50c7 = load i64, i64* %v2_50c7, align 8
  store i64 %v3_50c7, i64* %rsi.global-to-local, align 8
  store i64 %v0_5093, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v0_5093, i64* @rdi, align 8
  %v3_50d9 = load i64, i64* %v2_50c7, align 8
  store i64 %v3_50d9, i64* @rdi, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  %v1_50df = inttoptr i64 %v3_50d9 to i64*
  %v2_50df = load i64, i64* %v1_50df, align 8
  store i64 %v2_50df, i64* @rax, align 8
  store i64 %v0_5096, i64* @rbx, align 8
  store i64 %v0_5092, i64* %rbp.global-to-local, align 8
  store i64 %v0_5090, i64* %r12.global-to-local, align 8
  ret i64 %v2_50df
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState12dumpFunctionEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_50f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_50f2 = load i64, i64* @rdi, align 8
  store i64 %v0_50f2, i64* @rax, align 8
  ret i64 %v0_50f2
}

define i64 @_ZN3org4luaj3vm29LoadState9loadInt64EJxv(i64 %arg1) local_unnamed_addr {
dec_label_pc_5170:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5172 = load i64, i64* %rbp.global-to-local, align 8
  %v0_5173 = load i64, i64* @rdi, align 8
  store i64 %v0_5173, i64* %rbp.global-to-local, align 8
  %v2_51bd = mul i64 %v0_5173, 4294967296
  %v2_51c1 = or i64 %v2_51bd, %v0_5173
  store i64 %v2_51c1, i64* @rax, align 8
  store i64 %v0_5172, i64* %rbp.global-to-local, align 8
  ret i64 %v2_51c1
}

define i64 @"_ZN4lang12lang_luaj$114callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_51d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_51d0 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_51d4 = load i64, i64* @rdi, align 8
  store i64 %v0_51d4, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_51e7 = add i64 %v0_51d4, 24
  %v2_51e7 = inttoptr i64 %v1_51e7 to i64*
  %v3_51e7 = load i64, i64* %v2_51e7, align 8
  store i64 %v3_51e7, i64* @rdx, align 8
  %v1_51eb = add i64 %v3_51e7, 8
  %v2_51eb = inttoptr i64 %v1_51eb to i32*
  %v3_51eb = load i32, i32* %v2_51eb, align 4
  %v4_51eb = zext i32 %v3_51eb to i64
  store i64 %v4_51eb, i64* @rcx, align 8
  %v5_51ee = icmp eq i32 %v3_51eb, 0
  br i1 %v5_51ee, label %dec_label_pc_5215, label %dec_label_pc_51f2

dec_label_pc_51f2:                                ; preds = %dec_label_pc_51d0
  %v1_51f2 = add i64 %v3_51e7, 16
  %v2_51f2 = inttoptr i64 %v1_51f2 to i64*
  %v3_51f2 = load i64, i64* %v2_51f2, align 8
  store i64 %v3_51f2, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_5202 = trunc i64 %arg2 to i8
  %v5_5202 = icmp eq i8 %v4_5202, 0
  %v0_5204 = load i64, i64* inttoptr (i64 21003 to i64*), align 8
  store i64 %v0_5204, i64* @rax, align 8
  %v2_520b = load i64, i64* inttoptr (i64 21011 to i64*), align 8
  %v3_520b = select i1 %v5_5202, i64 %v2_520b, i64 %v0_5204
  store i64 %v3_520b, i64* @rax, align 8
  store i64 %v0_51d0, i64* @rbx, align 8
  ret i64 %v3_520b

dec_label_pc_5215:                                ; preds = %dec_label_pc_51d0
  ret i64 %arg2
}

define i64 @"_ZN4lang11lang_luaj$64callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5220:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5220 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_5224 = load i64, i64* @rdi, align 8
  store i64 %v0_5224, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_5237 = add i64 %v0_5224, 24
  %v2_5237 = inttoptr i64 %v1_5237 to i64*
  %v3_5237 = load i64, i64* %v2_5237, align 8
  store i64 %v3_5237, i64* @rdx, align 8
  %v1_523b = add i64 %v3_5237, 8
  %v2_523b = inttoptr i64 %v1_523b to i32*
  %v3_523b = load i32, i32* %v2_523b, align 4
  %v4_523b = zext i32 %v3_523b to i64
  store i64 %v4_523b, i64* @rcx, align 8
  %v5_523e = icmp eq i32 %v3_523b, 0
  br i1 %v5_523e, label %dec_label_pc_5265, label %dec_label_pc_5242

dec_label_pc_5242:                                ; preds = %dec_label_pc_5220
  %v1_5242 = add i64 %v3_5237, 16
  %v2_5242 = inttoptr i64 %v1_5242 to i64*
  %v3_5242 = load i64, i64* %v2_5242, align 8
  store i64 %v3_5242, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_5252 = trunc i64 %arg2 to i8
  %v5_5252 = icmp eq i8 %v4_5252, 0
  %v0_5254 = load i64, i64* inttoptr (i64 21083 to i64*), align 8
  store i64 %v0_5254, i64* @rax, align 8
  %v2_525b = load i64, i64* inttoptr (i64 21091 to i64*), align 8
  %v3_525b = select i1 %v5_5252, i64 %v2_525b, i64 %v0_5254
  store i64 %v3_525b, i64* @rax, align 8
  store i64 %v0_5220, i64* @rbx, align 8
  ret i64 %v3_525b

dec_label_pc_5265:                                ; preds = %dec_label_pc_5220
  ret i64 %arg2
}

define i64 @"_ZN4lang11lang_luaj$94callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5270:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5270 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_5274 = load i64, i64* @rdi, align 8
  store i64 %v0_5274, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_5287 = add i64 %v0_5274, 24
  %v2_5287 = inttoptr i64 %v1_5287 to i64*
  %v3_5287 = load i64, i64* %v2_5287, align 8
  store i64 %v3_5287, i64* @rdx, align 8
  %v1_528b = add i64 %v3_5287, 8
  %v2_528b = inttoptr i64 %v1_528b to i32*
  %v3_528b = load i32, i32* %v2_528b, align 4
  %v4_528b = zext i32 %v3_528b to i64
  store i64 %v4_528b, i64* @rcx, align 8
  %v5_528e = icmp eq i32 %v3_528b, 0
  br i1 %v5_528e, label %dec_label_pc_52b5, label %dec_label_pc_5292

dec_label_pc_5292:                                ; preds = %dec_label_pc_5270
  %v1_5292 = add i64 %v3_5287, 16
  %v2_5292 = inttoptr i64 %v1_5292 to i64*
  %v3_5292 = load i64, i64* %v2_5292, align 8
  store i64 %v3_5292, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_52a2 = trunc i64 %arg2 to i8
  %v5_52a2 = icmp eq i8 %v4_52a2, 0
  %v0_52a4 = load i64, i64* inttoptr (i64 21163 to i64*), align 8
  store i64 %v0_52a4, i64* @rax, align 8
  %v2_52ab = load i64, i64* inttoptr (i64 21171 to i64*), align 8
  %v3_52ab = select i1 %v5_52a2, i64 %v2_52ab, i64 %v0_52a4
  store i64 %v3_52ab, i64* @rax, align 8
  store i64 %v0_5270, i64* @rbx, align 8
  ret i64 %v3_52ab

dec_label_pc_52b5:                                ; preds = %dec_label_pc_5270
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$224callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_52c0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_52c0 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_52c4 = load i64, i64* @rdi, align 8
  store i64 %v0_52c4, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_52d7 = add i64 %v0_52c4, 24
  %v2_52d7 = inttoptr i64 %v1_52d7 to i64*
  %v3_52d7 = load i64, i64* %v2_52d7, align 8
  store i64 %v3_52d7, i64* @rdx, align 8
  %v1_52db = add i64 %v3_52d7, 8
  %v2_52db = inttoptr i64 %v1_52db to i32*
  %v3_52db = load i32, i32* %v2_52db, align 4
  %v4_52db = zext i32 %v3_52db to i64
  store i64 %v4_52db, i64* @rcx, align 8
  %v5_52de = icmp eq i32 %v3_52db, 0
  br i1 %v5_52de, label %dec_label_pc_5305, label %dec_label_pc_52e2

dec_label_pc_52e2:                                ; preds = %dec_label_pc_52c0
  %v1_52e2 = add i64 %v3_52d7, 16
  %v2_52e2 = inttoptr i64 %v1_52e2 to i64*
  %v3_52e2 = load i64, i64* %v2_52e2, align 8
  store i64 %v3_52e2, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_52f2 = trunc i64 %arg2 to i8
  %v5_52f2 = icmp eq i8 %v4_52f2, 0
  %v0_52f4 = load i64, i64* inttoptr (i64 21243 to i64*), align 8
  store i64 %v0_52f4, i64* @rax, align 8
  %v2_52fb = load i64, i64* inttoptr (i64 21251 to i64*), align 8
  %v3_52fb = select i1 %v5_52f2, i64 %v2_52fb, i64 %v0_52f4
  store i64 %v3_52fb, i64* @rax, align 8
  store i64 %v0_52c0, i64* @rbx, align 8
  ret i64 %v3_52fb

dec_label_pc_5305:                                ; preds = %dec_label_pc_52c0
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$314callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5310:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5310 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_5314 = load i64, i64* @rdi, align 8
  store i64 %v0_5314, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_5327 = add i64 %v0_5314, 24
  %v2_5327 = inttoptr i64 %v1_5327 to i64*
  %v3_5327 = load i64, i64* %v2_5327, align 8
  store i64 %v3_5327, i64* @rdx, align 8
  %v1_532b = add i64 %v3_5327, 8
  %v2_532b = inttoptr i64 %v1_532b to i32*
  %v3_532b = load i32, i32* %v2_532b, align 4
  %v4_532b = zext i32 %v3_532b to i64
  store i64 %v4_532b, i64* @rcx, align 8
  %v5_532e = icmp eq i32 %v3_532b, 0
  br i1 %v5_532e, label %dec_label_pc_5355, label %dec_label_pc_5332

dec_label_pc_5332:                                ; preds = %dec_label_pc_5310
  %v1_5332 = add i64 %v3_5327, 16
  %v2_5332 = inttoptr i64 %v1_5332 to i64*
  %v3_5332 = load i64, i64* %v2_5332, align 8
  store i64 %v3_5332, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_5342 = trunc i64 %arg2 to i8
  %v5_5342 = icmp eq i8 %v4_5342, 0
  %v0_5344 = load i64, i64* inttoptr (i64 21323 to i64*), align 8
  store i64 %v0_5344, i64* @rax, align 8
  %v2_534b = load i64, i64* inttoptr (i64 21331 to i64*), align 8
  %v3_534b = select i1 %v5_5342, i64 %v2_534b, i64 %v0_5344
  store i64 %v3_534b, i64* @rax, align 8
  store i64 %v0_5310, i64* @rbx, align 8
  ret i64 %v3_534b

dec_label_pc_5355:                                ; preds = %dec_label_pc_5310
  ret i64 %arg2
}

define i64 @"_ZN4lang14lang_luaj$77$04callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_5360:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5360 = load i64, i64* @rbx, align 8
  %v0_5361 = load i64, i64* @rdi, align 8
  %v1_5361 = add i64 %v0_5361, 24
  %v2_5361 = inttoptr i64 %v1_5361 to i64*
  %v3_5361 = load i64, i64* %v2_5361, align 8
  store i64 %v3_5361, i64* @rax, align 8
  %v1_5365 = add i64 %v3_5361, 8
  %v2_5365 = inttoptr i64 %v1_5365 to i32*
  %v3_5365 = load i32, i32* %v2_5365, align 4
  %v5_5368 = icmp eq i32 %v3_5365, 0
  br i1 %v5_5368, label %dec_label_pc_53aa, label %dec_label_pc_536c

dec_label_pc_536c:                                ; preds = %dec_label_pc_5360
  store i64 %v0_5361, i64* @rbx, align 8
  %v1_536f = add i64 %v3_5361, 16
  %v2_536f = inttoptr i64 %v1_536f to i64*
  %v3_536f = load i64, i64* %v2_536f, align 8
  store i64 %v3_536f, i64* @rdi, align 8
  %v1_5373 = inttoptr i64 %v3_536f to i64*
  %v2_5373 = load i64, i64* %v1_5373, align 8
  store i64 %v2_5373, i64* @rax, align 8
  %v1_537c = add i64 %v0_5361, 32
  %v2_537c = inttoptr i64 %v1_537c to i64*
  %v3_537c = load i64, i64* %v2_537c, align 8
  store i64 %v3_537c, i64* @rdx, align 8
  %v1_5380 = add i64 %v3_537c, 8
  %v2_5380 = inttoptr i64 %v1_5380 to i32*
  %v3_5380 = load i32, i32* %v2_5380, align 4
  %v4_5380 = zext i32 %v3_5380 to i64
  store i64 %v4_5380, i64* @rcx, align 8
  %v5_5383 = icmp eq i32 %v3_5380, 0
  br i1 %v5_5383, label %dec_label_pc_53aa, label %dec_label_pc_5387

dec_label_pc_5387:                                ; preds = %dec_label_pc_536c
  %v1_538b = inttoptr i64 %v2_5373 to i64*
  %v2_538b = load i64, i64* %v1_538b, align 8
  store i64 %v2_538b, i64* @rdx, align 8
  store i64 %v2_5373, i64* @rdi, align 8
  %v4_5397 = trunc i64 %v2_5373 to i8
  %v5_5397 = icmp eq i8 %v4_5397, 0
  %v0_5399 = load i64, i64* inttoptr (i64 21408 to i64*), align 32
  store i64 %v0_5399, i64* @rax, align 8
  %v2_53a0 = load i64, i64* inttoptr (i64 21416 to i64*), align 8
  %v3_53a0 = select i1 %v5_5397, i64 %v2_53a0, i64 %v0_5399
  store i64 %v3_53a0, i64* @rax, align 8
  store i64 %v0_5360, i64* @rbx, align 8
  ret i64 %v3_53a0

dec_label_pc_53aa:                                ; preds = %dec_label_pc_536c, %dec_label_pc_5360
  %v1_53a9 = phi i64 [ %v2_5373, %dec_label_pc_536c ], [ %v3_5361, %dec_label_pc_5360 ]
  ret i64 %v1_53a9
}

define i64 @"_ZN4lang19lang_luaj$77$15$0$04callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_53c0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_53c0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_53c1 = load i64, i64* @rbx, align 8
  %v0_53c2 = load i64, i64* @rdi, align 8
  store i64 %v0_53c2, i64* @rbx, align 8
  %v1_53c9 = add i64 %v0_53c2, 24
  %v2_53c9 = inttoptr i64 %v1_53c9 to i64*
  %v3_53c9 = load i64, i64* %v2_53c9, align 8
  store i64 %v3_53c9, i64* @rdi, align 8
  %v1_53d4 = inttoptr i64 %v3_53c9 to i64*
  %v2_53d4 = load i64, i64* %v1_53d4, align 8
  store i64 %v2_53d4, i64* @rax, align 8
  %v1_53dd = add i64 %v0_53c2, 32
  %v2_53dd = inttoptr i64 %v1_53dd to i64*
  %v3_53dd = load i64, i64* %v2_53dd, align 8
  store i64 %v3_53dd, i64* @rax, align 8
  %v1_53e1 = add i64 %v3_53dd, 8
  %v2_53e1 = inttoptr i64 %v1_53e1 to i32*
  %v3_53e1 = load i32, i32* %v2_53e1, align 4
  %v4_53e1 = zext i32 %v3_53e1 to i64
  store i64 %v4_53e1, i64* @rdx, align 8
  %v5_53e4 = icmp eq i32 %v3_53e1, 0
  br i1 %v5_53e4, label %dec_label_pc_5416, label %dec_label_pc_53e8

dec_label_pc_53e8:                                ; preds = %dec_label_pc_53c0
  %v1_53e8 = add i64 %v3_53dd, 16
  %v2_53e8 = inttoptr i64 %v1_53e8 to i64*
  %v3_53e8 = load i64, i64* %v2_53e8, align 8
  store i64 %v3_53e8, i64* @rdi, align 8
  %v1_53ec = inttoptr i64 %v3_53e8 to i64*
  %v2_53ec = load i64, i64* %v1_53ec, align 8
  store i64 %v2_53ec, i64* @rax, align 8
  %v3_53f5 = load i64, i64* %v2_53c9, align 8
  store i64 %v3_53f5, i64* @rdi, align 8
  store i64 %v2_53ec, i64* %rbp.global-to-local, align 8
  store i64 %v2_53ec, i64* @rax, align 8
  store i64 %v0_53c1, i64* @rbx, align 8
  store i64 %v0_53c0, i64* %rbp.global-to-local, align 8
  ret i64 %v2_53ec

dec_label_pc_5416:                                ; preds = %dec_label_pc_53c0
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$264callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5420:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5420 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_5424 = load i64, i64* @rdi, align 8
  store i64 %v0_5424, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_5437 = add i64 %v0_5424, 24
  %v2_5437 = inttoptr i64 %v1_5437 to i64*
  %v3_5437 = load i64, i64* %v2_5437, align 8
  store i64 %v3_5437, i64* @rdx, align 8
  %v1_543b = add i64 %v3_5437, 8
  %v2_543b = inttoptr i64 %v1_543b to i32*
  %v3_543b = load i32, i32* %v2_543b, align 4
  %v4_543b = zext i32 %v3_543b to i64
  store i64 %v4_543b, i64* @rcx, align 8
  %v5_543e = icmp eq i32 %v3_543b, 0
  br i1 %v5_543e, label %dec_label_pc_5465, label %dec_label_pc_5442

dec_label_pc_5442:                                ; preds = %dec_label_pc_5420
  %v1_5442 = add i64 %v3_5437, 16
  %v2_5442 = inttoptr i64 %v1_5442 to i64*
  %v3_5442 = load i64, i64* %v2_5442, align 8
  store i64 %v3_5442, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_5452 = trunc i64 %arg2 to i8
  %v5_5452 = icmp eq i8 %v4_5452, 0
  %v0_5454 = load i64, i64* inttoptr (i64 21595 to i64*), align 8
  store i64 %v0_5454, i64* @rax, align 8
  %v2_545b = load i64, i64* inttoptr (i64 21603 to i64*), align 8
  %v3_545b = select i1 %v5_5452, i64 %v2_545b, i64 %v0_5454
  store i64 %v3_545b, i64* @rax, align 8
  store i64 %v0_5420, i64* @rbx, align 8
  ret i64 %v3_545b

dec_label_pc_5465:                                ; preds = %dec_label_pc_5420
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$474callEJPN3org4luaj3vm28LuaValueES5_S5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_5470:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5470 = load i64, i64* %r15.global-to-local, align 8
  %v0_5472 = load i64, i64* %r14.global-to-local, align 8
  %v0_5474 = load i64, i64* @rcx, align 8
  store i64 %v0_5474, i64* %r14.global-to-local, align 8
  %v0_5477 = load i64, i64* %r13.global-to-local, align 8
  %v0_5479 = load i64, i64* %r12.global-to-local, align 8
  %v0_547b = load i64, i64* @rdx, align 8
  store i64 %v0_547b, i64* %r13.global-to-local, align 8
  %v0_547e = load i64, i64* %rbp.global-to-local, align 8
  %v0_547f = load i64, i64* @rbx, align 8
  %v0_5480 = load i64, i64* @rdi, align 8
  store i64 %v0_5480, i64* %r12.global-to-local, align 8
  %v0_5483 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_5483, i64* %rbp.global-to-local, align 8
  %storemerge.pre = load i64, i64* inttoptr (i64 21649 to i64*), align 8
  store i64 %storemerge.pre, i64* @rbx, align 8
  store i64 %v0_5483, i64* @rax, align 8
  store i64 %v0_5483, i64* @rdi, align 8
  %v1_552f266 = inttoptr i64 %storemerge.pre to i64*
  %v2_552f267 = load i64, i64* %v1_552f266, align 8
  store i64 %v2_552f267, i64* @rdx, align 8
  store i64 %storemerge.pre, i64* @rdi, align 8
  %v4_553e268 = trunc i64 %v0_5483 to i8
  %v5_553e269 = icmp eq i8 %v4_553e268, 0
  %v1_5540270 = icmp eq i1 %v5_553e269, false
  br i1 %v1_5540270, label %dec_label_pc_54a0.lr.ph, label %dec_label_pc_5546.loopexit

dec_label_pc_54a0.lr.ph:                          ; preds = %dec_label_pc_5470
  %v1_54a0 = add i64 %v0_5480, 24
  %v2_54a0 = inttoptr i64 %v1_54a0 to i64*
  br label %dec_label_pc_54a0

dec_label_pc_54a0:                                ; preds = %dec_label_pc_54a0.lr.ph, %dec_label_pc_550f
  %v1_552f272 = phi i64* [ %v1_552f266, %dec_label_pc_54a0.lr.ph ], [ %v1_552f, %dec_label_pc_550f ]
  %v0_5567271 = phi i64 [ %storemerge.pre, %dec_label_pc_54a0.lr.ph ], [ %v2_550a, %dec_label_pc_550f ]
  %v3_54a0 = load i64, i64* %v2_54a0, align 8
  store i64 %v3_54a0, i64* @rax, align 8
  %v1_54a5 = add i64 %v3_54a0, 8
  %v2_54a5 = inttoptr i64 %v1_54a5 to i32*
  %v3_54a5 = load i32, i32* %v2_54a5, align 4
  %v4_54a5 = zext i32 %v3_54a5 to i64
  store i64 %v4_54a5, i64* @rdx, align 8
  %v5_54a8 = icmp eq i32 %v3_54a5, 0
  br i1 %v5_54a8, label %dec_label_pc_5598, label %dec_label_pc_54b0

dec_label_pc_54b0:                                ; preds = %dec_label_pc_54a0
  %v1_54b0 = add i64 %v3_54a0, 16
  %v2_54b0 = inttoptr i64 %v1_54b0 to i64*
  %v3_54b0 = load i64, i64* %v2_54b0, align 8
  store i64 %v3_54b0, i64* %r15.global-to-local, align 8
  %v2_54b4 = load i64, i64* %v1_552f272, align 8
  store i64 %v2_54b4, i64* @rax, align 8
  store i64 %v0_5567271, i64* @rdi, align 8
  %v0_54ba = load i64, i64* inttoptr (i64 21697 to i64*), align 8
  store i64 %v0_54ba, i64* %rsi.global-to-local, align 8
  %v1_54c7 = inttoptr i64 %v2_54b4 to i64*
  %v2_54c7 = load i64, i64* %v1_54c7, align 8
  store i64 %v2_54c7, i64* @rdx, align 8
  %v0_54ca = load i64, i64* inttoptr (i64 21713 to i64*), align 8
  store i64 %v0_54ca, i64* @rdx, align 8
  store i64 %v2_54b4, i64* %rsi.global-to-local, align 8
  store i64 %v0_5483, i64* @rdi, align 8
  %v1_54ea = inttoptr i64 %v3_54b0 to i64*
  %v2_54ea = load i64, i64* %v1_54ea, align 8
  store i64 %v2_54ea, i64* @rcx, align 8
  store i64 %v0_547b, i64* @rdx, align 8
  store i64 %v2_54b4, i64* %rsi.global-to-local, align 8
  store i64 %v3_54b0, i64* @rdi, align 8
  %v2_54fc = load i64, i64* %v1_54c7, align 8
  store i64 %v2_54fc, i64* @rdx, align 8
  store i64 %v2_54b4, i64* @rdi, align 8
  %v4_5508 = trunc i64 %v2_54b4 to i8
  %v5_5508 = icmp eq i8 %v4_5508, 0
  %v2_550a = load i64, i64* %v1_552f272, align 8
  store i64 %v2_550a, i64* @rax, align 8
  %v1_550d = icmp eq i1 %v5_5508, false
  br i1 %v1_550d, label %dec_label_pc_5560, label %dec_label_pc_550f

dec_label_pc_550f:                                ; preds = %dec_label_pc_54b0
  store i64 %v0_5567271, i64* @rdi, align 8
  %v0_5512 = load i64, i64* inttoptr (i64 21785 to i64*), align 8
  store i64 %v0_5512, i64* %rsi.global-to-local, align 8
  store i64 %v2_550a, i64* @rbx, align 8
  store i64 %v0_5512, i64* @rax, align 8
  store i64 %v0_5483, i64* @rdi, align 8
  %v1_552f = inttoptr i64 %v2_550a to i64*
  %v2_552f = load i64, i64* %v1_552f, align 8
  store i64 %v2_552f, i64* @rdx, align 8
  store i64 %v0_5512, i64* %rsi.global-to-local, align 8
  store i64 %v2_550a, i64* @rdi, align 8
  %v4_553e = trunc i64 %v0_5512 to i8
  %v5_553e = icmp eq i8 %v4_553e, 0
  %v1_5540 = icmp eq i1 %v5_553e, false
  br i1 %v1_5540, label %dec_label_pc_54a0, label %dec_label_pc_5546.loopexit

dec_label_pc_5546.loopexit:                       ; preds = %dec_label_pc_550f, %dec_label_pc_5470
  br label %dec_label_pc_5546

dec_label_pc_5546:                                ; preds = %dec_label_pc_5546.loopexit, %dec_label_pc_5560
  %v0_5546 = phi i64 [ %v0_5474, %dec_label_pc_5546.loopexit ], [ %v2_550a, %dec_label_pc_5560 ]
  store i64 %v0_5546, i64* @rax, align 8
  store i64 %v0_547f, i64* @rbx, align 8
  store i64 %v0_547e, i64* %rbp.global-to-local, align 8
  store i64 %v0_5479, i64* %r12.global-to-local, align 8
  store i64 %v0_5477, i64* %r13.global-to-local, align 8
  store i64 %v0_5472, i64* %r14.global-to-local, align 8
  store i64 %v0_5470, i64* %r15.global-to-local, align 8
  ret i64 %v0_5546

dec_label_pc_5560:                                ; preds = %dec_label_pc_54b0
  %v0_5560 = load i64, i64* inttoptr (i64 21863 to i64*), align 8
  store i64 %v0_5560, i64* %rsi.global-to-local, align 8
  store i64 %v0_5567271, i64* @rdi, align 8
  %v1_5570 = inttoptr i64 %v2_550a to i64*
  %v2_5570 = load i64, i64* %v1_5570, align 8
  store i64 %v2_5570, i64* @rdx, align 8
  %v0_5573 = load i64, i64* inttoptr (i64 21882 to i64*), align 8
  store i64 %v0_5573, i64* @rdx, align 8
  store i64 %v2_550a, i64* %rsi.global-to-local, align 8
  store i64 %v0_5483, i64* @rdi, align 8
  store i64 %v2_550a, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_5546

dec_label_pc_5598:                                ; preds = %dec_label_pc_54a0
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$404callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_55b0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_55b0 = load i64, i64* %r14.global-to-local, align 8
  %v0_55b2 = load i64, i64* %r13.global-to-local, align 8
  %v0_55b4 = load i64, i64* %r12.global-to-local, align 8
  %v0_55b6 = load i64, i64* %rbp.global-to-local, align 8
  %v0_55b7 = load i64, i64* @rbx, align 8
  %v0_55b8 = load i64, i64* @rdi, align 8
  %v1_55b8 = add i64 %v0_55b8, 24
  %v2_55b8 = inttoptr i64 %v1_55b8 to i64*
  %v3_55b8 = load i64, i64* %v2_55b8, align 8
  store i64 %v3_55b8, i64* @rax, align 8
  %v1_55bc = add i64 %v3_55b8, 8
  %v2_55bc = inttoptr i64 %v1_55bc to i32*
  %v3_55bc = load i32, i32* %v2_55bc, align 4
  %v4_55bc = zext i32 %v3_55bc to i64
  store i64 %v4_55bc, i64* @rdx, align 8
  %v5_55bf = icmp eq i32 %v3_55bc, 0
  br i1 %v5_55bf, label %dec_label_pc_566e, label %dec_label_pc_55c7

dec_label_pc_55c7:                                ; preds = %dec_label_pc_55b0
  %v1_55c7 = add i64 %v3_55b8, 16
  %v2_55c7 = inttoptr i64 %v1_55c7 to i64*
  %v3_55c7 = load i64, i64* %v2_55c7, align 8
  store i64 %v3_55c7, i64* %r13.global-to-local, align 8
  %v2_55cb = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_55cb, i64* @rax, align 8
  store i64 %v2_55cb, i64* %r12.global-to-local, align 8
  store i64 %v0_55b8, i64* %r14.global-to-local, align 8
  store i64 %v2_55cb, i64* @rdi, align 8
  store i64 %v2_55cb, i64* @rdx, align 8
  %v0_55e0 = load i64, i64* inttoptr (i64 21991 to i64*), align 8
  store i64 %v0_55e0, i64* %rsi.global-to-local, align 8
  store i64 %v2_55cb, i64* @rdi, align 8
  store i64 %v2_55cb, i64* @rbx, align 8
  %v0_564b246 = load i64, i64* inttoptr (i64 22098 to i64*), align 8
  store i64 %v0_564b246, i64* @rdi, align 8
  store i64 %v2_55cb, i64* %rsi.global-to-local, align 8
  %v1_5655247 = inttoptr i64 %v0_564b246 to i64*
  %v2_5655248 = load i64, i64* %v1_5655247, align 8
  store i64 %v2_5655248, i64* @rax, align 8
  %v4_565e249 = trunc i64 %v2_5655248 to i8
  %v5_565e250 = icmp eq i8 %v4_565e249, 0
  %v1_5660251 = icmp eq i1 %v5_565e250, false
  br i1 %v1_5660251, label %dec_label_pc_55f8.lr.ph, label %dec_label_pc_5662

dec_label_pc_55f8.lr.ph:                          ; preds = %dec_label_pc_55c7
  %v1_55fb = add i64 %v0_55b8, 32
  %v2_55fb = inttoptr i64 %v1_55fb to i64*
  br label %dec_label_pc_55f8

dec_label_pc_55f8:                                ; preds = %dec_label_pc_55f8.lr.ph, %dec_label_pc_55f8
  %v0_5635253 = phi i64 [ %v2_55cb, %dec_label_pc_55f8.lr.ph ], [ %v2_5635, %dec_label_pc_55f8 ]
  %v0_5623252 = phi i64 [ %v3_55c7, %dec_label_pc_55f8.lr.ph ], [ %v2_55f8, %dec_label_pc_55f8 ]
  %v1_55f8 = inttoptr i64 %v0_5635253 to i64*
  %v2_55f8 = load i64, i64* %v1_55f8, align 8
  store i64 %v2_55f8, i64* @rax, align 8
  %v3_55fb = load i64, i64* %v2_55fb, align 8
  store i64 %v3_55fb, i64* %rbp.global-to-local, align 8
  store i64 %v0_5635253, i64* @rdi, align 8
  %v0_5602 = load i64, i64* inttoptr (i64 22025 to i64*), align 8
  store i64 %v0_5602, i64* @rdx, align 8
  store i64 %v2_55f8, i64* %rsi.global-to-local, align 8
  store i64 %v2_55cb, i64* @rdi, align 8
  %v1_561f = inttoptr i64 %v3_55fb to i64*
  %v2_561f = load i64, i64* %v1_561f, align 8
  store i64 %v2_561f, i64* @rcx, align 8
  store i64 %v0_5623252, i64* @rdx, align 8
  store i64 %v2_55f8, i64* %rsi.global-to-local, align 8
  store i64 %v3_55fb, i64* @rdi, align 8
  store i64 %v2_55f8, i64* %r13.global-to-local, align 8
  %v2_5635 = load i64, i64* %v1_55f8, align 8
  store i64 %v2_5635, i64* @rax, align 8
  store i64 %v0_5635253, i64* @rdi, align 8
  %v0_563b = load i64, i64* inttoptr (i64 22082 to i64*), align 8
  store i64 %v0_563b, i64* %rsi.global-to-local, align 8
  store i64 %v2_5635, i64* @rbx, align 8
  %v0_564b = load i64, i64* inttoptr (i64 22098 to i64*), align 8
  store i64 %v0_564b, i64* @rdi, align 8
  store i64 %v2_5635, i64* %rsi.global-to-local, align 8
  %v1_5655 = inttoptr i64 %v0_564b to i64*
  %v2_5655 = load i64, i64* %v1_5655, align 8
  store i64 %v2_5655, i64* @rax, align 8
  %v4_565e = trunc i64 %v2_5655 to i8
  %v5_565e = icmp eq i8 %v4_565e, 0
  %v1_5660 = icmp eq i1 %v5_565e, false
  br i1 %v1_5660, label %dec_label_pc_55f8, label %dec_label_pc_5662

dec_label_pc_5662:                                ; preds = %dec_label_pc_55f8, %dec_label_pc_55c7
  %v0_5623.lcssa = phi i64 [ %v3_55c7, %dec_label_pc_55c7 ], [ %v2_55f8, %dec_label_pc_55f8 ]
  store i64 %v0_5623.lcssa, i64* @rax, align 8
  store i64 %v0_55b7, i64* @rbx, align 8
  store i64 %v0_55b6, i64* %rbp.global-to-local, align 8
  store i64 %v0_55b4, i64* %r12.global-to-local, align 8
  store i64 %v0_55b2, i64* %r13.global-to-local, align 8
  store i64 %v0_55b0, i64* %r14.global-to-local, align 8
  ret i64 %v0_5623.lcssa

dec_label_pc_566e:                                ; preds = %dec_label_pc_55b0
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$354callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5680:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5680 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_5684 = load i64, i64* @rdi, align 8
  store i64 %v0_5684, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_5697 = add i64 %v0_5684, 24
  %v2_5697 = inttoptr i64 %v1_5697 to i64*
  %v3_5697 = load i64, i64* %v2_5697, align 8
  store i64 %v3_5697, i64* @rdx, align 8
  %v1_569b = add i64 %v3_5697, 8
  %v2_569b = inttoptr i64 %v1_569b to i32*
  %v3_569b = load i32, i32* %v2_569b, align 4
  %v4_569b = zext i32 %v3_569b to i64
  store i64 %v4_569b, i64* @rcx, align 8
  %v5_569e = icmp eq i32 %v3_569b, 0
  br i1 %v5_569e, label %dec_label_pc_56c5, label %dec_label_pc_56a2

dec_label_pc_56a2:                                ; preds = %dec_label_pc_5680
  %v1_56a2 = add i64 %v3_5697, 16
  %v2_56a2 = inttoptr i64 %v1_56a2 to i64*
  %v3_56a2 = load i64, i64* %v2_56a2, align 8
  store i64 %v3_56a2, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_56b2 = trunc i64 %arg2 to i8
  %v5_56b2 = icmp eq i8 %v4_56b2, 0
  %v0_56b4 = load i64, i64* inttoptr (i64 22203 to i64*), align 8
  store i64 %v0_56b4, i64* @rax, align 8
  %v2_56bb = load i64, i64* inttoptr (i64 22211 to i64*), align 8
  %v3_56bb = select i1 %v5_56b2, i64 %v2_56bb, i64 %v0_56b4
  store i64 %v3_56bb, i64* @rax, align 8
  store i64 %v0_5680, i64* @rbx, align 8
  ret i64 %v3_56bb

dec_label_pc_56c5:                                ; preds = %dec_label_pc_5680
  ret i64 %arg2
}

define i64 @"_ZN4lang14lang_luaj$44$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_56d0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_56d0 = load i64, i64* %r13.global-to-local, align 8
  %v0_56d2 = load i64, i64* %r12.global-to-local, align 8
  %v0_56d4 = load i64, i64* %rbp.global-to-local, align 8
  %v0_56d5 = load i64, i64* @rbx, align 8
  %v0_56d6 = load i64, i64* @rdi, align 8
  store i64 %v0_56d6, i64* %rbp.global-to-local, align 8
  %v1_56dd = add i64 %v0_56d6, 32
  %v2_56dd = inttoptr i64 %v1_56dd to i64*
  %v3_56dd = load i64, i64* %v2_56dd, align 8
  store i64 %v3_56dd, i64* @rax, align 8
  %v1_56e1 = add i64 %v0_56d6, 24
  %v2_56e1 = inttoptr i64 %v1_56e1 to i64*
  %v3_56e1 = load i64, i64* %v2_56e1, align 8
  store i64 %v3_56e1, i64* @rdi, align 8
  %v1_56e5 = add i64 %v3_56dd, 8
  %v2_56e5 = inttoptr i64 %v1_56e5 to i32*
  %v3_56e5 = load i32, i32* %v2_56e5, align 4
  %v5_56e9 = icmp eq i32 %v3_56e5, 0
  br i1 %v5_56e9, label %dec_label_pc_57b8, label %dec_label_pc_56f2

dec_label_pc_56f2:                                ; preds = %dec_label_pc_56d0
  %v0_56f2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_56f2, i64* %r13.global-to-local, align 8
  %v1_56f5 = add i64 %v3_56dd, 16
  %v2_56f5 = inttoptr i64 %v1_56f5 to i64*
  %v3_56f5 = load i64, i64* %v2_56f5, align 8
  store i64 %v3_56f5, i64* %rsi.global-to-local, align 8
  %v1_56f9 = inttoptr i64 %v3_56e1 to i64*
  %v2_56f9 = load i64, i64* %v1_56f9, align 8
  store i64 %v2_56f9, i64* @rax, align 8
  store i64 %v0_56f2, i64* @rdx, align 8
  %v1_5705 = add i64 %v0_56d6, 40
  %v2_5705 = inttoptr i64 %v1_5705 to i64*
  %v3_5705 = load i64, i64* %v2_5705, align 8
  store i64 %v3_5705, i64* @rax, align 8
  %v0_5709 = load i64, i64* inttoptr (i64 22288 to i64*), align 16
  store i64 %v0_5709, i64* @rbx, align 8
  %v1_5710 = add i64 %v3_5705, 8
  %v2_5710 = inttoptr i64 %v1_5710 to i32*
  %v3_5710 = load i32, i32* %v2_5710, align 4
  %v4_5710 = zext i32 %v3_5710 to i64
  store i64 %v4_5710, i64* %rsi.global-to-local, align 8
  %v5_5713 = icmp eq i32 %v3_5710, 0
  %v1_5715 = icmp eq i1 %v5_5713, false
  br i1 %v1_5715, label %dec_label_pc_5786, label %dec_label_pc_5717

dec_label_pc_5717:                                ; preds = %dec_label_pc_56f2
  ret i64 %v3_5705

dec_label_pc_5720:                                ; preds = %dec_label_pc_5786
  %v2_5720 = load i64, i64* %v1_5793, align 8
  store i64 %v2_5720, i64* @rax, align 8
  %v3_5723 = load i64, i64* %v2_56e1, align 8
  store i64 %v3_5723, i64* %r12.global-to-local, align 8
  store i64 %v0_5765, i64* @rdi, align 8
  %v0_572a = load i64, i64* inttoptr (i64 22321 to i64*), align 8
  store i64 %v0_572a, i64* %rsi.global-to-local, align 8
  %v3_5737 = load i64, i64* %v2_5705, align 8
  store i64 %v3_5737, i64* @rdx, align 8
  %v1_573b = add i64 %v3_5737, 8
  %v2_573b = inttoptr i64 %v1_573b to i32*
  %v3_573b = load i32, i32* %v2_573b, align 4
  %v4_573b = zext i32 %v3_573b to i64
  store i64 %v4_573b, i64* @rcx, align 8
  %v5_573e = icmp eq i32 %v3_573b, 0
  br i1 %v5_573e, label %dec_label_pc_57b8.loopexit, label %dec_label_pc_5742

dec_label_pc_5742:                                ; preds = %dec_label_pc_5720
  %v1_5742 = add i64 %v3_5737, 16
  %v2_5742 = inttoptr i64 %v1_5742 to i64*
  %v3_5742 = load i64, i64* %v2_5742, align 8
  store i64 %v3_5742, i64* @rdi, align 8
  store i64 %v2_5720, i64* %rsi.global-to-local, align 8
  %v1_5749 = inttoptr i64 %v3_5742 to i64*
  %v2_5749 = load i64, i64* %v1_5749, align 8
  store i64 %v2_5749, i64* @rdx, align 8
  %v1_5752 = inttoptr i64 %v3_5723 to i64*
  %v2_5752 = load i64, i64* %v1_5752, align 8
  store i64 %v2_5752, i64* @rcx, align 8
  store i64 %v0_56f2, i64* @rdx, align 8
  store i64 %v2_5720, i64* %rsi.global-to-local, align 8
  store i64 %v3_5723, i64* @rdi, align 8
  %v2_5765 = load i64, i64* %v1_5793, align 8
  store i64 %v2_5765, i64* @rax, align 8
  store i64 %v0_5765, i64* @rdi, align 8
  %v0_576b = load i64, i64* inttoptr (i64 22386 to i64*), align 8
  store i64 %v0_576b, i64* %rsi.global-to-local, align 8
  store i64 %v2_5765, i64* @rbx, align 8
  %v3_577b = load i64, i64* %v2_5705, align 8
  store i64 %v3_577b, i64* @rax, align 8
  %v1_577f = add i64 %v3_577b, 8
  %v2_577f = inttoptr i64 %v1_577f to i32*
  %v3_577f = load i32, i32* %v2_577f, align 4
  %v4_577f = zext i32 %v3_577f to i64
  store i64 %v4_577f, i64* @rdx, align 8
  %v5_5782 = icmp eq i32 %v3_577f, 0
  br i1 %v5_5782, label %dec_label_pc_57b8.loopexit, label %dec_label_pc_5786

dec_label_pc_5786:                                ; preds = %dec_label_pc_56f2, %dec_label_pc_5742
  %v0_5765 = phi i64 [ %v2_5765, %dec_label_pc_5742 ], [ %v0_5709, %dec_label_pc_56f2 ]
  %v0_5786 = phi i64 [ %v3_577b, %dec_label_pc_5742 ], [ %v3_5705, %dec_label_pc_56f2 ]
  %v1_5786 = add i64 %v0_5786, 16
  %v2_5786 = inttoptr i64 %v1_5786 to i64*
  %v3_5786 = load i64, i64* %v2_5786, align 8
  store i64 %v3_5786, i64* @rdi, align 8
  %v1_578a = inttoptr i64 %v3_5786 to i64*
  %v2_578a = load i64, i64* %v1_578a, align 8
  store i64 %v2_578a, i64* @rax, align 8
  %v1_5793 = inttoptr i64 %v0_5765 to i64*
  %v2_5793 = load i64, i64* %v1_5793, align 8
  store i64 %v2_5793, i64* @rdx, align 8
  store i64 %v2_578a, i64* %rsi.global-to-local, align 8
  store i64 %v0_5765, i64* @rdi, align 8
  %v4_57a2 = trunc i64 %v2_578a to i8
  %v5_57a2 = icmp eq i8 %v4_57a2, 0
  %v1_57a4 = icmp eq i1 %v5_57a2, false
  br i1 %v1_57a4, label %dec_label_pc_5720, label %dec_label_pc_57aa

dec_label_pc_57aa:                                ; preds = %dec_label_pc_5786
  store i64 %v0_56f2, i64* @rax, align 8
  store i64 %v0_56d5, i64* @rbx, align 8
  store i64 %v0_56d4, i64* %rbp.global-to-local, align 8
  store i64 %v0_56d2, i64* %r12.global-to-local, align 8
  store i64 %v0_56d0, i64* %r13.global-to-local, align 8
  ret i64 %v0_56f2

dec_label_pc_57b8.loopexit:                       ; preds = %dec_label_pc_5720, %dec_label_pc_5742
  br label %dec_label_pc_57b8

dec_label_pc_57b8:                                ; preds = %dec_label_pc_57b8.loopexit, %dec_label_pc_56d0
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$194callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_57d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_57d0 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_57d4 = load i64, i64* @rdi, align 8
  store i64 %v0_57d4, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_57e7 = add i64 %v0_57d4, 24
  %v2_57e7 = inttoptr i64 %v1_57e7 to i64*
  %v3_57e7 = load i64, i64* %v2_57e7, align 8
  store i64 %v3_57e7, i64* @rdx, align 8
  %v1_57eb = add i64 %v3_57e7, 8
  %v2_57eb = inttoptr i64 %v1_57eb to i32*
  %v3_57eb = load i32, i32* %v2_57eb, align 4
  %v4_57eb = zext i32 %v3_57eb to i64
  store i64 %v4_57eb, i64* @rcx, align 8
  %v5_57ee = icmp eq i32 %v3_57eb, 0
  br i1 %v5_57ee, label %dec_label_pc_5815, label %dec_label_pc_57f2

dec_label_pc_57f2:                                ; preds = %dec_label_pc_57d0
  %v1_57f2 = add i64 %v3_57e7, 16
  %v2_57f2 = inttoptr i64 %v1_57f2 to i64*
  %v3_57f2 = load i64, i64* %v2_57f2, align 8
  store i64 %v3_57f2, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_5802 = trunc i64 %arg2 to i8
  %v5_5802 = icmp eq i8 %v4_5802, 0
  %v0_5804 = load i64, i64* inttoptr (i64 22539 to i64*), align 8
  store i64 %v0_5804, i64* @rax, align 8
  %v2_580b = load i64, i64* inttoptr (i64 22547 to i64*), align 8
  %v3_580b = select i1 %v5_5802, i64 %v2_580b, i64 %v0_5804
  store i64 %v3_580b, i64* @rax, align 8
  store i64 %v0_57d0, i64* @rbx, align 8
  ret i64 %v3_580b

dec_label_pc_5815:                                ; preds = %dec_label_pc_57d0
  ret i64 %arg2
}

define i64 @"_ZN4lang14lang_luaj$76$04callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_5820:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5820 = load i64, i64* @rbx, align 8
  %v0_5821 = load i64, i64* @rdi, align 8
  %v1_5821 = add i64 %v0_5821, 24
  %v2_5821 = inttoptr i64 %v1_5821 to i64*
  %v3_5821 = load i64, i64* %v2_5821, align 8
  store i64 %v3_5821, i64* @rax, align 8
  %v1_5825 = add i64 %v3_5821, 8
  %v2_5825 = inttoptr i64 %v1_5825 to i32*
  %v3_5825 = load i32, i32* %v2_5825, align 4
  %v5_5828 = icmp eq i32 %v3_5825, 0
  br i1 %v5_5828, label %dec_label_pc_586a, label %dec_label_pc_582c

dec_label_pc_582c:                                ; preds = %dec_label_pc_5820
  store i64 %v0_5821, i64* @rbx, align 8
  %v1_582f = add i64 %v3_5821, 16
  %v2_582f = inttoptr i64 %v1_582f to i64*
  %v3_582f = load i64, i64* %v2_582f, align 8
  store i64 %v3_582f, i64* @rdi, align 8
  %v1_5833 = inttoptr i64 %v3_582f to i64*
  %v2_5833 = load i64, i64* %v1_5833, align 8
  store i64 %v2_5833, i64* @rax, align 8
  %v1_583c = add i64 %v0_5821, 32
  %v2_583c = inttoptr i64 %v1_583c to i64*
  %v3_583c = load i64, i64* %v2_583c, align 8
  store i64 %v3_583c, i64* @rdx, align 8
  %v1_5840 = add i64 %v3_583c, 8
  %v2_5840 = inttoptr i64 %v1_5840 to i32*
  %v3_5840 = load i32, i32* %v2_5840, align 4
  %v4_5840 = zext i32 %v3_5840 to i64
  store i64 %v4_5840, i64* @rcx, align 8
  %v5_5843 = icmp eq i32 %v3_5840, 0
  br i1 %v5_5843, label %dec_label_pc_586a, label %dec_label_pc_5847

dec_label_pc_5847:                                ; preds = %dec_label_pc_582c
  %v1_584b = inttoptr i64 %v2_5833 to i64*
  %v2_584b = load i64, i64* %v1_584b, align 8
  store i64 %v2_584b, i64* @rdx, align 8
  store i64 %v2_5833, i64* @rdi, align 8
  %v4_5857 = trunc i64 %v2_5833 to i8
  %v5_5857 = icmp eq i8 %v4_5857, 0
  %v0_5859 = load i64, i64* inttoptr (i64 22624 to i64*), align 32
  store i64 %v0_5859, i64* @rax, align 8
  %v2_5860 = load i64, i64* inttoptr (i64 22632 to i64*), align 8
  %v3_5860 = select i1 %v5_5857, i64 %v2_5860, i64 %v0_5859
  store i64 %v3_5860, i64* @rax, align 8
  store i64 %v0_5820, i64* @rbx, align 8
  ret i64 %v3_5860

dec_label_pc_586a:                                ; preds = %dec_label_pc_582c, %dec_label_pc_5820
  %v1_5869 = phi i64 [ %v2_5833, %dec_label_pc_582c ], [ %v3_5821, %dec_label_pc_5820 ]
  ret i64 %v1_5869
}

define i64 @"_ZN4lang14lang_luaj$56$24callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5880:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5880 = load i64, i64* %r13.global-to-local, align 8
  %v0_5882 = load i64, i64* %r12.global-to-local, align 8
  %v0_5884 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_5884, i64* %r12.global-to-local, align 8
  %v0_5887 = load i64, i64* %rbp.global-to-local, align 8
  %v0_5888 = load i64, i64* @rbx, align 8
  %v0_5889 = load i64, i64* @rdi, align 8
  store i64 %v0_5889, i64* %rbp.global-to-local, align 8
  %v0_5890 = load i64, i64* inttoptr (i64 22679 to i64*), align 8
  store i64 %v0_5890, i64* @rbx, align 8
  %v1_590f = add i64 %v0_5889, 24
  %v2_590f = inttoptr i64 %v1_590f to i64*
  %v3_590f262 = load i64, i64* %v2_590f, align 8
  store i64 %v3_590f262, i64* @rdi, align 8
  %v1_5913263 = inttoptr i64 %v3_590f262 to i64*
  %v2_5913264 = load i64, i64* %v1_5913263, align 8
  store i64 %v2_5913264, i64* @rax, align 8
  %v1_591c265 = inttoptr i64 %v0_5890 to i64*
  %v2_591c266 = load i64, i64* %v1_591c265, align 8
  store i64 %v2_591c266, i64* @rdx, align 8
  store i64 %v2_5913264, i64* %rsi.global-to-local, align 8
  store i64 %v0_5890, i64* @rdi, align 8
  %v4_592b267 = trunc i64 %v2_5913264 to i8
  %v5_592b268 = icmp eq i8 %v4_592b267, 0
  %v1_592d269 = icmp eq i1 %v5_592b268, false
  br i1 %v1_592d269, label %dec_label_pc_58a0.lr.ph, label %dec_label_pc_5933

dec_label_pc_58a0.lr.ph:                          ; preds = %dec_label_pc_5880
  %v1_58a0 = add i64 %v0_5889, 32
  %v2_58a0 = inttoptr i64 %v1_58a0 to i64*
  br label %dec_label_pc_58a0

dec_label_pc_58a0:                                ; preds = %dec_label_pc_58a0.lr.ph, %dec_label_pc_58f9
  %v1_591c271 = phi i64* [ %v1_591c265, %dec_label_pc_58a0.lr.ph ], [ %v1_591c, %dec_label_pc_58f9 ]
  %v0_58f9270 = phi i64 [ %v0_5890, %dec_label_pc_58a0.lr.ph ], [ %v2_58f9, %dec_label_pc_58f9 ]
  %v3_58a0 = load i64, i64* %v2_58a0, align 8
  store i64 %v3_58a0, i64* @rax, align 8
  %v1_58a4 = add i64 %v3_58a0, 8
  %v2_58a4 = inttoptr i64 %v1_58a4 to i32*
  %v3_58a4 = load i32, i32* %v2_58a4, align 4
  %v4_58a4 = zext i32 %v3_58a4 to i64
  store i64 %v4_58a4, i64* @rdx, align 8
  %v5_58a7 = icmp eq i32 %v3_58a4, 0
  br i1 %v5_58a7, label %dec_label_pc_5959, label %dec_label_pc_58af

dec_label_pc_58af:                                ; preds = %dec_label_pc_58a0
  %v1_58af = add i64 %v3_58a0, 16
  %v2_58af = inttoptr i64 %v1_58af to i64*
  %v3_58af = load i64, i64* %v2_58af, align 8
  store i64 %v3_58af, i64* %r13.global-to-local, align 8
  %v2_58b3 = load i64, i64* %v1_591c271, align 8
  store i64 %v2_58b3, i64* @rax, align 8
  store i64 %v0_58f9270, i64* @rdi, align 8
  %v0_58b9 = load i64, i64* inttoptr (i64 22720 to i64*), align 64
  store i64 %v0_58b9, i64* %rsi.global-to-local, align 8
  %v3_58c6 = load i64, i64* %v2_590f, align 8
  store i64 %v3_58c6, i64* @rdi, align 8
  store i64 %v2_58b3, i64* %rsi.global-to-local, align 8
  %v1_58cd = inttoptr i64 %v3_58c6 to i64*
  %v2_58cd = load i64, i64* %v1_58cd, align 8
  store i64 %v2_58cd, i64* @rdx, align 8
  %v1_58d6 = inttoptr i64 %v3_58af to i64*
  %v2_58d6 = load i64, i64* %v1_58d6, align 8
  store i64 %v2_58d6, i64* @rcx, align 8
  store i64 %v0_5884, i64* @rdx, align 8
  store i64 %v2_58b3, i64* %rsi.global-to-local, align 8
  store i64 %v3_58af, i64* @rdi, align 8
  %v1_58e9 = inttoptr i64 %v2_58b3 to i64*
  %v2_58e9 = load i64, i64* %v1_58e9, align 8
  store i64 %v2_58e9, i64* @rdx, align 8
  store i64 %v2_58b3, i64* @rdi, align 8
  %v4_58f5 = trunc i64 %v2_58b3 to i8
  %v5_58f5 = icmp eq i8 %v4_58f5, 0
  %v1_58f7 = icmp eq i1 %v5_58f5, false
  br i1 %v1_58f7, label %dec_label_pc_5947.loopexit, label %dec_label_pc_58f9

dec_label_pc_58f9:                                ; preds = %dec_label_pc_58af
  %v2_58f9 = load i64, i64* %v1_591c271, align 8
  store i64 %v2_58f9, i64* @rax, align 8
  store i64 %v0_58f9270, i64* @rdi, align 8
  %v0_58ff = load i64, i64* inttoptr (i64 22790 to i64*), align 8
  store i64 %v0_58ff, i64* %rsi.global-to-local, align 8
  store i64 %v2_58f9, i64* @rbx, align 8
  %v3_590f = load i64, i64* %v2_590f, align 8
  store i64 %v3_590f, i64* @rdi, align 8
  %v1_5913 = inttoptr i64 %v3_590f to i64*
  %v2_5913 = load i64, i64* %v1_5913, align 8
  store i64 %v2_5913, i64* @rax, align 8
  %v1_591c = inttoptr i64 %v2_58f9 to i64*
  %v2_591c = load i64, i64* %v1_591c, align 8
  store i64 %v2_591c, i64* @rdx, align 8
  store i64 %v2_5913, i64* %rsi.global-to-local, align 8
  store i64 %v2_58f9, i64* @rdi, align 8
  %v4_592b = trunc i64 %v2_5913 to i8
  %v5_592b = icmp eq i8 %v4_592b, 0
  %v1_592d = icmp eq i1 %v5_592b, false
  br i1 %v1_592d, label %dec_label_pc_58a0, label %dec_label_pc_5933

dec_label_pc_5933:                                ; preds = %dec_label_pc_58f9, %dec_label_pc_5880
  %v1_5933 = add i64 %v0_5889, 40
  %v2_5933 = inttoptr i64 %v1_5933 to i64*
  %v3_5933 = load i64, i64* %v2_5933, align 8
  store i64 %v3_5933, i64* @rdi, align 8
  %v1_5937 = add i64 %v0_5889, 48
  %v2_5937 = inttoptr i64 %v1_5937 to i64*
  %v3_5937 = load i64, i64* %v2_5937, align 8
  store i64 %v3_5937, i64* %rsi.global-to-local, align 8
  store i64 %v0_5884, i64* @rdx, align 8
  %v1_593e = inttoptr i64 %v3_5933 to i64*
  %v2_593e = load i64, i64* %v1_593e, align 8
  store i64 %v2_593e, i64* @rax, align 8
  br label %dec_label_pc_5947

dec_label_pc_5947.loopexit:                       ; preds = %dec_label_pc_58af
  br label %dec_label_pc_5947

dec_label_pc_5947:                                ; preds = %dec_label_pc_5947.loopexit, %dec_label_pc_5933
  %v0_5947 = load i64, i64* inttoptr (i64 22862 to i64*), align 8
  store i64 %v0_5947, i64* @rax, align 8
  store i64 %v0_5888, i64* @rbx, align 8
  store i64 %v0_5887, i64* %rbp.global-to-local, align 8
  store i64 %v0_5882, i64* %r12.global-to-local, align 8
  store i64 %v0_5880, i64* %r13.global-to-local, align 8
  ret i64 %v0_5947

dec_label_pc_5959:                                ; preds = %dec_label_pc_58a0
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$154callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5970:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5970 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_5974 = load i64, i64* @rdi, align 8
  store i64 %v0_5974, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_5987 = add i64 %v0_5974, 24
  %v2_5987 = inttoptr i64 %v1_5987 to i64*
  %v3_5987 = load i64, i64* %v2_5987, align 8
  store i64 %v3_5987, i64* @rdx, align 8
  %v1_598b = add i64 %v3_5987, 8
  %v2_598b = inttoptr i64 %v1_598b to i32*
  %v3_598b = load i32, i32* %v2_598b, align 4
  %v4_598b = zext i32 %v3_598b to i64
  store i64 %v4_598b, i64* @rcx, align 8
  %v5_598e = icmp eq i32 %v3_598b, 0
  br i1 %v5_598e, label %dec_label_pc_59b5, label %dec_label_pc_5992

dec_label_pc_5992:                                ; preds = %dec_label_pc_5970
  %v1_5992 = add i64 %v3_5987, 16
  %v2_5992 = inttoptr i64 %v1_5992 to i64*
  %v3_5992 = load i64, i64* %v2_5992, align 8
  store i64 %v3_5992, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_59a2 = trunc i64 %arg2 to i8
  %v5_59a2 = icmp eq i8 %v4_59a2, 0
  %v0_59a4 = load i64, i64* inttoptr (i64 22955 to i64*), align 8
  store i64 %v0_59a4, i64* @rax, align 8
  %v2_59ab = load i64, i64* inttoptr (i64 22963 to i64*), align 8
  %v3_59ab = select i1 %v5_59a2, i64 %v2_59ab, i64 %v0_59a4
  store i64 %v3_59ab, i64* @rax, align 8
  store i64 %v0_5970, i64* @rbx, align 8
  ret i64 %v3_59ab

dec_label_pc_59b5:                                ; preds = %dec_label_pc_5970
  ret i64 %arg2
}

define i64 @"_ZN4lang12lang_luaj$384callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1) local_unnamed_addr {
dec_label_pc_59c0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_59c0 = load i64, i64* %r13.global-to-local, align 8
  %v0_59c2 = load i64, i64* %r12.global-to-local, align 8
  %v0_59c4 = load i64, i64* %rbp.global-to-local, align 8
  %v0_59c5 = load i64, i64* @rbx, align 8
  %v0_59ca = load i64, i64* @rdi, align 8
  %v1_59ca = add i64 %v0_59ca, 24
  %v2_59ca = inttoptr i64 %v1_59ca to i64*
  %v3_59ca = load i64, i64* %v2_59ca, align 8
  store i64 %v3_59ca, i64* @rax, align 8
  %v1_59ce = add i64 %v3_59ca, 8
  %v2_59ce = inttoptr i64 %v1_59ce to i32*
  %v3_59ce = load i32, i32* %v2_59ce, align 4
  %v5_59d2 = icmp eq i32 %v3_59ce, 0
  br i1 %v5_59d2, label %dec_label_pc_5b16, label %dec_label_pc_59db

dec_label_pc_59db:                                ; preds = %dec_label_pc_59c0
  store i64 %v0_59ca, i64* %rbp.global-to-local, align 8
  %v1_59de = add i64 %v3_59ca, 16
  %v2_59de = inttoptr i64 %v1_59de to i64*
  %v3_59de = load i64, i64* %v2_59de, align 8
  store i64 %v3_59de, i64* @rdi, align 8
  %v1_59e2 = inttoptr i64 %v3_59de to i64*
  %v2_59e2 = load i64, i64* %v1_59e2, align 8
  store i64 %v2_59e2, i64* @rax, align 8
  %v1_59eb = add i64 %v0_59ca, 32
  %v2_59eb = inttoptr i64 %v1_59eb to i64*
  %v3_59eb = load i64, i64* %v2_59eb, align 8
  store i64 %v3_59eb, i64* @rdi, align 8
  store i64 %v2_59e2, i64* @rbx, align 8
  %v1_59f5 = inttoptr i64 %v3_59eb to i64*
  %v2_59f5 = load i64, i64* %v1_59f5, align 8
  store i64 %v2_59f5, i64* @rax, align 8
  %v1_59fe = inttoptr i64 %v2_59f5 to i64*
  %v2_59fe = load i64, i64* %v1_59fe, align 8
  store i64 %v2_59fe, i64* @rdx, align 8
  store i64 %v2_59f5, i64* @rdi, align 8
  %v4_5a0a = trunc i64 %v2_59f5 to i8
  %v5_5a0a = icmp eq i8 %v4_5a0a, 0
  br i1 %v5_5a0a, label %dec_label_pc_5ac0, label %dec_label_pc_5a12

dec_label_pc_5a12:                                ; preds = %dec_label_pc_5ae4, %dec_label_pc_5ac0, %dec_label_pc_59db
  %v1_5a12 = inttoptr i64 %v2_59e2 to i64*
  %v2_5a12 = load i64, i64* %v1_5a12, align 8
  store i64 %v2_5a12, i64* @rax, align 8
  store i64 %v2_59e2, i64* @rdi, align 8
  store i64 %v2_5a12, i64* %r13.global-to-local, align 8
  %v2_5a28 = load i64, i64* %v1_5a12, align 8
  store i64 %v2_5a28, i64* @rax, align 8
  store i64 %v2_59e2, i64* @rdi, align 8
  store i64 %v2_5a28, i64* %r12.global-to-local, align 8
  %v1_5a3e = add i64 %v0_59ca, 40
  %v2_5a3e = inttoptr i64 %v1_5a3e to i64*
  %v3_5a3e = load i64, i64* %v2_5a3e, align 8
  store i64 %v3_5a3e, i64* @rax, align 8
  %v1_5a42 = add i64 %v3_5a3e, 8
  %v2_5a42 = inttoptr i64 %v1_5a42 to i32*
  %v3_5a42 = load i32, i32* %v2_5a42, align 4
  %v4_5a42 = zext i32 %v3_5a42 to i64
  store i64 %v4_5a42, i64* @rcx, align 8
  %v5_5a45 = icmp eq i32 %v3_5a42, 0
  br i1 %v5_5a45, label %dec_label_pc_5b16, label %dec_label_pc_5a4d

dec_label_pc_5a4d:                                ; preds = %dec_label_pc_5a12
  %v1_5a4d = add i64 %v3_5a3e, 16
  %v2_5a4d = inttoptr i64 %v1_5a4d to i64*
  %v3_5a4d = load i64, i64* %v2_5a4d, align 8
  store i64 %v3_5a4d, i64* @rdi, align 8
  %v1_5a54 = inttoptr i64 %v3_5a4d to i64*
  %v2_5a54 = load i64, i64* %v1_5a54, align 8
  store i64 %v2_5a54, i64* @rax, align 8
  %v2_5a5d = load i64, i64* %v1_5a12, align 8
  store i64 %v2_5a5d, i64* @rcx, align 8
  store i64 %v2_5a54, i64* @rdx, align 8
  store i64 %v2_59e2, i64* @rdi, align 8
  %v3_5a73 = load i64, i64* %v2_5a3e, align 8
  store i64 %v3_5a73, i64* @rax, align 8
  %v1_5a77 = add i64 %v3_5a73, 8
  %v2_5a77 = inttoptr i64 %v1_5a77 to i32*
  %v3_5a77 = load i32, i32* %v2_5a77, align 4
  %v4_5a77 = zext i32 %v3_5a77 to i64
  store i64 %v4_5a77, i64* @rdx, align 8
  %v5_5a7a = icmp eq i32 %v3_5a77, 0
  br i1 %v5_5a7a, label %dec_label_pc_5b16, label %dec_label_pc_5a82

dec_label_pc_5a82:                                ; preds = %dec_label_pc_5a4d
  %v1_5a82 = add i64 %v3_5a73, 16
  %v2_5a82 = inttoptr i64 %v1_5a82 to i64*
  %v3_5a82 = load i64, i64* %v2_5a82, align 8
  store i64 %v3_5a82, i64* @rdi, align 8
  %v1_5a89 = inttoptr i64 %v3_5a82 to i64*
  %v2_5a89 = load i64, i64* %v1_5a89, align 8
  store i64 %v2_5a89, i64* @rax, align 8
  %v2_5a92 = load i64, i64* %v1_5a12, align 8
  store i64 %v2_5a92, i64* @rcx, align 8
  store i64 %v2_5a89, i64* @rdx, align 8
  store i64 %v2_59e2, i64* @rdi, align 8
  store i64 %v2_59e2, i64* @rax, align 8
  store i64 %v0_59c5, i64* @rbx, align 8
  store i64 %v0_59c4, i64* %rbp.global-to-local, align 8
  store i64 %v0_59c2, i64* %r12.global-to-local, align 8
  store i64 %v0_59c0, i64* %r13.global-to-local, align 8
  ret i64 %v2_59e2

dec_label_pc_5ac0:                                ; preds = %dec_label_pc_59db
  %v1_5ac0 = add i64 %v0_59ca, 48
  %v2_5ac0 = inttoptr i64 %v1_5ac0 to i64*
  %v3_5ac0 = load i64, i64* %v2_5ac0, align 8
  store i64 %v3_5ac0, i64* @rdi, align 8
  %v1_5ac7 = inttoptr i64 %v3_5ac0 to i64*
  %v2_5ac7 = load i64, i64* %v1_5ac7, align 8
  store i64 %v2_5ac7, i64* @rax, align 8
  %v1_5ad0 = inttoptr i64 %v2_5ac7 to i64*
  %v2_5ad0 = load i64, i64* %v1_5ad0, align 8
  store i64 %v2_5ad0, i64* @rdx, align 8
  store i64 %v2_5ac7, i64* @rdi, align 8
  %v4_5adc = trunc i64 %v2_5ac7 to i8
  %v5_5adc = icmp eq i8 %v4_5adc, 0
  %v1_5ade = icmp eq i1 %v5_5adc, false
  br i1 %v1_5ade, label %dec_label_pc_5a12, label %dec_label_pc_5ae4

dec_label_pc_5ae4:                                ; preds = %dec_label_pc_5ac0
  %v1_5ae4 = add i64 %v0_59ca, 56
  %v2_5ae4 = inttoptr i64 %v1_5ae4 to i64*
  %v3_5ae4 = load i64, i64* %v2_5ae4, align 8
  store i64 %v3_5ae4, i64* @rdi, align 8
  %v1_5aeb = inttoptr i64 %v3_5ae4 to i64*
  %v2_5aeb = load i64, i64* %v1_5aeb, align 8
  store i64 %v2_5aeb, i64* @rax, align 8
  %v1_5af4 = inttoptr i64 %v2_5aeb to i64*
  %v2_5af4 = load i64, i64* %v1_5af4, align 8
  store i64 %v2_5af4, i64* @rdx, align 8
  store i64 %v2_5aeb, i64* @rdi, align 8
  %v4_5b00 = trunc i64 %v2_5aeb to i8
  %v5_5b00 = icmp eq i8 %v4_5b00, 0
  %v1_5b02 = icmp eq i1 %v5_5b00, false
  br i1 %v1_5b02, label %dec_label_pc_5a12, label %dec_label_pc_5b08

dec_label_pc_5b08:                                ; preds = %dec_label_pc_5ae4
  store i64 %v2_59e2, i64* @rax, align 8
  store i64 %v0_59c5, i64* @rbx, align 8
  store i64 %v0_59c4, i64* %rbp.global-to-local, align 8
  ret i64 %v2_59e2

dec_label_pc_5b16:                                ; preds = %dec_label_pc_5a4d, %dec_label_pc_5a12, %dec_label_pc_59c0
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame11currentlineEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_5b20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5b20 = load i64, i64* @rbx, align 8
  %v0_5b21 = load i64, i64* @rdi, align 8
  store i64 %v0_5b21, i64* @rbx, align 8
  %v1_5b24 = add i64 %v0_5b21, 8
  %v2_5b24 = inttoptr i64 %v1_5b24 to i64*
  %v3_5b24 = load i64, i64* %v2_5b24, align 8
  store i64 %v3_5b24, i64* @rdi, align 8
  %v1_5b28 = inttoptr i64 %v3_5b24 to i64*
  %v2_5b28 = load i64, i64* %v1_5b28, align 8
  store i64 %v2_5b28, i64* @rax, align 8
  %v4_5b31 = trunc i64 %v2_5b28 to i8
  %v5_5b31 = icmp eq i8 %v4_5b31, 0
  br i1 %v5_5b31, label %dec_label_pc_5b70, label %dec_label_pc_5b35

dec_label_pc_5b35:                                ; preds = %dec_label_pc_5b20
  %v3_5b35 = load i64, i64* %v2_5b24, align 8
  store i64 %v3_5b35, i64* @rdi, align 8
  %v1_5b39 = inttoptr i64 %v3_5b35 to i64*
  %v2_5b39 = load i64, i64* %v1_5b39, align 8
  store i64 %v2_5b39, i64* @rax, align 8
  %v1_5b42 = add i64 %v2_5b39, 8
  %v2_5b42 = inttoptr i64 %v1_5b42 to i64*
  %v3_5b42 = load i64, i64* %v2_5b42, align 8
  store i64 %v3_5b42, i64* @rax, align 8
  %v1_5b46 = add i64 %v3_5b42, 32
  %v2_5b46 = inttoptr i64 %v1_5b46 to i64*
  %v3_5b46 = load i64, i64* %v2_5b46, align 8
  store i64 %v3_5b46, i64* @rax, align 8
  %sext = mul i64 %v3_5b46, 4294967296
  %v2_5b4a = icmp eq i64 %sext, 0
  br i1 %v2_5b4a, label %dec_label_pc_5b70, label %dec_label_pc_5b4f

dec_label_pc_5b4f:                                ; preds = %dec_label_pc_5b35
  %v1_5b4f = add i64 %v0_5b21, 16
  %v2_5b4f = inttoptr i64 %v1_5b4f to i32*
  %v3_5b4f = load i32, i32* %v2_5b4f, align 4
  %v4_5b4f = sext i32 %v3_5b4f to i64
  store i64 %v4_5b4f, i64* @rdi, align 8
  %v6_5b53 = icmp slt i32 %v3_5b4f, 0
  br i1 %v6_5b53, label %dec_label_pc_5b70, label %dec_label_pc_5b57

dec_label_pc_5b57:                                ; preds = %dec_label_pc_5b4f
  %v1_5b57 = sdiv i64 %sext, 4294967296
  %v2_5b57 = add nsw i64 %v1_5b57, 8
  %v3_5b57 = inttoptr i64 %v2_5b57 to i32*
  %v4_5b57 = load i32, i32* %v3_5b57, align 4
  %v5_5b57 = zext i32 %v4_5b57 to i64
  store i64 %v5_5b57, i64* @rdx, align 8
  %v5_5b5c = icmp slt i64 %v4_5b4f, %v5_5b57
  br i1 %v5_5b5c, label %dec_label_pc_5b5e, label %dec_label_pc_5b70

dec_label_pc_5b5e:                                ; preds = %dec_label_pc_5b57
  %v9_5b5a = icmp ult i32 %v3_5b4f, %v4_5b57
  %v2_5b5e = add nsw i64 %v1_5b57, 12
  store i64 %v2_5b5e, i64* @rax, align 8
  %v1_5b64 = icmp eq i1 %v9_5b5a, false
  br i1 %v1_5b64, label %dec_label_pc_5b77, label %dec_label_pc_5b66

dec_label_pc_5b66:                                ; preds = %dec_label_pc_5b5e
  %v2_5b66 = mul nsw i64 %v4_5b4f, 4
  %v3_5b66 = add i64 %v2_5b66, %v2_5b5e
  %v4_5b66 = inttoptr i64 %v3_5b66 to i32*
  %v5_5b66 = load i32, i32* %v4_5b66, align 4
  %v6_5b66 = zext i32 %v5_5b66 to i64
  store i64 %v6_5b66, i64* @rax, align 8
  store i64 %v0_5b20, i64* @rbx, align 8
  ret i64 %v6_5b66

dec_label_pc_5b70:                                ; preds = %dec_label_pc_5b57, %dec_label_pc_5b4f, %dec_label_pc_5b35, %dec_label_pc_5b20
  store i64 4294967295, i64* @rax, align 8
  store i64 %v0_5b20, i64* @rbx, align 8
  ret i64 4294967295

dec_label_pc_5b77:                                ; preds = %dec_label_pc_5b5e
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib25BaseLib$StringInputStream4readEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_5b80:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5b80 = load i64, i64* %rbp.global-to-local, align 8
  %v0_5b81 = load i64, i64* @rbx, align 8
  %v0_5b82 = load i64, i64* @rdi, align 8
  store i64 %v0_5b82, i64* @rbx, align 8
  %v1_5b89 = add i64 %v0_5b82, 28
  %v2_5b89 = inttoptr i64 %v1_5b89 to i32*
  %v3_5b89 = load i32, i32* %v2_5b89, align 4
  %v4_5b89 = zext i32 %v3_5b89 to i64
  store i64 %v4_5b89, i64* @rax, align 8
  %tmp243 = icmp slt i32 %v3_5b89, 1
  br i1 %tmp243, label %dec_label_pc_5bb8, label %dec_label_pc_5b90

dec_label_pc_5b90:                                ; preds = %dec_label_pc_5bd8.dec_label_pc_5b90_crit_edge, %dec_label_pc_5b80
  %v2_5b97 = phi i64 [ %v0_5b93.pre, %dec_label_pc_5bd8.dec_label_pc_5b90_crit_edge ], [ %v0_5b82, %dec_label_pc_5b80 ]
  %v0_5b90 = phi i64 [ %v0_5b90.pre, %dec_label_pc_5bd8.dec_label_pc_5b90_crit_edge ], [ %v4_5b89, %dec_label_pc_5b80 ]
  %v1_5b90 = trunc i64 %v0_5b90 to i32
  %v2_5b90 = add i32 %v1_5b90, -1
  %v17_5b90 = zext i32 %v2_5b90 to i64
  store i64 %v17_5b90, i64* @rax, align 8
  %v1_5b93 = add i64 %v2_5b97, 24
  %v2_5b93 = inttoptr i64 %v1_5b93 to i32*
  %v3_5b93 = load i32, i32* %v2_5b93, align 4
  %v4_5b93 = sext i32 %v3_5b93 to i64
  store i64 %v4_5b93, i64* @rdi, align 8
  %v3_5b97 = add i64 %v2_5b97, 28
  %v4_5b97 = inttoptr i64 %v3_5b97 to i32*
  store i32 %v2_5b90, i32* %v4_5b97, align 4
  %v0_5b9a = load i64, i64* @rbx, align 8
  %v1_5b9a = add i64 %v0_5b9a, 16
  %v2_5b9a = inttoptr i64 %v1_5b9a to i64*
  %v3_5b9a = load i64, i64* %v2_5b9a, align 8
  store i64 %v3_5b9a, i64* @rax, align 8
  %v0_5b9e = load i64, i64* @rdi, align 8
  %v1_5b9e = trunc i64 %v0_5b9e to i32
  %v3_5b9e = add i64 %v3_5b9a, 8
  %v4_5b9e = inttoptr i64 %v3_5b9e to i32*
  %v5_5b9e = load i32, i32* %v4_5b9e, align 4
  %v11_5b9e = icmp ult i32 %v1_5b9e, %v5_5b9e
  %v1_5ba1 = add i64 %v0_5b9e, 1
  store i64 %v1_5ba1, i64* @rdx, align 8
  %v1_5ba4 = trunc i64 %v1_5ba1 to i32
  %v3_5ba4 = add i64 %v0_5b9a, 24
  %v4_5ba4 = inttoptr i64 %v3_5ba4 to i32*
  store i32 %v1_5ba4, i32* %v4_5ba4, align 4
  %v1_5ba7 = icmp eq i1 %v11_5b9e, false
  br i1 %v1_5ba7, label %dec_label_pc_5c07, label %dec_label_pc_5ba9

dec_label_pc_5ba9:                                ; preds = %dec_label_pc_5b90
  %v0_5ba9 = load i64, i64* @rax, align 8
  %v1_5ba9 = load i64, i64* @rdi, align 8
  %v3_5ba9 = add i64 %v0_5ba9, 12
  %v4_5ba9 = add i64 %v3_5ba9, %v1_5ba9
  %v5_5ba9 = inttoptr i64 %v4_5ba9 to i8*
  %v6_5ba9 = load i8, i8* %v5_5ba9, align 1
  %v7_5ba9 = sext i8 %v6_5ba9 to i64
  br label %dec_label_pc_5bae

dec_label_pc_5bae:                                ; preds = %dec_label_pc_5bb8, %dec_label_pc_5bd8, %dec_label_pc_5ba9
  %storemerge = phi i64 [ %v7_5ba9, %dec_label_pc_5ba9 ], [ 4294967295, %dec_label_pc_5bd8 ], [ 4294967295, %dec_label_pc_5bb8 ]
  store i64 %storemerge, i64* @rax, align 8
  store i64 %v0_5b81, i64* @rbx, align 8
  store i64 %v0_5b80, i64* %rbp.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_5bb8:                                ; preds = %dec_label_pc_5b80
  %v1_5bb8 = add i64 %v0_5b82, 8
  %v2_5bb8 = inttoptr i64 %v1_5bb8 to i64*
  %v3_5bb8 = load i64, i64* %v2_5bb8, align 8
  store i64 %v3_5bb8, i64* @rdi, align 8
  %v1_5bbc = inttoptr i64 %v3_5bb8 to i64*
  %v2_5bbc = load i64, i64* %v1_5bbc, align 8
  store i64 %v2_5bbc, i64* @rax, align 8
  store i64 %v2_5bbc, i64* %rbp.global-to-local, align 8
  %v1_5bc8 = inttoptr i64 %v2_5bbc to i64*
  %v2_5bc8 = load i64, i64* %v1_5bc8, align 8
  store i64 %v2_5bc8, i64* @rax, align 8
  store i64 %v2_5bbc, i64* @rdi, align 8
  %v4_5bd4 = trunc i64 %v2_5bc8 to i8
  %v5_5bd4 = icmp eq i8 %v4_5bd4, 0
  %v1_5bd6 = icmp eq i1 %v5_5bd4, false
  br i1 %v1_5bd6, label %dec_label_pc_5bae, label %dec_label_pc_5bd8

dec_label_pc_5bd8:                                ; preds = %dec_label_pc_5bb8
  %v2_5bd8 = load i64, i64* %v1_5bc8, align 8
  store i64 %v2_5bd8, i64* @rax, align 8
  store i64 %v2_5bbc, i64* @rdi, align 8
  %v1_5be5 = add i64 %v2_5bd8, 8
  %v2_5be5 = inttoptr i64 %v1_5be5 to i64*
  %v3_5be5 = load i64, i64* %v2_5be5, align 8
  store i64 %v3_5be5, i64* @rdx, align 8
  %v2_5be9 = add i64 %v0_5b82, 16
  %v3_5be9 = inttoptr i64 %v2_5be9 to i64*
  store i64 %v3_5be5, i64* %v3_5be9, align 8
  %v0_5bed = load i64, i64* @rax, align 8
  %v1_5bed = add i64 %v0_5bed, 16
  %v2_5bed = inttoptr i64 %v1_5bed to i32*
  %v3_5bed = load i32, i32* %v2_5bed, align 4
  %v4_5bed = zext i32 %v3_5bed to i64
  store i64 %v4_5bed, i64* @rdx, align 8
  %v1_5bf0 = add i64 %v0_5bed, 20
  %v2_5bf0 = inttoptr i64 %v1_5bf0 to i32*
  %v3_5bf0 = load i32, i32* %v2_5bf0, align 4
  %v4_5bf0 = zext i32 %v3_5bf0 to i64
  store i64 %v4_5bf0, i64* @rax, align 8
  %v2_5bf3 = load i64, i64* @rbx, align 8
  %v3_5bf3 = add i64 %v2_5bf3, 24
  %v4_5bf3 = inttoptr i64 %v3_5bf3 to i32*
  store i32 %v3_5bed, i32* %v4_5bf3, align 4
  %v0_5bf6 = load i64, i64* @rax, align 8
  %v4_5bf6 = trunc i64 %v0_5bf6 to i32
  %v5_5bf6 = icmp eq i32 %v4_5bf6, 0
  %v6_5bf6 = icmp slt i32 %v4_5bf6, 0
  %v2_5bf8 = load i64, i64* @rbx, align 8
  %v3_5bf8 = add i64 %v2_5bf8, 28
  %v4_5bf8 = inttoptr i64 %v3_5bf8 to i32*
  store i32 %v4_5bf6, i32* %v4_5bf8, align 4
  %v3_5bfb = icmp eq i1 %v6_5bf6, false
  %v4_5bfb = icmp eq i1 %v5_5bf6, false
  %v5_5bfb = icmp eq i1 %v3_5bfb, %v4_5bfb
  br i1 %v5_5bfb, label %dec_label_pc_5bd8.dec_label_pc_5b90_crit_edge, label %dec_label_pc_5bae

dec_label_pc_5bd8.dec_label_pc_5b90_crit_edge:    ; preds = %dec_label_pc_5bd8
  %v0_5b90.pre = load i64, i64* @rax, align 8
  %v0_5b93.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_5b90

dec_label_pc_5c07:                                ; preds = %dec_label_pc_5b90
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29Prototype12getlocalnameEJPNS1_9LuaStringEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_5c10:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5c10 = load i64, i64* @rdi, align 8
  %v1_5c10 = add i64 %v0_5c10, 40
  %v2_5c10 = inttoptr i64 %v1_5c10 to i64*
  %v3_5c10 = load i64, i64* %v2_5c10, align 8
  store i64 %v3_5c10, i64* @rax, align 8
  %v1_5c14 = add i64 %v3_5c10, 8
  %v2_5c14 = inttoptr i64 %v1_5c14 to i32*
  %v3_5c14 = load i32, i32* %v2_5c14, align 4
  %tmp255 = icmp slt i32 %v3_5c14, 1
  br i1 %tmp255, label %dec_label_pc_5c4e, label %dec_label_pc_5c1d

dec_label_pc_5c1d:                                ; preds = %dec_label_pc_5c10
  %v1_5c1d = add i64 %v3_5c10, 16
  %v2_5c1d = inttoptr i64 %v1_5c1d to i64*
  %v3_5c1d = load i64, i64* %v2_5c1d, align 8
  store i64 %v3_5c1d, i64* @rcx, align 8
  %v0_5c21 = load i64, i64* @rdx, align 8
  %v1_5c21 = trunc i64 %v0_5c21 to i32
  %v3_5c21 = add i64 %v3_5c1d, 16
  %v4_5c21 = inttoptr i64 %v3_5c21 to i32*
  %v5_5c21 = load i32, i32* %v4_5c21, align 4
  %v7_5c24 = icmp slt i32 %v1_5c21, %v5_5c21
  br i1 %v7_5c24, label %dec_label_pc_5c4e, label %dec_label_pc_5c26

dec_label_pc_5c26:                                ; preds = %dec_label_pc_5c1d
  %v1_5c26 = add i64 %v3_5c10, 24
  store i64 %v1_5c26, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  br label %dec_label_pc_5c3c

dec_label_pc_5c30:                                ; preds = %dec_label_pc_5c46
  %v1_5c30 = inttoptr i64 %v0_5c30 to i64*
  %v2_5c30 = load i64, i64* %v1_5c30, align 8
  store i64 %v2_5c30, i64* @rcx, align 8
  %v1_5c33 = add i64 %v0_5c30, 8
  store i64 %v1_5c33, i64* @rax, align 8
  %v1_5c37 = add i64 %v2_5c30, 16
  %v2_5c37 = inttoptr i64 %v1_5c37 to i32*
  %v3_5c37 = load i32, i32* %v2_5c37, align 4
  %v6_5c37 = sext i32 %v3_5c37 to i64
  %v10_5c3a = icmp sgt i64 %v6_5c37, %v0_5c21
  br i1 %v10_5c3a, label %dec_label_pc_5c4e.loopexit, label %dec_label_pc_5c3c

dec_label_pc_5c3c:                                ; preds = %dec_label_pc_5c30, %dec_label_pc_5c26
  %v0_5c30 = phi i64 [ %v1_5c33, %dec_label_pc_5c30 ], [ %v1_5c26, %dec_label_pc_5c26 ]
  %v0_5c46 = phi i32 [ %v2_5c46, %dec_label_pc_5c30 ], [ 0, %dec_label_pc_5c26 ]
  %v0_5c58 = phi i64 [ %v2_5c30, %dec_label_pc_5c30 ], [ %v3_5c1d, %dec_label_pc_5c26 ]
  %v3_5c3c = add i64 %v0_5c58, 20
  %v4_5c3c = inttoptr i64 %v3_5c3c to i32*
  %v5_5c3c = load i32, i32* %v4_5c3c, align 4
  %v7_5c3f = icmp slt i32 %v1_5c21, %v5_5c3c
  br i1 %v7_5c3f, label %dec_label_pc_5c41, label %dec_label_pc_5c46

dec_label_pc_5c41:                                ; preds = %dec_label_pc_5c3c
  %v0_5c41 = load i64, i64* %rsi.global-to-local, align 8
  %v1_5c41 = trunc i64 %v0_5c41 to i32
  %v2_5c41 = add i32 %v1_5c41, -1
  %v11_5c41 = icmp eq i32 %v2_5c41, 0
  %v17_5c41 = zext i32 %v2_5c41 to i64
  store i64 %v17_5c41, i64* %rsi.global-to-local, align 8
  br i1 %v11_5c41, label %dec_label_pc_5c58, label %dec_label_pc_5c46

dec_label_pc_5c46:                                ; preds = %dec_label_pc_5c3c, %dec_label_pc_5c41
  %v2_5c46 = add i32 %v0_5c46, 1
  %v17_5c46 = zext i32 %v2_5c46 to i64
  store i64 %v17_5c46, i64* @rdi, align 8
  %v14_5c49 = icmp eq i32 %v2_5c46, %v3_5c14
  %v1_5c4c = icmp eq i1 %v14_5c49, false
  br i1 %v1_5c4c, label %dec_label_pc_5c30, label %dec_label_pc_5c4e.loopexit

dec_label_pc_5c4e.loopexit:                       ; preds = %dec_label_pc_5c46, %dec_label_pc_5c30
  br label %dec_label_pc_5c4e

dec_label_pc_5c4e:                                ; preds = %dec_label_pc_5c4e.loopexit, %dec_label_pc_5c1d, %dec_label_pc_5c10
  store i64 0, i64* @rax, align 8
  ret i64 0

dec_label_pc_5c58:                                ; preds = %dec_label_pc_5c41
  %v1_5c58 = add i64 %v0_5c58, 8
  %v2_5c58 = inttoptr i64 %v1_5c58 to i64*
  %v3_5c58 = load i64, i64* %v2_5c58, align 8
  store i64 %v3_5c58, i64* @rax, align 8
  ret i64 %v3_5c58
}

define i64 @_ZN3org4luaj3vm29LuaThread9getStatusEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_5c60:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5c60 = load i64, i64* @rdi, align 8
  %v1_5c60 = add i64 %v0_5c60, 8
  %v2_5c60 = inttoptr i64 %v1_5c60 to i64*
  %v3_5c60 = load i64, i64* %v2_5c60, align 8
  store i64 %v3_5c60, i64* @rdx, align 8
  %v0_5c64 = load i64, i64* inttoptr (i64 23659 to i64*), align 8
  store i64 %v0_5c64, i64* @rax, align 8
  %v1_5c6b = add i64 %v3_5c60, 84
  %v2_5c6b = inttoptr i64 %v1_5c6b to i32*
  %v3_5c6b = load i32, i32* %v2_5c6b, align 4
  %v4_5c6b = sext i32 %v3_5c6b to i64
  store i64 %v4_5c6b, i64* @rdi, align 8
  %v3_5c6f = add i64 %v0_5c64, 8
  %v4_5c6f = inttoptr i64 %v3_5c6f to i32*
  %v5_5c6f = load i32, i32* %v4_5c6f, align 4
  %v11_5c6f = icmp ult i32 %v3_5c6b, %v5_5c6f
  %v1_5c72 = icmp eq i1 %v11_5c6f, false
  br i1 %v1_5c72, label %dec_label_pc_5c7d, label %dec_label_pc_5c74

dec_label_pc_5c74:                                ; preds = %dec_label_pc_5c60
  %v1_5c74 = add i64 %v0_5c64, 16
  store i64 %v1_5c74, i64* @rdx, align 8
  %v2_5c78 = mul nsw i64 %v4_5c6b, 8
  %v3_5c78 = add i64 %v2_5c78, %v1_5c74
  %v4_5c78 = inttoptr i64 %v3_5c78 to i64*
  %v5_5c78 = load i64, i64* %v4_5c78, align 8
  store i64 %v5_5c78, i64* @rax, align 8
  ret i64 %v5_5c78

dec_label_pc_5c7d:                                ; preds = %dec_label_pc_5c60
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print7getlineEJiPNS1_9PrototypeEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5c90:
  store i64 %arg1, i64* @rdi, align 8
  %v4_5c90 = trunc i64 %arg2 to i32
  %tmp244 = icmp slt i32 %v4_5c90, 1
  br i1 %tmp244, label %dec_label_pc_5cb8, label %dec_label_pc_5c94

dec_label_pc_5c94:                                ; preds = %dec_label_pc_5c90
  %v0_5c94 = load i64, i64* @rdi, align 8
  %v1_5c94 = add i64 %v0_5c94, 32
  %v2_5c94 = inttoptr i64 %v1_5c94 to i64*
  %v3_5c94 = load i64, i64* %v2_5c94, align 8
  store i64 %v3_5c94, i64* @rax, align 8
  %sext = mul i64 %v3_5c94, 4294967296
  %v2_5c98 = icmp eq i64 %sext, 0
  br i1 %v2_5c98, label %dec_label_pc_5cb8, label %dec_label_pc_5c9d

dec_label_pc_5c9d:                                ; preds = %dec_label_pc_5c94
  %v1_5c9d = sdiv i64 %sext, 4294967296
  %v2_5c9d = add nsw i64 %v1_5c9d, 8
  %v3_5c9d = inttoptr i64 %v2_5c9d to i32*
  %v4_5c9d = load i32, i32* %v3_5c9d, align 4
  %v5_5c9d = zext i32 %v4_5c9d to i64
  store i64 %v5_5c9d, i64* @rdx, align 8
  %v5_5ca2 = icmp sgt i64 %v5_5c9d, %arg2
  br i1 %v5_5ca2, label %dec_label_pc_5ca4, label %dec_label_pc_5cb8

dec_label_pc_5ca4:                                ; preds = %dec_label_pc_5c9d
  %v9_5ca0 = icmp ult i32 %v4_5c90, %v4_5c9d
  %v2_5ca4 = add nsw i64 %v1_5c9d, 12
  store i64 %v2_5ca4, i64* @rax, align 8
  %v1_5caa = icmp eq i1 %v9_5ca0, false
  br i1 %v1_5caa, label %dec_label_pc_5cbe, label %dec_label_pc_5cac

dec_label_pc_5cac:                                ; preds = %dec_label_pc_5ca4
  %v2_5caf = mul i64 %arg2, 4
  %v3_5caf = add i64 %v2_5ca4, %v2_5caf
  %v4_5caf = inttoptr i64 %v3_5caf to i32*
  %v5_5caf = load i32, i32* %v4_5caf, align 4
  %v6_5caf = zext i32 %v5_5caf to i64
  store i64 %v6_5caf, i64* @rax, align 8
  ret i64 %v6_5caf

dec_label_pc_5cb8:                                ; preds = %dec_label_pc_5c9d, %dec_label_pc_5c94, %dec_label_pc_5c90
  store i64 4294967295, i64* @rax, align 8
  ret i64 4294967295

dec_label_pc_5cbe:                                ; preds = %dec_label_pc_5ca4
  store i64 %arg2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm222Globals$BufferedStream5availEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_5cd0:
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_5cd0 = load i64, i64* @rdi, align 8
  %v1_5cd0 = add i64 %v0_5cd0, 16
  %v2_5cd0 = inttoptr i64 %v1_5cd0 to i32*
  %v3_5cd0 = load i32, i32* %v2_5cd0, align 4
  %v4_5cd0 = zext i32 %v3_5cd0 to i64
  store i64 %v4_5cd0, i64* @rax, align 8
  %v1_5cd3 = add i64 %v0_5cd0, 20
  %v2_5cd3 = inttoptr i64 %v1_5cd3 to i32*
  %v3_5cd3 = load i32, i32* %v2_5cd3, align 4
  %v4_5cd3 = zext i32 %v3_5cd3 to i64
  store i64 %v4_5cd3, i64* @rdx, align 8
  %v9_5cd6 = icmp ugt i32 %v3_5cd3, %v3_5cd0
  br i1 %v9_5cd6, label %dec_label_pc_5d20, label %dec_label_pc_5cda

dec_label_pc_5cda:                                ; preds = %dec_label_pc_5cd0
  %v0_5cda = load i64, i64* @rbx, align 8
  store i64 %v0_5cda, i64* %stack_var_-8, align 8
  %v1_5cdb = add i64 %v0_5cd0, 8
  %v2_5cdb = inttoptr i64 %v1_5cdb to i64*
  %v3_5cdb = load i64, i64* %v2_5cdb, align 8
  %v1_5cdf = add i64 %v3_5cdb, 8
  %v2_5cdf = inttoptr i64 %v1_5cdf to i32*
  %v3_5cdf = load i32, i32* %v2_5cdf, align 4
  %v4_5cdf = zext i32 %v3_5cdf to i64
  store i64 %v4_5cdf, i64* @rcx, align 8
  %v9_5ce2 = icmp ult i32 %v3_5cd3, %v3_5cdf
  br i1 %v9_5ce2, label %dec_label_pc_5ce6, label %dec_label_pc_5d08

dec_label_pc_5ce6:                                ; preds = %dec_label_pc_5cda, %dec_label_pc_5d08
  %v2_5ced = phi i32 [ %v3_5cd3, %dec_label_pc_5cda ], [ 0, %dec_label_pc_5d08 ]
  %v0_5ced = phi i64 [ %v4_5cdf, %dec_label_pc_5cda ], [ %v0_5ced.pre, %dec_label_pc_5d08 ]
  %v0_5d36 = phi i64 [ %v0_5cd0, %dec_label_pc_5cda ], [ %v0_5ce6.pre, %dec_label_pc_5d08 ]
  store i64 %v0_5d36, i64* @rbx, align 8
  %v1_5ce9 = add i64 %v0_5d36, 24
  %v2_5ce9 = inttoptr i64 %v1_5ce9 to i64*
  %v3_5ce9 = load i64, i64* %v2_5ce9, align 8
  store i64 %v3_5ce9, i64* @rdi, align 8
  %v1_5ced = trunc i64 %v0_5ced to i32
  %v4_5ced = sub i32 %v1_5ced, %v2_5ced
  %v20_5ced = zext i32 %v4_5ced to i64
  store i64 %v20_5ced, i64* @rcx, align 8
  %v1_5cef = inttoptr i64 %v3_5ce9 to i64*
  %v2_5cef = load i64, i64* %v1_5cef, align 8
  store i64 %v2_5cef, i64* @rax, align 8
  %v4_5cf5 = trunc i64 %v2_5cef to i32
  %v6_5cf5 = icmp slt i32 %v4_5cf5, 0
  br i1 %v6_5cf5, label %dec_label_pc_5d50, label %dec_label_pc_5cf9

dec_label_pc_5cf9:                                ; preds = %dec_label_pc_5ce6
  %v5_5cf5 = icmp eq i32 %v4_5cf5, 0
  br i1 %v5_5cf5, label %dec_label_pc_5d28, label %dec_label_pc_5cfb

dec_label_pc_5cfb:                                ; preds = %dec_label_pc_5cf9
  %v1_5cfb = add i64 %v0_5d36, 20
  %v2_5cfb = inttoptr i64 %v1_5cfb to i32*
  %v3_5cfb = load i32, i32* %v2_5cfb, align 4
  %v4_5cfb = zext i32 %v3_5cfb to i64
  store i64 %v4_5cfb, i64* @rdx, align 8
  br label %dec_label_pc_5cfe

dec_label_pc_5cfe:                                ; preds = %dec_label_pc_5d42, %dec_label_pc_5cfb
  %v2_5d00 = phi i64 [ %v2_5d00.pre, %dec_label_pc_5d42 ], [ %v0_5d36, %dec_label_pc_5cfb ]
  %v2_5cfe = phi i32 [ 1, %dec_label_pc_5d42 ], [ %v4_5cf5, %dec_label_pc_5cfb ]
  %v0_5cfe = phi i64 [ %v0_5cfe.pre, %dec_label_pc_5d42 ], [ %v4_5cfb, %dec_label_pc_5cfb ]
  %v1_5cfe = trunc i64 %v0_5cfe to i32
  %v4_5cfe = add i32 %v1_5cfe, %v2_5cfe
  %v20_5cfe = zext i32 %v4_5cfe to i64
  store i64 %v20_5cfe, i64* @rdx, align 8
  %v3_5d00 = add i64 %v2_5d00, 20
  %v4_5d00 = inttoptr i64 %v3_5d00 to i32*
  store i32 %v4_5cfe, i32* %v4_5d00, align 4
  %v2_5d03 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_5d03, i64* @rbx, align 8
  %v0_5d04 = load i64, i64* @rax, align 8
  ret i64 %v0_5d04

dec_label_pc_5d08:                                ; preds = %dec_label_pc_5cda
  store i32 0, i32* %v2_5cd3, align 4
  %v0_5d0f = load i64, i64* @rdi, align 8
  %v1_5d0f = add i64 %v0_5d0f, 16
  %v2_5d0f = inttoptr i64 %v1_5d0f to i32*
  store i32 0, i32* %v2_5d0f, align 4
  store i64 0, i64* @rdx, align 8
  %v0_5ce6.pre = load i64, i64* @rdi, align 8
  %v0_5ced.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_5ce6

dec_label_pc_5d20:                                ; preds = %dec_label_pc_5cd0
  %v4_5d20 = sub i32 %v3_5cd3, %v3_5cd0
  %v20_5d20 = zext i32 %v4_5d20 to i64
  store i64 %v20_5d20, i64* @rdx, align 8
  store i64 %v20_5d20, i64* @rax, align 8
  ret i64 %v20_5d20

dec_label_pc_5d28:                                ; preds = %dec_label_pc_5cf9
  %v3_5d28 = load i64, i64* %v2_5ce9, align 8
  store i64 %v3_5d28, i64* @rdi, align 8
  %v1_5d2c = inttoptr i64 %v3_5d28 to i64*
  %v2_5d2c = load i64, i64* %v1_5d2c, align 8
  store i64 %v2_5d2c, i64* @rax, align 8
  %v4_5d32 = trunc i64 %v2_5d2c to i32
  %v6_5d32 = icmp slt i32 %v4_5d32, 0
  %v7_5d32 = trunc i64 %v2_5d2c to i8
  br i1 %v6_5d32, label %dec_label_pc_5d50, label %dec_label_pc_5d36

dec_label_pc_5d36:                                ; preds = %dec_label_pc_5d28
  %v1_5d36 = add i64 %v0_5d36, 8
  %v2_5d36 = inttoptr i64 %v1_5d36 to i64*
  %v3_5d36 = load i64, i64* %v2_5d36, align 8
  store i64 %v3_5d36, i64* @rcx, align 8
  %v1_5d3a = add i64 %v0_5d36, 20
  %v2_5d3a = inttoptr i64 %v1_5d3a to i32*
  %v3_5d3a = load i32, i32* %v2_5d3a, align 4
  %v4_5d3a = zext i32 %v3_5d3a to i64
  store i64 %v4_5d3a, i64* @rdx, align 8
  %v3_5d3d = add i64 %v3_5d36, 8
  %v4_5d3d = inttoptr i64 %v3_5d3d to i32*
  %v5_5d3d = load i32, i32* %v4_5d3d, align 4
  %v11_5d3d = icmp ult i32 %v3_5d3a, %v5_5d3d
  %v1_5d40 = icmp eq i1 %v11_5d3d, false
  br i1 %v1_5d40, label %dec_label_pc_5d57, label %dec_label_pc_5d42

dec_label_pc_5d42:                                ; preds = %dec_label_pc_5d36
  %v5_5d45 = add i64 %v3_5d36, 12
  %v6_5d45 = add i64 %v5_5d45, %v4_5d3a
  %v7_5d45 = inttoptr i64 %v6_5d45 to i8*
  store i8 %v7_5d32, i8* %v7_5d45, align 1
  store i64 1, i64* @rax, align 8
  %v0_5cfe.pre = load i64, i64* @rdx, align 8
  %v2_5d00.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_5cfe

dec_label_pc_5d50:                                ; preds = %dec_label_pc_5d28, %dec_label_pc_5ce6
  store i64 4294967295, i64* @rax, align 8
  %v2_5d55 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_5d55, i64* @rbx, align 8
  ret i64 4294967295

dec_label_pc_5d57:                                ; preds = %dec_label_pc_5d36
  store i64 %v4_5d3a, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm230Globals$AbstractBufferedStream4readEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_5d60:
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_5d60 = load i64, i64* @rbx, align 8
  store i64 %v0_5d60, i64* %stack_var_-8, align 8
  %v2_5d61 = load i64, i64* @rdi, align 8
  store i64 %v2_5d61, i64* @rax, align 8
  store i64 %v2_5d61, i64* @rbx, align 8
  %v4_5d6d = trunc i64 %v2_5d61 to i32
  %tmp238 = icmp slt i32 %v4_5d6d, 1
  br i1 %tmp238, label %dec_label_pc_5d90, label %dec_label_pc_5d71

dec_label_pc_5d71:                                ; preds = %dec_label_pc_5d60
  %v1_5d71 = add i64 %v2_5d61, 8
  %v2_5d71 = inttoptr i64 %v1_5d71 to i64*
  %v3_5d71 = load i64, i64* %v2_5d71, align 8
  store i64 %v3_5d71, i64* @rax, align 8
  %v1_5d75 = add i64 %v2_5d61, 16
  %v2_5d75 = inttoptr i64 %v1_5d75 to i32*
  %v3_5d75 = load i32, i32* %v2_5d75, align 4
  %v4_5d75 = sext i32 %v3_5d75 to i64
  store i64 %v4_5d75, i64* @rdi, align 8
  %v3_5d79 = add i64 %v3_5d71, 8
  %v4_5d79 = inttoptr i64 %v3_5d79 to i32*
  %v5_5d79 = load i32, i32* %v4_5d79, align 4
  %v11_5d79 = icmp ult i32 %v3_5d75, %v5_5d79
  %v1_5d7c = add nsw i64 %v4_5d75, 1
  store i64 %v1_5d7c, i64* @rdx, align 8
  %v1_5d7f = trunc i64 %v1_5d7c to i32
  store i32 %v1_5d7f, i32* %v2_5d75, align 4
  %v1_5d82 = icmp eq i1 %v11_5d79, false
  br i1 %v1_5d82, label %dec_label_pc_5d97, label %dec_label_pc_5d84

dec_label_pc_5d84:                                ; preds = %dec_label_pc_5d71
  %v0_5d84 = load i64, i64* @rax, align 8
  %v1_5d84 = load i64, i64* @rdi, align 8
  %v3_5d84 = add i64 %v0_5d84, 12
  %v4_5d84 = add i64 %v3_5d84, %v1_5d84
  %v5_5d84 = inttoptr i64 %v4_5d84 to i8*
  %v6_5d84 = load i8, i8* %v5_5d84, align 1
  %v7_5d84 = zext i8 %v6_5d84 to i64
  store i64 %v7_5d84, i64* @rax, align 8
  %v2_5d89 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_5d89, i64* @rbx, align 8
  ret i64 %v7_5d84

dec_label_pc_5d90:                                ; preds = %dec_label_pc_5d60
  store i64 4294967295, i64* @rax, align 8
  store i64 %v0_5d60, i64* @rbx, align 8
  ret i64 4294967295

dec_label_pc_5d97:                                ; preds = %dec_label_pc_5d71
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6strcmpEJiPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5da0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5da0 = load i64, i64* %r14.global-to-local, align 8
  %v0_5da2 = load i64, i64* %r13.global-to-local, align 8
  %v0_5da4 = load i64, i64* %r12.global-to-local, align 8
  %v0_5da6 = load i64, i64* %rbp.global-to-local, align 8
  %v0_5da7 = load i64, i64* @rbx, align 8
  %v0_5da8 = load i64, i64* @rdi, align 8
  %v1_5da8 = add i64 %v0_5da8, 20
  %v2_5da8 = inttoptr i64 %v1_5da8 to i32*
  %v3_5da8 = load i32, i32* %v2_5da8, align 4
  %v4_5da8 = zext i32 %v3_5da8 to i64
  store i64 %v4_5da8, i64* @rax, align 8
  %v0_5dab = load i64, i64* %rsi.global-to-local, align 8
  %v1_5dab = add i64 %v0_5dab, 20
  %v2_5dab = inttoptr i64 %v1_5dab to i32*
  %v3_5dab = load i32, i32* %v2_5dab, align 4
  %v4_5dab = zext i32 %v3_5dab to i64
  store i64 %v4_5dab, i64* %r13.global-to-local, align 8
  %tmp263 = icmp slt i32 %v3_5da8, 1
  br i1 %tmp263, label %dec_label_pc_5e50, label %dec_label_pc_5db7

dec_label_pc_5db7:                                ; preds = %dec_label_pc_5da0
  %tmp264 = icmp slt i32 %v3_5dab, 1
  br i1 %tmp264, label %dec_label_pc_5e50, label %dec_label_pc_5dc0

dec_label_pc_5dc0:                                ; preds = %dec_label_pc_5db7
  %v1_5dc0 = add i64 %v0_5da8, 8
  %v2_5dc0 = inttoptr i64 %v1_5dc0 to i64*
  %v3_5dc0 = load i64, i64* %v2_5dc0, align 8
  store i64 %v3_5dc0, i64* @rdx, align 8
  %v1_5dc4 = add i64 %v0_5da8, 16
  %v2_5dc4 = inttoptr i64 %v1_5dc4 to i32*
  %v3_5dc4 = load i32, i32* %v2_5dc4, align 4
  %v4_5dc4 = zext i32 %v3_5dc4 to i64
  store i64 %v4_5dc4, i64* %r14.global-to-local, align 8
  %v1_5dcc = add i64 %v3_5dc0, 12
  store i64 %v1_5dcc, i64* %r12.global-to-local, align 8
  store i64 %v4_5dc4, i64* @rcx, align 8
  %v4_5ddc = add i64 %v1_5dcc, %v4_5dc4
  %v5_5ddc = inttoptr i64 %v4_5ddc to i8*
  %v6_5ddc = load i8, i8* %v5_5ddc, align 1
  %v7_5ddc = sext i8 %v6_5ddc to i64
  store i64 %v7_5ddc, i64* @rbx, align 8
  %v1_5de1 = add i64 %v0_5dab, 8
  %v2_5de1 = inttoptr i64 %v1_5de1 to i64*
  %v3_5de1 = load i64, i64* %v2_5de1, align 8
  store i64 %v3_5de1, i64* @rdx, align 8
  %v1_5de5 = add i64 %v0_5dab, 16
  %v2_5de5 = inttoptr i64 %v1_5de5 to i32*
  %v3_5de5 = load i32, i32* %v2_5de5, align 4
  %v4_5de5 = zext i32 %v3_5de5 to i64
  store i64 %v4_5de5, i64* @rcx, align 8
  %v1_5de8 = add i64 %v3_5de1, 8
  %v2_5de8 = inttoptr i64 %v1_5de8 to i32*
  %v3_5de8 = load i32, i32* %v2_5de8, align 4
  %v4_5de8 = zext i32 %v3_5de8 to i64
  store i64 %v4_5de8, i64* @r11, align 8
  %v1_5dec = add i64 %v3_5de1, 12
  %v9_5df3 = icmp ult i32 %v3_5de5, %v3_5de8
  %v1_5df6 = icmp eq i1 %v9_5df3, false
  br i1 %v1_5df6, label %dec_label_pc_5e5c, label %dec_label_pc_5df8

dec_label_pc_5df8:                                ; preds = %dec_label_pc_5dc0
  %v1_5df8 = add nuw nsw i64 %v4_5dc4, 1
  store i64 %v1_5df8, i64* @rdx, align 8
  %v3_5dfc = add nuw nsw i64 %v4_5dc4, %v4_5dab
  store i64 %v3_5dfc, i64* %rbp.global-to-local, align 8
  %v3_5e01 = add nuw nsw i64 %v4_5dc4, %v4_5da8
  store i64 %v3_5e01, i64* @rdi, align 8
  %v3_5e10 = trunc i64 %v3_5e01 to i32
  %v3_5e14 = trunc i64 %v3_5dfc to i32
  br label %dec_label_pc_5e36

dec_label_pc_5e10:                                ; preds = %dec_label_pc_5e36
  %v1_5e10 = trunc i64 %v0_5e26 to i32
  %v14_5e10 = icmp eq i32 %v1_5e10, %v3_5e10
  br i1 %v14_5e10, label %dec_label_pc_5e50, label %dec_label_pc_5e14

dec_label_pc_5e14:                                ; preds = %dec_label_pc_5e10
  %v14_5e14 = icmp eq i32 %v1_5e10, %v3_5e14
  br i1 %v14_5e14, label %dec_label_pc_5e50, label %dec_label_pc_5e18

dec_label_pc_5e18:                                ; preds = %dec_label_pc_5e14
  store i64 %v0_5e26, i64* %r14.global-to-local, align 8
  store i64 %v0_5e26, i64* %rsi.global-to-local, align 8
  %v1_5e23 = trunc i64 %v0_5e23 to i32
  %v2_5e23 = add i32 %v1_5e23, 1
  %v17_5e23 = zext i32 %v2_5e23 to i64
  store i64 %v17_5e23, i64* @rcx, align 8
  %v2_5e26 = add nsw i64 %v0_5e26, 1
  %v17_5e26 = and i64 %v2_5e26, 4294967295
  store i64 %v17_5e26, i64* @rdx, align 8
  %v3_5e29 = add i64 %v0_5e26, %v1_5dcc
  %v4_5e29 = inttoptr i64 %v3_5e29 to i8*
  %v5_5e29 = load i8, i8* %v4_5e29, align 1
  %v6_5e29 = sext i8 %v5_5e29 to i64
  store i64 %v6_5e29, i64* @rbx, align 8
  %v9_5e2e = icmp ult i32 %v2_5e23, %v3_5de8
  %v1_5e34 = icmp eq i1 %v9_5e2e, false
  br i1 %v1_5e34, label %dec_label_pc_5e5c, label %dec_label_pc_5e36

dec_label_pc_5e36:                                ; preds = %dec_label_pc_5e18, %dec_label_pc_5df8
  %v0_5e26 = phi i64 [ %v17_5e26, %dec_label_pc_5e18 ], [ %v1_5df8, %dec_label_pc_5df8 ]
  %v0_5e43 = phi i64 [ %v6_5e29, %dec_label_pc_5e18 ], [ %v7_5ddc, %dec_label_pc_5df8 ]
  %v0_5e23 = phi i64 [ %v17_5e23, %dec_label_pc_5e18 ], [ %v4_5de5, %dec_label_pc_5df8 ]
  store i64 %v0_5e23, i64* %rsi.global-to-local, align 8
  %v3_5e39 = add i64 %v0_5e23, %v1_5dec
  %v4_5e39 = inttoptr i64 %v3_5e39 to i8*
  %v5_5e39 = load i8, i8* %v4_5e39, align 1
  %v6_5e39 = sext i8 %v5_5e39 to i64
  store i64 %v6_5e39, i64* %rsi.global-to-local, align 8
  %v3_5e3e = trunc i64 %v0_5e43 to i8
  %v14_5e3e = icmp eq i8 %v5_5e39, %v3_5e3e
  br i1 %v14_5e3e, label %dec_label_pc_5e10, label %dec_label_pc_5e43

dec_label_pc_5e43:                                ; preds = %dec_label_pc_5e36
  %v3_5e45 = sext i8 %v5_5e39 to i64
  %v4_5e45 = sub nsw i64 %v0_5e43, %v3_5e45
  %v20_5e45 = and i64 %v4_5e45, 4294967295
  store i64 %v20_5e45, i64* @rax, align 8
  store i64 %v0_5da7, i64* @rbx, align 8
  store i64 %v0_5da6, i64* %rbp.global-to-local, align 8
  store i64 %v0_5da4, i64* %r12.global-to-local, align 8
  store i64 %v0_5da2, i64* %r13.global-to-local, align 8
  store i64 %v0_5da0, i64* %r14.global-to-local, align 8
  ret i64 %v20_5e45

dec_label_pc_5e50:                                ; preds = %dec_label_pc_5e14, %dec_label_pc_5e10, %dec_label_pc_5da0, %dec_label_pc_5db7
  %v4_5e50 = sub i32 %v3_5da8, %v3_5dab
  %v20_5e50 = zext i32 %v4_5e50 to i64
  store i64 %v20_5e50, i64* @rax, align 8
  store i64 %v0_5da7, i64* @rbx, align 8
  store i64 %v0_5da6, i64* %rbp.global-to-local, align 8
  store i64 %v0_5da4, i64* %r12.global-to-local, align 8
  store i64 %v0_5da2, i64* %r13.global-to-local, align 8
  store i64 %v0_5da0, i64* %r14.global-to-local, align 8
  ret i64 %v20_5e50

dec_label_pc_5e5c:                                ; preds = %dec_label_pc_5e18, %dec_label_pc_5dc0
  %v0_5e5c = phi i64 [ %v4_5de5, %dec_label_pc_5dc0 ], [ %v17_5e23, %dec_label_pc_5e18 ]
  store i64 %v0_5e5c, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7luaByteEJii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5e70:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5e70 = load i64, i64* @rdi, align 8
  %v1_5e70 = add i64 %v0_5e70, 8
  %v2_5e70 = inttoptr i64 %v1_5e70 to i64*
  %v3_5e70 = load i64, i64* %v2_5e70, align 8
  store i64 %v3_5e70, i64* @rax, align 8
  %v0_5e74 = load i64, i64* %rsi.global-to-local, align 8
  %v1_5e74 = trunc i64 %v0_5e74 to i32
  %v3_5e74 = add i64 %v0_5e70, 16
  %v4_5e74 = inttoptr i64 %v3_5e74 to i32*
  %v5_5e74 = load i32, i32* %v4_5e74, align 4
  %v6_5e74 = add i32 %v5_5e74, %v1_5e74
  %v22_5e74 = zext i32 %v6_5e74 to i64
  store i64 %v22_5e74, i64* %rsi.global-to-local, align 8
  %v3_5e77 = add i64 %v3_5e70, 8
  %v4_5e77 = inttoptr i64 %v3_5e77 to i32*
  %v5_5e77 = load i32, i32* %v4_5e77, align 4
  %v11_5e77 = icmp ult i32 %v6_5e74, %v5_5e77
  %v1_5e7a = icmp eq i1 %v11_5e77, false
  br i1 %v1_5e7a, label %dec_label_pc_5e85, label %dec_label_pc_5e7c

dec_label_pc_5e7c:                                ; preds = %dec_label_pc_5e70
  %v3_5e7f = add i64 %v3_5e70, 12
  %v4_5e7f = add i64 %v3_5e7f, %v22_5e74
  %v5_5e7f = inttoptr i64 %v4_5e7f to i8*
  %v6_5e7f = load i8, i8* %v5_5e7f, align 1
  %v7_5e7f = zext i8 %v6_5e7f to i64
  store i64 %v7_5e7f, i64* @rax, align 8
  ret i64 %v7_5e7f

dec_label_pc_5e85:                                ; preds = %dec_label_pc_5e70
  store i64 %v22_5e74, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString10indexOfAnyEJiPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5ea0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5ea0 = load i64, i64* %r15.global-to-local, align 8
  %v0_5ea2 = load i64, i64* %r14.global-to-local, align 8
  %v0_5ea4 = load i64, i64* %r13.global-to-local, align 8
  %v0_5ea6 = load i64, i64* %r12.global-to-local, align 8
  %v0_5ea8 = load i64, i64* %rbp.global-to-local, align 8
  %v0_5ea9 = load i64, i64* @rbx, align 8
  %v0_5eae = load i64, i64* @rdi, align 8
  %v1_5eae = add i64 %v0_5eae, 16
  %v2_5eae = inttoptr i64 %v1_5eae to i32*
  %v3_5eae = load i32, i32* %v2_5eae, align 4
  %v4_5eae = zext i32 %v3_5eae to i64
  store i64 %v4_5eae, i64* %rbp.global-to-local, align 8
  %v1_5eb1 = add i64 %v0_5eae, 20
  %v2_5eb1 = inttoptr i64 %v1_5eb1 to i32*
  %v3_5eb1 = load i32, i32* %v2_5eb1, align 4
  %v4_5eb1 = zext i32 %v3_5eb1 to i64
  store i64 %v4_5eb1, i64* %r14.global-to-local, align 8
  %v0_5eb5 = load i64, i64* %rsi.global-to-local, align 8
  %v1_5eb5 = add i64 %v0_5eb5, 16
  %v2_5eb5 = inttoptr i64 %v1_5eb5 to i32*
  %v3_5eb5 = load i32, i32* %v2_5eb5, align 4
  %v4_5eb5 = zext i32 %v3_5eb5 to i64
  store i64 %v4_5eb5, i64* @rbx, align 8
  %v1_5eb8 = add i64 %v0_5eb5, 20
  %v2_5eb8 = inttoptr i64 %v1_5eb8 to i32*
  %v3_5eb8 = load i32, i32* %v2_5eb8, align 4
  %v4_5ebc = add i32 %v3_5eb1, %v3_5eae
  %v20_5ebc = zext i32 %v4_5ebc to i64
  store i64 %v20_5ebc, i64* %r14.global-to-local, align 8
  %v4_5ebf = add i32 %v3_5eb8, %v3_5eb5
  %v9_5ec2 = icmp ult i32 %v3_5eae, %v4_5ebc
  br i1 %v9_5ec2, label %dec_label_pc_5ec7, label %dec_label_pc_5f42

dec_label_pc_5ec7:                                ; preds = %dec_label_pc_5ea0
  %v1_5ec7 = add nuw nsw i64 %v4_5eb5, 1
  store i64 %v1_5ec7, i64* %r13.global-to-local, align 8
  store i64 %v4_5eae, i64* %r12.global-to-local, align 8
  store i64 %v4_5eae, i64* @rax, align 8
  store i64 %v4_5eb5, i64* %r15.global-to-local, align 8
  %v9_5ed3 = icmp ult i32 %v3_5eb5, %v4_5ebf
  %v1_5ed8 = add i64 %v0_5eae, 8
  %v2_5ed8 = inttoptr i64 %v1_5ed8 to i64*
  %v1_5ee7 = add i64 %v0_5eb5, 8
  %v2_5ee7 = inttoptr i64 %v1_5ee7 to i64*
  br label %dec_label_pc_5ed3

dec_label_pc_5ed3:                                ; preds = %dec_label_pc_5f2d, %dec_label_pc_5ec7
  %v0_5f30 = phi i64 [ %v1_5f30, %dec_label_pc_5f2d ], [ %v4_5eae, %dec_label_pc_5ec7 ]
  %v0_5f40 = phi i64 [ %v17_5f2d, %dec_label_pc_5f2d ], [ %v4_5eae, %dec_label_pc_5ec7 ]
  br i1 %v9_5ed3, label %dec_label_pc_5ed8, label %dec_label_pc_5ed3.dec_label_pc_5f2d_crit_edge

dec_label_pc_5ed3.dec_label_pc_5f2d_crit_edge:    ; preds = %dec_label_pc_5ed3
  %.pre = trunc i64 %v0_5f40 to i32
  br label %dec_label_pc_5f2d

dec_label_pc_5ed8:                                ; preds = %dec_label_pc_5ed3
  %v3_5ed8 = load i64, i64* %v2_5ed8, align 8
  store i64 %v3_5ed8, i64* @rdx, align 8
  %v1_5edc = trunc i64 %v0_5f40 to i32
  %v3_5ee1 = add i64 %v0_5f30, 12
  %v4_5ee1 = add i64 %v3_5ee1, %v3_5ed8
  %v5_5ee1 = inttoptr i64 %v4_5ee1 to i8*
  %v6_5ee1 = load i8, i8* %v5_5ee1, align 1
  %v7_5ee1 = zext i8 %v6_5ee1 to i64
  store i64 %v7_5ee1, i64* @r11, align 8
  %v3_5ee7 = load i64, i64* %v2_5ee7, align 8
  store i64 %v3_5ee7, i64* @rdx, align 8
  %v1_5eeb = add i64 %v3_5ee7, 8
  %v2_5eeb = inttoptr i64 %v1_5eeb to i32*
  %v3_5eeb = load i32, i32* %v2_5eeb, align 4
  %v1_5eef = add i64 %v3_5ee7, 12
  store i64 %v1_5eef, i64* @rcx, align 8
  %v9_5ef3 = icmp ult i32 %v3_5eb5, %v3_5eeb
  %v1_5ef6 = icmp eq i1 %v9_5ef3, false
  br i1 %v1_5ef6, label %dec_label_pc_5f51, label %dec_label_pc_5ef8

dec_label_pc_5ef8:                                ; preds = %dec_label_pc_5ed8
  %v6_5ef8 = add i64 %v1_5eef, %v4_5eb5
  %v7_5ef8 = inttoptr i64 %v6_5ef8 to i8*
  %v8_5ef8 = load i8, i8* %v7_5ef8, align 1
  %v19_5ef8 = icmp eq i8 %v6_5ee1, %v8_5ef8
  br i1 %v19_5ef8, label %dec_label_pc_5f40, label %dec_label_pc_5eff

dec_label_pc_5eff:                                ; preds = %dec_label_pc_5ef8
  store i64 %v1_5ec7, i64* @rdx, align 8
  %v2_5f05 = add i64 %v1_5eef, %v1_5ec7
  store i64 %v2_5f05, i64* @rcx, align 8
  br label %dec_label_pc_5f25

dec_label_pc_5f10:                                ; preds = %dec_label_pc_5f25
  %v14_5f10 = icmp eq i32 %v3_5f25, %v3_5eeb
  br i1 %v14_5f10, label %dec_label_pc_5f54, label %dec_label_pc_5f15

dec_label_pc_5f15:                                ; preds = %dec_label_pc_5f10
  %v1_5f15 = inttoptr i64 %v0_5f1c to i8*
  %v2_5f15 = load i8, i8* %v1_5f15, align 1
  %v2_5f19 = add nsw i64 %v0_5f19, 1
  %v17_5f19 = and i64 %v2_5f19, 4294967295
  store i64 %v17_5f19, i64* @rdx, align 8
  %v1_5f1c = add i64 %v0_5f1c, 1
  store i64 %v1_5f1c, i64* @rcx, align 8
  %v14_5f20 = icmp eq i8 %v2_5f15, %v6_5ee1
  br i1 %v14_5f20, label %dec_label_pc_5f40, label %dec_label_pc_5f25

dec_label_pc_5f25:                                ; preds = %dec_label_pc_5f15, %dec_label_pc_5eff
  %v0_5f1c = phi i64 [ %v1_5f1c, %dec_label_pc_5f15 ], [ %v2_5f05, %dec_label_pc_5eff ]
  %v0_5f19 = phi i64 [ %v17_5f19, %dec_label_pc_5f15 ], [ %v1_5ec7, %dec_label_pc_5eff ]
  %v3_5f25 = trunc i64 %v0_5f19 to i32
  %v14_5f25 = icmp eq i32 %v4_5ebf, %v3_5f25
  %v1_5f2b = icmp eq i1 %v14_5f25, false
  br i1 %v1_5f2b, label %dec_label_pc_5f10, label %dec_label_pc_5f2d

dec_label_pc_5f2d:                                ; preds = %dec_label_pc_5f25, %dec_label_pc_5ed3.dec_label_pc_5f2d_crit_edge
  %v1_5f2d.pre-phi = phi i32 [ %.pre, %dec_label_pc_5ed3.dec_label_pc_5f2d_crit_edge ], [ %v1_5edc, %dec_label_pc_5f25 ]
  %v2_5f2d = add i32 %v1_5f2d.pre-phi, 1
  %v17_5f2d = zext i32 %v2_5f2d to i64
  store i64 %v17_5f2d, i64* @rax, align 8
  %v1_5f30 = add i64 %v0_5f30, 1
  store i64 %v1_5f30, i64* %r12.global-to-local, align 8
  %v14_5f34 = icmp eq i32 %v4_5ebc, %v2_5f2d
  %v1_5f37 = icmp eq i1 %v14_5f34, false
  br i1 %v1_5f37, label %dec_label_pc_5ed3, label %dec_label_pc_5f42

dec_label_pc_5f40:                                ; preds = %dec_label_pc_5ef8, %dec_label_pc_5f15
  %v4_5f40 = sub i32 %v1_5edc, %v3_5eae
  %v20_5f40 = zext i32 %v4_5f40 to i64
  br label %dec_label_pc_5f42

dec_label_pc_5f42:                                ; preds = %dec_label_pc_5f2d, %dec_label_pc_5ea0, %dec_label_pc_5f40
  %storemerge = phi i64 [ %v20_5f40, %dec_label_pc_5f40 ], [ 4294967295, %dec_label_pc_5ea0 ], [ 4294967295, %dec_label_pc_5f2d ]
  store i64 %storemerge, i64* @rax, align 8
  store i64 %v0_5ea9, i64* @rbx, align 8
  store i64 %v0_5ea8, i64* %rbp.global-to-local, align 8
  store i64 %v0_5ea6, i64* %r12.global-to-local, align 8
  store i64 %v0_5ea4, i64* %r13.global-to-local, align 8
  store i64 %v0_5ea2, i64* %r14.global-to-local, align 8
  store i64 %v0_5ea0, i64* %r15.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_5f51:                                ; preds = %dec_label_pc_5ed8
  br label %dec_label_pc_5f54

dec_label_pc_5f54:                                ; preds = %dec_label_pc_5f10, %dec_label_pc_5f51
  %v0_5f54 = phi i64 [ %v4_5eb5, %dec_label_pc_5f51 ], [ %v0_5f19, %dec_label_pc_5f10 ]
  store i64 %v0_5f54, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7indexOfEJici(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_5f70:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5f70 = load i64, i64* @rdi, align 8
  %v1_5f70 = add i64 %v0_5f70, 20
  %v2_5f70 = inttoptr i64 %v1_5f70 to i32*
  %v3_5f70 = load i32, i32* %v2_5f70, align 4
  %v4_5f70 = zext i32 %v3_5f70 to i64
  store i64 %v4_5f70, i64* @rax, align 8
  %v0_5f73 = load i64, i64* @rdx, align 8
  %v5_5f75 = icmp slt i64 %v0_5f73, %v4_5f70
  br i1 %v5_5f75, label %dec_label_pc_5f77, label %dec_label_pc_5fd3

dec_label_pc_5f77:                                ; preds = %dec_label_pc_5f70
  %v0_5f77 = load i64, i64* @rbx, align 8
  %v1_5f78 = add i64 %v0_5f70, 8
  %v2_5f78 = inttoptr i64 %v1_5f78 to i64*
  %v3_5f78 = load i64, i64* %v2_5f78, align 8
  store i64 %v3_5f78, i64* @rcx, align 8
  %v1_5f7c = add i64 %v0_5f70, 16
  %v2_5f7c = inttoptr i64 %v1_5f7c to i32*
  %v3_5f7c = load i32, i32* %v2_5f7c, align 4
  %v4_5f7c = zext i32 %v3_5f7c to i64
  %v1_5f80 = add i64 %v3_5f78, 8
  %v2_5f80 = inttoptr i64 %v1_5f80 to i32*
  %v3_5f80 = load i32, i32* %v2_5f80, align 4
  %v1_5f84 = add i64 %v3_5f78, 12
  store i64 %v1_5f84, i64* @r11, align 8
  %v3_5f88 = add i64 %v4_5f7c, %v0_5f73
  store i64 %v3_5f88, i64* @rdi, align 8
  %v1_5f8c = trunc i64 %v3_5f88 to i32
  %v9_5f8c = icmp ult i32 %v1_5f8c, %v3_5f80
  %v1_5f8f = icmp eq i1 %v9_5f8c, false
  br i1 %v1_5f8f, label %dec_label_pc_5fdd, label %dec_label_pc_5f91

dec_label_pc_5f91:                                ; preds = %dec_label_pc_5f77
  store i64 %v3_5f88, i64* @rbx, align 8
  %v4_5f94 = add i64 %v1_5f84, %v3_5f88
  %v5_5f94 = inttoptr i64 %v4_5f94 to i8*
  %v6_5f94 = load i8, i8* %v5_5f94, align 1
  %v7_5f94 = load i64, i64* %rsi.global-to-local, align 8
  %v8_5f94 = trunc i64 %v7_5f94 to i8
  %v19_5f94 = icmp eq i8 %v6_5f94, %v8_5f94
  br i1 %v19_5f94, label %dec_label_pc_5fd9, label %dec_label_pc_5f9b

dec_label_pc_5f9b:                                ; preds = %dec_label_pc_5f91
  %v1_5f9e = add i64 %v3_5f88, 1
  store i64 %v1_5f9e, i64* @rdx, align 8
  %v3_5fa1 = add nuw nsw i64 %v4_5f7c, %v4_5f70
  store i64 %v3_5fa1, i64* %rsi.global-to-local, align 8
  %v3_5fc8 = trunc i64 %v3_5fa1 to i32
  br label %dec_label_pc_5fc3

dec_label_pc_5fb0:                                ; preds = %dec_label_pc_5fc3
  %v9_5fb0 = icmp ult i32 %v1_5fc5, %v3_5f80
  store i64 %v0_5fb7, i64* @rdi, align 8
  %v1_5fb5 = icmp eq i1 %v9_5fb0, false
  br i1 %v1_5fb5, label %dec_label_pc_5fdd, label %dec_label_pc_5fb7

dec_label_pc_5fb7:                                ; preds = %dec_label_pc_5fb0
  store i64 %v0_5fb7, i64* @rcx, align 8
  %v2_5fba = add i64 %v0_5fb7, 1
  %v17_5fba = and i64 %v2_5fba, 4294967295
  store i64 %v17_5fba, i64* @rdx, align 8
  %v5_5fbd = add i64 %v0_5fb7, %v1_5f84
  %v6_5fbd = inttoptr i64 %v5_5fbd to i8*
  %v7_5fbd = load i8, i8* %v6_5fbd, align 1
  %v18_5fbd = icmp eq i8 %v8_5f94, %v7_5fbd
  br i1 %v18_5fbd, label %dec_label_pc_5fd1, label %dec_label_pc_5fc3

dec_label_pc_5fc3:                                ; preds = %dec_label_pc_5fb7, %dec_label_pc_5f9b
  %v0_5fb7 = phi i64 [ %v17_5fba, %dec_label_pc_5fb7 ], [ %v1_5f9e, %dec_label_pc_5f9b ]
  %v1_5fc5 = trunc i64 %v0_5fb7 to i32
  %v4_5fc5 = sub i32 %v1_5fc5, %v3_5f7c
  %v20_5fc5 = zext i32 %v4_5fc5 to i64
  store i64 %v20_5fc5, i64* @rax, align 8
  %v14_5fc8 = icmp eq i32 %v1_5fc5, %v3_5fc8
  %v1_5fca = icmp eq i1 %v14_5fc8, false
  br i1 %v1_5fca, label %dec_label_pc_5fb0, label %dec_label_pc_5fcc

dec_label_pc_5fcc:                                ; preds = %dec_label_pc_5fc3
  store i64 4294967295, i64* @rax, align 8
  br label %dec_label_pc_5fd1

dec_label_pc_5fd1:                                ; preds = %dec_label_pc_5fb7, %dec_label_pc_5fcc
  %v0_5fd2 = phi i64 [ 4294967295, %dec_label_pc_5fcc ], [ %v20_5fc5, %dec_label_pc_5fb7 ]
  store i64 %v0_5f77, i64* @rbx, align 8
  ret i64 %v0_5fd2

dec_label_pc_5fd3:                                ; preds = %dec_label_pc_5f70
  store i64 4294967295, i64* @rax, align 8
  ret i64 4294967295

dec_label_pc_5fd9:                                ; preds = %dec_label_pc_5f91
  store i64 %v0_5f73, i64* @rax, align 8
  store i64 %v0_5f77, i64* @rbx, align 8
  ret i64 %v0_5f73

dec_label_pc_5fdd:                                ; preds = %dec_label_pc_5fb0, %dec_label_pc_5f77
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString11isValidUtf8EJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_5ff0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5ff0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_5ff1 = load i64, i64* @rbx, align 8
  %v0_5ff6 = load i64, i64* @rdi, align 8
  %v1_5ff6 = add i64 %v0_5ff6, 16
  %v2_5ff6 = inttoptr i64 %v1_5ff6 to i32*
  %v3_5ff6 = load i32, i32* %v2_5ff6, align 4
  %v4_5ff6 = zext i32 %v3_5ff6 to i64
  store i64 %v4_5ff6, i64* @rdx, align 8
  %v1_5ff9 = add i64 %v0_5ff6, 20
  %v2_5ff9 = inttoptr i64 %v1_5ff9 to i32*
  %v3_5ff9 = load i32, i32* %v2_5ff9, align 4
  %v4_5ffc = add i32 %v3_5ff9, %v3_5ff6
  %v20_5ffc = zext i32 %v4_5ffc to i64
  store i64 %v20_5ffc, i64* %rbp.global-to-local, align 8
  %v1_5ffe = add i32 %v4_5ffc, 1
  %v1_6006 = add i64 %v0_5ff6, 8
  %v2_6006 = inttoptr i64 %v1_6006 to i64*
  br label %dec_label_pc_6002

dec_label_pc_6002:                                ; preds = %dec_label_pc_60d5, %dec_label_pc_6082, %dec_label_pc_5ff0
  %v0_602a = phi i64 [ %v4_5ff6, %dec_label_pc_5ff0 ], [ %v17_6082, %dec_label_pc_6082 ], [ %v1_60d7, %dec_label_pc_60d5 ]
  %v5_6004 = icmp slt i64 %v0_602a, %v20_5ffc
  br i1 %v5_6004, label %dec_label_pc_6006, label %dec_label_pc_605f

dec_label_pc_6006:                                ; preds = %dec_label_pc_6002
  %v1_6002 = trunc i64 %v0_602a to i32
  %v3_6006 = load i64, i64* %v2_6006, align 8
  store i64 %v3_6006, i64* @r11, align 8
  %v1_600d = add i64 %v3_6006, 8
  %v2_600d = inttoptr i64 %v1_600d to i32*
  %v3_600d = load i32, i32* %v2_600d, align 4
  %v4_600d = zext i32 %v3_600d to i64
  store i64 %v4_600d, i64* @rbx, align 8
  %v1_6011 = add i64 %v3_6006, 12
  %v9_6015 = icmp ult i32 %v1_6002, %v3_600d
  %v1_6017 = icmp eq i1 %v9_6015, false
  br i1 %v1_6017, label %dec_label_pc_60f9, label %dec_label_pc_601d

dec_label_pc_601d:                                ; preds = %dec_label_pc_6006
  %v1_600a = add i64 %v0_602a, 1
  store i64 %v0_602a, i64* @rax, align 8
  %v3_6020 = add i64 %v0_602a, 12
  %v4_6020 = add i64 %v3_6020, %v3_6006
  %v5_6020 = inttoptr i64 %v4_6020 to i8*
  %v6_6020 = load i8, i8* %v5_6020, align 1
  %v7_6020 = sext i8 %v6_6020 to i64
  store i64 %v7_6020, i64* @rcx, align 8
  %v6_6026 = icmp slt i8 %v6_6020, 0
  br i1 %v6_6026, label %dec_label_pc_6070, label %dec_label_pc_602a

dec_label_pc_602a:                                ; preds = %dec_label_pc_601d
  %v1_602a = add i64 %v0_602a, 2
  store i64 %v1_602a, i64* @rax, align 8
  %v1_602d = add i32 %v3_600d, 1
  br label %dec_label_pc_6052

dec_label_pc_6038:                                ; preds = %dec_label_pc_6052
  %v14_6038 = icmp eq i32 %v1_602d, %v3_6052
  br i1 %v14_6038, label %dec_label_pc_60f9, label %dec_label_pc_6043

dec_label_pc_6043:                                ; preds = %dec_label_pc_6038
  store i64 %v1_6055, i64* @rcx, align 8
  %v2_6046 = add i64 %v0_6046, 1
  %v17_6046 = and i64 %v2_6046, 4294967295
  store i64 %v17_6046, i64* @rax, align 8
  %v3_6049 = add i64 %v1_6055, %v1_6011
  %v4_6049 = inttoptr i64 %v3_6049 to i8*
  %v5_6049 = load i8, i8* %v4_6049, align 1
  %v6_6049 = sext i8 %v5_6049 to i64
  store i64 %v6_6049, i64* @rcx, align 8
  %v6_604e = icmp slt i8 %v5_6049, 0
  br i1 %v6_604e, label %dec_label_pc_6070, label %dec_label_pc_6052

dec_label_pc_6052:                                ; preds = %dec_label_pc_6043, %dec_label_pc_602a
  %v0_6046 = phi i64 [ %v17_6046, %dec_label_pc_6043 ], [ %v1_602a, %dec_label_pc_602a ]
  %v3_6052 = trunc i64 %v0_6046 to i32
  %v14_6052 = icmp eq i32 %v1_5ffe, %v3_6052
  %v1_6055 = add i64 %v0_6046, -1
  store i64 %v1_6055, i64* @rdx, align 8
  %v1_6058 = icmp eq i1 %v14_6052, false
  br i1 %v1_6058, label %dec_label_pc_6038, label %dec_label_pc_605f

dec_label_pc_605f:                                ; preds = %dec_label_pc_6002, %dec_label_pc_6052, %dec_label_pc_60f2
  %storemerge = phi i64 [ 0, %dec_label_pc_60f2 ], [ 1, %dec_label_pc_6052 ], [ 1, %dec_label_pc_6002 ]
  store i64 %storemerge, i64* @rax, align 8
  store i64 %v0_5ff1, i64* @rbx, align 8
  store i64 %v0_5ff0, i64* %rbp.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_6070:                                ; preds = %dec_label_pc_6043, %dec_label_pc_601d
  %v0_6082 = phi i64 [ %v0_602a, %dec_label_pc_601d ], [ %v1_6055, %dec_label_pc_6043 ]
  %v1_608c = phi i64 [ %v1_600a, %dec_label_pc_601d ], [ %v0_6046, %dec_label_pc_6043 ]
  %v0_60a8 = phi i64 [ %v7_6020, %dec_label_pc_601d ], [ %v6_6049, %dec_label_pc_6043 ]
  %v1_6072 = trunc i64 %v0_60a8 to i32
  %v2_6072 = and i32 %v1_6072, 224
  %v9_6072 = zext i32 %v2_6072 to i64
  store i64 %v9_6072, i64* @rax, align 8
  %v10_6077 = icmp eq i32 %v2_6072, 192
  %v1_607c = icmp eq i1 %v10_6077, false
  br i1 %v1_607c, label %dec_label_pc_60a8, label %dec_label_pc_607e

dec_label_pc_607e:                                ; preds = %dec_label_pc_6070
  %v7_6080 = icmp sgt i64 %v20_5ffc, %v1_608c
  br i1 %v7_6080, label %dec_label_pc_6082, label %dec_label_pc_60a8

dec_label_pc_6082:                                ; preds = %dec_label_pc_607e
  %v2_6082 = add i64 %v0_6082, 2
  %v17_6082 = and i64 %v2_6082, 4294967295
  store i64 %v17_6082, i64* @rdx, align 8
  %v4_608c = add i64 %v1_608c, %v1_6011
  %v5_608c = inttoptr i64 %v4_608c to i8*
  %v6_608c = load i8, i8* %v5_608c, align 1
  %v1_60928 = zext i8 %v6_608c to i32
  %v2_6092 = and i32 %v1_60928, 192
  %v2_6097 = add nsw i32 %v2_6092, -128
  %v10_6097 = icmp eq i32 %v2_6097, 0
  %v16_6097 = zext i32 %v2_6097 to i64
  store i64 %v16_6097, i64* @rax, align 8
  br i1 %v10_6097, label %dec_label_pc_6002, label %dec_label_pc_60a0

dec_label_pc_60a0:                                ; preds = %dec_label_pc_6082
  br label %dec_label_pc_60a8

dec_label_pc_60a8:                                ; preds = %dec_label_pc_607e, %dec_label_pc_60a0, %dec_label_pc_6070
  %v0_60d7 = phi i64 [ %v1_608c, %dec_label_pc_607e ], [ %v17_6082, %dec_label_pc_60a0 ], [ %v1_608c, %dec_label_pc_6070 ]
  %v2_60a8 = and i32 %v1_6072, 240
  %v9_60a8 = zext i32 %v2_60a8 to i64
  store i64 %v9_60a8, i64* @rcx, align 8
  %v10_60ae = icmp eq i32 %v2_60a8, 224
  %v1_60b4 = icmp eq i1 %v10_60ae, false
  br i1 %v1_60b4, label %dec_label_pc_60f2, label %dec_label_pc_60b6

dec_label_pc_60b6:                                ; preds = %dec_label_pc_60a8
  %v1_60b6 = add i64 %v0_60d7, 1
  store i64 %v1_60b6, i64* @rax, align 8
  %v7_60bb = icmp sgt i64 %v20_5ffc, %v1_60b6
  br i1 %v7_60bb, label %dec_label_pc_60bd, label %dec_label_pc_60f2

dec_label_pc_60bd:                                ; preds = %dec_label_pc_60b6
  store i64 %v0_60d7, i64* @rdx, align 8
  %v4_60c4 = add i64 %v1_6011, %v0_60d7
  %v5_60c4 = inttoptr i64 %v4_60c4 to i8*
  %v6_60c4 = load i8, i8* %v5_60c4, align 1
  %v1_60ca11 = zext i8 %v6_60c4 to i32
  %v2_60ca = and i32 %v1_60ca11, 192
  %v2_60d0 = add nsw i32 %v2_60ca, -128
  %v10_60d0 = icmp eq i32 %v2_60d0, 0
  %v16_60d0 = zext i32 %v2_60d0 to i64
  store i64 %v16_60d0, i64* @rdx, align 8
  %v1_60d3 = icmp eq i1 %v10_60d0, false
  br i1 %v1_60d3, label %dec_label_pc_60f2, label %dec_label_pc_60d5

dec_label_pc_60d5:                                ; preds = %dec_label_pc_60bd
  %v1_60d7 = add i64 %v0_60d7, 2
  store i64 %v1_60d7, i64* @rdx, align 8
  %v4_60de = add i64 %v1_60b6, %v1_6011
  %v5_60de = inttoptr i64 %v4_60de to i8*
  %v6_60de = load i8, i8* %v5_60de, align 1
  %v1_60e413 = zext i8 %v6_60de to i32
  %v2_60e4 = and i32 %v1_60e413, 192
  %v2_60e9 = add nsw i32 %v2_60e4, -128
  %v10_60e9 = icmp eq i32 %v2_60e9, 0
  %v16_60e9 = zext i32 %v2_60e9 to i64
  store i64 %v16_60e9, i64* @rax, align 8
  br i1 %v10_60e9, label %dec_label_pc_6002, label %dec_label_pc_60f2

dec_label_pc_60f2:                                ; preds = %dec_label_pc_60b6, %dec_label_pc_60d5, %dec_label_pc_60bd, %dec_label_pc_60a8
  br label %dec_label_pc_605f

dec_label_pc_60f9:                                ; preds = %dec_label_pc_6006, %dec_label_pc_6038
  %v0_60f9 = phi i64 [ %v1_6055, %dec_label_pc_6038 ], [ %v0_602a, %dec_label_pc_6006 ]
  store i64 %v0_60f9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString8scanlongEJdiii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_6120:
  %r10.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  %tmp284 = call i128 @__decompiler_undefined_function_1()
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6120 = load i64, i64* %rbp.global-to-local, align 8
  %v0_6121 = load i64, i64* @rbx, align 8
  %v0_6126 = load i64, i64* @rdi, align 8
  %v1_6126 = add i64 %v0_6126, 8
  %v2_6126 = inttoptr i64 %v1_6126 to i64*
  %v3_6126 = load i64, i64* %v2_6126, align 8
  store i64 %v3_6126, i64* @rax, align 8
  %v1_612a = add i64 %v3_6126, 8
  %v2_612a = inttoptr i64 %v1_612a to i32*
  %v3_612a = load i32, i32* %v2_612a, align 4
  %v4_612a = zext i32 %v3_612a to i64
  store i64 %v4_612a, i64* %r9.global-to-local, align 8
  %v0_612e = load i64, i64* @rdx, align 8
  %v1_612e = trunc i64 %v0_612e to i32
  %v9_612e = icmp ult i32 %v1_612e, %v3_612a
  %v1_6131 = icmp eq i1 %v9_612e, false
  br i1 %v1_6131, label %dec_label_pc_625b, label %dec_label_pc_6137

dec_label_pc_6137:                                ; preds = %dec_label_pc_6120
  store i64 %v0_612e, i64* @rdi, align 8
  %v1_613a = add i64 %v3_6126, 12
  store i64 %v1_613a, i64* %r10.global-to-local, align 8
  %v4_613e = add i64 %v0_612e, %v1_613a
  %v5_613e = inttoptr i64 %v4_613e to i8*
  %v6_613e = load i8, i8* %v5_613e, align 1
  %v16_613e = icmp eq i8 %v6_613e, 45
  br i1 %v16_613e, label %dec_label_pc_61c0, label %dec_label_pc_6145

dec_label_pc_6145:                                ; preds = %dec_label_pc_6137
  %v2_6145 = load i64, i64* @rcx, align 8
  store i64 0, i64* @r11, align 8
  store i64 0, i64* @rax, align 8
  %v0_6152 = load i64, i64* %rsi.global-to-local, align 8
  %v1_6152 = trunc i64 %v0_6152 to i32
  %v8_6155 = icmp sgt i32 %v1_6152, 10
  br i1 %v8_6155, label %dec_label_pc_615b, label %dec_label_pc_61e8

dec_label_pc_615b:                                ; preds = %dec_label_pc_61d4, %dec_label_pc_6145
  %v0_6160.pre = phi i64 [ %v1_613a, %dec_label_pc_6145 ], [ %v0_6160.pre.pre, %dec_label_pc_61d4 ]
  %v2_61ad44 = phi i64 [ %v4_612a, %dec_label_pc_6145 ], [ %v2_61cb, %dec_label_pc_61d4 ]
  %v2_61a539 = phi i64 [ %v2_6145, %dec_label_pc_6145 ], [ %v2_61c7, %dec_label_pc_61d4 ]
  %v1_616032 = phi i64 [ %v0_612e, %dec_label_pc_6145 ], [ %v0_61c7, %dec_label_pc_61d4 ]
  %v0_615b = phi i64 [ %v0_6152, %dec_label_pc_6145 ], [ %v0_61d6, %dec_label_pc_61d4 ]
  %.0 = phi i128 [ %tmp284, %dec_label_pc_6145 ], [ %v2_61c3, %dec_label_pc_61d4 ]
  %v0_623842 = phi i32 [ 0, %dec_label_pc_6145 ], [ 1, %dec_label_pc_61d4 ]
  store i64 %v0_615b, i64* %rbp.global-to-local, align 8
  %v3_61ad = trunc i64 %v2_61ad44 to i32
  br label %dec_label_pc_6160

dec_label_pc_6160:                                ; preds = %dec_label_pc_61b6, %dec_label_pc_615b
  %v0_6196 = phi i64 [ %v2_619d, %dec_label_pc_61b6 ], [ 0, %dec_label_pc_615b ]
  %v0_61a2 = phi i64 [ %v17_61a2, %dec_label_pc_61b6 ], [ %v1_616032, %dec_label_pc_615b ]
  %v3_6160 = add i64 %v0_61a2, %v0_6160.pre
  %v4_6160 = inttoptr i64 %v3_6160 to i8*
  %v5_6160 = load i8, i8* %v4_6160, align 1
  %v6_6160 = sext i8 %v5_6160 to i64
  store i64 87, i64* @rdi, align 8
  store i64 %v6_6160, i64* @rbx, align 8
  %v9_6171 = icmp sgt i8 %v5_6160, 47
  br i1 %v9_6171, label %dec_label_pc_6173, label %dec_label_pc_618c

dec_label_pc_6173:                                ; preds = %dec_label_pc_6160
  store i64 48, i64* @rdi, align 8
  %v9_617c = icmp sgt i8 %v5_6160, 57
  br i1 %v9_617c, label %dec_label_pc_617e, label %dec_label_pc_618c

dec_label_pc_617e:                                ; preds = %dec_label_pc_6173
  %v1_617e = sext i8 %v5_6160 to i32
  %v2_617e = add nsw i32 %v1_617e, -65
  %v13_617e = trunc i32 %v2_617e to i8
  %v17_617e = zext i32 %v2_617e to i64
  store i64 %v17_617e, i64* @rbx, align 8
  %v6_6181 = icmp ult i8 %v13_617e, 26
  %v17_6189 = select i1 %v6_6181, i64 55, i64 87
  store i64 %v17_6189, i64* @rdi, align 8
  br label %dec_label_pc_618c

dec_label_pc_618c:                                ; preds = %dec_label_pc_6173, %dec_label_pc_6160, %dec_label_pc_617e
  %v2_618c = phi i64 [ 48, %dec_label_pc_6173 ], [ 87, %dec_label_pc_6160 ], [ %v17_6189, %dec_label_pc_617e ]
  %v1_618c = sext i8 %v5_6160 to i32
  %v3_618c = trunc i64 %v2_618c to i32
  %v4_618c = sub nsw i32 %v1_618c, %v3_618c
  %v15_618c = icmp slt i32 %v4_618c, 0
  %v20_618c = zext i32 %v4_618c to i64
  br i1 %v15_618c, label %dec_label_pc_620c, label %dec_label_pc_6191

dec_label_pc_6191:                                ; preds = %dec_label_pc_618c
  %v7_6194 = icmp sgt i64 %v0_615b, %v20_618c
  br i1 %v7_6194, label %dec_label_pc_6196, label %dec_label_pc_620c

dec_label_pc_6196:                                ; preds = %dec_label_pc_6191
  %v4_6196 = mul i64 %v0_6196, %v0_615b
  %v2_619d = add i64 %v20_618c, %v4_6196
  %v13_619d = icmp slt i64 %v2_619d, 0
  store i64 %v2_619d, i64* @rax, align 8
  br i1 %v13_619d, label %dec_label_pc_620c, label %dec_label_pc_61a2

dec_label_pc_61a2:                                ; preds = %dec_label_pc_6196
  %v1_61a2 = trunc i64 %v0_61a2 to i32
  %v2_61a2 = add i32 %v1_61a2, 1
  %v17_61a2 = zext i32 %v2_61a2 to i64
  store i64 %v17_61a2, i64* @rdx, align 8
  %v5_61a7 = icmp slt i64 %v17_61a2, %v2_61a539
  br i1 %v5_61a7, label %dec_label_pc_61ad, label %dec_label_pc_6238

dec_label_pc_61ad:                                ; preds = %dec_label_pc_61a2
  %v9_61ad = icmp ult i32 %v2_61a2, %v3_61ad
  %v1_61b0 = icmp eq i1 %v9_61ad, false
  br i1 %v1_61b0, label %dec_label_pc_625b, label %dec_label_pc_61b6

dec_label_pc_61b6:                                ; preds = %dec_label_pc_61ad
  store i64 %v17_61a2, i64* @rdi, align 8
  br label %dec_label_pc_6160

dec_label_pc_61c0:                                ; preds = %dec_label_pc_6137
  %v2_61c0 = add i64 %v0_612e, 1
  %v17_61c0 = and i64 %v2_61c0, 4294967295
  store i64 %v17_61c0, i64* @rdx, align 8
  %v0_61c3 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_61c3 = call i128 @__asm_pxor(i128 %v0_61c3, i128 %v0_61c3)
  store i128 %v2_61c3, i128* %xmm0.global-to-local, align 8
  %v0_61c7 = load i64, i64* @rdx, align 8
  %v2_61c7 = load i64, i64* @rcx, align 8
  %v5_61c9 = icmp slt i64 %v0_61c7, %v2_61c7
  br i1 %v5_61c9, label %dec_label_pc_61cb, label %dec_label_pc_6214

dec_label_pc_61cb:                                ; preds = %dec_label_pc_61c0
  %v1_61c7 = trunc i64 %v0_61c7 to i32
  %v2_61cb = load i64, i64* %r9.global-to-local, align 8
  %v3_61cb = trunc i64 %v2_61cb to i32
  %v9_61cb = icmp ult i32 %v1_61c7, %v3_61cb
  %v1_61ce = icmp eq i1 %v9_61cb, false
  br i1 %v1_61ce, label %dec_label_pc_625b, label %dec_label_pc_61d4

dec_label_pc_61d4:                                ; preds = %dec_label_pc_61cb
  store i64 0, i64* @rax, align 8
  %v0_61d6 = load i64, i64* %rsi.global-to-local, align 8
  %v1_61d6 = trunc i64 %v0_61d6 to i32
  store i64 1, i64* @r11, align 8
  store i64 %v0_61c7, i64* @rdi, align 8
  %v9_61e2 = icmp sgt i32 %v1_61d6, 10
  %v0_6160.pre.pre = load i64, i64* %r10.global-to-local, align 8
  br i1 %v9_61e2, label %dec_label_pc_615b, label %dec_label_pc_61e8

dec_label_pc_61e8:                                ; preds = %dec_label_pc_61d4, %dec_label_pc_6145
  %v0_61f0.pre = phi i64 [ %v1_613a, %dec_label_pc_6145 ], [ %v0_6160.pre.pre, %dec_label_pc_61d4 ]
  %v0_622728 = phi i64 [ %v4_612a, %dec_label_pc_6145 ], [ %v2_61cb, %dec_label_pc_61d4 ]
  %v0_622326 = phi i64 [ %v2_6145, %dec_label_pc_6145 ], [ %v2_61c7, %dec_label_pc_61d4 ]
  %v1_61f020 = phi i64 [ %v0_612e, %dec_label_pc_6145 ], [ %v0_61c7, %dec_label_pc_61d4 ]
  %v0_61e8 = phi i64 [ %v0_6152, %dec_label_pc_6145 ], [ %v0_61d6, %dec_label_pc_61d4 ]
  %.1 = phi i128 [ %tmp284, %dec_label_pc_6145 ], [ %v2_61c3, %dec_label_pc_61d4 ]
  %v0_623841 = phi i32 [ 0, %dec_label_pc_6145 ], [ 1, %dec_label_pc_61d4 ]
  store i64 %v0_61e8, i64* @rbx, align 8
  %v1_6227 = trunc i64 %v0_622728 to i32
  br label %dec_label_pc_61f0

dec_label_pc_61f0:                                ; preds = %dec_label_pc_622c, %dec_label_pc_61e8
  %v0_6200 = phi i64 [ %v2_6207, %dec_label_pc_622c ], [ 0, %dec_label_pc_61e8 ]
  %v0_6220 = phi i64 [ %v17_6220, %dec_label_pc_622c ], [ %v1_61f020, %dec_label_pc_61e8 ]
  %v3_61f0 = add i64 %v0_6220, %v0_61f0.pre
  %v4_61f0 = inttoptr i64 %v3_61f0 to i8*
  %v5_61f0 = load i8, i8* %v4_61f0, align 1
  %v1_61f5 = sext i8 %v5_61f0 to i64
  %v2_61f5 = add nsw i64 %v1_61f5, 4294967248
  %v11_61f5 = icmp slt i8 %v5_61f0, 48
  %v16_61f5 = and i64 %v2_61f5, 4294967295
  br i1 %v11_61f5, label %dec_label_pc_620c, label %dec_label_pc_61fb

dec_label_pc_61fb:                                ; preds = %dec_label_pc_61f0
  %v7_61fe = icmp sgt i64 %v0_61e8, %v16_61f5
  br i1 %v7_61fe, label %dec_label_pc_6200, label %dec_label_pc_620c

dec_label_pc_6200:                                ; preds = %dec_label_pc_61fb
  %v4_6200 = mul i64 %v0_6200, %v0_61e8
  %v2_6207 = add i64 %v16_61f5, %v4_6200
  %v13_6207 = icmp slt i64 %v2_6207, 0
  store i64 %v2_6207, i64* @rax, align 8
  %v1_620a = icmp eq i1 %v13_6207, false
  br i1 %v1_620a, label %dec_label_pc_6220, label %dec_label_pc_620c

dec_label_pc_620c:                                ; preds = %dec_label_pc_61fb, %dec_label_pc_6200, %dec_label_pc_61f0, %dec_label_pc_6191, %dec_label_pc_6196, %dec_label_pc_618c
  %v0_620c = load i64, i64* inttoptr (i64 25108 to i64*), align 8
  %v1_620c = call i128 @__asm_movsd(i64 %v0_620c)
  store i128 %v1_620c, i128* %xmm0.global-to-local, align 8
  br label %dec_label_pc_6214

dec_label_pc_6214:                                ; preds = %dec_label_pc_61c0, %dec_label_pc_620c
  %v2_620c = load i64, i64* @rax, align 8
  ret i64 %v2_620c

dec_label_pc_6220:                                ; preds = %dec_label_pc_6200
  %v1_6220 = trunc i64 %v0_6220 to i32
  %v2_6220 = add i32 %v1_6220, 1
  %v17_6220 = zext i32 %v2_6220 to i64
  store i64 %v17_6220, i64* @rdx, align 8
  %v7_6225 = icmp sgt i64 %v0_622326, %v17_6220
  br i1 %v7_6225, label %dec_label_pc_6227, label %dec_label_pc_6238

dec_label_pc_6227:                                ; preds = %dec_label_pc_6220
  %tmp326 = icmp ugt i32 %v1_6227, %v2_6220
  br i1 %tmp326, label %dec_label_pc_622c, label %dec_label_pc_625b

dec_label_pc_622c:                                ; preds = %dec_label_pc_6227
  store i64 %v17_6220, i64* @rdi, align 8
  br label %dec_label_pc_61f0

dec_label_pc_6238:                                ; preds = %dec_label_pc_6220, %dec_label_pc_61a2
  %v0_6238 = phi i32 [ %v0_623842, %dec_label_pc_61a2 ], [ %v0_623841, %dec_label_pc_6220 ]
  %.2 = phi i128 [ %.0, %dec_label_pc_61a2 ], [ %.1, %dec_label_pc_6220 ]
  %v5_6238 = icmp eq i32 %v0_6238, 0
  %v1_623b = icmp eq i1 %v5_6238, false
  %v2_624d = call i128 @__asm_pxor(i128 %.2, i128 %.2)
  store i128 %v2_624d, i128* %xmm0.global-to-local, align 8
  %v0_6251 = load i64, i64* @rax, align 8
  br i1 %v1_623b, label %dec_label_pc_624d, label %dec_label_pc_623d

dec_label_pc_623d:                                ; preds = %dec_label_pc_6238
  %v1_6241 = call i128 @__asm_cvtsi2sd(i64 %v0_6251)
  br label %dec_label_pc_6246

dec_label_pc_6246:                                ; preds = %dec_label_pc_624d, %dec_label_pc_623d
  %storemerge = phi i128 [ %v1_6254, %dec_label_pc_624d ], [ %v1_6241, %dec_label_pc_623d ]
  store i128 %storemerge, i128* %xmm0.global-to-local, align 8
  store i64 %v0_6121, i64* @rbx, align 8
  store i64 %v0_6120, i64* %rbp.global-to-local, align 8
  %v0_624c = load i64, i64* @rax, align 8
  ret i64 %v0_624c

dec_label_pc_624d:                                ; preds = %dec_label_pc_6238
  %v1_6251 = sub i64 0, %v0_6251
  store i64 %v1_6251, i64* @rax, align 8
  %v1_6254 = call i128 @__asm_cvtsi2sd(i64 %v1_6251)
  br label %dec_label_pc_6246

dec_label_pc_625b:                                ; preds = %dec_label_pc_6227, %dec_label_pc_61ad, %dec_label_pc_61cb, %dec_label_pc_6120
  %v0_625b = phi i64 [ %v0_61c7, %dec_label_pc_61cb ], [ %v0_612e, %dec_label_pc_6120 ], [ %v17_61a2, %dec_label_pc_61ad ], [ %v17_6220, %dec_label_pc_6227 ]
  store i64 %v0_625b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString13printToStreamEJvPN4java2io11PrintStreamE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6270:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6270 = load i64, i64* %r13.global-to-local, align 8
  %v0_6272 = load i64, i64* %r12.global-to-local, align 8
  %v0_6274 = load i64, i64* %rbp.global-to-local, align 8
  %v0_6275 = load i64, i64* @rbx, align 8
  %v0_627a = load i64, i64* @rdi, align 8
  %v1_627a = add i64 %v0_627a, 20
  %v2_627a = inttoptr i64 %v1_627a to i32*
  %v3_627a = load i32, i32* %v2_627a, align 4
  %v4_627a = zext i32 %v3_627a to i64
  store i64 %v4_627a, i64* %rbp.global-to-local, align 8
  %tmp253 = icmp slt i32 %v3_627a, 1
  br i1 %tmp253, label %dec_label_pc_6270.dec_label_pc_62d3_crit_edge, label %dec_label_pc_6281

dec_label_pc_6270.dec_label_pc_62d3_crit_edge:    ; preds = %dec_label_pc_6270
  %v0_62dd.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_62d3

dec_label_pc_6281:                                ; preds = %dec_label_pc_6270
  %v1_6281 = add i64 %v0_627a, 8
  %v2_6281 = inttoptr i64 %v1_6281 to i64*
  %v3_6281 = load i64, i64* %v2_6281, align 8
  store i64 %v3_6281, i64* @rdx, align 8
  %v1_6285 = add i64 %v0_627a, 16
  %v2_6285 = inttoptr i64 %v1_6285 to i32*
  %v3_6285 = load i32, i32* %v2_6285, align 4
  %v4_6285 = zext i32 %v3_6285 to i64
  store i64 %v4_6285, i64* @rax, align 8
  %v0_6288 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_6288, i64* %r13.global-to-local, align 8
  store i64 %v0_627a, i64* %r12.global-to-local, align 8
  %v3_628e = add i64 %v3_6281, 8
  %v4_628e = inttoptr i64 %v3_628e to i32*
  %v5_628e = load i32, i32* %v4_628e, align 4
  %v11_628e = icmp ult i32 %v3_6285, %v5_628e
  %v1_6291 = add i64 %v3_6281, 12
  store i64 %v1_6291, i64* @rcx, align 8
  %v1_6295 = icmp eq i1 %v11_628e, false
  br i1 %v1_6295, label %dec_label_pc_62de, label %dec_label_pc_6297

dec_label_pc_6297:                                ; preds = %dec_label_pc_6281
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_62b5

dec_label_pc_62a0:                                ; preds = %dec_label_pc_62b5
  %v3_62a0 = load i64, i64* %v2_6281, align 8
  store i64 %v3_62a0, i64* @rdx, align 8
  %v3_62a5 = load i32, i32* %v2_6285, align 4
  %v4_62aa = add i32 %v3_62a5, %v2_62bb
  %v20_62aa = zext i32 %v4_62aa to i64
  store i64 %v20_62aa, i64* @rax, align 8
  %v3_62ac = add i64 %v3_62a0, 8
  %v4_62ac = inttoptr i64 %v3_62ac to i32*
  %v5_62ac = load i32, i32* %v4_62ac, align 4
  %v11_62ac = icmp ult i32 %v4_62aa, %v5_62ac
  %v1_62af = add i64 %v3_62a0, 12
  store i64 %v1_62af, i64* @rcx, align 8
  %v1_62b3 = icmp eq i1 %v11_62ac, false
  br i1 %v1_62b3, label %dec_label_pc_62de, label %dec_label_pc_62b5

dec_label_pc_62b5:                                ; preds = %dec_label_pc_62a0, %dec_label_pc_6297
  %v1_62be = phi i64 [ %v20_62aa, %dec_label_pc_62a0 ], [ %v4_6285, %dec_label_pc_6297 ]
  %v0_62be = phi i64 [ %v1_62af, %dec_label_pc_62a0 ], [ %v1_6291, %dec_label_pc_6297 ]
  %v0_62bb = phi i32 [ %v2_62bb, %dec_label_pc_62a0 ], [ 0, %dec_label_pc_6297 ]
  %v7_62be = phi i64 [ %v9_62be, %dec_label_pc_62a0 ], [ %v0_6288, %dec_label_pc_6297 ]
  store i64 %v7_62be, i64* @rdx, align 8
  %v2_62bb = add i32 %v0_62bb, 1
  %v17_62bb = zext i32 %v2_62bb to i64
  store i64 %v17_62bb, i64* @rbx, align 8
  %v3_62be = add i64 %v0_62be, %v1_62be
  %v4_62be = inttoptr i64 %v3_62be to i8*
  %v5_62be = load i8, i8* %v4_62be, align 1
  %v6_62be = sext i8 %v5_62be to i64
  %v8_62be = and i64 %v7_62be, -65536
  %v9_62be = or i64 %v6_62be, %v8_62be
  store i64 %v0_6288, i64* @rdi, align 8
  store i64 %v9_62be, i64* %rsi.global-to-local, align 8
  %v14_62cf = icmp eq i32 %v3_627a, %v2_62bb
  %v1_62d1 = icmp eq i1 %v14_62cf, false
  br i1 %v1_62d1, label %dec_label_pc_62a0, label %dec_label_pc_62d3

dec_label_pc_62d3:                                ; preds = %dec_label_pc_62b5, %dec_label_pc_6270.dec_label_pc_62d3_crit_edge
  %v0_62dd = phi i64 [ %v0_62dd.pre, %dec_label_pc_6270.dec_label_pc_62d3_crit_edge ], [ %v1_62be, %dec_label_pc_62b5 ]
  store i64 %v0_6275, i64* @rbx, align 8
  store i64 %v0_6274, i64* %rbp.global-to-local, align 8
  store i64 %v0_6272, i64* %r12.global-to-local, align 8
  store i64 %v0_6270, i64* %r13.global-to-local, align 8
  ret i64 %v0_62dd

dec_label_pc_62de:                                ; preds = %dec_label_pc_62a0, %dec_label_pc_6281
  %v0_62de = phi i64 [ %v4_6285, %dec_label_pc_6281 ], [ %v20_62aa, %dec_label_pc_62a0 ]
  store i64 %v0_62de, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable8arraygetEJPNS1_8LuaValueEP6JArrayIS4_Ei(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_62f0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_62f0 = load i64, i64* @rdx, align 8
  %v1_62f0 = trunc i64 %v0_62f0 to i32
  %v3_62f0 = add i64 %arg2, 8
  %v4_62f0 = inttoptr i64 %v3_62f0 to i32*
  %v5_62f0 = load i32, i32* %v4_62f0, align 4
  %v11_62f0 = icmp ult i32 %v1_62f0, %v5_62f0
  %v1_62f3 = icmp eq i1 %v11_62f0, false
  br i1 %v1_62f3, label %dec_label_pc_6301, label %dec_label_pc_62f5

dec_label_pc_62f5:                                ; preds = %dec_label_pc_62f0
  %v1_62f5 = add i64 %arg2, 16
  store i64 %v1_62f5, i64* @rax, align 8
  %v2_62fc = mul i64 %v0_62f0, 8
  %v3_62fc = add i64 %v1_62f5, %v2_62fc
  %v4_62fc = inttoptr i64 %v3_62fc to i64*
  %v5_62fc = load i64, i64* %v4_62fc, align 8
  store i64 %v5_62fc, i64* @rax, align 8
  ret i64 %v5_62fc

dec_label_pc_6301:                                ; preds = %dec_label_pc_62f0
  store i64 %v0_62f0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27UpValue9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_6310:
  store i64 %arg1, i64* @rdi, align 8
  %v0_6314 = load i64, i64* @rdi, align 8
  %v1_6314 = add i64 %v0_6314, 8
  %v2_6314 = inttoptr i64 %v1_6314 to i64*
  %v3_6314 = load i64, i64* %v2_6314, align 8
  store i64 %v3_6314, i64* @rax, align 8
  %v1_6318 = add i64 %v0_6314, 16
  %v2_6318 = inttoptr i64 %v1_6318 to i32*
  %v3_6318 = load i32, i32* %v2_6318, align 4
  %v4_6318 = sext i32 %v3_6318 to i64
  store i64 %v4_6318, i64* @rdi, align 8
  %v3_631c = add i64 %v3_6314, 8
  %v4_631c = inttoptr i64 %v3_631c to i32*
  %v5_631c = load i32, i32* %v4_631c, align 4
  %v11_631c = icmp ult i32 %v3_6318, %v5_631c
  %v1_631f = icmp eq i1 %v11_631c, false
  br i1 %v1_631f, label %dec_label_pc_6337, label %dec_label_pc_6321

dec_label_pc_6321:                                ; preds = %dec_label_pc_6310
  %v1_6321 = add i64 %v3_6314, 16
  store i64 %v1_6321, i64* @rdx, align 8
  %v2_6325 = mul nsw i64 %v4_6318, 8
  %v3_6325 = add i64 %v2_6325, %v1_6321
  %v4_6325 = inttoptr i64 %v3_6325 to i64*
  %v5_6325 = load i64, i64* %v4_6325, align 8
  store i64 %v5_6325, i64* @rdi, align 8
  %v1_6329 = inttoptr i64 %v5_6325 to i64*
  %v2_6329 = load i64, i64* %v1_6329, align 8
  store i64 %v2_6329, i64* @rax, align 8
  ret i64 %v2_6329

dec_label_pc_6337:                                ; preds = %dec_label_pc_6310
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27UpValue8getValueEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_6340:
  store i64 %arg1, i64* @rdi, align 8
  %v0_6340 = load i64, i64* @rdi, align 8
  %v1_6340 = add i64 %v0_6340, 8
  %v2_6340 = inttoptr i64 %v1_6340 to i64*
  %v3_6340 = load i64, i64* %v2_6340, align 8
  store i64 %v3_6340, i64* @rax, align 8
  %v1_6344 = add i64 %v0_6340, 16
  %v2_6344 = inttoptr i64 %v1_6344 to i32*
  %v3_6344 = load i32, i32* %v2_6344, align 4
  %v4_6344 = sext i32 %v3_6344 to i64
  store i64 %v4_6344, i64* @rdi, align 8
  %v3_6348 = add i64 %v3_6340, 8
  %v4_6348 = inttoptr i64 %v3_6348 to i32*
  %v5_6348 = load i32, i32* %v4_6348, align 4
  %v11_6348 = icmp ult i32 %v3_6344, %v5_6348
  %v1_634b = icmp eq i1 %v11_6348, false
  br i1 %v1_634b, label %dec_label_pc_6356, label %dec_label_pc_634d

dec_label_pc_634d:                                ; preds = %dec_label_pc_6340
  %v1_634d = add i64 %v3_6340, 16
  store i64 %v1_634d, i64* @rdx, align 8
  %v2_6351 = mul nsw i64 %v4_6344, 8
  %v3_6351 = add i64 %v2_6351, %v1_634d
  %v4_6351 = inttoptr i64 %v3_6351 to i64*
  %v5_6351 = load i64, i64* %v4_6351, align 8
  store i64 %v5_6351, i64* @rax, align 8
  ret i64 %v5_6351

dec_label_pc_6356:                                ; preds = %dec_label_pc_6340
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState8dumpCodeEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6370:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6370 = load i64, i64* %r14.global-to-local, align 8
  %v0_6372 = load i64, i64* %r13.global-to-local, align 8
  %v0_6374 = load i64, i64* %r12.global-to-local, align 8
  %v0_6376 = load i64, i64* %rbp.global-to-local, align 8
  %v0_6377 = load i64, i64* @rdi, align 8
  store i64 %v0_6377, i64* %r12.global-to-local, align 8
  %v0_637a = load i64, i64* @rbx, align 8
  %v0_637b = load i64, i64* %rsi.global-to-local, align 8
  %v1_637b = add i64 %v0_637b, 16
  %v2_637b = inttoptr i64 %v1_637b to i64*
  %v3_637b = load i64, i64* %v2_637b, align 8
  store i64 %v3_637b, i64* %r14.global-to-local, align 8
  store i64 %v0_6377, i64* @rax, align 8
  %v1_6382 = add i64 %v3_637b, 8
  %v2_6382 = inttoptr i64 %v1_6382 to i32*
  %v3_6382 = load i32, i32* %v2_6382, align 4
  %v4_6382 = zext i32 %v3_6382 to i64
  store i64 %v4_6382, i64* %r13.global-to-local, align 8
  store i64 %v4_6382, i64* %rsi.global-to-local, align 8
  %tmp256 = icmp slt i32 %v3_6382, 1
  br i1 %tmp256, label %dec_label_pc_63c7, label %dec_label_pc_6391

dec_label_pc_6391:                                ; preds = %dec_label_pc_6370
  %v3_6391 = load i32, i32* %v2_6382, align 4
  %v4_6391 = zext i32 %v3_6391 to i64
  store i64 %v4_6391, i64* @rbx, align 8
  %v1_6395 = add i64 %v3_637b, 12
  store i64 %v1_6395, i64* %rbp.global-to-local, align 8
  %v5_6399 = icmp eq i32 %v3_6391, 0
  br i1 %v5_6399, label %dec_label_pc_63d0, label %dec_label_pc_639d

dec_label_pc_639d:                                ; preds = %dec_label_pc_6391
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_63b2

dec_label_pc_63a8:                                ; preds = %dec_label_pc_63b2
  %v1_63a8 = add i64 %v0_63a8, 4
  store i64 %v1_63a8, i64* %rbp.global-to-local, align 8
  %v5_63ac = load i32, i32* %v2_6382, align 4
  %v11_63ac = icmp ult i32 %v3_63c2, %v5_63ac
  %v1_63b0 = icmp eq i1 %v11_63ac, false
  br i1 %v1_63b0, label %dec_label_pc_63d0.loopexit, label %dec_label_pc_63b2

dec_label_pc_63b2:                                ; preds = %dec_label_pc_63a8, %dec_label_pc_639d
  %v0_63a8 = phi i64 [ %v1_63a8, %dec_label_pc_63a8 ], [ %v1_6395, %dec_label_pc_639d ]
  %v0_63b6 = phi i64 [ %v17_63b6, %dec_label_pc_63a8 ], [ 0, %dec_label_pc_639d ]
  store i64 %v0_6377, i64* @rax, align 8
  %v2_63b6 = add nuw nsw i64 %v0_63b6, 1
  %v17_63b6 = and i64 %v2_63b6, 4294967295
  store i64 %v17_63b6, i64* @rbx, align 8
  %v1_63b9 = inttoptr i64 %v0_63a8 to i32*
  %v2_63b9 = load i32, i32* %v1_63b9, align 4
  %v3_63b9 = zext i32 %v2_63b9 to i64
  store i64 %v3_63b9, i64* %rsi.global-to-local, align 8
  %v3_63c2 = trunc i64 %v2_63b6 to i32
  %v14_63c2 = icmp eq i32 %v3_6382, %v3_63c2
  %v1_63c5 = icmp eq i1 %v14_63c2, false
  br i1 %v1_63c5, label %dec_label_pc_63a8, label %dec_label_pc_63c7.loopexit

dec_label_pc_63c7.loopexit:                       ; preds = %dec_label_pc_63b2
  br label %dec_label_pc_63c7

dec_label_pc_63c7:                                ; preds = %dec_label_pc_63c7.loopexit, %dec_label_pc_6370
  store i64 %v0_637a, i64* @rbx, align 8
  store i64 %v0_6376, i64* %rbp.global-to-local, align 8
  store i64 %v0_6374, i64* %r12.global-to-local, align 8
  store i64 %v0_6372, i64* %r13.global-to-local, align 8
  store i64 %v0_6370, i64* %r14.global-to-local, align 8
  ret i64 %v0_6377

dec_label_pc_63d0.loopexit:                       ; preds = %dec_label_pc_63a8
  br label %dec_label_pc_63d0

dec_label_pc_63d0:                                ; preds = %dec_label_pc_63d0.loopexit, %dec_label_pc_6391
  %v0_63d0 = phi i64 [ %v17_63b6, %dec_label_pc_63d0.loopexit ], [ %v4_6391, %dec_label_pc_6391 ]
  store i64 %v0_63d0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState9dumpDebugEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_63e0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_63e0 = load i64, i64* %r14.global-to-local, align 8
  %v0_63e2 = load i64, i64* %r13.global-to-local, align 8
  %v0_63e4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_63e4, i64* %r13.global-to-local, align 8
  %v0_63e7 = load i64, i64* %r12.global-to-local, align 8
  %v0_63e9 = load i64, i64* %rbp.global-to-local, align 8
  %v0_63ea = load i64, i64* @rbx, align 8
  %v0_63eb = load i64, i64* @rdi, align 8
  %v1_63eb = add i64 %v0_63eb, 32
  %v2_63eb = inttoptr i64 %v1_63eb to i8*
  %v3_63eb = load i8, i8* %v2_63eb, align 1
  %v10_63eb = icmp eq i8 %v3_63eb, 0
  store i64 %v0_63eb, i64* @rbx, align 8
  store i64 %v0_63eb, i64* @rax, align 8
  br i1 %v10_63eb, label %dec_label_pc_6520, label %dec_label_pc_63f8

dec_label_pc_63f8:                                ; preds = %dec_label_pc_63e0
  br label %dec_label_pc_6400

dec_label_pc_6400:                                ; preds = %dec_label_pc_6520, %dec_label_pc_63f8
  %storemerge = phi i64 [ %v3_6523, %dec_label_pc_6520 ], [ 0, %dec_label_pc_63f8 ]
  store i64 %storemerge, i64* %rsi.global-to-local, align 8
  %v3_6400 = load i8, i8* %v2_63eb, align 1
  %v10_6400 = icmp eq i8 %v3_6400, 0
  %v1_6404 = icmp eq i1 %v10_6400, false
  br i1 %v1_6404, label %dec_label_pc_6500, label %dec_label_pc_640a

dec_label_pc_640a:                                ; preds = %dec_label_pc_6400
  %v1_640a = add i64 %v0_63e4, 32
  %v2_640a = inttoptr i64 %v1_640a to i64*
  %v3_640a = load i64, i64* %v2_640a, align 8
  store i64 %v3_640a, i64* @rax, align 8
  %v1_6411 = add i64 %v3_640a, 8
  %v2_6411 = inttoptr i64 %v1_6411 to i32*
  %v3_6411 = load i32, i32* %v2_6411, align 4
  %v4_6411 = zext i32 %v3_6411 to i64
  store i64 %v4_6411, i64* %rbp.global-to-local, align 8
  store i64 %v0_63eb, i64* @rax, align 8
  store i64 %v4_6411, i64* %rsi.global-to-local, align 8
  %tmp281 = icmp slt i32 %v3_6411, 1
  br i1 %tmp281, label %dec_label_pc_6469, label %dec_label_pc_6420

dec_label_pc_6420:                                ; preds = %dec_label_pc_640a
  %v3_6420 = load i64, i64* %v2_640a, align 8
  store i64 %v3_6420, i64* @rax, align 8
  %v1_6424 = add i64 %v3_6420, 8
  %v2_6424 = inttoptr i64 %v1_6424 to i32*
  %v3_6424 = load i32, i32* %v2_6424, align 4
  %v4_6424 = zext i32 %v3_6424 to i64
  store i64 %v4_6424, i64* @rdi, align 8
  %v1_6427 = add i64 %v3_6420, 12
  store i64 %v1_6427, i64* @rdx, align 8
  %v5_642b = icmp eq i32 %v3_6424, 0
  br i1 %v5_642b, label %dec_label_pc_65ab, label %dec_label_pc_6433

dec_label_pc_6433:                                ; preds = %dec_label_pc_6420
  %v1_6433 = add nsw i64 %v4_6411, -1
  store i64 %v1_6433, i64* %r12.global-to-local, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_6455

dec_label_pc_6440:                                ; preds = %dec_label_pc_6455
  %v3_6440 = load i64, i64* %v2_640a, align 8
  store i64 %v3_6440, i64* @rax, align 8
  store i64 %v1_6464, i64* %rbp.global-to-local, align 8
  %v1_6448 = add i64 %v3_6440, 8
  %v2_6448 = inttoptr i64 %v1_6448 to i32*
  %v3_6448 = load i32, i32* %v2_6448, align 4
  %v5_6448 = trunc i64 %v1_6464 to i32
  %v1_644b = add i64 %v3_6440, 12
  store i64 %v1_644b, i64* @rdx, align 8
  %tmp303 = icmp ugt i32 %v3_6448, %v5_6448
  br i1 %tmp303, label %dec_label_pc_6455, label %dec_label_pc_65ab.loopexit9

dec_label_pc_6455:                                ; preds = %dec_label_pc_6440, %dec_label_pc_6433
  %v0_6444 = phi i64 [ %v1_6464, %dec_label_pc_6440 ], [ 0, %dec_label_pc_6433 ]
  %v2_6455 = phi i64 [ %v1_6464, %dec_label_pc_6440 ], [ %v4_6424, %dec_label_pc_6433 ]
  %v0_645b = phi i64 [ %v1_644b, %dec_label_pc_6440 ], [ %v1_6427, %dec_label_pc_6433 ]
  store i64 %v2_6455, i64* @rax, align 8
  store i64 %v0_63eb, i64* @rdi, align 8
  %v2_645b = mul i64 %v0_6444, 4
  %v3_645b = add i64 %v2_645b, %v0_645b
  %v4_645b = inttoptr i64 %v3_645b to i32*
  %v5_645b = load i32, i32* %v4_645b, align 4
  %v6_645b = zext i32 %v5_645b to i64
  store i64 %v6_645b, i64* %rsi.global-to-local, align 8
  %v12_6461 = icmp eq i64 %v0_6444, %v1_6433
  %v1_6464 = add i64 %v0_6444, 1
  store i64 %v1_6464, i64* @rdi, align 8
  %v1_6467 = icmp eq i1 %v12_6461, false
  br i1 %v1_6467, label %dec_label_pc_6440, label %dec_label_pc_6469.loopexit

dec_label_pc_6469.loopexit:                       ; preds = %dec_label_pc_6455
  br label %dec_label_pc_6469

dec_label_pc_6469:                                ; preds = %dec_label_pc_6469.loopexit, %dec_label_pc_640a
  %v2_647335 = phi i64 [ %v1_6464, %dec_label_pc_6469.loopexit ], [ %v0_63eb, %dec_label_pc_640a ]
  %v3_6469 = load i8, i8* %v2_63eb, align 1
  %v10_6469 = icmp eq i8 %v3_6469, 0
  br i1 %v10_6469, label %dec_label_pc_6530, label %dec_label_pc_6473

dec_label_pc_6473:                                ; preds = %dec_label_pc_6500, %dec_label_pc_6469
  %v2_6473 = phi i64 [ %v0_63eb, %dec_label_pc_6500 ], [ %v2_647335, %dec_label_pc_6469 ]
  store i64 %v2_6473, i64* @rax, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  store i64 %v0_63eb, i64* @rdi, align 8
  br label %dec_label_pc_647e

dec_label_pc_647e.loopexit:                       ; preds = %dec_label_pc_6560
  br label %dec_label_pc_647e

dec_label_pc_647e:                                ; preds = %dec_label_pc_647e.loopexit, %dec_label_pc_6530, %dec_label_pc_6473
  %v1_6488 = add i64 %v0_63e4, 48
  %v2_6488 = inttoptr i64 %v1_6488 to i64*
  %v3_6488 = load i64, i64* %v2_6488, align 8
  store i64 %v3_6488, i64* @rax, align 8
  store i64 %v0_63eb, i64* @rdi, align 8
  %v1_648f = add i64 %v3_6488, 8
  %v2_648f = inttoptr i64 %v1_648f to i32*
  %v3_648f = load i32, i32* %v2_648f, align 4
  %v4_648f = zext i32 %v3_648f to i64
  store i64 %v4_648f, i64* %rbp.global-to-local, align 8
  store i64 %v0_63eb, i64* @rax, align 8
  store i64 %v4_648f, i64* %rsi.global-to-local, align 8
  %tmp283 = icmp slt i32 %v3_648f, 1
  br i1 %tmp283, label %dec_label_pc_64ee, label %dec_label_pc_649e

dec_label_pc_649e:                                ; preds = %dec_label_pc_647e
  %v3_649e = load i64, i64* %v2_6488, align 8
  store i64 %v3_649e, i64* @rax, align 8
  %v1_64a2 = add i64 %v3_649e, 8
  %v2_64a2 = inttoptr i64 %v1_64a2 to i32*
  %v3_64a2 = load i32, i32* %v2_64a2, align 4
  %v4_64a2 = zext i32 %v3_64a2 to i64
  store i64 %v4_64a2, i64* @rdi, align 8
  %v1_64a5 = add i64 %v3_649e, 16
  store i64 %v1_64a5, i64* @rdx, align 8
  %v5_64a9 = icmp eq i32 %v3_64a2, 0
  br i1 %v5_64a9, label %dec_label_pc_65ab, label %dec_label_pc_64b1

dec_label_pc_64b1:                                ; preds = %dec_label_pc_649e
  %v1_64b1 = add nsw i64 %v4_648f, -1
  store i64 %v1_64b1, i64* %r12.global-to-local, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_64d5

dec_label_pc_64c0:                                ; preds = %dec_label_pc_64d5
  %v3_64c0 = load i64, i64* %v2_6488, align 8
  store i64 %v3_64c0, i64* @rax, align 8
  store i64 %v1_64e9, i64* %rbp.global-to-local, align 8
  %v1_64c8 = trunc i64 %v1_64e9 to i32
  %v3_64c8 = add i64 %v3_64c0, 8
  %v4_64c8 = inttoptr i64 %v3_64c8 to i32*
  %v5_64c8 = load i32, i32* %v4_64c8, align 4
  %v11_64c8 = icmp ult i32 %v1_64c8, %v5_64c8
  %v1_64cb = add i64 %v3_64c0, 16
  store i64 %v1_64cb, i64* @rdx, align 8
  %v1_64cf = icmp eq i1 %v11_64c8, false
  br i1 %v1_64cf, label %dec_label_pc_65ab.loopexit, label %dec_label_pc_64d5

dec_label_pc_64d5:                                ; preds = %dec_label_pc_64c0, %dec_label_pc_64b1
  %v0_64c4 = phi i64 [ %v1_64e9, %dec_label_pc_64c0 ], [ 0, %dec_label_pc_64b1 ]
  %v0_64d5 = phi i64 [ %v1_64cb, %dec_label_pc_64c0 ], [ %v1_64a5, %dec_label_pc_64b1 ]
  %v2_64d5 = mul i64 %v0_64c4, 8
  %v3_64d5 = add i64 %v2_64d5, %v0_64d5
  %v4_64d5 = inttoptr i64 %v3_64d5 to i64*
  %v5_64d5 = load i64, i64* %v4_64d5, align 8
  store i64 %v5_64d5, i64* @rax, align 8
  store i64 %v0_63eb, i64* @rdi, align 8
  %v1_64dc = add i64 %v5_64d5, 8
  %v2_64dc = inttoptr i64 %v1_64dc to i64*
  %v3_64dc = load i64, i64* %v2_64dc, align 8
  store i64 %v3_64dc, i64* %rsi.global-to-local, align 8
  store i64 %v0_63eb, i64* @rax, align 8
  %v12_64e6 = icmp eq i64 %v1_64b1, %v0_64c4
  %v1_64e9 = add i64 %v0_64c4, 1
  store i64 %v1_64e9, i64* @rdi, align 8
  %v1_64ec = icmp eq i1 %v12_64e6, false
  br i1 %v1_64ec, label %dec_label_pc_64c0, label %dec_label_pc_64ee.loopexit

dec_label_pc_64ee.loopexit:                       ; preds = %dec_label_pc_64d5
  br label %dec_label_pc_64ee

dec_label_pc_64ee:                                ; preds = %dec_label_pc_64ee.loopexit, %dec_label_pc_647e
  store i64 %v0_63ea, i64* @rbx, align 8
  store i64 %v0_63e9, i64* %rbp.global-to-local, align 8
  store i64 %v0_63e7, i64* %r12.global-to-local, align 8
  store i64 %v0_63e2, i64* %r13.global-to-local, align 8
  store i64 %v0_63e0, i64* %r14.global-to-local, align 8
  ret i64 %v0_63eb

dec_label_pc_6500:                                ; preds = %dec_label_pc_6400
  store i64 %v0_63eb, i64* @rax, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  %v3_650b = load i8, i8* %v2_63eb, align 1
  %v10_650b = icmp eq i8 %v3_650b, 0
  %v1_650f = icmp eq i1 %v10_650b, false
  br i1 %v1_650f, label %dec_label_pc_6473, label %dec_label_pc_6530

dec_label_pc_6520:                                ; preds = %dec_label_pc_63e0
  %v1_6523 = add i64 %v0_63e4, 56
  %v2_6523 = inttoptr i64 %v1_6523 to i64*
  %v3_6523 = load i64, i64* %v2_6523, align 8
  br label %dec_label_pc_6400

dec_label_pc_6530:                                ; preds = %dec_label_pc_6500, %dec_label_pc_6469
  %v1_6530 = add i64 %v0_63e4, 40
  %v2_6530 = inttoptr i64 %v1_6530 to i64*
  %v3_6530 = load i64, i64* %v2_6530, align 8
  store i64 %v3_6530, i64* @rax, align 8
  store i64 %v0_63eb, i64* @rdi, align 8
  %v1_6537 = add i64 %v3_6530, 8
  %v2_6537 = inttoptr i64 %v1_6537 to i32*
  %v3_6537 = load i32, i32* %v2_6537, align 4
  %v4_6537 = zext i32 %v3_6537 to i64
  store i64 %v4_6537, i64* %rbp.global-to-local, align 8
  store i64 %v0_63eb, i64* @rax, align 8
  store i64 %v4_6537, i64* %rsi.global-to-local, align 8
  %tmp284 = icmp slt i32 %v3_6537, 1
  br i1 %tmp284, label %dec_label_pc_647e, label %dec_label_pc_654a

dec_label_pc_654a:                                ; preds = %dec_label_pc_6530
  %v3_654a = load i64, i64* %v2_6530, align 8
  store i64 %v3_654a, i64* @rax, align 8
  %v1_654e = add i64 %v3_654a, 8
  %v2_654e = inttoptr i64 %v1_654e to i32*
  %v3_654e = load i32, i32* %v2_654e, align 4
  %v4_654e = zext i32 %v3_654e to i64
  store i64 %v4_654e, i64* @rdi, align 8
  %v1_6551 = add i64 %v3_654a, 16
  store i64 %v1_6551, i64* @rdx, align 8
  %v5_6555 = icmp eq i32 %v3_654e, 0
  br i1 %v5_6555, label %dec_label_pc_65ab, label %dec_label_pc_6559

dec_label_pc_6559:                                ; preds = %dec_label_pc_654a
  %v1_6559 = add nsw i64 %v4_6537, -1
  store i64 %v1_6559, i64* %r14.global-to-local, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_6560

dec_label_pc_6560:                                ; preds = %dec_label_pc_659a, %dec_label_pc_6559
  %v0_659e = phi i64 [ %v1_6591, %dec_label_pc_659a ], [ 0, %dec_label_pc_6559 ]
  %v2_6564 = phi i64 [ %v1_6591, %dec_label_pc_659a ], [ %v4_654e, %dec_label_pc_6559 ]
  %v0_6560 = phi i64 [ %v1_65a5, %dec_label_pc_659a ], [ %v1_6551, %dec_label_pc_6559 ]
  %v2_6560 = mul i64 %v0_659e, 8
  %v3_6560 = add i64 %v2_6560, %v0_6560
  %v4_6560 = inttoptr i64 %v3_6560 to i64*
  %v5_6560 = load i64, i64* %v4_6560, align 8
  store i64 %v5_6560, i64* %r12.global-to-local, align 8
  store i64 %v2_6564, i64* @rax, align 8
  store i64 %v0_63eb, i64* @rdi, align 8
  %v1_656a = add i64 %v5_6560, 8
  %v2_656a = inttoptr i64 %v1_656a to i64*
  %v3_656a = load i64, i64* %v2_656a, align 8
  store i64 %v3_656a, i64* %rsi.global-to-local, align 8
  store i64 %v0_63eb, i64* @rax, align 8
  %v1_6575 = add i64 %v5_6560, 16
  %v2_6575 = inttoptr i64 %v1_6575 to i32*
  %v3_6575 = load i32, i32* %v2_6575, align 4
  %v4_6575 = zext i32 %v3_6575 to i64
  store i64 %v4_6575, i64* %rsi.global-to-local, align 8
  store i64 %v0_63eb, i64* @rax, align 8
  store i64 %v0_63eb, i64* @rdi, align 8
  %v1_6586 = add i64 %v5_6560, 20
  %v2_6586 = inttoptr i64 %v1_6586 to i32*
  %v3_6586 = load i32, i32* %v2_6586, align 4
  %v4_6586 = zext i32 %v3_6586 to i64
  store i64 %v4_6586, i64* %rsi.global-to-local, align 8
  %v12_658e = icmp eq i64 %v1_6559, %v0_659e
  %v1_6591 = add i64 %v0_659e, 1
  store i64 %v1_6591, i64* @rdi, align 8
  br i1 %v12_658e, label %dec_label_pc_647e.loopexit, label %dec_label_pc_659a

dec_label_pc_659a:                                ; preds = %dec_label_pc_6560
  %v3_659a = load i64, i64* %v2_6530, align 8
  store i64 %v3_659a, i64* @rax, align 8
  store i64 %v1_6591, i64* %rbp.global-to-local, align 8
  %v1_65a2 = add i64 %v3_659a, 8
  %v2_65a2 = inttoptr i64 %v1_65a2 to i32*
  %v3_65a2 = load i32, i32* %v2_65a2, align 4
  %v5_65a2 = trunc i64 %v1_6591 to i32
  %v1_65a5 = add i64 %v3_659a, 16
  store i64 %v1_65a5, i64* @rdx, align 8
  %tmp304 = icmp ugt i32 %v3_65a2, %v5_65a2
  br i1 %tmp304, label %dec_label_pc_6560, label %dec_label_pc_65ab.loopexit8

dec_label_pc_65ab.loopexit:                       ; preds = %dec_label_pc_64c0
  br label %dec_label_pc_65ab

dec_label_pc_65ab.loopexit8:                      ; preds = %dec_label_pc_659a
  br label %dec_label_pc_65ab

dec_label_pc_65ab.loopexit9:                      ; preds = %dec_label_pc_6440
  br label %dec_label_pc_65ab

dec_label_pc_65ab:                                ; preds = %dec_label_pc_65ab.loopexit9, %dec_label_pc_65ab.loopexit8, %dec_label_pc_65ab.loopexit, %dec_label_pc_654a, %dec_label_pc_649e, %dec_label_pc_6420
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack18__U3c_clinit__U3e_EJvv"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_65d0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29Prototype18__U3c_clinit__U3e_EJvv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6600:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm228LuaString$RecentShortStrings18__U3c_clinit__U3e_EJvv"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6640:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 128, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure18__U3c_clinit__U3e_EJvv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6670:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$14callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_66a0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_66a6 = load i64, i64* @rdi, align 8
  store i64 %v0_66a6, i64* @rbx, align 8
  %v1_66ad = add i64 %v0_66a6, 24
  %v2_66ad = inttoptr i64 %v1_66ad to i64*
  %v3_66ad = load i64, i64* %v2_66ad, align 8
  %v1_66b1 = add i64 %v0_66a6, 32
  %v2_66b1 = inttoptr i64 %v1_66b1 to i64*
  %v3_66b1 = load i64, i64* %v2_66b1, align 8
  store i64 %v3_66b1, i64* @rdi, align 8
  %v1_66b5 = inttoptr i64 %v3_66b1 to i64*
  %v2_66b5 = load i64, i64* %v1_66b5, align 8
  store i64 %v2_66b5, i64* @rax, align 8
  %v1_66be = inttoptr i64 %v2_66b5 to i64*
  %v2_66be = load i64, i64* %v1_66be, align 8
  store i64 %v2_66be, i64* @rdx, align 8
  store i64 %v2_66b5, i64* @rdi, align 8
  %v1_66ca = inttoptr i64 %v3_66ad to i64*
  %v2_66ca = load i64, i64* %v1_66ca, align 8
  store i64 %v2_66ca, i64* @rdx, align 8
  store i64 %v3_66ad, i64* @rdi, align 8
  %v1_66da = add i64 %v0_66a6, 40
  %v2_66da = inttoptr i64 %v1_66da to i64*
  %v3_66da = load i64, i64* %v2_66da, align 8
  store i64 %v3_66da, i64* @rax, align 8
  %v1_66de = add i64 %v3_66da, 8
  %v2_66de = inttoptr i64 %v1_66de to i32*
  %v3_66de = load i32, i32* %v2_66de, align 4
  %v4_66de = zext i32 %v3_66de to i64
  store i64 %v4_66de, i64* @rdi, align 8
  %v7_66e1 = icmp eq i32 %v3_66de, 0
  br i1 %v7_66e1, label %bb, label %dec_label_pc_66e9

bb:                                               ; preds = %dec_label_pc_66a0
  %v3_66e3 = call i64 @function_67af(i64 0)
  store i64 %v3_66e3, i64* @rax, align 8
  %v0_6704.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_66e9

dec_label_pc_66e9:                                ; preds = %bb, %dec_label_pc_66a0
  %v0_6704 = phi i64 [ %v0_6704.pre, %bb ], [ %v0_66a6, %dec_label_pc_66a0 ]
  %v0_66e9 = phi i64 [ %v3_66e3, %bb ], [ %v3_66da, %dec_label_pc_66a0 ]
  %v1_66e9 = add i64 %v0_66e9, 16
  %v2_66e9 = inttoptr i64 %v1_66e9 to i64*
  %v3_66e9 = load i64, i64* %v2_66e9, align 8
  %v1_66f4 = inttoptr i64 %v3_66e9 to i64*
  %v2_66f4 = load i64, i64* %v1_66f4, align 8
  store i64 %v2_66f4, i64* @rax, align 8
  store i64 %v3_66e9, i64* @rdi, align 8
  store i64 %v2_66f4, i64* %r12.global-to-local, align 8
  %v1_6704 = add i64 %v0_6704, 48
  %v2_6704 = inttoptr i64 %v1_6704 to i64*
  %v3_6704 = load i64, i64* %v2_6704, align 8
  store i64 %v3_6704, i64* @rax, align 8
  %v1_6708 = add i64 %v3_6704, 8
  %v2_6708 = inttoptr i64 %v1_6708 to i32*
  %v3_6708 = load i32, i32* %v2_6708, align 4
  %v5_670b = icmp eq i32 %v3_6708, 0
  br i1 %v5_670b, label %bb257, label %dec_label_pc_6713

bb257:                                            ; preds = %dec_label_pc_66e9
  %v2_670d = call i64 @function_67af(i64 %v3_66e9)
  store i64 %v2_670d, i64* @rax, align 8
  %v0_672a.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6713

dec_label_pc_6713:                                ; preds = %bb257, %dec_label_pc_66e9
  %v0_672a = phi i64 [ %v0_672a.pre, %bb257 ], [ %v0_6704, %dec_label_pc_66e9 ]
  %v0_6713 = phi i64 [ %v2_670d, %bb257 ], [ %v3_6704, %dec_label_pc_66e9 ]
  %v1_6713 = add i64 %v0_6713, 16
  %v2_6713 = inttoptr i64 %v1_6713 to i64*
  %v3_6713 = load i64, i64* %v2_6713, align 8
  store i64 %v3_6713, i64* @rdi, align 8
  %v1_671e = inttoptr i64 %v3_6713 to i64*
  %v2_671e = load i64, i64* %v1_671e, align 8
  store i64 %v2_671e, i64* @rax, align 8
  store i64 %v2_671e, i64* %r13.global-to-local, align 8
  %v1_672a = add i64 %v0_672a, 48
  %v2_672a = inttoptr i64 %v1_672a to i64*
  %v3_672a = load i64, i64* %v2_672a, align 8
  store i64 %v3_672a, i64* @rax, align 8
  %v1_672e = add i64 %v3_672a, 8
  %v2_672e = inttoptr i64 %v1_672e to i32*
  %v3_672e = load i32, i32* %v2_672e, align 4
  %v4_672e = zext i32 %v3_672e to i64
  store i64 %v4_672e, i64* @rcx, align 8
  %v5_6731 = icmp eq i32 %v3_672e, 0
  br i1 %v5_6731, label %bb258, label %dec_label_pc_6735

bb258:                                            ; preds = %dec_label_pc_6713
  %v2_6733 = call i64 @function_67af(i64 %v3_6713)
  store i64 %v2_6733, i64* @rax, align 8
  %v0_674d.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_6763.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6735

dec_label_pc_6735:                                ; preds = %bb258, %dec_label_pc_6713
  %v0_6763 = phi i64 [ %v0_6763.pre, %bb258 ], [ %v0_672a, %dec_label_pc_6713 ]
  %v0_674d = phi i64 [ %v0_674d.pre, %bb258 ], [ %v2_671e, %dec_label_pc_6713 ]
  %v0_6735 = phi i64 [ %v2_6733, %bb258 ], [ %v3_672a, %dec_label_pc_6713 ]
  %v1_6735 = add i64 %v0_6735, 16
  %v2_6735 = inttoptr i64 %v1_6735 to i64*
  %v3_6735 = load i64, i64* %v2_6735, align 8
  store i64 %v3_6735, i64* @rdi, align 8
  %v1_6740 = inttoptr i64 %v3_6735 to i64*
  %v2_6740 = load i64, i64* %v1_6740, align 8
  store i64 %v2_6740, i64* @rax, align 8
  %v0_6749 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_674d, i64* @rdx, align 8
  store i64 %v0_6749, i64* @rdi, align 8
  store i64 %v2_6740, i64* @rcx, align 8
  store i64 %v2_6740, i64* %r12.global-to-local, align 8
  %v1_6763 = add i64 %v0_6763, 48
  %v2_6763 = inttoptr i64 %v1_6763 to i64*
  %v3_6763 = load i64, i64* %v2_6763, align 8
  store i64 %v3_6763, i64* @rax, align 8
  %v1_6767 = add i64 %v3_6763, 8
  %v2_6767 = inttoptr i64 %v1_6767 to i32*
  %v3_6767 = load i32, i32* %v2_6767, align 4
  %v4_6767 = zext i32 %v3_6767 to i64
  store i64 %v4_6767, i64* @rdx, align 8
  %v5_676a = icmp eq i32 %v3_6767, 0
  br i1 %v5_676a, label %bb259, label %dec_label_pc_676e

bb259:                                            ; preds = %dec_label_pc_6735
  %v2_676c = call i64 @function_67af(i64 %v0_6749)
  store i64 %v2_676c, i64* @rax, align 8
  %v0_6782.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_676e

dec_label_pc_676e:                                ; preds = %bb259, %dec_label_pc_6735
  %v0_6782 = phi i64 [ %v0_6782.pre, %bb259 ], [ %v0_6763, %dec_label_pc_6735 ]
  %v0_676e = phi i64 [ %v2_676c, %bb259 ], [ %v3_6763, %dec_label_pc_6735 ]
  %v1_676e = add i64 %v0_676e, 16
  %v2_676e = inttoptr i64 %v1_676e to i64*
  %v3_676e = load i64, i64* %v2_676e, align 8
  store i64 %v3_676e, i64* @rdi, align 8
  %v1_6779 = inttoptr i64 %v3_676e to i64*
  %v2_6779 = load i64, i64* %v1_6779, align 8
  store i64 %v2_6779, i64* @rax, align 8
  %v1_6782 = add i64 %v0_6782, 48
  %v2_6782 = inttoptr i64 %v1_6782 to i64*
  %v3_6782 = load i64, i64* %v2_6782, align 8
  store i64 %v3_6782, i64* @rbx, align 8
  %v1_6789 = add i64 %v3_6782, 8
  %v2_6789 = inttoptr i64 %v1_6789 to i32*
  %v3_6789 = load i32, i32* %v2_6789, align 4
  %v4_6789 = zext i32 %v3_6789 to i64
  store i64 %v4_6789, i64* @rax, align 8
  %v5_678c = icmp eq i32 %v3_6789, 0
  br i1 %v5_678c, label %bb260, label %dec_label_pc_6790

bb260:                                            ; preds = %dec_label_pc_676e
  %v2_678e = call i64 @function_67af(i64 %v3_676e)
  store i64 %v2_678e, i64* @rax, align 8
  %v0_6793.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6790

dec_label_pc_6790:                                ; preds = %bb260, %dec_label_pc_676e
  %v0_6793 = phi i64 [ %v0_6793.pre, %bb260 ], [ %v3_6782, %dec_label_pc_676e ]
  store i64 %v0_6793, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_67af(i64 %arg1) local_unnamed_addr {
dec_label_pc_67af:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$24callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_67c0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_67ce = add i64 %arg1, 32
  %v2_67ce = inttoptr i64 %v1_67ce to i64*
  %v3_67ce = load i64, i64* %v2_67ce, align 8
  store i64 %v3_67ce, i64* @rax, align 8
  %v1_67d2 = add i64 %arg1, 24
  %v2_67d2 = inttoptr i64 %v1_67d2 to i64*
  %v3_67d2 = load i64, i64* %v2_67d2, align 8
  store i64 %v3_67d2, i64* %r12.global-to-local, align 8
  %v1_67d6 = add i64 %v3_67ce, 8
  %v2_67d6 = inttoptr i64 %v1_67d6 to i32*
  %v3_67d6 = load i32, i32* %v2_67d6, align 4
  %v5_67da = icmp eq i32 %v3_67d6, 0
  br i1 %v5_67da, label %bb, label %dec_label_pc_67e3

bb:                                               ; preds = %dec_label_pc_67c0
  %v2_67dd = call i64 @function_690a(i64 %arg1)
  store i64 %v2_67dd, i64* @rax, align 8
  br label %dec_label_pc_67e3

dec_label_pc_67e3:                                ; preds = %bb, %dec_label_pc_67c0
  %v0_67e3 = phi i64 [ %v2_67dd, %bb ], [ %v3_67ce, %dec_label_pc_67c0 ]
  %v1_67e3 = add i64 %v0_67e3, 16
  %v2_67e3 = inttoptr i64 %v1_67e3 to i64*
  %v3_67e3 = load i64, i64* %v2_67e3, align 8
  store i64 %v3_67e3, i64* %rbp.global-to-local, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_67ea = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_67ea, i64* %r13.global-to-local, align 8
  %v0_67ed = load i64, i64* inttoptr (i64 26612 to i64*), align 8
  store i64 %v0_67ed, i64* %rsi.global-to-local, align 8
  %v1_67f4 = inttoptr i64 %v3_67e3 to i64*
  %v2_67f4 = load i64, i64* %v1_67f4, align 8
  store i64 %v2_67f4, i64* @rax, align 8
  store i64 %v3_67e3, i64* @rdi, align 8
  store i64 %v2_67f4, i64* %r14.global-to-local, align 8
  %v1_6804 = add i64 %arg1, 40
  %v2_6804 = inttoptr i64 %v1_6804 to i64*
  %v3_6804 = load i64, i64* %v2_6804, align 8
  store i64 %v3_6804, i64* @rax, align 8
  %v1_6808 = add i64 %v3_6804, 8
  %v2_6808 = inttoptr i64 %v1_6808 to i32*
  %v3_6808 = load i32, i32* %v2_6808, align 4
  %v4_6808 = zext i32 %v3_6808 to i64
  store i64 %v4_6808, i64* %rsi.global-to-local, align 8
  %v5_680b = icmp eq i32 %v3_6808, 0
  br i1 %v5_680b, label %bb258, label %dec_label_pc_6813

bb258:                                            ; preds = %dec_label_pc_67e3
  %v2_680d = call i64 @function_690a(i64 %v3_67e3)
  store i64 %v2_680d, i64* @rax, align 8
  %v0_683d.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6813

dec_label_pc_6813:                                ; preds = %bb258, %dec_label_pc_67e3
  %v0_683d = phi i64 [ %v0_683d.pre, %bb258 ], [ %arg1, %dec_label_pc_67e3 ]
  %v0_6813 = phi i64 [ %v2_680d, %bb258 ], [ %v3_6804, %dec_label_pc_67e3 ]
  %v1_6813 = add i64 %v0_6813, 16
  %v2_6813 = inttoptr i64 %v1_6813 to i64*
  %v3_6813 = load i64, i64* %v2_6813, align 8
  store i64 %v3_6813, i64* @rdi, align 8
  %v0_6817 = load i64, i64* inttoptr (i64 26654 to i64*), align 8
  store i64 %v0_6817, i64* %rsi.global-to-local, align 8
  %v1_681e = inttoptr i64 %v3_6813 to i64*
  %v2_681e = load i64, i64* %v1_681e, align 8
  store i64 %v2_681e, i64* @rax, align 8
  %v1_6827 = inttoptr i64 %v2_681e to i64*
  %v2_6827 = load i64, i64* %v1_6827, align 8
  store i64 %v2_6827, i64* @rdx, align 8
  %v0_682a = load i64, i64* inttoptr (i64 26673 to i64*), align 8
  store i64 %v0_682a, i64* %rsi.global-to-local, align 8
  store i64 %v2_681e, i64* @rdi, align 8
  store i64 %v2_681e, i64* %r15.global-to-local, align 8
  %v1_683d = add i64 %v0_683d, 40
  %v2_683d = inttoptr i64 %v1_683d to i64*
  %v3_683d = load i64, i64* %v2_683d, align 8
  store i64 %v3_683d, i64* @rax, align 8
  %v1_6841 = add i64 %v3_683d, 8
  %v2_6841 = inttoptr i64 %v1_6841 to i32*
  %v3_6841 = load i32, i32* %v2_6841, align 4
  %v4_6841 = zext i32 %v3_6841 to i64
  store i64 %v4_6841, i64* @rcx, align 8
  %v5_6844 = icmp eq i32 %v3_6841, 0
  br i1 %v5_6844, label %bb259, label %dec_label_pc_684c

bb259:                                            ; preds = %dec_label_pc_6813
  %v2_6846 = call i64 @function_690a(i64 %v2_681e)
  store i64 %v2_6846, i64* @rax, align 8
  %v0_6879.pre = load i64, i64* %r15.global-to-local, align 8
  %v0_68b6.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_684c

dec_label_pc_684c:                                ; preds = %bb259, %dec_label_pc_6813
  %v0_68b6 = phi i64 [ %v0_68b6.pre, %bb259 ], [ %v0_683d, %dec_label_pc_6813 ]
  %v0_6879 = phi i64 [ %v0_6879.pre, %bb259 ], [ %v2_681e, %dec_label_pc_6813 ]
  %v0_684c = phi i64 [ %v2_6846, %bb259 ], [ %v3_683d, %dec_label_pc_6813 ]
  %v1_684c = add i64 %v0_684c, 16
  %v2_684c = inttoptr i64 %v1_684c to i64*
  %v3_684c = load i64, i64* %v2_684c, align 8
  store i64 %v3_684c, i64* @rdi, align 8
  %v0_6850 = load i64, i64* inttoptr (i64 26711 to i64*), align 8
  store i64 %v0_6850, i64* %rsi.global-to-local, align 8
  %v1_6857 = inttoptr i64 %v3_684c to i64*
  %v2_6857 = load i64, i64* %v1_6857, align 8
  store i64 %v2_6857, i64* @rax, align 8
  %v1_6860 = inttoptr i64 %v2_6857 to i64*
  %v2_6860 = load i64, i64* %v1_6860, align 8
  store i64 %v2_6860, i64* @rdx, align 8
  %v0_6863 = load i64, i64* inttoptr (i64 26730 to i64*), align 8
  store i64 %v0_6863, i64* %rsi.global-to-local, align 8
  store i64 %v2_6857, i64* @rdi, align 8
  %v0_6873 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v2_6857, i64* @rcx, align 8
  store i64 %v0_6879, i64* @rdx, align 8
  %v0_687c = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_687c, i64* %rsi.global-to-local, align 8
  store i64 %v0_6873, i64* @rdi, align 8
  %v2_6889 = load i64, i64* %v1_6860, align 8
  store i64 %v2_6889, i64* @rdx, align 8
  %v0_688c = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_688c, i64* %rsi.global-to-local, align 8
  store i64 %v2_6857, i64* @rdi, align 8
  %v4_6898 = trunc i64 %v2_6857 to i8
  %v5_6898 = icmp eq i8 %v4_6898, 0
  %v0_689a = load i64, i64* %r12.global-to-local, align 8
  %v1_689a = inttoptr i64 %v0_689a to i64*
  %v2_689a = load i64, i64* %v1_689a, align 8
  store i64 %v2_689a, i64* @rax, align 8
  %v0_689e = load i64, i64* inttoptr (i64 26789 to i64*), align 8
  store i64 %v0_689e, i64* %rsi.global-to-local, align 8
  %v2_68a5 = load i64, i64* inttoptr (i64 26797 to i64*), align 8
  %v3_68a5 = select i1 %v5_6898, i64 %v2_68a5, i64 %v0_689e
  store i64 %v3_68a5, i64* %rsi.global-to-local, align 8
  store i64 %v0_689a, i64* @rdi, align 8
  %v1_68b6 = add i64 %v0_68b6, 40
  %v2_68b6 = inttoptr i64 %v1_68b6 to i64*
  %v3_68b6 = load i64, i64* %v2_68b6, align 8
  store i64 %v3_68b6, i64* @rax, align 8
  %v1_68ba = add i64 %v3_68b6, 8
  %v2_68ba = inttoptr i64 %v1_68ba to i32*
  %v3_68ba = load i32, i32* %v2_68ba, align 4
  %v4_68ba = zext i32 %v3_68ba to i64
  store i64 %v4_68ba, i64* @rdx, align 8
  %v5_68bd = icmp eq i32 %v3_68ba, 0
  br i1 %v5_68bd, label %bb260, label %dec_label_pc_68c1

bb260:                                            ; preds = %dec_label_pc_684c
  %v2_68bf = call i64 @function_690a(i64 %v0_689a)
  store i64 %v2_68bf, i64* @rax, align 8
  %v0_68d5.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_68c1

dec_label_pc_68c1:                                ; preds = %bb260, %dec_label_pc_684c
  %v0_68d5 = phi i64 [ %v0_68d5.pre, %bb260 ], [ %v0_68b6, %dec_label_pc_684c ]
  %v0_68c1 = phi i64 [ %v2_68bf, %bb260 ], [ %v3_68b6, %dec_label_pc_684c ]
  %v1_68c1 = add i64 %v0_68c1, 16
  %v2_68c1 = inttoptr i64 %v1_68c1 to i64*
  %v3_68c1 = load i64, i64* %v2_68c1, align 8
  store i64 %v3_68c1, i64* @rdi, align 8
  %v0_68c5 = load i64, i64* inttoptr (i64 26828 to i64*), align 8
  store i64 %v0_68c5, i64* %rsi.global-to-local, align 8
  %v1_68cc = inttoptr i64 %v3_68c1 to i64*
  %v2_68cc = load i64, i64* %v1_68cc, align 8
  store i64 %v2_68cc, i64* @rax, align 8
  %v1_68d5 = add i64 %v0_68d5, 40
  %v2_68d5 = inttoptr i64 %v1_68d5 to i64*
  %v3_68d5 = load i64, i64* %v2_68d5, align 8
  store i64 %v3_68d5, i64* @rbx, align 8
  store i64 %v2_68cc, i64* %rbp.global-to-local, align 8
  %v1_68dc = add i64 %v3_68d5, 8
  %v2_68dc = inttoptr i64 %v1_68dc to i32*
  %v3_68dc = load i32, i32* %v2_68dc, align 4
  %v4_68dc = zext i32 %v3_68dc to i64
  store i64 %v4_68dc, i64* @rax, align 8
  %v5_68df = icmp eq i32 %v3_68dc, 0
  br i1 %v5_68df, label %bb261, label %dec_label_pc_68e3

bb261:                                            ; preds = %dec_label_pc_68c1
  %v2_68e1 = call i64 @function_690a(i64 %v3_68c1)
  store i64 %v2_68e1, i64* @rax, align 8
  %v0_68e3.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_68e6.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_68e3

dec_label_pc_68e3:                                ; preds = %bb261, %dec_label_pc_68c1
  %v0_68e6 = phi i64 [ %v0_68e6.pre, %bb261 ], [ %v3_68d5, %dec_label_pc_68c1 ]
  %v0_68e3 = phi i64 [ %v0_68e3.pre, %bb261 ], [ %v2_68cc, %dec_label_pc_68c1 ]
  store i64 %v0_68e3, i64* %rsi.global-to-local, align 8
  store i64 %v0_68e6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_690a(i64 %arg1) local_unnamed_addr {
dec_label_pc_690a:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$14callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_6920:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6926 = load i64, i64* @rdi, align 8
  store i64 %v0_6926, i64* @rbx, align 8
  %v1_692d = add i64 %v0_6926, 24
  %v2_692d = inttoptr i64 %v1_692d to i64*
  %v3_692d = load i64, i64* %v2_692d, align 8
  %v1_6931 = add i64 %v0_6926, 32
  %v2_6931 = inttoptr i64 %v1_6931 to i64*
  %v3_6931 = load i64, i64* %v2_6931, align 8
  store i64 %v3_6931, i64* @rdi, align 8
  %v1_6935 = inttoptr i64 %v3_6931 to i64*
  %v2_6935 = load i64, i64* %v1_6935, align 8
  store i64 %v2_6935, i64* @rax, align 8
  %v1_693e = inttoptr i64 %v2_6935 to i64*
  %v2_693e = load i64, i64* %v1_693e, align 8
  store i64 %v2_693e, i64* @rdx, align 8
  store i64 %v2_6935, i64* @rdi, align 8
  %v1_694a = inttoptr i64 %v3_692d to i64*
  %v2_694a = load i64, i64* %v1_694a, align 8
  store i64 %v2_694a, i64* @rdx, align 8
  store i64 %v3_692d, i64* @rdi, align 8
  %v1_695a = add i64 %v0_6926, 40
  %v2_695a = inttoptr i64 %v1_695a to i64*
  %v3_695a = load i64, i64* %v2_695a, align 8
  store i64 %v3_695a, i64* @rax, align 8
  %v1_695e = add i64 %v3_695a, 8
  %v2_695e = inttoptr i64 %v1_695e to i32*
  %v3_695e = load i32, i32* %v2_695e, align 4
  %v4_695e = zext i32 %v3_695e to i64
  store i64 %v4_695e, i64* @rdi, align 8
  %v7_6961 = icmp eq i32 %v3_695e, 0
  br i1 %v7_6961, label %bb, label %dec_label_pc_6969

bb:                                               ; preds = %dec_label_pc_6920
  %v3_6963 = call i64 @function_6a2f(i64 0)
  store i64 %v3_6963, i64* @rax, align 8
  %v0_6984.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6969

dec_label_pc_6969:                                ; preds = %bb, %dec_label_pc_6920
  %v0_6984 = phi i64 [ %v0_6984.pre, %bb ], [ %v0_6926, %dec_label_pc_6920 ]
  %v0_6969 = phi i64 [ %v3_6963, %bb ], [ %v3_695a, %dec_label_pc_6920 ]
  %v1_6969 = add i64 %v0_6969, 16
  %v2_6969 = inttoptr i64 %v1_6969 to i64*
  %v3_6969 = load i64, i64* %v2_6969, align 8
  %v1_6974 = inttoptr i64 %v3_6969 to i64*
  %v2_6974 = load i64, i64* %v1_6974, align 8
  store i64 %v2_6974, i64* @rax, align 8
  store i64 %v3_6969, i64* @rdi, align 8
  store i64 %v2_6974, i64* %r12.global-to-local, align 8
  %v1_6984 = add i64 %v0_6984, 48
  %v2_6984 = inttoptr i64 %v1_6984 to i64*
  %v3_6984 = load i64, i64* %v2_6984, align 8
  store i64 %v3_6984, i64* @rax, align 8
  %v1_6988 = add i64 %v3_6984, 8
  %v2_6988 = inttoptr i64 %v1_6988 to i32*
  %v3_6988 = load i32, i32* %v2_6988, align 4
  %v5_698b = icmp eq i32 %v3_6988, 0
  br i1 %v5_698b, label %bb257, label %dec_label_pc_6993

bb257:                                            ; preds = %dec_label_pc_6969
  %v2_698d = call i64 @function_6a2f(i64 %v3_6969)
  store i64 %v2_698d, i64* @rax, align 8
  %v0_69aa.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6993

dec_label_pc_6993:                                ; preds = %bb257, %dec_label_pc_6969
  %v0_69aa = phi i64 [ %v0_69aa.pre, %bb257 ], [ %v0_6984, %dec_label_pc_6969 ]
  %v0_6993 = phi i64 [ %v2_698d, %bb257 ], [ %v3_6984, %dec_label_pc_6969 ]
  %v1_6993 = add i64 %v0_6993, 16
  %v2_6993 = inttoptr i64 %v1_6993 to i64*
  %v3_6993 = load i64, i64* %v2_6993, align 8
  store i64 %v3_6993, i64* @rdi, align 8
  %v1_699e = inttoptr i64 %v3_6993 to i64*
  %v2_699e = load i64, i64* %v1_699e, align 8
  store i64 %v2_699e, i64* @rax, align 8
  store i64 %v2_699e, i64* %r13.global-to-local, align 8
  %v1_69aa = add i64 %v0_69aa, 48
  %v2_69aa = inttoptr i64 %v1_69aa to i64*
  %v3_69aa = load i64, i64* %v2_69aa, align 8
  store i64 %v3_69aa, i64* @rax, align 8
  %v1_69ae = add i64 %v3_69aa, 8
  %v2_69ae = inttoptr i64 %v1_69ae to i32*
  %v3_69ae = load i32, i32* %v2_69ae, align 4
  %v4_69ae = zext i32 %v3_69ae to i64
  store i64 %v4_69ae, i64* @rcx, align 8
  %v5_69b1 = icmp eq i32 %v3_69ae, 0
  br i1 %v5_69b1, label %bb258, label %dec_label_pc_69b5

bb258:                                            ; preds = %dec_label_pc_6993
  %v2_69b3 = call i64 @function_6a2f(i64 %v3_6993)
  store i64 %v2_69b3, i64* @rax, align 8
  %v0_69cd.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_69e3.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_69b5

dec_label_pc_69b5:                                ; preds = %bb258, %dec_label_pc_6993
  %v0_69e3 = phi i64 [ %v0_69e3.pre, %bb258 ], [ %v0_69aa, %dec_label_pc_6993 ]
  %v0_69cd = phi i64 [ %v0_69cd.pre, %bb258 ], [ %v2_699e, %dec_label_pc_6993 ]
  %v0_69b5 = phi i64 [ %v2_69b3, %bb258 ], [ %v3_69aa, %dec_label_pc_6993 ]
  %v1_69b5 = add i64 %v0_69b5, 16
  %v2_69b5 = inttoptr i64 %v1_69b5 to i64*
  %v3_69b5 = load i64, i64* %v2_69b5, align 8
  store i64 %v3_69b5, i64* @rdi, align 8
  %v1_69c0 = inttoptr i64 %v3_69b5 to i64*
  %v2_69c0 = load i64, i64* %v1_69c0, align 8
  store i64 %v2_69c0, i64* @rax, align 8
  %v0_69c9 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_69cd, i64* @rdx, align 8
  store i64 %v0_69c9, i64* @rdi, align 8
  store i64 %v2_69c0, i64* @rcx, align 8
  store i64 %v2_69c0, i64* %r12.global-to-local, align 8
  %v1_69e3 = add i64 %v0_69e3, 48
  %v2_69e3 = inttoptr i64 %v1_69e3 to i64*
  %v3_69e3 = load i64, i64* %v2_69e3, align 8
  store i64 %v3_69e3, i64* @rax, align 8
  %v1_69e7 = add i64 %v3_69e3, 8
  %v2_69e7 = inttoptr i64 %v1_69e7 to i32*
  %v3_69e7 = load i32, i32* %v2_69e7, align 4
  %v4_69e7 = zext i32 %v3_69e7 to i64
  store i64 %v4_69e7, i64* @rdx, align 8
  %v5_69ea = icmp eq i32 %v3_69e7, 0
  br i1 %v5_69ea, label %bb259, label %dec_label_pc_69ee

bb259:                                            ; preds = %dec_label_pc_69b5
  %v2_69ec = call i64 @function_6a2f(i64 %v0_69c9)
  store i64 %v2_69ec, i64* @rax, align 8
  %v0_6a02.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_69ee

dec_label_pc_69ee:                                ; preds = %bb259, %dec_label_pc_69b5
  %v0_6a02 = phi i64 [ %v0_6a02.pre, %bb259 ], [ %v0_69e3, %dec_label_pc_69b5 ]
  %v0_69ee = phi i64 [ %v2_69ec, %bb259 ], [ %v3_69e3, %dec_label_pc_69b5 ]
  %v1_69ee = add i64 %v0_69ee, 16
  %v2_69ee = inttoptr i64 %v1_69ee to i64*
  %v3_69ee = load i64, i64* %v2_69ee, align 8
  store i64 %v3_69ee, i64* @rdi, align 8
  %v1_69f9 = inttoptr i64 %v3_69ee to i64*
  %v2_69f9 = load i64, i64* %v1_69f9, align 8
  store i64 %v2_69f9, i64* @rax, align 8
  %v1_6a02 = add i64 %v0_6a02, 48
  %v2_6a02 = inttoptr i64 %v1_6a02 to i64*
  %v3_6a02 = load i64, i64* %v2_6a02, align 8
  store i64 %v3_6a02, i64* @rbx, align 8
  %v1_6a09 = add i64 %v3_6a02, 8
  %v2_6a09 = inttoptr i64 %v1_6a09 to i32*
  %v3_6a09 = load i32, i32* %v2_6a09, align 4
  %v4_6a09 = zext i32 %v3_6a09 to i64
  store i64 %v4_6a09, i64* @rax, align 8
  %v5_6a0c = icmp eq i32 %v3_6a09, 0
  br i1 %v5_6a0c, label %bb260, label %dec_label_pc_6a10

bb260:                                            ; preds = %dec_label_pc_69ee
  %v2_6a0e = call i64 @function_6a2f(i64 %v3_69ee)
  store i64 %v2_6a0e, i64* @rax, align 8
  %v0_6a13.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6a10

dec_label_pc_6a10:                                ; preds = %bb260, %dec_label_pc_69ee
  %v0_6a13 = phi i64 [ %v0_6a13.pre, %bb260 ], [ %v3_6a02, %dec_label_pc_69ee ]
  store i64 %v0_6a13, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6a2f(i64 %arg1) local_unnamed_addr {
dec_label_pc_6a2f:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$24callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6a40:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6a4e = add i64 %arg1, 32
  %v2_6a4e = inttoptr i64 %v1_6a4e to i64*
  %v3_6a4e = load i64, i64* %v2_6a4e, align 8
  store i64 %v3_6a4e, i64* @rax, align 8
  %v1_6a52 = add i64 %arg1, 24
  %v2_6a52 = inttoptr i64 %v1_6a52 to i64*
  %v3_6a52 = load i64, i64* %v2_6a52, align 8
  store i64 %v3_6a52, i64* %r12.global-to-local, align 8
  %v1_6a56 = add i64 %v3_6a4e, 8
  %v2_6a56 = inttoptr i64 %v1_6a56 to i32*
  %v3_6a56 = load i32, i32* %v2_6a56, align 4
  %v5_6a5a = icmp eq i32 %v3_6a56, 0
  br i1 %v5_6a5a, label %bb, label %dec_label_pc_6a63

bb:                                               ; preds = %dec_label_pc_6a40
  %v2_6a5d = call i64 @function_6b8a(i64 %arg1)
  store i64 %v2_6a5d, i64* @rax, align 8
  br label %dec_label_pc_6a63

dec_label_pc_6a63:                                ; preds = %bb, %dec_label_pc_6a40
  %v0_6a63 = phi i64 [ %v2_6a5d, %bb ], [ %v3_6a4e, %dec_label_pc_6a40 ]
  %v1_6a63 = add i64 %v0_6a63, 16
  %v2_6a63 = inttoptr i64 %v1_6a63 to i64*
  %v3_6a63 = load i64, i64* %v2_6a63, align 8
  store i64 %v3_6a63, i64* %rbp.global-to-local, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_6a6a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_6a6a, i64* %r13.global-to-local, align 8
  %v0_6a6d = load i64, i64* inttoptr (i64 27252 to i64*), align 8
  store i64 %v0_6a6d, i64* %rsi.global-to-local, align 8
  %v1_6a74 = inttoptr i64 %v3_6a63 to i64*
  %v2_6a74 = load i64, i64* %v1_6a74, align 8
  store i64 %v2_6a74, i64* @rax, align 8
  store i64 %v3_6a63, i64* @rdi, align 8
  store i64 %v2_6a74, i64* %r14.global-to-local, align 8
  %v1_6a84 = add i64 %arg1, 40
  %v2_6a84 = inttoptr i64 %v1_6a84 to i64*
  %v3_6a84 = load i64, i64* %v2_6a84, align 8
  store i64 %v3_6a84, i64* @rax, align 8
  %v1_6a88 = add i64 %v3_6a84, 8
  %v2_6a88 = inttoptr i64 %v1_6a88 to i32*
  %v3_6a88 = load i32, i32* %v2_6a88, align 4
  %v4_6a88 = zext i32 %v3_6a88 to i64
  store i64 %v4_6a88, i64* %rsi.global-to-local, align 8
  %v5_6a8b = icmp eq i32 %v3_6a88, 0
  br i1 %v5_6a8b, label %bb258, label %dec_label_pc_6a93

bb258:                                            ; preds = %dec_label_pc_6a63
  %v2_6a8d = call i64 @function_6b8a(i64 %v3_6a63)
  store i64 %v2_6a8d, i64* @rax, align 8
  %v0_6abd.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6a93

dec_label_pc_6a93:                                ; preds = %bb258, %dec_label_pc_6a63
  %v0_6abd = phi i64 [ %v0_6abd.pre, %bb258 ], [ %arg1, %dec_label_pc_6a63 ]
  %v0_6a93 = phi i64 [ %v2_6a8d, %bb258 ], [ %v3_6a84, %dec_label_pc_6a63 ]
  %v1_6a93 = add i64 %v0_6a93, 16
  %v2_6a93 = inttoptr i64 %v1_6a93 to i64*
  %v3_6a93 = load i64, i64* %v2_6a93, align 8
  store i64 %v3_6a93, i64* @rdi, align 8
  %v0_6a97 = load i64, i64* inttoptr (i64 27294 to i64*), align 8
  store i64 %v0_6a97, i64* %rsi.global-to-local, align 8
  %v1_6a9e = inttoptr i64 %v3_6a93 to i64*
  %v2_6a9e = load i64, i64* %v1_6a9e, align 8
  store i64 %v2_6a9e, i64* @rax, align 8
  %v1_6aa7 = inttoptr i64 %v2_6a9e to i64*
  %v2_6aa7 = load i64, i64* %v1_6aa7, align 8
  store i64 %v2_6aa7, i64* @rdx, align 8
  %v0_6aaa = load i64, i64* inttoptr (i64 27313 to i64*), align 8
  store i64 %v0_6aaa, i64* %rsi.global-to-local, align 8
  store i64 %v2_6a9e, i64* @rdi, align 8
  store i64 %v2_6a9e, i64* %r15.global-to-local, align 8
  %v1_6abd = add i64 %v0_6abd, 40
  %v2_6abd = inttoptr i64 %v1_6abd to i64*
  %v3_6abd = load i64, i64* %v2_6abd, align 8
  store i64 %v3_6abd, i64* @rax, align 8
  %v1_6ac1 = add i64 %v3_6abd, 8
  %v2_6ac1 = inttoptr i64 %v1_6ac1 to i32*
  %v3_6ac1 = load i32, i32* %v2_6ac1, align 4
  %v4_6ac1 = zext i32 %v3_6ac1 to i64
  store i64 %v4_6ac1, i64* @rcx, align 8
  %v5_6ac4 = icmp eq i32 %v3_6ac1, 0
  br i1 %v5_6ac4, label %bb259, label %dec_label_pc_6acc

bb259:                                            ; preds = %dec_label_pc_6a93
  %v2_6ac6 = call i64 @function_6b8a(i64 %v2_6a9e)
  store i64 %v2_6ac6, i64* @rax, align 8
  %v0_6af9.pre = load i64, i64* %r15.global-to-local, align 8
  %v0_6b36.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6acc

dec_label_pc_6acc:                                ; preds = %bb259, %dec_label_pc_6a93
  %v0_6b36 = phi i64 [ %v0_6b36.pre, %bb259 ], [ %v0_6abd, %dec_label_pc_6a93 ]
  %v0_6af9 = phi i64 [ %v0_6af9.pre, %bb259 ], [ %v2_6a9e, %dec_label_pc_6a93 ]
  %v0_6acc = phi i64 [ %v2_6ac6, %bb259 ], [ %v3_6abd, %dec_label_pc_6a93 ]
  %v1_6acc = add i64 %v0_6acc, 16
  %v2_6acc = inttoptr i64 %v1_6acc to i64*
  %v3_6acc = load i64, i64* %v2_6acc, align 8
  store i64 %v3_6acc, i64* @rdi, align 8
  %v0_6ad0 = load i64, i64* inttoptr (i64 27351 to i64*), align 8
  store i64 %v0_6ad0, i64* %rsi.global-to-local, align 8
  %v1_6ad7 = inttoptr i64 %v3_6acc to i64*
  %v2_6ad7 = load i64, i64* %v1_6ad7, align 8
  store i64 %v2_6ad7, i64* @rax, align 8
  %v1_6ae0 = inttoptr i64 %v2_6ad7 to i64*
  %v2_6ae0 = load i64, i64* %v1_6ae0, align 8
  store i64 %v2_6ae0, i64* @rdx, align 8
  %v0_6ae3 = load i64, i64* inttoptr (i64 27370 to i64*), align 8
  store i64 %v0_6ae3, i64* %rsi.global-to-local, align 8
  store i64 %v2_6ad7, i64* @rdi, align 8
  %v0_6af3 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v2_6ad7, i64* @rcx, align 8
  store i64 %v0_6af9, i64* @rdx, align 8
  %v0_6afc = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_6afc, i64* %rsi.global-to-local, align 8
  store i64 %v0_6af3, i64* @rdi, align 8
  %v2_6b09 = load i64, i64* %v1_6ae0, align 8
  store i64 %v2_6b09, i64* @rdx, align 8
  %v0_6b0c = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_6b0c, i64* %rsi.global-to-local, align 8
  store i64 %v2_6ad7, i64* @rdi, align 8
  %v4_6b18 = trunc i64 %v2_6ad7 to i8
  %v5_6b18 = icmp eq i8 %v4_6b18, 0
  %v0_6b1a = load i64, i64* %r12.global-to-local, align 8
  %v1_6b1a = inttoptr i64 %v0_6b1a to i64*
  %v2_6b1a = load i64, i64* %v1_6b1a, align 8
  store i64 %v2_6b1a, i64* @rax, align 8
  %v0_6b1e = load i64, i64* inttoptr (i64 27429 to i64*), align 8
  store i64 %v0_6b1e, i64* %rsi.global-to-local, align 8
  %v2_6b25 = load i64, i64* inttoptr (i64 27437 to i64*), align 8
  %v3_6b25 = select i1 %v5_6b18, i64 %v2_6b25, i64 %v0_6b1e
  store i64 %v3_6b25, i64* %rsi.global-to-local, align 8
  store i64 %v0_6b1a, i64* @rdi, align 8
  %v1_6b36 = add i64 %v0_6b36, 40
  %v2_6b36 = inttoptr i64 %v1_6b36 to i64*
  %v3_6b36 = load i64, i64* %v2_6b36, align 8
  store i64 %v3_6b36, i64* @rax, align 8
  %v1_6b3a = add i64 %v3_6b36, 8
  %v2_6b3a = inttoptr i64 %v1_6b3a to i32*
  %v3_6b3a = load i32, i32* %v2_6b3a, align 4
  %v4_6b3a = zext i32 %v3_6b3a to i64
  store i64 %v4_6b3a, i64* @rdx, align 8
  %v5_6b3d = icmp eq i32 %v3_6b3a, 0
  br i1 %v5_6b3d, label %bb260, label %dec_label_pc_6b41

bb260:                                            ; preds = %dec_label_pc_6acc
  %v2_6b3f = call i64 @function_6b8a(i64 %v0_6b1a)
  store i64 %v2_6b3f, i64* @rax, align 8
  %v0_6b55.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6b41

dec_label_pc_6b41:                                ; preds = %bb260, %dec_label_pc_6acc
  %v0_6b55 = phi i64 [ %v0_6b55.pre, %bb260 ], [ %v0_6b36, %dec_label_pc_6acc ]
  %v0_6b41 = phi i64 [ %v2_6b3f, %bb260 ], [ %v3_6b36, %dec_label_pc_6acc ]
  %v1_6b41 = add i64 %v0_6b41, 16
  %v2_6b41 = inttoptr i64 %v1_6b41 to i64*
  %v3_6b41 = load i64, i64* %v2_6b41, align 8
  store i64 %v3_6b41, i64* @rdi, align 8
  %v0_6b45 = load i64, i64* inttoptr (i64 27468 to i64*), align 8
  store i64 %v0_6b45, i64* %rsi.global-to-local, align 8
  %v1_6b4c = inttoptr i64 %v3_6b41 to i64*
  %v2_6b4c = load i64, i64* %v1_6b4c, align 8
  store i64 %v2_6b4c, i64* @rax, align 8
  %v1_6b55 = add i64 %v0_6b55, 40
  %v2_6b55 = inttoptr i64 %v1_6b55 to i64*
  %v3_6b55 = load i64, i64* %v2_6b55, align 8
  store i64 %v3_6b55, i64* @rbx, align 8
  store i64 %v2_6b4c, i64* %rbp.global-to-local, align 8
  %v1_6b5c = add i64 %v3_6b55, 8
  %v2_6b5c = inttoptr i64 %v1_6b5c to i32*
  %v3_6b5c = load i32, i32* %v2_6b5c, align 4
  %v4_6b5c = zext i32 %v3_6b5c to i64
  store i64 %v4_6b5c, i64* @rax, align 8
  %v5_6b5f = icmp eq i32 %v3_6b5c, 0
  br i1 %v5_6b5f, label %bb261, label %dec_label_pc_6b63

bb261:                                            ; preds = %dec_label_pc_6b41
  %v2_6b61 = call i64 @function_6b8a(i64 %v3_6b41)
  store i64 %v2_6b61, i64* @rax, align 8
  %v0_6b63.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_6b66.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_6b63

dec_label_pc_6b63:                                ; preds = %bb261, %dec_label_pc_6b41
  %v0_6b66 = phi i64 [ %v0_6b66.pre, %bb261 ], [ %v3_6b55, %dec_label_pc_6b41 ]
  %v0_6b63 = phi i64 [ %v0_6b63.pre, %bb261 ], [ %v2_6b4c, %dec_label_pc_6b41 ]
  store i64 %v0_6b63, i64* %rsi.global-to-local, align 8
  store i64 %v0_6b66, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6b8a(i64 %arg1) local_unnamed_addr {
dec_label_pc_6b8a:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue4callEJPS2_S3_S3_S3_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6ba0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6c6b(i64 %arg1) local_unnamed_addr {
dec_label_pc_6c6b:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6c80() local_unnamed_addr {
dec_label_pc_6c80:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6c8c() local_unnamed_addr {
dec_label_pc_6c8c:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm213LuaValue$None6copytoEJvP6JArrayIPNS1_8LuaValueEEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6ca0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6ca0 = load i64, i64* @rcx, align 8
  %v4_6ca0 = trunc i64 %v0_6ca0 to i32
  %tmp243 = icmp slt i32 %v4_6ca0, 1
  br i1 %tmp243, label %bb, label %dec_label_pc_6ca4

bb:                                               ; preds = %dec_label_pc_6ca0
  %v5_6ca2 = call i64 @function_6d1b()
  store i64 %v5_6ca2, i64* @rax, align 8
  br label %dec_label_pc_6ca4

dec_label_pc_6ca4:                                ; preds = %bb, %dec_label_pc_6ca0
  %v0_6cac = load i64, i64* %rsi.global-to-local, align 8
  %v0_6cb5 = load i64, i64* @rdx, align 8
  store i64 %v0_6cb5, i64* @r12, align 8
  %v1_6cb8 = add i64 %v0_6cb5, 1
  store i64 %v1_6cb8, i64* @rbx, align 8
  %v1_6cbf = trunc i64 %v0_6cb5 to i32
  %v3_6cbf = add i64 %v0_6cac, 8
  %v4_6cbf = inttoptr i64 %v3_6cbf to i32*
  %v5_6cbf = load i32, i32* %v4_6cbf, align 4
  %v11_6cbf = icmp ult i32 %v1_6cbf, %v5_6cbf
  %v1_6cc9 = icmp eq i1 %v11_6cbf, false
  br i1 %v1_6cc9, label %bb244, label %dec_label_pc_6ca4.dec_label_pc_6ccb_crit_edge

dec_label_pc_6ca4.dec_label_pc_6ccb_crit_edge:    ; preds = %dec_label_pc_6ca4
  %v3_6cc9.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_6ccb

bb244:                                            ; preds = %dec_label_pc_6ca4
  %v2_6cc9 = call i64 @function_6d1c()
  store i64 %v2_6cc9, i64* @rax, align 8
  br label %dec_label_pc_6ccb

dec_label_pc_6ccb:                                ; preds = %dec_label_pc_6ca4.dec_label_pc_6ccb_crit_edge, %bb244
  %v3_6cc9 = phi i64 [ %v3_6cc9.pre, %dec_label_pc_6ca4.dec_label_pc_6ccb_crit_edge ], [ %v2_6cc9, %bb244 ]
  ret i64 %v3_6cc9
}

define i64 @function_6cd1() local_unnamed_addr {
dec_label_pc_6cd1:
  %v0_6cd1 = load i64, i64* @rax, align 8
  %v11_6cd1 = or i64 %v0_6cd1, 235
  %v4_6cd3 = add i64 %v11_6cd1, 4202255
  %v26_6cd3 = and i64 %v4_6cd3, 4294967294
  store i64 %v26_6cd3, i64* @rax, align 8
  ret i64 %v26_6cd3
}

define i64 @function_6ce8() local_unnamed_addr {
dec_label_pc_6ce8:
  %v0_6ce8 = load i64, i64* @rax, align 8
  ret i64 %v0_6ce8
}

define i64 @function_6d1b() local_unnamed_addr {
dec_label_pc_6d1b:
  %v0_6d1b = load i64, i64* @rax, align 8
  ret i64 %v0_6d1b
}

define i64 @function_6d1c() local_unnamed_addr {
dec_label_pc_6d1c:
  %v0_6d1c = load i64, i64* @r12, align 8
  store i64 %v0_6d1c, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Varargs6copytoEJvP6JArrayIPNS1_8LuaValueEEii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6d30:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_6d44 = load i64, i64* @rdx, align 8
  %v0_6d4b = load i64, i64* @rcx, align 8
  %v4_6d4b = trunc i64 %v0_6d4b to i32
  %v3_6d51 = add i64 %v0_6d4b, %v2_6d44
  store i64 %v3_6d51, i64* @rax, align 8
  %tmp247 = icmp slt i32 %v4_6d4b, 1
  br i1 %tmp247, label %bb, label %dec_label_pc_6d5a

bb:                                               ; preds = %dec_label_pc_6d30
  %v5_6d58 = call i64 @function_6da3()
  store i64 %v5_6d58, i64* @rax, align 8
  %v0_6d60.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_6d5a

dec_label_pc_6d5a:                                ; preds = %bb, %dec_label_pc_6d30
  %v0_6d62 = phi i64 [ %v5_6d58, %bb ], [ %v3_6d51, %dec_label_pc_6d30 ]
  %v0_6d60 = phi i64 [ %v0_6d60.pre, %bb ], [ %v2_6d44, %dec_label_pc_6d30 ]
  store i64 %v0_6d60, i64* @rbx, align 8
  ret i64 %v0_6d62
}

define i64 @function_6d85() local_unnamed_addr {
dec_label_pc_6d85:
  %v0_6d85 = load i64, i64* @rax, align 8
  ret i64 %v0_6d85
}

define i64 @function_6d8d() local_unnamed_addr {
dec_label_pc_6d8d:
  %v0_6d8d = load i64, i64* @rax, align 8
  ret i64 %v0_6d8d
}

define i64 @function_6d8e(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6d8e:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6d8e = load i64, i64* %rbp.global-to-local, align 8
  %v2_6d8e = mul i64 %arg4, 4
  %v3_6d8e = add i64 %v2_6d8e, 52
  %v4_6d8e = add i64 %v3_6d8e, %v0_6d8e
  %v5_6d8e = inttoptr i64 %v4_6d8e to i32*
  %v6_6d8e = load i32, i32* %v5_6d8e, align 4
  %v8_6d8e = trunc i64 %arg4 to i32
  %v9_6d8e = add i32 %v6_6d8e, %v8_6d8e
  store i32 %v9_6d8e, i32* %v5_6d8e, align 4
  %v0_6d92 = load i64, i64* @rax, align 8
  ret i64 %v0_6d92
}

define i64 @function_6da3() local_unnamed_addr {
dec_label_pc_6da3:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @_ZN3org4luaj3vm29LuaThread18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_6dc0:
  %v5_6dc1 = load i64, i64* @rax, align 8
  ret i64 %v5_6dc1
}

define i64 @function_6ea0(i64 %arg1) local_unnamed_addr {
dec_label_pc_6ea0:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6ea9() local_unnamed_addr {
dec_label_pc_6ea9:
  store i64 4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6eb5() local_unnamed_addr {
dec_label_pc_6eb5:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6ec1() local_unnamed_addr {
dec_label_pc_6ec1:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6ecd() local_unnamed_addr {
dec_label_pc_6ecd:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable4swapEJvii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6ee0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6ee8 = load i64, i64* @rdi, align 8
  %v1_6ef1 = add i64 %v0_6ee8, 8
  %v2_6ef1 = inttoptr i64 %v1_6ef1 to i64*
  %v3_6ef1 = load i64, i64* %v2_6ef1, align 8
  store i64 %v3_6ef1, i64* @rdi, align 8
  %v1_6ef5 = add i64 %v3_6ef1, 8
  %v2_6ef5 = inttoptr i64 %v1_6ef5 to i32*
  %v3_6ef5 = load i32, i32* %v2_6ef5, align 4
  %v4_6ef5 = zext i32 %v3_6ef5 to i64
  store i64 %v4_6ef5, i64* @rax, align 8
  %v0_6efc = load i64, i64* @rdx, align 8
  store i64 %v0_6efc, i64* @rbp, align 8
  %v1_6efe = add i64 %v3_6ef1, 16
  store i64 %v1_6efe, i64* @rdx, align 8
  %v3_6f05 = trunc i64 %v0_6efc to i32
  %tmp246 = icmp ugt i32 %v3_6ef5, %v3_6f05
  br i1 %tmp246, label %dec_label_pc_6f10, label %bb

bb:                                               ; preds = %dec_label_pc_6ee0
  %v3_6f0e = call i64 @function_6f55()
  store i64 %v3_6f0e, i64* @rax, align 8
  %v0_6f10.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_6f10

dec_label_pc_6f10:                                ; preds = %dec_label_pc_6ee0, %bb
  %v0_6f10 = phi i64 [ %v0_6f10.pre, %bb ], [ %v0_6efc, %dec_label_pc_6ee0 ]
  store i64 0, i64* @rax, align 8
  %v2_6f15 = mul i64 %v0_6f10, 8
  store i64 %v2_6f15, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_6f55() local_unnamed_addr {
dec_label_pc_6f55:
  %v0_6f55 = load i64, i64* @rbp, align 8
  store i64 %v0_6f55, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27UpValue8setValueEJvPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6f70:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6f76 = load i64, i64* @rdi, align 8
  %v1_6f76 = add i64 %v0_6f76, 8
  %v2_6f76 = inttoptr i64 %v1_6f76 to i64*
  %v3_6f76 = load i64, i64* %v2_6f76, align 8
  store i64 %v3_6f76, i64* @rdx, align 8
  %v1_6f7a = add i64 %v0_6f76, 16
  %v2_6f7a = inttoptr i64 %v1_6f7a to i32*
  %v3_6f7a = load i32, i32* %v2_6f7a, align 4
  %v4_6f7a = sext i32 %v3_6f7a to i64
  store i64 %v4_6f7a, i64* @rax, align 8
  %v3_6f7e = add i64 %v3_6f76, 8
  %v4_6f7e = inttoptr i64 %v3_6f7e to i32*
  %v5_6f7e = load i32, i32* %v4_6f7e, align 4
  %v11_6f7e = icmp ult i32 %v3_6f7a, %v5_6f7e
  %v1_6f81 = icmp eq i1 %v11_6f7e, false
  br i1 %v1_6f81, label %bb, label %dec_label_pc_6f83

bb:                                               ; preds = %dec_label_pc_6f70
  %v2_6f81 = call i64 @function_6fa3()
  store i64 %v2_6f81, i64* @rax, align 8
  %v0_6f83.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_6f83

dec_label_pc_6f83:                                ; preds = %bb, %dec_label_pc_6f70
  %v0_6f83 = phi i64 [ %v0_6f83.pre, %bb ], [ %v3_6f76, %dec_label_pc_6f70 ]
  %v1_6f83 = add i64 %v0_6f83, 16
  store i64 %v1_6f83, i64* @rcx, align 8
  %v0_6f87 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_6f87, i64* @rbx, align 8
  store i64 %v0_6f83, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_6fa3() local_unnamed_addr {
dec_label_pc_6fa3:
  %v0_6fa3 = load i64, i64* @rax, align 8
  store i64 %v0_6fa3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27UpValue5closeEJvv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6fb0:
  %r12.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v0_6fc1 = load i64, i64* @rdi, align 8
  %v1_6fc1 = add i64 %v0_6fc1, 8
  %v2_6fc1 = inttoptr i64 %v1_6fc1 to i64*
  %v3_6fc1 = load i64, i64* %v2_6fc1, align 8
  store i64 %v0_6fc1, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 1, i64* @rdi, align 8
  %v1_6fd4 = add i64 %v0_6fc1, 16
  %v2_6fd4 = inttoptr i64 %v1_6fd4 to i32*
  %v3_6fd4 = load i32, i32* %v2_6fd4, align 4
  %v4_6fd4 = sext i32 %v3_6fd4 to i64
  store i64 %v4_6fd4, i64* @rdi, align 8
  %v4_6fd8 = add i64 %v3_6fc1, 8
  %v5_6fd8 = inttoptr i64 %v4_6fd8 to i32*
  %v6_6fd8 = load i32, i32* %v5_6fd8, align 4
  %v12_6fd8 = icmp ult i32 %v3_6fd4, %v6_6fd8
  %v1_6fdb = icmp eq i1 %v12_6fd8, false
  br i1 %v1_6fdb, label %bb, label %dec_label_pc_6fdd

bb:                                               ; preds = %dec_label_pc_6fb0
  %v2_6fdb = call i64 @function_703a()
  store i64 %v2_6fdb, i64* @rax, align 8
  br label %dec_label_pc_6fdd

dec_label_pc_6fdd:                                ; preds = %bb, %dec_label_pc_6fb0
  %v0_6fdd = phi i64 [ %v2_6fdb, %bb ], [ 0, %dec_label_pc_6fb0 ]
  store i64 %v0_6fdd, i64* %r12.global-to-local, align 8
  %v1_6fe0 = add i64 %v0_6fdd, 8
  %v2_6fe0 = inttoptr i64 %v1_6fe0 to i32*
  %v3_6fe0 = load i32, i32* %v2_6fe0, align 4
  %v4_6fe0 = zext i32 %v3_6fe0 to i64
  store i64 %v4_6fe0, i64* @rax, align 8
  %v5_6fec = icmp eq i32 %v3_6fe0, 0
  br i1 %v5_6fec, label %bb249, label %dec_label_pc_6ff0

bb249:                                            ; preds = %dec_label_pc_6fdd
  %v3_6fee = call i64 @function_7038(i64 %v4_6fd4)
  store i64 %v3_6fee, i64* @rax, align 8
  %v0_6ff0.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_6ff0

dec_label_pc_6ff0:                                ; preds = %bb249, %dec_label_pc_6fdd
  %v0_6ff0 = phi i64 [ %v0_6ff0.pre, %bb249 ], [ %v0_6fdd, %dec_label_pc_6fdd ]
  store i64 %v0_6ff0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_7038(i64 %arg1) local_unnamed_addr {
dec_label_pc_7038:
  store i64 0, i64* @rdi, align 8
  %v12_7038 = load i64, i64* @rax, align 8
  ret i64 %v12_7038
}

define i64 @function_703a() local_unnamed_addr {
dec_label_pc_703a:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib14setLibInstanceEJvPNS1_8LuaTableE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7050:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_705b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_705b, i64* @rdi, align 8
  store i64 1, i64* @rbx, align 8
  store i64 %v0_705b, i64* @rax, align 8
  %v1_7075 = add i64 %v0_705b, 8
  %v2_7075 = inttoptr i64 %v1_7075 to i32*
  %v3_7075 = load i32, i32* %v2_7075, align 4
  %v5_7080 = icmp eq i32 %v3_7075, 0
  %v6_7080 = icmp slt i32 %v3_7075, 0
  %v3_7083 = icmp eq i1 %v6_7080, false
  %v4_7083 = icmp eq i1 %v5_7080, false
  %v5_7083 = icmp eq i1 %v3_7083, %v4_7083
  br i1 %v5_7083, label %dec_label_pc_70a0, label %dec_label_pc_7085

dec_label_pc_7085:                                ; preds = %dec_label_pc_7050
  %v1_7085 = call i64 @function_70ca(i64 %v0_705b)
  store i64 %v1_7085, i64* @rax, align 8
  ret i64 %v1_7085

dec_label_pc_70a0:                                ; preds = %dec_label_pc_7050
  store i64 28855, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_70ca(i64 %arg1) local_unnamed_addr {
dec_label_pc_70ca:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_70d9() local_unnamed_addr {
dec_label_pc_70d9:
  %v0_70d9 = load i64, i64* @rbx, align 8
  store i64 %v0_70d9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$setuservalue6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_70f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 28974, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm215TailcallVarargs4evalEJPNS1_7VarargsEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_7170:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_7170 = load i64, i64* %r12.global-to-local, align 8
  store i64 29049, i64* %r12.global-to-local, align 8
  %v0_7179 = load i64, i64* %rbp.global-to-local, align 8
  %v0_717a = load i64, i64* @rbx, align 8
  store i64 %v0_717a, i64* %stack_var_-24, align 8
  %v0_717b = load i64, i64* @rdi, align 8
  store i64 %v0_717b, i64* @rbx, align 8
  %v1_717e = add i64 %v0_717b, 24
  %v2_717e = inttoptr i64 %v1_717e to i64*
  %v3_717e = load i64, i64* %v2_717e, align 8
  store i64 %v3_717e, i64* @rax, align 8
  %v1_7182 = icmp eq i64 %v3_717e, 0
  %v1_7185 = icmp eq i1 %v1_7182, false
  br i1 %v1_7185, label %dec_label_pc_71c5, label %dec_label_pc_7187.preheader

dec_label_pc_7187.preheader:                      ; preds = %dec_label_pc_7170
  %v1_7187250 = add i64 %v0_717b, 8
  %v2_7187251 = inttoptr i64 %v1_7187250 to i64*
  %v3_7187252 = load i64, i64* %v2_7187251, align 8
  store i64 %v3_7187252, i64* @rdi, align 8
  %v1_718f256 = inttoptr i64 %v3_7187252 to i64*
  %v2_718f257 = load i64, i64* %v1_718f256, align 8
  store i64 %v2_718f257, i64* @rax, align 8
  store i64 %v2_718f257, i64* %rbp.global-to-local, align 8
  %v1_719b258 = inttoptr i64 %v2_718f257 to i64*
  %v2_719b259 = load i64, i64* %v1_719b258, align 8
  store i64 %v2_719b259, i64* @rax, align 8
  store i64 %v2_718f257, i64* @rdi, align 8
  %v4_71a4260 = trunc i64 %v2_719b259 to i8
  %v5_71a4261 = icmp eq i8 %v4_71a4260, 0
  %v1_71a6262 = icmp eq i1 %v5_71a4261, false
  br i1 %v1_71a6262, label %dec_label_pc_71d0, label %dec_label_pc_71a8

dec_label_pc_71a8:                                ; preds = %dec_label_pc_7187.preheader, %dec_label_pc_71a8.dec_label_pc_7187_crit_edge
  %v2_718f264 = phi i64 [ %v2_718f, %dec_label_pc_71a8.dec_label_pc_7187_crit_edge ], [ %v2_718f257, %dec_label_pc_7187.preheader ]
  %v1_71a8263 = phi i64 [ %v0_7187.pre, %dec_label_pc_71a8.dec_label_pc_7187_crit_edge ], [ %v0_717b, %dec_label_pc_7187.preheader ]
  %v2_71a8 = add i64 %v1_71a8263, 24
  %v3_71a8 = inttoptr i64 %v2_71a8 to i64*
  store i64 %v2_718f264, i64* %v3_71a8, align 8
  %v0_71ac = load i64, i64* @rbx, align 8
  %v1_71ac = add i64 %v0_71ac, 24
  %v2_71ac = inttoptr i64 %v1_71ac to i64*
  %v3_71ac = load i64, i64* %v2_71ac, align 8
  store i64 %v3_71ac, i64* @rax, align 8
  %v1_71b0 = add i64 %v0_71ac, 8
  %v2_71b0 = inttoptr i64 %v1_71b0 to i64*
  store i64 0, i64* %v2_71b0, align 8
  %v0_71b8 = load i64, i64* @rbx, align 8
  %v1_71b8 = add i64 %v0_71b8, 16
  %v2_71b8 = inttoptr i64 %v1_71b8 to i64*
  store i64 0, i64* %v2_71b8, align 8
  %v0_71c0 = load i64, i64* @rax, align 8
  %v1_71c0 = icmp eq i64 %v0_71c0, 0
  br i1 %v1_71c0, label %dec_label_pc_71a8.dec_label_pc_7187_crit_edge, label %dec_label_pc_71c5.loopexit

dec_label_pc_71a8.dec_label_pc_7187_crit_edge:    ; preds = %dec_label_pc_71a8
  %v0_7187.pre = load i64, i64* @rbx, align 8
  %v1_7187 = add i64 %v0_7187.pre, 8
  %v2_7187 = inttoptr i64 %v1_7187 to i64*
  %v3_7187 = load i64, i64* %v2_7187, align 8
  store i64 %v3_7187, i64* @rdi, align 8
  %v1_718f = inttoptr i64 %v3_7187 to i64*
  %v2_718f = load i64, i64* %v1_718f, align 8
  store i64 %v2_718f, i64* @rax, align 8
  store i64 %v2_718f, i64* %rbp.global-to-local, align 8
  %v1_719b = inttoptr i64 %v2_718f to i64*
  %v2_719b = load i64, i64* %v1_719b, align 8
  store i64 %v2_719b, i64* @rax, align 8
  store i64 %v2_718f, i64* @rdi, align 8
  %v4_71a4 = trunc i64 %v2_719b to i8
  %v5_71a4 = icmp eq i8 %v4_71a4, 0
  %v1_71a6 = icmp eq i1 %v5_71a4, false
  br i1 %v1_71a6, label %dec_label_pc_7187.dec_label_pc_71d0_crit_edge, label %dec_label_pc_71a8

dec_label_pc_71c5.loopexit:                       ; preds = %dec_label_pc_71a8
  %v2_71c5.pre = load i64, i64* %stack_var_-24, align 8
  br label %dec_label_pc_71c5

dec_label_pc_71c5:                                ; preds = %dec_label_pc_71c5.loopexit, %dec_label_pc_7170
  %v0_71c9 = phi i64 [ %v0_71c0, %dec_label_pc_71c5.loopexit ], [ %v3_717e, %dec_label_pc_7170 ]
  %v2_71c5 = phi i64 [ %v2_71c5.pre, %dec_label_pc_71c5.loopexit ], [ %v0_717a, %dec_label_pc_7170 ]
  store i64 %v2_71c5, i64* @rbx, align 8
  store i64 %v0_7179, i64* %rbp.global-to-local, align 8
  store i64 %v0_7170, i64* %r12.global-to-local, align 8
  ret i64 %v0_71c9

dec_label_pc_7187.dec_label_pc_71d0_crit_edge:    ; preds = %dec_label_pc_71a8.dec_label_pc_7187_crit_edge
  %v0_71d3.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_71d0

dec_label_pc_71d0:                                ; preds = %dec_label_pc_7187.dec_label_pc_71d0_crit_edge, %dec_label_pc_7187.preheader
  %v0_71d3 = phi i64 [ %v0_71d3.pre, %dec_label_pc_7187.dec_label_pc_71d0_crit_edge ], [ 29049, %dec_label_pc_7187.preheader ]
  store i64 %v0_71d3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot9strongkeyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_71f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 29183, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot11strongvalueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_7210:
  store i64 %arg1, i64* @rdi, align 8
  store i64 29215, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm219WeakTable$WeakValue11strongvalueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_7230:
  store i64 %arg1, i64* @rdi, align 8
  store i64 29253, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm219WeakTable$WeakValue5raweqEJbPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7260:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_7261 = load i64, i64* @rdi, align 8
  %v1_7261 = add i64 %v0_7261, 8
  %v2_7261 = inttoptr i64 %v1_7261 to i64*
  %v3_7261 = load i64, i64* %v2_7261, align 8
  store i64 %v3_7261, i64* @rdi, align 8
  %v0_7265 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_7265, i64* @rbx, align 8
  %v1_7268 = inttoptr i64 %v3_7261 to i64*
  %v2_7268 = load i64, i64* %v1_7268, align 8
  store i64 %v2_7268, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 29311, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN4lang4LangC1Ev() local_unnamed_addr {
dec_label_pc_72a0:
  %v17_72a0 = load i64, i64* @rax, align 8
  ret i64 %v17_72a0
}

define i64 @_ZN4lang9LangValueC1EPN3org4luaj3vm28LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_72b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_72b5 = load i64, i64* @rdi, align 8
  store i64 %v0_72b5, i64* @rbx, align 8
  %v17_72b8 = load i64, i64* @rax, align 8
  ret i64 %v17_72b8
}

define i64 @_ZN8testmainC1Ev() local_unnamed_addr {
dec_label_pc_72d0:
  %v17_72d0 = load i64, i64* @rax, align 8
  ret i64 %v17_72d0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrameC1Ev"() local_unnamed_addr {
dec_label_pc_72e0:
  %v17_72e0 = load i64, i64* @rax, align 8
  ret i64 %v17_72e0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStackC1Ev"(i64 %arg1) local_unnamed_addr {
dec_label_pc_72f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_72f1 = load i64, i64* @rdi, align 8
  store i64 %v0_72f1, i64* @rbx, align 8
  %v1_72f1 = load i64, i64* @rax, align 8
  ret i64 %v1_72f1
}

define i64 @"_ZN3org4luaj3vm23lib8DebugLib9callstackEJPNS2_18DebugLib$CallStackEPNS1_9LuaThreadE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7310:
  store i64 %arg1, i64* @rdi, align 8
  %v1_7315 = add i64 %arg2, 16
  %v2_7315 = inttoptr i64 %v1_7315 to i64*
  %v3_7315 = load i64, i64* %v2_7315, align 8
  store i64 %v3_7315, i64* @rbx, align 8
  %v1_7319 = icmp eq i64 %v3_7315, 0
  br i1 %v1_7319, label %bb, label %dec_label_pc_731e

bb:                                               ; preds = %dec_label_pc_7310
  %v3_731c = call i64 @function_7338(i64 %arg1, i64 %arg2)
  store i64 %v3_731c, i64* @rax, align 8
  br label %dec_label_pc_731e

dec_label_pc_731e:                                ; preds = %bb, %dec_label_pc_7310
  store i64 29477, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_7338(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7338:
  store i64 %arg1, i64* @rdi, align 8
  store i64 29503, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib17DebugLib$NameWhatC1EPN4java4lang6StringES7_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7380:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_738a = load i64, i64* @rdi, align 8
  store i64 %v0_738a, i64* @rbx, align 8
  %v1_738a = load i64, i64* @rax, align 8
  ret i64 %v1_738a
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$DebugInfoC1Ev"() local_unnamed_addr {
dec_label_pc_73a0:
  %v17_73a0 = load i64, i64* @rax, align 8
  ret i64 %v17_73a0
}

define i64 @_ZN3org4luaj3vm26BufferC1EPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_73b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_73b5 = load i64, i64* @rdi, align 8
  store i64 %v0_73b5, i64* @rbx, align 8
  %v17_73b8 = load i64, i64* @rax, align 8
  ret i64 %v17_73b8
}

define i64 @_ZN3org4luaj3vm28LuaValue6bufferEJPNS1_6BufferEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_73f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 29692, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29UpvaldescC1EPNS1_9LuaStringEbi(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_7440:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_744c = load i64, i64* @rdi, align 8
  store i64 %v0_744c, i64* @rbx, align 8
  %v17_7451 = load i64, i64* @rax, align 8
  ret i64 %v17_7451
}

define i64 @_ZN3org4luaj3vm29PrototypeC1Ev(i64 %arg1) local_unnamed_addr {
dec_label_pc_7480:
  store i64 %arg1, i64* @rdi, align 8
  %v0_7481 = load i64, i64* @rdi, align 8
  store i64 %v0_7481, i64* @rbx, align 8
  %v1_7481 = load i64, i64* @rax, align 8
  ret i64 %v1_7481
}

define i64 @_ZN3org4luaj3vm29PrototypeC1Ei(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_74b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_74b4 = load i64, i64* @rdi, align 8
  store i64 %v0_74b4, i64* @rbx, align 8
  %v17_74b7 = load i64, i64* @rax, align 8
  ret i64 %v17_74b7
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlotC1EPN4java4lang6ObjectES6_PNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_74f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_74fc = load i64, i64* @rdi, align 8
  store i64 %v0_74fc, i64* @rbx, align 8
  %v17_7502 = load i64, i64* @rax, align 8
  ret i64 %v17_7502
}

define i64 @"_ZN3org4luaj3vm223WeakTable$WeakValueSlotC1EPS2_PNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7530:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_7539 = load i64, i64* @rdi, align 8
  store i64 %v0_7539, i64* @rbx, align 8
  %v4_7544 = load i64, i64* @rax, align 8
  ret i64 %v4_7544
}

define i64 @"_ZN3org4luaj3vm223WeakTable$WeakValueSlot4copyEJPNS1_18WeakTable$WeakSlotEPNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7570:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 30082, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm221WeakTable$WeakKeySlotC1EPS2_PNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_75c0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_75ce = load i64, i64* @rdi, align 8
  store i64 %v0_75ce, i64* @rbx, align 8
  %v4_75d5 = load i64, i64* @rax, align 8
  ret i64 %v4_75d5
}

define i64 @"_ZN3org4luaj3vm221WeakTable$WeakKeySlot4copyEJPNS1_18WeakTable$WeakSlotEPNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7600:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm229WeakTable$WeakKeyAndValueSlotC1EPS2_PNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7650:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_765e = load i64, i64* @rdi, align 8
  store i64 %v0_765e, i64* @rbx, align 8
  %v4_7665 = load i64, i64* @rax, align 8
  ret i64 %v4_7665
}

define i64 @"_ZN3org4luaj3vm229WeakTable$WeakKeyAndValueSlot4copyEJPNS1_18WeakTable$WeakSlotEPNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7690:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29WeakTableC1EbbPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_76e0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_76ec = load i64, i64* @rdi, align 8
  store i64 %v0_76ec, i64* @rbx, align 8
  %v17_76f2 = load i64, i64* @rax, align 8
  ret i64 %v17_76f2
}

define i64 @_ZN3org4luaj3vm23LuaC1Ev() local_unnamed_addr {
dec_label_pc_7720:
  %v17_7720 = load i64, i64* @rax, align 8
  ret i64 %v17_7720
}

define i64 @_ZN3org4luaj3vm25PrintC1Ev() local_unnamed_addr {
dec_label_pc_7730:
  %v17_7730 = load i64, i64* @rax, align 8
  ret i64 %v17_7730
}

define i64 @_ZN3org4luaj3vm27VarargsC1Ev() local_unnamed_addr {
dec_label_pc_7740:
  %v17_7740 = load i64, i64* @rax, align 8
  ret i64 %v17_7740
}

define i64 @_ZN3org4luaj3vm215TailcallVarargsC1EPNS1_8LuaValueEPNS1_7VarargsE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7750:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_775a = load i64, i64* @rdi, align 8
  store i64 %v0_775a, i64* @rbx, align 8
  %v1_775a = load i64, i64* @rax, align 8
  ret i64 %v1_775a
}

define i64 @_ZN3org4luaj3vm28LuaValueC1Ev() local_unnamed_addr {
dec_label_pc_7770:
  %v17_7770 = load i64, i64* @rax, align 8
  ret i64 %v17_7770
}

define i64 @"_ZN3org4luaj3vm23lib10IoLib$FileC1EPNS2_5IoLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7780:
  store i64 %arg1, i64* @rdi, align 8
  %v1_7784 = load i64, i64* @rdi, align 8
  %v2_7784 = add i64 %v1_7784, 8
  %v3_7784 = inttoptr i64 %v2_7784 to i64*
  store i64 %arg2, i64* %v3_7784, align 8
  %v4_7784 = load i64, i64* @rax, align 8
  ret i64 %v4_7784
}

define i64 @_ZN3org4luaj3vm26LuaNilC1Ev() local_unnamed_addr {
dec_label_pc_77a0:
  %v17_77a0 = load i64, i64* @rax, align 8
  ret i64 %v17_77a0
}

define i64 @_ZN3org4luaj3vm26LuaNil18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_77b0:
  store i64 30648, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm213LuaValue$NoneC1Ev"() local_unnamed_addr {
dec_label_pc_77e0:
  %v17_77e0 = load i64, i64* @rax, align 8
  ret i64 %v17_77e0
}

define i64 @"_ZN3org4luaj3vm213LuaValue$None18__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_77f0:
  store i64 30712, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaNumberC1Ev() local_unnamed_addr {
dec_label_pc_7820:
  %v17_7820 = load i64, i64* @rax, align 8
  ret i64 %v17_7820
}

define i64 @_ZN3org4luaj3vm29LuaDoubleC1Ed(i64 %arg1) local_unnamed_addr {
dec_label_pc_7830:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_7831 = load i64, i64* @rdi, align 8
  store i64 %v0_7831, i64* @rbx, align 8
  %v0_7838 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_7838 = call i64 @__asm_movsd.7465(i128 %v0_7838)
  %v5_7838 = load i64, i64* @rax, align 8
  ret i64 %v5_7838
}

define i64 @_ZN3org4luaj3vm29LuaDouble18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_7860:
  store i64 30824, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaIntegerC1Ei(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_78f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_78f4 = load i64, i64* @rdi, align 8
  store i64 %v0_78f4, i64* @rbx, align 8
  %v17_78f7 = load i64, i64* @rax, align 8
  ret i64 %v17_78f7
}

define i64 @_ZN3org4luaj3vm210LuaInteger18__U3c_clinit__U3e_EJvv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7910:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 512, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_7948() local_unnamed_addr {
dec_label_pc_7948:
  %v1_7948 = load i64, i64* @rax, align 8
  ret i64 %v1_7948
}

define i64 @function_794f() local_unnamed_addr {
dec_label_pc_794f:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_79a3() local_unnamed_addr {
dec_label_pc_79a3:
  %v0_79a3 = load i64, i64* @rbx, align 8
  store i64 %v0_79a3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaBooleanC1Eb(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_79b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_79b4 = load i64, i64* @rdi, align 8
  store i64 %v0_79b4, i64* @rbx, align 8
  %v17_79b7 = load i64, i64* @rax, align 8
  ret i64 %v17_79b7
}

define i64 @_ZN3org4luaj3vm210LuaBoolean18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_79d0:
  store i64 31192, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdataC1EPN4java4lang6ObjectE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7a20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_7a25 = load i64, i64* @rdi, align 8
  store i64 %v0_7a25, i64* @rbx, align 8
  %v17_7a28 = load i64, i64* @rax, align 8
  ret i64 %v17_7a28
}

define i64 @_ZN3org4luaj3vm211LuaUserdataC1EPN4java4lang6ObjectEPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7a40:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_7a4a = load i64, i64* @rdi, align 8
  store i64 %v0_7a4a, i64* @rbx, align 8
  %v1_7a4a = load i64, i64* @rax, align 8
  ret i64 %v1_7a4a
}

define i64 @_ZN3org4luaj3vm211LuaFunctionC1Ev() local_unnamed_addr {
dec_label_pc_7a60:
  %v17_7a60 = load i64, i64* @rax, align 8
  ret i64 %v17_7a60
}

define i64 @_ZN3org4luaj3vm23lib11LibFunctionC1Ev() local_unnamed_addr {
dec_label_pc_7a70:
  %v17_7a70 = load i64, i64* @rax, align 8
  ret i64 %v17_7a70
}

define i64 @_ZN3org4luaj3vm23lib14VarArgFunctionC1Ev() local_unnamed_addr {
dec_label_pc_7a80:
  %v17_7a80 = load i64, i64* @rax, align 8
  ret i64 %v17_7a80
}

define i64 @"_ZN4lang15lang_luaj$77$20C1Ev"() local_unnamed_addr {
dec_label_pc_7a90:
  %v17_7a90 = load i64, i64* @rax, align 8
  ret i64 %v17_7a90
}

define i64 @"_ZN4lang14lang_luaj$44$2C1Ev"() local_unnamed_addr {
dec_label_pc_7aa0:
  %v17_7aa0 = load i64, i64* @rax, align 8
  ret i64 %v17_7aa0
}

define i64 @"_ZN4lang14lang_luaj$56$0C1Ev"() local_unnamed_addr {
dec_label_pc_7ab0:
  %v17_7ab0 = load i64, i64* @rax, align 8
  ret i64 %v17_7ab0
}

define i64 @"_ZN4lang12lang_luaj$73C1Ev"() local_unnamed_addr {
dec_label_pc_7ac0:
  %v17_7ac0 = load i64, i64* @rax, align 8
  ret i64 %v17_7ac0
}

define i64 @"_ZN4lang12lang_luaj$65C1Ev"() local_unnamed_addr {
dec_label_pc_7ad0:
  %v17_7ad0 = load i64, i64* @rax, align 8
  ret i64 %v17_7ad0
}

define i64 @"_ZN4lang14lang_luaj$77$6C1Ev"() local_unnamed_addr {
dec_label_pc_7ae0:
  %v17_7ae0 = load i64, i64* @rax, align 8
  ret i64 %v17_7ae0
}

define i64 @"_ZN4lang15lang_luaj$76$11C1Ev"() local_unnamed_addr {
dec_label_pc_7af0:
  %v17_7af0 = load i64, i64* @rax, align 8
  ret i64 %v17_7af0
}

define i64 @"_ZN4lang14lang_luaj$57$0C1Ev"() local_unnamed_addr {
dec_label_pc_7b00:
  %v17_7b00 = load i64, i64* @rax, align 8
  ret i64 %v17_7b00
}

define i64 @"_ZN4lang17lang_luaj$76$15$1C1Ev"() local_unnamed_addr {
dec_label_pc_7b10:
  %v17_7b10 = load i64, i64* @rax, align 8
  ret i64 %v17_7b10
}

define i64 @"_ZN4lang15lang_luaj$77$16C1Ev"() local_unnamed_addr {
dec_label_pc_7b20:
  %v17_7b20 = load i64, i64* @rax, align 8
  ret i64 %v17_7b20
}

define i64 @"_ZN4lang17lang_luaj$77$20$1C1Ev"() local_unnamed_addr {
dec_label_pc_7b30:
  %v17_7b30 = load i64, i64* @rax, align 8
  ret i64 %v17_7b30
}

define i64 @"_ZN4lang17lang_luaj$77$17$0C1Ev"() local_unnamed_addr {
dec_label_pc_7b40:
  %v17_7b40 = load i64, i64* @rax, align 8
  ret i64 %v17_7b40
}

define i64 @"_ZN4lang15lang_luaj$77$174callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7b50:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 31586, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$77C1Ev"() local_unnamed_addr {
dec_label_pc_7be0:
  %v17_7be0 = load i64, i64* @rax, align 8
  ret i64 %v17_7be0
}

define i64 @"_ZN4lang14lang_luaj$69$0C1Ev"() local_unnamed_addr {
dec_label_pc_7bf0:
  %v17_7bf0 = load i64, i64* @rax, align 8
  ret i64 %v17_7bf0
}

define i64 @"_ZN4lang14lang_luaj$76$8C1Ev"() local_unnamed_addr {
dec_label_pc_7c00:
  %v17_7c00 = load i64, i64* @rax, align 8
  ret i64 %v17_7c00
}

define i64 @"_ZN4lang12lang_luaj$76C1Ev"() local_unnamed_addr {
dec_label_pc_7c10:
  %v17_7c10 = load i64, i64* @rax, align 8
  ret i64 %v17_7c10
}

define i64 @"_ZN4lang15lang_luaj$77$15C1Ev"() local_unnamed_addr {
dec_label_pc_7c20:
  %v17_7c20 = load i64, i64* @rax, align 8
  ret i64 %v17_7c20
}

define i64 @"_ZN4lang12lang_luaj$41C1Ev"() local_unnamed_addr {
dec_label_pc_7c30:
  %v17_7c30 = load i64, i64* @rax, align 8
  ret i64 %v17_7c30
}

define i64 @"_ZN4lang14lang_luaj$76$6C1Ev"() local_unnamed_addr {
dec_label_pc_7c40:
  %v17_7c40 = load i64, i64* @rax, align 8
  ret i64 %v17_7c40
}

define i64 @"_ZN4lang14lang_luaj$69$2C1Ev"() local_unnamed_addr {
dec_label_pc_7c50:
  %v17_7c50 = load i64, i64* @rax, align 8
  ret i64 %v17_7c50
}

define i64 @"_ZN4lang15lang_luaj$76$17C1Ev"() local_unnamed_addr {
dec_label_pc_7c60:
  %v17_7c60 = load i64, i64* @rax, align 8
  ret i64 %v17_7c60
}

define i64 @"_ZN4lang14lang_luaj$69$1C1Ev"() local_unnamed_addr {
dec_label_pc_7c70:
  %v17_7c70 = load i64, i64* @rax, align 8
  ret i64 %v17_7c70
}

define i64 @"_ZN4lang12lang_luaj$69C1Ev"() local_unnamed_addr {
dec_label_pc_7c80:
  %v17_7c80 = load i64, i64* @rax, align 8
  ret i64 %v17_7c80
}

define i64 @"_ZN4lang15lang_luaj$77$21C1Ev"() local_unnamed_addr {
dec_label_pc_7c90:
  %v17_7c90 = load i64, i64* @rax, align 8
  ret i64 %v17_7c90
}

define i64 @"_ZN4lang17lang_luaj$77$15$1C1Ev"() local_unnamed_addr {
dec_label_pc_7ca0:
  %v17_7ca0 = load i64, i64* @rax, align 8
  ret i64 %v17_7ca0
}

define i64 @"_ZN4lang14lang_luaj$76$7C1Ev"() local_unnamed_addr {
dec_label_pc_7cb0:
  %v17_7cb0 = load i64, i64* @rax, align 8
  ret i64 %v17_7cb0
}

define i64 @"_ZN4lang14lang_luaj$77$8C1Ev"() local_unnamed_addr {
dec_label_pc_7cc0:
  %v17_7cc0 = load i64, i64* @rax, align 8
  ret i64 %v17_7cc0
}

define i64 @_ZN4lang9lang_luajC1Ev() local_unnamed_addr {
dec_label_pc_7cd0:
  %v17_7cd0 = load i64, i64* @rax, align 8
  ret i64 %v17_7cd0
}

define i64 @"_ZN4lang14lang_luaj$67$0C1Ev"() local_unnamed_addr {
dec_label_pc_7ce0:
  %v17_7ce0 = load i64, i64* @rax, align 8
  ret i64 %v17_7ce0
}

define i64 @"_ZN4lang12lang_luaj$71C1Ev"() local_unnamed_addr {
dec_label_pc_7cf0:
  %v17_7cf0 = load i64, i64* @rax, align 8
  ret i64 %v17_7cf0
}

define i64 @"_ZN4lang16lang_luaj$76$7$0C1Ev"() local_unnamed_addr {
dec_label_pc_7d00:
  %v17_7d00 = load i64, i64* @rax, align 8
  ret i64 %v17_7d00
}

define i64 @"_ZN4lang15lang_luaj$76$16C1Ev"() local_unnamed_addr {
dec_label_pc_7d10:
  %v17_7d10 = load i64, i64* @rax, align 8
  ret i64 %v17_7d10
}

define i64 @"_ZN4lang12lang_luaj$64C1Ev"() local_unnamed_addr {
dec_label_pc_7d20:
  %v17_7d20 = load i64, i64* @rax, align 8
  ret i64 %v17_7d20
}

define i64 @"_ZN4lang12lang_luaj$70C1Ev"() local_unnamed_addr {
dec_label_pc_7d30:
  %v17_7d30 = load i64, i64* @rax, align 8
  ret i64 %v17_7d30
}

define i64 @"_ZN4lang17lang_luaj$77$22$1C1Ev"() local_unnamed_addr {
dec_label_pc_7d40:
  %v17_7d40 = load i64, i64* @rax, align 8
  ret i64 %v17_7d40
}

define i64 @"_ZN4lang12lang_luaj$48C1Ev"() local_unnamed_addr {
dec_label_pc_7d50:
  %v17_7d50 = load i64, i64* @rax, align 8
  ret i64 %v17_7d50
}

define i64 @"_ZN4lang15lang_luaj$77$19C1Ev"() local_unnamed_addr {
dec_label_pc_7d60:
  %v17_7d60 = load i64, i64* @rax, align 8
  ret i64 %v17_7d60
}

define i64 @"_ZN4lang12lang_luaj$49C1Ev"() local_unnamed_addr {
dec_label_pc_7d70:
  %v17_7d70 = load i64, i64* @rax, align 8
  ret i64 %v17_7d70
}

define i64 @"_ZN4lang12lang_luaj$57C1Ev"() local_unnamed_addr {
dec_label_pc_7d80:
  %v17_7d80 = load i64, i64* @rax, align 8
  ret i64 %v17_7d80
}

define i64 @"_ZN4lang15lang_luaj$77$11C1Ev"() local_unnamed_addr {
dec_label_pc_7d90:
  %v17_7d90 = load i64, i64* @rax, align 8
  ret i64 %v17_7d90
}

define i64 @"_ZN4lang12lang_luaj$75C1Ev"() local_unnamed_addr {
dec_label_pc_7da0:
  %v17_7da0 = load i64, i64* @rax, align 8
  ret i64 %v17_7da0
}

define i64 @"_ZN4lang15lang_luaj$77$12C1Ev"() local_unnamed_addr {
dec_label_pc_7db0:
  %v17_7db0 = load i64, i64* @rax, align 8
  ret i64 %v17_7db0
}

define i64 @"_ZN4lang12lang_luaj$44C1Ev"() local_unnamed_addr {
dec_label_pc_7dc0:
  %v17_7dc0 = load i64, i64* @rax, align 8
  ret i64 %v17_7dc0
}

define i64 @"_ZN4lang15lang_luaj$77$22C1Ev"() local_unnamed_addr {
dec_label_pc_7dd0:
  %v17_7dd0 = load i64, i64* @rax, align 8
  ret i64 %v17_7dd0
}

define i64 @"_ZN4lang17lang_luaj$77$21$1C1Ev"() local_unnamed_addr {
dec_label_pc_7de0:
  %v17_7de0 = load i64, i64* @rax, align 8
  ret i64 %v17_7de0
}

define i64 @"_ZN4lang12lang_luaj$74C1Ev"() local_unnamed_addr {
dec_label_pc_7df0:
  %v17_7df0 = load i64, i64* @rax, align 8
  ret i64 %v17_7df0
}

define i64 @"_ZN4lang17lang_luaj$76$13$0C1Ev"() local_unnamed_addr {
dec_label_pc_7e00:
  %v17_7e00 = load i64, i64* @rax, align 8
  ret i64 %v17_7e00
}

define i64 @"_ZN4lang15lang_luaj$76$134callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7e10:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 32290, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$18$0C1Ev"() local_unnamed_addr {
dec_label_pc_7ea0:
  %v17_7ea0 = load i64, i64* @rax, align 8
  ret i64 %v17_7ea0
}

define i64 @"_ZN4lang15lang_luaj$77$184callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7eb0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 32450, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$44$1C1Ev"() local_unnamed_addr {
dec_label_pc_7f40:
  %v17_7f40 = load i64, i64* @rax, align 8
  ret i64 %v17_7f40
}

define i64 @"_ZN4lang12lang_luaj$60C1Ev"() local_unnamed_addr {
dec_label_pc_7f50:
  %v17_7f50 = load i64, i64* @rax, align 8
  ret i64 %v17_7f50
}

define i64 @"_ZN4lang17lang_luaj$76$12$0C1Ev"() local_unnamed_addr {
dec_label_pc_7f60:
  %v17_7f60 = load i64, i64* @rax, align 8
  ret i64 %v17_7f60
}

define i64 @"_ZN4lang15lang_luaj$76$124callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7f70:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 32642, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$68$0C1Ev"() local_unnamed_addr {
dec_label_pc_8000:
  %v17_8000 = load i64, i64* @rax, align 8
  ret i64 %v17_8000
}

define i64 @"_ZN4lang17lang_luaj$76$17$1C1Ev"() local_unnamed_addr {
dec_label_pc_8010:
  %v17_8010 = load i64, i64* @rax, align 8
  ret i64 %v17_8010
}

define i64 @"_ZN4lang16lang_luaj$77$7$0C1Ev"() local_unnamed_addr {
dec_label_pc_8020:
  %v17_8020 = load i64, i64* @rax, align 8
  ret i64 %v17_8020
}

define i64 @"_ZN4lang14lang_luaj$77$7C1Ev"() local_unnamed_addr {
dec_label_pc_8030:
  %v17_8030 = load i64, i64* @rax, align 8
  ret i64 %v17_8030
}

define i64 @"_ZN4lang12lang_luaj$58C1Ev"() local_unnamed_addr {
dec_label_pc_8040:
  %v17_8040 = load i64, i64* @rax, align 8
  ret i64 %v17_8040
}

define i64 @"_ZN4lang12lang_luaj$61C1Ev"() local_unnamed_addr {
dec_label_pc_8050:
  %v17_8050 = load i64, i64* @rax, align 8
  ret i64 %v17_8050
}

define i64 @"_ZN4lang14lang_luaj$77$9C1Ev"() local_unnamed_addr {
dec_label_pc_8060:
  %v17_8060 = load i64, i64* @rax, align 8
  ret i64 %v17_8060
}

define i64 @"_ZN4lang12lang_luaj$51C1Ev"() local_unnamed_addr {
dec_label_pc_8070:
  %v17_8070 = load i64, i64* @rax, align 8
  ret i64 %v17_8070
}

define i64 @"_ZN4lang12lang_luaj$55C1Ev"() local_unnamed_addr {
dec_label_pc_8080:
  %v17_8080 = load i64, i64* @rax, align 8
  ret i64 %v17_8080
}

define i64 @"_ZN4lang12lang_luaj$72C1Ev"() local_unnamed_addr {
dec_label_pc_8090:
  %v17_8090 = load i64, i64* @rax, align 8
  ret i64 %v17_8090
}

define i64 @"_ZN4lang12lang_luaj$56C1Ev"() local_unnamed_addr {
dec_label_pc_80a0:
  %v17_80a0 = load i64, i64* @rax, align 8
  ret i64 %v17_80a0
}

define i64 @"_ZN4lang12lang_luaj$62C1Ev"() local_unnamed_addr {
dec_label_pc_80b0:
  %v17_80b0 = load i64, i64* @rax, align 8
  ret i64 %v17_80b0
}

define i64 @"_ZN4lang14lang_luaj$76$9C1Ev"() local_unnamed_addr {
dec_label_pc_80c0:
  %v17_80c0 = load i64, i64* @rax, align 8
  ret i64 %v17_80c0
}

define i64 @"_ZN4lang14lang_luaj$53$0C1Ev"() local_unnamed_addr {
dec_label_pc_80d0:
  %v17_80d0 = load i64, i64* @rax, align 8
  ret i64 %v17_80d0
}

define i64 @"_ZN4lang15lang_luaj$76$15C1Ev"() local_unnamed_addr {
dec_label_pc_80e0:
  %v17_80e0 = load i64, i64* @rax, align 8
  ret i64 %v17_80e0
}

define i64 @"_ZN4lang15lang_luaj$76$14C1Ev"() local_unnamed_addr {
dec_label_pc_80f0:
  %v17_80f0 = load i64, i64* @rax, align 8
  ret i64 %v17_80f0
}

define i64 @"_ZN4lang16lang_luaj$78$0$0C1Ev"() local_unnamed_addr {
dec_label_pc_8100:
  %v17_8100 = load i64, i64* @rax, align 8
  ret i64 %v17_8100
}

define i64 @"_ZN4lang12lang_luaj$54C1Ev"() local_unnamed_addr {
dec_label_pc_8110:
  %v17_8110 = load i64, i64* @rax, align 8
  ret i64 %v17_8110
}

define i64 @"_ZN4lang12lang_luaj$63C1Ev"() local_unnamed_addr {
dec_label_pc_8120:
  %v17_8120 = load i64, i64* @rax, align 8
  ret i64 %v17_8120
}

define i64 @"_ZN4lang14lang_luaj$56$1C1Ev"() local_unnamed_addr {
dec_label_pc_8130:
  %v17_8130 = load i64, i64* @rax, align 8
  ret i64 %v17_8130
}

define i64 @"_ZN4lang14lang_luaj$78$0C1Ev"() local_unnamed_addr {
dec_label_pc_8140:
  %v17_8140 = load i64, i64* @rax, align 8
  ret i64 %v17_8140
}

define i64 @"_ZN4lang17lang_luaj$77$15$0C1Ev"() local_unnamed_addr {
dec_label_pc_8150:
  %v17_8150 = load i64, i64* @rax, align 8
  ret i64 %v17_8150
}

define i64 @"_ZN4lang11lang_luaj$2C1Ev"() local_unnamed_addr {
dec_label_pc_8160:
  %v17_8160 = load i64, i64* @rax, align 8
  ret i64 %v17_8160
}

define i64 @"_ZN4lang12lang_luaj$53C1Ev"() local_unnamed_addr {
dec_label_pc_8170:
  %v17_8170 = load i64, i64* @rax, align 8
  ret i64 %v17_8170
}

define i64 @"_ZN4lang12lang_luaj$78C1Ev"() local_unnamed_addr {
dec_label_pc_8180:
  %v17_8180 = load i64, i64* @rax, align 8
  ret i64 %v17_8180
}

define i64 @"_ZN4lang17lang_luaj$76$16$1C1Ev"() local_unnamed_addr {
dec_label_pc_8190:
  %v17_8190 = load i64, i64* @rax, align 8
  ret i64 %v17_8190
}

define i64 @"_ZN4lang14lang_luaj$74$0C1Ev"() local_unnamed_addr {
dec_label_pc_81a0:
  %v17_81a0 = load i64, i64* @rax, align 8
  ret i64 %v17_81a0
}

define i64 @"_ZN3org4luaj3vm23lib12IoLib$IoLibVC1Ev"() local_unnamed_addr {
dec_label_pc_81b0:
  %v17_81b0 = load i64, i64* @rax, align 8
  ret i64 %v17_81b0
}

define i64 @"_ZN3org4luaj3vm23lib12IoLib$IoLibVC1EPNS2_10IoLib$FileEPN4java4lang6StringEiPNS2_5IoLibE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_81c0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r8.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* %r8.global-to-local, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_81c0 = load i64, i64* %r14.global-to-local, align 8
  %v0_81c2 = load i64, i64* %r13.global-to-local, align 8
  %v0_81c4 = load i64, i64* %rsi.global-to-local, align 8
  %v0_81c7 = load i64, i64* %r12.global-to-local, align 8
  %v0_81c9 = load i64, i64* %rbp.global-to-local, align 8
  %v0_81ca = load i64, i64* @rdx, align 8
  store i64 %v0_81ca, i64* %r13.global-to-local, align 8
  %v0_81cd = load i64, i64* @rbx, align 8
  %v0_81ce = load i64, i64* @rcx, align 8
  store i64 %v0_81ce, i64* %r12.global-to-local, align 8
  %v0_81d1 = load i64, i64* @rdi, align 8
  store i64 %v0_81d1, i64* @rbx, align 8
  %v0_81d4 = load i64, i64* %r8.global-to-local, align 8
  store i64 %v0_81d4, i64* %rbp.global-to-local, align 8
  %v2_81dc = add i64 %v0_81d1, 24
  %v3_81dc = inttoptr i64 %v2_81dc to i64*
  store i64 %v0_81c4, i64* %v3_81dc, align 8
  %v0_81e0 = load i64, i64* %r13.global-to-local, align 8
  %v1_81e0 = load i64, i64* @rbx, align 8
  %v2_81e0 = add i64 %v1_81e0, 16
  %v3_81e0 = inttoptr i64 %v2_81e0 to i64*
  store i64 %v0_81e0, i64* %v3_81e0, align 8
  %v0_81e4 = load i64, i64* %r12.global-to-local, align 8
  %v1_81e4 = trunc i64 %v0_81e4 to i32
  %v2_81e4 = load i64, i64* @rbx, align 8
  %v3_81e4 = add i64 %v2_81e4, 8
  %v4_81e4 = inttoptr i64 %v3_81e4 to i32*
  store i32 %v1_81e4, i32* %v4_81e4, align 4
  %v0_81e8 = load i64, i64* %rbp.global-to-local, align 8
  %v1_81e8 = load i64, i64* @rbx, align 8
  %v2_81e8 = add i64 %v1_81e8, 32
  %v3_81e8 = inttoptr i64 %v2_81e8 to i64*
  store i64 %v0_81e8, i64* %v3_81e8, align 8
  store i64 %v0_81cd, i64* @rbx, align 8
  store i64 %v0_81c9, i64* %rbp.global-to-local, align 8
  store i64 %v0_81c7, i64* %r12.global-to-local, align 8
  store i64 %v0_81c2, i64* %r13.global-to-local, align 8
  store i64 %v0_81c0, i64* %r14.global-to-local, align 8
  %v0_81f4 = load i64, i64* @rax, align 8
  ret i64 %v0_81f4
}

define i64 @"_ZN3org4luaj3vm23lib23PackageLib$lua_searcherC1EPNS2_10PackageLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8200:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8204 = load i64, i64* @rdi, align 8
  %v2_8204 = add i64 %v1_8204, 24
  %v3_8204 = inttoptr i64 %v2_8204 to i64*
  store i64 %arg2, i64* %v3_8204, align 8
  %v4_8204 = load i64, i64* @rax, align 8
  ret i64 %v4_8204
}

define i64 @"_ZN3org4luaj3vm23lib27PackageLib$preload_searcherC1EPNS2_10PackageLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8220:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8224 = load i64, i64* @rdi, align 8
  %v2_8224 = add i64 %v1_8224, 24
  %v3_8224 = inttoptr i64 %v2_8224 to i64*
  store i64 %arg2, i64* %v3_8224, align 8
  %v4_8224 = load i64, i64* @rax, align 8
  ret i64 %v4_8224
}

define i64 @"_ZN3org4luaj3vm23lib24PackageLib$java_searcherC1EPNS2_10PackageLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8240:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8244 = load i64, i64* @rdi, align 8
  %v2_8244 = add i64 %v1_8244, 24
  %v3_8244 = inttoptr i64 %v2_8244 to i64*
  store i64 %arg2, i64* %v3_8244, align 8
  %v4_8244 = load i64, i64* @rax, align 8
  ret i64 %v4_8244
}

define i64 @"_ZN3org4luaj3vm23lib21PackageLib$searchpathC1EPNS2_10PackageLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8260:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8264 = load i64, i64* @rdi, align 8
  %v2_8264 = add i64 %v1_8264, 24
  %v3_8264 = inttoptr i64 %v2_8264 to i64*
  store i64 %arg2, i64* %v3_8264, align 8
  %v4_8264 = load i64, i64* @rax, align 8
  ret i64 %v4_8264
}

define i64 @"_ZN3org4luaj3vm23lib18PackageLib$loadlibC1Ev"() local_unnamed_addr {
dec_label_pc_8280:
  %v17_8280 = load i64, i64* @rax, align 8
  ret i64 %v17_8280
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$maxC1Ev"() local_unnamed_addr {
dec_label_pc_8290:
  %v17_8290 = load i64, i64* @rax, align 8
  ret i64 %v17_8290
}

define i64 @"_ZN3org4luaj3vm23lib12MathLib$modfC1Ev"() local_unnamed_addr {
dec_label_pc_82a0:
  %v17_82a0 = load i64, i64* @rax, align 8
  ret i64 %v17_82a0
}

define i64 @"_ZN3org4luaj3vm23lib13MathLib$frexpC1Ev"() local_unnamed_addr {
dec_label_pc_82b0:
  %v17_82b0 = load i64, i64* @rax, align 8
  ret i64 %v17_82b0
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$minC1Ev"() local_unnamed_addr {
dec_label_pc_82c0:
  %v17_82c0 = load i64, i64* @rax, align 8
  ret i64 %v17_82c0
}

define i64 @"_ZN3org4luaj3vm23lib17DebugLib$setlocalC1EPNS2_8DebugLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_82d0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_82d4 = load i64, i64* @rdi, align 8
  %v2_82d4 = add i64 %v1_82d4, 24
  %v3_82d4 = inttoptr i64 %v2_82d4 to i64*
  store i64 %arg2, i64* %v3_82d4, align 8
  %v4_82d4 = load i64, i64* @rax, align 8
  ret i64 %v4_82d4
}

define i64 @"_ZN3org4luaj3vm23lib19DebugLib$getupvalueC1Ev"() local_unnamed_addr {
dec_label_pc_82f0:
  %v17_82f0 = load i64, i64* @rax, align 8
  ret i64 %v17_82f0
}

define i64 @"_ZN3org4luaj3vm23lib16DebugLib$getinfoC1EPNS2_8DebugLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8300:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8304 = load i64, i64* @rdi, align 8
  %v2_8304 = add i64 %v1_8304, 24
  %v3_8304 = inttoptr i64 %v2_8304 to i64*
  store i64 %arg2, i64* %v3_8304, align 8
  %v4_8304 = load i64, i64* @rax, align 8
  ret i64 %v4_8304
}

define i64 @"_ZN3org4luaj3vm23lib16DebugLib$sethookC1EPNS2_8DebugLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8320:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8324 = load i64, i64* @rdi, align 8
  %v2_8324 = add i64 %v1_8324, 24
  %v3_8324 = inttoptr i64 %v2_8324 to i64*
  store i64 %arg2, i64* %v3_8324, align 8
  %v4_8324 = load i64, i64* @rax, align 8
  ret i64 %v4_8324
}

define i64 @"_ZN3org4luaj3vm23lib20DebugLib$upvaluejoinC1Ev"() local_unnamed_addr {
dec_label_pc_8340:
  %v17_8340 = load i64, i64* @rax, align 8
  ret i64 %v17_8340
}

define i64 @"_ZN3org4luaj3vm23lib19DebugLib$setupvalueC1Ev"() local_unnamed_addr {
dec_label_pc_8350:
  %v17_8350 = load i64, i64* @rax, align 8
  ret i64 %v17_8350
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$upvalueidC1Ev"() local_unnamed_addr {
dec_label_pc_8360:
  %v17_8360 = load i64, i64* @rax, align 8
  ret i64 %v17_8360
}

define i64 @"_ZN3org4luaj3vm23lib16DebugLib$gethookC1EPNS2_8DebugLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8370:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8374 = load i64, i64* @rdi, align 8
  %v2_8374 = add i64 %v1_8374, 24
  %v3_8374 = inttoptr i64 %v2_8374 to i64*
  store i64 %arg2, i64* %v3_8374, align 8
  %v4_8374 = load i64, i64* @rax, align 8
  ret i64 %v4_8374
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$tracebackC1EPNS2_8DebugLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8390:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8394 = load i64, i64* @rdi, align 8
  %v2_8394 = add i64 %v1_8394, 24
  %v3_8394 = inttoptr i64 %v2_8394 to i64*
  store i64 %arg2, i64* %v3_8394, align 8
  %v4_8394 = load i64, i64* @rax, align 8
  ret i64 %v4_8394
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$setuservalueC1Ev"() local_unnamed_addr {
dec_label_pc_83b0:
  %v17_83b0 = load i64, i64* @rax, align 8
  ret i64 %v17_83b0
}

define i64 @"_ZN3org4luaj3vm23lib17DebugLib$getlocalC1EPNS2_8DebugLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_83c0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_83c4 = load i64, i64* @rdi, align 8
  %v2_83c4 = add i64 %v1_83c4, 24
  %v3_83c4 = inttoptr i64 %v2_83c4 to i64*
  store i64 %arg2, i64* %v3_83c4, align 8
  %v4_83c4 = load i64, i64* @rax, align 8
  ret i64 %v4_83c4
}

define i64 @"_ZN3org4luaj3vm23lib14StringLib$dumpC1Ev"() local_unnamed_addr {
dec_label_pc_83e0:
  %v17_83e0 = load i64, i64* @rax, align 8
  ret i64 %v17_83e0
}

define i64 @"_ZN3org4luaj3vm23lib16StringLib$formatC1EPNS2_9StringLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_83f0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_83f4 = load i64, i64* @rdi, align 8
  %v2_83f4 = add i64 %v1_83f4, 24
  %v3_83f4 = inttoptr i64 %v2_83f4 to i64*
  store i64 %arg2, i64* %v3_83f4, align 8
  %v4_83f4 = load i64, i64* @rax, align 8
  ret i64 %v4_83f4
}

define i64 @"_ZN3org4luaj3vm23lib13StringLib$repC1Ev"() local_unnamed_addr {
dec_label_pc_8410:
  %v17_8410 = load i64, i64* @rax, align 8
  ret i64 %v17_8410
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$byte_C1Ev"() local_unnamed_addr {
dec_label_pc_8420:
  %v17_8420 = load i64, i64* @rax, align 8
  ret i64 %v17_8420
}

define i64 @"_ZN3org4luaj3vm23lib16StringLib$gmatchC1Ev"() local_unnamed_addr {
dec_label_pc_8430:
  %v17_8430 = load i64, i64* @rax, align 8
  ret i64 %v17_8430
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$matchC1Ev"() local_unnamed_addr {
dec_label_pc_8440:
  %v17_8440 = load i64, i64* @rax, align 8
  ret i64 %v17_8440
}

define i64 @"_ZN3org4luaj3vm23lib14StringLib$findC1Ev"() local_unnamed_addr {
dec_label_pc_8450:
  %v17_8450 = load i64, i64* @rax, align 8
  ret i64 %v17_8450
}

define i64 @"_ZN3org4luaj3vm23lib13StringLib$subC1Ev"() local_unnamed_addr {
dec_label_pc_8460:
  %v17_8460 = load i64, i64* @rax, align 8
  ret i64 %v17_8460
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$char_C1Ev"() local_unnamed_addr {
dec_label_pc_8470:
  %v17_8470 = load i64, i64* @rax, align 8
  ret i64 %v17_8470
}

define i64 @"_ZN3org4luaj3vm23lib14StringLib$gsubC1Ev"() local_unnamed_addr {
dec_label_pc_8480:
  %v17_8480 = load i64, i64* @rax, align 8
  ret i64 %v17_8480
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$selectC1Ev"() local_unnamed_addr {
dec_label_pc_8490:
  %v17_8490 = load i64, i64* @rax, align 8
  ret i64 %v17_8490
}

define i64 @"_ZN3org4luaj3vm23lib12BaseLib$nextC1Ev"() local_unnamed_addr {
dec_label_pc_84a0:
  %v17_84a0 = load i64, i64* @rax, align 8
  ret i64 %v17_84a0
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$loadfileC1EPNS2_7BaseLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_84b0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_84b4 = load i64, i64* @rdi, align 8
  %v2_84b4 = add i64 %v1_84b4, 24
  %v3_84b4 = inttoptr i64 %v2_84b4 to i64*
  store i64 %arg2, i64* %v3_84b4, align 8
  %v4_84b4 = load i64, i64* @rax, align 8
  ret i64 %v4_84b4
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$xpcallC1EPNS2_7BaseLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_84d0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_84d4 = load i64, i64* @rdi, align 8
  %v2_84d4 = add i64 %v1_84d4, 24
  %v3_84d4 = inttoptr i64 %v2_84d4 to i64*
  store i64 %arg2, i64* %v3_84d4, align 8
  %v4_84d4 = load i64, i64* @rax, align 8
  ret i64 %v4_84d4
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$dofileC1EPNS2_7BaseLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_84f0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_84f4 = load i64, i64* @rdi, align 8
  %v2_84f4 = add i64 %v1_84f4, 24
  %v3_84f4 = inttoptr i64 %v2_84f4 to i64*
  store i64 %arg2, i64* %v3_84f4, align 8
  %v4_84f4 = load i64, i64* @rax, align 8
  ret i64 %v4_84f4
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$pairsC1EPNS2_12BaseLib$nextE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8510:
  store i64 %arg1, i64* @rdi, align 8
  %v0_8515 = load i64, i64* @rdi, align 8
  store i64 %v0_8515, i64* @rbx, align 8
  %v17_8518 = load i64, i64* @rax, align 8
  ret i64 %v17_8518
}

define i64 @"_ZN3org4luaj3vm23lib12BaseLib$loadC1EPNS2_7BaseLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8530:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8534 = load i64, i64* @rdi, align 8
  %v2_8534 = add i64 %v1_8534, 24
  %v3_8534 = inttoptr i64 %v2_8534 to i64*
  store i64 %arg2, i64* %v3_8534, align 8
  %v4_8534 = load i64, i64* @rax, align 8
  ret i64 %v4_8534
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$inextC1Ev"() local_unnamed_addr {
dec_label_pc_8550:
  %v17_8550 = load i64, i64* @rax, align 8
  ret i64 %v17_8550
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$ipairsC1Ev"(i64 %arg1) local_unnamed_addr {
dec_label_pc_8560:
  store i64 %arg1, i64* @rdi, align 8
  %v0_8562 = load i64, i64* @rdi, align 8
  store i64 %v0_8562, i64* @rbx, align 8
  %v17_8565 = load i64, i64* @rax, align 8
  ret i64 %v17_8565
}

define i64 @"_ZN3org4luaj3vm23lib15BaseLib$_assertC1Ev"() local_unnamed_addr {
dec_label_pc_85a0:
  %v17_85a0 = load i64, i64* @rax, align 8
  ret i64 %v17_85a0
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$pcallC1EPNS2_7BaseLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_85b0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_85b4 = load i64, i64* @rdi, align 8
  %v2_85b4 = add i64 %v1_85b4, 24
  %v3_85b4 = inttoptr i64 %v2_85b4 to i64*
  store i64 %arg2, i64* %v3_85b4, align 8
  %v4_85b4 = load i64, i64* @rax, align 8
  ret i64 %v4_85b4
}

define i64 @"_ZN3org4luaj3vm23lib22BaseLib$collectgarbageC1Ev"() local_unnamed_addr {
dec_label_pc_85d0:
  %v17_85d0 = load i64, i64* @rax, align 8
  ret i64 %v17_85d0
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$printC1EPNS2_7BaseLibES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_85e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_85e5 = load i64, i64* @rdi, align 8
  store i64 %v0_85e5, i64* @rbx, align 8
  %v0_85ec = load i64, i64* %rsi.global-to-local, align 8
  %v2_85ec = add i64 %v0_85e5, 32
  %v3_85ec = inttoptr i64 %v2_85ec to i64*
  store i64 %v0_85ec, i64* %v3_85ec, align 8
  %v4_85ec = load i64, i64* @rax, align 8
  ret i64 %v4_85ec
}

define i64 @_ZN3org4luaj3vm23lib16ThreeArgFunctionC1Ev() local_unnamed_addr {
dec_label_pc_8600:
  %v17_8600 = load i64, i64* @rax, align 8
  ret i64 %v17_8600
}

define i64 @"_ZN4lang12lang_luaj$68C1Ev"() local_unnamed_addr {
dec_label_pc_8610:
  %v17_8610 = load i64, i64* @rax, align 8
  ret i64 %v17_8610
}

define i64 @"_ZN4lang12lang_luaj$47C1Ev"() local_unnamed_addr {
dec_label_pc_8620:
  %v17_8620 = load i64, i64* @rax, align 8
  ret i64 %v17_8620
}

define i64 @"_ZN4lang12lang_luaj$25C1Ev"() local_unnamed_addr {
dec_label_pc_8630:
  %v17_8630 = load i64, i64* @rax, align 8
  ret i64 %v17_8630
}

define i64 @"_ZN4lang12lang_luaj$46C1Ev"() local_unnamed_addr {
dec_label_pc_8640:
  %v17_8640 = load i64, i64* @rax, align 8
  ret i64 %v17_8640
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$getuservalueC1Ev"() local_unnamed_addr {
dec_label_pc_8650:
  %v17_8650 = load i64, i64* @rax, align 8
  ret i64 %v17_8650
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$getmetatableC1Ev"() local_unnamed_addr {
dec_label_pc_8660:
  %v17_8660 = load i64, i64* @rax, align 8
  ret i64 %v17_8660
}

define i64 @_ZN3org4luaj3vm23lib15ZeroArgFunctionC1Ev() local_unnamed_addr {
dec_label_pc_8670:
  %v17_8670 = load i64, i64* @rax, align 8
  ret i64 %v17_8670
}

define i64 @"_ZN4lang14lang_luaj$76$5C1Ev"() local_unnamed_addr {
dec_label_pc_8680:
  %v17_8680 = load i64, i64* @rax, align 8
  ret i64 %v17_8680
}

define i64 @"_ZN4lang14lang_luaj$77$0C1Ev"() local_unnamed_addr {
dec_label_pc_8690:
  %v17_8690 = load i64, i64* @rax, align 8
  ret i64 %v17_8690
}

define i64 @"_ZN4lang19lang_luaj$77$15$0$0C1Ev"() local_unnamed_addr {
dec_label_pc_86a0:
  %v17_86a0 = load i64, i64* @rax, align 8
  ret i64 %v17_86a0
}

define i64 @"_ZN4lang14lang_luaj$77$3C1Ev"() local_unnamed_addr {
dec_label_pc_86b0:
  %v17_86b0 = load i64, i64* @rax, align 8
  ret i64 %v17_86b0
}

define i64 @"_ZN4lang14lang_luaj$76$1C1Ev"() local_unnamed_addr {
dec_label_pc_86c0:
  %v17_86c0 = load i64, i64* @rax, align 8
  ret i64 %v17_86c0
}

define i64 @"_ZN4lang14lang_luaj$77$5C1Ev"() local_unnamed_addr {
dec_label_pc_86d0:
  %v17_86d0 = load i64, i64* @rax, align 8
  ret i64 %v17_86d0
}

define i64 @"_ZN4lang14lang_luaj$77$1C1Ev"() local_unnamed_addr {
dec_label_pc_86e0:
  %v17_86e0 = load i64, i64* @rax, align 8
  ret i64 %v17_86e0
}

define i64 @"_ZN4lang15lang_luaj$77$13C1Ev"() local_unnamed_addr {
dec_label_pc_86f0:
  %v17_86f0 = load i64, i64* @rax, align 8
  ret i64 %v17_86f0
}

define i64 @"_ZN4lang14lang_luaj$76$0C1Ev"() local_unnamed_addr {
dec_label_pc_8700:
  %v17_8700 = load i64, i64* @rax, align 8
  ret i64 %v17_8700
}

define i64 @"_ZN4lang14lang_luaj$76$3C1Ev"() local_unnamed_addr {
dec_label_pc_8710:
  %v17_8710 = load i64, i64* @rax, align 8
  ret i64 %v17_8710
}

define i64 @"_ZN4lang11lang_luaj$1C1Ev"() local_unnamed_addr {
dec_label_pc_8720:
  %v17_8720 = load i64, i64* @rax, align 8
  ret i64 %v17_8720
}

define i64 @"_ZN4lang14lang_luaj$44$3C1Ev"() local_unnamed_addr {
dec_label_pc_8730:
  %v17_8730 = load i64, i64* @rax, align 8
  ret i64 %v17_8730
}

define i64 @"_ZN3org4luaj3vm23lib20DebugLib$getregistryC1EPNS2_8DebugLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8740:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8744 = load i64, i64* @rdi, align 8
  %v2_8744 = add i64 %v1_8744, 24
  %v3_8744 = inttoptr i64 %v2_8744 to i64*
  store i64 %arg2, i64* %v3_8744, align 8
  %v4_8744 = load i64, i64* @rax, align 8
  ret i64 %v4_8744
}

define i64 @"_ZN3org4luaj3vm23lib14DebugLib$debugC1Ev"() local_unnamed_addr {
dec_label_pc_8760:
  %v17_8760 = load i64, i64* @rax, align 8
  ret i64 %v17_8760
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawlenC1Ev"() local_unnamed_addr {
dec_label_pc_8770:
  %v17_8770 = load i64, i64* @rax, align 8
  ret i64 %v17_8770
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$tostringC1Ev"() local_unnamed_addr {
dec_label_pc_8780:
  %v17_8780 = load i64, i64* @rax, align 8
  ret i64 %v17_8780
}

define i64 @"_ZN3org4luaj3vm23lib20BaseLib$setmetatableC1Ev"() local_unnamed_addr {
dec_label_pc_8790:
  %v17_8790 = load i64, i64* @rax, align 8
  ret i64 %v17_8790
}

define i64 @"_ZN3org4luaj3vm23lib12BaseLib$typeC1Ev"() local_unnamed_addr {
dec_label_pc_87a0:
  %v17_87a0 = load i64, i64* @rax, align 8
  ret i64 %v17_87a0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawgetC1Ev"() local_unnamed_addr {
dec_label_pc_87b0:
  %v17_87b0 = load i64, i64* @rax, align 8
  ret i64 %v17_87b0
}

define i64 @"_ZN3org4luaj3vm23lib20BaseLib$getmetatableC1Ev"() local_unnamed_addr {
dec_label_pc_87c0:
  %v17_87c0 = load i64, i64* @rax, align 8
  ret i64 %v17_87c0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawsetC1Ev"() local_unnamed_addr {
dec_label_pc_87d0:
  %v17_87d0 = load i64, i64* @rax, align 8
  ret i64 %v17_87d0
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$tonumberC1Ev"() local_unnamed_addr {
dec_label_pc_87e0:
  %v17_87e0 = load i64, i64* @rax, align 8
  ret i64 %v17_87e0
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$rawequalC1Ev"() local_unnamed_addr {
dec_label_pc_87f0:
  %v17_87f0 = load i64, i64* @rax, align 8
  ret i64 %v17_87f0
}

define i64 @_ZN3org4luaj3vm23lib14TwoArgFunctionC1Ev() local_unnamed_addr {
dec_label_pc_8800:
  %v17_8800 = load i64, i64* @rax, align 8
  ret i64 %v17_8800
}

define i64 @"_ZN4lang15lang_luaj$76$12C1Ev"() local_unnamed_addr {
dec_label_pc_8810:
  %v17_8810 = load i64, i64* @rax, align 8
  ret i64 %v17_8810
}

define i64 @"_ZN4lang12lang_luaj$67C1Ev"() local_unnamed_addr {
dec_label_pc_8820:
  %v17_8820 = load i64, i64* @rax, align 8
  ret i64 %v17_8820
}

define i64 @"_ZN4lang12lang_luaj$10C1Ev"() local_unnamed_addr {
dec_label_pc_8830:
  %v17_8830 = load i64, i64* @rax, align 8
  ret i64 %v17_8830
}

define i64 @"_ZN4lang15lang_luaj$76$13C1Ev"() local_unnamed_addr {
dec_label_pc_8840:
  %v17_8840 = load i64, i64* @rax, align 8
  ret i64 %v17_8840
}

define i64 @"_ZN4lang12lang_luaj$21C1Ev"() local_unnamed_addr {
dec_label_pc_8850:
  %v17_8850 = load i64, i64* @rax, align 8
  ret i64 %v17_8850
}

define i64 @"_ZN4lang12lang_luaj$30C1Ev"() local_unnamed_addr {
dec_label_pc_8860:
  %v17_8860 = load i64, i64* @rax, align 8
  ret i64 %v17_8860
}

define i64 @"_ZN4lang12lang_luaj$39C1Ev"() local_unnamed_addr {
dec_label_pc_8870:
  %v17_8870 = load i64, i64* @rax, align 8
  ret i64 %v17_8870
}

define i64 @"_ZN4lang12lang_luaj$34C1Ev"() local_unnamed_addr {
dec_label_pc_8880:
  %v17_8880 = load i64, i64* @rax, align 8
  ret i64 %v17_8880
}

define i64 @"_ZN4lang15lang_luaj$77$17C1Ev"() local_unnamed_addr {
dec_label_pc_8890:
  %v17_8890 = load i64, i64* @rax, align 8
  ret i64 %v17_8890
}

define i64 @"_ZN4lang12lang_luaj$50C1Ev"() local_unnamed_addr {
dec_label_pc_88a0:
  %v17_88a0 = load i64, i64* @rax, align 8
  ret i64 %v17_88a0
}

define i64 @"_ZN4lang11lang_luaj$5C1Ev"() local_unnamed_addr {
dec_label_pc_88b0:
  %v17_88b0 = load i64, i64* @rax, align 8
  ret i64 %v17_88b0
}

define i64 @"_ZN4lang12lang_luaj$14C1Ev"() local_unnamed_addr {
dec_label_pc_88c0:
  %v17_88c0 = load i64, i64* @rax, align 8
  ret i64 %v17_88c0
}

define i64 @"_ZN4lang12lang_luaj$18C1Ev"() local_unnamed_addr {
dec_label_pc_88d0:
  %v17_88d0 = load i64, i64* @rax, align 8
  ret i64 %v17_88d0
}

define i64 @"_ZN4lang14lang_luaj$56$2C1Ev"() local_unnamed_addr {
dec_label_pc_88e0:
  %v17_88e0 = load i64, i64* @rax, align 8
  ret i64 %v17_88e0
}

define i64 @"_ZN4lang14lang_luaj$65$1C1Ev"() local_unnamed_addr {
dec_label_pc_88f0:
  %v17_88f0 = load i64, i64* @rax, align 8
  ret i64 %v17_88f0
}

define i64 @"_ZN4lang25lang_luaj$__TS__ArrayPushC1Ev"() local_unnamed_addr {
dec_label_pc_8900:
  %v17_8900 = load i64, i64* @rax, align 8
  ret i64 %v17_8900
}

define i64 @"_ZN4lang15lang_luaj$77$18C1Ev"() local_unnamed_addr {
dec_label_pc_8910:
  %v17_8910 = load i64, i64* @rax, align 8
  ret i64 %v17_8910
}

define i64 @_ZN3org4luaj3vm23lib5IoLibC1Ev(i64 %arg1) local_unnamed_addr {
dec_label_pc_8920:
  store i64 %arg1, i64* @rdi, align 8
  %v0_8921 = load i64, i64* @rdi, align 8
  store i64 %v0_8921, i64* @rbx, align 8
  %v1_8921 = load i64, i64* @rax, align 8
  ret i64 %v1_8921
}

define i64 @_ZN3org4luaj3vm23lib10PackageLibC1Ev() local_unnamed_addr {
dec_label_pc_8950:
  %v17_8950 = load i64, i64* @rax, align 8
  ret i64 %v17_8950
}

define i64 @_ZN3org4luaj3vm23lib7MathLibC1Ev(i64 %arg1) local_unnamed_addr {
dec_label_pc_8960:
  store i64 %arg1, i64* @rdi, align 8
  %v0_8961 = load i64, i64* @rdi, align 8
  store i64 %v0_8961, i64* @rbx, align 8
  %v1_8961 = load i64, i64* @rax, align 8
  ret i64 %v1_8961
}

define i64 @"_ZN3org4luaj3vm23lib12MathLib$fmodC1Ev"() local_unnamed_addr {
dec_label_pc_8980:
  %v17_8980 = load i64, i64* @rax, align 8
  ret i64 %v17_8980
}

define i64 @"_ZN3org4luaj3vm23lib16MathLib$BinaryOpC1Ev"() local_unnamed_addr {
dec_label_pc_8990:
  %v17_8990 = load i64, i64* @rax, align 8
  ret i64 %v17_8990
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$powC1Ev"() local_unnamed_addr {
dec_label_pc_89a0:
  %v17_89a0 = load i64, i64* @rax, align 8
  ret i64 %v17_89a0
}

define i64 @"_ZN3org4luaj3vm23lib13MathLib$ldexpC1Ev"() local_unnamed_addr {
dec_label_pc_89b0:
  %v17_89b0 = load i64, i64* @rax, align 8
  ret i64 %v17_89b0
}

define i64 @_ZN3org4luaj3vm23lib8DebugLibC1Ev() local_unnamed_addr {
dec_label_pc_89c0:
  %v17_89c0 = load i64, i64* @rax, align 8
  ret i64 %v17_89c0
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$setmetatableC1Ev"() local_unnamed_addr {
dec_label_pc_89d0:
  %v17_89d0 = load i64, i64* @rax, align 8
  ret i64 %v17_89d0
}

define i64 @_ZN3org4luaj3vm23lib9StringLibC1Ev() local_unnamed_addr {
dec_label_pc_89e0:
  %v17_89e0 = load i64, i64* @rax, align 8
  ret i64 %v17_89e0
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$errorC1Ev"() local_unnamed_addr {
dec_label_pc_89f0:
  %v17_89f0 = load i64, i64* @rax, align 8
  ret i64 %v17_89f0
}

define i64 @_ZN3org4luaj3vm23lib7BaseLibC1Ev() local_unnamed_addr {
dec_label_pc_8a00:
  %v17_8a00 = load i64, i64* @rax, align 8
  ret i64 %v17_8a00
}

define i64 @_ZN3org4luaj3vm23lib14OneArgFunctionC1Ev() local_unnamed_addr {
dec_label_pc_8a10:
  %v17_8a10 = load i64, i64* @rax, align 8
  ret i64 %v17_8a10
}

define i64 @"_ZN4lang16lang_luaj$77$7$1C1Ev"() local_unnamed_addr {
dec_label_pc_8a20:
  %v17_8a20 = load i64, i64* @rax, align 8
  ret i64 %v17_8a20
}

define i64 @"_ZN4lang12lang_luaj$11C1Ev"() local_unnamed_addr {
dec_label_pc_8a30:
  %v17_8a30 = load i64, i64* @rax, align 8
  ret i64 %v17_8a30
}

define i64 @"_ZN4lang12lang_luaj$52C1Ev"() local_unnamed_addr {
dec_label_pc_8a40:
  %v17_8a40 = load i64, i64* @rax, align 8
  ret i64 %v17_8a40
}

define i64 @"_ZN4lang12lang_luaj$32C1Ev"() local_unnamed_addr {
dec_label_pc_8a50:
  %v17_8a50 = load i64, i64* @rax, align 8
  ret i64 %v17_8a50
}

define i64 @"_ZN4lang15lang_luaj$77$14C1Ev"() local_unnamed_addr {
dec_label_pc_8a60:
  %v17_8a60 = load i64, i64* @rax, align 8
  ret i64 %v17_8a60
}

define i64 @"_ZN4lang11lang_luaj$6C1Ev"() local_unnamed_addr {
dec_label_pc_8a70:
  %v17_8a70 = load i64, i64* @rax, align 8
  ret i64 %v17_8a70
}

define i64 @"_ZN4lang14lang_luaj$65$0C1Ev"() local_unnamed_addr {
dec_label_pc_8a80:
  %v17_8a80 = load i64, i64* @rax, align 8
  ret i64 %v17_8a80
}

define i64 @"_ZN4lang12lang_luaj$20C1Ev"() local_unnamed_addr {
dec_label_pc_8a90:
  %v17_8a90 = load i64, i64* @rax, align 8
  ret i64 %v17_8a90
}

define i64 @"_ZN4lang11lang_luaj$9C1Ev"() local_unnamed_addr {
dec_label_pc_8aa0:
  %v17_8aa0 = load i64, i64* @rax, align 8
  ret i64 %v17_8aa0
}

define i64 @"_ZN4lang12lang_luaj$66C1Ev"() local_unnamed_addr {
dec_label_pc_8ab0:
  %v17_8ab0 = load i64, i64* @rax, align 8
  ret i64 %v17_8ab0
}

define i64 @"_ZN4lang12lang_luaj$22C1Ev"() local_unnamed_addr {
dec_label_pc_8ac0:
  %v17_8ac0 = load i64, i64* @rax, align 8
  ret i64 %v17_8ac0
}

define i64 @"_ZN4lang14lang_luaj$77$4C1Ev"() local_unnamed_addr {
dec_label_pc_8ad0:
  %v17_8ad0 = load i64, i64* @rax, align 8
  ret i64 %v17_8ad0
}

define i64 @"_ZN4lang16lang_luaj$76$7$1C1Ev"() local_unnamed_addr {
dec_label_pc_8ae0:
  %v17_8ae0 = load i64, i64* @rax, align 8
  ret i64 %v17_8ae0
}

define i64 @"_ZN4lang12lang_luaj$17C1Ev"() local_unnamed_addr {
dec_label_pc_8af0:
  %v17_8af0 = load i64, i64* @rax, align 8
  ret i64 %v17_8af0
}

define i64 @"_ZN4lang17lang_luaj$77$21$0C1Ev"() local_unnamed_addr {
dec_label_pc_8b00:
  %v17_8b00 = load i64, i64* @rax, align 8
  ret i64 %v17_8b00
}

define i64 @"_ZN4lang17lang_luaj$76$15$0C1Ev"() local_unnamed_addr {
dec_label_pc_8b10:
  %v17_8b10 = load i64, i64* @rax, align 8
  ret i64 %v17_8b10
}

define i64 @"_ZN4lang12lang_luaj$16C1Ev"() local_unnamed_addr {
dec_label_pc_8b20:
  %v17_8b20 = load i64, i64* @rax, align 8
  ret i64 %v17_8b20
}

define i64 @"_ZN4lang17lang_luaj$77$22$0C1Ev"() local_unnamed_addr {
dec_label_pc_8b30:
  %v17_8b30 = load i64, i64* @rax, align 8
  ret i64 %v17_8b30
}

define i64 @"_ZN4lang11lang_luaj$7C1Ev"() local_unnamed_addr {
dec_label_pc_8b40:
  %v17_8b40 = load i64, i64* @rax, align 8
  ret i64 %v17_8b40
}

define i64 @"_ZN4lang12lang_luaj$31C1Ev"() local_unnamed_addr {
dec_label_pc_8b50:
  %v17_8b50 = load i64, i64* @rax, align 8
  ret i64 %v17_8b50
}

define i64 @"_ZN4lang14lang_luaj$76$4C1Ev"() local_unnamed_addr {
dec_label_pc_8b60:
  %v17_8b60 = load i64, i64* @rax, align 8
  ret i64 %v17_8b60
}

define i64 @"_ZN4lang12lang_luaj$27C1Ev"() local_unnamed_addr {
dec_label_pc_8b70:
  %v17_8b70 = load i64, i64* @rax, align 8
  ret i64 %v17_8b70
}

define i64 @"_ZN4lang12lang_luaj$24C1Ev"() local_unnamed_addr {
dec_label_pc_8b80:
  %v17_8b80 = load i64, i64* @rax, align 8
  ret i64 %v17_8b80
}

define i64 @"_ZN4lang12lang_luaj$26C1Ev"() local_unnamed_addr {
dec_label_pc_8b90:
  %v17_8b90 = load i64, i64* @rax, align 8
  ret i64 %v17_8b90
}

define i64 @"_ZN4lang15lang_luaj$76$10C1Ev"() local_unnamed_addr {
dec_label_pc_8ba0:
  %v17_8ba0 = load i64, i64* @rax, align 8
  ret i64 %v17_8ba0
}

define i64 @"_ZN4lang12lang_luaj$29C1Ev"() local_unnamed_addr {
dec_label_pc_8bb0:
  %v17_8bb0 = load i64, i64* @rax, align 8
  ret i64 %v17_8bb0
}

define i64 @"_ZN4lang12lang_luaj$40C1Ev"() local_unnamed_addr {
dec_label_pc_8bc0:
  %v17_8bc0 = load i64, i64* @rax, align 8
  ret i64 %v17_8bc0
}

define i64 @"_ZN4lang12lang_luaj$12C1Ev"() local_unnamed_addr {
dec_label_pc_8bd0:
  %v17_8bd0 = load i64, i64* @rax, align 8
  ret i64 %v17_8bd0
}

define i64 @"_ZN4lang12lang_luaj$42C1Ev"() local_unnamed_addr {
dec_label_pc_8be0:
  %v17_8be0 = load i64, i64* @rax, align 8
  ret i64 %v17_8be0
}

define i64 @"_ZN4lang11lang_luaj$3C1Ev"() local_unnamed_addr {
dec_label_pc_8bf0:
  %v17_8bf0 = load i64, i64* @rax, align 8
  ret i64 %v17_8bf0
}

define i64 @"_ZN4lang12lang_luaj$45C1Ev"() local_unnamed_addr {
dec_label_pc_8c00:
  %v17_8c00 = load i64, i64* @rax, align 8
  ret i64 %v17_8c00
}

define i64 @"_ZN4lang11lang_luaj$4C1Ev"() local_unnamed_addr {
dec_label_pc_8c10:
  %v17_8c10 = load i64, i64* @rax, align 8
  ret i64 %v17_8c10
}

define i64 @"_ZN4lang14lang_luaj$77$2C1Ev"() local_unnamed_addr {
dec_label_pc_8c20:
  %v17_8c20 = load i64, i64* @rax, align 8
  ret i64 %v17_8c20
}

define i64 @"_ZN4lang11lang_luaj$8C1Ev"() local_unnamed_addr {
dec_label_pc_8c30:
  %v17_8c30 = load i64, i64* @rax, align 8
  ret i64 %v17_8c30
}

define i64 @"_ZN4lang12lang_luaj$35C1Ev"() local_unnamed_addr {
dec_label_pc_8c40:
  %v17_8c40 = load i64, i64* @rax, align 8
  ret i64 %v17_8c40
}

define i64 @"_ZN4lang12lang_luaj$23C1Ev"() local_unnamed_addr {
dec_label_pc_8c50:
  %v17_8c50 = load i64, i64* @rax, align 8
  ret i64 %v17_8c50
}

define i64 @"_ZN4lang17lang_luaj$76$16$0C1Ev"() local_unnamed_addr {
dec_label_pc_8c60:
  %v17_8c60 = load i64, i64* @rax, align 8
  ret i64 %v17_8c60
}

define i64 @"_ZN4lang14lang_luaj$44$0C1Ev"() local_unnamed_addr {
dec_label_pc_8c70:
  %v17_8c70 = load i64, i64* @rax, align 8
  ret i64 %v17_8c70
}

define i64 @"_ZN4lang15lang_luaj$77$10C1Ev"() local_unnamed_addr {
dec_label_pc_8c80:
  %v17_8c80 = load i64, i64* @rax, align 8
  ret i64 %v17_8c80
}

define i64 @"_ZN4lang12lang_luaj$28C1Ev"() local_unnamed_addr {
dec_label_pc_8c90:
  %v17_8c90 = load i64, i64* @rax, align 8
  ret i64 %v17_8c90
}

define i64 @"_ZN4lang12lang_luaj$19C1Ev"() local_unnamed_addr {
dec_label_pc_8ca0:
  %v17_8ca0 = load i64, i64* @rax, align 8
  ret i64 %v17_8ca0
}

define i64 @"_ZN4lang12lang_luaj$33C1Ev"() local_unnamed_addr {
dec_label_pc_8cb0:
  %v17_8cb0 = load i64, i64* @rax, align 8
  ret i64 %v17_8cb0
}

define i64 @"_ZN4lang12lang_luaj$59C1Ev"() local_unnamed_addr {
dec_label_pc_8cc0:
  %v17_8cc0 = load i64, i64* @rax, align 8
  ret i64 %v17_8cc0
}

define i64 @"_ZN4lang17lang_luaj$77$20$0C1Ev"() local_unnamed_addr {
dec_label_pc_8cd0:
  %v17_8cd0 = load i64, i64* @rax, align 8
  ret i64 %v17_8cd0
}

define i64 @"_ZN4lang17lang_luaj$76$17$0C1Ev"() local_unnamed_addr {
dec_label_pc_8ce0:
  %v17_8ce0 = load i64, i64* @rax, align 8
  ret i64 %v17_8ce0
}

define i64 @"_ZN4lang12lang_luaj$43C1Ev"() local_unnamed_addr {
dec_label_pc_8cf0:
  %v17_8cf0 = load i64, i64* @rax, align 8
  ret i64 %v17_8cf0
}

define i64 @"_ZN4lang12lang_luaj$15C1Ev"() local_unnamed_addr {
dec_label_pc_8d00:
  %v17_8d00 = load i64, i64* @rax, align 8
  ret i64 %v17_8d00
}

define i64 @"_ZN4lang14lang_luaj$76$2C1Ev"() local_unnamed_addr {
dec_label_pc_8d10:
  %v17_8d10 = load i64, i64* @rax, align 8
  ret i64 %v17_8d10
}

define i64 @"_ZN4lang12lang_luaj$36C1Ev"() local_unnamed_addr {
dec_label_pc_8d20:
  %v17_8d20 = load i64, i64* @rax, align 8
  ret i64 %v17_8d20
}

define i64 @"_ZN4lang12lang_luaj$38C1Ev"() local_unnamed_addr {
dec_label_pc_8d30:
  %v17_8d30 = load i64, i64* @rax, align 8
  ret i64 %v17_8d30
}

define i64 @"_ZN4lang12lang_luaj$37C1Ev"() local_unnamed_addr {
dec_label_pc_8d40:
  %v17_8d40 = load i64, i64* @rax, align 8
  ret i64 %v17_8d40
}

define i64 @"_ZN4lang12lang_luaj$13C1Ev"() local_unnamed_addr {
dec_label_pc_8d50:
  %v17_8d50 = load i64, i64* @rax, align 8
  ret i64 %v17_8d50
}

define i64 @"_ZN3org4luaj3vm23lib18PackageLib$requireC1EPNS2_10PackageLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8d60:
  store i64 %arg1, i64* @rdi, align 8
  %v1_8d64 = load i64, i64* @rdi, align 8
  %v2_8d64 = add i64 %v1_8d64, 24
  %v3_8d64 = inttoptr i64 %v2_8d64 to i64*
  store i64 %arg2, i64* %v3_8d64, align 8
  %v4_8d64 = load i64, i64* @rax, align 8
  ret i64 %v4_8d64
}

define i64 @"_ZN3org4luaj3vm23lib15MathLib$UnaryOpC1Ev"() local_unnamed_addr {
dec_label_pc_8d80:
  %v17_8d80 = load i64, i64* @rax, align 8
  ret i64 %v17_8d80
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$cosC1Ev"() local_unnamed_addr {
dec_label_pc_8d90:
  %v17_8d90 = load i64, i64* @rax, align 8
  ret i64 %v17_8d90
}

define i64 @"_ZN3org4luaj3vm23lib13MathLib$floorC1Ev"() local_unnamed_addr {
dec_label_pc_8da0:
  %v17_8da0 = load i64, i64* @rax, align 8
  ret i64 %v17_8da0
}

define i64 @"_ZN3org4luaj3vm23lib12MathLib$sqrtC1Ev"() local_unnamed_addr {
dec_label_pc_8db0:
  %v17_8db0 = load i64, i64* @rax, align 8
  ret i64 %v17_8db0
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$expC1EPNS2_7MathLibE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8dc0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_8dc5 = load i64, i64* @rdi, align 8
  store i64 %v0_8dc5, i64* @rbx, align 8
  %v17_8dc8 = load i64, i64* @rax, align 8
  ret i64 %v17_8dc8
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$absC1Ev"() local_unnamed_addr {
dec_label_pc_8de0:
  %v17_8de0 = load i64, i64* @rax, align 8
  ret i64 %v17_8de0
}

define i64 @"_ZN3org4luaj3vm23lib12MathLib$ceilC1Ev"() local_unnamed_addr {
dec_label_pc_8df0:
  %v17_8df0 = load i64, i64* @rax, align 8
  ret i64 %v17_8df0
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$degC1Ev"() local_unnamed_addr {
dec_label_pc_8e00:
  %v17_8e00 = load i64, i64* @rax, align 8
  ret i64 %v17_8e00
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$radC1Ev"() local_unnamed_addr {
dec_label_pc_8e10:
  %v17_8e10 = load i64, i64* @rax, align 8
  ret i64 %v17_8e10
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$sinC1Ev"() local_unnamed_addr {
dec_label_pc_8e20:
  %v17_8e20 = load i64, i64* @rax, align 8
  ret i64 %v17_8e20
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$tanC1Ev"() local_unnamed_addr {
dec_label_pc_8e30:
  %v17_8e30 = load i64, i64* @rax, align 8
  ret i64 %v17_8e30
}

define i64 @"_ZN3org4luaj3vm23lib18MathLib$randomseedC1EPNS2_14MathLib$randomE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_8e40:
  store i64 %arg1, i64* @rdi, align 8
  %v0_8e45 = load i64, i64* @rdi, align 8
  store i64 %v0_8e45, i64* @rbx, align 8
  %v17_8e48 = load i64, i64* @rax, align 8
  ret i64 %v17_8e48
}

define i64 @"_ZN3org4luaj3vm23lib17StringLib$reverseC1Ev"() local_unnamed_addr {
dec_label_pc_8e60:
  %v17_8e60 = load i64, i64* @rax, align 8
  ret i64 %v17_8e60
}

define i64 @"_ZN3org4luaj3vm23lib13StringLib$lenC1Ev"() local_unnamed_addr {
dec_label_pc_8e70:
  %v17_8e70 = load i64, i64* @rax, align 8
  ret i64 %v17_8e70
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$lowerC1Ev"() local_unnamed_addr {
dec_label_pc_8e80:
  %v17_8e80 = load i64, i64* @rax, align 8
  ret i64 %v17_8e80
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$upperC1Ev"() local_unnamed_addr {
dec_label_pc_8e90:
  %v17_8e90 = load i64, i64* @rax, align 8
  ret i64 %v17_8e90
}

define i64 @_ZN3org4luaj3vm28LuaTableC1Ev(i64 %arg1) local_unnamed_addr {
dec_label_pc_8ea0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_8ea1 = load i64, i64* @rdi, align 8
  store i64 %v0_8ea1, i64* @rbx, align 8
  %v1_8ea1 = load i64, i64* @rax, align 8
  ret i64 %v1_8ea1
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib4callEJPNS1_8LuaValueES5_S5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_8ed0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_8ed7 = load i64, i64* @rdx, align 8
  store i64 %v0_8ed7, i64* @rax, align 8
  %v0_8ede = load i64, i64* @rdi, align 8
  store i64 %v0_8ede, i64* %rbp.global-to-local, align 8
  store i64 36593, i64* @rdi, align 8
  %v2_8ef1 = add i64 %v0_8ede, 24
  %v3_8ef1 = inttoptr i64 %v2_8ef1 to i64*
  store i64 %v0_8ed7, i64* %v3_8ef1, align 8
  %v0_8ef5 = load i64, i64* %rbp.global-to-local, align 8
  %v1_8ef5 = load i64, i64* @rax, align 8
  %v2_8ef5 = add i64 %v1_8ef5, 96
  %v3_8ef5 = inttoptr i64 %v2_8ef5 to i64*
  store i64 %v0_8ef5, i64* %v3_8ef5, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTableC1Eii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_92f0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_92f7 = load i64, i64* @rdi, align 8
  store i64 %v0_92f7, i64* @rbx, align 8
  %v1_92fa = load i64, i64* @rax, align 8
  ret i64 %v1_92fa
}

define i64 @_ZN3org4luaj3vm28LuaTableC1EP6JArrayIPNS1_8LuaValueEES7_PNS1_7VarargsE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_9320:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9333 = load i64, i64* @rdi, align 8
  store i64 %v0_9333, i64* @rbx, align 8
  %v17_9336 = load i64, i64* @rax, align 8
  ret i64 %v17_9336
}

define i64 @function_955d() local_unnamed_addr {
dec_label_pc_955d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_9567(i32 %arg1) local_unnamed_addr {
dec_label_pc_9567:
  %v4_9567 = zext i32 %arg1 to i64
  store i64 %v4_9567, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm219Varargs$PairVarargsC1EPNS1_8LuaValueEPNS1_7VarargsE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_9580:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_958a = load i64, i64* @rdi, align 8
  store i64 %v0_958a, i64* @rbx, align 8
  %v1_958a = load i64, i64* @rax, align 8
  ret i64 %v1_958a
}

define i64 @"_ZN3org4luaj3vm220Varargs$ArrayVarargsC1EP6JArrayIPNS1_8LuaValueEEPNS1_7VarargsE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_95a0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_95aa = load i64, i64* @rdi, align 8
  store i64 %v0_95aa, i64* @rbx, align 8
  %v1_95aa = load i64, i64* @rax, align 8
  ret i64 %v1_95aa
}

define i64 @"_ZN3org4luaj3vm218Varargs$SubVarargsC1EPNS1_7VarargsEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_95c0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_95cc = load i64, i64* @rdi, align 8
  store i64 %v0_95cc, i64* @rbx, align 8
  %v17_95d1 = load i64, i64* @rax, align 8
  ret i64 %v17_95d1
}

define i64 @"_ZN3org4luaj3vm224Varargs$ArrayPartVarargsC1EP6JArrayIPNS1_8LuaValueEEiiPNS1_7VarargsE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_95f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9601 = load i64, i64* @rdi, align 8
  store i64 %v0_9601, i64* @rbx, align 8
  %v1_9604 = load i64, i64* @rax, align 8
  ret i64 %v1_9604
}

define i64 @"_ZN3org4luaj3vm214LuaTable$EntryC1Ev"() local_unnamed_addr {
dec_label_pc_9630:
  %v17_9630 = load i64, i64* @rax, align 8
  ret i64 %v17_9630
}

define i64 @"_ZN3org4luaj3vm220LuaTable$IntKeyEntryC1EiPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_9640:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_964a = load i64, i64* @rdi, align 8
  store i64 %v0_964a, i64* @rbx, align 8
  %v1_964a = load i64, i64* @rax, align 8
  ret i64 %v1_964a
}

define i64 @"_ZN3org4luaj3vm220LuaTable$NormalEntryC1EPNS1_8LuaValueES4_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_9660:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_966a = load i64, i64* @rdi, align 8
  store i64 %v0_966a, i64* @rbx, align 8
  %v1_966a = load i64, i64* @rax, align 8
  ret i64 %v1_966a
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot5firstEJPNS1_19LuaTable$StrongSlotEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_9680:
  store i64 %arg1, i64* @rdi, align 8
  %v2_9684 = load i64, i64* @rdi, align 8
  store i64 %v2_9684, i64* @rbx, align 8
  store i64 %v2_9684, i64* @rax, align 8
  %v1_969f = icmp eq i64 %v2_9684, 0
  br i1 %v1_969f, label %bb, label %dec_label_pc_96a4

bb:                                               ; preds = %dec_label_pc_9680
  %v1_96a2 = call i64 @function_96d8()
  store i64 %v1_96a2, i64* @rax, align 8
  br label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %bb, %dec_label_pc_9680
  %v0_96a7 = phi i64 [ %v1_96a2, %bb ], [ %v2_9684, %dec_label_pc_9680 ]
  %v1_96a4 = icmp eq i64 %v0_96a7, 0
  br i1 %v1_96a4, label %bb240, label %dec_label_pc_96ac

bb240:                                            ; preds = %dec_label_pc_96a4
  %v1_96aa = call i64 @function_96d8()
  store i64 %v1_96aa, i64* @rax, align 8
  br label %dec_label_pc_96ac

dec_label_pc_96ac:                                ; preds = %bb240, %dec_label_pc_96a4
  store i64 38579, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_96d8() local_unnamed_addr {
dec_label_pc_96d8:
  %v0_96d8 = load i64, i64* @rbx, align 8
  %v1_96d8 = add i64 %v0_96d8, 8
  %v2_96d8 = inttoptr i64 %v1_96d8 to i64*
  store i64 0, i64* %v2_96d8, align 8
  %v0_96e0 = load i64, i64* @rbx, align 8
  %v1_96e0 = add i64 %v0_96e0, 16
  %v2_96e0 = inttoptr i64 %v1_96e0 to i64*
  store i64 0, i64* %v2_96e0, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm225LuaTable$NumberValueEntry3setEJPNS1_14LuaTable$EntryEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_96f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_96f5 = load i64, i64* @rdi, align 8
  store i64 %v0_96f5, i64* @r12, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rbp, align 8
  %v1_9706 = trunc i64 %arg2 to i32
  %v11_9706 = icmp eq i32 %v1_9706, 3
  br i1 %v11_9706, label %bb, label %dec_label_pc_970b

bb:                                               ; preds = %dec_label_pc_96f0
  %v1_9709 = call i64 @function_9740()
  store i64 %v1_9709, i64* @rax, align 8
  br label %dec_label_pc_970b

dec_label_pc_970b:                                ; preds = %bb, %dec_label_pc_96f0
  store i64 38674, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_9740() local_unnamed_addr {
dec_label_pc_9740:
  %v2_9740 = load i64, i64* @rbp, align 8
  store i64 %v2_9740, i64* @rbx, align 8
  store i64 %v2_9740, i64* @rdi, align 8
  %v0_976c = load i64, i64* @r12, align 8
  store i64 %v0_976c, i64* @rax, align 8
  %v0_976f = load i128, i128* @xmm0, align 8
  %v1_976f = call i64 @__asm_movsd.7465(i128 %v0_976f)
  %v2_976f = load i64, i64* @r12, align 8
  %v3_976f = add i64 %v2_976f, 8
  %v4_976f = inttoptr i64 %v3_976f to i64*
  store i64 %v1_976f, i64* %v4_976f, align 8
  %v0_9776 = load i64, i64* @rax, align 8
  ret i64 %v0_9776
}

define i64 @"_ZN3org4luaj3vm225LuaTable$NumberValueEntryC1EPNS1_8LuaValueEd"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9780:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9785 = load i64, i64* @rdi, align 8
  store i64 %v0_9785, i64* @rbx, align 8
  %v0_978c = load i128, i128* %xmm0.global-to-local, align 8
  %v1_978c = call i64 @__asm_movsd.7465(i128 %v0_978c)
  %v5_978c = load i64, i64* @rax, align 8
  ret i64 %v5_978c
}

define i64 @_ZN3org4luaj3vm217NonTableMetatableC1EPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_97b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_97b5 = load i64, i64* @rdi, align 8
  store i64 %v0_97b5, i64* @rbx, align 8
  %v17_97b8 = load i64, i64* @rax, align 8
  ret i64 %v17_97b8
}

define i64 @_ZN3org4luaj3vm27LocVarsC1EPNS1_9LuaStringEii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_97d0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_97dc = load i64, i64* @rdi, align 8
  store i64 %v0_97dc, i64* @rbx, align 8
  %v17_97e1 = load i64, i64* @rax, align 8
  ret i64 %v17_97e1
}

define i64 @_ZN3org4luaj3vm29LoadState9loadDebugEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_9800:
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9808 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_9808, i64* %r13.global-to-local, align 8
  %v0_980d = load i64, i64* @rdi, align 8
  store i64 %v0_980d, i64* @rbx, align 8
  %v2_981a = add i64 %v0_9808, 56
  %v3_981a = inttoptr i64 %v2_981a to i64*
  store i64 %v0_980d, i64* %v3_981a, align 8
  %v2_981e = load i64, i64* @rdi, align 8
  %v0_9821 = load i64, i64* @rbx, align 8
  store i64 %v0_9821, i64* @rdi, align 8
  %v1_9827 = load i64, i64* %r13.global-to-local, align 8
  %v2_9827 = add i64 %v1_9827, 32
  %v3_9827 = inttoptr i64 %v2_9827 to i64*
  store i64 %v2_981e, i64* %v3_9827, align 8
  store i64 38983, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_9964() local_unnamed_addr {
dec_label_pc_9964:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm228LuaString$RecentShortStringsC1Ev"() local_unnamed_addr {
dec_label_pc_9970:
  %v17_9970 = load i64, i64* @rax, align 8
  ret i64 %v17_9970
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlotC1EPNS1_14LuaTable$EntryEPNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_9980:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_998a = load i64, i64* @rdi, align 8
  store i64 %v0_998a, i64* @rbx, align 8
  %v1_998a = load i64, i64* @rax, align 8
  ret i64 %v1_998a
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry3addEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_99a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 39341, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry6relinkEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_99e0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_99e7 = load i64, i64* @rdi, align 8
  store i64 %v0_99e7, i64* @rbx, align 8
  store i64 39414, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27UpValueC1EP6JArrayIPNS1_8LuaValueEEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_9a20:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9a29 = load i64, i64* @rdi, align 8
  store i64 %v0_9a29, i64* @rbx, align 8
  %v1_9a29 = load i64, i64* @rax, align 8
  ret i64 %v1_9a29
}

define i64 @_ZN3org4luaj3vm210LuaClosure12initupvalue1EJvPNS1_8LuaValueE(i64 %arg1) local_unnamed_addr {
dec_label_pc_9a40:
  store i64 %arg1, i64* @rdi, align 8
  %v1_9a40 = add i64 %arg1, 8
  %v2_9a40 = inttoptr i64 %v1_9a40 to i64*
  %v3_9a40 = load i64, i64* %v2_9a40, align 8
  store i64 %v3_9a40, i64* @rax, align 8
  %v1_9a44 = add i64 %v3_9a40, 48
  %v2_9a44 = inttoptr i64 %v1_9a44 to i64*
  %v3_9a44 = load i64, i64* %v2_9a44, align 8
  store i64 %v3_9a44, i64* @rax, align 8
  %v1_9a48 = icmp eq i64 %v3_9a44, 0
  br i1 %v1_9a48, label %dec_label_pc_9a54, label %dec_label_pc_9a4d

dec_label_pc_9a4d:                                ; preds = %dec_label_pc_9a40
  %v1_9a4d = add i64 %v3_9a44, 8
  %v2_9a4d = inttoptr i64 %v1_9a4d to i32*
  %v3_9a4d = load i32, i32* %v2_9a4d, align 4
  %v4_9a4d = zext i32 %v3_9a4d to i64
  store i64 %v4_9a4d, i64* @rax, align 8
  %v5_9a50 = icmp eq i32 %v3_9a4d, 0
  %v1_9a52 = icmp eq i1 %v5_9a50, false
  br i1 %v1_9a52, label %dec_label_pc_9a60, label %dec_label_pc_9a54

dec_label_pc_9a54:                                ; preds = %dec_label_pc_9a4d, %dec_label_pc_9a40
  %v0_9a54 = load i64, i64* inttoptr (i64 39515 to i64*), align 8
  store i64 %v0_9a54, i64* @rax, align 8
  %v2_9a5b = add i64 %arg1, 16
  %v3_9a5b = inttoptr i64 %v2_9a5b to i64*
  store i64 %v0_9a54, i64* %v3_9a5b, align 8
  %v0_9a5f = load i64, i64* @rax, align 8
  ret i64 %v0_9a5f

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a4d
  ret i64 %v4_9a4d
}

define i64 @function_9b03(i64 %arg1) local_unnamed_addr {
dec_label_pc_9b03:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm225LoadState$GlobalsUndumperC1Ev"() local_unnamed_addr {
dec_label_pc_9b10:
  %v17_9b10 = load i64, i64* @rax, align 8
  ret i64 %v17_9b10
}

define i64 @"_ZN3org4luaj3vm225LoadState$GlobalsUndumperC1EPS2_"() local_unnamed_addr {
dec_label_pc_9b20:
  %v17_9b20 = load i64, i64* @rax, align 8
  ret i64 %v17_9b20
}

define i64 @_ZN4lang4Lang13complex_printEJPN4java4lang6StringEPNS_9LangValueE(i64 %arg1) local_unnamed_addr {
dec_label_pc_9b30:
  store i64 %arg1, i64* @rdi, align 8
  %v0_9b31 = load i64, i64* @rdi, align 8
  store i64 %v0_9b31, i64* @rbx, align 8
  store i64 39739, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN4lang4Lang12simple_printEJPN4java4lang6StringEPNS_9LangValueE(i64 %arg1) local_unnamed_addr {
dec_label_pc_9b80:
  store i64 %arg1, i64* @rdi, align 8
  %v0_9b81 = load i64, i64* @rdi, align 8
  store i64 %v0_9b81, i64* @rbx, align 8
  store i64 39819, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN4lang4Lang6force1EJPNS_9LangValueES2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_9bd0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 39900, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN4lang4Lang9force_allEJPNS_9LangValueES2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_9c30:
  store i64 %arg1, i64* @rdi, align 8
  store i64 39996, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN4lang4Lang13force_all_recEJPNS_9LangValueES2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_9c90:
  store i64 %arg1, i64* @rdi, align 8
  store i64 40092, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib10PackageLib8access$0EJPNS1_9LuaStringEv"() local_unnamed_addr {
dec_label_pc_9cf0:
  store i64 40183, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib10PackageLib8access$1EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_9d10:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm23lib21DebugLib$setmetatable4callEJPNS1_8LuaValueES5_S5_"() local_unnamed_addr {
dec_label_pc_9d30:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_9d31(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_9d5f:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 40294, i64* @rdx, align 8
  %v5_9d68 = load i32, i32* inttoptr (i64 40294 to i32*), align 4
  %v6_9d68 = sext i32 %v5_9d68 to i64
  %v2_9d6c = add nsw i64 %v6_9d68, 40294
  store i64 %v2_9d6c, i64* @rax, align 8
  ret i64 %v2_9d6c
}

define i64 @function_9d78(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9d78:
  %rbp.global-to-local = alloca i64, align 8
  %v0_9d78 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_9d78, i64* inttoptr (i64 40319 to i64*), align 8
  %v0_9d7f = load i64, i64* @rbx, align 8
  store i64 %v0_9d7f, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v0_9d7f
}

define i64 @function_9e30(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9e30:
  %v2_9e30 = load i64, i64* @rbx, align 8
  store i64 %v2_9e30, i64* @rdi, align 8
  store i64 %v2_9e30, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_9e30
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction6newupeEJP6JArrayIPNS1_8LuaValueEEv() local_unnamed_addr {
dec_label_pc_9e50:
  store i64 40535, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction6newupnEJP6JArrayIPNS1_8LuaValueEEv() local_unnamed_addr {
dec_label_pc_9e80:
  store i64 40585, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_9ed5(i64 %arg1) local_unnamed_addr {
dec_label_pc_9ed5:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction6newuplEJP6JArrayIPNS1_8LuaValueEES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_9ee0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 40684, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_9f31(i64 %arg1) local_unnamed_addr {
dec_label_pc_9f31:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib9StringLib8posrelatEJiii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9f40:
  store i64 %arg1, i64* @rdi, align 8
  %v0_9f42 = load i64, i64* @rdi, align 8
  store i64 %v0_9f42, i64* @rbx, align 8
  store i64 40779, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib13StringLib$sub6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9f70:
  store i64 %arg1, i64* @rdi, align 8
  store i64 40888, i64* @rdi, align 8
  store i64 1, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8eqmtcallEJbPS2_S3_S3_S3_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_a050:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 41058, i64* @rdi, align 8
  %v0_a062 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a062, i64* @rbx, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7valueOfEJPNS1_10LuaBooleanEb(i64 %arg1) local_unnamed_addr {
dec_label_pc_a0f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_a0f1 = load i64, i64* @rdi, align 8
  store i64 %v0_a0f1, i64* @rbx, align 8
  store i64 41210, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$rawequal4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_a120:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 41271, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue4gteqEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a160:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_a161 = load i64, i64* @rdi, align 8
  store i64 %v2_a161, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v0_a16c = load i128, i128* %xmm1.global-to-local, align 8
  %v2_a16c = call i128 @__asm_pxor(i128 %v0_a16c, i128 %v0_a16c)
  store i128 %v2_a16c, i128* %xmm1.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  store i64 0, i64* @rax, align 8
  store i64 41337, i64* @rdi, align 8
  %v1_a179 = trunc i64 %arg2 to i32
  %v2_a179 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_a179)
  store i128 %v2_a179, i128* %xmm1.global-to-local, align 8
  %v0_a17d = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_a17d, i128 %v2_a179)
  %v0_a181 = load i1, i1* %cf.global-to-local, align 1
  %v1_a181 = icmp eq i1 %v0_a181, false
  br i1 %v1_a181, label %bb, label %dec_label_pc_a160.dec_label_pc_a183_crit_edge

dec_label_pc_a160.dec_label_pc_a183_crit_edge:    ; preds = %dec_label_pc_a160
  %v3_a181.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_a183

bb:                                               ; preds = %dec_label_pc_a160
  %v2_a181 = call i64 @function_a198()
  store i64 %v2_a181, i64* @rax, align 8
  br label %dec_label_pc_a183

dec_label_pc_a183:                                ; preds = %dec_label_pc_a160.dec_label_pc_a183_crit_edge, %bb
  %v3_a181 = phi i64 [ %v3_a181.pre, %dec_label_pc_a160.dec_label_pc_a183_crit_edge ], [ %v2_a181, %bb ]
  ret i64 %v3_a181
}

define i64 @function_a198() local_unnamed_addr {
dec_label_pc_a198:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEv() local_unnamed_addr {
dec_label_pc_a1b0:
  store i64 41400, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a200:
  store i64 %arg1, i64* @rdi, align 8
  store i64 41485, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6listOfEJPNS1_8LuaTableEP6JArrayIPS2_EPNS1_7VarargsE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a250:
  store i64 %arg1, i64* @rdi, align 8
  store i64 41566, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEP6JArrayIPS2_ES8_PNS1_7VarargsE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_a2a0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 41650, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10userdataOfEJPNS1_11LuaUserdataEPN4java4lang6ObjectE(i64 %arg1) local_unnamed_addr {
dec_label_pc_a300:
  store i64 %arg1, i64* @rdi, align 8
  store i64 41740, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10userdataOfEJPNS1_11LuaUserdataEPN4java4lang6ObjectEPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a340:
  store i64 %arg1, i64* @rdi, align 8
  store i64 41805, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9varargsOfEJPNS1_7VarargsEP6JArrayIPS2_ES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a390:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 41886, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_a3a0 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a3a0, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_a3e3(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_a3e3:
  %v0_a3e3 = load i64, i64* @rbx, align 8
  store i64 %v0_a3e3, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_a3e3
}

define i64 @function_a3f0() local_unnamed_addr {
dec_label_pc_a3f0:
  store i64 41988, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_a438() local_unnamed_addr {
dec_label_pc_a438:
  %v2_a438 = load i64, i64* @rbx, align 8
  store i64 %v2_a438, i64* @rax, align 8
  store i64 %v2_a438, i64* @rdi, align 8
  %v4_a441 = trunc i64 %v2_a438 to i32
  %tmp237 = icmp slt i32 %v4_a441, 1
  br i1 %tmp237, label %bb, label %dec_label_pc_a445

bb:                                               ; preds = %dec_label_pc_a438
  %v9_a443 = call i64 @function_a470(i64 %v2_a438, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v9_a443, i64* @rax, align 8
  br label %dec_label_pc_a445

dec_label_pc_a445:                                ; preds = %bb, %dec_label_pc_a438
  store i64 42060, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_a470(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_a470:
  store i64 %arg1, i64* @rdi, align 8
  %v0_a470 = load i64, i64* @rbp, align 8
  %v1_a470 = add i64 %v0_a470, 8
  %v2_a470 = inttoptr i64 %v1_a470 to i32*
  %v3_a470 = load i32, i32* %v2_a470, align 4
  %v4_a470 = zext i32 %v3_a470 to i64
  store i64 %v4_a470, i64* @rax, align 8
  %v5_a473 = icmp eq i32 %v3_a470, 0
  br i1 %v5_a473, label %dec_label_pc_a483, label %dec_label_pc_a477

dec_label_pc_a477:                                ; preds = %dec_label_pc_a470
  %v1_a477 = add i64 %v0_a470, 16
  %v2_a477 = inttoptr i64 %v1_a477 to i64*
  %v3_a477 = load i64, i64* %v2_a477, align 8
  store i64 %v3_a477, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v3_a477

dec_label_pc_a483:                                ; preds = %dec_label_pc_a470
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$57$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_a4a0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_a4a8 = load i64, i64* @rdi, align 8
  %v0_a4ad = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a4ad, i64* @rbx, align 8
  store i64 4, i64* @rax, align 8
  store i64 5, i64* %rsi.global-to-local, align 8
  store i64 %v0_a4ad, i64* @rdi, align 8
  %v1_a50a = add i64 %v0_a4a8, 24
  %v2_a50a = inttoptr i64 %v1_a50a to i64*
  %v3_a50a = load i64, i64* %v2_a50a, align 8
  store i64 %v3_a50a, i64* @rax, align 8
  %v1_a50e = add i64 %v3_a50a, 8
  %v2_a50e = inttoptr i64 %v1_a50e to i32*
  %v3_a50e = load i32, i32* %v2_a50e, align 4
  %v4_a50e = zext i32 %v3_a50e to i64
  store i64 %v4_a50e, i64* %rsi.global-to-local, align 8
  %v5_a511 = icmp eq i32 %v3_a50e, 0
  br i1 %v5_a511, label %bb, label %dec_label_pc_a519

bb:                                               ; preds = %dec_label_pc_a4a0
  %v2_a513 = call i64 @function_a69a(i64 %v0_a4ad)
  store i64 %v2_a513, i64* @rax, align 8
  br label %dec_label_pc_a519

dec_label_pc_a519:                                ; preds = %bb, %dec_label_pc_a4a0
  %v0_a519 = phi i64 [ %v2_a513, %bb ], [ %v3_a50a, %dec_label_pc_a4a0 ]
  %v1_a519 = add i64 %v0_a519, 16
  %v2_a519 = inttoptr i64 %v1_a519 to i64*
  %v3_a519 = load i64, i64* %v2_a519, align 8
  store i64 %v3_a519, i64* @rbx, align 8
  store i64 42310, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_a656(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_a656:
  %v0_a656 = load i64, i64* inttoptr (i64 42589 to i64*), align 8
  store i64 %v0_a656, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_a656
}

define i64 @function_a670(i64 %arg1) local_unnamed_addr {
dec_label_pc_a670:
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %v0_a670 = load i64, i64* %r13.global-to-local, align 8
  %v1_a670 = add i64 %v0_a670, 32
  %v2_a670 = inttoptr i64 %v1_a670 to i64*
  %v3_a670 = load i64, i64* %v2_a670, align 8
  store i64 %v3_a670, i64* @rdi, align 8
  %v0_a674 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_a674, i64* @rdx, align 8
  %v1_a67b = inttoptr i64 %v3_a670 to i64*
  %v2_a67b = load i64, i64* %v1_a67b, align 8
  store i64 %v2_a67b, i64* @rax, align 8
  %v0_a684 = load i64, i64* inttoptr (i64 42635 to i64*), align 8
  store i64 %v0_a684, i64* @rax, align 8
  ret i64 %v0_a684
}

define i64 @function_a69a(i64 %arg1) local_unnamed_addr {
dec_label_pc_a69a:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$454callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1) local_unnamed_addr {
dec_label_pc_a6b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_a6ba = load i64, i64* @rdi, align 8
  store i64 %v0_a6ba, i64* @rbx, align 8
  %v1_a6c1 = add i64 %v0_a6ba, 24
  %v2_a6c1 = inttoptr i64 %v1_a6c1 to i64*
  %v3_a6c1 = load i64, i64* %v2_a6c1, align 8
  store i64 %v3_a6c1, i64* @rdi, align 8
  %v1_a6c5 = inttoptr i64 %v3_a6c1 to i64*
  %v2_a6c5 = load i64, i64* %v1_a6c5, align 8
  store i64 %v2_a6c5, i64* @rax, align 8
  %v1_a6ce = add i64 %v0_a6ba, 40
  %v2_a6ce = inttoptr i64 %v1_a6ce to i64*
  %v3_a6ce = load i64, i64* %v2_a6ce, align 8
  store i64 %v3_a6ce, i64* @rdi, align 8
  store i64 %v2_a6c5, i64* @rbp, align 8
  %v1_a6d5 = add i64 %v0_a6ba, 32
  %v2_a6d5 = inttoptr i64 %v1_a6d5 to i64*
  %v3_a6d5 = load i64, i64* %v2_a6d5, align 8
  %v1_a6dc = inttoptr i64 %v3_a6ce to i64*
  %v2_a6dc = load i64, i64* %v1_a6dc, align 8
  store i64 %v2_a6dc, i64* @rax, align 8
  %v1_a6e5 = inttoptr i64 %v2_a6dc to i64*
  %v2_a6e5 = load i64, i64* %v1_a6e5, align 8
  store i64 %v2_a6e5, i64* @rdx, align 8
  store i64 %v2_a6dc, i64* @rdi, align 8
  %v1_a6f1 = inttoptr i64 %v3_a6d5 to i64*
  %v2_a6f1 = load i64, i64* %v1_a6f1, align 8
  store i64 %v2_a6f1, i64* @rdx, align 8
  store i64 %v3_a6d5, i64* @rdi, align 8
  %v1_a701 = add i64 %v0_a6ba, 48
  %v2_a701 = inttoptr i64 %v1_a701 to i64*
  %v3_a701 = load i64, i64* %v2_a701, align 8
  store i64 %v3_a701, i64* @rdi, align 8
  %v1_a708 = inttoptr i64 %v3_a701 to i64*
  %v2_a708 = load i64, i64* %v1_a708, align 8
  store i64 %v2_a708, i64* @rax, align 8
  %v1_a711 = inttoptr i64 %v2_a708 to i64*
  %v2_a711 = load i64, i64* %v1_a711, align 8
  store i64 %v2_a711, i64* @rdx, align 8
  store i64 %v2_a708, i64* @rdi, align 8
  %v4_a71d = trunc i64 %v2_a708 to i8
  %v5_a71d = icmp eq i8 %v4_a71d, 0
  br i1 %v5_a71d, label %bb, label %dec_label_pc_a725

bb:                                               ; preds = %dec_label_pc_a6b0
  %v1_a71f = call i64 @function_a7f8()
  store i64 %v1_a71f, i64* @rax, align 8
  %v0_a725.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_a725

dec_label_pc_a725:                                ; preds = %bb, %dec_label_pc_a6b0
  %v0_a725 = phi i64 [ %v0_a725.pre, %bb ], [ %v0_a6ba, %dec_label_pc_a6b0 ]
  %v1_a725 = add i64 %v0_a725, 56
  %v2_a725 = inttoptr i64 %v1_a725 to i64*
  %v3_a725 = load i64, i64* %v2_a725, align 8
  store i64 %v3_a725, i64* @rax, align 8
  %v1_a729 = add i64 %v3_a725, 8
  %v2_a729 = inttoptr i64 %v1_a729 to i32*
  %v3_a729 = load i32, i32* %v2_a729, align 4
  %v5_a72d = icmp eq i32 %v3_a729, 0
  br i1 %v5_a72d, label %bb248, label %dec_label_pc_a736

bb248:                                            ; preds = %dec_label_pc_a725
  %v2_a730 = call i64 @function_a99f(i64 %v2_a708)
  store i64 %v2_a730, i64* @rax, align 8
  %v0_a736.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_a736

dec_label_pc_a736:                                ; preds = %bb248, %dec_label_pc_a725
  %v0_a74a = phi i64 [ %v0_a736.pre, %bb248 ], [ %v0_a725, %dec_label_pc_a725 ]
  %v1_a736 = add i64 %v0_a74a, 64
  %v2_a736 = inttoptr i64 %v1_a736 to i64*
  %v3_a736 = load i64, i64* %v2_a736, align 8
  store i64 %v3_a736, i64* @rdi, align 8
  %v1_a741 = inttoptr i64 %v3_a736 to i64*
  %v2_a741 = load i64, i64* %v1_a741, align 8
  store i64 %v2_a741, i64* @rax, align 8
  %v1_a74a = add i64 %v0_a74a, 72
  %v2_a74a = inttoptr i64 %v1_a74a to i64*
  %v3_a74a = load i64, i64* %v2_a74a, align 8
  store i64 %v3_a74a, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_a7f8() local_unnamed_addr {
dec_label_pc_a7f8:
  %v0_a7f8 = load i64, i64* @rbx, align 8
  %v1_a7f8 = add i64 %v0_a7f8, 80
  %v2_a7f8 = inttoptr i64 %v1_a7f8 to i64*
  %v3_a7f8 = load i64, i64* %v2_a7f8, align 8
  store i64 %v3_a7f8, i64* @rdi, align 8
  %v1_a7ff = inttoptr i64 %v3_a7f8 to i64*
  %v2_a7ff = load i64, i64* %v1_a7ff, align 8
  store i64 %v2_a7ff, i64* @rax, align 8
  %v1_a808 = inttoptr i64 %v2_a7ff to i64*
  %v2_a808 = load i64, i64* %v1_a808, align 8
  store i64 %v2_a808, i64* @rdx, align 8
  store i64 %v2_a7ff, i64* @rdi, align 8
  %v4_a814 = trunc i64 %v2_a7ff to i8
  %v5_a814 = icmp eq i8 %v4_a814, 0
  br i1 %v5_a814, label %bb, label %dec_label_pc_a81c

bb:                                               ; preds = %dec_label_pc_a7f8
  %v1_a816 = call i64 @function_a8e0()
  store i64 %v1_a816, i64* @rax, align 8
  %v0_a81c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_a81c

dec_label_pc_a81c:                                ; preds = %bb, %dec_label_pc_a7f8
  %v0_a81c = phi i64 [ %v0_a81c.pre, %bb ], [ %v0_a7f8, %dec_label_pc_a7f8 ]
  %v1_a81c = add i64 %v0_a81c, 88
  %v2_a81c = inttoptr i64 %v1_a81c to i64*
  %v3_a81c = load i64, i64* %v2_a81c, align 8
  store i64 %v3_a81c, i64* @rax, align 8
  %v1_a820 = add i64 %v3_a81c, 8
  %v2_a820 = inttoptr i64 %v1_a820 to i32*
  %v3_a820 = load i32, i32* %v2_a820, align 4
  %v4_a820 = zext i32 %v3_a820 to i64
  store i64 %v4_a820, i64* @rdi, align 8
  %v7_a823 = icmp eq i32 %v3_a820, 0
  br i1 %v7_a823, label %bb9, label %dec_label_pc_a82b

bb9:                                              ; preds = %dec_label_pc_a81c
  %v3_a825 = call i64 @function_a99f(i64 0)
  store i64 %v3_a825, i64* @rax, align 8
  %v0_a82b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_a82b

dec_label_pc_a82b:                                ; preds = %bb9, %dec_label_pc_a81c
  %v0_a852 = phi i64 [ %v0_a82b.pre, %bb9 ], [ %v0_a81c, %dec_label_pc_a81c ]
  %v1_a82b = add i64 %v0_a852, 96
  %v2_a82b = inttoptr i64 %v1_a82b to i64*
  %v3_a82b = load i64, i64* %v2_a82b, align 8
  store i64 %v3_a82b, i64* @rdi, align 8
  %v1_a836 = inttoptr i64 %v3_a82b to i64*
  %v2_a836 = load i64, i64* %v1_a836, align 8
  store i64 %v2_a836, i64* @rax, align 8
  %v1_a83f = add i64 %v0_a852, 104
  %v2_a83f = inttoptr i64 %v1_a83f to i64*
  %v3_a83f = load i64, i64* %v2_a83f, align 8
  store i64 %v3_a83f, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_a8e0() local_unnamed_addr {
dec_label_pc_a8e0:
  %v0_a8e0 = load i64, i64* @rbx, align 8
  %v1_a8e0 = add i64 %v0_a8e0, 120
  %v2_a8e0 = inttoptr i64 %v1_a8e0 to i64*
  %v3_a8e0 = load i64, i64* %v2_a8e0, align 8
  store i64 %v3_a8e0, i64* @rdi, align 8
  %v1_a8e7 = inttoptr i64 %v3_a8e0 to i64*
  %v2_a8e7 = load i64, i64* %v1_a8e7, align 8
  store i64 %v2_a8e7, i64* @rax, align 8
  %v1_a8f0 = inttoptr i64 %v2_a8e7 to i64*
  %v2_a8f0 = load i64, i64* %v1_a8f0, align 8
  store i64 %v2_a8f0, i64* @rdx, align 8
  store i64 %v2_a8e7, i64* @rdi, align 8
  %v4_a8fc = trunc i64 %v2_a8e7 to i8
  %v5_a8fc = icmp eq i8 %v4_a8fc, 0
  br i1 %v5_a8fc, label %dec_label_pc_a940, label %dec_label_pc_a900

dec_label_pc_a900:                                ; preds = %dec_label_pc_a8e0
  %v1_a900 = add i64 %v0_a8e0, 128
  %v2_a900 = inttoptr i64 %v1_a900 to i64*
  %v3_a900 = load i64, i64* %v2_a900, align 8
  store i64 %v3_a900, i64* @rax, align 8
  %v1_a907 = add i64 %v3_a900, 8
  %v2_a907 = inttoptr i64 %v1_a907 to i32*
  %v3_a907 = load i32, i32* %v2_a907, align 4
  %v4_a907 = zext i32 %v3_a907 to i64
  store i64 %v4_a907, i64* @rcx, align 8
  %v5_a90a = icmp eq i32 %v3_a907, 0
  br i1 %v5_a90a, label %bb, label %dec_label_pc_a912

bb:                                               ; preds = %dec_label_pc_a900
  %v2_a90c = call i64 @function_a99f(i64 %v2_a8e7)
  store i64 %v2_a90c, i64* @rax, align 8
  %v0_a912.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_a912

dec_label_pc_a912:                                ; preds = %bb, %dec_label_pc_a900
  %v0_a929 = phi i64 [ %v0_a912.pre, %bb ], [ %v0_a8e0, %dec_label_pc_a900 ]
  %v1_a912 = add i64 %v0_a929, 136
  %v2_a912 = inttoptr i64 %v1_a912 to i64*
  %v3_a912 = load i64, i64* %v2_a912, align 8
  store i64 %v3_a912, i64* @rdi, align 8
  %v1_a920 = inttoptr i64 %v3_a912 to i64*
  %v2_a920 = load i64, i64* %v1_a920, align 8
  store i64 %v2_a920, i64* @rax, align 8
  %v1_a929 = add i64 %v0_a929, 144
  %v2_a929 = inttoptr i64 %v1_a929 to i64*
  %v3_a929 = load i64, i64* %v2_a929, align 8
  store i64 %v3_a929, i64* @rdi, align 8
  ret i64 %v2_a920

dec_label_pc_a940:                                ; preds = %dec_label_pc_a8e0
  %v1_a940 = add i64 %v0_a8e0, 152
  %v2_a940 = inttoptr i64 %v1_a940 to i64*
  %v3_a940 = load i64, i64* %v2_a940, align 8
  store i64 %v3_a940, i64* @rdi, align 8
  %v1_a94a = inttoptr i64 %v3_a940 to i64*
  %v2_a94a = load i64, i64* %v1_a94a, align 8
  store i64 %v2_a94a, i64* @rax, align 8
  %v1_a953 = inttoptr i64 %v2_a94a to i64*
  %v2_a953 = load i64, i64* %v1_a953, align 8
  store i64 %v2_a953, i64* @rdx, align 8
  store i64 %v2_a94a, i64* @rdi, align 8
  %v4_a95f = trunc i64 %v2_a94a to i8
  %v5_a95f = icmp eq i8 %v4_a95f, 0
  br i1 %v5_a95f, label %dec_label_pc_a997, label %dec_label_pc_a963

dec_label_pc_a963:                                ; preds = %dec_label_pc_a940
  %v1_a963 = add i64 %v0_a8e0, 160
  %v2_a963 = inttoptr i64 %v1_a963 to i64*
  %v3_a963 = load i64, i64* %v2_a963, align 8
  store i64 %v3_a963, i64* @rax, align 8
  %v1_a96a = add i64 %v3_a963, 8
  %v2_a96a = inttoptr i64 %v1_a96a to i32*
  %v3_a96a = load i32, i32* %v2_a96a, align 4
  %v4_a96a = zext i32 %v3_a96a to i64
  store i64 %v4_a96a, i64* @rdx, align 8
  %v5_a96d = icmp eq i32 %v3_a96a, 0
  br i1 %v5_a96d, label %bb10, label %dec_label_pc_a971

bb10:                                             ; preds = %dec_label_pc_a963
  %v2_a96f = call i64 @function_a99f(i64 %v2_a94a)
  store i64 %v2_a96f, i64* @rax, align 8
  %v0_a971.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_a971

dec_label_pc_a971:                                ; preds = %bb10, %dec_label_pc_a963
  %v0_a988 = phi i64 [ %v0_a971.pre, %bb10 ], [ %v0_a8e0, %dec_label_pc_a963 ]
  %v1_a971 = add i64 %v0_a988, 168
  %v2_a971 = inttoptr i64 %v1_a971 to i64*
  %v3_a971 = load i64, i64* %v2_a971, align 8
  store i64 %v3_a971, i64* @rdi, align 8
  %v1_a97f = inttoptr i64 %v3_a971 to i64*
  %v2_a97f = load i64, i64* %v1_a97f, align 8
  store i64 %v2_a97f, i64* @rax, align 8
  %v1_a988 = add i64 %v0_a988, 176
  %v2_a988 = inttoptr i64 %v1_a988 to i64*
  %v3_a988 = load i64, i64* %v2_a988, align 8
  store i64 %v3_a988, i64* @rdi, align 8
  ret i64 %v2_a97f

dec_label_pc_a997:                                ; preds = %dec_label_pc_a940
  ret i64 %v2_a94a
}

define i64 @function_a99f(i64 %arg1) local_unnamed_addr {
dec_label_pc_a99f:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_a9a8() local_unnamed_addr {
dec_label_pc_a9a8:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$74$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_a9c0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_a9c8 = load i64, i64* @rdi, align 8
  %v0_a9cd = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_a9cd, i64* @rbx, align 8
  store i64 4, i64* @rax, align 8
  store i64 5, i64* %rsi.global-to-local, align 8
  store i64 %v0_a9cd, i64* @rdi, align 8
  %v1_aa2a = add i64 %v0_a9c8, 24
  %v2_aa2a = inttoptr i64 %v1_aa2a to i64*
  %v3_aa2a = load i64, i64* %v2_aa2a, align 8
  store i64 %v3_aa2a, i64* @rax, align 8
  %v1_aa2e = add i64 %v3_aa2a, 8
  %v2_aa2e = inttoptr i64 %v1_aa2e to i32*
  %v3_aa2e = load i32, i32* %v2_aa2e, align 4
  %v4_aa2e = zext i32 %v3_aa2e to i64
  store i64 %v4_aa2e, i64* %rsi.global-to-local, align 8
  %v5_aa31 = icmp eq i32 %v3_aa2e, 0
  br i1 %v5_aa31, label %bb, label %dec_label_pc_aa39

bb:                                               ; preds = %dec_label_pc_a9c0
  %v2_aa33 = call i64 @function_abba(i64 %v0_a9cd)
  store i64 %v2_aa33, i64* @rax, align 8
  br label %dec_label_pc_aa39

dec_label_pc_aa39:                                ; preds = %bb, %dec_label_pc_a9c0
  %v0_aa39 = phi i64 [ %v2_aa33, %bb ], [ %v3_aa2a, %dec_label_pc_a9c0 ]
  %v1_aa39 = add i64 %v0_aa39, 16
  %v2_aa39 = inttoptr i64 %v1_aa39 to i64*
  %v3_aa39 = load i64, i64* %v2_aa39, align 8
  store i64 %v3_aa39, i64* @rbx, align 8
  store i64 43622, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ab76(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_ab76:
  %v0_ab76 = load i64, i64* inttoptr (i64 43901 to i64*), align 8
  store i64 %v0_ab76, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_ab76
}

define i64 @function_ab90(i64 %arg1) local_unnamed_addr {
dec_label_pc_ab90:
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %v0_ab90 = load i64, i64* %r13.global-to-local, align 8
  %v1_ab90 = add i64 %v0_ab90, 32
  %v2_ab90 = inttoptr i64 %v1_ab90 to i64*
  %v3_ab90 = load i64, i64* %v2_ab90, align 8
  store i64 %v3_ab90, i64* @rdi, align 8
  %v0_ab94 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_ab94, i64* @rdx, align 8
  %v1_ab9b = inttoptr i64 %v3_ab90 to i64*
  %v2_ab9b = load i64, i64* %v1_ab9b, align 8
  store i64 %v2_ab9b, i64* @rax, align 8
  %v0_aba4 = load i64, i64* inttoptr (i64 43947 to i64*), align 8
  store i64 %v0_aba4, i64* @rax, align 8
  ret i64 %v0_aba4
}

define i64 @function_abba(i64 %arg1) local_unnamed_addr {
dec_label_pc_abba:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9varargsOfEJPNS1_7VarargsEP6JArrayIPS2_EiiS4_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_abd0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 44000, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_abe9 = load i64, i64* @rcx, align 8
  store i64 %v0_abe9, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_ac2f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_ac2f:
  %v0_ac2f = load i64, i64* @rbx, align 8
  store i64 %v0_ac2f, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_ac2f
}

define i64 @function_ac40() local_unnamed_addr {
dec_label_pc_ac40:
  %v2_ac40 = load i64, i64* @rbx, align 8
  store i64 %v2_ac40, i64* @rax, align 8
  store i64 %v2_ac40, i64* @rdi, align 8
  %v4_ac49 = trunc i64 %v2_ac40 to i32
  %tmp236 = icmp slt i32 %v4_ac49, 1
  br i1 %tmp236, label %bb, label %dec_label_pc_ac51

bb:                                               ; preds = %dec_label_pc_ac40
  %v5_ac4b = call i64 @function_ad00()
  store i64 %v5_ac4b, i64* @rax, align 8
  br label %dec_label_pc_ac51

dec_label_pc_ac51:                                ; preds = %bb, %dec_label_pc_ac40
  store i64 44120, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ac90() local_unnamed_addr {
dec_label_pc_ac90:
  %v2_ac90 = load i64, i64* @rbx, align 8
  store i64 %v2_ac90, i64* @rax, align 8
  store i64 %v2_ac90, i64* @rdi, align 8
  %v4_ac99 = trunc i64 %v2_ac90 to i32
  %tmp236 = icmp slt i32 %v4_ac99, 1
  br i1 %tmp236, label %bb, label %dec_label_pc_ac9d

bb:                                               ; preds = %dec_label_pc_ac90
  %v10_ac9b = call i64 @function_ace0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v10_ac9b, i64* @rax, align 8
  br label %dec_label_pc_ac9d

dec_label_pc_ac9d:                                ; preds = %bb, %dec_label_pc_ac90
  store i64 44196, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ace0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_ace0:
  %v0_ace0 = load i64, i64* @r12, align 8
  %v1_ace0 = trunc i64 %v0_ace0 to i32
  %v2_ace0 = load i64, i64* @r13, align 8
  %v3_ace0 = add i64 %v2_ace0, 8
  %v4_ace0 = inttoptr i64 %v3_ace0 to i32*
  %v5_ace0 = load i32, i32* %v4_ace0, align 4
  %v11_ace0 = icmp ult i32 %v1_ace0, %v5_ace0
  %v1_ace4 = add i64 %v2_ace0, 16
  store i64 %v1_ace4, i64* @rax, align 8
  %v1_ace8 = icmp eq i1 %v11_ace0, false
  br i1 %v1_ace8, label %bb, label %dec_label_pc_acea

bb:                                               ; preds = %dec_label_pc_ace0
  %v2_ace8 = call i64 @function_ad4a()
  store i64 %v2_ace8, i64* @rax, align 8
  %v1_acea.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_acea

dec_label_pc_acea:                                ; preds = %bb, %dec_label_pc_ace0
  %v1_acea = phi i64 [ %v1_acea.pre, %bb ], [ %v0_ace0, %dec_label_pc_ace0 ]
  %v0_acea = phi i64 [ %v2_ace8, %bb ], [ %v1_ace4, %dec_label_pc_ace0 ]
  %v2_acea = mul i64 %v1_acea, 8
  %v3_acea = add i64 %v2_acea, %v0_acea
  %v4_acea = inttoptr i64 %v3_acea to i64*
  %v5_acea = load i64, i64* %v4_acea, align 8
  store i64 %v5_acea, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v5_acea
}

define i64 @function_ad00() local_unnamed_addr {
dec_label_pc_ad00:
  store i64 44295, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ad4a() local_unnamed_addr {
dec_label_pc_ad4a:
  %v0_ad4a = load i64, i64* @r12, align 8
  store i64 %v0_ad4a, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10tailcallOfEJPNS1_7VarargsEPS2_S4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ad60:
  store i64 %arg1, i64* @rdi, align 8
  store i64 44397, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua10GET_OPCODEEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_adb0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_adb1 = load i64, i64* @rdi, align 8
  store i64 %v0_adb1, i64* @rbx, align 8
  store i64 44474, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua8GETARG_AEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_add0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_add1 = load i64, i64* @rdi, align 8
  store i64 44506, i64* @rdi, align 8
  %v1_addc = trunc i64 %v0_add1 to i32
  %v3_addc = sdiv i32 %v1_addc, 64
  %v10_addc = zext i32 %v3_addc to i64
  store i64 %v10_addc, i64* @rax, align 8
  ret i64 %v10_addc
}

define i64 @_ZN3org4luaj3vm23Lua9GETARG_AxEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_adf0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_adf1 = load i64, i64* @rdi, align 8
  store i64 %v0_adf1, i64* @rbx, align 8
  store i64 44538, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua8GETARG_BEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_ae10:
  store i64 %arg1, i64* @rdi, align 8
  %v0_ae11 = load i64, i64* @rdi, align 8
  store i64 %v0_ae11, i64* @rbx, align 8
  store i64 44570, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua8GETARG_CEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_ae30:
  store i64 %arg1, i64* @rdi, align 8
  %v0_ae31 = load i64, i64* @rdi, align 8
  store i64 %v0_ae31, i64* @rbx, align 8
  store i64 44602, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua9GETARG_BxEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_ae50:
  store i64 %arg1, i64* @rdi, align 8
  %v0_ae51 = load i64, i64* @rdi, align 8
  store i64 %v0_ae51, i64* @rbx, align 8
  store i64 44634, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua10GETARG_sBxEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_ae70:
  store i64 %arg1, i64* @rdi, align 8
  %v0_ae71 = load i64, i64* @rdi, align 8
  store i64 44666, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_ae7c = trunc i64 %v0_ae71 to i32
  %v3_ae7c = udiv i32 %v1_ae7c, 16384
  %v10_ae7c = zext i32 %v3_ae7c to i64
  store i64 %v10_ae7c, i64* @rbx, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua3ISKEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_ae90:
  store i64 %arg1, i64* @rdi, align 8
  %v0_ae91 = load i64, i64* @rdi, align 8
  store i64 %v0_ae91, i64* @rbx, align 8
  store i64 44698, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua6INDEXKEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_aeb0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_aeb1 = load i64, i64* @rdi, align 8
  store i64 %v0_aeb1, i64* @rbx, align 8
  store i64 44730, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib5knameEJPNS1_9LuaStringEPNS1_9PrototypeEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_aed0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 44770, i64* @rdi, align 8
  %v0_aee2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_aee2, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_af31(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_af31:
  %v0_af31 = load i64, i64* inttoptr (i64 44856 to i64*), align 8
  store i64 %v0_af31, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_af31
}

define i64 @function_af48() local_unnamed_addr {
dec_label_pc_af48:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_af72() local_unnamed_addr {
dec_label_pc_af72:
  %v0_af72 = load i64, i64* @rbx, align 8
  store i64 %v0_af72, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua5RKASKEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_af80:
  store i64 %arg1, i64* @rdi, align 8
  %v0_af81 = load i64, i64* @rdi, align 8
  store i64 %v0_af81, i64* @rbx, align 8
  store i64 44938, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua9getOpModeEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_afa0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_afa1 = load i64, i64* @rdi, align 8
  store i64 %v0_afa1, i64* @rbx, align 8
  store i64 44971, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua8getBModeEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_afe0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_afe1 = load i64, i64* @rdi, align 8
  store i64 %v0_afe1, i64* @rbx, align 8
  store i64 45035, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua8getCModeEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_b020:
  store i64 %arg1, i64* @rdi, align 8
  %v0_b021 = load i64, i64* @rdi, align 8
  store i64 %v0_b021, i64* @rbx, align 8
  store i64 45099, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua9testAModeEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_b060:
  store i64 %arg1, i64* @rdi, align 8
  %v0_b061 = load i64, i64* @rdi, align 8
  store i64 %v0_b061, i64* @rbx, align 8
  store i64 45163, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua9testTModeEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_b0a0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_b0a1 = load i64, i64* @rdi, align 8
  store i64 %v0_b0a1, i64* @rbx, align 8
  store i64 45227, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Varargs7dealiasEJPS2_v(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b0e0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_b0e4 = load i64, i64* @rdi, align 8
  store i64 %v2_b0e4, i64* @rax, align 8
  store i64 %v2_b0e4, i64* @rbx, align 8
  %v1_b0ed = trunc i64 %v2_b0e4 to i32
  %v11_b0ed = icmp eq i32 %v1_b0ed, 1
  br i1 %v11_b0ed, label %bb, label %dec_label_pc_b0f6

bb:                                               ; preds = %dec_label_pc_b0e0
  %v4_b0f0 = call i64 @function_b1e0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_b0f0, i64* @rax, align 8
  br label %dec_label_pc_b0f6

dec_label_pc_b0f6:                                ; preds = %bb, %dec_label_pc_b0e0
  %v0_b0f9 = phi i64 [ %v4_b0f0, %bb ], [ %v2_b0e4, %dec_label_pc_b0e0 ]
  %v1_b0f6 = trunc i64 %v0_b0f9 to i32
  %v11_b0f6 = icmp eq i32 %v1_b0f6, 2
  br i1 %v11_b0f6, label %bb245, label %dec_label_pc_b101

bb245:                                            ; preds = %dec_label_pc_b0f6
  %v1_b0fb = call i64 @function_b190()
  store i64 %v1_b0fb, i64* @rax, align 8
  br label %dec_label_pc_b101

dec_label_pc_b101:                                ; preds = %bb245, %dec_label_pc_b0f6
  %v0_b101 = phi i64 [ %v1_b0fb, %bb245 ], [ %v0_b0f9, %dec_label_pc_b0f6 ]
  %v4_b101 = trunc i64 %v0_b101 to i32
  %v5_b101 = icmp eq i32 %v4_b101, 0
  br i1 %v5_b101, label %bb246, label %dec_label_pc_b105

bb246:                                            ; preds = %dec_label_pc_b101
  %v1_b103 = call i64 @function_b170()
  store i64 %v1_b103, i64* @rax, align 8
  br label %dec_label_pc_b105

dec_label_pc_b105:                                ; preds = %bb246, %dec_label_pc_b101
  %v0_b10e = phi i64 [ %v1_b103, %bb246 ], [ %v0_b101, %dec_label_pc_b101 ]
  store i64 0, i64* @rdx, align 8
  store i64 %v0_b10e, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b15b(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b15b:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v0_b15b = load i64, i64* @rbx, align 8
  store i64 %v0_b15b, i64* @rax, align 8
  %v0_b15e = load i64, i64* %r12.global-to-local, align 8
  %v2_b15e = add i64 %v0_b15b, 8
  %v3_b15e = inttoptr i64 %v2_b15e to i64*
  store i64 %v0_b15e, i64* %v3_b15e, align 8
  %v0_b162 = load i64, i64* %rbp.global-to-local, align 8
  %v1_b162 = load i64, i64* @rbx, align 8
  %v2_b162 = add i64 %v1_b162, 16
  %v3_b162 = inttoptr i64 %v2_b162 to i64*
  store i64 %v0_b162, i64* %v3_b162, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  %v0_b16a = load i64, i64* @rax, align 8
  ret i64 %v0_b16a
}

define i64 @function_b170() local_unnamed_addr {
dec_label_pc_b170:
  store i64 45431, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b190() local_unnamed_addr {
dec_label_pc_b190:
  store i64 45463, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b1e0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_b1e0:
  %v2_b1e0 = load i64, i64* @rbx, align 8
  store i64 %v2_b1e0, i64* @rax, align 8
  store i64 %v2_b1e0, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_b1e0
}

define i64 @"_ZN3org4luaj3vm218Varargs$SubVarargs3argEJPNS1_8LuaValueEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b1f0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b1f4 = load i64, i64* @rdi, align 8
  %v1_b1f4 = add i64 %v0_b1f4, 16
  %v2_b1f4 = inttoptr i64 %v1_b1f4 to i32*
  %v3_b1f4 = load i32, i32* %v2_b1f4, align 4
  %v4_b1f4 = zext i32 %v3_b1f4 to i64
  store i64 %v4_b1f4, i64* @rax, align 8
  %v1_b1f7 = load i64, i64* %rsi.global-to-local, align 8
  %v3_b1f7 = add nsw i64 %v4_b1f4, -1
  %v4_b1f7 = add i64 %v3_b1f7, %v1_b1f7
  store i64 %v4_b1f7, i64* %rsi.global-to-local, align 8
  %v8_b1fd = icmp sgt i64 %v4_b1f4, %v4_b1f7
  br i1 %v8_b1fd, label %dec_label_pc_b204, label %dec_label_pc_b1ff

dec_label_pc_b1ff:                                ; preds = %dec_label_pc_b1f0
  %v3_b1fb = trunc i64 %v4_b1f7 to i32
  %v3_b1ff = add i64 %v0_b1f4, 20
  %v4_b1ff = inttoptr i64 %v3_b1ff to i32*
  %v5_b1ff = load i32, i32* %v4_b1ff, align 4
  %v9_b202 = icmp sgt i32 %v3_b1fb, %v5_b1ff
  br i1 %v9_b202, label %dec_label_pc_b204, label %bb

bb:                                               ; preds = %dec_label_pc_b1ff
  %v10_b202 = call i64 @function_b220()
  store i64 %v10_b202, i64* @rax, align 8
  br label %dec_label_pc_b204

dec_label_pc_b204:                                ; preds = %dec_label_pc_b1ff, %bb, %dec_label_pc_b1f0
  store i64 45579, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b220() local_unnamed_addr {
dec_label_pc_b220:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_b221(i64 %arg1) local_unnamed_addr {
dec_label_pc_b221:
  store i64 %arg1, i64* @rdi, align 8
  %v0_b221 = load i64, i64* @rdi, align 8
  %v1_b221 = add i64 %v0_b221, 8
  %v2_b221 = inttoptr i64 %v1_b221 to i32*
  %v3_b221 = load i32, i32* %v2_b221, align 4
  %v4_b221 = zext i32 %v3_b221 to i64
  store i64 %v4_b221, i64* @rdi, align 8
  %v1_b224 = inttoptr i64 %v4_b221 to i64*
  %v2_b224 = load i64, i64* %v1_b224, align 8
  store i64 %v2_b224, i64* @rax, align 8
  ret i64 %v2_b224
}

define i64 @"_ZN3org4luaj3vm218Varargs$SubVarargs7subargsEJPNS1_7VarargsEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b230:
  %r12.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b230 = load i64, i64* %rsi.global-to-local, align 8
  %v1_b230 = trunc i64 %v0_b230 to i32
  %v11_b230 = icmp eq i32 %v1_b230, 1
  br i1 %v11_b230, label %bb, label %dec_label_pc_b239

bb:                                               ; preds = %dec_label_pc_b230
  %v2_b233 = call i64 @function_b300(i64 %arg1)
  store i64 %v2_b233, i64* @rax, align 8
  %v2_b24a.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_b239

dec_label_pc_b239:                                ; preds = %bb, %dec_label_pc_b230
  %v0_b251 = phi i64 [ %v2_b24a.pre, %bb ], [ %v0_b230, %dec_label_pc_b230 ]
  store i64 %arg1, i64* @rbx, align 8
  %v1_b246 = add i64 %arg1, 16
  %v2_b246 = inttoptr i64 %v1_b246 to i32*
  %v3_b246 = load i32, i32* %v2_b246, align 4
  %v3_b24a = trunc i64 %v0_b251 to i32
  %v4_b24a = add i32 %v3_b24a, -1
  %v2_b24d = add i32 %v4_b24a, %v3_b246
  %v17_b24d = zext i32 %v2_b24d to i64
  store i64 %v17_b24d, i64* %r12.global-to-local, align 8
  %tmp248 = icmp slt i32 %v3_b24a, 1
  br i1 %tmp248, label %dec_label_pc_b269, label %dec_label_pc_b255

dec_label_pc_b255:                                ; preds = %dec_label_pc_b239
  %v1_b255 = add i64 %arg1, 20
  %v2_b255 = inttoptr i64 %v1_b255 to i32*
  %v3_b255 = load i32, i32* %v2_b255, align 4
  %v4_b255 = zext i32 %v3_b255 to i64
  store i64 %v4_b255, i64* @rax, align 8
  %v9_b258 = icmp ult i32 %v2_b24d, %v3_b255
  br i1 %v9_b258, label %dec_label_pc_b261, label %bb249

bb249:                                            ; preds = %dec_label_pc_b255
  %v6_b25b = call i64 @function_b308()
  store i64 %v6_b25b, i64* @rax, align 8
  %v0_b264.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_b261

dec_label_pc_b261:                                ; preds = %dec_label_pc_b255, %bb249
  %v0_b264 = phi i64 [ %v17_b24d, %dec_label_pc_b255 ], [ %v0_b264.pre, %bb249 ]
  %v0_b261 = phi i64 [ %v4_b255, %dec_label_pc_b255 ], [ %v6_b25b, %bb249 ]
  %v1_b261 = trunc i64 %v0_b261 to i32
  %v2_b261 = add i32 %v1_b261, -1
  %v17_b261 = zext i32 %v2_b261 to i64
  store i64 %v17_b261, i64* @rax, align 8
  %v1_b264 = trunc i64 %v0_b264 to i32
  %v14_b264 = icmp eq i32 %v1_b264, %v2_b261
  br i1 %v14_b264, label %bb250, label %dec_label_pc_b269

bb250:                                            ; preds = %dec_label_pc_b261
  %v1_b267 = call i64 @function_b2a8()
  store i64 %v1_b267, i64* @rax, align 8
  br label %dec_label_pc_b269

dec_label_pc_b269:                                ; preds = %bb250, %dec_label_pc_b261, %dec_label_pc_b239
  store i64 45680, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b2a8() local_unnamed_addr {
dec_label_pc_b2a8:
  store i64 45743, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b300(i64 %arg1) local_unnamed_addr {
dec_label_pc_b300:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_b308() local_unnamed_addr {
dec_label_pc_b308:
  store i64 45839, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm224Varargs$ArrayPartVarargsC1EP6JArrayIPNS1_8LuaValueEEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b330:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b33c = load i64, i64* @rdi, align 8
  store i64 %v0_b33c, i64* @rbx, align 8
  %v17_b341 = load i64, i64* @rax, align 8
  ret i64 %v17_b341
}

define i64 @_ZN3org4luaj3vm25Print18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_b380:
  %v5_b381 = load i64, i64* @rax, align 8
  ret i64 %v5_b381
}

define i64 @function_b95f(i64 %arg1) local_unnamed_addr {
dec_label_pc_b95f:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b968() local_unnamed_addr {
dec_label_pc_b968:
  store i64 39, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b974() local_unnamed_addr {
dec_label_pc_b974:
  store i64 38, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b980() local_unnamed_addr {
dec_label_pc_b980:
  store i64 37, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b98c() local_unnamed_addr {
dec_label_pc_b98c:
  store i64 36, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b998() local_unnamed_addr {
dec_label_pc_b998:
  store i64 35, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9a4() local_unnamed_addr {
dec_label_pc_b9a4:
  store i64 34, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9b0() local_unnamed_addr {
dec_label_pc_b9b0:
  store i64 33, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9bc() local_unnamed_addr {
dec_label_pc_b9bc:
  store i64 32, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9c8() local_unnamed_addr {
dec_label_pc_b9c8:
  store i64 31, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9d4() local_unnamed_addr {
dec_label_pc_b9d4:
  store i64 30, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9e0() local_unnamed_addr {
dec_label_pc_b9e0:
  store i64 29, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9ec() local_unnamed_addr {
dec_label_pc_b9ec:
  store i64 28, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_b9f8() local_unnamed_addr {
dec_label_pc_b9f8:
  store i64 27, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba10() local_unnamed_addr {
dec_label_pc_ba10:
  store i64 25, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba1c() local_unnamed_addr {
dec_label_pc_ba1c:
  store i64 24, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba28() local_unnamed_addr {
dec_label_pc_ba28:
  store i64 23, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba34() local_unnamed_addr {
dec_label_pc_ba34:
  store i64 22, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba40() local_unnamed_addr {
dec_label_pc_ba40:
  store i64 21, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba4c() local_unnamed_addr {
dec_label_pc_ba4c:
  store i64 20, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba58() local_unnamed_addr {
dec_label_pc_ba58:
  store i64 18, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba70() local_unnamed_addr {
dec_label_pc_ba70:
  store i64 17, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba7c() local_unnamed_addr {
dec_label_pc_ba7c:
  store i64 16, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba88() local_unnamed_addr {
dec_label_pc_ba88:
  store i64 15, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ba94() local_unnamed_addr {
dec_label_pc_ba94:
  store i64 14, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_baa0() local_unnamed_addr {
dec_label_pc_baa0:
  store i64 13, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_baac() local_unnamed_addr {
dec_label_pc_baac:
  store i64 12, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bab8() local_unnamed_addr {
dec_label_pc_bab8:
  store i64 11, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bac4() local_unnamed_addr {
dec_label_pc_bac4:
  store i64 10, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bad0() local_unnamed_addr {
dec_label_pc_bad0:
  store i64 9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_badc() local_unnamed_addr {
dec_label_pc_badc:
  store i64 8, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bae8() local_unnamed_addr {
dec_label_pc_bae8:
  store i64 7, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_baf4() local_unnamed_addr {
dec_label_pc_baf4:
  store i64 6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bb00() local_unnamed_addr {
dec_label_pc_bb00:
  store i64 5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bb0c() local_unnamed_addr {
dec_label_pc_bb0c:
  store i64 4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bb18() local_unnamed_addr {
dec_label_pc_bb18:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bb24() local_unnamed_addr {
dec_label_pc_bb24:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_bb30() local_unnamed_addr {
dec_label_pc_bb30:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger8hashCodeEJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_bb40:
  store i64 %arg1, i64* @rdi, align 8
  %v0_bb41 = load i64, i64* @rdi, align 8
  store i64 %v0_bb41, i64* @rbx, align 8
  store i64 47946, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString8hashCodeEJiP6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_bb60:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 47981, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_bb72 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_bb72, i64* @rbx, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6equalsEJbP6JArrayIcEiS5_ii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_bc00:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 48144, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_bc17 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_bc17, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_bc8f() local_unnamed_addr {
dec_label_pc_bc8f:
  %rbp.global-to-local = alloca i64, align 8
  %v0_bc8f = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_bc8f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString12lengthAsUtf8EJiP6JArrayIwE(i64 %arg1) local_unnamed_addr {
dec_label_pc_bca0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_bca1 = load i64, i64* @rdi, align 8
  store i64 %v0_bca1, i64* @rbx, align 8
  store i64 48299, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString12encodeToUtf8EJiP6JArrayIwEiPS3_IcEi(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_bd00:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 48400, i64* @rdi, align 8
  %v0_bd10 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_bd10, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_be35(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_be35:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_be3f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_be3f:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg4, i64* @rdi, align 8
  %v1_be3f = load i64, i64* @rax, align 8
  ret i64 %v1_be3f
}

define i64 @function_be41() local_unnamed_addr {
dec_label_pc_be41:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm228LuaString$RecentShortStrings8access$0EJP6JArrayIPNS1_9LuaStringEEv"() local_unnamed_addr {
dec_label_pc_be50:
  store i64 48727, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable8hashpow2EJiii() local_unnamed_addr {
dec_label_pc_be70:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm28LuaTable7hashmodEJiii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_bea0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_bea2 = load i64, i64* @rdi, align 8
  store i64 %v0_bea2, i64* @rbx, align 8
  store i64 48811, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm221WeakTable$WeakKeySlot8keyindexEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_bed0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_beda = load i64, i64* @rdi, align 8
  %v1_beda = add i64 %v0_beda, 32
  %v2_beda = inttoptr i64 %v1_beda to i32*
  %v3_beda = load i32, i32* %v2_beda, align 4
  %v4_beda = zext i32 %v3_beda to i64
  store i64 %v4_beda, i64* @rbx, align 8
  store i64 48868, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm229WeakTable$WeakKeyAndValueSlot8keyindexEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_bf00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_bf0a = load i64, i64* @rdi, align 8
  %v1_bf0a = add i64 %v0_bf0a, 32
  %v2_bf0a = inttoptr i64 %v1_bf0a to i32*
  %v3_bf0a = load i32, i32* %v2_bf0a, align 4
  %v4_bf0a = zext i32 %v3_bf0a to i64
  store i64 %v4_bf0a, i64* @rbx, align 8
  store i64 48916, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm220LuaTable$IntKeyEntry8keyindexEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_bf30:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_bf3a = load i64, i64* @rdi, align 8
  %v1_bf3a = add i64 %v0_bf3a, 8
  %v2_bf3a = inttoptr i64 %v1_bf3a to i32*
  %v3_bf3a = load i32, i32* %v2_bf3a, align 4
  %v4_bf3a = zext i32 %v3_bf3a to i64
  store i64 %v4_bf3a, i64* @rbx, align 8
  store i64 48964, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable4log2EJii(i64 %arg1) local_unnamed_addr {
dec_label_pc_bf70:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_bf7c = load i64, i64* @rdi, align 8
  store i64 %v0_bf7c, i64* @rbx, align 8
  store i64 49029, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState10dumpHeaderEJvv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c130:
  store i64 %arg1, i64* @rdi, align 8
  %v0_c132 = load i64, i64* @rdi, align 8
  store i64 %v0_c132, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 49478, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState7installEJvPNS1_7GlobalsE(i64 %arg1) local_unnamed_addr {
dec_label_pc_c1f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_c1f1 = load i64, i64* @rdi, align 8
  store i64 %v0_c1f1, i64* @rbx, align 8
  store i64 49659, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure10getUpvalueEJPNS1_8LuaValueEi() local_unnamed_addr {
dec_label_pc_c210:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_c211(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c211:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_c214 = load i64, i64* @rdi, align 8
  %v1_c214 = add i64 %v0_c214, 16
  %v2_c214 = inttoptr i64 %v1_c214 to i64*
  %v3_c214 = load i64, i64* %v2_c214, align 8
  store i64 %v3_c214, i64* @rax, align 8
  %v0_c218 = load i64, i64* %rsi.global-to-local, align 8
  %v1_c218 = trunc i64 %v0_c218 to i32
  %v3_c218 = add i64 %v3_c214, 8
  %v4_c218 = inttoptr i64 %v3_c218 to i32*
  %v5_c218 = load i32, i32* %v4_c218, align 4
  %v11_c218 = icmp ult i32 %v1_c218, %v5_c218
  %v1_c21b = icmp eq i1 %v11_c218, false
  br i1 %v1_c21b, label %dec_label_pc_c247, label %dec_label_pc_c21d

dec_label_pc_c21d:                                ; preds = %dec_label_pc_c211
  %v1_c21d = add i64 %v3_c214, 16
  store i64 %v1_c21d, i64* @rdx, align 8
  %v2_c224 = mul i64 %v0_c218, 8
  %v3_c224 = add i64 %v2_c224, %v1_c21d
  %v4_c224 = inttoptr i64 %v3_c224 to i64*
  %v5_c224 = load i64, i64* %v4_c224, align 8
  store i64 %v5_c224, i64* @rax, align 8
  %v1_c228 = icmp eq i64 %v5_c224, 0
  br i1 %v1_c228, label %bb, label %dec_label_pc_c22d

bb:                                               ; preds = %dec_label_pc_c21d
  %v1_c22b = call i64 @function_c257()
  store i64 %v1_c22b, i64* @rax, align 8
  br label %dec_label_pc_c22d

dec_label_pc_c22d:                                ; preds = %bb, %dec_label_pc_c21d
  %v0_c22d = phi i64 [ %v1_c22b, %bb ], [ %v5_c224, %dec_label_pc_c21d ]
  %v1_c22d = add i64 %v0_c22d, 8
  %v2_c22d = inttoptr i64 %v1_c22d to i64*
  %v3_c22d = load i64, i64* %v2_c22d, align 8
  store i64 %v3_c22d, i64* @rdx, align 8
  %v1_c231 = add i64 %v0_c22d, 16
  %v2_c231 = inttoptr i64 %v1_c231 to i32*
  %v3_c231 = load i32, i32* %v2_c231, align 4
  %v4_c231 = sext i32 %v3_c231 to i64
  store i64 %v4_c231, i64* @rdi, align 8
  %v1_c238 = add i64 %v3_c22d, 16
  store i64 %v1_c238, i64* @rax, align 8
  %v2_c23e = mul nsw i64 %v4_c231, 8
  %v3_c23e = add i64 %v2_c23e, %v1_c238
  %v4_c23e = inttoptr i64 %v3_c23e to i64*
  %v5_c23e = load i64, i64* %v4_c23e, align 8
  store i64 %v5_c23e, i64* @rax, align 8
  ret i64 %v5_c23e

dec_label_pc_c247:                                ; preds = %dec_label_pc_c211
  store i64 %v0_c218, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_c257() local_unnamed_addr {
dec_label_pc_c257:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i128 @_ZN3org4luaj3vm29LuaDouble8hashCodeEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c260:
  store i64 %arg1, i64* @rdi, align 8
  %v0_c264 = load i64, i64* inttoptr (i64 49772 to i64*), align 8
  %v1_c264 = call i128 @__asm_movsd(i64 %v0_c264)
  %v1_c26c = load i64, i64* @rdi, align 8
  %v2_c26c = add i64 %v1_c26c, 8
  %v3_c26c = inttoptr i64 %v2_c26c to i64*
  %v4_c26c = load i64, i64* %v3_c26c, align 8
  %v5_c26c = call i128 @__asm_addsd.7472(i128 %v1_c264, i64 %v4_c26c)
  ret i128 %v5_c26c
}

define i64 @_ZN3org4luaj3vm29LuaDouble6equalsEJbPN4java4lang6ObjectE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c290:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_c2db(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c2db:
  store i64 %arg1, i64* @rbx, align 8
  %v0_c2e1 = load i64, i64* @rax, align 8
  ret i64 %v0_c2e1
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib7optfileEJPNS2_10IoLib$FileEPNS1_8LuaValueE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_c2f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_c2fa = load i64, i64* @rdi, align 8
  store i64 %v0_c2fa, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_c319(i64 %arg1) local_unnamed_addr {
dec_label_pc_c319:
  store i64 %arg1, i64* @rbx, align 8
  %v0_c31a = load i64, i64* @rax, align 8
  ret i64 %v0_c31a
}

define i64 @_ZN3org4luaj3vm26LuaNil6equalsEJbPN4java4lang6ObjectE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c320:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29WeakTable10strengthenEJPNS1_8LuaValueEPN4java4lang6ObjectE(i64 %arg1) local_unnamed_addr {
dec_label_pc_c340:
  store i64 %arg1, i64* @rdi, align 8
  %v0_c341 = load i64, i64* @rdi, align 8
  store i64 %v0_c341, i64* @rbx, align 8
  store i64 49995, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_c390() local_unnamed_addr {
dec_label_pc_c390:
  store i64 50071, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_c3b0() local_unnamed_addr {
dec_label_pc_c3b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm210LuaInteger6equalsEJbPN4java4lang6ObjectE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c3d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_c40b(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c40b:
  store i64 %arg1, i64* @rbx, align 8
  %v0_c411 = load i64, i64* @rax, align 8
  ret i64 %v0_c411
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot3keyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_c420:
  store i64 %arg1, i64* @rdi, align 8
  %v0_c421 = load i64, i64* @rdi, align 8
  %v1_c421 = add i64 %v0_c421, 8
  %v2_c421 = inttoptr i64 %v1_c421 to i64*
  %v3_c421 = load i64, i64* %v2_c421, align 8
  store i64 %v3_c421, i64* @rbx, align 8
  %v4_c421 = load i64, i64* @rax, align 8
  ret i64 %v4_c421
}

define i64 @function_c457() local_unnamed_addr {
dec_label_pc_c457:
  store i64 50270, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosureC1EPNS1_9PrototypeEPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c470:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_c477 = load i64, i64* @rdi, align 8
  store i64 %v0_c477, i64* @rbx, align 8
  %v1_c47a = load i64, i64* @rax, align 8
  ret i64 %v1_c47a
}

define i64 @function_c4c0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_c4c0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_c4c0 = load i64, i64* @rdx, align 8
  %v1_c4c0 = load i64, i64* @rbx, align 8
  %v2_c4c0 = add i64 %v1_c4c0, 24
  %v3_c4c0 = inttoptr i64 %v2_c4c0 to i64*
  store i64 %v0_c4c0, i64* %v3_c4c0, align 8
  store i64 %arg4, i64* @rbx, align 8
  %v0_c4c8 = load i64, i64* @rax, align 8
  ret i64 %v0_c4c8
}

define i128 @"_ZN3org4luaj3vm23lib13MathLib$floor4callEJdd"() local_unnamed_addr {
dec_label_pc_c4d0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  %v0_c4d0 = load i64, i64* inttoptr (i64 50392 to i64*), align 8
  %v1_c4d0 = call i128 @__asm_movsd(i64 %v0_c4d0)
  %v0_c4d8 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_c4d8 = call i128 @__asm_movapd(i128 %v0_c4d8)
  %v0_c4dc = load i64, i64* inttoptr (i64 50404 to i64*), align 8
  %v1_c4dc = call i128 @__asm_movsd(i64 %v0_c4dc)
  %v1_c4e4 = call i128 @__asm_movapd(i128 %v0_c4d8)
  store i128 %v1_c4e4, i128* %xmm1.global-to-local, align 8
  %v2_c4e8 = call i128 @__asm_andpd(i128 %v1_c4d8, i128 %v1_c4d0)
  call void @__asm_ucomisd(i128 %v1_c4dc, i128 %v2_c4e8)
  %v0_c4f0 = load i1, i1* %cf.global-to-local, align 1
  %v1_c4f0 = load i1, i1* %zf.global-to-local, align 1
  %v2_c4f0 = or i1 %v0_c4f0, %v1_c4f0
  br i1 %v2_c4f0, label %dec_label_pc_c4d0.dec_label_pc_c529_crit_edge, label %dec_label_pc_c4f2

dec_label_pc_c4d0.dec_label_pc_c529_crit_edge:    ; preds = %dec_label_pc_c4d0
  %v0_c529.pre = load i128, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_c529

dec_label_pc_c4f2:                                ; preds = %dec_label_pc_c4d0
  %v0_c4f2 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_c4f2 = call i64 @__asm_cvttsd2si.7470(i128 %v0_c4f2)
  store i64 %v1_c4f2, i64* @rax, align 8
  %v2_c4f7 = call i128 @__asm_pxor(i128 %v2_c4e8, i128 %v2_c4e8)
  %v0_c4fb = load i64, i64* inttoptr (i64 50435 to i64*), align 8
  %v1_c4fb = call i128 @__asm_movsd(i64 %v0_c4fb)
  %v2_c503 = call i128 @__asm_andnpd(i128 %v1_c4d0, i128 %v0_c4f2)
  %v1_c507 = call i128 @__asm_cvtsi2sd(i64 %v1_c4f2)
  %v1_c50c = call i128 @__asm_movapd(i128 %v1_c507)
  %v1_c510 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_c510 = call i128 @__asm_cmpnlesd(i128 %v1_c50c, i128 %v1_c510)
  %v1_c515 = call i128 @__asm_movapd(i128 %v2_c510)
  store i128 %v1_c515, i128* %xmm1.global-to-local, align 8
  %v2_c519 = call i128 @__asm_andpd(i128 %v1_c515, i128 %v1_c4fb)
  store i128 %v2_c519, i128* %xmm1.global-to-local, align 8
  %v2_c51d = call i128 @__asm_subsd(i128 %v1_c507, i128 %v2_c519)
  %v1_c521 = call i128 @__asm_movapd(i128 %v2_c51d)
  store i128 %v1_c521, i128* %xmm1.global-to-local, align 8
  %v2_c525 = call i128 @__asm_orpd(i128 %v1_c521, i128 %v2_c503)
  store i128 %v2_c525, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_c529

dec_label_pc_c529:                                ; preds = %dec_label_pc_c4d0.dec_label_pc_c529_crit_edge, %dec_label_pc_c4f2
  %v0_c529 = phi i128 [ %v0_c529.pre, %dec_label_pc_c4d0.dec_label_pc_c529_crit_edge ], [ %v2_c525, %dec_label_pc_c4f2 ]
  %v1_c529 = call i128 @__asm_movapd(i128 %v0_c529)
  store i128 %v1_c529, i128* %xmm0.global-to-local, align 8
  ret i128 %v1_c529
}

define i128 @_ZN3org4luaj3vm29LuaDouble10isvalidkeyEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c530:
  store i64 %arg1, i64* @rdi, align 8
  %v0_c534 = load i64, i64* @rdi, align 8
  %v1_c534 = add i64 %v0_c534, 8
  %v2_c534 = inttoptr i64 %v1_c534 to i64*
  %v3_c534 = load i64, i64* %v2_c534, align 8
  %v4_c534 = call i128 @__asm_movsd(i64 %v3_c534)
  ret i128 %v4_c534
}

define i64 @_ZN3org4luaj3vm29LuaString8isnumberEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c550:
  store i64 %arg1, i64* @rdi, align 8
  %v2_c554 = load i64, i64* @rdi, align 8
  store i64 %v2_c554, i64* @rax, align 8
  ret i64 %v2_c554
}

define i64 @_ZN3org4luaj3vm29LuaString5isintEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c570:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_c574 = load i64, i64* @rdi, align 8
  store i64 %v2_c574, i64* @rax, align 8
  %v0_c57d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_c57d = call i64 @__asm_movsd.7465(i128 %v0_c57d)
  %v5_c57d = load i64, i64* @rax, align 8
  ret i64 %v5_c57d
}

define i128 @function_c5d0() local_unnamed_addr {
dec_label_pc_c5d0:
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %v0_c5d2 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_c5d2, label %dec_label_pc_c5e2, label %dec_label_pc_c5d4

dec_label_pc_c5d4:                                ; preds = %dec_label_pc_c5d0
  %v0_c5d4 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_c5d4 = call i32 @__asm_cvttsd2si(i128 %v0_c5d4)
  %v2_c5d4 = sext i32 %v1_c5d4 to i64
  store i64 %v2_c5d4, i64* @rax, align 8
  %v0_c5d8 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_c5d8 = call i128 @__asm_pxor(i128 %v0_c5d8, i128 %v0_c5d8)
  store i128 %v2_c5d8, i128* %xmm0.global-to-local, align 8
  %v3_c5dc = call i128 @__asm_cvtsi2sd.7468(i32 %v1_c5d4)
  store i128 %v3_c5dc, i128* %xmm0.global-to-local, align 8
  ret i128 %v3_c5dc

dec_label_pc_c5e2:                                ; preds = %dec_label_pc_c5d0
  %v0_c5e2 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_c5e2 = call i128 @__asm_pxor(i128 %v0_c5e2, i128 %v0_c5e2)
  store i128 %v2_c5e2, i128* %xmm0.global-to-local, align 8
  ret i128 %v2_c5e2
}

define i64 @_ZN3org4luaj3vm29LuaString6islongEJbv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c5f0:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_c5f0 = load i64, i64* @rsp, align 8
  %v1_c5f0 = add i64 %v0_c5f0, -24
  %v5_c5f0 = icmp ult i64 %v0_c5f0, 24
  store i1 %v5_c5f0, i1* %cf.global-to-local, align 1
  %v10_c5f0 = icmp eq i64 %v1_c5f0, 0
  store i1 %v10_c5f0, i1* %zf.global-to-local, align 1
  %v12_c5f0 = trunc i64 %v1_c5f0 to i8
  %v13_c5f0 = call i8 @llvm.ctpop.i8(i8 %v12_c5f0)
  %v14_c5f0 = urem i8 %v13_c5f0, 2
  %v15_c5f0 = icmp eq i8 %v14_c5f0, 0
  store i1 %v15_c5f0, i1* %pf.global-to-local, align 1
  %v2_c5f4 = load i64, i64* @rdi, align 8
  store i64 %v2_c5f4, i64* @rax, align 8
  %v0_c5fd = load i128, i128* %xmm0.global-to-local, align 8
  %v1_c5fd = call i64 @__asm_movsd.7465(i128 %v0_c5fd)
  store i64 0, i64* @rdx, align 8
  %v0_c60a = load i64, i64* @rax, align 8
  %v4_c60a = trunc i64 %v0_c60a to i8
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_c60a = icmp eq i8 %v4_c60a, 0
  store i1 %v5_c60a, i1* %zf.global-to-local, align 1
  %v7_c60a = call i8 @llvm.ctpop.i8(i8 %v4_c60a)
  %v8_c60a = urem i8 %v7_c60a, 2
  %v9_c60a = icmp eq i8 %v8_c60a, 0
  store i1 %v9_c60a, i1* %pf.global-to-local, align 1
  %v1_c60c = icmp eq i1 %v5_c60a, false
  br i1 %v1_c60c, label %dec_label_pc_c631, label %dec_label_pc_c60e

dec_label_pc_c60e:                                ; preds = %dec_label_pc_c5f0
  %v0_c60e = load i64, i64* inttoptr (i64 50710 to i64*), align 8
  %v1_c60e = call i128 @__asm_movsd(i64 %v0_c60e)
  store i128 %v1_c60e, i128* %xmm0.global-to-local, align 8
  %v4_c616 = call i128 @__asm_movsd(i64 %v1_c5fd)
  call void @__asm_ucomisd(i128 %v4_c616, i128 %v1_c60e)
  %v0_c620 = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_c620, label %dec_label_pc_c640, label %dec_label_pc_c622

dec_label_pc_c622:                                ; preds = %dec_label_pc_c640, %dec_label_pc_c60e
  %v1_c622 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_c616, i128 %v1_c622)
  store i64 0, i64* @rax, align 8
  %v0_c62b = load i1, i1* %pf.global-to-local, align 1
  %v1_c62b = icmp eq i1 %v0_c62b, false
  %v2_c62b = zext i1 %v1_c62b to i64
  %v3_c62b = load i64, i64* @rdx, align 8
  %v4_c62b = and i64 %v3_c62b, 4294967040
  %v0_c62e = load i1, i1* %zf.global-to-local, align 1
  %v1_c62e = icmp eq i1 %v0_c62e, false
  %v5_c62b.op = or i64 %v4_c62b, %v2_c62b
  %v7_c62e = select i1 %v1_c62e, i64 0, i64 %v5_c62b.op
  store i64 %v7_c62e, i64* @rdx, align 8
  br label %dec_label_pc_c631

dec_label_pc_c631:                                ; preds = %dec_label_pc_c622, %dec_label_pc_c5f0
  %v0_c631 = phi i64 [ %v7_c62e, %dec_label_pc_c622 ], [ 0, %dec_label_pc_c5f0 ]
  store i64 %v0_c631, i64* @rax, align 8
  %v0_c633 = load i64, i64* @rsp, align 8
  %v1_c633 = add i64 %v0_c633, 24
  %v5_c633 = icmp ugt i64 %v0_c633, -25
  store i1 %v5_c633, i1* %cf.global-to-local, align 1
  %v10_c633 = icmp eq i64 %v1_c633, 0
  store i1 %v10_c633, i1* %zf.global-to-local, align 1
  %v12_c633 = trunc i64 %v1_c633 to i8
  %v13_c633 = call i8 @llvm.ctpop.i8(i8 %v12_c633)
  %v14_c633 = urem i8 %v13_c633, 2
  %v15_c633 = icmp eq i8 %v14_c633, 0
  store i1 %v15_c633, i1* %pf.global-to-local, align 1
  ret i64 %v0_c631

dec_label_pc_c640:                                ; preds = %dec_label_pc_c60e
  %v0_c640 = load i64, i64* inttoptr (i64 50760 to i64*), align 8
  %v1_c640 = call i128 @__asm_movsd(i64 %v0_c640)
  store i128 %v1_c640, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_c640, i128 %v4_c616)
  %v0_c64c = load i1, i1* %cf.global-to-local, align 1
  %v1_c64c = icmp eq i1 %v0_c64c, false
  br i1 %v1_c64c, label %dec_label_pc_c622, label %dec_label_pc_c64e

dec_label_pc_c64e:                                ; preds = %dec_label_pc_c640
  %v2_c64c = load i64, i64* @rax, align 8
  ret i64 %v2_c64c
}

define i128 @function_c650() local_unnamed_addr {
dec_label_pc_c650:
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %v0_c652 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_c652, label %dec_label_pc_c664, label %dec_label_pc_c654

dec_label_pc_c654:                                ; preds = %dec_label_pc_c650
  %v0_c654 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_c654 = call i64 @__asm_cvttsd2si.7470(i128 %v0_c654)
  store i64 %v1_c654, i64* @rax, align 8
  %v0_c659 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_c659 = call i128 @__asm_pxor(i128 %v0_c659, i128 %v0_c659)
  store i128 %v2_c659, i128* %xmm0.global-to-local, align 8
  %v1_c65d = call i128 @__asm_cvtsi2sd(i64 %v1_c654)
  store i128 %v1_c65d, i128* %xmm0.global-to-local, align 8
  ret i128 %v1_c65d

dec_label_pc_c664:                                ; preds = %dec_label_pc_c650
  %v0_c664 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_c664 = call i128 @__asm_pxor(i128 %v0_c664, i128 %v0_c664)
  store i128 %v2_c664, i128* %xmm0.global-to-local, align 8
  ret i128 %v2_c664
}

define i64 @_ZN3org4luaj3vm29LuaString8todoubleEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c670:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_c674 = load i64, i64* @rdi, align 8
  store i64 %v2_c674, i64* @rax, align 8
  %v0_c67d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_c67d = call i64 @__asm_movsd.7465(i128 %v0_c67d)
  %v5_c67d = load i64, i64* @rax, align 8
  ret i64 %v5_c67d
}

define i64 @_ZN3org4luaj3vm211LuaFunction9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c6a0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_c6a2 = load i64, i64* @rax, align 8
  ret i64 %v1_c6a2
}

define i64 @function_c6fa() local_unnamed_addr {
dec_label_pc_c6fa:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_c710:
  store i64 %arg1, i64* @rdi, align 8
  %v1_c712 = load i64, i64* @rax, align 8
  ret i64 %v1_c712
}

define i64 @function_c767() local_unnamed_addr {
dec_label_pc_c767:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm219WeakTable$WeakValue8toStringEJPN4java4lang6StringEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_c770:
  store i64 %arg1, i64* @rdi, align 8
  %v1_c772 = load i64, i64* @rax, align 8
  ret i64 %v1_c772
}

define i64 @function_c7c5(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c7c5:
  %v2_c7c5 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_c7c5 = load i64, i64* @rax, align 8
  %v4_c7c5 = trunc i64 %v3_c7c5 to i8
  %v5_c7c5 = add i8 %v4_c7c5, %v2_c7c5
  %v21_c7c5 = inttoptr i64 %v3_c7c5 to i8*
  store i8 %v5_c7c5, i8* %v21_c7c5, align 1
  %v0_c7c7 = load i64, i64* @rax, align 8
  %v1_c7c7 = icmp eq i64 %v0_c7c7, 0
  br i1 %v1_c7c7, label %bb, label %dec_label_pc_c7cc

bb:                                               ; preds = %dec_label_pc_c7c5
  %v1_c7ca = call i64 @function_c7db()
  store i64 %v1_c7ca, i64* @rax, align 8
  br label %dec_label_pc_c7cc

dec_label_pc_c7cc:                                ; preds = %bb, %dec_label_pc_c7c5
  %v0_c7da = phi i64 [ %v1_c7ca, %bb ], [ %v0_c7c7, %dec_label_pc_c7c5 ]
  store i64 %v0_c7da, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_c7da
}

define i64 @function_c7db() local_unnamed_addr {
dec_label_pc_c7db:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib10freadcharsEJvPNS2_10IoLib$FileEPN4java4lang6StringEPNS6_2io21ByteArrayOutputStreamE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c7f0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_c7f4 = load i64, i64* @rdx, align 8
  %v0_c7f9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_c7f9, i64* @rbp, align 8
  %v0_c7fc = load i64, i64* @rdi, align 8
  store i64 %v0_c7fc, i64* @rbx, align 8
  %v1_c803 = icmp eq i64 %v0_c7f9, 0
  br i1 %v1_c803, label %bb, label %dec_label_pc_c808

bb:                                               ; preds = %dec_label_pc_c7f0
  %v1_c806 = call i64 @function_c879()
  store i64 %v1_c806, i64* @rax, align 8
  br label %dec_label_pc_c808

dec_label_pc_c808:                                ; preds = %bb, %dec_label_pc_c7f0
  %v1_c808 = icmp eq i64 %v0_c7f4, 0
  br i1 %v1_c808, label %dec_label_pc_c81c, label %dec_label_pc_c80d

dec_label_pc_c80d:                                ; preds = %dec_label_pc_c808
  %v0_c80d = call i64 @function_c841()
  store i64 %v0_c80d, i64* @rax, align 8
  ret i64 %v0_c80d

dec_label_pc_c81c:                                ; preds = %dec_label_pc_c808
  %v2_c81c = load i64, i64* @rdi, align 8
  store i64 %v2_c81c, i64* @rax, align 8
  store i64 %v0_c7f9, i64* @rdi, align 8
  store i64 %v2_c81c, i64* %rsi.global-to-local, align 8
  ret i64 %v2_c81c
}

define i64 @function_c836() local_unnamed_addr {
dec_label_pc_c836:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_c841() local_unnamed_addr {
dec_label_pc_c841:
  %v2_c841 = load i64, i64* @rbx, align 8
  store i64 %v2_c841, i64* @rax, align 8
  %v0_c84d = load i64, i64* @rbp, align 8
  store i64 %v0_c84d, i64* @rdi, align 8
  ret i64 %v2_c841
}

define i64 @function_c879() local_unnamed_addr {
dec_label_pc_c879:
  %v2_c879 = load i64, i64* @rbx, align 8
  store i64 %v2_c879, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchStateC1EPNS1_7VarargsEPNS1_9LuaStringES7_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_c890:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_c89c = load i64, i64* @rdi, align 8
  store i64 %v0_c89c, i64* @rbx, align 8
  %v17_c8a2 = load i64, i64* @rax, align 8
  ret i64 %v17_c8a2
}

define i64 @_ZN3org4luaj3vm26Buffer18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_c900:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm26BufferC1Ei(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c920:
  store i64 %arg1, i64* @rdi, align 8
  %v0_c924 = load i64, i64* @rdi, align 8
  store i64 %v0_c924, i64* @rbx, align 8
  %v17_c927 = load i64, i64* @rax, align 8
  ret i64 %v17_c927
}

define i64 @_ZN3org4luaj3vm23Lua18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_c970:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_cc2f() local_unnamed_addr {
dec_label_pc_cc2f:
  store i64 39, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc3b() local_unnamed_addr {
dec_label_pc_cc3b:
  store i64 38, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc47() local_unnamed_addr {
dec_label_pc_cc47:
  store i64 37, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc53() local_unnamed_addr {
dec_label_pc_cc53:
  store i64 36, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc5f() local_unnamed_addr {
dec_label_pc_cc5f:
  store i64 35, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc6b() local_unnamed_addr {
dec_label_pc_cc6b:
  store i64 34, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc77() local_unnamed_addr {
dec_label_pc_cc77:
  store i64 33, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc83() local_unnamed_addr {
dec_label_pc_cc83:
  store i64 32, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc8f() local_unnamed_addr {
dec_label_pc_cc8f:
  store i64 31, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cc9b() local_unnamed_addr {
dec_label_pc_cc9b:
  store i64 30, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cca7() local_unnamed_addr {
dec_label_pc_cca7:
  store i64 29, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ccb3() local_unnamed_addr {
dec_label_pc_ccb3:
  store i64 28, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ccbf() local_unnamed_addr {
dec_label_pc_ccbf:
  store i64 27, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cccb() local_unnamed_addr {
dec_label_pc_cccb:
  store i64 26, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ccd7() local_unnamed_addr {
dec_label_pc_ccd7:
  store i64 25, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cce3() local_unnamed_addr {
dec_label_pc_cce3:
  store i64 24, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ccef() local_unnamed_addr {
dec_label_pc_ccef:
  store i64 23, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ccfb() local_unnamed_addr {
dec_label_pc_ccfb:
  store i64 22, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd07() local_unnamed_addr {
dec_label_pc_cd07:
  store i64 21, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd13() local_unnamed_addr {
dec_label_pc_cd13:
  store i64 20, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd1f() local_unnamed_addr {
dec_label_pc_cd1f:
  store i64 19, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd2b() local_unnamed_addr {
dec_label_pc_cd2b:
  store i64 18, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd37() local_unnamed_addr {
dec_label_pc_cd37:
  store i64 17, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd43() local_unnamed_addr {
dec_label_pc_cd43:
  store i64 16, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd4f() local_unnamed_addr {
dec_label_pc_cd4f:
  store i64 15, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd5b() local_unnamed_addr {
dec_label_pc_cd5b:
  store i64 14, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd67() local_unnamed_addr {
dec_label_pc_cd67:
  store i64 13, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd73() local_unnamed_addr {
dec_label_pc_cd73:
  store i64 12, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd7f() local_unnamed_addr {
dec_label_pc_cd7f:
  store i64 11, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd8b() local_unnamed_addr {
dec_label_pc_cd8b:
  store i64 10, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cd97() local_unnamed_addr {
dec_label_pc_cd97:
  store i64 9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cda3() local_unnamed_addr {
dec_label_pc_cda3:
  store i64 8, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cdaf() local_unnamed_addr {
dec_label_pc_cdaf:
  store i64 7, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cdbb() local_unnamed_addr {
dec_label_pc_cdbb:
  store i64 6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cdc7() local_unnamed_addr {
dec_label_pc_cdc7:
  store i64 5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cdd3() local_unnamed_addr {
dec_label_pc_cdd3:
  store i64 4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cddf() local_unnamed_addr {
dec_label_pc_cddf:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cdeb() local_unnamed_addr {
dec_label_pc_cdeb:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cdf7() local_unnamed_addr {
dec_label_pc_cdf7:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_ce10:
  store i64 52760, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cf8c(i64 %arg1) local_unnamed_addr {
dec_label_pc_cf8c:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cf95() local_unnamed_addr {
dec_label_pc_cf95:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cfa1() local_unnamed_addr {
dec_label_pc_cfa1:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cfad() local_unnamed_addr {
dec_label_pc_cfad:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cfb9() local_unnamed_addr {
dec_label_pc_cfb9:
  store i64 5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_cfc5() local_unnamed_addr {
dec_label_pc_cfc5:
  store i64 4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib10IoLib$File9tojstringEJPN4java4lang6StringEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_cfe0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_cfe2 = load i64, i64* @rax, align 8
  ret i64 %v1_cfe2
}

define i64 @function_d03e() local_unnamed_addr {
dec_label_pc_d03e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib16DebugLib$sethook6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_d050:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d05a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_d05a, i64* @rbx, align 8
  store i64 %v0_d05a, i64* @rdi, align 8
  store i64 %v0_d05a, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v4_d075 = trunc i64 %v0_d05a to i8
  %v5_d075 = icmp eq i8 %v4_d075, 0
  %v1_d077 = icmp eq i1 %v5_d075, false
  br i1 %v1_d077, label %bb, label %dec_label_pc_d0e7

bb:                                               ; preds = %dec_label_pc_d050
  %v2_d077 = call i64 @function_d190()
  store i64 %v2_d077, i64* @rax, align 8
  br label %dec_label_pc_d0e7

dec_label_pc_d0e7:                                ; preds = %dec_label_pc_d050, %bb
  store i64 2, i64* @rax, align 8
  store i64 0, i64* @rdx, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rbx, align 8
  store i64 1, i64* @rdi, align 8
  ret i64 2
}

define i64 @function_d138() local_unnamed_addr {
dec_label_pc_d138:
  %v0_d13e = load i64, i64* @rax, align 8
  ret i64 %v0_d13e
}

define i64 @function_d140(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d140:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %tmp241 = call i32 @__decompiler_undefined_function_2()
  store i64 %arg1, i64* @rax, align 8
  store i64 %arg2, i64* @rcx, align 8
  %v1_d14a = add i64 %arg1, 8
  %v2_d14a = inttoptr i64 %v1_d14a to i64*
  %v3_d14a = load i64, i64* %v2_d14a, align 8
  store i64 %v3_d14a, i64* @rax, align 8
  %v0_d14e = load i64, i64* %r12.global-to-local, align 8
  %v1_d14e = trunc i64 %v0_d14e to i8
  %v3_d14e = add i64 %v3_d14a, 65
  %v4_d14e = inttoptr i64 %v3_d14e to i8*
  store i8 %v1_d14e, i8* %v4_d14e, align 1
  %v0_d152 = load i64, i64* %r15.global-to-local, align 8
  %v1_d152 = trunc i64 %v0_d152 to i8
  %v2_d152 = load i64, i64* @rax, align 8
  %v3_d152 = add i64 %v2_d152, 64
  %v4_d152 = inttoptr i64 %v3_d152 to i8*
  store i8 %v1_d152, i8* %v4_d152, align 1
  %v0_d156 = load i64, i64* %r14.global-to-local, align 8
  %v1_d156 = trunc i64 %v0_d156 to i8
  %v2_d156 = load i64, i64* @rax, align 8
  %v3_d156 = add i64 %v2_d156, 66
  %v4_d156 = inttoptr i64 %v3_d156 to i8*
  store i8 %v1_d156, i8* %v4_d156, align 1
  %v0_d15a = load i64, i64* @rax, align 8
  %v1_d15a = add i64 %v0_d15a, 65
  %v2_d15a = inttoptr i64 %v1_d15a to i8*
  %v3_d15a = load i8, i8* %v2_d15a, align 1
  %v4_d15a = urem i8 %v3_d15a, 2
  store i8 %v4_d15a, i8* %v2_d15a, align 1
  %v0_d15e = load i64, i64* @rax, align 8
  %v1_d15e = add i64 %v0_d15e, 64
  %v2_d15e = inttoptr i64 %v1_d15e to i8*
  %v3_d15e = load i8, i8* %v2_d15e, align 1
  %v4_d15e = urem i8 %v3_d15e, 2
  store i8 %v4_d15e, i8* %v2_d15e, align 1
  %v0_d162 = load i64, i64* @rcx, align 8
  %v1_d162 = load i64, i64* @rax, align 8
  %v2_d162 = add i64 %v1_d162, 56
  %v3_d162 = inttoptr i64 %v2_d162 to i64*
  store i64 %v0_d162, i64* %v3_d162, align 8
  %v0_d166 = load i64, i64* @rax, align 8
  %v1_d166 = add i64 %v0_d166, 66
  %v2_d166 = inttoptr i64 %v1_d166 to i8*
  %v3_d166 = load i8, i8* %v2_d166, align 1
  %v4_d166 = urem i8 %v3_d166, 2
  store i8 %v4_d166, i8* %v2_d166, align 1
  %v4_d16a = zext i32 %tmp241 to i64
  store i64 %v4_d16a, i64* @rcx, align 8
  %v2_d16e = load i64, i64* @rax, align 8
  %v3_d16e = add i64 %v2_d16e, ptrtoint (i32** @global_var_44.7477 to i64)
  %v4_d16e = inttoptr i64 %v3_d16e to i32*
  %v0_d171 = load i64, i64* inttoptr (i64 53624 to i64*), align 8
  store i64 %v0_d171, i64* @rax, align 8
  ret i64 %v0_d171
}

define i64 @function_d190() local_unnamed_addr {
dec_label_pc_d190:
  %v2_d190 = load i64, i64* @rbx, align 8
  store i64 %v2_d190, i64* @rax, align 8
  store i64 %v2_d190, i64* @rdi, align 8
  ret i64 %v2_d190
}

define i64 @function_d1bb() local_unnamed_addr {
dec_label_pc_d1bb:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217Globals$StrReader4readEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_d1d0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d1d0 = load i64, i64* @rdi, align 8
  %v1_d1d0 = add i64 %v0_d1d0, 24
  %v2_d1d0 = inttoptr i64 %v1_d1d0 to i32*
  %v3_d1d0 = load i32, i32* %v2_d1d0, align 4
  %v4_d1d0 = zext i32 %v3_d1d0 to i64
  store i64 %v4_d1d0, i64* %rsi.global-to-local, align 8
  %v3_d1d3 = add i64 %v0_d1d0, 28
  %v4_d1d3 = inttoptr i64 %v3_d1d3 to i32*
  %v5_d1d3 = load i32, i32* %v4_d1d3, align 4
  %v7_d1d6 = icmp slt i32 %v3_d1d0, %v5_d1d3
  br i1 %v7_d1d6, label %dec_label_pc_d1d8, label %bb

bb:                                               ; preds = %dec_label_pc_d1d0
  %v8_d1d6 = call i64 @function_d200()
  store i64 %v8_d1d6, i64* @rax, align 8
  %v0_d1dc.pre = load i64, i64* @rdi, align 8
  %v0_d1e3.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_d1d8

dec_label_pc_d1d8:                                ; preds = %dec_label_pc_d1d0, %bb
  %v0_d1e3 = phi i64 [ %v4_d1d0, %dec_label_pc_d1d0 ], [ %v0_d1e3.pre, %bb ]
  %v0_d1dc = phi i64 [ %v0_d1d0, %dec_label_pc_d1d0 ], [ %v0_d1dc.pre, %bb ]
  store i64 %v0_d1dc, i64* @rax, align 8
  %v1_d1df = add i64 %v0_d1dc, 16
  %v2_d1df = inttoptr i64 %v1_d1df to i64*
  %v3_d1df = load i64, i64* %v2_d1df, align 8
  store i64 %v3_d1df, i64* @rdi, align 8
  %v1_d1e3 = add i64 %v0_d1e3, 1
  store i64 %v1_d1e3, i64* @rdx, align 8
  %v1_d1e6 = icmp eq i64 %v3_d1df, 0
  %v1_d1e9 = trunc i64 %v1_d1e3 to i32
  %v3_d1e9 = add i64 %v0_d1dc, 24
  %v4_d1e9 = inttoptr i64 %v3_d1e9 to i32*
  store i32 %v1_d1e9, i32* %v4_d1e9, align 4
  br i1 %v1_d1e6, label %bb242, label %dec_label_pc_d1d8.dec_label_pc_d1ee_crit_edge

dec_label_pc_d1d8.dec_label_pc_d1ee_crit_edge:    ; preds = %dec_label_pc_d1d8
  %v2_d1ec.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_d1ee

bb242:                                            ; preds = %dec_label_pc_d1d8
  %v1_d1ec = call i64 @function_d206()
  store i64 %v1_d1ec, i64* @rax, align 8
  br label %dec_label_pc_d1ee

dec_label_pc_d1ee:                                ; preds = %dec_label_pc_d1d8.dec_label_pc_d1ee_crit_edge, %bb242
  %v2_d1ec = phi i64 [ %v2_d1ec.pre, %dec_label_pc_d1d8.dec_label_pc_d1ee_crit_edge ], [ %v1_d1ec, %bb242 ]
  ret i64 %v2_d1ec
}

define i64 @function_d200() local_unnamed_addr {
dec_label_pc_d200:
  store i64 4294967295, i64* @rax, align 8
  ret i64 4294967295
}

define i64 @function_d206() local_unnamed_addr {
dec_label_pc_d206:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217Globals$StrReader4readEJiP6JArrayIwEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_d210:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d22c = load i64, i64* @rdi, align 8
  store i64 %v0_d22c, i64* @rbx, align 8
  %v1_d23b = add i64 %v0_d22c, 16
  %v2_d23b = inttoptr i64 %v1_d23b to i64*
  %v3_d23b = load i64, i64* %v2_d23b, align 8
  store i64 %v3_d23b, i64* @rdi, align 8
  %v1_d273 = load i64, i64* @rax, align 8
  ret i64 %v1_d273
}

define i64 @_ZN3org4luaj3vm28LuaValue9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_d2f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_d2f2 = load i64, i64* @rdi, align 8
  store i64 %v0_d2f2, i64* @rbx, align 8
  store i64 54012, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_d374() local_unnamed_addr {
dec_label_pc_d374:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_d380:
  store i64 %arg1, i64* @rdi, align 8
  %v0_d384 = load i64, i64* @rdi, align 8
  %v1_d384 = add i64 %v0_d384, 8
  %v2_d384 = inttoptr i64 %v1_d384 to i64*
  %v3_d384 = load i64, i64* %v2_d384, align 8
  store i64 %v3_d384, i64* @rdi, align 8
  %v4_d384 = load i64, i64* @rax, align 8
  ret i64 %v4_d384
}

define i64 @_ZN3org4luaj3vm29Prototype11shortsourceEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_d3a0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_d3a1 = load i64, i64* @rdi, align 8
  %v1_d3a1 = add i64 %v0_d3a1, 56
  %v2_d3a1 = inttoptr i64 %v1_d3a1 to i64*
  %v3_d3a1 = load i64, i64* %v2_d3a1, align 8
  store i64 %v3_d3a1, i64* @rdi, align 8
  %v1_d3a5 = inttoptr i64 %v3_d3a1 to i64*
  %v2_d3a5 = load i64, i64* %v1_d3a5, align 8
  store i64 %v2_d3a5, i64* @rax, align 8
  %v1_d3ae = icmp eq i64 %v2_d3a5, 0
  br i1 %v1_d3ae, label %bb, label %dec_label_pc_d3ba

bb:                                               ; preds = %dec_label_pc_d3a0
  %v1_d3b8 = call i64 @function_d416()
  store i64 %v1_d3b8, i64* @rax, align 8
  br label %dec_label_pc_d3ba

dec_label_pc_d3ba:                                ; preds = %bb, %dec_label_pc_d3a0
  %v2_d3b8 = phi i64 [ %v1_d3b8, %bb ], [ %v2_d3a5, %dec_label_pc_d3a0 ]
  ret i64 %v2_d3b8
}

define i64 @function_d3dc() local_unnamed_addr {
dec_label_pc_d3dc:
  %v0_d3dc = load i64, i64* @rbx, align 8
  store i64 %v0_d3dc, i64* @rdi, align 8
  %v0_d3df = load i64, i64* @rax, align 8
  ret i64 %v0_d3df
}

define i64 @function_d416() local_unnamed_addr {
dec_label_pc_d416:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot4findEJPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d420:
  store i64 %arg1, i64* @rdi, align 8
  %v2_d429 = load i64, i64* @rdi, align 8
  store i64 %v2_d429, i64* @rbx, align 8
  store i64 6, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot5keyeqEJbPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d470:
  store i64 %arg1, i64* @rdi, align 8
  %v2_d479 = load i64, i64* @rdi, align 8
  store i64 %v2_d479, i64* @rbx, align 8
  store i64 7, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot3setEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_d4c0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d4cc = load i64, i64* @rdi, align 8
  store i64 %v0_d4cc, i64* @rbx, align 8
  store i64 %v0_d4cc, i64* @rax, align 8
  %v1_d4dc = icmp eq i64 %v0_d4cc, 0
  br i1 %v1_d4dc, label %bb, label %dec_label_pc_d4e5

bb:                                               ; preds = %dec_label_pc_d4c0
  %v1_d4df = call i64 @function_d570()
  store i64 %v1_d4df, i64* @rax, align 8
  br label %dec_label_pc_d4e5

dec_label_pc_d4e5:                                ; preds = %bb, %dec_label_pc_d4c0
  store i64 6, i64* @rdx, align 8
  store i64 54515, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_d570() local_unnamed_addr {
dec_label_pc_d570:
  %v0_d570 = load i64, i64* @rbx, align 8
  %v1_d570 = add i64 %v0_d570, 24
  %v2_d570 = inttoptr i64 %v1_d570 to i64*
  %v3_d570 = load i64, i64* %v2_d570, align 8
  store i64 %v3_d570, i64* @rbx, align 8
  store i64 7, i64* @rdx, align 8
  %v1_d580 = inttoptr i64 %v3_d570 to i64*
  %v2_d580 = load i64, i64* %v1_d580, align 8
  store i64 %v2_d580, i64* @rax, align 8
  %v1_d583 = inttoptr i64 %v2_d580 to i64*
  %v2_d583 = load i64, i64* %v1_d583, align 8
  store i64 %v2_d583, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot3addEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d5b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_d5b7 = load i64, i64* @rdi, align 8
  %v1_d5b7 = add i64 %v0_d5b7, 24
  %v2_d5b7 = inttoptr i64 %v1_d5b7 to i64*
  %v3_d5b7 = load i64, i64* %v2_d5b7, align 8
  store i64 %v0_d5b7, i64* @rbx, align 8
  %v1_d5c3 = inttoptr i64 %v3_d5b7 to i64*
  %v2_d5c3 = load i64, i64* %v1_d5c3, align 8
  store i64 %v2_d5c3, i64* @rax, align 8
  store i64 8, i64* @rdx, align 8
  %v1_d5d3 = inttoptr i64 %v2_d5c3 to i64*
  %v2_d5d3 = load i64, i64* %v1_d5d3, align 8
  store i64 %v2_d5d3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot6removeEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d630:
  store i64 %arg1, i64* @rdi, align 8
  %v2_d637 = load i64, i64* @rdi, align 8
  store i64 %v2_d637, i64* @rax, align 8
  store i64 %v2_d637, i64* @rbx, align 8
  %v1_d643 = icmp eq i64 %v2_d637, 0
  br i1 %v1_d643, label %bb, label %dec_label_pc_d648

bb:                                               ; preds = %dec_label_pc_d630
  %v1_d646 = call i64 @function_d6c0()
  store i64 %v1_d646, i64* @rax, align 8
  br label %dec_label_pc_d648

dec_label_pc_d648:                                ; preds = %bb, %dec_label_pc_d630
  store i64 7, i64* @rdx, align 8
  store i64 54870, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_d6c0() local_unnamed_addr {
dec_label_pc_d6c0:
  %v0_d6c0 = load i64, i64* @rbx, align 8
  %v1_d6c0 = add i64 %v0_d6c0, 24
  %v2_d6c0 = inttoptr i64 %v1_d6c0 to i64*
  %v3_d6c0 = load i64, i64* %v2_d6c0, align 8
  store i64 %v3_d6c0, i64* @rbx, align 8
  store i64 9, i64* @rdx, align 8
  %v1_d6d0 = inttoptr i64 %v3_d6c0 to i64*
  %v2_d6d0 = load i64, i64* %v1_d6d0, align 8
  store i64 %v2_d6d0, i64* @rax, align 8
  %v1_d6d3 = inttoptr i64 %v2_d6d0 to i64*
  %v2_d6d3 = load i64, i64* %v1_d6d3, align 8
  store i64 %v2_d6d3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable12getmetatableEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_d6f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_d6f1 = load i64, i64* @rdi, align 8
  %v1_d6f1 = add i64 %v0_d6f1, 32
  %v2_d6f1 = inttoptr i64 %v1_d6f1 to i64*
  %v3_d6f1 = load i64, i64* %v2_d6f1, align 8
  store i64 %v3_d6f1, i64* @rbx, align 8
  %v1_d6f5 = icmp eq i64 %v3_d6f1, 0
  br i1 %v1_d6f5, label %bb, label %dec_label_pc_d6fa

bb:                                               ; preds = %dec_label_pc_d6f0
  %v2_d6f8 = call i64 @function_d720(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_d6f8, i64* @rax, align 8
  br label %dec_label_pc_d6fa

dec_label_pc_d6fa:                                ; preds = %bb, %dec_label_pc_d6f0
  %v1_d6fa = inttoptr i64 %v3_d6f1 to i64*
  %v2_d6fa = load i64, i64* %v1_d6fa, align 8
  store i64 %v2_d6fa, i64* @rax, align 8
  store i64 3, i64* @rdx, align 8
  %v1_d709 = inttoptr i64 %v2_d6fa to i64*
  %v2_d709 = load i64, i64* %v1_d709, align 8
  store i64 %v2_d709, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_d720(i64 %arg1) local_unnamed_addr {
dec_label_pc_d720:
  store i64 0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable6rawgetEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d730:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d736 = load i64, i64* @rdi, align 8
  store i64 %v0_d736, i64* @rbp, align 8
  %v0_d739 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_d739, i64* @rbx, align 8
  store i64 %v0_d739, i64* @rdi, align 8
  store i64 %v0_d739, i64* @rax, align 8
  %v4_d74c = trunc i64 %v0_d739 to i8
  %v5_d74c = icmp eq i8 %v4_d74c, 0
  br i1 %v5_d74c, label %bb, label %dec_label_pc_d750

bb:                                               ; preds = %dec_label_pc_d730
  %v5_d74e = call i64 @function_d7b8(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_d74e, i64* @rax, align 8
  %v2_d750.pre = load i64, i64* @rsi, align 8
  %v0_d753.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_d750

dec_label_pc_d750:                                ; preds = %bb, %dec_label_pc_d730
  %v0_d753 = phi i64 [ %v0_d753.pre, %bb ], [ %v0_d739, %dec_label_pc_d730 ]
  %v2_d750 = phi i64 [ %v2_d750.pre, %bb ], [ %v0_d739, %dec_label_pc_d730 ]
  store i64 %v2_d750, i64* @rax, align 8
  store i64 %v0_d753, i64* @rdi, align 8
  %v4_d75c = trunc i64 %v2_d750 to i32
  store i64 %v2_d750, i64* @r12, align 8
  %tmp249 = icmp slt i32 %v4_d75c, 1
  br i1 %tmp249, label %bb250, label %dec_label_pc_d763

bb250:                                            ; preds = %dec_label_pc_d750
  %v9_d761 = call i64 @function_d7b8(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v9_d761, i64* @rax, align 8
  %v0_d76b.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_d763

dec_label_pc_d763:                                ; preds = %bb250, %dec_label_pc_d750
  %v0_d76b = phi i64 [ %v0_d76b.pre, %bb250 ], [ %v2_d750, %dec_label_pc_d750 ]
  %v0_d763 = load i64, i64* @rbp, align 8
  %v1_d763 = add i64 %v0_d763, 8
  %v2_d763 = inttoptr i64 %v1_d763 to i64*
  %v3_d763 = load i64, i64* %v2_d763, align 8
  store i64 %v3_d763, i64* @r13, align 8
  %v1_d767 = add i64 %v3_d763, 8
  %v2_d767 = inttoptr i64 %v1_d767 to i32*
  %v3_d767 = load i32, i32* %v2_d767, align 4
  %v4_d767 = zext i32 %v3_d767 to i64
  store i64 %v4_d767, i64* @rax, align 8
  %v8_d76e = icmp sgt i64 %v0_d76b, %v4_d767
  br i1 %v8_d76e, label %bb251, label %dec_label_pc_d770

bb251:                                            ; preds = %dec_label_pc_d763
  %v13_d76e = call i64 @function_d7b8(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v13_d76e, i64* @rax, align 8
  %v0_d770.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_d770

dec_label_pc_d770:                                ; preds = %bb251, %dec_label_pc_d763
  %v0_d770 = phi i64 [ %v0_d770.pre, %bb251 ], [ %v0_d763, %dec_label_pc_d763 ]
  %v1_d770 = add i64 %v0_d770, 32
  %v2_d770 = inttoptr i64 %v1_d770 to i64*
  %v3_d770 = load i64, i64* %v2_d770, align 8
  store i64 %v3_d770, i64* @rbx, align 8
  %v1_d774 = icmp eq i64 %v3_d770, 0
  br i1 %v1_d774, label %bb252, label %dec_label_pc_d779

bb252:                                            ; preds = %dec_label_pc_d770
  %v1_d777 = call i64 @function_d7d8()
  store i64 %v1_d777, i64* @rax, align 8
  br label %dec_label_pc_d779

dec_label_pc_d779:                                ; preds = %bb252, %dec_label_pc_d770
  %v1_d779 = inttoptr i64 %v3_d770 to i64*
  %v2_d779 = load i64, i64* %v1_d779, align 8
  store i64 %v2_d779, i64* @rax, align 8
  store i64 55171, i64* %rsi.global-to-local, align 8
  store i64 6, i64* @rdx, align 8
  %v1_d788 = inttoptr i64 %v2_d779 to i64*
  %v2_d788 = load i64, i64* %v1_d788, align 8
  store i64 %v2_d788, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_d7b8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_d7b8:
  %v2_d7b8 = load i64, i64* @rbp, align 8
  store i64 %v2_d7b8, i64* @rax, align 8
  %v0_d7bc = load i64, i64* @rbx, align 8
  store i64 %v0_d7bc, i64* @rsi, align 8
  store i64 %v2_d7b8, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg4, i64* @r13, align 8
  ret i64 %v2_d7b8
}

define i64 @function_d7d8() local_unnamed_addr {
dec_label_pc_d7d8:
  %v0_d7d8 = load i64, i64* @r12, align 8
  %v1_d7d8 = trunc i64 %v0_d7d8 to i32
  %v2_d7d8 = add i32 %v1_d7d8, -1
  %v17_d7d8 = zext i32 %v2_d7d8 to i64
  %v2_d7e0 = load i64, i64* @rax, align 8
  %v3_d7e0 = trunc i64 %v2_d7e0 to i32
  %v9_d7e0 = icmp ult i32 %v2_d7d8, %v3_d7e0
  %v1_d7e3 = icmp eq i1 %v9_d7e0, false
  br i1 %v1_d7e3, label %dec_label_pc_d7ef, label %dec_label_pc_d7e5

dec_label_pc_d7e5:                                ; preds = %dec_label_pc_d7d8
  %v0_d7dc = load i64, i64* @r13, align 8
  %v1_d7dc = add i64 %v0_d7dc, 16
  %v2_d7e8 = mul nuw nsw i64 %v17_d7d8, 8
  %v3_d7e8 = add i64 %v2_d7e8, %v1_d7dc
  %v4_d7e8 = inttoptr i64 %v3_d7e8 to i64*
  %v5_d7e8 = load i64, i64* %v4_d7e8, align 8
  store i64 %v5_d7e8, i64* @rax, align 8
  ret i64 %v5_d7e8

dec_label_pc_d7ef:                                ; preds = %dec_label_pc_d7d8
  store i64 %v17_d7d8, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable8arraysetEJbiPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_d800:
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d800 = load i64, i64* %rsi.global-to-local, align 8
  %v4_d800 = trunc i64 %v0_d800 to i32
  %tmp250 = icmp slt i32 %v4_d800, 1
  br i1 %tmp250, label %bb, label %dec_label_pc_d808

bb:                                               ; preds = %dec_label_pc_d800
  %v5_d802 = call i64 @function_d8a8()
  store i64 %v5_d802, i64* @rax, align 8
  %v0_d816.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_d808

dec_label_pc_d808:                                ; preds = %bb, %dec_label_pc_d800
  %v0_d831 = phi i64 [ %v0_d816.pre, %bb ], [ %v0_d800, %dec_label_pc_d800 ]
  %v0_d80a = load i64, i64* %r13.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_d812 = load i64, i64* @rdi, align 8
  %v1_d812 = add i64 %v0_d812, 8
  %v2_d812 = inttoptr i64 %v1_d812 to i64*
  %v3_d812 = load i64, i64* %v2_d812, align 8
  store i64 %v3_d812, i64* %r13.global-to-local, align 8
  %v1_d816 = trunc i64 %v0_d831 to i32
  %v3_d816 = add i64 %v3_d812, 8
  %v4_d816 = inttoptr i64 %v3_d816 to i32*
  %v5_d816 = load i32, i32* %v4_d816, align 4
  %v9_d81a = icmp sgt i32 %v1_d816, %v5_d816
  br i1 %v9_d81a, label %dec_label_pc_d81c, label %dec_label_pc_d828

dec_label_pc_d81c:                                ; preds = %dec_label_pc_d808
  store i64 %v0_d80a, i64* %r13.global-to-local, align 8
  ret i64 0

dec_label_pc_d828:                                ; preds = %dec_label_pc_d808
  %v2_d828 = load i64, i64* @rdx, align 8
  store i64 %v2_d828, i64* @rax, align 8
  %v1_d831 = add i64 %v0_d831, -1
  store i64 %v1_d831, i64* @rbx, align 8
  store i64 %v2_d828, i64* @rdi, align 8
  %v1_d844 = add i64 %v0_d812, 32
  %v2_d844 = inttoptr i64 %v1_d844 to i64*
  %v3_d844 = load i64, i64* %v2_d844, align 8
  %v1_d851 = inttoptr i64 %v3_d844 to i64*
  %v2_d851 = load i64, i64* %v1_d851, align 8
  store i64 %v2_d851, i64* @rax, align 8
  store i64 55388, i64* %rsi.global-to-local, align 8
  store i64 5, i64* @rdx, align 8
  %v1_d861 = inttoptr i64 %v2_d851 to i64*
  %v2_d861 = load i64, i64* %v1_d861, align 8
  store i64 %v2_d861, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_d8a8() local_unnamed_addr {
dec_label_pc_d8a8:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_d8ab() local_unnamed_addr {
dec_label_pc_d8ab:
  %v0_d8ab = load i64, i64* @rbx, align 8
  store i64 %v0_d8ab, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable13countHashKeysEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_d8c0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_d8c8 = load i64, i64* @rdi, align 8
  %v1_d8c8 = add i64 %v0_d8c8, 16
  %v2_d8c8 = inttoptr i64 %v1_d8c8 to i64*
  %v3_d8c8 = load i64, i64* %v2_d8c8, align 8
  store i64 %v3_d8c8, i64* @rax, align 8
  %v1_d8d7 = add i64 %v3_d8c8, 16
  store i64 %v1_d8d7, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  %v4_d8f3 = inttoptr i64 %v1_d8d7 to i64*
  %v5_d8f3 = load i64, i64* %v4_d8f3, align 8
  store i64 %v5_d8f3, i64* @rbx, align 8
  ret i64 %v3_d8c8
}

define i64 @function_d972(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_d972:
  %rbp.global-to-local = alloca i64, align 8
  %v0_d972 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_d972, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v0_d972
}

define i64 @_ZN3org4luaj3vm28LuaTable19dropWeakArrayValuesEJvv(i64 %arg1) local_unnamed_addr {
dec_label_pc_d980:
  store i64 %arg1, i64* @rdi, align 8
  %v0_d988 = load i64, i64* @rdi, align 8
  %v1_d988 = add i64 %v0_d988, 8
  %v2_d988 = inttoptr i64 %v1_d988 to i64*
  %v3_d988 = load i64, i64* %v2_d988, align 8
  %v1_d98c = add i64 %v3_d988, 8
  %v2_d98c = inttoptr i64 %v1_d98c to i32*
  %v3_d98c = load i32, i32* %v2_d98c, align 4
  %v4_d98c = zext i32 %v3_d98c to i64
  store i64 %v4_d98c, i64* @rax, align 8
  %tmp242 = icmp slt i32 %v3_d98c, 1
  br i1 %tmp242, label %bb, label %dec_label_pc_d993

bb:                                               ; preds = %dec_label_pc_d980
  %v5_d991 = call i64 @function_d9d0()
  store i64 %v5_d991, i64* @rax, align 8
  br label %dec_label_pc_d993

dec_label_pc_d993:                                ; preds = %bb, %dec_label_pc_d980
  %v0_d99f = phi i64 [ %v5_d991, %bb ], [ %v4_d98c, %dec_label_pc_d980 ]
  store i64 0, i64* @rbx, align 8
  ret i64 %v0_d99f
}

define i64 @function_d9d0() local_unnamed_addr {
dec_label_pc_d9d0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @_ZN3org4luaj3vm28LuaTable12countIntKeysEJiP6JArrayIiE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_d9e0:
  %r10.global-to-local = alloca i64, align 8
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d9e4 = load i64, i64* @rdi, align 8
  store i64 %v0_d9e4, i64* %r15.global-to-local, align 8
  %v0_d9eb = load i64, i64* @rsi, align 8
  store i64 %v0_d9eb, i64* @r13, align 8
  store i64 0, i64* @rcx, align 8
  store i64 1, i64* @r11, align 8
  store i64 0, i64* @rbp, align 8
  store i64 1, i64* %r14.global-to-local, align 8
  %v1_da04 = add i64 %v0_d9e4, 8
  %v2_da04 = inttoptr i64 %v1_da04 to i64*
  %v3_da04 = load i64, i64* %v2_da04, align 8
  store i64 %v3_da04, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_da10

dec_label_pc_da10:                                ; preds = %dec_label_pc_da75.dec_label_pc_da10_crit_edge, %dec_label_pc_d9e0
  %v7_da2c = phi i64 [ %v2_da88, %dec_label_pc_da75.dec_label_pc_da10_crit_edge ], [ %v0_d9eb, %dec_label_pc_d9e0 ]
  %v2_da29 = phi i64 [ %v2_da17.pre, %dec_label_pc_da75.dec_label_pc_da10_crit_edge ], [ 1, %dec_label_pc_d9e0 ]
  %v2_da1f = phi i64 [ %v1_da84, %dec_label_pc_da75.dec_label_pc_da10_crit_edge ], [ 0, %dec_label_pc_d9e0 ]
  %v0_da10 = phi i64 [ %v0_da10.pre, %dec_label_pc_da75.dec_label_pc_da10_crit_edge ], [ %v3_da04, %dec_label_pc_d9e0 ]
  %v1_da10 = add i64 %v0_da10, 8
  %v2_da10 = inttoptr i64 %v1_da10 to i32*
  %v3_da10 = load i32, i32* %v2_da10, align 4
  %v4_da10 = zext i32 %v3_da10 to i64
  store i64 %v4_da10, i64* %r10.global-to-local, align 8
  store i64 %v2_da1f, i64* @rdi, align 8
  %v5_da1a = icmp slt i64 %v4_da10, %v2_da29
  br i1 %v5_da1a, label %dec_label_pc_da90, label %dec_label_pc_da1c

dec_label_pc_da1c:                                ; preds = %dec_label_pc_da10
  %v0_da1c = load i64, i64* %r14.global-to-local, align 8
  %v3_da1f = trunc i64 %v2_da1f to i32
  %v4_da1f = urem i32 %v3_da1f, 32
  %v6_da1f = icmp eq i32 %v4_da1f, 0
  br i1 %v6_da1f, label %bb275, label %bb

bb:                                               ; preds = %dec_label_pc_da1c
  %v1_da1f = trunc i64 %v0_da1c to i32
  %v7_da1f = shl i32 %v1_da1f, %v4_da1f
  %v14_da1f = zext i32 %v7_da1f to i64
  br label %bb275

bb275:                                            ; preds = %dec_label_pc_da1c, %bb
  %storemerge = phi i64 [ %v14_da1f, %bb ], [ %v0_da1c, %dec_label_pc_da1c ]
  %v6_da25 = phi i64 [ %v14_da1f, %bb ], [ %v0_da1c, %dec_label_pc_da1c ]
  store i64 %storemerge, i64* %r9.global-to-local, align 8
  %v1_da22 = trunc i64 %v6_da25 to i32
  %v4_da22 = sub i32 %v1_da22, %v3_da10
  %v10_da223 = xor i64 %v6_da25, %v4_da10
  %v10_da22 = trunc i64 %v10_da223 to i32
  %v11_da22 = xor i32 %v4_da22, %v1_da22
  %v12_da22 = and i32 %v11_da22, %v10_da22
  %v13_da22 = icmp slt i32 %v12_da22, 0
  %v14_da22 = icmp eq i32 %v4_da22, 0
  %v15_da22 = icmp slt i32 %v4_da22, 0
  %v3_da25 = icmp eq i1 %v15_da22, %v13_da22
  %v4_da25 = icmp eq i1 %v14_da22, false
  %v5_da25 = icmp eq i1 %v3_da25, %v4_da25
  %v10_da25.v = select i1 %v5_da25, i64 %v4_da10, i64 %v6_da25
  %v11_da25 = and i64 %v10_da25.v, 4294967295
  store i64 %v11_da25, i64* %r9.global-to-local, align 8
  %v5_da2c = icmp slt i64 %v11_da25, %v2_da29
  br i1 %v5_da2c, label %bb276, label %dec_label_pc_da32

bb276:                                            ; preds = %bb275
  %v8_da2c = call i64 @function_db61(i64 %v2_da1f, i64 %v7_da2c)
  store i64 %v8_da2c, i64* @rax, align 8
  %v0_da32.pre = load i64, i64* @r11, align 8
  %v0_da3a.pre = load i64, i64* %r12.global-to-local, align 8
  %v2_da3f.pre = load i64, i64* %r10.global-to-local, align 8
  br label %dec_label_pc_da32

dec_label_pc_da32:                                ; preds = %bb276, %bb275
  %v2_da3f = phi i64 [ %v2_da3f.pre, %bb276 ], [ %v4_da10, %bb275 ]
  %v0_da3a = phi i64 [ %v0_da3a.pre, %bb276 ], [ %v0_da10, %bb275 ]
  %v0_da32 = phi i64 [ %v0_da32.pre, %bb276 ], [ %v2_da29, %bb275 ]
  %v1_da32 = add i64 %v0_da32, -1
  store i64 %v1_da32, i64* @rdx, align 8
  %v1_da36 = add i64 %v0_da32, 1
  store i64 %v1_da36, i64* @rax, align 8
  %v1_da3a = add i64 %v0_da3a, 16
  store i64 %v1_da3a, i64* @rbx, align 8
  %v1_da3f = trunc i64 %v1_da32 to i32
  %v3_da3f = trunc i64 %v2_da3f to i32
  %v9_da3f = icmp ult i32 %v1_da3f, %v3_da3f
  %v1_da42 = icmp eq i1 %v9_da3f, false
  br i1 %v1_da42, label %bb277, label %dec_label_pc_da48

bb277:                                            ; preds = %dec_label_pc_da32
  %v3_da42 = load i64, i64* @rsi, align 8
  %v5_da42 = call i64 @function_db68(i64 %v2_da1f, i64 %v3_da42, i64 %v1_da32)
  store i64 %v5_da42, i64* @rax, align 8
  br label %dec_label_pc_da48

dec_label_pc_da48:                                ; preds = %bb277, %dec_label_pc_da32
  %v0_da6219 = phi i64 [ %v5_da42, %bb277 ], [ %v1_da36, %dec_label_pc_da32 ]
  br label %dec_label_pc_da5f

dec_label_pc_da50:                                ; preds = %dec_label_pc_da5f
  %v1_da50 = trunc i64 %v0_da5f to i32
  %v2_da50 = add i32 %v1_da50, 1
  %v17_da50 = zext i32 %v2_da50 to i64
  store i64 %v17_da50, i64* @rdx, align 8
  %v2_da53 = add i64 %v0_da53, 1
  %v17_da53 = and i64 %v2_da53, 4294967295
  store i64 %v17_da53, i64* @rax, align 8
  %v2_da56 = load i64, i64* %r10.global-to-local, align 8
  %v3_da56 = trunc i64 %v2_da56 to i32
  %v9_da56 = icmp ult i32 %v2_da50, %v3_da56
  %v1_da59 = icmp eq i1 %v9_da56, false
  br i1 %v1_da59, label %bb278, label %dec_label_pc_da5f

bb278:                                            ; preds = %dec_label_pc_da50
  %v5_da59 = call i64 @function_db68(i64 %v2_da1f, i64 %v34_da6d, i64 %v17_da50)
  store i64 %v5_da59, i64* @rax, align 8
  %v0_da6d.pre.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_da5f

dec_label_pc_da5f:                                ; preds = %bb278, %dec_label_pc_da50, %dec_label_pc_da48
  %v0_da6d = phi i64 [ 0, %dec_label_pc_da48 ], [ %v34_da6d, %dec_label_pc_da50 ], [ %v0_da6d.pre.pre, %bb278 ]
  %v0_da53 = phi i64 [ %v0_da6219, %dec_label_pc_da48 ], [ %v17_da53, %dec_label_pc_da50 ], [ %v5_da59, %bb278 ]
  %v0_da5f = load i64, i64* @rdx, align 8
  store i64 %v0_da53, i64* @r11, align 8
  %v0_da65 = load i64, i64* @rbx, align 8
  %v2_da65 = mul i64 %v0_da5f, 8
  %v3_da65 = add i64 %v0_da65, %v2_da65
  %v4_da65 = inttoptr i64 %v3_da65 to i64*
  %v5_da65 = load i64, i64* %v4_da65, align 8
  %v1_da6d = trunc i64 %v0_da6d to i32
  %not.v2_da6d = icmp ne i64 %v5_da65, 0
  %v4_da6d = sext i1 %not.v2_da6d to i32
  %v5_da6d = sub i32 %v1_da6d, %v4_da6d
  %v34_da6d = zext i32 %v5_da6d to i64
  store i64 %v34_da6d, i64* @rsi, align 8
  %v0_da70 = load i64, i64* %r9.global-to-local, align 8
  %v5_da73 = icmp slt i64 %v0_da70, %v0_da53
  br i1 %v5_da73, label %dec_label_pc_da75, label %dec_label_pc_da50

dec_label_pc_da75:                                ; preds = %dec_label_pc_da5f
  %v0_da75 = load i64, i64* @r13, align 8
  %v4_da75 = load i64, i64* @rcx, align 8
  %v4_da7f = mul i64 %v4_da75, 4
  %v5_da7f = add i64 %v0_da75, 12
  %v6_da7f = add i64 %v5_da7f, %v4_da7f
  %v7_da7f = inttoptr i64 %v6_da7f to i32*
  store i32 %v5_da6d, i32* %v7_da7f, align 4
  %v0_da84 = load i64, i64* @rcx, align 8
  %v1_da84 = add i64 %v0_da84, 1
  store i64 %v1_da84, i64* @rcx, align 8
  %v0_da88 = load i64, i64* @rbp, align 8
  %v2_da88 = load i64, i64* @rsi, align 8
  %v4_da88 = add i64 %v2_da88, %v0_da88
  %v20_da88 = and i64 %v4_da88, 4294967295
  store i64 %v20_da88, i64* @rbp, align 8
  %v10_da8a = icmp eq i64 %v0_da84, 30
  %v1_da8e = icmp eq i1 %v10_da8a, false
  br i1 %v1_da8e, label %dec_label_pc_da75.dec_label_pc_da10_crit_edge, label %dec_label_pc_da90

dec_label_pc_da75.dec_label_pc_da10_crit_edge:    ; preds = %dec_label_pc_da75
  %v0_da10.pre = load i64, i64* %r12.global-to-local, align 8
  %v2_da17.pre = load i64, i64* @r11, align 8
  br label %dec_label_pc_da10

dec_label_pc_da90:                                ; preds = %dec_label_pc_da75, %dec_label_pc_da10
  %v0_da90 = load i64, i64* %r15.global-to-local, align 8
  %v1_da90 = add i64 %v0_da90, 16
  %v2_da90 = inttoptr i64 %v1_da90 to i64*
  %v3_da90 = load i64, i64* %v2_da90, align 8
  store i64 %v3_da90, i64* @rax, align 8
  %v1_da94 = add i64 %v3_da90, 8
  %v2_da94 = inttoptr i64 %v1_da94 to i32*
  %v3_da94 = load i32, i32* %v2_da94, align 4
  %v4_da94 = zext i32 %v3_da94 to i64
  store i64 %v4_da94, i64* @rdx, align 8
  %tmp280 = icmp slt i32 %v3_da94, 1
  br i1 %tmp280, label %bb281, label %dec_label_pc_da9f

bb281:                                            ; preds = %dec_label_pc_da90
  %v11_da99 = call i64 @function_db50(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_da99, i64* @rax, align 8
  br label %dec_label_pc_da9f

dec_label_pc_da9f:                                ; preds = %bb281, %dec_label_pc_da90
  %v1_dabc = phi i64 [ %v11_da99, %bb281 ], [ %v3_da90, %dec_label_pc_da90 ]
  %v1_da9f = add i64 %v1_dabc, 16
  store i64 %v1_da9f, i64* @rcx, align 8
  %v0_daa3 = load i64, i64* @r13, align 8
  %v1_daa3 = add i64 %v0_daa3, 12
  store i64 %v1_daa3, i64* %r12.global-to-local, align 8
  store i64 0, i64* %r14.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %v4_dab3 = inttoptr i64 %v1_da9f to i64*
  %v5_dab3 = load i64, i64* %v4_dab3, align 8
  store i64 %v5_dab3, i64* @rbx, align 8
  ret i64 %v1_dabc
}

define i64 @function_db50(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_db50:
  %v0_db50 = load i64, i64* @rbp, align 8
  store i64 %v0_db50, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* @r13, align 8
  ret i64 %v0_db50
}

define i64 @function_db61(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_db61:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rsi, align 8
  %v0_db63 = load i64, i64* @rax, align 8
  ret i64 %v0_db63
}

define i64 @function_db68(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_db68:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_db71() local_unnamed_addr {
dec_label_pc_db71:
  %v0_db71 = load i64, i64* @rax, align 8
  store i64 %v0_db71, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable7compareEJbiiPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_db80:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_db84 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_db84, i64* @r14, align 8
  %v0_db8b = load i64, i64* @rdx, align 8
  store i64 %v0_db8b, i64* @r13, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v1_db9a = add i64 %arg1, 32
  %v2_db9a = inttoptr i64 %v1_db9a to i64*
  %v3_db9a = load i64, i64* %v2_db9a, align 8
  %v1_db9e = icmp eq i64 %v3_db9a, 0
  br i1 %v1_db9e, label %bb, label %dec_label_pc_dba7

bb:                                               ; preds = %dec_label_pc_db80
  %v2_dba1 = call i64 @function_dc80(i64 %arg1)
  store i64 %v2_dba1, i64* @rax, align 8
  br label %dec_label_pc_dba7

dec_label_pc_dba7:                                ; preds = %bb, %dec_label_pc_db80
  %v1_dba7 = inttoptr i64 %v3_db9a to i64*
  %v2_dba7 = load i64, i64* %v1_dba7, align 8
  store i64 %v2_dba7, i64* @rax, align 8
  store i64 56246, i64* %rsi.global-to-local, align 8
  store i64 6, i64* @rdx, align 8
  %v1_dbbb = inttoptr i64 %v2_dba7 to i64*
  %v2_dbbb = load i64, i64* %v1_dbbb, align 8
  store i64 %v2_dbbb, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_dc80(i64 %arg1) local_unnamed_addr {
dec_label_pc_dc80:
  store i64 %arg1, i64* @rdi, align 8
  %v1_dc80 = add i64 %arg1, 8
  %v2_dc80 = inttoptr i64 %v1_dc80 to i64*
  %v3_dc80 = load i64, i64* %v2_dc80, align 8
  store i64 %v3_dc80, i64* @rdx, align 8
  %v1_dc84 = add i64 %v3_dc80, 16
  store i64 %v1_dc84, i64* @rax, align 8
  %v1_dc88 = add i64 %v3_dc80, 8
  %v2_dc88 = inttoptr i64 %v1_dc88 to i32*
  %v3_dc88 = load i32, i32* %v2_dc88, align 4
  %v4_dc88 = zext i32 %v3_dc88 to i64
  store i64 %v4_dc88, i64* @rdx, align 8
  %v0_dc8b = load i64, i64* @r14, align 8
  %v1_dc8b = trunc i64 %v0_dc8b to i32
  %v9_dc8b = icmp ult i32 %v1_dc8b, %v3_dc88
  %v1_dc8e = icmp eq i1 %v9_dc8b, false
  br i1 %v1_dc8e, label %dec_label_pc_dca2, label %dec_label_pc_dc90

dec_label_pc_dc90:                                ; preds = %dec_label_pc_dc80
  %v2_dc90 = load i64, i64* @r13, align 8
  %v2_dc99 = mul i64 %v2_dc90, 8
  %v3_dc99 = add i64 %v2_dc99, %v1_dc84
  %v4_dc99 = inttoptr i64 %v3_dc99 to i64*
  %v5_dc99 = load i64, i64* %v4_dc99, align 8
  store i64 %v5_dc99, i64* @rbx, align 8
  ret i64 %v1_dc84

dec_label_pc_dca2:                                ; preds = %dec_label_pc_dc80
  store i64 %v0_dc8b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot3addEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_dcc0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v0_dcc9 = load i64, i64* @rdi, align 8
  %v1_dcc9 = add i64 %v0_dcc9, 16
  %v2_dcc9 = inttoptr i64 %v1_dcc9 to i64*
  %v3_dcc9 = load i64, i64* %v2_dcc9, align 8
  %v1_dcd2 = inttoptr i64 %v3_dcc9 to i64*
  %v2_dcd2 = load i64, i64* %v1_dcd2, align 8
  store i64 %v2_dcd2, i64* @rax, align 8
  store i64 8, i64* @rdx, align 8
  %v1_dce2 = inttoptr i64 %v2_dcd2 to i64*
  %v2_dce2 = load i64, i64* %v1_dce2, align 8
  store i64 %v2_dce2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot3addEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_dd10:
  store i64 %arg1, i64* @rdi, align 8
  %v0_dd17 = load i64, i64* @rdi, align 8
  %v1_dd17 = add i64 %v0_dd17, 16
  %v2_dd17 = inttoptr i64 %v1_dd17 to i64*
  %v3_dd17 = load i64, i64* %v2_dd17, align 8
  store i64 %v0_dd17, i64* @rbx, align 8
  store i64 8, i64* @rdx, align 8
  %v1_dd2a = inttoptr i64 %v3_dd17 to i64*
  %v2_dd2a = load i64, i64* %v1_dd2a, align 8
  store i64 %v2_dd2a, i64* @rax, align 8
  %v1_dd2e = inttoptr i64 %v2_dd2a to i64*
  %v2_dd2e = load i64, i64* %v1_dd2e, align 8
  store i64 %v2_dd2e, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14MathLib$randomC1Ev"(i64 %arg1) local_unnamed_addr {
dec_label_pc_dd70:
  store i64 %arg1, i64* @rdi, align 8
  %v0_dd72 = load i64, i64* @rdi, align 8
  store i64 %v0_dd72, i64* @rbx, align 8
  %v17_dd75 = load i64, i64* @rax, align 8
  ret i64 %v17_dd75
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$cos4callEJdd"() local_unnamed_addr {
dec_label_pc_ddb0:
  %v17_ddb0 = load i64, i64* @rax, align 8
  ret i64 %v17_ddb0
}

define i64 @_ZN3org4luaj3vm23lib7MathLib12dpow_defaultEJddd() local_unnamed_addr {
dec_label_pc_ddc0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 56775, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_ddcd = load i128, i128* %xmm0.global-to-local, align 8
  %v1_ddcd = call i64 @__asm_movsd.7465(i128 %v0_ddcd)
  %v0_ddd3 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_ddd3 = call i64 @__asm_movsd.7465(i128 %v0_ddd3)
  %v4_ddd3 = load i64, i64* @rax, align 8
  ret i64 %v4_ddd3
}

define i64 @_ZN3org4luaj3vm23lib7MathLib6dpow_dEJddd() local_unnamed_addr {
dec_label_pc_df20:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 57127, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_df2d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_df2d = call i64 @__asm_movsd.7465(i128 %v0_df2d)
  %v0_df33 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_df33 = call i64 @__asm_movsd.7465(i128 %v0_df33)
  %v4_df33 = load i64, i64* @rax, align 8
  ret i64 %v4_df33
}

define i64 @_ZN3org4luaj3vm23lib7MathLib8dpow_libEJddd() local_unnamed_addr {
dec_label_pc_df80:
  %v0_df8d = load i64, i64* @rax, align 8
  ret i64 %v0_df8d
}

define i128 @"_ZN3org4luaj3vm23lib12MathLib$sqrt4callEJdd"() local_unnamed_addr {
dec_label_pc_df90:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_df90 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_df90 = call i128 @__asm_sqrtsd(i128 %v0_df90)
  store i128 %v1_df90, i128* %xmm0.global-to-local, align 8
  ret i128 %v1_df90
}

define i128 @"_ZN3org4luaj3vm23lib12MathLib$ceil4callEJdd"() local_unnamed_addr {
dec_label_pc_dfa0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  %v0_dfa0 = load i64, i64* inttoptr (i64 57256 to i64*), align 8
  %v1_dfa0 = call i128 @__asm_movsd(i64 %v0_dfa0)
  %v0_dfa8 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_dfa8 = call i128 @__asm_movapd(i128 %v0_dfa8)
  %v0_dfac = load i64, i64* inttoptr (i64 57268 to i64*), align 8
  %v1_dfac = call i128 @__asm_movsd(i64 %v0_dfac)
  %v1_dfb4 = call i128 @__asm_movapd(i128 %v0_dfa8)
  store i128 %v1_dfb4, i128* %xmm1.global-to-local, align 8
  %v2_dfb8 = call i128 @__asm_andpd(i128 %v1_dfa8, i128 %v1_dfa0)
  call void @__asm_ucomisd(i128 %v1_dfac, i128 %v2_dfb8)
  %v0_dfc0 = load i1, i1* %cf.global-to-local, align 1
  %v1_dfc0 = load i1, i1* %zf.global-to-local, align 1
  %v2_dfc0 = or i1 %v0_dfc0, %v1_dfc0
  br i1 %v2_dfc0, label %dec_label_pc_dfa0.dec_label_pc_dfed_crit_edge, label %dec_label_pc_dfc2

dec_label_pc_dfa0.dec_label_pc_dfed_crit_edge:    ; preds = %dec_label_pc_dfa0
  %v0_dfed.pre = load i128, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_dfed

dec_label_pc_dfc2:                                ; preds = %dec_label_pc_dfa0
  %v0_dfc2 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_dfc2 = call i64 @__asm_cvttsd2si.7470(i128 %v0_dfc2)
  store i64 %v1_dfc2, i64* @rax, align 8
  %v2_dfc7 = call i128 @__asm_pxor(i128 %v2_dfb8, i128 %v2_dfb8)
  %v0_dfcb = load i64, i64* inttoptr (i64 57299 to i64*), align 8
  %v1_dfcb = call i128 @__asm_movsd(i64 %v0_dfcb)
  %v2_dfd3 = call i128 @__asm_andnpd(i128 %v1_dfa0, i128 %v0_dfc2)
  %v1_dfd7 = call i128 @__asm_cvtsi2sd(i64 %v1_dfc2)
  %v0_dfdc = load i128, i128* %xmm1.global-to-local, align 8
  %v2_dfdc = call i128 @__asm_cmpnlesd(i128 %v0_dfdc, i128 %v1_dfd7)
  store i128 %v2_dfdc, i128* %xmm1.global-to-local, align 8
  %v2_dfe1 = call i128 @__asm_andpd(i128 %v2_dfdc, i128 %v1_dfcb)
  store i128 %v2_dfe1, i128* %xmm1.global-to-local, align 8
  %v2_dfe5 = call i128 @__asm_addsd(i128 %v2_dfe1, i128 %v1_dfd7)
  store i128 %v2_dfe5, i128* %xmm1.global-to-local, align 8
  %v2_dfe9 = call i128 @__asm_orpd(i128 %v2_dfe5, i128 %v2_dfd3)
  store i128 %v2_dfe9, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_dfed

dec_label_pc_dfed:                                ; preds = %dec_label_pc_dfa0.dec_label_pc_dfed_crit_edge, %dec_label_pc_dfc2
  %v0_dfed = phi i128 [ %v0_dfed.pre, %dec_label_pc_dfa0.dec_label_pc_dfed_crit_edge ], [ %v2_dfe9, %dec_label_pc_dfc2 ]
  %v1_dfed = call i128 @__asm_movapd(i128 %v0_dfed)
  store i128 %v1_dfed, i128* %xmm0.global-to-local, align 8
  ret i128 %v1_dfed
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$deg4callEJdd"() local_unnamed_addr {
dec_label_pc_e000:
  %v17_e000 = load i64, i64* @rax, align 8
  ret i64 %v17_e000
}

define i64 @"_ZN3org4luaj3vm23lib18MathLib$randomseed4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_e010:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_e017 = load i64, i64* @rdi, align 8
  store i64 %v0_e017, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$rad4callEJdd"() local_unnamed_addr {
dec_label_pc_e060:
  %v17_e060 = load i64, i64* @rax, align 8
  ret i64 %v17_e060
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$sin4callEJdd"() local_unnamed_addr {
dec_label_pc_e070:
  %v17_e070 = load i64, i64* @rax, align 8
  ret i64 %v17_e070
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$tan4callEJdd"() local_unnamed_addr {
dec_label_pc_e080:
  %v17_e080 = load i64, i64* @rax, align 8
  ret i64 %v17_e080
}

define i64 @_ZN3org4luaj3vm25Print11printLocalsEJvPNS1_9PrototypeE(i64 %arg1) local_unnamed_addr {
dec_label_pc_e090:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 57510, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_e0d0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_e0d0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_e0d0 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_e0d0 = load i64, i64* @rax, align 8
  %v4_e0d0 = trunc i64 %v3_e0d0 to i8
  %v5_e0d0 = add i8 %v4_e0d0, %v2_e0d0
  %v21_e0d0 = inttoptr i64 %v3_e0d0 to i8*
  store i8 %v5_e0d0, i8* %v21_e0d0, align 1
  %v0_e0d2 = load i64, i64* @rax, align 8
  %v1_e0d2 = add i64 %v0_e0d2, -119
  %v2_e0d2 = inttoptr i64 %v1_e0d2 to i8*
  %v3_e0d2 = load i8, i8* %v2_e0d2, align 1
  %v4_e0d2 = load i64, i64* @rcx, align 8
  %v5_e0d2 = trunc i64 %v4_e0d2 to i8
  %v6_e0d2 = add i8 %v5_e0d2, %v3_e0d2
  store i8 %v6_e0d2, i8* %v2_e0d2, align 1
  %v0_e0d5 = load i64, i64* @rax, align 8
  ret i64 %v0_e0d5
}

define i64 @function_e170() local_unnamed_addr {
dec_label_pc_e170:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_e28c(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_e28c:
  store i64 %arg1, i64* @rbx, align 8
  %v0_e29a = load i64, i64* @rax, align 8
  ret i64 %v0_e29a
}

define i64 @function_e29b() local_unnamed_addr {
dec_label_pc_e29b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_e2a2() local_unnamed_addr {
dec_label_pc_e2a2:
  %v0_e2a2 = load i64, i64* @rbx, align 8
  store i64 %v0_e2a2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print13printUpValuesEJvPNS1_9PrototypeE(i64 %arg1) local_unnamed_addr {
dec_label_pc_e2b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 58050, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_e2f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_e2f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_e2f0 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_e2f0 = load i64, i64* @rax, align 8
  %v4_e2f0 = trunc i64 %v3_e2f0 to i8
  %v5_e2f0 = add i8 %v4_e2f0, %v2_e2f0
  %v21_e2f0 = inttoptr i64 %v3_e2f0 to i8*
  store i8 %v5_e2f0, i8* %v21_e2f0, align 1
  %v0_e2f2 = load i64, i64* @rax, align 8
  %v1_e2f2 = add i64 %v0_e2f2, -119
  %v2_e2f2 = inttoptr i64 %v1_e2f2 to i8*
  %v3_e2f2 = load i8, i8* %v2_e2f2, align 1
  %v4_e2f2 = load i64, i64* @rcx, align 8
  %v5_e2f2 = trunc i64 %v4_e2f2 to i8
  %v6_e2f2 = add i8 %v5_e2f2, %v3_e2f2
  store i8 %v6_e2f2, i8* %v2_e2f2, align 1
  %v0_e2f5 = load i64, i64* @rax, align 8
  ret i64 %v0_e2f5
}

define i64 @function_e416() local_unnamed_addr {
dec_label_pc_e416:
  %v0_e416 = load i64, i64* @rax, align 8
  ret i64 %v0_e416
}

define i64 @function_e436(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_e436:
  store i64 %arg1, i64* @rbx, align 8
  %v0_e444 = load i64, i64* @rax, align 8
  ret i64 %v0_e444
}

define i64 @function_e445() local_unnamed_addr {
dec_label_pc_e445:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure4nameEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_e460:
  store i64 %arg1, i64* @rdi, align 8
  %v1_e462 = load i64, i64* @rax, align 8
  ret i64 %v1_e462
}

define i64 @function_e4f3() local_unnamed_addr {
dec_label_pc_e4f3:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaErrorC1EPN4java4lang9ThrowableE(i64 %arg1) local_unnamed_addr {
dec_label_pc_e500:
  store i64 %arg1, i64* @rdi, align 8
  %v5_e506 = load i64, i64* @rax, align 8
  ret i64 %v5_e506
}

define i64 @function_e562() local_unnamed_addr {
dec_label_pc_e562:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib8DebugLib8callHookEJvPNS1_15LuaThread$StateEPNS1_8LuaValueES7_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_e570:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_e570 = load i64, i64* %r12.global-to-local, align 8
  %v0_e572 = load i64, i64* %rbp.global-to-local, align 8
  %v0_e573 = load i64, i64* @rbx, align 8
  store i64 %v0_e573, i64* %stack_var_-24, align 8
  %v0_e574 = load i64, i64* %rsi.global-to-local, align 8
  %v1_e574 = add i64 %v0_e574, 72
  %v2_e574 = inttoptr i64 %v1_e574 to i8*
  %v3_e574 = load i8, i8* %v2_e574, align 1
  %v10_e574 = icmp eq i8 %v3_e574, 0
  store i64 %v0_e574, i64* @rbx, align 8
  %v1_e57b = icmp eq i1 %v10_e574, false
  br i1 %v1_e57b, label %dec_label_pc_e5a0, label %dec_label_pc_e57d

dec_label_pc_e57d:                                ; preds = %dec_label_pc_e570
  %v1_e57d = add i64 %v0_e574, 56
  %v2_e57d = inttoptr i64 %v1_e57d to i64*
  %v3_e57d = load i64, i64* %v2_e57d, align 8
  store i64 %v3_e57d, i64* @rdi, align 8
  %v1_e581 = icmp eq i64 %v3_e57d, 0
  br i1 %v1_e581, label %dec_label_pc_e5a0, label %dec_label_pc_e586

dec_label_pc_e586:                                ; preds = %dec_label_pc_e57d
  %v0_e586 = load i64, i64* @rdx, align 8
  store i64 %v0_e586, i64* %rsi.global-to-local, align 8
  store i8 1, i8* %v2_e574, align 1
  %v0_e58d = load i64, i64* @rcx, align 8
  store i64 %v0_e58d, i64* @rdx, align 8
  %v1_e590 = inttoptr i64 %v3_e57d to i64*
  %v2_e590 = load i64, i64* %v1_e590, align 8
  store i64 %v2_e590, i64* @rax, align 8
  %v1_e593 = add i64 %v2_e590, 1352
  %v2_e593 = inttoptr i64 %v1_e593 to i64*
  %v3_e593 = load i64, i64* %v2_e593, align 8
  store i64 %v3_e593, i64* @rax, align 8
  %v0_e59c = load i64, i64* @rbx, align 8
  %v1_e59c = add i64 %v0_e59c, 72
  %v2_e59c = inttoptr i64 %v1_e59c to i8*
  store i8 0, i8* %v2_e59c, align 1
  %v2_e5a0.pre = load i64, i64* %stack_var_-24, align 8
  br label %dec_label_pc_e5a0

dec_label_pc_e5a0:                                ; preds = %dec_label_pc_e586, %dec_label_pc_e57d, %dec_label_pc_e570
  %v2_e5a0 = phi i64 [ %v2_e5a0.pre, %dec_label_pc_e586 ], [ %v0_e573, %dec_label_pc_e57d ], [ %v0_e573, %dec_label_pc_e570 ]
  store i64 %v2_e5a0, i64* @rbx, align 8
  store i64 %v0_e572, i64* %rbp.global-to-local, align 8
  store i64 %v0_e570, i64* %r12.global-to-local, align 8
  %v0_e5a4 = load i64, i64* @rax, align 8
  ret i64 %v0_e5a4
}

define i64 @function_e5f4() local_unnamed_addr {
dec_label_pc_e5f4:
  %v0_e5f4 = load i64, i64* @rax, align 8
  %v1_e5f4 = add i64 %v0_e5f4, -8
  %v2_e5f4 = inttoptr i64 %v1_e5f4 to i64*
  %v3_e5f4 = load i64, i64* %v2_e5f4, align 8
  store i64 %v3_e5f4, i64* @rdi, align 8
  %v0_e5f8 = load i64, i64* @rbx, align 8
  %v1_e5f8 = add i64 %v0_e5f8, 72
  %v2_e5f8 = inttoptr i64 %v1_e5f8 to i8*
  store i8 0, i8* %v2_e5f8, align 1
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaErrorC1EPN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_e610:
  store i64 %arg1, i64* @rdi, align 8
  %v0_e611 = load i64, i64* @rdi, align 8
  store i64 %v0_e611, i64* @rbx, align 8
  %v1_e611 = load i64, i64* @rax, align 8
  ret i64 %v1_e611
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction4bindEJvPNS1_8LuaValueEPN4java4lang5ClassEP6JArrayIPNS7_6StringEEi(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_e630:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg3, i64* @rax, align 8
  %v0_e63d = load i64, i64* @rcx, align 8
  %v1_e649 = add i64 %v0_e63d, 8
  %v2_e649 = inttoptr i64 %v1_e649 to i32*
  %v3_e649 = load i32, i32* %v2_e649, align 4
  %tmp246 = icmp slt i32 %v3_e649, 1
  br i1 %tmp246, label %bb, label %dec_label_pc_e652

bb:                                               ; preds = %dec_label_pc_e630
  %v5_e650 = call i64 @function_e6ae()
  store i64 %v5_e650, i64* @rax, align 8
  br label %dec_label_pc_e652

dec_label_pc_e652:                                ; preds = %bb, %dec_label_pc_e630
  %v0_e65f3 = phi i64 [ %v5_e650, %bb ], [ %arg3, %dec_label_pc_e630 ]
  %v1_e652 = icmp eq i64 %arg3, 0
  br i1 %v1_e652, label %bb247, label %dec_label_pc_e657

bb247:                                            ; preds = %dec_label_pc_e652
  %v1_e655 = call i64 @function_e6bd()
  store i64 %v1_e655, i64* @rax, align 8
  br label %dec_label_pc_e657

dec_label_pc_e657:                                ; preds = %bb247, %dec_label_pc_e652
  %v0_e65f = phi i64 [ %v1_e655, %bb247 ], [ %v0_e65f3, %dec_label_pc_e652 ]
  store i64 0, i64* @rbx, align 8
  ret i64 %v0_e65f
}

define i64 @function_e6ae() local_unnamed_addr {
dec_label_pc_e6ae:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_e6bd() local_unnamed_addr {
dec_label_pc_e6bd:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_e6d0() local_unnamed_addr {
dec_label_pc_e6d0:
  %v0_e6d0 = load i64, i64* @rbx, align 8
  store i64 %v0_e6d0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_e6d9() local_unnamed_addr {
dec_label_pc_e6d9:
  store i64 59104, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_e747() local_unnamed_addr {
dec_label_pc_e747:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11checknumberEJPNS1_9LuaNumberEPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_e750:
  store i64 %arg1, i64* @rdi, align 8
  store i64 59225, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue5errorEJPS2_PN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_e790:
  store i64 %arg1, i64* @rdi, align 8
  store i64 59292, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib5linesEJPNS1_7VarargsEPNS2_10IoLib$FileE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_e7e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 59378, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_e813(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_e813:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_e813 = mul i64 %arg4, 4
  %v3_e813 = add i64 %arg4, 99
  %v4_e813 = add i64 %v3_e813, %v2_e813
  %v5_e813 = inttoptr i64 %v4_e813 to i8*
  %v6_e813 = load i8, i8* %v5_e813, align 1
  %v8_e813 = trunc i64 %arg4 to i8
  %v9_e813 = load i1, i1* %cf.global-to-local, align 1
  %v10_e813 = zext i1 %v9_e813 to i8
  %v11_e813 = add i8 %v10_e813, %v8_e813
  %v12_e813 = sub i8 %v6_e813, %v11_e813
  %v22_e813 = sub i8 %v12_e813, %v10_e813
  %v23_e813 = icmp ult i8 %v6_e813, %v22_e813
  %v24_e813 = icmp ne i8 %v11_e813, -1
  %v25_e813 = or i1 %v24_e813, %v23_e813
  %v26_e813 = icmp ult i8 %v6_e813, %v11_e813
  %v27_e813 = select i1 %v9_e813, i1 %v25_e813, i1 %v26_e813
  store i1 %v27_e813, i1* %cf.global-to-local, align 1
  store i8 %v12_e813, i8* %v5_e813, align 1
  %v0_e817 = load i64, i64* @rbx, align 8
  %v1_e817 = udiv i64 %v0_e817, 256
  %v3_e817 = load i64, i64* @rax, align 8
  %v5_e817 = load i1, i1* %cf.global-to-local, align 1
  %v6_e817 = zext i1 %v5_e817 to i64
  %v7_e817 = add i64 %v1_e817, %v3_e817
  %v8_e817 = add i64 %v7_e817, %v6_e817
  %v29_e817 = mul i64 %v8_e817, 256
  %v31_e817 = and i64 %v29_e817, 65280
  %v32_e817 = and i64 %v0_e817, -65281
  %v33_e817 = or i64 %v31_e817, %v32_e817
  store i64 %v33_e817, i64* @rbx, align 8
  %v2_e819 = load i8, i8* bitcast (i64* @r11 to i8*), align 8
  %v3_e819 = load i64, i64* @rdx, align 8
  %v4_e819 = trunc i64 %v3_e819 to i8
  %v5_e819 = or i8 %v4_e819, %v2_e819
  %v11_e819 = load i64, i64* @r11, align 8
  %v12_e819 = inttoptr i64 %v11_e819 to i8*
  store i8 %v5_e819, i8* %v12_e819, align 1
  %v2_e81c = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_e81c = load i64, i64* @rax, align 8
  %v4_e81c = trunc i64 %v3_e81c to i8
  %v5_e81c = add i8 %v4_e81c, %v2_e81c
  %v10_e81c = icmp ult i8 %v5_e81c, %v2_e81c
  store i1 %v10_e81c, i1* %cf.global-to-local, align 1
  %v21_e81c = inttoptr i64 %v3_e81c to i8*
  store i8 %v5_e81c, i8* %v21_e81c, align 1
  %v0_e81e = load i64, i64* @rax, align 8
  %v1_e81e = add i64 %v0_e81e, -119
  %v2_e81e = inttoptr i64 %v1_e81e to i8*
  %v3_e81e = load i8, i8* %v2_e81e, align 1
  %v4_e81e = load i64, i64* @rcx, align 8
  %v5_e81e = trunc i64 %v4_e81e to i8
  %v6_e81e = add i8 %v5_e81e, %v3_e81e
  store i8 %v6_e81e, i8* %v2_e81e, align 1
  %v4_e821 = load i32, i32* bitcast (i64* @rax to i32*), align 8
  %v5_e821 = sext i32 %v4_e821 to i64
  %v6_e821 = mul nsw i64 %v5_e821, 72
  %v0_e824 = load i64, i64* @rbx, align 8
  store i64 %v0_e824, i64* @rax, align 8
  %v1_e826 = add i64 %v6_e821, 8
  %v5_e826 = icmp eq i64 %v6_e821, -8
  store i1 %v5_e826, i1* %cf.global-to-local, align 1
  %v1_e82a = inttoptr i64 %v1_e826 to i64*
  %v2_e82a = load i64, i64* %v1_e82a, align 8
  store i64 %v2_e82a, i64* @rbx, align 8
  ret i64 %v0_e824
}

define i64 @function_e888() local_unnamed_addr {
dec_label_pc_e888:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18PackageLib$require4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_e890:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_e89a = load i64, i64* @rdi, align 8
  %v0_e89d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_e89d, i64* @rdi, align 8
  store i64 %v0_e89d, i64* @rax, align 8
  %v1_e8b0 = add i64 %v0_e89a, 24
  %v2_e8b0 = inttoptr i64 %v1_e8b0 to i64*
  %v3_e8b0 = load i64, i64* %v2_e8b0, align 8
  store i64 %v3_e8b0, i64* @rax, align 8
  store i64 59579, i64* @rdi, align 8
  %v1_e8bb = add i64 %v3_e8b0, 32
  %v2_e8bb = inttoptr i64 %v1_e8bb to i64*
  %v3_e8bb = load i64, i64* %v2_e8bb, align 8
  store i64 %v3_e8bb, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_e930() local_unnamed_addr {
dec_label_pc_e930:
  %rbp.global-to-local = alloca i64, align 8
  %v0_e930 = load i64, i64* %rbp.global-to-local, align 8
  %v1_e930 = add i64 %v0_e930, 24
  %v2_e930 = inttoptr i64 %v1_e930 to i64*
  %v3_e930 = load i64, i64* %v2_e930, align 8
  store i64 %v3_e930, i64* @rax, align 8
  store i64 1, i64* %rbp.global-to-local, align 8
  %v1_e940 = add i64 %v3_e930, 32
  %v2_e940 = inttoptr i64 %v1_e940 to i64*
  %v3_e940 = load i64, i64* %v2_e940, align 8
  store i64 %v3_e940, i64* @rdi, align 8
  %v1_e944 = inttoptr i64 %v3_e940 to i64*
  %v2_e944 = load i64, i64* %v1_e944, align 8
  store i64 %v2_e944, i64* @rax, align 8
  %v1_e94d = inttoptr i64 %v2_e944 to i64*
  %v2_e94d = load i64, i64* %v1_e94d, align 8
  store i64 %v2_e94d, i64* @rdx, align 8
  store i64 %v2_e944, i64* @rdi, align 8
  ret i64 %v2_e944
}

define i64 @function_ea10() local_unnamed_addr {
dec_label_pc_ea10:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_eaa0() local_unnamed_addr {
dec_label_pc_eaa0:
  store i64 60071, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_eb3e(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_eb3e:
  %r15.global-to-local = alloca i64, align 8
  %v0_eb3e = load i64, i64* @rbx, align 8
  store i64 %v0_eb3e, i64* @rdx, align 8
  %v0_eb44 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_eb44, i64* @rdi, align 8
  store i64 %v0_eb3e, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg6, i64* %r15.global-to-local, align 8
  ret i64 %v0_eb3e
}

define i64 @function_eb5f() local_unnamed_addr {
dec_label_pc_eb5f:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_ebac() local_unnamed_addr {
dec_label_pc_ebac:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState8classendEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ebc0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_ebc0 = load i64, i64* %r13.global-to-local, align 8
  %v0_ebc2 = load i64, i64* %r12.global-to-local, align 8
  %v0_ebc4 = load i64, i64* @rdi, align 8
  store i64 %v0_ebc4, i64* %r12.global-to-local, align 8
  %v0_ebc7 = load i64, i64* %rbp.global-to-local, align 8
  %v0_ebc8 = load i64, i64* @rbx, align 8
  %v0_ebc9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_ebc9, i64* %rbp.global-to-local, align 8
  %v1_ebcb = add i64 %v0_ebc9, 1
  store i64 %v1_ebcb, i64* %r13.global-to-local, align 8
  %v1_ebd3 = add i64 %v0_ebc4, 16
  %v2_ebd3 = inttoptr i64 %v1_ebd3 to i64*
  %v3_ebd3 = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ebd3, i64* @rdi, align 8
  %v1_ebd7 = inttoptr i64 %v3_ebd3 to i64*
  %v2_ebd7 = load i64, i64* %v1_ebd7, align 8
  store i64 %v2_ebd7, i64* @rax, align 8
  %v1_ebe0 = trunc i64 %v2_ebd7 to i32
  %v11_ebe0 = icmp eq i32 %v1_ebe0, 37
  br i1 %v11_ebe0, label %dec_label_pc_ec20, label %dec_label_pc_ebe5

dec_label_pc_ebe5:                                ; preds = %dec_label_pc_ebc0
  %v11_ebe5 = icmp eq i32 %v1_ebe0, 91
  %v1_ebe8 = icmp eq i1 %v11_ebe5, false
  br i1 %v1_ebe8, label %dec_label_pc_ec3b, label %dec_label_pc_ebea

dec_label_pc_ebea:                                ; preds = %dec_label_pc_ebe5
  %v3_ebea = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ebea, i64* @rdi, align 8
  %v1_ebef = inttoptr i64 %v3_ebea to i64*
  %v2_ebef = load i64, i64* %v1_ebef, align 8
  store i64 %v2_ebef, i64* @rax, align 8
  %v1_ebf8 = trunc i64 %v1_ebcb to i32
  %v3_ebf8 = trunc i64 %v2_ebef to i32
  %v14_ebf8 = icmp eq i32 %v1_ebf8, %v3_ebf8
  store i64 %v2_ebef, i64* @rbx, align 8
  br i1 %v14_ebf8, label %dec_label_pc_ec9c.preheader, label %dec_label_pc_ec03

dec_label_pc_ec03:                                ; preds = %dec_label_pc_ebea
  %v3_ec03 = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ec03, i64* @rdi, align 8
  %v1_ec08 = add i64 %v0_ebc9, 2
  store i64 %v1_ec08, i64* @rbx, align 8
  store i64 %v1_ebcb, i64* %rsi.global-to-local, align 8
  %v1_ec0e = inttoptr i64 %v3_ec03 to i64*
  %v2_ec0e = load i64, i64* %v1_ec0e, align 8
  store i64 %v2_ec0e, i64* @rax, align 8
  %v1_ec17 = trunc i64 %v2_ec0e to i32
  %v11_ec17 = icmp eq i32 %v1_ec17, 94
  %v1_ec1a = icmp eq i1 %v11_ec17, false
  %v6_ec1a.v = select i1 %v1_ec1a, i64 %v1_ebcb, i64 %v1_ec08
  %v7_ec1a = and i64 %v6_ec1a.v, 4294967295
  store i64 %v7_ec1a, i64* @rbx, align 8
  br label %dec_label_pc_ec9c.preheader

dec_label_pc_ec9c.preheader:                      ; preds = %dec_label_pc_ebea, %dec_label_pc_ec03
  %v0_ec55.ph = phi i64 [ %v7_ec1a, %dec_label_pc_ec03 ], [ %v2_ebef, %dec_label_pc_ebea ]
  %v3_ec9c269 = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ec9c269, i64* @rdi, align 8
  %v1_eca1270 = inttoptr i64 %v3_ec9c269 to i64*
  %v2_eca1271 = load i64, i64* %v1_eca1270, align 8
  store i64 %v2_eca1271, i64* @rax, align 8
  %v1_ecaa272 = trunc i64 %v0_ec55.ph to i32
  %v3_ecaa273 = trunc i64 %v2_eca1271 to i32
  %v14_ecaa274 = icmp eq i32 %v1_ecaa272, %v3_ecaa273
  br i1 %v14_ecaa274, label %dec_label_pc_ece2, label %dec_label_pc_ecae

dec_label_pc_ec20:                                ; preds = %dec_label_pc_ebc0
  %v3_ec20 = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ec20, i64* @rdi, align 8
  %v1_ec25 = inttoptr i64 %v3_ec20 to i64*
  %v2_ec25 = load i64, i64* %v1_ec25, align 8
  store i64 %v2_ec25, i64* @rax, align 8
  %v1_ec2e = trunc i64 %v1_ebcb to i32
  %v3_ec2e = trunc i64 %v2_ec25 to i32
  %v14_ec2e = icmp eq i32 %v1_ec2e, %v3_ec2e
  br i1 %v14_ec2e, label %dec_label_pc_ecee, label %dec_label_pc_ec37

dec_label_pc_ec37:                                ; preds = %dec_label_pc_ec20
  %v1_ec37 = add i64 %v0_ebc9, 2
  store i64 %v1_ec37, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_ec3b

dec_label_pc_ec3b:                                ; preds = %dec_label_pc_ec37, %dec_label_pc_ebe5
  %v0_ec3b = phi i64 [ %v1_ec37, %dec_label_pc_ec37 ], [ %v1_ebcb, %dec_label_pc_ebe5 ]
  store i64 %v0_ec3b, i64* @rax, align 8
  store i64 %v0_ebc7, i64* %rbp.global-to-local, align 8
  store i64 %v0_ebc2, i64* %r12.global-to-local, align 8
  store i64 %v0_ebc0, i64* %r13.global-to-local, align 8
  ret i64 %v0_ec3b

dec_label_pc_ec70:                                ; preds = %dec_label_pc_ecc7, %dec_label_pc_ecae
  %v0_ec99 = phi i64 [ %v8_ec64, %dec_label_pc_ecc7 ], [ %v1_ecb5, %dec_label_pc_ecae ]
  %v3_ec70 = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ec70, i64* @rdi, align 8
  %v1_ec75 = inttoptr i64 %v3_ec70 to i64*
  %v2_ec75 = load i64, i64* %v1_ec75, align 8
  store i64 %v2_ec75, i64* @rax, align 8
  %v1_ec7e = trunc i64 %v0_ec99 to i32
  %v3_ec7e = trunc i64 %v2_ec75 to i32
  %v14_ec7e = icmp eq i32 %v1_ec7e, %v3_ec7e
  br i1 %v14_ec7e, label %dec_label_pc_ec99, label %dec_label_pc_ec83

dec_label_pc_ec83:                                ; preds = %dec_label_pc_ec70
  %v3_ec83 = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ec83, i64* @rdi, align 8
  store i64 %v0_ec99, i64* %rsi.global-to-local, align 8
  %v1_ec8b = inttoptr i64 %v3_ec83 to i64*
  %v2_ec8b = load i64, i64* %v1_ec8b, align 8
  store i64 %v2_ec8b, i64* @rax, align 8
  %v1_ec94 = trunc i64 %v2_ec8b to i32
  %v11_ec94 = icmp eq i32 %v1_ec94, 93
  br i1 %v11_ec94, label %dec_label_pc_ecd0, label %dec_label_pc_ec99

dec_label_pc_ec99:                                ; preds = %dec_label_pc_ec83, %dec_label_pc_ec70
  store i64 %v0_ec99, i64* @rbx, align 8
  %v3_ec9c = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ec9c, i64* @rdi, align 8
  %v1_eca1 = inttoptr i64 %v3_ec9c to i64*
  %v2_eca1 = load i64, i64* %v1_eca1, align 8
  store i64 %v2_eca1, i64* @rax, align 8
  %v3_ecaa = trunc i64 %v2_eca1 to i32
  %v14_ecaa = icmp eq i32 %v1_ec7e, %v3_ecaa
  br i1 %v14_ecaa, label %dec_label_pc_ece2, label %dec_label_pc_ecae

dec_label_pc_ecae:                                ; preds = %dec_label_pc_ec9c.preheader, %dec_label_pc_ec99
  %v0_ec55275 = phi i64 [ %v0_ec99, %dec_label_pc_ec99 ], [ %v0_ec55.ph, %dec_label_pc_ec9c.preheader ]
  %v3_ecae = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ecae, i64* @rdi, align 8
  store i64 %v0_ec55275, i64* %rsi.global-to-local, align 8
  %v1_ecb5 = add i64 %v0_ec55275, 1
  store i64 %v1_ecb5, i64* %r13.global-to-local, align 8
  %v1_ecb9 = inttoptr i64 %v3_ecae to i64*
  %v2_ecb9 = load i64, i64* %v1_ecb9, align 8
  store i64 %v2_ecb9, i64* @rax, align 8
  %v1_ecc2 = trunc i64 %v2_ecb9 to i32
  %v11_ecc2 = icmp eq i32 %v1_ecc2, 37
  %v1_ecc5 = icmp eq i1 %v11_ecc2, false
  br i1 %v1_ecc5, label %dec_label_pc_ec70, label %dec_label_pc_ecc7

dec_label_pc_ecc7:                                ; preds = %dec_label_pc_ecae
  %v3_ec50 = load i64, i64* %v2_ebd3, align 8
  store i64 %v3_ec50, i64* @rdi, align 8
  %v2_ec55 = add i64 %v0_ec55275, 2
  %v17_ec55 = and i64 %v2_ec55, 4294967295
  store i64 %v17_ec55, i64* @rbx, align 8
  %v1_ec58 = inttoptr i64 %v3_ec50 to i64*
  %v2_ec58 = load i64, i64* %v1_ec58, align 8
  store i64 %v2_ec58, i64* @rax, align 8
  %v1_ec61 = trunc i64 %v1_ecb5 to i32
  %v3_ec61 = trunc i64 %v2_ec58 to i32
  %v4_ec61 = sub i32 %v1_ec61, %v3_ec61
  %v10_ec613 = xor i64 %v2_ec58, %v1_ecb5
  %v10_ec61 = trunc i64 %v10_ec613 to i32
  %v11_ec61 = xor i32 %v4_ec61, %v1_ec61
  %v12_ec61 = and i32 %v11_ec61, %v10_ec61
  %v13_ec61 = icmp slt i32 %v12_ec61, 0
  %v15_ec61 = icmp slt i32 %v4_ec61, 0
  %v2_ec64 = icmp ne i1 %v15_ec61, %v13_ec61
  %v7_ec64.v = select i1 %v2_ec64, i64 %v2_ec55, i64 %v1_ecb5
  %v8_ec64 = and i64 %v7_ec64.v, 4294967295
  store i64 %v8_ec64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_ec70

dec_label_pc_ecd0:                                ; preds = %dec_label_pc_ec83
  %v2_ecd0 = add i64 %v0_ec99, 1
  %v17_ecd0 = and i64 %v2_ecd0, 4294967295
  store i64 %v17_ecd0, i64* @rax, align 8
  store i64 %v0_ebc8, i64* @rbx, align 8
  store i64 %v0_ebc7, i64* %rbp.global-to-local, align 8
  store i64 %v0_ebc2, i64* %r12.global-to-local, align 8
  store i64 %v0_ebc0, i64* %r13.global-to-local, align 8
  ret i64 %v17_ecd0

dec_label_pc_ece2:                                ; preds = %dec_label_pc_ec99, %dec_label_pc_ec9c.preheader
  %v2_eca1.lcssa = phi i64 [ %v2_eca1271, %dec_label_pc_ec9c.preheader ], [ %v2_eca1, %dec_label_pc_ec99 ]
  %v0_ece2 = load i64, i64* inttoptr (i64 60649 to i64*), align 8
  store i64 %v0_ece2, i64* @rdi, align 8
  br label %dec_label_pc_ecee

dec_label_pc_ecee:                                ; preds = %dec_label_pc_ece2, %dec_label_pc_ec20
  %v0_ece9 = phi i64 [ %v2_eca1.lcssa, %dec_label_pc_ece2 ], [ %v2_ec25, %dec_label_pc_ec20 ]
  ret i64 %v0_ece9
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState12matchbalanceEJiii"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_ed00:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_ed00 = load i64, i64* %r15.global-to-local, align 8
  %v0_ed02 = load i64, i64* %r14.global-to-local, align 8
  %v0_ed04 = load i64, i64* @rdi, align 8
  store i64 %v0_ed04, i64* %r15.global-to-local, align 8
  %v0_ed07 = load i64, i64* %r13.global-to-local, align 8
  %v0_ed09 = load i64, i64* %r12.global-to-local, align 8
  %v0_ed0b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_ed0b, i64* %r12.global-to-local, align 8
  %v0_ed0e = load i64, i64* %rbp.global-to-local, align 8
  %v0_ed0f = load i64, i64* @rbx, align 8
  %v0_ed10 = load i64, i64* @rdx, align 8
  store i64 %v0_ed10, i64* @rbx, align 8
  %v1_ed16 = add i64 %v0_ed04, 16
  %v2_ed16 = inttoptr i64 %v1_ed16 to i64*
  %v3_ed16 = load i64, i64* %v2_ed16, align 8
  store i64 %v3_ed16, i64* @rdi, align 8
  %v1_ed1a = inttoptr i64 %v3_ed16 to i64*
  %v2_ed1a = load i64, i64* %v1_ed1a, align 8
  store i64 %v2_ed1a, i64* @rax, align 8
  %v1_ed23 = trunc i64 %v2_ed1a to i32
  %v3_ed23 = trunc i64 %v0_ed10 to i32
  %v14_ed23 = icmp eq i32 %v1_ed23, %v3_ed23
  br i1 %v14_ed23, label %dec_label_pc_ee0c, label %dec_label_pc_ed2b

dec_label_pc_ed2b:                                ; preds = %dec_label_pc_ed00
  %v1_ed2b = add i64 %v0_ed10, 1
  store i64 %v1_ed2b, i64* %rbp.global-to-local, align 8
  %v3_ed2e = trunc i64 %v1_ed2b to i32
  %v14_ed2e = icmp eq i32 %v1_ed23, %v3_ed2e
  br i1 %v14_ed2e, label %dec_label_pc_ee0c, label %dec_label_pc_ed36

dec_label_pc_ed36:                                ; preds = %dec_label_pc_ed2b
  %v1_ed36 = add i64 %v0_ed04, 8
  %v2_ed36 = inttoptr i64 %v1_ed36 to i64*
  %v3_ed36 = load i64, i64* %v2_ed36, align 8
  store i64 %v3_ed36, i64* @rdi, align 8
  %v1_ed3a = inttoptr i64 %v3_ed36 to i64*
  %v2_ed3a = load i64, i64* %v1_ed3a, align 8
  store i64 %v2_ed3a, i64* @rax, align 8
  %v1_ed43 = trunc i64 %v2_ed3a to i32
  store i64 %v2_ed3a, i64* %r13.global-to-local, align 8
  %v7_ed49 = icmp sgt i64 %v2_ed3a, %v0_ed0b
  br i1 %v7_ed49, label %dec_label_pc_ed4f, label %dec_label_pc_ede0

dec_label_pc_ed4f:                                ; preds = %dec_label_pc_ed36
  %v3_ed4f = load i64, i64* %v2_ed16, align 8
  store i64 %v3_ed4f, i64* @rdi, align 8
  store i64 %v0_ed10, i64* %rsi.global-to-local, align 8
  %v1_ed55 = inttoptr i64 %v3_ed4f to i64*
  %v2_ed55 = load i64, i64* %v1_ed55, align 8
  store i64 %v2_ed55, i64* @rax, align 8
  %v3_ed5e = load i64, i64* %v2_ed36, align 8
  store i64 %v3_ed5e, i64* @rdi, align 8
  store i64 %v2_ed55, i64* @rbx, align 8
  %v1_ed64 = trunc i64 %v2_ed55 to i32
  store i64 %v0_ed0b, i64* %rsi.global-to-local, align 8
  %v1_ed6b = inttoptr i64 %v3_ed5e to i64*
  %v2_ed6b = load i64, i64* %v1_ed6b, align 8
  store i64 %v2_ed6b, i64* @rax, align 8
  %v3_ed74 = trunc i64 %v2_ed6b to i32
  %v14_ed74 = icmp eq i32 %v1_ed64, %v3_ed74
  %v1_ed76 = icmp eq i1 %v14_ed74, false
  br i1 %v1_ed76, label %dec_label_pc_ede0, label %dec_label_pc_ed78

dec_label_pc_ed78:                                ; preds = %dec_label_pc_ed4f
  %v3_ed78 = load i64, i64* %v2_ed16, align 8
  store i64 %v3_ed78, i64* @rdi, align 8
  store i64 %v1_ed2b, i64* %rsi.global-to-local, align 8
  store i64 1, i64* %rbp.global-to-local, align 8
  %v1_ed83 = inttoptr i64 %v3_ed78 to i64*
  %v2_ed83 = load i64, i64* %v1_ed83, align 8
  store i64 %v2_ed83, i64* @rax, align 8
  store i64 %v2_ed83, i64* %r14.global-to-local, align 8
  %v1_eda0272 = add i64 %v0_ed0b, 1
  store i64 %v1_eda0272, i64* @rbx, align 8
  %v3_eda5273 = trunc i64 %v1_eda0272 to i32
  %v14_eda5274 = icmp eq i32 %v1_ed43, %v3_eda5273
  br i1 %v14_eda5274, label %dec_label_pc_ede0.loopexit, label %dec_label_pc_edaa.lr.ph

dec_label_pc_edaa.lr.ph:                          ; preds = %dec_label_pc_ed78
  %v1_edb9 = trunc i64 %v2_ed83 to i32
  br label %dec_label_pc_edaa

dec_label_pc_ed98:                                ; preds = %dec_label_pc_edaa
  %v1_ed98 = trunc i64 %v0_ed98275 to i32
  %v2_ed98 = add i32 %v1_ed98, -1
  %v11_ed98 = icmp eq i32 %v2_ed98, 0
  %v17_ed98 = zext i32 %v2_ed98 to i64
  store i64 %v17_ed98, i64* %rbp.global-to-local, align 8
  br i1 %v11_ed98, label %dec_label_pc_edf8, label %dec_label_pc_ed9d

dec_label_pc_ed9d:                                ; preds = %dec_label_pc_ed98, %dec_label_pc_edbe
  %v0_edd720 = phi i64 [ %v17_ed98, %dec_label_pc_ed98 ], [ %v20_edd7, %dec_label_pc_edbe ]
  store i64 %v1_eda0277, i64* %r12.global-to-local, align 8
  %v1_eda0 = add i64 %v1_eda0277, 1
  store i64 %v1_eda0, i64* @rbx, align 8
  %v3_eda5 = trunc i64 %v1_eda0 to i32
  %v14_eda5 = icmp eq i32 %v1_ed43, %v3_eda5
  br i1 %v14_eda5, label %dec_label_pc_ede0.loopexit, label %dec_label_pc_edaa

dec_label_pc_edaa:                                ; preds = %dec_label_pc_edaa.lr.ph, %dec_label_pc_ed9d
  %v0_edf8276 = phi i64 [ %v0_ed0b, %dec_label_pc_edaa.lr.ph ], [ %v1_eda0277, %dec_label_pc_ed9d ]
  %v1_eda0277 = phi i64 [ %v1_eda0272, %dec_label_pc_edaa.lr.ph ], [ %v1_eda0, %dec_label_pc_ed9d ]
  %v0_ed98275 = phi i64 [ 1, %dec_label_pc_edaa.lr.ph ], [ %v0_edd720, %dec_label_pc_ed9d ]
  %v3_edaa = load i64, i64* %v2_ed36, align 8
  store i64 %v3_edaa, i64* @rdi, align 8
  store i64 %v1_eda0277, i64* %rsi.global-to-local, align 8
  %v1_edb0 = inttoptr i64 %v3_edaa to i64*
  %v2_edb0 = load i64, i64* %v1_edb0, align 8
  store i64 %v2_edb0, i64* @rax, align 8
  %v3_edb9 = trunc i64 %v2_edb0 to i32
  %v14_edb9 = icmp eq i32 %v1_edb9, %v3_edb9
  br i1 %v14_edb9, label %dec_label_pc_ed98, label %dec_label_pc_edbe

dec_label_pc_edbe:                                ; preds = %dec_label_pc_edaa
  %v3_edbe = load i64, i64* %v2_ed36, align 8
  store i64 %v3_edbe, i64* @rdi, align 8
  store i64 %v1_eda0277, i64* %rsi.global-to-local, align 8
  %v1_edc4 = inttoptr i64 %v3_edbe to i64*
  %v2_edc4 = load i64, i64* %v1_edc4, align 8
  %v5_edcd = trunc i64 %v2_edc4 to i32
  %v16_edcd = icmp eq i32 %v1_ed64, %v5_edcd
  %v1_edd1 = zext i1 %v16_edcd to i64
  %v3_edd1 = and i64 %v2_edc4, -256
  %v4_edd1 = or i64 %v1_edd1, %v3_edd1
  store i64 %v4_edd1, i64* @rax, align 8
  %v4_edd7 = add i64 %v4_edd1, %v0_ed98275
  %v20_edd7 = and i64 %v4_edd7, 4294967295
  store i64 %v20_edd7, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_ed9d

dec_label_pc_ede0.loopexit:                       ; preds = %dec_label_pc_ed9d, %dec_label_pc_ed78
  br label %dec_label_pc_ede0

dec_label_pc_ede0:                                ; preds = %dec_label_pc_ede0.loopexit, %dec_label_pc_ed36, %dec_label_pc_ed4f
  store i64 4294967295, i64* @rax, align 8
  store i64 %v0_ed0f, i64* @rbx, align 8
  store i64 %v0_ed0e, i64* %rbp.global-to-local, align 8
  store i64 %v0_ed09, i64* %r12.global-to-local, align 8
  store i64 %v0_ed07, i64* %r13.global-to-local, align 8
  store i64 %v0_ed02, i64* %r14.global-to-local, align 8
  store i64 %v0_ed00, i64* %r15.global-to-local, align 8
  ret i64 4294967295

dec_label_pc_edf8:                                ; preds = %dec_label_pc_ed98
  %v1_edf8 = add i64 %v0_edf8276, 2
  store i64 %v1_edf8, i64* @rax, align 8
  store i64 %v0_ed0f, i64* @rbx, align 8
  store i64 %v0_ed0e, i64* %rbp.global-to-local, align 8
  store i64 %v0_ed09, i64* %r12.global-to-local, align 8
  store i64 %v0_ed07, i64* %r13.global-to-local, align 8
  store i64 %v0_ed02, i64* %r14.global-to-local, align 8
  store i64 %v0_ed00, i64* %r15.global-to-local, align 8
  ret i64 %v1_edf8

dec_label_pc_ee0c:                                ; preds = %dec_label_pc_ed2b, %dec_label_pc_ed00
  %v0_ee0c = load i64, i64* inttoptr (i64 60947 to i64*), align 8
  store i64 %v0_ee0c, i64* @rdi, align 8
  ret i64 %v2_ed1a
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$dofile6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ee20:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_ee20 = load i64, i64* %r12.global-to-local, align 8
  %v0_ee22 = load i64, i64* %rbp.global-to-local, align 8
  %v0_ee23 = load i64, i64* @rdi, align 8
  store i64 %v0_ee23, i64* %rbp.global-to-local, align 8
  %v0_ee26 = load i64, i64* @rbx, align 8
  %v2_ee27 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_ee27, i64* @rax, align 8
  store i64 %v2_ee27, i64* @rbx, align 8
  store i64 %v2_ee27, i64* @rdi, align 8
  %v4_ee3b = trunc i64 %v2_ee27 to i8
  %v5_ee3b = icmp eq i8 %v4_ee3b, 0
  store i64 1, i64* %rsi.global-to-local, align 8
  br i1 %v5_ee3b, label %dec_label_pc_eed0, label %dec_label_pc_ee9b

dec_label_pc_ee9b:                                ; preds = %dec_label_pc_ee20, %dec_label_pc_eed0
  store i64 1, i64* @rax, align 8
  %v0_ee4b = load i64, i64* inttoptr (i64 61010 to i64*), align 8
  store i64 %v0_ee4b, i64* @rcx, align 8
  store i64 1, i64* @rdx, align 8
  store i64 1, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_ee27, i64* @rdi, align 8
  %v1_ef02 = add i64 %v0_ee23, 24
  %v2_ef02 = inttoptr i64 %v1_ef02 to i64*
  %v3_ef02 = load i64, i64* %v2_ef02, align 8
  store i64 %v3_ef02, i64* %r12.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  store i64 %v2_ee27, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v3_ef17 = load i64, i64* %v2_ef02, align 8
  store i64 %v3_ef17, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v3_ef02, i64* @rdi, align 8
  %v1_ef25 = add i64 %v3_ef17, 24
  %v2_ef25 = inttoptr i64 %v1_ef25 to i64*
  %v3_ef25 = load i64, i64* %v2_ef25, align 8
  store i64 %v3_ef25, i64* @rcx, align 8
  %v0_ef29 = load i64, i64* inttoptr (i64 61232 to i64*), align 16
  store i64 %v0_ef29, i64* @rdx, align 8
  store i64 1, i64* @rbx, align 8
  %v2_ee9b = load i64, i64* inttoptr (i64 1 to i64*), align 8
  store i64 %v2_ee9b, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  %v4_eea9 = trunc i64 %v2_ee9b to i8
  %v5_eea9 = icmp eq i8 %v4_eea9, 0
  %v2_eeab = load i64, i64* inttoptr (i64 1 to i64*), align 8
  store i64 %v2_eeab, i64* @rax, align 8
  %v1_eeae = icmp eq i1 %v5_eea9, false
  store i64 1, i64* @rdi, align 8
  br i1 %v1_eeae, label %dec_label_pc_ef3f, label %dec_label_pc_eeb4

dec_label_pc_eeb4:                                ; preds = %dec_label_pc_ee9b
  %v1_eeba = inttoptr i64 %v2_eeab to i64*
  %v2_eeba = load i64, i64* %v1_eeba, align 8
  store i64 %v2_eeba, i64* @rdx, align 8
  store i64 %v2_eeab, i64* @rdi, align 8
  store i64 %v0_ee26, i64* @rbx, align 8
  store i64 %v0_ee22, i64* %rbp.global-to-local, align 8
  store i64 %v0_ee20, i64* %r12.global-to-local, align 8
  ret i64 %v2_eeab

dec_label_pc_eed0:                                ; preds = %dec_label_pc_ee20
  store i64 1, i64* @rax, align 8
  store i64 %v2_ee27, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_ee9b

dec_label_pc_ef3f:                                ; preds = %dec_label_pc_ee9b
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v2_eeab, i64* @rdi, align 8
  ret i64 %v2_eeab
}

define i64 @"_ZN3org4luaj3vm23lib20BaseLib$setmetatable4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_ef60:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_ef60 = load i64, i64* %rbp.global-to-local, align 8
  %v0_ef61 = load i64, i64* @rbx, align 8
  %v0_ef62 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_ef62, i64* @rbx, align 8
  %v0_ef68 = load i64, i64* @rdx, align 8
  store i64 %v0_ef68, i64* %rbp.global-to-local, align 8
  store i64 %v0_ef62, i64* @rax, align 8
  store i64 %v0_ef62, i64* @rdx, align 8
  store i64 %v0_ef62, i64* @rdi, align 8
  %v1_ef84 = icmp eq i64 %v0_ef62, 0
  br i1 %v1_ef84, label %dec_label_pc_efac, label %dec_label_pc_ef89

dec_label_pc_ef89:                                ; preds = %dec_label_pc_ef60
  %v3_ef84 = trunc i64 %v0_ef62 to i8
  store i64 %v0_ef62, i64* @rdx, align 8
  %v0_ef8c = load i64, i64* inttoptr (i64 61331 to i64*), align 8
  store i64 %v0_ef8c, i64* %rsi.global-to-local, align 8
  store i64 %v0_ef8c, i64* @rdx, align 8
  store i64 %v0_ef62, i64* @rdi, align 8
  %v5_efa8 = icmp eq i8 %v3_ef84, 0
  br i1 %v5_efa8, label %dec_label_pc_efe2, label %dec_label_pc_efac

dec_label_pc_efac:                                ; preds = %dec_label_pc_ef89, %dec_label_pc_ef60
  %v2_efbf = phi i64 [ %v0_ef8c, %dec_label_pc_ef89 ], [ 0, %dec_label_pc_ef60 ]
  store i64 %v2_efbf, i64* @rax, align 8
  store i64 %v0_ef68, i64* @rdi, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  %v4_efbb = trunc i64 %v2_efbf to i8
  %v5_efbb = icmp eq i8 %v4_efbb, 0
  %v1_efbd = icmp eq i1 %v5_efbb, false
  br i1 %v1_efbd, label %dec_label_pc_efcf, label %dec_label_pc_efbf

dec_label_pc_efbf:                                ; preds = %dec_label_pc_efac
  store i64 %v2_efbf, i64* @rax, align 8
  store i64 %v0_ef68, i64* @rdi, align 8
  store i64 %v2_efbf, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_efcf

dec_label_pc_efcf:                                ; preds = %dec_label_pc_efbf, %dec_label_pc_efac
  %v2_efcf = phi i64 [ %v2_efbf, %dec_label_pc_efbf ], [ 0, %dec_label_pc_efac ]
  store i64 %v2_efcf, i64* @rax, align 8
  store i64 %v0_ef62, i64* @rdi, align 8
  store i64 %v0_ef61, i64* @rbx, align 8
  store i64 %v0_ef60, i64* %rbp.global-to-local, align 8
  ret i64 %v2_efcf

dec_label_pc_efe2:                                ; preds = %dec_label_pc_ef89
  %v0_efe2 = load i64, i64* inttoptr (i64 61417 to i64*), align 8
  store i64 %v0_efe2, i64* @rdi, align 8
  ret i64 %v0_ef62
}

define i64 @_ZN3org4luaj3vm28LuaValue7arithmtEJPS2_S3_S3_() local_unnamed_addr {
dec_label_pc_eff0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_eff1(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_eff1:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_eff1 = load i64, i64* %rbp.global-to-local, align 8
  %v0_eff2 = load i64, i64* %r12.global-to-local, align 8
  %v0_eff8 = load i64, i64* @rbx, align 8
  %v0_eff9 = load i64, i64* @rdi, align 8
  store i64 %v0_eff9, i64* %rbp.global-to-local, align 8
  %v0_effc = load i64, i64* @rdx, align 8
  store i64 %v0_effc, i64* %r12.global-to-local, align 8
  store i64 %v0_eff9, i64* @rbx, align 8
  store i64 %v0_eff9, i64* @rax, align 8
  %v4_f01b = trunc i64 %v0_eff9 to i8
  %v5_f01b = icmp eq i8 %v4_f01b, 0
  br i1 %v5_f01b, label %dec_label_pc_f042, label %dec_label_pc_f01f

dec_label_pc_f01f:                                ; preds = %dec_label_pc_eff1
  store i64 %v0_effc, i64* @rbx, align 8
  store i64 %v0_effc, i64* @rax, align 8
  store i64 %v0_effc, i64* @rdi, align 8
  %v4_f03e = trunc i64 %v0_effc to i8
  %v5_f03e = icmp eq i8 %v4_f03e, 0
  %v1_f040 = icmp eq i1 %v5_f03e, false
  br i1 %v1_f040, label %dec_label_pc_f060, label %dec_label_pc_f042

dec_label_pc_f042:                                ; preds = %dec_label_pc_f01f, %dec_label_pc_eff1
  %v0_f04b = phi i64 [ %v0_effc, %dec_label_pc_f01f ], [ %v0_eff9, %dec_label_pc_eff1 ]
  %v1_f042 = inttoptr i64 %v0_f04b to i64*
  %v2_f042 = load i64, i64* %v1_f042, align 8
  store i64 %v2_f042, i64* @rax, align 8
  store i64 %v0_f04b, i64* @rdi, align 8
  store i64 %v0_eff8, i64* @rbx, align 8
  store i64 %v0_eff1, i64* %rbp.global-to-local, align 8
  store i64 %v0_eff2, i64* %r12.global-to-local, align 8
  ret i64 %v2_f042

dec_label_pc_f060:                                ; preds = %dec_label_pc_f01f
  ret i64 %v0_effc
}

define i64 @function_f0a7(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_f0a7:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f0a7 = load i64, i64* @rax, align 8
  %v1_f0a7 = add i64 %v0_f0a7, -119
  %v2_f0a7 = inttoptr i64 %v1_f0a7 to i8*
  %v3_f0a7 = load i8, i8* %v2_f0a7, align 1
  %v5_f0a7 = trunc i64 %arg4 to i8
  %v6_f0a7 = add i8 %v3_f0a7, %v5_f0a7
  store i8 %v6_f0a7, i8* %v2_f0a7, align 1
  %v0_f0aa = load i64, i64* @rax, align 8
  ret i64 %v0_f0aa
}

define i64 @function_f0db(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_f0db:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f0db = load i64, i64* @rax, align 8
  %v1_f0db = add i64 %v0_f0db, -119
  %v2_f0db = inttoptr i64 %v1_f0db to i8*
  %v3_f0db = load i8, i8* %v2_f0db, align 1
  %v5_f0db = trunc i64 %arg4 to i8
  %v6_f0db = add i8 %v3_f0db, %v5_f0db
  store i8 %v6_f0db, i8* %v2_f0db, align 1
  %v0_f0de = load i64, i64* @rax, align 8
  ret i64 %v0_f0de
}

define i64 @function_f118() local_unnamed_addr {
dec_label_pc_f118:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9comparemtEJPS2_S3_S3_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_f120:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f120 = load i64, i64* %r13.global-to-local, align 8
  %v0_f122 = load i64, i64* %r12.global-to-local, align 8
  %v0_f124 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_f124, i64* %r13.global-to-local, align 8
  %v0_f127 = load i64, i64* %rbp.global-to-local, align 8
  %v0_f128 = load i64, i64* @rbx, align 8
  %v0_f129 = load i64, i64* @rdi, align 8
  store i64 %v0_f129, i64* %rbp.global-to-local, align 8
  %v0_f12c = load i64, i64* @rdx, align 8
  store i64 %v0_f12c, i64* %r12.global-to-local, align 8
  store i64 %v0_f129, i64* @rbx, align 8
  store i64 %v0_f129, i64* @rax, align 8
  %v4_f14b = trunc i64 %v0_f129 to i8
  %v5_f14b = icmp eq i8 %v4_f14b, 0
  br i1 %v5_f14b, label %dec_label_pc_f172, label %dec_label_pc_f14f

dec_label_pc_f14f:                                ; preds = %dec_label_pc_f120
  store i64 %v0_f12c, i64* @rbx, align 8
  store i64 %v0_f12c, i64* @rax, align 8
  store i64 %v0_f12c, i64* @rdi, align 8
  %v4_f16e = trunc i64 %v0_f12c to i8
  %v5_f16e = icmp eq i8 %v4_f16e, 0
  %v1_f170 = icmp eq i1 %v5_f16e, false
  br i1 %v1_f170, label %dec_label_pc_f190, label %dec_label_pc_f172

dec_label_pc_f172:                                ; preds = %dec_label_pc_f14f, %dec_label_pc_f120
  %v0_f17b = phi i64 [ %v0_f12c, %dec_label_pc_f14f ], [ %v0_f129, %dec_label_pc_f120 ]
  %v1_f172 = inttoptr i64 %v0_f17b to i64*
  %v2_f172 = load i64, i64* %v1_f172, align 8
  store i64 %v2_f172, i64* @rax, align 8
  store i64 %v0_f129, i64* %rsi.global-to-local, align 8
  store i64 %v0_f17b, i64* @rdi, align 8
  store i64 %v0_f128, i64* @rbx, align 8
  store i64 %v0_f127, i64* %rbp.global-to-local, align 8
  store i64 %v0_f122, i64* %r12.global-to-local, align 8
  store i64 %v0_f120, i64* %r13.global-to-local, align 8
  ret i64 %v2_f172

dec_label_pc_f190:                                ; preds = %dec_label_pc_f14f
  %v0_f190 = load i64, i64* inttoptr (i64 61847 to i64*), align 8
  store i64 %v0_f190, i64* @rdi, align 8
  %v1_f19a = inttoptr i64 %v0_f190 to i64*
  %v2_f19a = load i64, i64* %v1_f19a, align 8
  store i64 %v2_f19a, i64* @rax, align 8
  ret i64 %v2_f19a
}

define i64 @function_f2e8() local_unnamed_addr {
dec_label_pc_f2e8:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6strcmpEJiPNS1_9LuaStringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_f2f0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_f2f2 = load i64, i64* @rax, align 8
  ret i64 %v1_f2f2
}

define i64 @function_f34b() local_unnamed_addr {
dec_label_pc_f34b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6strcmpEJiPS2_() local_unnamed_addr {
dec_label_pc_f360:
  %v0_f364 = load i64, i64* @rax, align 8
  ret i64 %v0_f364
}

define i64 @_ZN3org4luaj3vm28LuaValue8concatmtEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_f370:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f370 = load i64, i64* %r12.global-to-local, align 8
  %v0_f372 = load i64, i64* %rbp.global-to-local, align 8
  %v0_f373 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_f373, i64* %r12.global-to-local, align 8
  %v0_f376 = load i64, i64* @rbx, align 8
  %v2_f377 = load i64, i64* @rdi, align 8
  store i64 %v2_f377, i64* @rax, align 8
  store i64 %v2_f377, i64* %rbp.global-to-local, align 8
  %v0_f37d = load i64, i64* inttoptr (i64 62340 to i64*), align 8
  store i64 %v0_f37d, i64* %rsi.global-to-local, align 8
  store i64 %v2_f377, i64* @rbx, align 8
  store i64 %v2_f377, i64* @rax, align 8
  %v4_f399 = trunc i64 %v2_f377 to i8
  %v5_f399 = icmp eq i8 %v4_f399, 0
  br i1 %v5_f399, label %dec_label_pc_f3c4, label %dec_label_pc_f39d

dec_label_pc_f39d:                                ; preds = %dec_label_pc_f370
  store i64 %v0_f37d, i64* @rax, align 8
  %v0_f3a1 = load i64, i64* inttoptr (i64 62376 to i64*), align 8
  store i64 %v0_f3a1, i64* %rsi.global-to-local, align 8
  store i64 %v0_f37d, i64* @rbx, align 8
  store i64 %v0_f3a1, i64* @rax, align 8
  store i64 %v0_f37d, i64* @rdi, align 8
  %v4_f3c0 = trunc i64 %v0_f3a1 to i8
  %v5_f3c0 = icmp eq i8 %v4_f3c0, 0
  %v1_f3c2 = icmp eq i1 %v5_f3c0, false
  br i1 %v1_f3c2, label %dec_label_pc_f3e0, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f39d, %dec_label_pc_f370
  %v0_f3cd = phi i64 [ %v0_f37d, %dec_label_pc_f39d ], [ %v2_f377, %dec_label_pc_f370 ]
  %v1_f3c4 = inttoptr i64 %v0_f3cd to i64*
  %v2_f3c4 = load i64, i64* %v1_f3c4, align 8
  store i64 %v2_f3c4, i64* @rax, align 8
  store i64 %v0_f373, i64* @rdx, align 8
  store i64 %v2_f377, i64* %rsi.global-to-local, align 8
  store i64 %v0_f3cd, i64* @rdi, align 8
  store i64 %v0_f376, i64* @rbx, align 8
  store i64 %v0_f372, i64* %rbp.global-to-local, align 8
  store i64 %v0_f370, i64* %r12.global-to-local, align 8
  ret i64 %v2_f3c4

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f39d
  ret i64 %v0_f3a1
}

define i64 @function_f430(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_f430:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f430 = load i64, i64* @rax, align 8
  %v1_f430 = add i64 %v0_f430, -119
  %v2_f430 = inttoptr i64 %v1_f430 to i8*
  %v3_f430 = load i8, i8* %v2_f430, align 1
  %v5_f430 = trunc i64 %arg4 to i8
  %v6_f430 = add i8 %v3_f430, %v5_f430
  store i8 %v6_f430, i8* %v2_f430, align 1
  %v0_f433 = load i64, i64* @rax, align 8
  ret i64 %v0_f433
}

define i64 @function_f470() local_unnamed_addr {
dec_label_pc_f470:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10indexerrorEJvPN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_f480:
  store i64 %arg1, i64* @rdi, align 8
  %v5_f486 = load i64, i64* @rax, align 8
  ret i64 %v5_f486
}

define i64 @function_f514() local_unnamed_addr {
dec_label_pc_f514:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8gettableEJPS2_S3_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_f520:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_f52d = load i64, i64* @rdi, align 8
  store i64 %v0_f52d, i64* @rbx, align 8
  store i64 62775, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3getEJPS2_S3_() local_unnamed_addr {
dec_label_pc_f650:
  %v0_f65d = load i64, i64* @rax, align 8
  ret i64 %v0_f65d
}

define i64 @_ZN3org4luaj3vm211LuaUserdata3getEJPNS1_8LuaValueES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_f660:
  store i64 %arg1, i64* @rdi, align 8
  %v0_f660 = load i64, i64* @rdi, align 8
  %v1_f660 = add i64 %v0_f660, 16
  %v2_f660 = inttoptr i64 %v1_f660 to i64*
  %v3_f660 = load i64, i64* %v2_f660, align 8
  %v10_f660 = icmp eq i64 %v3_f660, 0
  br i1 %v10_f660, label %dec_label_pc_f678, label %dec_label_pc_f667

dec_label_pc_f667:                                ; preds = %dec_label_pc_f660
  %v0_f674 = load i64, i64* @rax, align 8
  ret i64 %v0_f674

dec_label_pc_f678:                                ; preds = %dec_label_pc_f660
  %v0_f678 = load i64, i64* inttoptr (i64 63103 to i64*), align 8
  store i64 %v0_f678, i64* @rax, align 8
  ret i64 %v0_f678
}

define i64 @_ZN3org4luaj3vm28LuaTable3getEJPNS1_8LuaValueES4_() local_unnamed_addr {
dec_label_pc_f680:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_f687(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_f687:
  store i64 %arg1, i64* @rdi, align 8
  %v2_f687 = load i64, i64* @rdi, align 8
  store i64 %v2_f687, i64* @rbx, align 8
  store i64 %v2_f687, i64* @rax, align 8
  %v4_f6a2 = trunc i64 %v2_f687 to i8
  %v5_f6a2 = icmp eq i8 %v4_f6a2, 0
  br i1 %v5_f6a2, label %dec_label_pc_f6bb, label %dec_label_pc_f6a6

dec_label_pc_f6a6:                                ; preds = %dec_label_pc_f687
  %v1_f6a6 = add i64 %v2_f687, 32
  %v2_f6a6 = inttoptr i64 %v1_f6a6 to i64*
  %v3_f6a6 = load i64, i64* %v2_f6a6, align 8
  %v10_f6a6 = icmp eq i64 %v3_f6a6, 0
  br i1 %v10_f6a6, label %dec_label_pc_f6bb, label %dec_label_pc_f6ad

dec_label_pc_f6ad:                                ; preds = %dec_label_pc_f6a6
  store i64 %v2_f687, i64* @rbx, align 8
  br label %dec_label_pc_f6bb

dec_label_pc_f6bb:                                ; preds = %dec_label_pc_f6ad, %dec_label_pc_f6a6, %dec_label_pc_f687
  store i64 %v2_f687, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v2_f687
}

define i64 @_ZN3org4luaj3vm27Globals8loadfileEJPNS1_8LuaValueEPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_f6d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_f6d9 = load i64, i64* @rdi, align 8
  store i64 %v0_f6d9, i64* @rbx, align 8
  %v1_f6e0 = add i64 %v0_f6d9, 64
  %v2_f6e0 = inttoptr i64 %v1_f6e0 to i64*
  %v3_f6e0 = load i64, i64* %v2_f6e0, align 8
  %v1_f6e4 = inttoptr i64 %v3_f6e0 to i64*
  %v2_f6e4 = load i64, i64* %v1_f6e4, align 8
  store i64 %v2_f6e4, i64* @rax, align 8
  %v1_f6e8 = inttoptr i64 %v2_f6e4 to i64*
  %v2_f6e8 = load i64, i64* %v1_f6e8, align 8
  store i64 %v2_f6e8, i64* @rdi, align 8
  store i64 1, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_f786() local_unnamed_addr {
dec_label_pc_f786:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_f78b() local_unnamed_addr {
dec_label_pc_f78b:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_f7f8() local_unnamed_addr {
dec_label_pc_f7f8:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals4loadEJPNS1_8LuaValueEPN4java2io11InputStreamEPNS5_4lang6StringESB_S4_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_f800:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f809 = load i64, i64* @rdi, align 8
  store i64 %v0_f809, i64* @rbx, align 8
  store i64 %v0_f809, i64* @rax, align 8
  %v1_f813 = add i64 %v0_f809, 2400
  %v2_f813 = inttoptr i64 %v1_f813 to i64*
  %v3_f813 = load i64, i64* %v2_f813, align 8
  store i64 %v3_f813, i64* @rax, align 8
  %v1_f822 = add i64 %v0_f809, 104
  %v2_f822 = inttoptr i64 %v1_f822 to i64*
  %v3_f822 = load i64, i64* %v2_f822, align 8
  store i64 %v3_f822, i64* @rbx, align 8
  %v1_f826 = inttoptr i64 %v3_f822 to i64*
  %v2_f826 = load i64, i64* %v1_f826, align 8
  store i64 %v2_f826, i64* @rax, align 8
  %v1_f829 = inttoptr i64 %v2_f826 to i64*
  %v2_f829 = load i64, i64* %v1_f829, align 8
  store i64 %v2_f829, i64* @rdi, align 8
  store i64 1, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_f8dc() local_unnamed_addr {
dec_label_pc_f8dc:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure9findupvalEJPNS1_7UpValueEP6JArrayIPNS1_8LuaValueEEsPS5_IS4_E(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_f8f0:
  %r9.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_f8fe = load i64, i64* @rcx, align 8
  %v1_f8fe = add i64 %v0_f8fe, 8
  %v2_f8fe = inttoptr i64 %v1_f8fe to i32*
  %v3_f8fe = load i32, i32* %v2_f8fe, align 4
  %v4_f8fe = zext i32 %v3_f8fe to i64
  store i64 %v4_f8fe, i64* %r9.global-to-local, align 8
  %tmp254 = icmp slt i32 %v3_f8fe, 1
  br i1 %tmp254, label %bb, label %dec_label_pc_f90b

bb:                                               ; preds = %dec_label_pc_f8f0
  %v5_f905 = call i64 @function_f9b9()
  store i64 %v5_f905, i64* @rax, align 8
  %v0_f90b.pre = load i64, i64* @rcx, align 8
  %v0_f935.pre.pre = load i64, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_f90b

dec_label_pc_f90b:                                ; preds = %bb, %dec_label_pc_f8f0
  %v0_f935.pre = phi i64 [ %v0_f935.pre.pre, %bb ], [ %v4_f8fe, %dec_label_pc_f8f0 ]
  %v0_f943 = phi i64 [ %v0_f90b.pre, %bb ], [ %v0_f8fe, %dec_label_pc_f8f0 ]
  %v1_f90b = add i64 %v0_f943, 16
  store i64 0, i64* @rdi, align 8
  br label %dec_label_pc_f924

dec_label_pc_f924:                                ; preds = %dec_label_pc_f924, %dec_label_pc_f90b
  %v0_f932 = phi i32 [ %v2_f932, %dec_label_pc_f924 ], [ 0, %dec_label_pc_f90b ]
  %v0_f920 = phi i64 [ %v1_f920, %dec_label_pc_f924 ], [ %v1_f90b, %dec_label_pc_f90b ]
  %v1_f924 = inttoptr i64 %v0_f920 to i64*
  %v2_f924 = load i64, i64* %v1_f924, align 8
  store i64 %v2_f924, i64* @rax, align 8
  %v2_f932 = add i32 %v0_f932, 1
  %v17_f932 = zext i32 %v2_f932 to i64
  store i64 %v17_f932, i64* @rdi, align 8
  %v1_f935 = trunc i64 %v0_f935.pre to i32
  %v14_f935 = icmp eq i32 %v1_f935, %v2_f932
  %v1_f938 = icmp eq i1 %v14_f935, false
  %v1_f920 = add i64 %v0_f920, 8
  br i1 %v1_f938, label %dec_label_pc_f924, label %dec_label_pc_f93a

dec_label_pc_f93a:                                ; preds = %dec_label_pc_f924
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdx, align 8
  %v2_f93e = inttoptr i64 %v1_f90b to i64*
  %v3_f93e = load i64, i64* %v2_f93e, align 8
  %v10_f93e = icmp eq i64 %v3_f93e, 0
  %v1_f943 = add i64 %v0_f943, 24
  store i64 %v1_f943, i64* @rax, align 8
  br i1 %v10_f93e, label %dec_label_pc_f967, label %dec_label_pc_f950

dec_label_pc_f950:                                ; preds = %dec_label_pc_f93a, %dec_label_pc_f957.dec_label_pc_f950_crit_edge
  %v0_f9579 = phi i64 [ %v1_f95a, %dec_label_pc_f957.dec_label_pc_f950_crit_edge ], [ %v1_f943, %dec_label_pc_f93a ]
  %v0_f953 = phi i64 [ %v0_f953.pre, %dec_label_pc_f957.dec_label_pc_f950_crit_edge ], [ %v17_f932, %dec_label_pc_f93a ]
  %v0_f950 = phi i64 [ %v0_f95e, %dec_label_pc_f957.dec_label_pc_f950_crit_edge ], [ 0, %dec_label_pc_f93a ]
  %v1_f950 = trunc i64 %v0_f950 to i32
  %v2_f950 = add i32 %v1_f950, 1
  %v17_f950 = zext i32 %v2_f950 to i64
  store i64 %v17_f950, i64* @rbx, align 8
  %v1_f953 = trunc i64 %v0_f953 to i32
  %v14_f953 = icmp eq i32 %v1_f953, %v2_f950
  br i1 %v14_f953, label %bb255, label %dec_label_pc_f957

bb255:                                            ; preds = %dec_label_pc_f950
  %v1_f955 = call i64 @function_f9b9()
  store i64 %v1_f955, i64* @rax, align 8
  %v0_f95e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_f957

dec_label_pc_f957:                                ; preds = %bb255, %dec_label_pc_f950
  %v0_f95e = phi i64 [ %v0_f95e.pre, %bb255 ], [ %v17_f950, %dec_label_pc_f950 ]
  %v0_f957 = phi i64 [ %v1_f955, %bb255 ], [ %v0_f9579, %dec_label_pc_f950 ]
  %v1_f95a = add i64 %v0_f957, 8
  store i64 %v1_f95a, i64* @rax, align 8
  store i64 %v0_f95e, i64* @rdx, align 8
  %v2_f960 = inttoptr i64 %v0_f957 to i64*
  %v3_f960 = load i64, i64* %v2_f960, align 8
  %v10_f960 = icmp eq i64 %v3_f960, 0
  %v1_f965 = icmp eq i1 %v10_f960, false
  br i1 %v1_f965, label %dec_label_pc_f957.dec_label_pc_f950_crit_edge, label %dec_label_pc_f967

dec_label_pc_f957.dec_label_pc_f950_crit_edge:    ; preds = %dec_label_pc_f957
  %v0_f953.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_f950

dec_label_pc_f967:                                ; preds = %dec_label_pc_f957, %dec_label_pc_f93a
  store i64 63854, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_f9b9() local_unnamed_addr {
dec_label_pc_f9b9:
  %v0_f9b9 = load i64, i64* inttoptr (i64 63936 to i64*), align 64
  store i64 %v0_f9b9, i64* @rdi, align 8
  %v0_f9c0 = load i64, i64* @rax, align 8
  ret i64 %v0_f9c0
}

define i64 @function_f9c5() local_unnamed_addr {
dec_label_pc_f9c5:
  %v0_f9c5 = load i64, i64* @rbx, align 8
  store i64 %v0_f9c5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8argerrorEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_f9d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 63968, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_fa34(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_fa34:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_fa34 = load i64, i64* @rax, align 8
  %v1_fa34 = add i64 %v0_fa34, -119
  %v2_fa34 = inttoptr i64 %v1_fa34 to i8*
  %v3_fa34 = load i8, i8* %v2_fa34, align 1
  %v5_fa34 = trunc i64 %arg4 to i8
  %v6_fa34 = add i8 %v3_fa34, %v5_fa34
  store i8 %v6_fa34, i8* %v2_fa34, align 1
  %v0_fa37 = load i64, i64* @rax, align 8
  ret i64 %v0_fa37
}

define i64 @function_fa7e() local_unnamed_addr {
dec_label_pc_fa7e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20DebugLib$upvaluejoin6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_faee:
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_fa97 = load i64, i64* @rdi, align 8
  store i64 %v0_fa97, i64* @r12, align 8
  %v2_fa9b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_fa9b, i64* @rbx, align 8
  store i64 1, i64* %rbp.global-to-local, align 8
  store i64 2, i64* %r14.global-to-local, align 8
  store i64 3, i64* @rax, align 8
  store i64 4, i64* %rsi.global-to-local, align 8
  store i64 %v2_fa9b, i64* @rdi, align 8
  %v1_faee = add i64 %v2_fa9b, 16
  %v2_faee = inttoptr i64 %v1_faee to i64*
  %v3_faee = load i64, i64* %v2_faee, align 8
  store i64 %v3_faee, i64* @rdi, align 8
  %v1_faf2 = add i64 %v3_faee, 8
  %v2_faf2 = inttoptr i64 %v1_faf2 to i32*
  %v3_faf2 = load i32, i32* %v2_faf2, align 4
  %v4_faf2 = zext i32 %v3_faf2 to i64
  store i64 %v4_faf2, i64* @rdx, align 8
  %v8_faf7 = icmp eq i32 %v3_faf2, 0
  br i1 %v8_faf7, label %bb, label %dec_label_pc_faf9

bb:                                               ; preds = %dec_label_pc_faee
  %v9_faf7 = call i64 @function_fb50()
  store i64 %v9_faf7, i64* @rax, align 8
  br label %dec_label_pc_faf9

dec_label_pc_faf9:                                ; preds = %bb, %dec_label_pc_faee
  %v0_faf9 = phi i64 [ %v9_faf7, %bb ], [ 3, %dec_label_pc_faee ]
  %v4_faf9 = trunc i64 %v0_faf9 to i32
  %tmp259 = icmp slt i32 %v4_faf9, 1
  br i1 %tmp259, label %bb260, label %dec_label_pc_fafd

bb260:                                            ; preds = %dec_label_pc_faf9
  %v5_fafb = call i64 @function_fb50()
  store i64 %v5_fafb, i64* @rax, align 8
  br label %dec_label_pc_fafd

dec_label_pc_fafd:                                ; preds = %bb260, %dec_label_pc_faf9
  %v0_fb04 = phi i64 [ %v5_fafb, %bb260 ], [ %v0_faf9, %dec_label_pc_faf9 ]
  %v0_fafd = load i64, i64* %r14.global-to-local, align 8
  %v1_fafd = add i64 %v0_fafd, 16
  %v2_fafd = inttoptr i64 %v1_fafd to i64*
  %v3_fafd = load i64, i64* %v2_fafd, align 8
  store i64 %v3_fafd, i64* @rcx, align 8
  %v1_fb01 = add i64 %v3_fafd, 8
  %v2_fb01 = inttoptr i64 %v1_fb01 to i32*
  %v3_fb01 = load i32, i32* %v2_fb01, align 4
  %v4_fb01 = zext i32 %v3_fb01 to i64
  store i64 %v4_fb01, i64* %rsi.global-to-local, align 8
  %v8_fb06 = icmp sgt i64 %v0_fb04, %v4_fb01
  br i1 %v8_fb06, label %bb261, label %dec_label_pc_fb08

bb261:                                            ; preds = %dec_label_pc_fafd
  %v9_fb06 = call i64 @function_fb50()
  store i64 %v9_fb06, i64* @rax, align 8
  %v0_fb0e.pre = load i64, i64* @rcx, align 8
  %v2_fb12.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_fb08

dec_label_pc_fb08:                                ; preds = %bb261, %dec_label_pc_fafd
  %v2_fb12 = phi i64 [ %v2_fb12.pre, %bb261 ], [ %v4_fb01, %dec_label_pc_fafd ]
  %v0_fb0e = phi i64 [ %v0_fb0e.pre, %bb261 ], [ %v3_fafd, %dec_label_pc_fafd ]
  %v0_fb08 = phi i64 [ %v9_fb06, %bb261 ], [ %v0_fb04, %dec_label_pc_fafd ]
  %v1_fb08 = trunc i64 %v0_fb08 to i32
  %v2_fb08 = add i32 %v1_fb08, -1
  %v17_fb08 = zext i32 %v2_fb08 to i64
  store i64 %v17_fb08, i64* @rax, align 8
  %v0_fb0b = load i64, i64* %rbp.global-to-local, align 8
  %v2_fb0b = add i64 %v0_fb0b, 4294967295
  %v17_fb0b = and i64 %v2_fb0b, 4294967295
  store i64 %v17_fb0b, i64* %rbp.global-to-local, align 8
  %v1_fb0e = add i64 %v0_fb0e, 16
  store i64 %v1_fb0e, i64* @rcx, align 8
  %v3_fb12 = trunc i64 %v2_fb12 to i32
  %v9_fb12 = icmp ult i32 %v2_fb08, %v3_fb12
  %v1_fb14 = icmp eq i1 %v9_fb12, false
  br i1 %v1_fb14, label %bb262, label %dec_label_pc_fb16

bb262:                                            ; preds = %dec_label_pc_fb08
  %v2_fb14 = call i64 @function_fb5f()
  store i64 %v2_fb14, i64* @rax, align 8
  %v0_fb18.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_fb1a.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_fb16

dec_label_pc_fb16:                                ; preds = %bb262, %dec_label_pc_fb08
  %v1_fb1a = phi i64 [ %v2_fb14, %bb262 ], [ %v17_fb08, %dec_label_pc_fb08 ]
  %v0_fb1a = phi i64 [ %v0_fb1a.pre, %bb262 ], [ %v1_fb0e, %dec_label_pc_fb08 ]
  %v1_fb2a = phi i64 [ %v0_fb18.pre, %bb262 ], [ %v17_fb0b, %dec_label_pc_fb08 ]
  %v2_fb1a = mul i64 %v1_fb1a, 8
  %v3_fb1a = add i64 %v2_fb1a, %v0_fb1a
  %v4_fb1a = inttoptr i64 %v3_fb1a to i64*
  %v5_fb1a = load i64, i64* %v4_fb1a, align 8
  store i64 %v5_fb1a, i64* @rbx, align 8
  %v0_fb1e = load i64, i64* @rdi, align 8
  store i64 %v5_fb1a, i64* %rsi.global-to-local, align 8
  %v2_fb2a = mul i64 %v1_fb2a, 8
  %v1_fb1e = add i64 %v2_fb2a, 16
  %v3_fb2a = add i64 %v1_fb1e, %v0_fb1e
  store i64 %v3_fb2a, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_fb50() local_unnamed_addr {
dec_label_pc_fb50:
  %v0_fb50 = load i64, i64* inttoptr (i64 64343 to i64*), align 8
  store i64 %v0_fb50, i64* @rsi, align 8
  %v0_fb57 = load i64, i64* @r12, align 8
  store i64 %v0_fb57, i64* @rdi, align 8
  %v0_fb5a = load i64, i64* @rax, align 8
  ret i64 %v0_fb5a
}

define i64 @function_fb5f() local_unnamed_addr {
dec_label_pc_fb5f:
  %v0_fb5f = load i64, i64* @rax, align 8
  store i64 %v0_fb5f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8argerrorEJPS2_iPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_fb80:
  store i64 %arg1, i64* @rdi, align 8
  store i64 64400, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_fc2c() local_unnamed_addr {
dec_label_pc_fc2c:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction4callEJPNS1_8LuaValueEv() local_unnamed_addr {
dec_label_pc_fc40:
  store i64 1, i64* @rdi, align 8
  %v0_fc50 = load i64, i64* @rax, align 8
  ret i64 %v0_fc50
}

define i64 @"_ZN3org4luaj3vm23lib20BaseLib$setmetatable4callEJPNS1_8LuaValueES5_"() local_unnamed_addr {
dec_label_pc_fc60:
  store i64 2, i64* @rdi, align 8
  %v0_fc70 = load i64, i64* @rax, align 8
  ret i64 %v0_fc70
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawget4callEJPNS1_8LuaValueEv"() local_unnamed_addr {
dec_label_pc_fc80:
  store i64 1, i64* @rdi, align 8
  %v0_fc90 = load i64, i64* @rax, align 8
  ret i64 %v0_fc90
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawget4callEJPNS1_8LuaValueES5_"() local_unnamed_addr {
dec_label_pc_fca0:
  store i64 2, i64* @rdi, align 8
  %v0_fcb0 = load i64, i64* @rax, align 8
  ret i64 %v0_fcb0
}

define i64 @"_ZN3org4luaj3vm23lib20BaseLib$getmetatable4callEJPNS1_8LuaValueEv"() local_unnamed_addr {
dec_label_pc_fcc0:
  store i64 1, i64* @rdi, align 8
  %v0_fcd0 = load i64, i64* @rax, align 8
  ret i64 %v0_fcd0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawset4callEJPNS1_8LuaValueES5_"() local_unnamed_addr {
dec_label_pc_fce0:
  store i64 2, i64* @rdi, align 8
  %v0_fcf0 = load i64, i64* @rax, align 8
  ret i64 %v0_fcf0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawset4callEJPNS1_8LuaValueES5_S5_"() local_unnamed_addr {
dec_label_pc_fd00:
  store i64 3, i64* @rdi, align 8
  %v0_fd10 = load i64, i64* @rax, align 8
  ret i64 %v0_fd10
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$rawequal4callEJPNS1_8LuaValueEv"() local_unnamed_addr {
dec_label_pc_fd20:
  store i64 1, i64* @rdi, align 8
  %v0_fd30 = load i64, i64* @rax, align 8
  ret i64 %v0_fd30
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$rawequal4callEJPNS1_8LuaValueES5_"() local_unnamed_addr {
dec_label_pc_fd40:
  store i64 2, i64* @rdi, align 8
  %v0_fd50 = load i64, i64* @rax, align 8
  ret i64 %v0_fd50
}

define i64 @_ZN3org4luaj3vm27Varargs8argcheckEJvbiPN4java4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_fd60:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_fd60 = trunc i64 %arg2 to i8
  %v5_fd60 = icmp eq i8 %v4_fd60, 0
  br i1 %v5_fd60, label %dec_label_pc_fd66, label %dec_label_pc_fd65

dec_label_pc_fd65:                                ; preds = %dec_label_pc_fd60
  %v0_fd65 = load i64, i64* @rax, align 8
  ret i64 %v0_fd65

dec_label_pc_fd66:                                ; preds = %dec_label_pc_fd60
  %v0_fd6d = load i64, i64* @rdx, align 8
  store i64 %v0_fd6d, i64* @rdi, align 8
  %v0_fd76 = load i64, i64* @rax, align 8
  ret i64 %v0_fd76
}

define i64 @_ZN3org4luaj3vm28LuaValue8typerrorEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_fd80:
  store i64 %arg1, i64* @rdi, align 8
  store i64 64912, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_fdd8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_fdd8:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_fdd8 = load i64, i64* @rax, align 8
  %v1_fdd8 = add i64 %v0_fdd8, -119
  %v2_fdd8 = inttoptr i64 %v1_fdd8 to i8*
  %v3_fdd8 = load i8, i8* %v2_fdd8, align 1
  %v5_fdd8 = trunc i64 %arg4 to i8
  %v6_fdd8 = add i8 %v3_fdd8, %v5_fdd8
  store i8 %v6_fdd8, i8* %v2_fdd8, align 1
  %v0_fddb = load i64, i64* @rax, align 8
  ret i64 %v0_fddb
}

define i64 @function_fe22() local_unnamed_addr {
dec_label_pc_fe22:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue13unimplementedEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_fe30:
  store i64 %arg1, i64* @rdi, align 8
  store i64 65088, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_fe94(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_fe94:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_fe94 = load i64, i64* @rax, align 8
  %v1_fe94 = add i64 %v0_fe94, -119
  %v2_fe94 = inttoptr i64 %v1_fe94 to i8*
  %v3_fe94 = load i8, i8* %v2_fe94, align 1
  %v5_fe94 = trunc i64 %arg4 to i8
  %v6_fe94 = add i8 %v3_fe94, %v5_fe94
  store i8 %v6_fe94, i8* %v2_fe94, align 1
  %v0_fe97 = load i64, i64* @rax, align 8
  ret i64 %v0_fe97
}

define i64 @function_fede() local_unnamed_addr {
dec_label_pc_fede:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7illegalEJPS2_PN4java4lang6StringES7_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_fef0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 65275, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_ff8e() local_unnamed_addr {
dec_label_pc_ff8e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8lenerrorEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_ffa0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 65453, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1001e() local_unnamed_addr {
dec_label_pc_1001e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10aritherrorEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_10030:
  store i64 %arg1, i64* @rdi, align 8
  store i64 65597, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_100ae() local_unnamed_addr {
dec_label_pc_100ae:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10aritherrorEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_100c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 65744, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_10124(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10124:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10124 = load i64, i64* @rax, align 8
  %v1_10124 = add i64 %v0_10124, -119
  %v2_10124 = inttoptr i64 %v1_10124 to i8*
  %v3_10124 = load i8, i8* %v2_10124, align 1
  %v5_10124 = trunc i64 %arg4 to i8
  %v6_10124 = add i8 %v3_10124, %v5_10124
  store i8 %v6_10124, i8* %v2_10124, align 1
  %v0_10127 = load i64, i64* @rax, align 8
  ret i64 %v0_10127
}

define i64 @function_1016e() local_unnamed_addr {
dec_label_pc_1016e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12compareerrorEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10180:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 65938, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1022d() local_unnamed_addr {
dec_label_pc_1022d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12compareerrorEJPS2_S3_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10240:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 66130, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_102b1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_102b1:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_102b1 = load i64, i64* @rax, align 8
  %v1_102b1 = add i64 %v0_102b1, -119
  %v2_102b1 = inttoptr i64 %v1_102b1 to i8*
  %v3_102b1 = load i8, i8* %v2_102b1, align 1
  %v5_102b1 = trunc i64 %arg4 to i8
  %v6_102b1 = add i8 %v3_102b1, %v5_102b1
  store i8 %v6_102b1, i8* %v2_102b1, align 1
  %v0_102b4 = load i64, i64* @rax, align 8
  ret i64 %v0_102b4
}

define i64 @function_102fd() local_unnamed_addr {
dec_label_pc_102fd:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8settableEJbPS2_S3_S3_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10310:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1031d = load i64, i64* @rdi, align 8
  store i64 %v0_1031d, i64* @rbx, align 8
  store i64 66343, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_10490(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_10490:
  %r14.global-to-local = alloca i64, align 8
  %v2_10490 = load i64, i64* @rbx, align 8
  %v0_10493 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_10493, i64* @rdx, align 8
  store i64 %v2_10490, i64* @rdi, align 8
  store i64 1, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg5, i64* %r14.global-to-local, align 8
  ret i64 1
}

define i64 @function_104b0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_104b0:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v2_104b0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_104b4 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_104b4, i64* @rcx, align 8
  %v0_104b7 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_104b7, i64* @rdx, align 8
  store i64 %v2_104b0, i64* @rdi, align 8
  store i64 1, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  store i64 %arg5, i64* %r14.global-to-local, align 8
  ret i64 1
}

define i64 @function_104d4() local_unnamed_addr {
dec_label_pc_104d4:
  %v0_104d4 = load i64, i64* inttoptr (i64 66779 to i64*), align 8
  store i64 %v0_104d4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3setEJvPS2_S3_() local_unnamed_addr {
dec_label_pc_104f0:
  %v0_104fd = load i64, i64* @rax, align 8
  ret i64 %v0_104fd
}

define i64 @_ZN3org4luaj3vm28LuaTable3setEJvPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10500:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_10500 = icmp eq i64 %arg2, 0
  %v0_10503 = load i64, i64* %r12.global-to-local, align 8
  %v0_10505 = load i64, i64* %rbp.global-to-local, align 8
  %v0_10506 = load i64, i64* @rbx, align 8
  store i64 %arg2, i64* @rbx, align 8
  br i1 %v1_10500, label %dec_label_pc_10594, label %dec_label_pc_10510

dec_label_pc_10510:                               ; preds = %dec_label_pc_10500
  %v3_10500 = trunc i64 %arg2 to i8
  store i64 %arg2, i64* @rax, align 8
  %v0_10513 = load i64, i64* @rdi, align 8
  store i64 %v0_10513, i64* %rbp.global-to-local, align 8
  %v0_10516 = load i64, i64* @rdx, align 8
  store i64 %v0_10516, i64* %r12.global-to-local, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v5_10522 = icmp eq i8 %v3_10500, 0
  br i1 %v5_10522, label %dec_label_pc_10570, label %dec_label_pc_10526

dec_label_pc_10526:                               ; preds = %dec_label_pc_10510
  %v1_10526 = add i64 %v0_10513, 32
  %v2_10526 = inttoptr i64 %v1_10526 to i64*
  %v3_10526 = load i64, i64* %v2_10526, align 8
  %v10_10526 = icmp eq i64 %v3_10526, 0
  br i1 %v10_10526, label %dec_label_pc_10551, label %dec_label_pc_1052d

dec_label_pc_1052d:                               ; preds = %dec_label_pc_10526
  store i64 %arg2, i64* @rax, align 8
  store i64 %v0_10513, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  br label %dec_label_pc_10551

dec_label_pc_10551:                               ; preds = %dec_label_pc_1052d, %dec_label_pc_10526
  store i64 %arg2, i64* @rax, align 8
  store i64 %v0_10516, i64* @rdx, align 8
  store i64 %v0_10513, i64* @rdi, align 8
  store i64 %v0_10506, i64* @rbx, align 8
  store i64 %v0_10505, i64* %rbp.global-to-local, align 8
  store i64 %v0_10503, i64* %r12.global-to-local, align 8
  ret i64 %arg2

dec_label_pc_10570:                               ; preds = %dec_label_pc_10510
  store i64 %arg2, i64* @rax, align 8
  store i64 %v0_10513, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  br label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_10570, %dec_label_pc_10500
  store i64 66971, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_10638() local_unnamed_addr {
dec_label_pc_10638:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable6lengthEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_10640:
  store i64 %arg1, i64* @rdi, align 8
  %v0_10644 = load i64, i64* @rdi, align 8
  store i64 %v0_10644, i64* @rbx, align 8
  store i64 %v0_10644, i64* @rax, align 8
  store i64 67186, i64* @rdi, align 8
  ret i64 %v0_10644
}

define i64 @function_106f0() local_unnamed_addr {
dec_label_pc_106f0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaErrorC1EPN4java4lang6StringEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10710:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10710 = load i64, i64* %rbp.global-to-local, align 8
  %v0_10711 = load i64, i64* @rbx, align 8
  %v0_10712 = load i64, i64* @rdx, align 8
  %v0_10714 = load i64, i64* @rdi, align 8
  %v1_10720 = trunc i64 %v0_10712 to i32
  %v3_10720 = add i64 %v0_10714, 40
  %v4_10720 = inttoptr i64 %v3_10720 to i32*
  store i32 %v1_10720, i32* %v4_10720, align 4
  store i64 %v0_10711, i64* @rbx, align 8
  store i64 %v0_10710, i64* %rbp.global-to-local, align 8
  %v0_10729 = load i64, i64* @rax, align 8
  ret i64 %v0_10729
}

define i64 @_ZN3org4luaj3vm28LuaErrorC1EPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10730:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10732 = load i64, i64* @rdi, align 8
  store i64 %v0_10732, i64* @rbx, align 8
  %v0_10735 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_10735, i64* @rax, align 8
  ret i64 %v0_10735
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$error4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10770:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10774 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_10774, i64* @rbx, align 8
  store i64 67479, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_107fd() local_unnamed_addr {
dec_label_pc_107fd:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack11currentlineEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_10840:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10844 = load i64, i64* @rdi, align 8
  store i64 %v0_10844, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_1088e() local_unnamed_addr {
dec_label_pc_1088e:
  %v0_10893 = load i64, i64* @rax, align 8
  ret i64 %v0_10893
}

define i64 @function_10895() local_unnamed_addr {
dec_label_pc_10895:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack8onReturnEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_108c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_108c4 = load i64, i64* @rdi, align 8
  store i64 %v0_108c4, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_1090d() local_unnamed_addr {
dec_label_pc_1090d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack13onInstructionEJviPNS1_7VarargsEi"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10930:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10938 = load i64, i64* @rdi, align 8
  store i64 %v0_10938, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_10992() local_unnamed_addr {
dec_label_pc_10992:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack12getCallFrameEJPNS2_18DebugLib$CallFrameEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_109b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_109b6 = load i64, i64* @rdi, align 8
  store i64 %v0_109b6, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_10a00() local_unnamed_addr {
dec_label_pc_10a00:
  %v0_10a02 = load i64, i64* @rax, align 8
  ret i64 %v0_10a02
}

define i64 @function_10a04() local_unnamed_addr {
dec_label_pc_10a04:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack13findCallFrameEJPNS2_18DebugLib$CallFrameEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10a20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10a24 = load i64, i64* @rdi, align 8
  store i64 %v0_10a24, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_10a88(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10a88:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_10a88 = trunc i64 %arg3 to i32
  %v2_10a88 = load i64, i64* @rax, align 8
  %v3_10a88 = trunc i64 %v2_10a88 to i32
  %tmp237 = icmp ugt i32 %v1_10a88, %v3_10a88
  br i1 %tmp237, label %dec_label_pc_10a8c, label %bb

bb:                                               ; preds = %dec_label_pc_10a88
  %v3_10a8a = call i64 @function_10aae()
  store i64 %v3_10a8a, i64* @rax, align 8
  br label %dec_label_pc_10a8c

dec_label_pc_10a8c:                               ; preds = %dec_label_pc_10a88, %bb
  %v1_10a8c = phi i64 [ %v3_10a8a, %bb ], [ %v2_10a88, %dec_label_pc_10a88 ]
  ret i64 %v1_10a8c
}

define i64 @function_10a92() local_unnamed_addr {
dec_label_pc_10a92:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_10aae() local_unnamed_addr {
dec_label_pc_10aae:
  %v0_10aae = load i64, i64* @rax, align 8
  store i64 %v0_10aae, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm222Globals$BufferedStream5resetEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_10ac0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10ac4 = load i64, i64* @rdi, align 8
  store i64 %v0_10ac4, i64* @rbx, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack8pushcallEJPNS2_18DebugLib$CallFrameEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_10b00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10b0c = load i64, i64* @rdi, align 8
  store i64 %v0_10b0c, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_10b78(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10b78:
  %v0_10b78 = load i64, i64* @rax, align 8
  %v3_10b78 = mul i64 %v0_10b78, 3
  %v1_10b85 = trunc i64 %v3_10b78 to i32
  %tmp237 = icmp slt i32 %v1_10b85, 0
  %v3_10b85 = zext i1 %tmp237 to i32
  %v4_10b89 = add i32 %v3_10b85, %v1_10b85
  %v3_10b91 = sdiv i32 %v4_10b89, 2
  %v10_10b91 = zext i32 %v3_10b91 to i64
  %tmp236 = sub nsw i32 3, %v3_10b91
  %v9_10b94 = and i32 %tmp236, %v3_10b91
  %v10_10b94 = icmp slt i32 %v9_10b94, 0
  %v12_10b94 = icmp slt i32 %v4_10b89, 8
  %v2_10b98 = icmp ne i1 %v12_10b94, %v10_10b94
  %v8_10b98 = select i1 %v2_10b98, i64 4, i64 %v10_10b91
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v8_10b98, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_10c1f(i64 %arg1) local_unnamed_addr {
dec_label_pc_10c1f:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %v0_10c24 = load i64, i64* %r12.global-to-local, align 8
  %v2_10c24 = add i64 %arg1, 8
  %v3_10c24 = inttoptr i64 %v2_10c24 to i64*
  store i64 %v0_10c24, i64* %v3_10c24, align 8
  %v0_10c28 = load i64, i64* %r12.global-to-local, align 8
  %v1_10c28 = add i64 %v0_10c28, 16
  store i64 %v1_10c28, i64* @rdx, align 8
  %v0_10c2d = load i64, i64* %r14.global-to-local, align 8
  %v2_10c2d = add i64 %v0_10c2d, 4294967295
  %v17_10c2d = and i64 %v2_10c2d, 4294967295
  store i64 %v17_10c2d, i64* %r14.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_10c62

dec_label_pc_10c40:                               ; preds = %dec_label_pc_10c62
  %v1_10c40 = add i64 %v0_10c40, 8
  %v2_10c40 = inttoptr i64 %v1_10c40 to i64*
  %v3_10c40 = load i64, i64* %v2_10c40, align 8
  store i64 %v3_10c40, i64* %rsi.global-to-local, align 8
  %v9_10c44 = icmp ult i32 %v0_10c44, %v3_10c62
  %v1_10c46 = icmp eq i1 %v9_10c44, false
  br i1 %v1_10c46, label %bb, label %dec_label_pc_10c48

bb:                                               ; preds = %dec_label_pc_10c40
  %v2_10c46 = call i64 @function_10c90()
  store i64 %v2_10c46, i64* @rax, align 8
  %v0_10c48.pre = load i64, i64* @rdx, align 8
  %v1_10c4b.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_10c48

dec_label_pc_10c48:                               ; preds = %bb, %dec_label_pc_10c40
  %v1_10c4b = phi i64 [ %v1_10c4b.pre, %bb ], [ %v3_10c40, %dec_label_pc_10c40 ]
  %v0_10c48 = phi i64 [ %v0_10c48.pre, %bb ], [ %v0_10c40, %dec_label_pc_10c40 ]
  %v1_10c48 = inttoptr i64 %v0_10c48 to i64*
  %v2_10c48 = load i64, i64* %v1_10c48, align 8
  store i64 %v2_10c48, i64* @rcx, align 8
  %v2_10c4b = add i64 %v1_10c4b, 40
  %v3_10c4b = inttoptr i64 %v2_10c4b to i64*
  store i64 %v2_10c48, i64* %v3_10c4b, align 8
  %v0_10c4f = load i64, i64* @rax, align 8
  %v1_10c4f = trunc i64 %v0_10c4f to i32
  %v2_10c4f = add i32 %v1_10c4f, 1
  %v17_10c4f = zext i32 %v2_10c4f to i64
  store i64 %v17_10c4f, i64* @rax, align 8
  %v0_10c52 = load i64, i64* @rdi, align 8
  %v1_10c52 = trunc i64 %v0_10c52 to i32
  %v2_10c52 = add i32 %v1_10c52, 1
  %v17_10c52 = zext i32 %v2_10c52 to i64
  store i64 %v17_10c52, i64* @rdi, align 8
  %v0_10c55 = load i64, i64* @rdx, align 8
  %v1_10c55 = add i64 %v0_10c55, 8
  store i64 %v1_10c55, i64* @rdx, align 8
  %v0_10c62.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_10c62

dec_label_pc_10c62:                               ; preds = %dec_label_pc_10c48, %dec_label_pc_10c1f
  %v0_10c44 = phi i32 [ %v2_10c4f, %dec_label_pc_10c48 ], [ 0, %dec_label_pc_10c1f ]
  %v0_10c40 = phi i64 [ %v1_10c55, %dec_label_pc_10c48 ], [ %v1_10c28, %dec_label_pc_10c1f ]
  %v2_10c67 = phi i32 [ %v2_10c52, %dec_label_pc_10c48 ], [ 1, %dec_label_pc_10c1f ]
  %v0_10c62 = phi i64 [ %v0_10c62.pre, %dec_label_pc_10c48 ], [ %v0_10c28, %dec_label_pc_10c1f ]
  %v1_10c62 = add i64 %v0_10c62, 8
  %v2_10c62 = inttoptr i64 %v1_10c62 to i32*
  %v3_10c62 = load i32, i32* %v2_10c62, align 4
  %v4_10c62 = zext i32 %v3_10c62 to i64
  store i64 %v4_10c62, i64* @rcx, align 8
  %tmp245 = icmp ugt i32 %v3_10c62, %v2_10c67
  br i1 %tmp245, label %dec_label_pc_10c40, label %dec_label_pc_10c6b

dec_label_pc_10c6b:                               ; preds = %dec_label_pc_10c62
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_10c90() local_unnamed_addr {
dec_label_pc_10c90:
  %v0_10c90 = load i64, i64* @rax, align 8
  store i64 %v0_10c90, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_10c99() local_unnamed_addr {
dec_label_pc_10c99:
  %v0_10c99 = load i64, i64* @rbx, align 8
  store i64 %v0_10c99, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_10ca2() local_unnamed_addr {
dec_label_pc_10ca2:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack6onCallEJvPNS1_11LuaFunctionE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10cb0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10cb4 = load i64, i64* @rdi, align 8
  store i64 %v0_10cb4, i64* @rbx, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack6onCallEJvPNS1_10LuaClosureEPNS1_7VarargsEP6JArrayIPNS1_8LuaValueEE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10d00:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10d08 = load i64, i64* @rdi, align 8
  store i64 %v0_10d08, i64* @rbx, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm220Varargs$ArrayVarargs6copytoEJvP6JArrayIPNS1_8LuaValueEEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10d70:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10d72 = load i64, i64* @rdi, align 8
  %v0_10d7a = load i64, i64* %rsi.global-to-local, align 8
  %v1_10d7e = add i64 %v0_10d72, 8
  %v2_10d7e = inttoptr i64 %v1_10d7e to i64*
  %v3_10d7e = load i64, i64* %v2_10d7e, align 8
  store i64 %v3_10d7e, i64* @rdi, align 8
  %v0_10d82 = load i64, i64* @rdx, align 8
  %v0_10d85 = load i64, i64* @rcx, align 8
  %v1_10d87 = add i64 %v3_10d7e, 8
  %v2_10d87 = inttoptr i64 %v1_10d87 to i32*
  %v3_10d87 = load i32, i32* %v2_10d87, align 4
  %v4_10d87 = zext i32 %v3_10d87 to i64
  %v3_10d8a = trunc i64 %v0_10d85 to i32
  %v4_10d8a = sub i32 %v3_10d87, %v3_10d8a
  %v10_10d8a = xor i32 %v3_10d87, %v3_10d8a
  %v11_10d8a = xor i32 %v4_10d8a, %v3_10d87
  %v12_10d8a = and i32 %v11_10d8a, %v10_10d8a
  %v13_10d8a = icmp slt i32 %v12_10d8a, 0
  %v14_10d8a = icmp eq i32 %v4_10d8a, 0
  %v15_10d8a = icmp slt i32 %v4_10d8a, 0
  %v3_10d8c = icmp eq i1 %v15_10d8a, %v13_10d8a
  %v4_10d8c = icmp eq i1 %v14_10d8a, false
  %v5_10d8c = icmp eq i1 %v3_10d8c, %v4_10d8c
  %v10_10d8c.v = select i1 %v5_10d8c, i64 %v0_10d85, i64 %v4_10d87
  %v11_10d8c = and i64 %v10_10d8c.v, 4294967295
  store i64 %v11_10d8c, i64* @rbx, align 8
  store i64 %v0_10d82, i64* @rcx, align 8
  store i64 %v0_10d7a, i64* @rdx, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  %v12_10d97 = load i64, i64* @rax, align 8
  ret i64 %v12_10d97
}

define i64 @"_ZN3org4luaj3vm224Varargs$ArrayPartVarargs6copytoEJvP6JArrayIPNS1_8LuaValueEEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10dc0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10dc4 = load i64, i64* %rsi.global-to-local, align 8
  %v0_10dca = load i64, i64* @rdi, align 8
  %v1_10dce = add i64 %v0_10dca, 24
  %v2_10dce = inttoptr i64 %v1_10dce to i32*
  %v3_10dce = load i32, i32* %v2_10dce, align 4
  %v4_10dce = zext i32 %v3_10dce to i64
  store i64 %v4_10dce, i64* @rbx, align 8
  %v0_10dd1 = load i64, i64* @rdx, align 8
  %v1_10dd4 = add i64 %v0_10dca, 8
  %v2_10dd4 = inttoptr i64 %v1_10dd4 to i32*
  %v3_10dd4 = load i32, i32* %v2_10dd4, align 4
  %v4_10dd4 = zext i32 %v3_10dd4 to i64
  store i64 %v4_10dd4, i64* %rsi.global-to-local, align 8
  %v1_10dd9 = add i64 %v0_10dca, 16
  %v2_10dd9 = inttoptr i64 %v1_10dd9 to i64*
  %v3_10dd9 = load i64, i64* %v2_10dd9, align 8
  store i64 %v3_10dd9, i64* @rdi, align 8
  %v0_10ddd = load i64, i64* @rcx, align 8
  %v3_10ddf = trunc i64 %v0_10ddd to i32
  %v4_10ddf = sub i32 %v3_10dce, %v3_10ddf
  %v10_10ddf1 = xor i64 %v0_10ddd, %v4_10dce
  %v10_10ddf = trunc i64 %v10_10ddf1 to i32
  %v11_10ddf = xor i32 %v4_10ddf, %v3_10dce
  %v12_10ddf = and i32 %v11_10ddf, %v10_10ddf
  %v13_10ddf = icmp slt i32 %v12_10ddf, 0
  %v14_10ddf = icmp eq i32 %v4_10ddf, 0
  %v15_10ddf = icmp slt i32 %v4_10ddf, 0
  %v3_10de1 = icmp eq i1 %v15_10ddf, %v13_10ddf
  %v4_10de1 = icmp eq i1 %v14_10ddf, false
  %v5_10de1 = icmp eq i1 %v3_10de1, %v4_10de1
  %v10_10de1.v = select i1 %v5_10de1, i64 %v0_10ddd, i64 %v4_10dce
  %v11_10de1 = and i64 %v10_10de1.v, 4294967295
  store i64 %v11_10de1, i64* @rbx, align 8
  store i64 %v0_10dd1, i64* @rcx, align 8
  store i64 %v0_10dc4, i64* @rdx, align 8
  %v1_10de9 = load i64, i64* @rax, align 8
  ret i64 %v1_10de9
}

define i64 @"_ZN3org4luaj3vm222Globals$BufferedStream4markEJvi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10e20:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_10e26 = load i64, i64* @rdi, align 8
  store i64 %v0_10e26, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_10e88() local_unnamed_addr {
dec_label_pc_10e88:
  %v0_10e88 = load i64, i64* @rbx, align 8
  store i64 %v0_10e88, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_10ea8() local_unnamed_addr {
dec_label_pc_10ea8:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm230Globals$AbstractBufferedStream4readEJiP6JArrayIcEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10ee0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10ee4 = load i64, i64* @rdx, align 8
  store i64 %v0_10ee4, i64* %r13.global-to-local, align 8
  %v0_10ee9 = load i64, i64* @rdi, align 8
  store i64 %v0_10ee9, i64* %rbp.global-to-local, align 8
  %v0_10eec = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_10eec, i64* %r12.global-to-local, align 8
  %v0_10eef = load i64, i64* @rcx, align 8
  store i64 %v0_10eef, i64* @rbx, align 8
  store i64 %v0_10ee9, i64* @rax, align 8
  %v4_10efe = trunc i64 %v0_10ee9 to i32
  %tmp246 = icmp slt i32 %v4_10efe, 1
  br i1 %tmp246, label %bb, label %dec_label_pc_10f02

bb:                                               ; preds = %dec_label_pc_10ee0
  %v5_10f00 = call i64 @function_10f30()
  store i64 %v5_10f00, i64* @rax, align 8
  %v2_10f02.pre = load i64, i64* @rbx, align 8
  %v0_10f04.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_10f0e.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_10f11.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_10f02

dec_label_pc_10f02:                               ; preds = %bb, %dec_label_pc_10ee0
  %v0_10f11 = phi i64 [ %v0_10f11.pre, %bb ], [ %v0_10eec, %dec_label_pc_10ee0 ]
  %v0_10f0e = phi i64 [ %v0_10f0e.pre, %bb ], [ %v0_10ee4, %dec_label_pc_10ee0 ]
  %v0_10f04 = phi i64 [ %v0_10f04.pre, %bb ], [ %v0_10ee9, %dec_label_pc_10ee0 ]
  %v1_10f14 = phi i64 [ %v5_10f00, %bb ], [ %v0_10ee9, %dec_label_pc_10ee0 ]
  %v5_10f0b = phi i64 [ %v2_10f02.pre, %bb ], [ %v0_10eef, %dec_label_pc_10ee0 ]
  %v1_10f02 = trunc i64 %v1_10f14 to i32
  %v3_10f02 = trunc i64 %v5_10f0b to i32
  %v4_10f02 = sub i32 %v1_10f02, %v3_10f02
  %v10_10f022 = xor i64 %v1_10f14, %v5_10f0b
  %v10_10f02 = trunc i64 %v10_10f022 to i32
  %v11_10f02 = xor i32 %v4_10f02, %v1_10f02
  %v12_10f02 = and i32 %v11_10f02, %v10_10f02
  %v13_10f02 = icmp slt i32 %v12_10f02, 0
  %v14_10f02 = icmp eq i32 %v4_10f02, 0
  %v15_10f02 = icmp slt i32 %v4_10f02, 0
  %v1_10f04 = add i64 %v0_10f04, 8
  %v2_10f04 = inttoptr i64 %v1_10f04 to i64*
  %v3_10f04 = load i64, i64* %v2_10f04, align 8
  store i64 %v3_10f04, i64* @rdi, align 8
  %v1_10f08 = add i64 %v0_10f04, 16
  %v2_10f08 = inttoptr i64 %v1_10f08 to i32*
  %v3_10f08 = load i32, i32* %v2_10f08, align 4
  %v4_10f08 = zext i32 %v3_10f08 to i64
  store i64 %v4_10f08, i64* %rsi.global-to-local, align 8
  %v3_10f0b = icmp ne i1 %v15_10f02, %v13_10f02
  %v4_10f0b = or i1 %v14_10f02, %v3_10f0b
  %v9_10f0b.v = select i1 %v4_10f0b, i64 %v1_10f14, i64 %v5_10f0b
  %v10_10f0b = and i64 %v9_10f0b.v, 4294967295
  store i64 %v10_10f0b, i64* @rbx, align 8
  store i64 %v0_10f0e, i64* @rcx, align 8
  store i64 %v0_10f11, i64* @rdx, align 8
  ret i64 %v1_10f14
}

define i64 @function_10f30() local_unnamed_addr {
dec_label_pc_10f30:
  store i64 4294967295, i64* @rbx, align 8
  %v0_10f35 = load i64, i64* @rax, align 8
  ret i64 %v0_10f35
}

define i64 @_ZN3org4luaj3vm29LuaString8copyIntoEJviP6JArrayIcEii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_10f40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_10f40 = load i64, i64* @rdi, align 8
  store i64 %v0_10f40, i64* @rax, align 8
  %v1_10f47 = add i64 %v0_10f40, 8
  %v2_10f47 = inttoptr i64 %v1_10f47 to i64*
  %v3_10f47 = load i64, i64* %v2_10f47, align 8
  store i64 %v3_10f47, i64* @rdi, align 8
  %v0_10f4b = load i64, i64* %rsi.global-to-local, align 8
  %v1_10f4b = trunc i64 %v0_10f4b to i32
  %v3_10f4b = add i64 %v0_10f40, 16
  %v4_10f4b = inttoptr i64 %v3_10f4b to i32*
  %v5_10f4b = load i32, i32* %v4_10f4b, align 4
  %v6_10f4b = add i32 %v5_10f4b, %v1_10f4b
  %v22_10f4b = zext i32 %v6_10f4b to i64
  store i64 %v22_10f4b, i64* %rsi.global-to-local, align 8
  ret i64 %v0_10f40
}

define i64 @_ZN3org4luaj3vm28LuaTable6resizeEJP6JArrayIPNS1_8LuaValueEES7_i(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10f60:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure11getNewStackEJP6JArrayIPNS1_8LuaValueEEv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10fa0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v0_10faf = load i64, i64* @rdi, align 8
  %v1_10faf = add i64 %v0_10faf, 8
  %v2_10faf = inttoptr i64 %v1_10faf to i64*
  %v3_10faf = load i64, i64* %v2_10faf, align 8
  store i64 %v3_10faf, i64* @rax, align 8
  %v1_10fb3 = add i64 %v3_10faf, 80
  %v2_10fb3 = inttoptr i64 %v1_10fb3 to i32*
  %v3_10fb3 = load i32, i32* %v2_10fb3, align 4
  %v4_10fb3 = zext i32 %v3_10fb3 to i64
  store i64 0, i64* @rax, align 8
  store i64 %v4_10fb3, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29Upvaldesc8toStringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_10ff0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_10ff2 = load i64, i64* @rdi, align 8
  store i64 %v0_10ff2, i64* @rbx, align 8
  %v1_10ff2 = load i64, i64* @rax, align 8
  ret i64 %v1_10ff2
}

define i64 @function_1106e() local_unnamed_addr {
dec_label_pc_1106e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger12checkjstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_11080:
  store i64 %arg1, i64* @rdi, align 8
  %v0_11084 = load i64, i64* @rdi, align 8
  %v1_11084 = add i64 %v0_11084, 8
  %v2_11084 = inttoptr i64 %v1_11084 to i32*
  %v3_11084 = load i32, i32* %v2_11084, align 4
  %v4_11084 = zext i32 %v3_11084 to i64
  store i64 %v4_11084, i64* @rdi, align 8
  %v5_11084 = load i64, i64* @rax, align 8
  ret i64 %v5_11084
}

define i64 @_ZN3org4luaj3vm27UpValue8toStringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_110a0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_110a2 = load i64, i64* @rdi, align 8
  store i64 %v0_110a2, i64* @rbx, align 8
  %v1_110a2 = load i64, i64* @rax, align 8
  ret i64 %v1_110a2
}

define i64 @function_1113f() local_unnamed_addr {
dec_label_pc_1113f:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure17processErrorHooksEJvPNS1_8LuaErrorEPNS1_9PrototypeEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_11150:
  store i64 %arg1, i64* @rdi, align 8
  %v5_11157 = load i64, i64* @rax, align 8
  ret i64 %v5_11157
}

define i64 @function_1118e(i64 %arg1) local_unnamed_addr {
dec_label_pc_1118e:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_11228(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_11228:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_11228 = load i64, i64* @rax, align 8
  %v1_11228 = add i64 %v0_11228, 12
  store i64 %v1_11228, i64* @rax, align 8
  %v0_1122c = load i64, i64* @r12, align 8
  %v1_1122c = trunc i64 %v0_1122c to i32
  %v3_1122c = trunc i64 %arg3 to i32
  %v9_1122c = icmp ult i32 %v1_1122c, %v3_1122c
  %v1_1122f = icmp eq i1 %v9_1122c, false
  br i1 %v1_1122f, label %bb, label %dec_label_pc_11231

bb:                                               ; preds = %dec_label_pc_11228
  %v2_1122f = call i64 @function_11253()
  store i64 %v2_1122f, i64* @rax, align 8
  %v1_11231.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_11231

dec_label_pc_11231:                               ; preds = %bb, %dec_label_pc_11228
  %v1_11231 = phi i64 [ %v1_11231.pre, %bb ], [ %v0_1122c, %dec_label_pc_11228 ]
  %v7_11231 = phi i64 [ %v2_1122f, %bb ], [ %v1_11228, %dec_label_pc_11228 ]
  %v2_11231 = mul i64 %v1_11231, 4
  %v3_11231 = add i64 %v2_11231, %v7_11231
  %v4_11231 = inttoptr i64 %v3_11231 to i32*
  %v5_11231 = load i32, i32* %v4_11231, align 4
  %v6_11231 = zext i32 %v5_11231 to i64
  store i64 %v6_11231, i64* @rdi, align 8
  ret i64 %v7_11231
}

define i64 @function_11240() local_unnamed_addr {
dec_label_pc_11240:
  %v0_11240 = load i64, i64* inttoptr (i64 70215 to i64*), align 8
  store i64 %v0_11240, i64* @rdi, align 8
  %v1_11247 = call i64 @function_1118e(i64 %v0_11240)
  store i64 %v1_11247, i64* @rax, align 8
  ret i64 %v1_11247
}

define i64 @function_1124c() local_unnamed_addr {
dec_label_pc_1124c:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_11253() local_unnamed_addr {
dec_label_pc_11253:
  %v0_11253 = load i64, i64* @r12, align 8
  store i64 %v0_11253, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack9tracebackEJPN4java4lang6StringEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11260:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1126f = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1126f, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_112ca() local_unnamed_addr {
dec_label_pc_112ca:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  %v1_112d2 = add i64 %tmp229, 112
  %v2_112d2 = inttoptr i64 %v1_112d2 to i64*
  %v3_112d2 = load i64, i64* %v2_112d2, align 8
  store i64 %v3_112d2, i64* @rax, align 8
  %v1_112dd = icmp eq i64 %v3_112d2, 0
  store i64 %v3_112d2, i64* @rbx, align 8
  br i1 %v1_112dd, label %bb, label %dec_label_pc_112e9

bb:                                               ; preds = %dec_label_pc_112ca
  %v1_112e3 = call i64 @function_11470()
  store i64 %v1_112e3, i64* @rax, align 8
  br label %dec_label_pc_112e9

dec_label_pc_112e9:                               ; preds = %bb, %dec_label_pc_112ca
  %v1_112f0 = phi i64 [ %v1_112e3, %bb ], [ %v3_112d2, %dec_label_pc_112ca ]
  %v0_112f0 = load i64, i64* @rbp, align 8
  store i64 %v0_112f0, i64* @rdi, align 8
  ret i64 %v1_112f0
}

define i64 @function_1138b() local_unnamed_addr {
dec_label_pc_1138b:
  %rbp.global-to-local = alloca i64, align 8
  %v0_11392 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_11392, i64* @rdi, align 8
  %v1_11392 = load i64, i64* @rax, align 8
  ret i64 %v1_11392
}

define i64 @function_11470() local_unnamed_addr {
dec_label_pc_11470:
  %v0_11477 = load i64, i64* @rbp, align 8
  store i64 %v0_11477, i64* @rdi, align 8
  %v1_11477 = load i64, i64* @rax, align 8
  ret i64 %v1_11477
}

define i64 @function_114a6() local_unnamed_addr {
dec_label_pc_114a6:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_114c8() local_unnamed_addr {
dec_label_pc_114c8:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_114cd() local_unnamed_addr {
dec_label_pc_114cd:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState5matchEJiii"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_114e0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_114e0 = load i64, i64* %r15.global-to-local, align 8
  %v0_114e2 = load i64, i64* %r14.global-to-local, align 8
  %v0_114e4 = load i64, i64* %r13.global-to-local, align 8
  %v0_114e6 = load i64, i64* %r12.global-to-local, align 8
  %v0_114e8 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_114e8, i64* @r12, align 8
  %v0_114eb = load i64, i64* %rbp.global-to-local, align 8
  %v0_114ec = load i64, i64* @rbx, align 8
  store i64 %v0_114ec, i64* %stack_var_-48, align 8
  %v0_114ed = load i64, i64* @rdx, align 8
  store i64 %v0_114ed, i64* @rbp, align 8
  %v0_114ef = load i64, i64* @rdi, align 8
  store i64 %v0_114ef, i64* @rbx, align 8
  br label %dec_label_pc_114f6

dec_label_pc_114f6:                               ; preds = %dec_label_pc_117e7, %dec_label_pc_11792, %dec_label_pc_11720, %dec_label_pc_11642, %dec_label_pc_114e0
  %v0_11503 = phi i64 [ %v0_114ed, %dec_label_pc_114e0 ], [ %v1_11642, %dec_label_pc_11642 ], [ %v0_11704, %dec_label_pc_11720 ], [ %v17_11792, %dec_label_pc_11792 ], [ %v0_117eb, %dec_label_pc_117e7 ]
  %v0_114f6 = phi i64 [ %v0_114ef, %dec_label_pc_114e0 ], [ %v0_117ba, %dec_label_pc_11642 ], [ %v0_1172e, %dec_label_pc_11720 ], [ %v0_11781, %dec_label_pc_11792 ], [ %v0_114f6.pre.pre, %dec_label_pc_117e7 ]
  %v1_114f6 = add i64 %v0_114f6, 16
  %v2_114f6 = inttoptr i64 %v1_114f6 to i64*
  %v3_114f6 = load i64, i64* %v2_114f6, align 8
  store i64 %v3_114f6, i64* @rdi, align 8
  %v1_114fa = inttoptr i64 %v3_114f6 to i64*
  %v2_114fa = load i64, i64* %v1_114fa, align 8
  store i64 %v2_114fa, i64* @rax, align 8
  %v1_11503 = trunc i64 %v0_11503 to i32
  %v3_11503 = trunc i64 %v2_114fa to i32
  %v14_11503 = icmp eq i32 %v1_11503, %v3_11503
  br i1 %v14_11503, label %bb, label %dec_label_pc_1150b

bb:                                               ; preds = %dec_label_pc_114f6
  %v1_11505 = call i64 @function_118b8()
  store i64 %v1_11505, i64* @rax, align 8
  %v0_1150b.pre = load i64, i64* @rbx, align 8
  %v0_1150f.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_1150b

dec_label_pc_1150b:                               ; preds = %bb, %dec_label_pc_114f6
  %v0_11654 = phi i64 [ %v0_1150f.pre, %bb ], [ %v0_11503, %dec_label_pc_114f6 ]
  %v0_11650 = phi i64 [ %v0_1150b.pre, %bb ], [ %v0_114f6, %dec_label_pc_114f6 ]
  %v1_1150b = add i64 %v0_11650, 16
  %v2_1150b = inttoptr i64 %v1_1150b to i64*
  %v3_1150b = load i64, i64* %v2_1150b, align 8
  store i64 %v3_1150b, i64* @rdi, align 8
  store i64 %v0_11654, i64* %rsi.global-to-local, align 8
  %v1_11511 = inttoptr i64 %v3_1150b to i64*
  %v2_11511 = load i64, i64* %v1_11511, align 8
  store i64 %v2_11511, i64* @rax, align 8
  %v1_1151a = trunc i64 %v2_11511 to i32
  %v12_1151a = icmp eq i32 %v1_1151a, 37
  br i1 %v12_1151a, label %dec_label_pc_11650, label %dec_label_pc_11523

dec_label_pc_11523:                               ; preds = %dec_label_pc_1150b
  %v9_11523 = icmp sgt i32 %v1_1151a, 37
  br i1 %v9_11523, label %dec_label_pc_11529, label %dec_label_pc_115b8

dec_label_pc_11529:                               ; preds = %dec_label_pc_11523
  %v11_11529 = icmp eq i32 %v1_1151a, 40
  br i1 %v11_11529, label %dec_label_pc_11560, label %dec_label_pc_1152e

dec_label_pc_1152e:                               ; preds = %dec_label_pc_11529
  %v11_1152e = icmp eq i32 %v1_1151a, 41
  %v1_11531 = icmp eq i1 %v11_1152e, false
  br i1 %v1_11531, label %dec_label_pc_115d7, label %dec_label_pc_11537

dec_label_pc_11537:                               ; preds = %dec_label_pc_1152e
  store i64 %v3_1150b, i64* @rax, align 8
  %v1_1153a = add i64 %v0_11654, 1
  store i64 %v1_1153a, i64* @rdx, align 8
  %v0_1153d = load i64, i64* @r12, align 8
  store i64 %v0_1153d, i64* %rsi.global-to-local, align 8
  store i64 %v0_11650, i64* @rdi, align 8
  br label %dec_label_pc_11549

dec_label_pc_11549:                               ; preds = %dec_label_pc_11740, %dec_label_pc_11537
  %v0_11557 = phi i64 [ 4294967295, %dec_label_pc_11740 ], [ %v3_1150b, %dec_label_pc_11537 ]
  %v2_1154d = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_1154d, i64* @rbx, align 8
  store i64 %v0_114eb, i64* %rbp.global-to-local, align 8
  store i64 %v0_114e6, i64* %r12.global-to-local, align 8
  store i64 %v0_114e4, i64* %r13.global-to-local, align 8
  store i64 %v0_114e2, i64* %r14.global-to-local, align 8
  store i64 %v0_114e0, i64* %r15.global-to-local, align 8
  ret i64 %v0_11557

dec_label_pc_11560:                               ; preds = %dec_label_pc_11529
  %v3_11560 = load i64, i64* %v2_1150b, align 8
  store i64 %v3_11560, i64* @rdi, align 8
  %v1_11564 = add i64 %v0_11654, 1
  store i64 %v1_11564, i64* %r13.global-to-local, align 8
  %v1_11568 = inttoptr i64 %v3_11560 to i64*
  %v2_11568 = load i64, i64* %v1_11568, align 8
  store i64 %v2_11568, i64* @rax, align 8
  %v5_11574 = icmp slt i64 %v1_11564, %v2_11568
  br i1 %v5_11574, label %dec_label_pc_11576, label %dec_label_pc_1158f

dec_label_pc_11576:                               ; preds = %dec_label_pc_11560
  %v3_11576 = load i64, i64* %v2_1150b, align 8
  store i64 %v3_11576, i64* @rdi, align 8
  store i64 %v1_11564, i64* %rsi.global-to-local, align 8
  %v1_1157d = inttoptr i64 %v3_11576 to i64*
  %v2_1157d = load i64, i64* %v1_1157d, align 8
  store i64 %v2_1157d, i64* @rax, align 8
  %v1_11586 = trunc i64 %v2_1157d to i32
  %v11_11586 = icmp eq i32 %v1_11586, 41
  br i1 %v11_11586, label %bb305, label %dec_label_pc_1158f

bb305:                                            ; preds = %dec_label_pc_11576
  %v1_11589 = call i64 @function_11880()
  store i64 %v1_11589, i64* @rax, align 8
  %v2_1158f.pre = load i64, i64* @rdi, align 8
  %v0_11597.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_1159d.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_1158f

dec_label_pc_1158f:                               ; preds = %dec_label_pc_11560, %bb305, %dec_label_pc_11576
  %v0_1159d = phi i64 [ %v0_11650, %dec_label_pc_11560 ], [ %v0_1159d.pre, %bb305 ], [ %v0_11650, %dec_label_pc_11576 ]
  %v0_11597 = phi i64 [ %v1_11564, %dec_label_pc_11560 ], [ %v0_11597.pre, %bb305 ], [ %v1_11564, %dec_label_pc_11576 ]
  %v2_1158f = phi i64 [ %v3_11560, %dec_label_pc_11560 ], [ %v2_1158f.pre, %bb305 ], [ %v3_11576, %dec_label_pc_11576 ]
  store i64 %v2_1158f, i64* @rax, align 8
  store i64 4294967295, i64* @rcx, align 8
  store i64 %v0_11597, i64* @rdx, align 8
  %v0_1159a = load i64, i64* @r12, align 8
  store i64 %v0_1159a, i64* %rsi.global-to-local, align 8
  store i64 %v0_1159d, i64* @rdi, align 8
  %v2_115aa = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_115aa, i64* @rbx, align 8
  store i64 %v0_114eb, i64* %rbp.global-to-local, align 8
  store i64 %v0_114e6, i64* %r12.global-to-local, align 8
  store i64 %v0_114e4, i64* %r13.global-to-local, align 8
  store i64 %v0_114e2, i64* %r14.global-to-local, align 8
  store i64 %v0_114e0, i64* %r15.global-to-local, align 8
  ret i64 %v2_1158f

dec_label_pc_115b8:                               ; preds = %dec_label_pc_11523
  %v11_115b8 = icmp eq i32 %v1_1151a, 36
  %v1_115bb = add i64 %v0_11654, 1
  store i64 %v1_115bb, i64* %r13.global-to-local, align 8
  %v1_115bf = icmp eq i1 %v11_115b8, false
  br i1 %v1_115bf, label %dec_label_pc_115d7, label %dec_label_pc_115c1

dec_label_pc_115c1:                               ; preds = %dec_label_pc_115b8
  %v3_115c1 = load i64, i64* %v2_1150b, align 8
  store i64 %v3_115c1, i64* @rdi, align 8
  %v1_115c5 = inttoptr i64 %v3_115c1 to i64*
  %v2_115c5 = load i64, i64* %v1_115c5, align 8
  store i64 %v2_115c5, i64* @rax, align 8
  %v1_115ce = trunc i64 %v2_115c5 to i32
  %v3_115ce = trunc i64 %v1_115bb to i32
  %v14_115ce = icmp eq i32 %v1_115ce, %v3_115ce
  br i1 %v14_115ce, label %bb308, label %dec_label_pc_115d7

bb308:                                            ; preds = %dec_label_pc_115c1
  %v1_115d1 = call i64 @function_1189c()
  store i64 %v1_115d1, i64* @rax, align 8
  %v2_115d7.pre = load i64, i64* @rdi, align 8
  %v0_115da.pre = load i64, i64* @rbp, align 8
  %v0_115dc.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_115d7

dec_label_pc_115d7:                               ; preds = %bb308, %dec_label_pc_115c1, %dec_label_pc_115b8, %dec_label_pc_1152e
  %v0_117ba = phi i64 [ %v0_115dc.pre, %bb308 ], [ %v0_11650, %dec_label_pc_115c1 ], [ %v0_11650, %dec_label_pc_115b8 ], [ %v0_11650, %dec_label_pc_1152e ]
  %v0_117b6 = phi i64 [ %v0_115da.pre, %bb308 ], [ %v0_11654, %dec_label_pc_115c1 ], [ %v0_11654, %dec_label_pc_115b8 ], [ %v0_11654, %dec_label_pc_1152e ]
  %v0_117d5 = phi i64 [ %v2_115d7.pre, %bb308 ], [ %v3_115c1, %dec_label_pc_115c1 ], [ %v3_1150b, %dec_label_pc_115b8 ], [ %v3_1150b, %dec_label_pc_1152e ]
  store i64 %v0_117d5, i64* @rax, align 8
  store i64 %v0_117b6, i64* %rsi.global-to-local, align 8
  store i64 %v0_117ba, i64* @rdi, align 8
  %v1_115e2 = add i64 %v0_117ba, 8
  %v2_115e2 = inttoptr i64 %v1_115e2 to i64*
  %v3_115e2 = load i64, i64* %v2_115e2, align 8
  store i64 %v3_115e2, i64* @rdi, align 8
  store i64 %v0_117d5, i64* @r13, align 8
  %v1_115e9 = inttoptr i64 %v3_115e2 to i64*
  %v2_115e9 = load i64, i64* %v1_115e9, align 8
  store i64 %v2_115e9, i64* @rax, align 8
  %v0_115f2 = load i64, i64* @r12, align 8
  %v5_115f5 = icmp slt i64 %v0_115f2, %v2_115e9
  br i1 %v5_115f5, label %dec_label_pc_117a0, label %dec_label_pc_115fb

dec_label_pc_115fb:                               ; preds = %dec_label_pc_115d7
  %v1_115fb = add i64 %v0_117ba, 16
  %v2_115fb = inttoptr i64 %v1_115fb to i64*
  %v3_115fb = load i64, i64* %v2_115fb, align 8
  store i64 %v3_115fb, i64* @rdi, align 8
  %v1_115ff = inttoptr i64 %v3_115fb to i64*
  %v2_115ff = load i64, i64* %v1_115ff, align 8
  store i64 %v2_115ff, i64* @rax, align 8
  %v5_1160b = icmp slt i64 %v0_117d5, %v2_115ff
  br i1 %v5_1160b, label %dec_label_pc_11611, label %dec_label_pc_11740

dec_label_pc_11611:                               ; preds = %dec_label_pc_115fb
  %v3_11611 = load i64, i64* %v2_115fb, align 8
  store i64 %v3_11611, i64* @rdi, align 8
  store i64 %v0_117d5, i64* %rsi.global-to-local, align 8
  %v1_11618 = inttoptr i64 %v3_11611 to i64*
  %v2_11618 = load i64, i64* %v1_11618, align 8
  store i64 %v2_11618, i64* @rax, align 8
  %v1_11621 = trunc i64 %v2_11618 to i32
  %v12_11621 = icmp eq i32 %v1_11621, 43
  br i1 %v12_11621, label %dec_label_pc_11740, label %dec_label_pc_1162a

dec_label_pc_1162a:                               ; preds = %dec_label_pc_11611
  %v9_1162a = icmp sgt i32 %v1_11621, 43
  br i1 %v9_1162a, label %dec_label_pc_11630, label %dec_label_pc_117f8

dec_label_pc_11630:                               ; preds = %dec_label_pc_1162a
  %v11_11630 = icmp eq i32 %v1_11621, 45
  br i1 %v11_11630, label %dec_label_pc_11750, label %dec_label_pc_11639

dec_label_pc_11639:                               ; preds = %dec_label_pc_11630
  %v11_11639 = icmp eq i32 %v1_11621, 63
  %v1_1163c = icmp eq i1 %v11_11639, false
  br i1 %v1_1163c, label %dec_label_pc_11740, label %dec_label_pc_11642

dec_label_pc_11642:                               ; preds = %dec_label_pc_11639
  %v1_11642 = add i64 %v0_117d5, 1
  store i64 %v1_11642, i64* @rbp, align 8
  br label %dec_label_pc_114f6

dec_label_pc_11650:                               ; preds = %dec_label_pc_1150b
  %v3_11650 = load i64, i64* %v2_1150b, align 8
  store i64 %v3_11650, i64* @rdi, align 8
  %v1_11654 = add i64 %v0_11654, 1
  store i64 %v1_11654, i64* %r13.global-to-local, align 8
  %v1_11658 = inttoptr i64 %v3_11650 to i64*
  %v2_11658 = load i64, i64* %v1_11658, align 8
  store i64 %v2_11658, i64* @rax, align 8
  %v1_11661 = trunc i64 %v1_11654 to i32
  %v3_11661 = trunc i64 %v2_11658 to i32
  %v14_11661 = icmp eq i32 %v1_11661, %v3_11661
  br i1 %v14_11661, label %bb312, label %dec_label_pc_1166a

bb312:                                            ; preds = %dec_label_pc_11650
  %v1_11664 = call i64 @function_118e6()
  store i64 %v1_11664, i64* @rax, align 8
  %v0_1166a.pre = load i64, i64* @rbx, align 8
  %v0_1166e.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_1166a

dec_label_pc_1166a:                               ; preds = %bb312, %dec_label_pc_11650
  %v0_1182c = phi i64 [ %v0_1166e.pre, %bb312 ], [ %v1_11654, %dec_label_pc_11650 ]
  %v0_11781 = phi i64 [ %v0_1166a.pre, %bb312 ], [ %v0_11650, %dec_label_pc_11650 ]
  %v1_1166a = add i64 %v0_11781, 16
  %v2_1166a = inttoptr i64 %v1_1166a to i64*
  %v3_1166a = load i64, i64* %v2_1166a, align 8
  store i64 %v3_1166a, i64* @rdi, align 8
  store i64 %v0_1182c, i64* %rsi.global-to-local, align 8
  %v1_11671 = inttoptr i64 %v3_1166a to i64*
  %v2_11671 = load i64, i64* %v1_11671, align 8
  store i64 %v2_11671, i64* @rax, align 8
  %v1_1167a = trunc i64 %v2_11671 to i32
  %v11_1167a = icmp eq i32 %v1_1167a, 98
  br i1 %v11_1167a, label %dec_label_pc_11778, label %dec_label_pc_11683

dec_label_pc_11683:                               ; preds = %dec_label_pc_1166a
  %v11_11683 = icmp eq i32 %v1_1167a, 102
  %v1_11686 = icmp eq i1 %v11_11683, false
  %v3_11828 = load i64, i64* %v2_1166a, align 8
  store i64 %v3_11828, i64* @rdi, align 8
  br i1 %v1_11686, label %dec_label_pc_11828, label %dec_label_pc_1168c

dec_label_pc_1168c:                               ; preds = %dec_label_pc_11683
  %v0_11690 = load i64, i64* @rbp, align 8
  %v1_11690 = add i64 %v0_11690, 2
  store i64 %v1_11690, i64* %r13.global-to-local, align 8
  %v1_11694 = inttoptr i64 %v3_11828 to i64*
  %v2_11694 = load i64, i64* %v1_11694, align 8
  store i64 %v2_11694, i64* @rax, align 8
  %v1_1169d = trunc i64 %v1_11690 to i32
  %v3_1169d = trunc i64 %v2_11694 to i32
  %v14_1169d = icmp eq i32 %v1_1169d, %v3_1169d
  br i1 %v14_1169d, label %bb315, label %dec_label_pc_116a6

bb315:                                            ; preds = %dec_label_pc_1168c
  %v1_116a0 = call i64 @function_118da()
  store i64 %v1_116a0, i64* @rax, align 8
  %v0_116a6.pre = load i64, i64* @rbx, align 8
  %v0_116aa.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_116a6

dec_label_pc_116a6:                               ; preds = %bb315, %dec_label_pc_1168c
  %v0_116aa = phi i64 [ %v0_116aa.pre, %bb315 ], [ %v1_11690, %dec_label_pc_1168c ]
  %v0_116a6 = phi i64 [ %v0_116a6.pre, %bb315 ], [ %v0_11781, %dec_label_pc_1168c ]
  %v1_116a6 = add i64 %v0_116a6, 16
  %v2_116a6 = inttoptr i64 %v1_116a6 to i64*
  %v3_116a6 = load i64, i64* %v2_116a6, align 8
  store i64 %v3_116a6, i64* @rdi, align 8
  store i64 %v0_116aa, i64* %rsi.global-to-local, align 8
  %v1_116ad = inttoptr i64 %v3_116a6 to i64*
  %v2_116ad = load i64, i64* %v1_116ad, align 8
  store i64 %v2_116ad, i64* @rax, align 8
  %v1_116b6 = trunc i64 %v2_116ad to i32
  %v11_116b6 = icmp eq i32 %v1_116b6, 91
  %v1_116b9 = icmp eq i1 %v11_116b6, false
  br i1 %v1_116b9, label %bb317, label %dec_label_pc_116bf

bb317:                                            ; preds = %dec_label_pc_116a6
  %v2_116b9 = call i64 @function_118da()
  store i64 %v2_116b9, i64* @rax, align 8
  %v2_116bf.pre = load i64, i64* @rdi, align 8
  %v0_116c2.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_116c5.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_116bf

dec_label_pc_116bf:                               ; preds = %bb317, %dec_label_pc_116a6
  %v0_116c5 = phi i64 [ %v0_116c5.pre, %bb317 ], [ %v0_116a6, %dec_label_pc_116a6 ]
  %v0_116c2 = phi i64 [ %v0_116c2.pre, %bb317 ], [ %v0_116aa, %dec_label_pc_116a6 ]
  %v2_116bf = phi i64 [ %v2_116bf.pre, %bb317 ], [ %v3_116a6, %dec_label_pc_116a6 ]
  store i64 %v2_116bf, i64* @rax, align 8
  store i64 %v0_116c2, i64* %rsi.global-to-local, align 8
  store i64 %v0_116c5, i64* @rdi, align 8
  store i64 0, i64* @r14, align 8
  %v0_116ce = load i64, i64* @r12, align 8
  %v4_116ce = trunc i64 %v0_116ce to i32
  %v5_116ce = icmp eq i32 %v4_116ce, 0
  store i64 %v2_116bf, i64* @rbp, align 8
  %v1_116d3 = icmp eq i1 %v5_116ce, false
  br i1 %v1_116d3, label %bb318, label %dec_label_pc_116d9

bb318:                                            ; preds = %dec_label_pc_116bf
  %v2_116d3 = call i64 @function_118c0()
  store i64 %v2_116d3, i64* @rax, align 8
  %v0_116d9.pre = load i64, i64* @rbx, align 8
  %v0_116e9.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_116d9

dec_label_pc_116d9:                               ; preds = %bb318, %dec_label_pc_116bf
  %v0_116f2 = phi i64 [ %v0_116e9.pre, %bb318 ], [ %v0_116ce, %dec_label_pc_116bf ]
  %v0_1172e = phi i64 [ %v0_116d9.pre, %bb318 ], [ %v0_116c5, %dec_label_pc_116bf ]
  %v1_116d9 = add i64 %v0_1172e, 8
  %v2_116d9 = inttoptr i64 %v1_116d9 to i64*
  %v3_116d9 = load i64, i64* %v2_116d9, align 8
  store i64 %v3_116d9, i64* @rdi, align 8
  %v1_116dd = inttoptr i64 %v3_116d9 to i64*
  %v2_116dd = load i64, i64* %v1_116dd, align 8
  store i64 %v2_116dd, i64* @rax, align 8
  %v1_116e9 = trunc i64 %v0_116f2 to i32
  %v3_116e9 = trunc i64 %v2_116dd to i32
  %v14_116e9 = icmp eq i32 %v1_116e9, %v3_116e9
  br i1 %v14_116e9, label %dec_label_pc_11701, label %dec_label_pc_116ee

dec_label_pc_116ee:                               ; preds = %dec_label_pc_116d9
  %v3_116ee = load i64, i64* %v2_116d9, align 8
  store i64 %v3_116ee, i64* @rdi, align 8
  store i64 %v0_116f2, i64* %rsi.global-to-local, align 8
  %v1_116f5 = inttoptr i64 %v3_116ee to i64*
  %v2_116f5 = load i64, i64* %v1_116f5, align 8
  store i64 %v2_116f5, i64* @rax, align 8
  br label %dec_label_pc_11701

dec_label_pc_11701:                               ; preds = %dec_label_pc_116ee, %dec_label_pc_116d9
  %v0_11708 = phi i64 [ %v2_116f5, %dec_label_pc_116ee ], [ 0, %dec_label_pc_116d9 ]
  %v2_11701 = phi i64 [ %v3_116ee, %dec_label_pc_116ee ], [ %v3_116d9, %dec_label_pc_116d9 ]
  store i64 %v2_11701, i64* @rax, align 8
  %v0_11704 = load i64, i64* @rbp, align 8
  %v1_11704 = add i64 %v0_11704, -1
  store i64 %v1_11704, i64* %r15.global-to-local, align 8
  %v0_1170d = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_1170d, i64* @rdx, align 8
  %v0_11710 = load i64, i64* @r14, align 8
  store i64 %v0_11710, i64* %rsi.global-to-local, align 8
  store i64 %v0_1172e, i64* @rdi, align 8
  store i64 %v1_11704, i64* @rcx, align 8
  %v4_1171c = trunc i64 %v2_11701 to i8
  %v5_1171c = icmp eq i8 %v4_1171c, 0
  %v1_1171e = icmp eq i1 %v5_1171c, false
  br i1 %v1_1171e, label %dec_label_pc_11740, label %dec_label_pc_11720

dec_label_pc_11720:                               ; preds = %dec_label_pc_11701
  %v4_11720 = and i64 %v0_11708, 4294967295
  store i64 %v0_1172e, i64* @rax, align 8
  store i64 %v1_11704, i64* @rcx, align 8
  store i64 %v0_1170d, i64* @rdx, align 8
  store i64 %v0_1172e, i64* @rdi, align 8
  store i64 %v4_11720, i64* %rsi.global-to-local, align 8
  %v4_11737 = trunc i64 %v0_1172e to i8
  %v5_11737 = icmp eq i8 %v4_11737, 0
  %v1_11739 = icmp eq i1 %v5_11737, false
  br i1 %v1_11739, label %dec_label_pc_114f6, label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %dec_label_pc_11720, %dec_label_pc_115fb, %dec_label_pc_117de, %dec_label_pc_11778, %dec_label_pc_11701, %dec_label_pc_11639, %dec_label_pc_11611, %dec_label_pc_117f8
  store i64 4294967295, i64* @rax, align 8
  br label %dec_label_pc_11549

dec_label_pc_11750:                               ; preds = %dec_label_pc_11630
  store i64 %v3_11611, i64* @rax, align 8
  store i64 %v0_117d5, i64* @rcx, align 8
  store i64 %v0_117b6, i64* @rdx, align 8
  store i64 %v0_115f2, i64* %rsi.global-to-local, align 8
  store i64 %v0_117ba, i64* @rdi, align 8
  %v2_11768 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_11768, i64* @rbx, align 8
  store i64 %v0_114eb, i64* %rbp.global-to-local, align 8
  store i64 %v0_114e6, i64* %r12.global-to-local, align 8
  store i64 %v0_114e4, i64* %r13.global-to-local, align 8
  store i64 %v0_114e2, i64* %r14.global-to-local, align 8
  store i64 %v0_114e0, i64* %r15.global-to-local, align 8
  ret i64 %v3_11611

dec_label_pc_11778:                               ; preds = %dec_label_pc_1166a
  store i64 %v3_1166a, i64* @rax, align 8
  %v0_1177b = load i64, i64* @r12, align 8
  store i64 %v0_1177b, i64* %rsi.global-to-local, align 8
  %v0_1177e = load i64, i64* @rbp, align 8
  %v1_1177e = add i64 %v0_1177e, 2
  store i64 %v1_1177e, i64* @rdx, align 8
  store i64 %v0_11781, i64* @rdi, align 8
  %v1_1178a = trunc i64 %v3_1166a to i32
  %v11_1178a = icmp eq i32 %v1_1178a, -1
  store i64 %v3_1166a, i64* @r12, align 8
  br i1 %v11_1178a, label %dec_label_pc_11740, label %dec_label_pc_11792

dec_label_pc_11792:                               ; preds = %dec_label_pc_11778
  %v2_11792 = add i64 %v0_1177e, 4
  %v17_11792 = and i64 %v2_11792, 4294967295
  store i64 %v17_11792, i64* @rbp, align 8
  br label %dec_label_pc_114f6

dec_label_pc_117a0:                               ; preds = %dec_label_pc_115d7
  %v3_117a0 = load i64, i64* %v2_115e2, align 8
  store i64 %v3_117a0, i64* @rdi, align 8
  store i64 %v0_115f2, i64* %rsi.global-to-local, align 8
  %v1_117a7 = inttoptr i64 %v3_117a0 to i64*
  %v2_117a7 = load i64, i64* %v1_117a7, align 8
  store i64 %v2_117a7, i64* @rax, align 8
  store i64 %v0_117d5, i64* @rcx, align 8
  store i64 %v0_117b6, i64* @rdx, align 8
  store i64 %v2_117a7, i64* %rsi.global-to-local, align 8
  store i64 %v0_117ba, i64* @rdi, align 8
  %v1_117c1 = add i64 %v0_117ba, 16
  %v2_117c1 = inttoptr i64 %v1_117c1 to i64*
  %v3_117c1 = load i64, i64* %v2_117c1, align 8
  store i64 %v3_117c1, i64* @rdi, align 8
  store i64 %v2_117a7, i64* %r14.global-to-local, align 8
  store i64 %v2_117a7, i64* @r15, align 8
  %v1_117cc = inttoptr i64 %v3_117c1 to i64*
  %v2_117cc = load i64, i64* %v1_117cc, align 8
  store i64 %v2_117cc, i64* @rax, align 8
  %v5_117d8 = icmp slt i64 %v0_117d5, %v2_117cc
  br i1 %v5_117d8, label %bb321, label %dec_label_pc_117de

bb321:                                            ; preds = %dec_label_pc_117a0
  %v12_117d8 = call i64 @function_118f2(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v12_117d8, i64* @rax, align 8
  %v0_117de.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_117de

dec_label_pc_117de:                               ; preds = %bb321, %dec_label_pc_117a0
  %v0_117de = phi i64 [ %v0_117de.pre, %bb321 ], [ %v2_117a7, %dec_label_pc_117a0 ]
  %v4_117de = trunc i64 %v0_117de to i8
  %v5_117de = icmp eq i8 %v4_117de, 0
  br i1 %v5_117de, label %dec_label_pc_11740, label %dec_label_pc_117e7

dec_label_pc_117e7:                               ; preds = %dec_label_pc_117de
  %v0_117e7 = load i64, i64* @r12, align 8
  %v2_117e7 = add i64 %v0_117e7, 1
  %v17_117e7 = and i64 %v2_117e7, 4294967295
  store i64 %v17_117e7, i64* @r12, align 8
  %v0_117eb = load i64, i64* @r13, align 8
  store i64 %v0_117eb, i64* @rbp, align 8
  %v0_114f6.pre.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_114f6

dec_label_pc_117f8:                               ; preds = %dec_label_pc_1162a
  %v11_117f8 = icmp eq i32 %v1_11621, 42
  %v1_117fb = icmp eq i1 %v11_117f8, false
  br i1 %v1_117fb, label %dec_label_pc_11740, label %dec_label_pc_11801

dec_label_pc_11801:                               ; preds = %dec_label_pc_117f8
  store i64 %v3_11611, i64* @rax, align 8
  store i64 %v0_117d5, i64* @rcx, align 8
  store i64 %v0_117b6, i64* @rdx, align 8
  store i64 %v0_115f2, i64* %rsi.global-to-local, align 8
  store i64 %v0_117ba, i64* @rdi, align 8
  %v2_11816 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_11816, i64* @rbx, align 8
  store i64 %v0_114eb, i64* %rbp.global-to-local, align 8
  store i64 %v0_114e6, i64* %r12.global-to-local, align 8
  store i64 %v0_114e4, i64* %r13.global-to-local, align 8
  store i64 %v0_114e2, i64* %r14.global-to-local, align 8
  store i64 %v0_114e0, i64* %r15.global-to-local, align 8
  ret i64 %v3_11611

dec_label_pc_11828:                               ; preds = %dec_label_pc_11683
  store i64 %v0_1182c, i64* %rsi.global-to-local, align 8
  %v1_1182f = inttoptr i64 %v3_11828 to i64*
  %v2_1182f = load i64, i64* %v1_1182f, align 8
  store i64 %v2_1182f, i64* @rax, align 8
  store i64 %v2_1182f, i64* @rdi, align 8
  store i64 %v2_1182f, i64* %r14.global-to-local, align 8
  ret i64 %v2_1182f
}

define i64 @function_11880() local_unnamed_addr {
dec_label_pc_11880:
  %v2_11880 = load i64, i64* @rbx, align 8
  store i64 %v2_11880, i64* @rax, align 8
  %v0_11883 = load i64, i64* @rbp, align 8
  %v1_11883 = add i64 %v0_11883, 2
  store i64 %v1_11883, i64* @rdx, align 8
  store i64 4294967294, i64* @rcx, align 8
  store i64 %v2_11880, i64* @rdi, align 8
  ret i64 %v2_11880
}

define i64 @function_1189c() local_unnamed_addr {
dec_label_pc_1189c:
  %v0_1189c = load i64, i64* @rbx, align 8
  %v1_1189c = add i64 %v0_1189c, 8
  %v2_1189c = inttoptr i64 %v1_1189c to i64*
  %v3_1189c = load i64, i64* %v2_1189c, align 8
  store i64 %v3_1189c, i64* @rdi, align 8
  %v1_118a0 = inttoptr i64 %v3_1189c to i64*
  %v2_118a0 = load i64, i64* %v1_118a0, align 8
  store i64 %v2_118a0, i64* @rax, align 8
  ret i64 %v2_118a0
}

define i64 @function_118b8() local_unnamed_addr {
dec_label_pc_118b8:
  %v0_118b8 = load i64, i64* @r12, align 8
  store i64 %v0_118b8, i64* @rax, align 8
  ret i64 %v0_118b8
}

define i64 @function_118c0() local_unnamed_addr {
dec_label_pc_118c0:
  %v0_118c0 = load i64, i64* @rbx, align 8
  %v1_118c0 = add i64 %v0_118c0, 8
  %v2_118c0 = inttoptr i64 %v1_118c0 to i64*
  %v3_118c0 = load i64, i64* %v2_118c0, align 8
  store i64 %v3_118c0, i64* @rdi, align 8
  %v1_118c9 = inttoptr i64 %v3_118c0 to i64*
  %v2_118c9 = load i64, i64* %v1_118c9, align 8
  store i64 %v2_118c9, i64* @rax, align 8
  store i64 %v2_118c9, i64* @r14, align 8
  ret i64 %v2_118c9
}

define i64 @function_118da() local_unnamed_addr {
dec_label_pc_118da:
  %v0_118da = load i64, i64* inttoptr (i64 71905 to i64*), align 8
  store i64 %v0_118da, i64* @rdi, align 8
  %v0_118e1 = load i64, i64* @rax, align 8
  ret i64 %v0_118e1
}

define i64 @function_118e6() local_unnamed_addr {
dec_label_pc_118e6:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_118f2(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_118f2:
  %v0_118f2 = load i64, i64* @rbx, align 8
  %v1_118f2 = add i64 %v0_118f2, 16
  %v2_118f2 = inttoptr i64 %v1_118f2 to i64*
  %v3_118f2 = load i64, i64* %v2_118f2, align 8
  store i64 %v3_118f2, i64* @rdi, align 8
  %v0_118f6 = load i64, i64* @r13, align 8
  %v1_118f9 = inttoptr i64 %v3_118f2 to i64*
  %v2_118f9 = load i64, i64* %v1_118f9, align 8
  store i64 %v2_118f9, i64* @rax, align 8
  %v1_11902 = trunc i64 %v2_118f9 to i32
  %v12_11902 = icmp eq i32 %v1_11902, 43
  br i1 %v12_11902, label %dec_label_pc_11950, label %dec_label_pc_11907

dec_label_pc_11907:                               ; preds = %dec_label_pc_118f2
  %v9_11907 = icmp sgt i32 %v1_11902, 43
  br i1 %v9_11907, label %dec_label_pc_11909, label %dec_label_pc_1197b

dec_label_pc_11909:                               ; preds = %dec_label_pc_11907
  store i64 %v0_118f2, i64* @rax, align 8
  %v1_11927 = add i64 %v0_118f6, 1
  store i64 %v0_118f2, i64* @rdi, align 8
  store i64 %v1_11927, i64* @rdx, align 8
  ret i64 %v0_118f2

dec_label_pc_11950:                               ; preds = %dec_label_pc_118f2
  store i64 %v0_118f2, i64* @rax, align 8
  store i64 %v0_118f6, i64* @rcx, align 8
  %v0_11964 = load i64, i64* @rbp, align 8
  store i64 %v0_11964, i64* @rdx, align 8
  store i64 %v0_118f2, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg4, i64* @r13, align 8
  store i64 %arg6, i64* @r15, align 8
  ret i64 %v0_118f2

dec_label_pc_1197b:                               ; preds = %dec_label_pc_11907
  ret i64 %v2_118f9
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$FormatDescC1EPNS2_9StringLibEPNS1_7VarargsEPNS1_9LuaStringEi"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_11990:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_119a0 = load i64, i64* @rdi, align 8
  store i64 %v0_119a0, i64* @rbx, align 8
  %v0_119a7 = load i64, i64* %rsi.global-to-local, align 8
  %v2_119a7 = add i64 %v0_119a0, 40
  %v3_119a7 = inttoptr i64 %v2_119a7 to i64*
  store i64 %v0_119a7, i64* %v3_119a7, align 8
  %v6_119ab = load i64, i64* @rax, align 8
  ret i64 %v6_119ab
}

define i64 @function_11a50(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a50:
  store i64 %arg1, i64* @rdi, align 8
  %v0_11a54 = load i64, i64* @rbx, align 8
  %v1_11a54 = add i64 %v0_11a54, 16
  %v2_11a54 = inttoptr i64 %v1_11a54 to i32*
  store i32 -48, i32* %v2_11a54, align 4
  store i64 0, i64* @rdi, align 8
  %v12_11a5b = load i64, i64* @rax, align 8
  ret i64 %v12_11a5b
}

define i64 @function_11a80(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a80:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %v2_11a88 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_11a88, i64* @rdi, align 8
  store i64 %v2_11a88, i64* %r12.global-to-local, align 8
  %v1_11a9f = add i64 %v2_11a88, -32
  store i64 %v1_11a9f, i64* @rax, align 8
  %v1_11aa2 = trunc i64 %v1_11a9f to i32
  %tmp241 = icmp ult i32 %v1_11aa2, 17
  br i1 %tmp241, label %dec_label_pc_11aa7, label %dec_label_pc_11ad0

dec_label_pc_11aa7:                               ; preds = %dec_label_pc_11a80
  store i64 72366, i64* @rcx, align 8
  %v2_11aae = mul i64 %v1_11a9f, 4
  %v3_11aae = add i64 %v2_11aae, 72366
  %v4_11aae = inttoptr i64 %v3_11aae to i32*
  %v5_11aae = load i32, i32* %v4_11aae, align 4
  %v6_11aae = sext i32 %v5_11aae to i64
  %v2_11ab2 = add nsw i64 %v6_11aae, 72366
  store i64 %v2_11ab2, i64* @rax, align 8
  ret i64 %v2_11ab2

dec_label_pc_11ad0:                               ; preds = %dec_label_pc_11a80
  store i64 1, i64* @rax, align 8
  br i1 false, label %bb, label %dec_label_pc_11adf

bb:                                               ; preds = %dec_label_pc_11ad0
  br label %dec_label_pc_11adf

dec_label_pc_11adf:                               ; preds = %bb, %dec_label_pc_11ad0
  %v0_11adf = load i64, i64* @rbx, align 8
  %v1_11adf = add i64 %v0_11adf, 16
  %v2_11adf = inttoptr i64 %v1_11adf to i32*
  store i32 -1, i32* %v2_11adf, align 4
  %v0_11ae6 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_11ae6, i64* @rdi, align 8
  %v1_11ae6 = load i64, i64* @rax, align 8
  ret i64 %v1_11ae6
}

define i64 @function_11b5f(i64 %arg1) local_unnamed_addr {
dec_label_pc_11b5f:
  store i64 %arg1, i64* @rdi, align 8
  %v0_11b63 = load i64, i64* @rbx, align 8
  %v1_11b63 = add i64 %v0_11b63, 20
  %v2_11b63 = inttoptr i64 %v1_11b63 to i32*
  store i32 -1, i32* %v2_11b63, align 4
  %v0_11b70 = load i64, i64* @rbp, align 8
  %v2_11b70 = load i64, i64* @r14, align 8
  %v5_11b73 = icmp slt i64 %v0_11b70, %v2_11b70
  br i1 %v5_11b73, label %bb, label %dec_label_pc_11b5f.dec_label_pc_11b79_crit_edge

dec_label_pc_11b5f.dec_label_pc_11b79_crit_edge:  ; preds = %dec_label_pc_11b5f
  %v12_11b79.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_11b79

bb:                                               ; preds = %dec_label_pc_11b5f
  %v6_11b73 = call i64 @function_11c60()
  store i64 %v6_11b73, i64* @rax, align 8
  br label %dec_label_pc_11b79

dec_label_pc_11b79:                               ; preds = %dec_label_pc_11b5f.dec_label_pc_11b79_crit_edge, %bb
  %v12_11b79 = phi i64 [ %v12_11b79.pre, %dec_label_pc_11b5f.dec_label_pc_11b79_crit_edge ], [ %v6_11b73, %bb ]
  store i64 0, i64* @rdi, align 8
  ret i64 %v12_11b79
}

define i64 @function_11b9d() local_unnamed_addr {
dec_label_pc_11b9d:
  %v0_11ba0 = load i64, i64* @rax, align 8
  ret i64 %v0_11ba0
}

define i64 @function_11ba8() local_unnamed_addr {
dec_label_pc_11ba8:
  %v0_11ba8 = load i64, i64* @rbx, align 8
  %v1_11ba8 = add i64 %v0_11ba8, 9
  %v2_11ba8 = inttoptr i64 %v1_11ba8 to i8*
  store i8 1, i8* %v2_11ba8, align 1
  %v0_11bac = load i64, i64* @rax, align 8
  ret i64 %v0_11bac
}

define i64 @function_11bb8() local_unnamed_addr {
dec_label_pc_11bb8:
  %v0_11bb8 = load i64, i64* @rbx, align 8
  %v1_11bb8 = add i64 %v0_11bb8, 12
  %v2_11bb8 = inttoptr i64 %v1_11bb8 to i8*
  store i8 1, i8* %v2_11bb8, align 1
  %v0_11bbc = load i64, i64* @rax, align 8
  ret i64 %v0_11bbc
}

define i64 @function_11bc8() local_unnamed_addr {
dec_label_pc_11bc8:
  %v0_11bc8 = load i64, i64* @rbx, align 8
  %v1_11bc8 = add i64 %v0_11bc8, 10
  %v2_11bc8 = inttoptr i64 %v1_11bc8 to i8*
  store i8 1, i8* %v2_11bc8, align 1
  %v0_11bcc = load i64, i64* @rax, align 8
  ret i64 %v0_11bcc
}

define i64 @function_11bd8() local_unnamed_addr {
dec_label_pc_11bd8:
  %v0_11bd8 = load i64, i64* @rbx, align 8
  %v1_11bd8 = add i64 %v0_11bd8, 16
  %v2_11bd8 = inttoptr i64 %v1_11bd8 to i32*
  %v3_11bd8 = load i32, i32* %v2_11bd8, align 4
  %v4_11bd8 = zext i32 %v3_11bd8 to i64
  store i64 %v4_11bd8, i64* @rax, align 8
  %v1_11bdb = add i64 %v0_11bd8, 20
  %v2_11bdb = inttoptr i64 %v1_11bdb to i32*
  store i32 -1, i32* %v2_11bdb, align 4
  %v0_11be8 = load i64, i64* @rax, align 8
  %factor = mul i64 %v0_11be8, 10
  %v4_11beb = add i64 %factor, -48
  store i64 %v4_11beb, i64* @rax, align 8
  %v1_11bef = trunc i64 %v4_11beb to i32
  %v2_11bef = load i64, i64* @rbx, align 8
  %v3_11bef = add i64 %v2_11bef, 16
  %v4_11bef = inttoptr i64 %v3_11bef to i32*
  store i32 %v1_11bef, i32* %v4_11bef, align 4
  %v0_11bf2 = load i64, i64* @rax, align 8
  ret i64 %v0_11bf2
}

define i64 @function_11c00() local_unnamed_addr {
dec_label_pc_11c00:
  %v0_11c00 = load i64, i64* @rbx, align 8
  %v1_11c00 = add i64 %v0_11c00, 20
  %v2_11c00 = inttoptr i64 %v1_11c00 to i32*
  store i32 -48, i32* %v2_11c00, align 4
  store i64 0, i64* @rdi, align 8
  %v1_11c0d = load i64, i64* @rax, align 8
  ret i64 %v1_11c0d
}

define i64 @function_11c60() local_unnamed_addr {
dec_label_pc_11c60:
  %v2_11c60 = load i64, i64* @r13, align 8
  store i64 %v2_11c60, i64* @rax, align 8
  %v0_11c64 = load i64, i64* @rbp, align 8
  %v1_11c64 = add i64 %v0_11c64, 1
  store i64 %v1_11c64, i64* @rdx, align 8
  store i64 %v2_11c60, i64* @rdi, align 8
  ret i64 %v2_11c60
}

define i64 @function_11cb8(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_11cb8:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg3, i64* @rbp, align 8
  %v1_11cba = call i64 @function_11b5f(i64 %arg1)
  store i64 %v1_11cba, i64* @rax, align 8
  ret i64 %v1_11cba
}

define i64 @function_11cbf(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_11cbf:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_11cc1 = load i64, i64* @rax, align 8
  ret i64 %v0_11cc1
}

define i64 @function_11cc6(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_11cc6:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_11cce = load i64, i64* @rax, align 8
  ret i64 %v0_11cce
}

define i64 @function_11cd3(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_11cd3:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_11cd5 = load i64, i64* @rax, align 8
  ret i64 %v0_11cd5
}

define i64 @function_11cda() local_unnamed_addr {
dec_label_pc_11cda:
  %v0_11cda = load i64, i64* inttoptr (i64 72929 to i64*), align 8
  store i64 %v0_11cda, i64* @rdi, align 8
  %v0_11ce1 = load i64, i64* @rax, align 8
  ret i64 %v0_11ce1
}

define i64 @function_11ce6() local_unnamed_addr {
dec_label_pc_11ce6:
  %v0_11ce6 = load i64, i64* inttoptr (i64 72941 to i64*), align 8
  store i64 %v0_11ce6, i64* @rdi, align 8
  %v0_11cf6 = load i64, i64* @rax, align 8
  ret i64 %v0_11cf6
}

define i64 @_ZN3org4luaj3vm25Print11printStringEJvPN4java2io11PrintStreamEPNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11d00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 72978, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_11f65() local_unnamed_addr {
dec_label_pc_11f65:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_11f6c() local_unnamed_addr {
dec_label_pc_11f6c:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm210LuaInteger9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_11f80:
  store i64 %arg1, i64* @rdi, align 8
  %v0_11f84 = load i64, i64* @rdi, align 8
  %v1_11f84 = add i64 %v0_11f84, 8
  %v2_11f84 = inttoptr i64 %v1_11f84 to i32*
  %v3_11f84 = load i32, i32* %v2_11f84, align 4
  %v4_11f84 = zext i32 %v3_11f84 to i64
  store i64 %v4_11f84, i64* @rdi, align 8
  %v5_11f84 = load i64, i64* @rax, align 8
  ret i64 %v5_11f84
}

define i64 @_ZN3org4luaj3vm210LuaInteger10optjstringEJPN4java4lang6StringES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_11fa0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_11fa4 = load i64, i64* @rdi, align 8
  %v1_11fa4 = add i64 %v0_11fa4, 8
  %v2_11fa4 = inttoptr i64 %v1_11fa4 to i32*
  %v3_11fa4 = load i32, i32* %v2_11fa4, align 4
  %v4_11fa4 = zext i32 %v3_11fa4 to i64
  store i64 %v4_11fa4, i64* @rdi, align 8
  %v5_11fa4 = load i64, i64* @rax, align 8
  ret i64 %v5_11fa4
}

define i64 @_ZN3org4luaj3vm23lib9StringLib6formatEJPN4java4lang6StringES7_d() local_unnamed_addr {
dec_label_pc_11fc0:
  %v17_11fc0 = load i64, i64* @rax, align 8
  ret i64 %v17_11fc0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState11match_classEJbii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11fd0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 73696, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState17matchbracketclassEJbiii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_12130:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12130 = load i64, i64* %r15.global-to-local, align 8
  %v0_12132 = load i64, i64* %r14.global-to-local, align 8
  %v0_12134 = load i64, i64* @rdi, align 8
  store i64 %v0_12134, i64* %r15.global-to-local, align 8
  %v0_12137 = load i64, i64* %r13.global-to-local, align 8
  %v0_12139 = load i64, i64* %r12.global-to-local, align 8
  %v0_1213b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1213b, i64* %r14.global-to-local, align 8
  %v0_1213e = load i64, i64* %rbp.global-to-local, align 8
  %v0_1213f = load i64, i64* @rbx, align 8
  %v0_12140 = load i64, i64* @rdx, align 8
  %v1_12140 = add i64 %v0_12140, 1
  store i64 %v1_12140, i64* @rbx, align 8
  store i64 %v0_12140, i64* %rbp.global-to-local, align 8
  %v0_12145 = load i64, i64* @rcx, align 8
  store i64 %v0_12145, i64* %r13.global-to-local, align 8
  %v1_1214c = add i64 %v0_12134, 16
  %v2_1214c = inttoptr i64 %v1_1214c to i64*
  %v3_1214c = load i64, i64* %v2_1214c, align 8
  store i64 %v3_1214c, i64* @rdi, align 8
  store i64 %v1_12140, i64* %rsi.global-to-local, align 8
  %v1_12152 = inttoptr i64 %v3_1214c to i64*
  %v2_12152 = load i64, i64* %v1_12152, align 8
  store i64 %v2_12152, i64* @rax, align 8
  %v1_1215b = trunc i64 %v2_12152 to i32
  %v11_1215b = icmp eq i32 %v1_1215b, 94
  %v1_12166 = icmp eq i1 %v11_1215b, false
  br i1 %v1_12166, label %dec_label_pc_121a9.preheader, label %dec_label_pc_12260

dec_label_pc_121a9.preheader:                     ; preds = %dec_label_pc_12130, %dec_label_pc_12260
  %v0_1217424 = phi i64 [ %v1_12140, %dec_label_pc_12260 ], [ %v0_12140, %dec_label_pc_12130 ]
  %v0_121a917 = phi i64 [ %v17_1226a, %dec_label_pc_12260 ], [ %v1_12140, %dec_label_pc_12130 ]
  %stack_var_-60.0.ph = phi i32 [ 0, %dec_label_pc_12260 ], [ 1, %dec_label_pc_12130 ]
  store i64 %v0_121a917, i64* %r12.global-to-local, align 8
  %v5_121af282 = icmp slt i64 %v0_121a917, %v0_12145
  br i1 %v5_121af282, label %dec_label_pc_121b5.lr.ph, label %dec_label_pc_12240

dec_label_pc_121b5.lr.ph:                         ; preds = %dec_label_pc_121a9.preheader
  %v1_1219c = trunc i64 %v0_1213b to i32
  br label %dec_label_pc_121b5

dec_label_pc_12170:                               ; preds = %dec_label_pc_121b5
  store i64 %v1_12174, i64* %rsi.global-to-local, align 8
  %v1_12177 = inttoptr i64 %v3_12170 to i64*
  %v2_12177 = load i64, i64* %v1_12177, align 8
  store i64 %v2_12177, i64* @rax, align 8
  %v1_12180 = trunc i64 %v2_12177 to i32
  %v11_12180 = icmp eq i32 %v1_12180, 45
  %v1_12183 = icmp eq i1 %v11_12180, false
  br i1 %v1_12183, label %dec_label_pc_1218d, label %dec_label_pc_12185

dec_label_pc_12185:                               ; preds = %dec_label_pc_12170
  %v2_12185 = add i64 %v0_12185283, 3
  %v17_12185 = and i64 %v2_12185, 4294967295
  store i64 %v17_12185, i64* %rbp.global-to-local, align 8
  %v8_1218b = icmp sgt i64 %v0_12145, %v17_12185
  br i1 %v8_1218b, label %dec_label_pc_12208, label %dec_label_pc_1218d

dec_label_pc_1218d:                               ; preds = %dec_label_pc_12185, %dec_label_pc_12170
  %v3_1218d = load i64, i64* %v2_1214c, align 8
  store i64 %v3_1218d, i64* @rdi, align 8
  store i64 %v0_12191284, i64* %rsi.global-to-local, align 8
  %v1_12193 = inttoptr i64 %v3_1218d to i64*
  %v2_12193 = load i64, i64* %v1_12193, align 8
  store i64 %v2_12193, i64* @rax, align 8
  %v3_1219c = trunc i64 %v2_12193 to i32
  %v14_1219c = icmp eq i32 %v1_1219c, %v3_1219c
  br i1 %v14_1219c, label %dec_label_pc_121eb, label %dec_label_pc_121a1

dec_label_pc_121a1:                               ; preds = %dec_label_pc_1221f, %dec_label_pc_12208, %dec_label_pc_1218d, %dec_label_pc_121c9
  %v0_121a1 = phi i64 [ %v17_12185, %dec_label_pc_1221f ], [ %v17_12185, %dec_label_pc_12208 ], [ %v0_12191284, %dec_label_pc_1218d ], [ %v1_12174, %dec_label_pc_121c9 ]
  %v1_121a1 = add i64 %v0_121a1, 1
  store i64 %v1_121a1, i64* @rbx, align 8
  store i64 %v0_121a1, i64* %rbp.global-to-local, align 8
  store i64 %v1_121a1, i64* %r12.global-to-local, align 8
  %v5_121af = icmp slt i64 %v1_121a1, %v0_12145
  br i1 %v5_121af, label %dec_label_pc_121b5, label %dec_label_pc_12240

dec_label_pc_121b5:                               ; preds = %dec_label_pc_121b5.lr.ph, %dec_label_pc_121a1
  %v0_12191284 = phi i64 [ %v0_121a917, %dec_label_pc_121b5.lr.ph ], [ %v1_121a1, %dec_label_pc_121a1 ]
  %v0_12185283 = phi i64 [ %v0_1217424, %dec_label_pc_121b5.lr.ph ], [ %v0_121a1, %dec_label_pc_121a1 ]
  %v3_121b5 = load i64, i64* %v2_1214c, align 8
  store i64 %v3_121b5, i64* @rdi, align 8
  store i64 %v0_12191284, i64* %rsi.global-to-local, align 8
  %v1_121bb = inttoptr i64 %v3_121b5 to i64*
  %v2_121bb = load i64, i64* %v1_121bb, align 8
  store i64 %v2_121bb, i64* @rax, align 8
  %v1_121c4 = trunc i64 %v2_121bb to i32
  %v11_121c4 = icmp eq i32 %v1_121c4, 37
  %v1_121c7 = icmp eq i1 %v11_121c4, false
  %v3_12170 = load i64, i64* %v2_1214c, align 8
  store i64 %v3_12170, i64* @rdi, align 8
  %v1_12174 = add i64 %v0_12185283, 2
  br i1 %v1_121c7, label %dec_label_pc_12170, label %dec_label_pc_121c9

dec_label_pc_121c9:                               ; preds = %dec_label_pc_121b5
  store i64 %v1_12174, i64* %r12.global-to-local, align 8
  store i64 %v1_12174, i64* %rsi.global-to-local, align 8
  %v1_121d4 = inttoptr i64 %v3_12170 to i64*
  %v2_121d4 = load i64, i64* %v1_121d4, align 8
  store i64 %v2_121d4, i64* @rax, align 8
  store i64 %v0_1213b, i64* @rdi, align 8
  store i64 %v2_121d4, i64* %rsi.global-to-local, align 8
  %v4_121e7 = trunc i64 %v2_121d4 to i8
  %v5_121e7 = icmp eq i8 %v4_121e7, 0
  br i1 %v5_121e7, label %dec_label_pc_121a1, label %dec_label_pc_121eb

dec_label_pc_121eb:                               ; preds = %dec_label_pc_1221f, %dec_label_pc_1218d, %dec_label_pc_121c9
  %v4_121eb = zext i32 %stack_var_-60.0.ph to i64
  store i64 %v4_121eb, i64* @rax, align 8
  store i64 %v0_1213f, i64* @rbx, align 8
  store i64 %v0_1213e, i64* %rbp.global-to-local, align 8
  store i64 %v0_12139, i64* %r12.global-to-local, align 8
  store i64 %v0_12137, i64* %r13.global-to-local, align 8
  store i64 %v0_12132, i64* %r14.global-to-local, align 8
  store i64 %v0_12130, i64* %r15.global-to-local, align 8
  ret i64 %v4_121eb

dec_label_pc_12208:                               ; preds = %dec_label_pc_12185
  %v3_12208 = load i64, i64* %v2_1214c, align 8
  store i64 %v3_12208, i64* @rdi, align 8
  store i64 %v0_12191284, i64* %rsi.global-to-local, align 8
  store i64 %v17_12185, i64* %r12.global-to-local, align 8
  %v1_12211 = inttoptr i64 %v3_12208 to i64*
  %v2_12211 = load i64, i64* %v1_12211, align 8
  store i64 %v2_12211, i64* @rax, align 8
  %v8_1221d = icmp sgt i64 %v2_12211, %v0_1213b
  br i1 %v8_1221d, label %dec_label_pc_121a1, label %dec_label_pc_1221f

dec_label_pc_1221f:                               ; preds = %dec_label_pc_12208
  %v3_1221f = load i64, i64* %v2_1214c, align 8
  store i64 %v3_1221f, i64* @rdi, align 8
  store i64 %v17_12185, i64* %rsi.global-to-local, align 8
  %v1_12225 = inttoptr i64 %v3_1221f to i64*
  %v2_12225 = load i64, i64* %v1_12225, align 8
  store i64 %v2_12225, i64* @rax, align 8
  %v8_12231 = icmp sgt i64 %v0_1213b, %v2_12225
  br i1 %v8_12231, label %dec_label_pc_121a1, label %dec_label_pc_121eb

dec_label_pc_12240:                               ; preds = %dec_label_pc_121a1, %dec_label_pc_121a9.preheader
  %v2_12245 = xor i32 %stack_var_-60.0.ph, 1
  %v9_12245 = zext i32 %v2_12245 to i64
  store i64 %v9_12245, i64* @rax, align 8
  store i64 %v0_1213f, i64* @rbx, align 8
  store i64 %v0_1213e, i64* %rbp.global-to-local, align 8
  store i64 %v0_12139, i64* %r12.global-to-local, align 8
  store i64 %v0_12137, i64* %r13.global-to-local, align 8
  store i64 %v0_12132, i64* %r14.global-to-local, align 8
  store i64 %v0_12130, i64* %r15.global-to-local, align 8
  ret i64 %v9_12245

dec_label_pc_12260:                               ; preds = %dec_label_pc_12130
  store i64 %v1_12140, i64* %rbp.global-to-local, align 8
  %v2_1226a = add i64 %v0_12140, 2
  %v17_1226a = and i64 %v2_1226a, 4294967295
  store i64 %v17_1226a, i64* @rbx, align 8
  br label %dec_label_pc_121a9.preheader
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState11singlematchEJbiii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_12280:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12280 = load i64, i64* %r13.global-to-local, align 8
  %v0_12282 = load i64, i64* %r12.global-to-local, align 8
  %v0_12284 = load i64, i64* @rcx, align 8
  store i64 %v0_12284, i64* %r13.global-to-local, align 8
  %v0_12287 = load i64, i64* %rbp.global-to-local, align 8
  %v0_12288 = load i64, i64* @rbx, align 8
  %v0_12289 = load i64, i64* @rdi, align 8
  store i64 %v0_12289, i64* %rbp.global-to-local, align 8
  %v0_1228c = load i64, i64* @rdx, align 8
  store i64 %v0_1228c, i64* @rbx, align 8
  %v0_1228e = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1228e, i64* %r12.global-to-local, align 8
  store i64 %v0_1228c, i64* %rsi.global-to-local, align 8
  %v1_12297 = add i64 %v0_12289, 16
  %v2_12297 = inttoptr i64 %v1_12297 to i64*
  %v3_12297 = load i64, i64* %v2_12297, align 8
  store i64 %v3_12297, i64* @rdi, align 8
  %v1_1229b = inttoptr i64 %v3_12297 to i64*
  %v2_1229b = load i64, i64* %v1_1229b, align 8
  store i64 %v2_1229b, i64* @rdx, align 8
  store i64 1, i64* @rax, align 8
  %v1_122ab = trunc i64 %v2_1229b to i32
  %v11_122ab = icmp eq i32 %v1_122ab, 46
  br i1 %v11_122ab, label %dec_label_pc_122cf, label %dec_label_pc_122b0

dec_label_pc_122b0:                               ; preds = %dec_label_pc_12280
  %v11_122b0 = icmp eq i32 %v1_122ab, 91
  br i1 %v11_122b0, label %dec_label_pc_12300, label %dec_label_pc_122b5

dec_label_pc_122b5:                               ; preds = %dec_label_pc_122b0
  %v3_122b5 = load i64, i64* %v2_12297, align 8
  store i64 %v3_122b5, i64* @rdi, align 8
  %v11_122b9 = icmp eq i32 %v1_122ab, 37
  %v1_122bc = inttoptr i64 %v3_122b5 to i64*
  %v2_122bc = load i64, i64* %v1_122bc, align 8
  store i64 %v2_122bc, i64* @rax, align 8
  br i1 %v11_122b9, label %dec_label_pc_122e0, label %dec_label_pc_122c1

dec_label_pc_122c1:                               ; preds = %dec_label_pc_122b5
  store i64 %v0_1228c, i64* %rsi.global-to-local, align 8
  %v1_122c9 = trunc i64 %v0_1228e to i32
  %v3_122c9 = trunc i64 %v2_122bc to i32
  %v14_122c9 = icmp eq i32 %v1_122c9, %v3_122c9
  %v1_122cc = zext i1 %v14_122c9 to i64
  %v3_122cc = and i64 %v2_122bc, -256
  %v4_122cc = or i64 %v1_122cc, %v3_122cc
  store i64 %v4_122cc, i64* @rax, align 8
  br label %dec_label_pc_122cf

dec_label_pc_122cf:                               ; preds = %dec_label_pc_122c1, %dec_label_pc_12280
  %v0_122d9 = phi i64 [ %v4_122cc, %dec_label_pc_122c1 ], [ 1, %dec_label_pc_12280 ]
  store i64 %v0_12288, i64* @rbx, align 8
  store i64 %v0_12287, i64* %rbp.global-to-local, align 8
  store i64 %v0_12282, i64* %r12.global-to-local, align 8
  store i64 %v0_12280, i64* %r13.global-to-local, align 8
  ret i64 %v0_122d9

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122b5
  store i64 %v0_1228e, i64* @rdi, align 8
  store i64 %v2_122bc, i64* %rsi.global-to-local, align 8
  store i64 %v0_12288, i64* @rbx, align 8
  store i64 %v0_12287, i64* %rbp.global-to-local, align 8
  store i64 %v0_12282, i64* %r12.global-to-local, align 8
  store i64 %v0_12280, i64* %r13.global-to-local, align 8
  ret i64 %v2_122bc

dec_label_pc_12300:                               ; preds = %dec_label_pc_122b0
  store i64 %v3_12297, i64* @rax, align 8
  %v1_12304 = add i64 %v0_12284, -1
  store i64 %v1_12304, i64* @rcx, align 8
  store i64 %v0_1228c, i64* @rdx, align 8
  store i64 %v0_1228e, i64* %rsi.global-to-local, align 8
  store i64 %v0_12289, i64* @rdi, align 8
  store i64 %v0_12288, i64* @rbx, align 8
  store i64 %v0_12287, i64* %rbp.global-to-local, align 8
  store i64 %v0_12282, i64* %r12.global-to-local, align 8
  store i64 %v0_12280, i64* %r13.global-to-local, align 8
  ret i64 %v3_12297
}

define i64 @"_ZN3org4luaj3vm23lib25BaseLib$StringInputStreamC1EPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12320:
  store i64 %arg1, i64* @rdi, align 8
  %v0_12325 = load i64, i64* @rdi, align 8
  store i64 %v0_12325, i64* @rbx, align 8
  %v17_12328 = load i64, i64* @rax, align 8
  ret i64 %v17_12328
}

define i64 @"_ZN3org4luaj3vm23lib12BaseLib$load6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12350:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1235d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1235d, i64* @rbx, align 8
  store i64 %v0_1235d, i64* @rbp, align 8
  store i64 %v0_1235d, i64* @rax, align 8
  store i64 %v0_1235d, i64* @rdi, align 8
  %v4_1237c = trunc i64 %v0_1235d to i8
  %v5_1237c = icmp eq i8 %v4_1237c, 0
  store i64 1, i64* %rsi.global-to-local, align 8
  br i1 %v5_1237c, label %bb, label %dec_label_pc_12389

bb:                                               ; preds = %dec_label_pc_12350
  %v1_12383 = call i64 @function_124b8()
  store i64 %v1_12383, i64* @rax, align 8
  %v2_12389.pre = load i64, i64* @rsi, align 8
  %v0_123a5.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_12389

dec_label_pc_12389:                               ; preds = %bb, %dec_label_pc_12350
  %v0_123a5 = phi i64 [ %v0_123a5.pre, %bb ], [ %v0_1235d, %dec_label_pc_12350 ]
  %v2_123a1 = phi i64 [ %v2_12389.pre, %bb ], [ 1, %dec_label_pc_12350 ]
  store i64 %v2_123a1, i64* @rax, align 8
  store i64 1, i64* @rdx, align 8
  %v0_12391 = load i64, i64* inttoptr (i64 74648 to i64*), align 8
  store i64 %v0_12391, i64* @rcx, align 8
  store i64 %v2_123a1, i64* @rax, align 8
  store i64 %v0_123a5, i64* @rdi, align 8
  %v4_123ae = trunc i64 %v2_123a1 to i8
  %v5_123ae = icmp eq i8 %v4_123ae, 0
  %v0_123b0 = load i64, i64* inttoptr (i64 74679 to i64*), align 8
  store i64 %v0_123b0, i64* @rdx, align 8
  %v1_123b7 = icmp eq i1 %v5_123ae, false
  br i1 %v1_123b7, label %bb247, label %dec_label_pc_123bd

bb247:                                            ; preds = %dec_label_pc_12389
  %v2_123b7 = call i64 @function_124a0()
  store i64 %v2_123b7, i64* @rax, align 8
  br label %dec_label_pc_123bd

dec_label_pc_123bd:                               ; preds = %bb247, %dec_label_pc_12389
  %v3_123b7 = phi i64 [ %v2_123b7, %bb247 ], [ %v2_123a1, %dec_label_pc_12389 ]
  ret i64 %v3_123b7
}

define i64 @function_12480() local_unnamed_addr {
dec_label_pc_12480:
  %rbp.global-to-local = alloca i64, align 8
  %v2_12480 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_12480, i64* @rax, align 8
  store i64 %v2_12480, i64* @rdx, align 8
  store i64 %v2_12480, i64* @rdi, align 8
  store i64 %v2_12480, i64* @rbx, align 8
  ret i64 %v2_12480
}

define i64 @function_124a0() local_unnamed_addr {
dec_label_pc_124a0:
  %v2_124a0 = load i64, i64* @rbp, align 8
  store i64 %v2_124a0, i64* @rax, align 8
  store i64 %v2_124a0, i64* @rdi, align 8
  store i64 %v2_124a0, i64* @rdx, align 8
  ret i64 %v2_124a0
}

define i64 @function_124b8() local_unnamed_addr {
dec_label_pc_124b8:
  %v2_124b8 = load i64, i64* @rbp, align 8
  store i64 %v2_124b8, i64* @rax, align 8
  store i64 %v2_124b8, i64* @rdi, align 8
  store i64 %v2_124b8, i64* @rsi, align 8
  ret i64 %v2_124b8
}

define i64 @"_ZN3org4luaj3vm230Globals$AbstractBufferedStreamC1Ei"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_124d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_124d4 = load i64, i64* @rdi, align 8
  store i64 %v0_124d4, i64* @rbx, align 8
  %v17_124d7 = load i64, i64* @rax, align 8
  ret i64 %v17_124d7
}

define i64 @_ZN3org4luaj3vm23lib7BaseLib12findResourceEJPN4java2io11InputStreamEPNS4_4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12510:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_12514 = load i64, i64* @rax, align 8
  ret i64 %v1_12514
}

define i64 @function_12550() local_unnamed_addr {
dec_label_pc_12550:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_12590() local_unnamed_addr {
dec_label_pc_12590:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print11printHeaderEJvPNS1_9PrototypeE(i64 %arg1) local_unnamed_addr {
dec_label_pc_125a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_125aa = load i64, i64* @rdi, align 8
  store i64 %v0_125aa, i64* @rbx, align 8
  store i64 75188, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_12920() local_unnamed_addr {
dec_label_pc_12920:
  %rbp.global-to-local = alloca i64, align 8
  %v0_12927 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_12927, i64* @rdi, align 8
  %v1_12927 = load i64, i64* @rax, align 8
  ret i64 %v1_12927
}

define i64 @function_12968() local_unnamed_addr {
dec_label_pc_12968:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm214OrphanedThreadC1Ev() local_unnamed_addr {
dec_label_pc_12970:
  %v1_12974 = load i64, i64* @rax, align 8
  ret i64 %v1_12974
}

define i64 @_ZN3org4luaj3vm28LuaValue11optuserdataEJPN4java4lang6ObjectEPNS4_5ClassES6_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12990:
  store i64 %arg1, i64* @rdi, align 8
  %v1_12990 = icmp eq i64 %arg2, 0
  br i1 %v1_12990, label %bb, label %dec_label_pc_12990.dec_label_pc_12996_crit_edge

dec_label_pc_12990.dec_label_pc_12996_crit_edge:  ; preds = %dec_label_pc_12990
  %v1_12999.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_12996

bb:                                               ; preds = %dec_label_pc_12990
  %v1_12994 = call i64 @function_129b4()
  store i64 %v1_12994, i64* @rax, align 8
  br label %dec_label_pc_12996

dec_label_pc_12996:                               ; preds = %dec_label_pc_12990.dec_label_pc_12996_crit_edge, %bb
  %v1_12999 = phi i64 [ %v1_12999.pre, %dec_label_pc_12990.dec_label_pc_12996_crit_edge ], [ %v1_12994, %bb ]
  %v0_12996 = load i64, i64* @rdi, align 8
  store i64 %v0_12996, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %v1_12999
}

define i64 @function_129b4() local_unnamed_addr {
dec_label_pc_129b4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29Prototype8toStringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_129c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 76236, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_12a4f() local_unnamed_addr {
dec_label_pc_12a4f:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27LocVars9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_12a60:
  store i64 %arg1, i64* @rdi, align 8
  %v1_12a62 = load i64, i64* @rax, align 8
  ret i64 %v1_12a62
}

define i64 @function_12aef() local_unnamed_addr {
dec_label_pc_12aef:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot8toStringEJPN4java4lang6StringEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_12b00:
  store i64 %arg1, i64* @rdi, align 8
  store i64 76556, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_12b6c() local_unnamed_addr {
dec_label_pc_12b6c:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm219WeakTable$WeakValueC1EPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12b80:
  store i64 %arg1, i64* @rdi, align 8
  %v0_12b87 = load i64, i64* @rdi, align 8
  store i64 %v0_12b87, i64* @rbx, align 8
  %v1_12b87 = load i64, i64* @rax, align 8
  ret i64 %v1_12b87
}

define i64 @"_ZN3org4luaj3vm215LuaThread$StateC1EPNS1_7GlobalsEPNS1_9LuaThreadEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_12bc0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12bcc = load i64, i64* @rdi, align 8
  store i64 %v0_12bcc, i64* @rbx, align 8
  store i64 76770, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm215LuaThread$State3runEJvv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_12c40:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_12c44 = load i64, i64* @rdi, align 8
  store i64 %v0_12c44, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_12ca4(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_12ca4:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12caa = load i64, i64* @rax, align 8
  %v1_12caa = add i64 %v0_12caa, -8
  %v2_12caa = inttoptr i64 %v1_12caa to i64*
  %v3_12caa = load i64, i64* %v2_12caa, align 8
  store i64 %v3_12caa, i64* @rdi, align 8
  %v1_12cae = inttoptr i64 %v3_12caa to i64*
  %v2_12cae = load i64, i64* %v1_12cae, align 8
  store i64 %v2_12cae, i64* @rax, align 8
  %v1_12cb1 = add i64 %v2_12cae, 64
  %v2_12cb1 = inttoptr i64 %v1_12cb1 to i64*
  %v3_12cb1 = load i64, i64* %v2_12cb1, align 8
  store i64 %v3_12cb1, i64* @rax, align 8
  %v1_12cb7 = load i64, i64* @rbx, align 8
  %v2_12cb7 = add i64 %v1_12cb7, 48
  %v3_12cb7 = inttoptr i64 %v2_12cb7 to i64*
  store i64 %v3_12cb1, i64* %v3_12cb7, align 8
  %v0_12cbb = load i64, i64* @rax, align 8
  ret i64 %v0_12cbb
}

define i64 @function_12cbd() local_unnamed_addr {
dec_label_pc_12cbd:
  %v0_12cc0 = load i64, i64* @rbx, align 8
  store i64 %v0_12cc0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm215LuaThread$State9lua_yieldEJPNS1_7VarargsES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12d00:
  store i64 %arg1, i64* @rdi, align 8
  %v0_12d05 = load i64, i64* @rdi, align 8
  store i64 %v0_12d05, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_12df8() local_unnamed_addr {
dec_label_pc_12df8:
  %v0_12dfb = load i64, i64* @rbx, align 8
  store i64 %v0_12dfb, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_12e0d() local_unnamed_addr {
dec_label_pc_12e0d:
  %v0_12e11 = load i64, i64* @rbx, align 8
  %v1_12e11 = add i64 %v0_12e11, 84
  %v2_12e11 = inttoptr i64 %v1_12e11 to i32*
  store i32 4, i32* %v2_12e11, align 4
  store i64 77343, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata10isuserdataEJbPN4java4lang5ClassE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12e50:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12e51 = load i64, i64* @rdi, align 8
  %v1_12e51 = add i64 %v0_12e51, 8
  %v2_12e51 = inttoptr i64 %v1_12e51 to i64*
  %v3_12e51 = load i64, i64* %v2_12e51, align 8
  store i64 %v3_12e51, i64* @rdi, align 8
  %v1_12e55 = icmp eq i64 %v3_12e51, 0
  br i1 %v1_12e55, label %bb, label %dec_label_pc_12e50.dec_label_pc_12e5a_crit_edge

dec_label_pc_12e50.dec_label_pc_12e5a_crit_edge:  ; preds = %dec_label_pc_12e50
  %v1_12e5a.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_12e5a

bb:                                               ; preds = %dec_label_pc_12e50
  %v1_12e58 = call i64 @function_12e74()
  store i64 %v1_12e58, i64* @rax, align 8
  br label %dec_label_pc_12e5a

dec_label_pc_12e5a:                               ; preds = %dec_label_pc_12e50.dec_label_pc_12e5a_crit_edge, %bb
  %v1_12e5a = phi i64 [ %v1_12e5a.pre, %dec_label_pc_12e50.dec_label_pc_12e5a_crit_edge ], [ %v1_12e58, %bb ]
  %v0_12e5a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_12e5a, i64* @rbx, align 8
  ret i64 %v1_12e5a
}

define i64 @function_12e74() local_unnamed_addr {
dec_label_pc_12e74:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata10touserdataEJPN4java4lang6ObjectEPNS4_5ClassE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12e80:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12e82 = load i64, i64* @rdi, align 8
  %v1_12e89 = add i64 %v0_12e82, 8
  %v2_12e89 = inttoptr i64 %v1_12e89 to i64*
  %v3_12e89 = load i64, i64* %v2_12e89, align 8
  store i64 %v3_12e89, i64* @rdi, align 8
  %v1_12e8d = icmp eq i64 %v3_12e89, 0
  br i1 %v1_12e8d, label %bb, label %dec_label_pc_12e80.dec_label_pc_12e92_crit_edge

dec_label_pc_12e80.dec_label_pc_12e92_crit_edge:  ; preds = %dec_label_pc_12e80
  %v1_12e92.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_12e92

bb:                                               ; preds = %dec_label_pc_12e80
  %v1_12e90 = call i64 @function_12ec4()
  store i64 %v1_12e90, i64* @rax, align 8
  br label %dec_label_pc_12e92

dec_label_pc_12e92:                               ; preds = %dec_label_pc_12e80.dec_label_pc_12e92_crit_edge, %bb
  %v1_12e92 = phi i64 [ %v1_12e92.pre, %dec_label_pc_12e80.dec_label_pc_12e92_crit_edge ], [ %v1_12e90, %bb ]
  %v0_12e92 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_12e92, i64* @rbx, align 8
  ret i64 %v1_12e92
}

define i64 @function_12ec4() local_unnamed_addr {
dec_label_pc_12ec4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata11optuserdataEJPN4java4lang6ObjectEPNS4_5ClassES6_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12ed0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_12ed2 = load i64, i64* @rdi, align 8
  store i64 %v0_12ed2, i64* @rbx, align 8
  %v1_12ed9 = add i64 %v0_12ed2, 8
  %v2_12ed9 = inttoptr i64 %v1_12ed9 to i64*
  %v3_12ed9 = load i64, i64* %v2_12ed9, align 8
  store i64 %v3_12ed9, i64* @rdi, align 8
  %v1_12edd = icmp eq i64 %v3_12ed9, 0
  br i1 %v1_12edd, label %bb, label %dec_label_pc_12ed0.dec_label_pc_12ee2_crit_edge

dec_label_pc_12ed0.dec_label_pc_12ee2_crit_edge:  ; preds = %dec_label_pc_12ed0
  %v1_12ee2.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_12ee2

bb:                                               ; preds = %dec_label_pc_12ed0
  %v1_12ee0 = call i64 @function_12f20()
  store i64 %v1_12ee0, i64* @rax, align 8
  br label %dec_label_pc_12ee2

dec_label_pc_12ee2:                               ; preds = %dec_label_pc_12ed0.dec_label_pc_12ee2_crit_edge, %bb
  %v1_12ee2 = phi i64 [ %v1_12ee2.pre, %dec_label_pc_12ed0.dec_label_pc_12ee2_crit_edge ], [ %v1_12ee0, %bb ]
  ret i64 %v1_12ee2
}

define i64 @function_12f15(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12f15:
  %v0_12f15 = load i64, i64* @rbx, align 8
  %v1_12f15 = add i64 %v0_12f15, 8
  %v2_12f15 = inttoptr i64 %v1_12f15 to i64*
  %v3_12f15 = load i64, i64* %v2_12f15, align 8
  store i64 %v3_12f15, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v3_12f15
}

define i64 @function_12f20() local_unnamed_addr {
dec_label_pc_12f20:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaFunction13classnamestubEJPN4java4lang6StringEv() local_unnamed_addr {
dec_label_pc_12f30:
  %v17_12f32 = load i64, i64* @rax, align 8
  ret i64 %v17_12f32
}

define i64 @function_12f85() local_unnamed_addr {
dec_label_pc_12f85:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print10printStackEJvP6JArrayIPNS1_8LuaValueEEiPNS1_7VarargsE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_12f90:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 77737, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_13170() local_unnamed_addr {
dec_label_pc_13170:
  %v0_13170 = load i64, i64* inttoptr (i64 78199 to i64*), align 8
  store i64 %v0_13170, i64* @rdi, align 8
  %v1_1317c = inttoptr i64 %v0_13170 to i64*
  %v2_1317c = load i64, i64* %v1_1317c, align 8
  store i64 %v2_1317c, i64* @rax, align 8
  ret i64 %v2_1317c
}

define i64 @function_13190() local_unnamed_addr {
dec_label_pc_13190:
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %v2_13190 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v2_13190, i64* @rax, align 8
  store i64 %v2_13190, i64* @rdi, align 8
  store i64 %v2_13190, i64* %r14.global-to-local, align 8
  %v0_1319f = load i64, i64* inttoptr (i64 78246 to i64*), align 8
  store i64 %v2_13190, i64* @rdi, align 8
  store i64 %v2_13190, i64* @rax, align 8
  %v1_131b7 = trunc i64 %v2_13190 to i32
  %v10_131ba = icmp sgt i32 %v1_131b7, 47
  br i1 %v10_131ba, label %bb, label %dec_label_pc_131bc

bb:                                               ; preds = %dec_label_pc_13190
  %v11_131ba = call i64 @function_13208()
  store i64 %v11_131ba, i64* @rax, align 8
  %v0_131bf.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_131bc

dec_label_pc_131bc:                               ; preds = %bb, %dec_label_pc_13190
  %v0_131bf = phi i64 [ %v0_131bf.pre, %bb ], [ %v2_13190, %dec_label_pc_13190 ]
  store i64 %v0_131bf, i64* @rdi, align 8
  store i64 %v0_1319f, i64* @rax, align 8
  %v1_131d0 = inttoptr i64 %v0_1319f to i64*
  %v2_131d0 = load i64, i64* %v1_131d0, align 8
  store i64 %v2_131d0, i64* @rdx, align 8
  store i64 %v0_1319f, i64* @rdi, align 8
  ret i64 %v0_1319f
}

define i64 @function_131e8() local_unnamed_addr {
dec_label_pc_131e8:
  %v0_131e8 = load i64, i64* inttoptr (i64 78319 to i64*), align 8
  store i64 %v0_131e8, i64* @rdi, align 8
  %v1_131f6 = inttoptr i64 %v0_131e8 to i64*
  %v2_131f6 = load i64, i64* %v1_131f6, align 8
  store i64 %v2_131f6, i64* @rax, align 8
  ret i64 %v2_131f6
}

define i64 @function_13208() local_unnamed_addr {
dec_label_pc_13208:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_132b0() local_unnamed_addr {
dec_label_pc_132b0:
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  %v0_132b0 = load i64, i64* inttoptr (i64 78519 to i64*), align 8
  %v1_132c0 = inttoptr i64 %v0_132b0 to i64*
  %v2_132c0 = load i64, i64* %v1_132c0, align 8
  store i64 %v2_132c0, i64* @rdx, align 8
  store i64 %v0_132b0, i64* @rdi, align 8
  ret i64 %tmp231
}

define i64 @function_132d8(i64 %arg1) local_unnamed_addr {
dec_label_pc_132d8:
  %v0_132d8 = load i64, i64* inttoptr (i64 78559 to i64*), align 8
  store i64 %v0_132d8, i64* @rdi, align 8
  %v1_132e4 = inttoptr i64 %v0_132d8 to i64*
  %v2_132e4 = load i64, i64* %v1_132e4, align 8
  store i64 %v2_132e4, i64* @rax, align 8
  ret i64 %v2_132e4
}

define i64 @function_132fc() local_unnamed_addr {
dec_label_pc_132fc:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13303() local_unnamed_addr {
dec_label_pc_13303:
  %v0_13303 = load i64, i64* @rbx, align 8
  store i64 %v0_13303, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217Globals$StrReaderC1EPN4java4lang6StringE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13310:
  store i64 %arg1, i64* @rdi, align 8
  %v0_13315 = load i64, i64* @rdi, align 8
  store i64 %v0_13315, i64* @rbx, align 8
  %v17_13318 = load i64, i64* @rax, align 8
  ret i64 %v17_13318
}

define i64 @function_13343() local_unnamed_addr {
dec_label_pc_13343:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString13toInputStreamEJPN4java2io11InputStreamEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_13350:
  store i64 %arg1, i64* @rdi, align 8
  %v0_13352 = load i64, i64* @rdi, align 8
  store i64 %v0_13352, i64* @rbx, align 8
  %v1_13352 = load i64, i64* @rax, align 8
  ret i64 %v1_13352
}

define i64 @_ZN3org4luaj3vm29LuaString12decodeAsUtf8EJPN4java4lang6StringEP6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13390:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 78754, i64* @rdi, align 8
  %v0_133a7 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_133a7, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1350c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1350c:
  store i64 79123, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1351f() local_unnamed_addr {
dec_label_pc_1351f:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_1354d() local_unnamed_addr {
dec_label_pc_1354d:
  %v0_1354d = load i64, i64* @rax, align 8
  store i64 %v0_1354d, i64* @rdi, align 8
  ret i64 %v0_1354d
}

define i64 @function_1354f(i64 %arg1) local_unnamed_addr {
dec_label_pc_1354f:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13556() local_unnamed_addr {
dec_label_pc_13556:
  %v0_13556 = load i64, i64* @rbx, align 8
  store i64 %v0_13556, i64* @rdi, align 8
  %v1_13558 = call i64 @function_1354f(i64 %v0_13556)
  store i64 %v1_13558, i64* @rax, align 8
  ret i64 %v1_13558
}

define i64 @function_1355a() local_unnamed_addr {
dec_label_pc_1355a:
  %rbp.global-to-local = alloca i64, align 8
  %v0_1355a = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1355a, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_13570:
  store i64 %arg1, i64* @rdi, align 8
  %v0_13570 = load i64, i64* @rdi, align 8
  store i64 %v0_13570, i64* @rax, align 8
  %v1_13577 = add i64 %v0_13570, 8
  %v2_13577 = inttoptr i64 %v1_13577 to i64*
  %v3_13577 = load i64, i64* %v2_13577, align 8
  store i64 %v3_13577, i64* @rdi, align 8
  %v1_1357e = add i64 %v0_13570, 20
  %v2_1357e = inttoptr i64 %v1_1357e to i32*
  %v3_1357e = load i32, i32* %v2_1357e, align 4
  %v4_1357e = zext i32 %v3_1357e to i64
  store i64 %v4_1357e, i64* @rdx, align 8
  ret i64 %v0_13570
}

define i64 @_ZN3org4luaj3vm29LuaString10scandoubleEJdii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13590:
  %r10.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_13592 = add i64 %arg2, 64
  store i64 %v1_13592, i64* @rax, align 8
  store i64 %arg2, i64* @r13, align 8
  %v1_135a4 = trunc i64 %v1_13592 to i32
  %v2_135a4 = load i64, i64* @rdx, align 8
  %v3_135a4 = trunc i64 %v2_135a4 to i32
  %v4_135a4 = sub i32 %v1_135a4, %v3_135a4
  %v10_135a41 = xor i64 %v2_135a4, %v1_13592
  %v10_135a4 = trunc i64 %v10_135a41 to i32
  %v11_135a4 = xor i32 %v4_135a4, %v1_135a4
  %v12_135a4 = and i32 %v11_135a4, %v10_135a4
  %v13_135a4 = icmp slt i32 %v12_135a4, 0
  %v14_135a4 = icmp eq i32 %v4_135a4, 0
  %v15_135a4 = icmp slt i32 %v4_135a4, 0
  %v3_135a6 = icmp ne i1 %v15_135a4, %v13_135a4
  %v4_135a6 = or i1 %v14_135a4, %v3_135a6
  %v9_135a6.v = select i1 %v4_135a6, i64 %v1_13592, i64 %v2_135a4
  %v9_135a6 = trunc i64 %v9_135a6.v to i32
  %v10_135a6 = and i64 %v9_135a6.v, 4294967295
  store i64 %v10_135a6, i64* @rdx, align 8
  %v4_135a9 = trunc i64 %arg2 to i32
  %sext = mul i64 %v9_135a6.v, 4294967296
  %v6_135ab = sdiv i64 %sext, 4294967296
  %v8_135ab = icmp sgt i64 %v6_135ab, %arg2
  br i1 %v8_135ab, label %dec_label_pc_135b1, label %bb

bb:                                               ; preds = %dec_label_pc_13590
  %v13_135ab = call i64 @function_13718(i64 %arg1, i64 %arg2, i64 %v6_135ab)
  store i64 %v13_135ab, i64* @rax, align 8
  br label %dec_label_pc_135b1

dec_label_pc_135b1:                               ; preds = %dec_label_pc_13590, %bb
  %v1_135b1 = add i64 %arg1, 8
  %v2_135b1 = inttoptr i64 %v1_135b1 to i64*
  %v3_135b1 = load i64, i64* %v2_135b1, align 8
  store i64 %v3_135b1, i64* @rcx, align 8
  %v1_135b8 = add i64 %v3_135b1, 8
  %v2_135b8 = inttoptr i64 %v1_135b8 to i32*
  %v3_135b8 = load i32, i32* %v2_135b8, align 4
  %v4_135b8 = zext i32 %v3_135b8 to i64
  store i64 %v4_135b8, i64* %r9.global-to-local, align 8
  %v1_135bc = add i64 %v3_135b1, 12
  store i64 %v1_135bc, i64* @rax, align 8
  %v9_135c0 = icmp ult i32 %v4_135a9, %v3_135b8
  %v1_135c3 = icmp eq i1 %v9_135c0, false
  br i1 %v1_135c3, label %bb262, label %dec_label_pc_135c9

bb262:                                            ; preds = %dec_label_pc_135b1
  %v2_135c3 = call i64 @function_1372f()
  store i64 %v2_135c3, i64* @rax, align 8
  %v0_135cc.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_135c9

dec_label_pc_135c9:                               ; preds = %bb262, %dec_label_pc_135b1
  %v0_13601 = phi i64 [ %v2_135c3, %bb262 ], [ %v1_135bc, %dec_label_pc_135b1 ]
  %v0_135cc = phi i64 [ %v0_135cc.pre, %bb262 ], [ %v3_135b1, %dec_label_pc_135b1 ]
  %v3_135cc = add i64 %arg2, 12
  %v4_135cc = add i64 %v3_135cc, %v0_135cc
  %v5_135cc = inttoptr i64 %v4_135cc to i8*
  %v6_135cc = load i8, i8* %v5_135cc, align 1
  %v1_135d2 = zext i8 %v6_135cc to i64
  %v2_135d2 = add nuw nsw i64 %v1_135d2, 4294967253
  %v17_135d2 = and i64 %v2_135d2, 4294967295
  store i64 %v17_135d2, i64* @rcx, align 8
  %v0_135f2 = load i64, i64* @r13, align 8
  %v1_135f2 = add i64 %v0_135f2, 1
  store i64 1, i64* %r10.global-to-local, align 8
  store i64 %v1_135f2, i64* @rbx, align 8
  %v2_13601 = add i64 %v1_135f2, %v0_13601
  store i64 %v2_13601, i64* @rax, align 8
  br label %dec_label_pc_1363e

dec_label_pc_13610:                               ; preds = %dec_label_pc_1363e
  %v2_13610 = load i64, i64* %r9.global-to-local, align 8
  %v3_13610 = trunc i64 %v2_13610 to i32
  %v14_13610 = icmp eq i32 %v1_1363e, %v3_13610
  br i1 %v14_13610, label %bb263, label %dec_label_pc_13619

bb263:                                            ; preds = %dec_label_pc_13610
  %v1_13613 = call i64 @function_13732()
  store i64 %v1_13613, i64* @rax, align 8
  %v0_13628.pre = load i64, i64* %r10.global-to-local, align 8
  %v0_1362b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_13619

dec_label_pc_13619:                               ; preds = %bb263, %dec_label_pc_13610
  %v0_1362b = phi i64 [ %v0_1362b.pre, %bb263 ], [ %v0_13640, %dec_label_pc_13610 ]
  %v0_13628 = phi i64 [ %v0_13628.pre, %bb263 ], [ %v0_1362811, %dec_label_pc_13610 ]
  %v0_1362e = phi i64 [ %v1_13613, %bb263 ], [ %v1_13644, %dec_label_pc_13610 ]
  %v1_13619 = inttoptr i64 %v0_1362e to i8*
  %v2_13619 = load i8, i8* %v1_13619, align 1
  %v3_13619 = zext i8 %v2_13619 to i64
  %v1_1361c = add nsw i64 %v3_13619, -43
  store i64 %v1_1361c, i64* @rcx, align 8
  store i64 %v0_13628, i64* @rdi, align 8
  %v2_1362b = add i64 %v0_1362b, 1
  %v17_1362b = and i64 %v2_1362b, 4294967295
  store i64 %v17_1362b, i64* @rbx, align 8
  %v1_1362e = add i64 %v0_1362e, 1
  store i64 %v1_1362e, i64* @rax, align 8
  %v2_13632 = urem i64 %v1_1361c, 64
  %v4_13632 = icmp eq i64 %v2_13632, 0
  br i1 %v4_13632, label %bb266, label %bb265

bb265:                                            ; preds = %dec_label_pc_13619
  %v5_13632 = shl i64 %v0_13628, %v2_13632
  store i64 %v5_13632, i64* @rdi, align 8
  br label %bb266

bb266:                                            ; preds = %dec_label_pc_13619, %bb265
  br label %dec_label_pc_1363e

dec_label_pc_1363e:                               ; preds = %bb266, %dec_label_pc_135c9
  %v0_1362811 = phi i64 [ %v0_13628, %bb266 ], [ 1, %dec_label_pc_135c9 ]
  %v1_13644 = phi i64 [ %v1_1362e, %bb266 ], [ %v2_13601, %dec_label_pc_135c9 ]
  %v0_13640 = phi i64 [ %v17_1362b, %bb266 ], [ %v1_135f2, %dec_label_pc_135c9 ]
  %v1_1363e = trunc i64 %v0_13640 to i32
  %v15_1363e = icmp eq i32 %v1_1363e, %v9_135a6
  store i64 %v0_13640, i64* @rdi, align 8
  %v1_13642 = icmp eq i1 %v15_1363e, false
  br i1 %v1_13642, label %dec_label_pc_13610, label %dec_label_pc_13644

dec_label_pc_13644:                               ; preds = %dec_label_pc_1363e
  ret i64 %v1_13644
}

define i64 @function_136fd(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_136fd:
  %v0_136fd = load i64, i64* @rax, align 8
  %v1_136fd = add i64 %v0_136fd, -8
  %v2_136fd = inttoptr i64 %v1_136fd to i64*
  %v3_136fd = load i64, i64* %v2_136fd, align 8
  store i64 %v3_136fd, i64* @rax, align 8
  %v0_13701 = load i64, i64* inttoptr (i64 79625 to i64*), align 8
  %v1_13701 = call i128 @__asm_movsd(i64 %v0_13701)
  store i64 %arg1, i64* @rbx, align 8
  %v0_13717 = load i64, i64* @rax, align 8
  ret i64 %v0_13717
}

define i64 @function_13718(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13718:
  store i64 %arg1, i64* @rdi, align 8
  %v4_13718 = sub i64 %arg3, %arg2
  %v20_13718 = and i64 %v4_13718, 4294967295
  store i64 %v20_13718, i64* @rdx, align 8
  %v21_13718 = load i64, i64* @rax, align 8
  ret i64 %v21_13718
}

define i64 @function_1372f() local_unnamed_addr {
dec_label_pc_1372f:
  %v0_1372f = load i64, i64* @r13, align 8
  store i64 %v0_1372f, i64* @rdi, align 8
  %v1_1372f = load i64, i64* @rax, align 8
  ret i64 %v1_1372f
}

define i64 @function_13732() local_unnamed_addr {
dec_label_pc_13732:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable4keysEJP6JArrayIPNS1_8LuaValueEEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_13750:
  store i64 %arg1, i64* @rdi, align 8
  %v5_13755 = load i64, i64* @rax, align 8
  ret i64 %v5_13755
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState13dumpConstantsEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_137f0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_137f4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_137f4, i64* @r15, align 8
  %v0_137fd = load i64, i64* @rdi, align 8
  store i64 %v0_137fd, i64* @rbx, align 8
  %v1_13804 = add i64 %v0_137f4, 8
  %v2_13804 = inttoptr i64 %v1_13804 to i64*
  %v3_13804 = load i64, i64* %v2_13804, align 8
  store i64 %v3_13804, i64* @r13, align 8
  %v1_13808 = add i64 %v3_13804, 8
  %v2_13808 = inttoptr i64 %v1_13808 to i32*
  %v3_13808 = load i32, i32* %v2_13808, align 4
  %v4_13808 = zext i32 %v3_13808 to i64
  store i64 %v0_137fd, i64* @rax, align 8
  store i64 %v4_13808, i64* %rsi.global-to-local, align 8
  %tmp246 = icmp slt i32 %v3_13808, 1
  br i1 %tmp246, label %bb, label %dec_label_pc_13825

bb:                                               ; preds = %dec_label_pc_137f0
  %v11_1381f = call i64 @function_13ad0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_1381f, i64* @rax, align 8
  %v0_13825.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_13825

dec_label_pc_13825:                               ; preds = %bb, %dec_label_pc_137f0
  %v12_138314 = phi i64 [ %v11_1381f, %bb ], [ %v0_137fd, %dec_label_pc_137f0 ]
  %v0_13825 = phi i64 [ %v0_13825.pre, %bb ], [ %v3_13804, %dec_label_pc_137f0 ]
  %v1_13825 = add i64 %v0_13825, 8
  %v2_13825 = inttoptr i64 %v1_13825 to i32*
  %v3_13825 = load i32, i32* %v2_13825, align 4
  %v5_1382d = icmp eq i32 %v3_13825, 0
  br i1 %v5_1382d, label %bb247, label %dec_label_pc_13831

bb247:                                            ; preds = %dec_label_pc_13825
  %v1_1382f = call i64 @function_138a3()
  store i64 %v1_1382f, i64* @rax, align 8
  br label %dec_label_pc_13831

dec_label_pc_13831:                               ; preds = %bb247, %dec_label_pc_13825
  %v12_13831 = phi i64 [ %v1_1382f, %bb247 ], [ %v12_138314, %dec_label_pc_13825 ]
  ret i64 %v12_13831
}

define i64 @function_138a3() local_unnamed_addr {
dec_label_pc_138a3:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_138c8() local_unnamed_addr {
dec_label_pc_138c8:
  %tmp230 = call i64 @__decompiler_undefined_function_0()
  %v0_138c8 = load i64, i64* @rbx, align 8
  store i64 %v0_138c8, i64* @rdx, align 8
  store i64 %v0_138c8, i64* @rdi, align 8
  ret i64 %tmp230
}

define i64 @function_139f0() local_unnamed_addr {
dec_label_pc_139f0:
  %r14.global-to-local = alloca i64, align 8
  %tmp233 = call i64 @__decompiler_undefined_function_0()
  %v0_139fc = load i64, i64* @rbx, align 8
  %v1_139fc = add i64 %v0_139fc, 24
  %v2_139fc = inttoptr i64 %v1_139fc to i64*
  %v3_139fc = load i64, i64* %v2_139fc, align 8
  store i64 %v3_139fc, i64* @rdi, align 8
  %v4_13a00 = trunc i64 %tmp233 to i8
  %v5_13a00 = icmp eq i8 %v4_13a00, 0
  %v1_13a02 = inttoptr i64 %v3_139fc to i64*
  %v2_13a02 = load i64, i64* %v1_13a02, align 8
  store i64 %v2_13a02, i64* @rax, align 8
  br i1 %v5_13a00, label %bb, label %dec_label_pc_13a07

bb:                                               ; preds = %dec_label_pc_139f0
  %v1_13a05 = call i64 @function_13a37()
  store i64 %v1_13a05, i64* @rax, align 8
  %v2_13a0f.pre = load i64, i64* %r14.global-to-local, align 8
  %v2_13a1b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_13a07

dec_label_pc_13a07:                               ; preds = %bb, %dec_label_pc_139f0
  %v2_13a1b = phi i64 [ %v2_13a1b.pre, %bb ], [ %v0_139fc, %dec_label_pc_139f0 ]
  %v2_13a0f = phi i64 [ %v2_13a0f.pre, %bb ], [ %tmp233, %dec_label_pc_139f0 ]
  store i64 %v2_13a0f, i64* @rax, align 8
  store i64 %v2_13a1b, i64* @rdx, align 8
  store i64 %v2_13a1b, i64* @rdi, align 8
  ret i64 %v2_13a0f
}

define i64 @function_13a30() local_unnamed_addr {
dec_label_pc_13a30:
  %v0_13a30 = load i64, i64* @rbx, align 8
  %v1_13a30 = add i64 %v0_13a30, 24
  %v2_13a30 = inttoptr i64 %v1_13a30 to i64*
  %v3_13a30 = load i64, i64* %v2_13a30, align 8
  store i64 %v3_13a30, i64* @rdi, align 8
  %v1_13a34 = inttoptr i64 %v3_13a30 to i64*
  %v2_13a34 = load i64, i64* %v1_13a34, align 8
  store i64 %v2_13a34, i64* @rax, align 8
  ret i64 %v2_13a34
}

define i64 @function_13a37() local_unnamed_addr {
dec_label_pc_13a37:
  %v2_13a4b = load i64, i64* @rbx, align 8
  store i64 %v2_13a4b, i64* @rax, align 8
  store i64 %v2_13a4b, i64* @rdi, align 8
  ret i64 %v2_13a4b
}

define i64 @function_13a60() local_unnamed_addr {
dec_label_pc_13a60:
  %r14.global-to-local = alloca i64, align 8
  %v0_13a60 = load i8, i8* inttoptr (i64 80487 to i8*), align 1
  %v7_13a60 = icmp eq i8 %v0_13a60, 0
  %v1_13a67 = icmp eq i1 %v7_13a60, false
  br i1 %v1_13a67, label %dec_label_pc_13a79, label %dec_label_pc_13a69

dec_label_pc_13a69:                               ; preds = %dec_label_pc_13a60
  %v2_13a69 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v2_13a69, i64* @rax, align 8
  store i64 %v2_13a69, i64* @rdi, align 8
  %v4_13a75 = trunc i64 %v2_13a69 to i8
  %v5_13a75 = icmp eq i8 %v4_13a75, 0
  br i1 %v5_13a75, label %dec_label_pc_13a87, label %dec_label_pc_13a79

dec_label_pc_13a79:                               ; preds = %dec_label_pc_13a69, %dec_label_pc_13a60
  %v0_13a79 = load i64, i64* @rbx, align 8
  %v1_13a79 = add i64 %v0_13a79, 24
  %v2_13a79 = inttoptr i64 %v1_13a79 to i64*
  %v3_13a79 = load i64, i64* %v2_13a79, align 8
  store i64 %v3_13a79, i64* @rdi, align 8
  %v1_13a82 = inttoptr i64 %v3_13a79 to i64*
  %v2_13a82 = load i64, i64* %v1_13a82, align 8
  store i64 %v2_13a82, i64* @rax, align 8
  ret i64 %v2_13a82

dec_label_pc_13a87:                               ; preds = %dec_label_pc_13a69
  ret i64 %v2_13a69
}

define i64 @function_13ac0() local_unnamed_addr {
dec_label_pc_13ac0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13ad0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_13ad0:
  %v0_13ad0 = load i64, i64* @r15, align 8
  %v1_13ad0 = add i64 %v0_13ad0, 24
  %v2_13ad0 = inttoptr i64 %v1_13ad0 to i64*
  %v3_13ad0 = load i64, i64* %v2_13ad0, align 8
  store i64 %v3_13ad0, i64* @rax, align 8
  %v0_13ad4 = load i64, i64* @rbx, align 8
  store i64 %v0_13ad4, i64* @rdi, align 8
  %v1_13ad7 = add i64 %v3_13ad0, 8
  %v2_13ad7 = inttoptr i64 %v1_13ad7 to i32*
  %v3_13ad7 = load i32, i32* %v2_13ad7, align 4
  %v4_13ad7 = zext i32 %v3_13ad7 to i64
  store i64 %v0_13ad4, i64* @rax, align 8
  %tmp19 = icmp slt i32 %v3_13ad7, 1
  br i1 %tmp19, label %dec_label_pc_13b29, label %dec_label_pc_13ae6

dec_label_pc_13ae6:                               ; preds = %dec_label_pc_13ad0
  %v3_13ae6 = load i64, i64* %v2_13ad0, align 8
  store i64 %v3_13ae6, i64* @rax, align 8
  %v1_13aea = add i64 %v3_13ae6, 8
  %v2_13aea = inttoptr i64 %v1_13aea to i32*
  %v3_13aea = load i32, i32* %v2_13aea, align 4
  %v4_13aea = zext i32 %v3_13aea to i64
  store i64 %v4_13aea, i64* @rdi, align 8
  %v1_13aed = add i64 %v3_13ae6, 16
  store i64 %v1_13aed, i64* @rdx, align 8
  %v5_13af1 = icmp eq i32 %v3_13aea, 0
  br i1 %v5_13af1, label %dec_label_pc_13b38, label %dec_label_pc_13af5

dec_label_pc_13af5:                               ; preds = %dec_label_pc_13ae6
  %v1_13af5 = add nsw i64 %v4_13ad7, -1
  br label %dec_label_pc_13b11

dec_label_pc_13b00:                               ; preds = %dec_label_pc_13b11
  %v3_13b00 = load i64, i64* %v2_13ad0, align 8
  store i64 %v3_13b00, i64* @rax, align 8
  %v1_13b08 = trunc i64 %v1_13b24 to i32
  %v3_13b08 = add i64 %v3_13b00, 8
  %v4_13b08 = inttoptr i64 %v3_13b08 to i32*
  %v5_13b08 = load i32, i32* %v4_13b08, align 4
  %v11_13b08 = icmp ult i32 %v1_13b08, %v5_13b08
  %v1_13b0b = add i64 %v3_13b00, 16
  store i64 %v1_13b0b, i64* @rdx, align 8
  %v1_13b0f = icmp eq i1 %v11_13b08, false
  br i1 %v1_13b0f, label %dec_label_pc_13b38.loopexit, label %dec_label_pc_13b11

dec_label_pc_13b11:                               ; preds = %dec_label_pc_13b00, %dec_label_pc_13af5
  %v0_13b04 = phi i64 [ %v1_13b24, %dec_label_pc_13b00 ], [ 0, %dec_label_pc_13af5 ]
  store i64 %v0_13ad4, i64* @rax, align 8
  %v12_13b21 = icmp eq i64 %v1_13af5, %v0_13b04
  %v1_13b24 = add i64 %v0_13b04, 1
  store i64 %v1_13b24, i64* @rdi, align 8
  %v1_13b27 = icmp eq i1 %v12_13b21, false
  br i1 %v1_13b27, label %dec_label_pc_13b00, label %dec_label_pc_13b29.loopexit

dec_label_pc_13b29.loopexit:                      ; preds = %dec_label_pc_13b11
  br label %dec_label_pc_13b29

dec_label_pc_13b29:                               ; preds = %dec_label_pc_13b29.loopexit, %dec_label_pc_13ad0
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* @r13, align 8
  ret i64 %v0_13ad4

dec_label_pc_13b38.loopexit:                      ; preds = %dec_label_pc_13b00
  br label %dec_label_pc_13b38

dec_label_pc_13b38:                               ; preds = %dec_label_pc_13b38.loopexit, %dec_label_pc_13ae6
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28compiler9DumpStateC1EPN4java2io12OutputStreamEb(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13b40:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_13b4c = load i64, i64* @rdi, align 8
  store i64 %v0_13b4c, i64* @rbx, align 8
  %v17_13b4f = load i64, i64* @rax, align 8
  ret i64 %v17_13b4f
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState12dumpUpvaluesEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13ba0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_13ba4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_13ba4, i64* %r13.global-to-local, align 8
  %v0_13baa = load i64, i64* @rdi, align 8
  store i64 %v0_13baa, i64* %r12.global-to-local, align 8
  %v1_13bae = add i64 %v0_13ba4, 48
  %v2_13bae = inttoptr i64 %v1_13bae to i64*
  %v3_13bae = load i64, i64* %v2_13bae, align 8
  store i64 %v3_13bae, i64* @rax, align 8
  %v1_13bb2 = add i64 %v3_13bae, 8
  %v2_13bb2 = inttoptr i64 %v1_13bb2 to i32*
  %v3_13bb2 = load i32, i32* %v2_13bb2, align 4
  %v4_13bb2 = zext i32 %v3_13bb2 to i64
  store i64 %v0_13baa, i64* @rax, align 8
  store i64 %v4_13bb2, i64* %rsi.global-to-local, align 8
  %tmp246 = icmp slt i32 %v3_13bb2, 1
  br i1 %tmp246, label %bb, label %dec_label_pc_13bc4

bb:                                               ; preds = %dec_label_pc_13ba0
  %v5_13bc2 = call i64 @function_13c3e()
  store i64 %v5_13bc2, i64* @rax, align 8
  %v0_13bc4.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_13bc8.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_13bc4

dec_label_pc_13bc4:                               ; preds = %bb, %dec_label_pc_13ba0
  %v0_13bc8 = phi i64 [ %v0_13bc8.pre, %bb ], [ %v0_13baa, %dec_label_pc_13ba0 ]
  %v0_13bc4 = phi i64 [ %v0_13bc4.pre, %bb ], [ %v0_13ba4, %dec_label_pc_13ba0 ]
  %v1_13bc4 = add i64 %v0_13bc4, 48
  %v2_13bc4 = inttoptr i64 %v1_13bc4 to i64*
  %v3_13bc4 = load i64, i64* %v2_13bc4, align 8
  store i64 %v3_13bc4, i64* @rax, align 8
  %v1_13bc8 = add i64 %v0_13bc8, 24
  %v2_13bc8 = inttoptr i64 %v1_13bc8 to i64*
  %v3_13bc8 = load i64, i64* %v2_13bc8, align 8
  store i64 %v3_13bc8, i64* @rdi, align 8
  %v1_13bcd = add i64 %v3_13bc4, 8
  %v2_13bcd = inttoptr i64 %v1_13bcd to i32*
  %v3_13bcd = load i32, i32* %v2_13bcd, align 4
  %v4_13bcd = zext i32 %v3_13bcd to i64
  store i64 %v4_13bcd, i64* @rbx, align 8
  %v5_13bd0 = icmp eq i32 %v3_13bcd, 0
  br i1 %v5_13bd0, label %bb247, label %dec_label_pc_13bd4

bb247:                                            ; preds = %dec_label_pc_13bc4
  %v1_13bd2 = call i64 @function_13c47()
  store i64 %v1_13bd2, i64* @rax, align 8
  br label %dec_label_pc_13bd4

dec_label_pc_13bd4:                               ; preds = %bb247, %dec_label_pc_13bc4
  %v0_13bd4 = phi i64 [ %v1_13bd2, %bb247 ], [ %v3_13bc4, %dec_label_pc_13bc4 ]
  %v1_13bd4 = add i64 %v0_13bd4, 16
  %v2_13bd4 = inttoptr i64 %v1_13bd4 to i64*
  %v3_13bd4 = load i64, i64* %v2_13bd4, align 8
  store i64 %v3_13bd4, i64* @rax, align 8
  %v1_13bd8 = icmp eq i64 %v3_13bc8, 0
  %v1_13bdb = add i64 %v3_13bd4, 16
  %v2_13bdb = inttoptr i64 %v1_13bdb to i8*
  %v3_13bdb = load i8, i8* %v2_13bdb, align 1
  %v4_13bdb = zext i8 %v3_13bdb to i64
  store i64 %v4_13bdb, i64* %rsi.global-to-local, align 8
  br i1 %v1_13bd8, label %bb248, label %dec_label_pc_13be1

bb248:                                            ; preds = %dec_label_pc_13bd4
  %v1_13bdf = call i64 @function_13c50()
  store i64 %v1_13bdf, i64* @rax, align 8
  br label %dec_label_pc_13be1

dec_label_pc_13be1:                               ; preds = %bb248, %dec_label_pc_13bd4
  %v2_13c0e = phi i64 [ %v1_13bdf, %bb248 ], [ %v3_13bd4, %dec_label_pc_13bd4 ]
  store i64 0, i64* @rbx, align 8
  ret i64 %v2_13c0e
}

define i64 @function_13c3e() local_unnamed_addr {
dec_label_pc_13c3e:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_13c47() local_unnamed_addr {
dec_label_pc_13c47:
  %v0_13c47 = load i64, i64* @rbx, align 8
  store i64 %v0_13c47, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13c50() local_unnamed_addr {
dec_label_pc_13c50:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState10dumpDoubleEJvd(i64 %arg1) local_unnamed_addr {
dec_label_pc_13c60:
  store i64 %arg1, i64* @rdi, align 8
  %v0_13c61 = load i64, i64* @rdi, align 8
  store i64 %v0_13c61, i64* @rbx, align 8
  %v16_13c64 = load i64, i64* @rax, align 8
  ret i64 %v16_13c64
}

define i64 @function_13c90(i64 %arg1) local_unnamed_addr {
dec_label_pc_13c90:
  %v2_13c90 = load i64, i64* @rbx, align 8
  %v0_13c93 = load i64, i64* @rax, align 8
  store i64 %v2_13c90, i64* @rdx, align 8
  store i64 %v2_13c90, i64* @rdi, align 8
  %v2_13cab = sdiv i64 %v0_13c93, 4294967296
  store i64 %v2_13cab, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_13cab
}

define i64 @function_13cba() local_unnamed_addr {
dec_label_pc_13cba:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState7loadIntEJiv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13cd0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_13cd1 = load i64, i64* @rdi, align 8
  store i64 %v0_13cd1, i64* @rbx, align 8
  %v1_13cd4 = add i64 %v0_13cd1, 40
  %v2_13cd4 = inttoptr i64 %v1_13cd4 to i64*
  %v3_13cd4 = load i64, i64* %v2_13cd4, align 8
  store i64 %v3_13cd4, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 4, i64* @rcx, align 8
  %v0_13ce7 = load i64, i64* @rax, align 8
  ret i64 %v0_13ce7
}

define i64 @function_13d75() local_unnamed_addr {
dec_label_pc_13d75:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState12loadIntArrayEJP6JArrayIiEv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13d90:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_13d9a = load i64, i64* @rdi, align 8
  store i64 %v0_13d9a, i64* %rbp.global-to-local, align 8
  store i64 %v0_13d9a, i64* @rax, align 8
  %v1_13db3 = add i64 %v0_13d9a, 56
  %v2_13db3 = inttoptr i64 %v1_13db3 to i64*
  %v3_13db3 = load i64, i64* %v2_13db3, align 8
  %v1_13db7 = mul i64 %v0_13d9a, 4
  store i64 %v1_13db7, i64* @rcx, align 8
  %v1_13dbe = trunc i64 %v1_13db7 to i32
  %v3_13dbe = add i64 %v3_13db3, 8
  %v4_13dbe = inttoptr i64 %v3_13dbe to i32*
  %v5_13dbe = load i32, i32* %v4_13dbe, align 4
  %v10_13dc1 = icmp sgt i32 %v1_13dbe, %v5_13dbe
  br i1 %v10_13dc1, label %bb, label %dec_label_pc_13dc7

bb:                                               ; preds = %dec_label_pc_13d90
  %v11_13dc1 = call i64 @function_13f36()
  store i64 %v11_13dc1, i64* @rax, align 8
  %v0_13dc7.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_13dc7

dec_label_pc_13dc7:                               ; preds = %bb, %dec_label_pc_13d90
  %v6_13ddb6 = phi i64 [ %v11_13dc1, %bb ], [ %v0_13d9a, %dec_label_pc_13d90 ]
  %v0_13dc7 = phi i64 [ %v0_13dc7.pre, %bb ], [ %v0_13d9a, %dec_label_pc_13d90 ]
  %v1_13dc7 = add i64 %v0_13dc7, 40
  %v2_13dc7 = inttoptr i64 %v1_13dc7 to i64*
  %v3_13dc7 = load i64, i64* %v2_13dc7, align 8
  store i64 %v3_13dc7, i64* @rdi, align 8
  %v1_13dcb = icmp eq i64 %v3_13dc7, 0
  br i1 %v1_13dcb, label %bb253, label %dec_label_pc_13dd4

bb253:                                            ; preds = %dec_label_pc_13dc7
  %v1_13dce = call i64 @function_13f81()
  store i64 %v1_13dce, i64* @rax, align 8
  br label %dec_label_pc_13dd4

dec_label_pc_13dd4:                               ; preds = %bb253, %dec_label_pc_13dc7
  %v6_13ddb = phi i64 [ %v1_13dce, %bb253 ], [ %v6_13ddb6, %dec_label_pc_13dc7 ]
  store i64 0, i64* @rdx, align 8
  store i64 %v0_13d9a, i64* @rbx, align 8
  ret i64 %v6_13ddb
}

define i64 @function_13f36() local_unnamed_addr {
dec_label_pc_13f36:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_13f5a() local_unnamed_addr {
dec_label_pc_13f5a:
  %v1_13f5a = load i64, i64* @rax, align 8
  ret i64 %v1_13f5a
}

define i64 @function_13f5d() local_unnamed_addr {
dec_label_pc_13f5d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13f64(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_13f64:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13f6e() local_unnamed_addr {
dec_label_pc_13f6e:
  %v0_13f6e = load i64, i64* @r11, align 8
  store i64 %v0_13f6e, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13f78() local_unnamed_addr {
dec_label_pc_13f78:
  %v0_13f78 = load i64, i64* @rbx, align 8
  store i64 %v0_13f78, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13f81() local_unnamed_addr {
dec_label_pc_13f81:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState12loadUpvaluesEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13f90:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_13f9b = load i64, i64* @rdi, align 8
  store i64 %v0_13f9b, i64* @rax, align 8
  %v4_13fae = trunc i64 %v0_13f9b to i32
  %tmp245 = icmp slt i32 %v4_13fae, 1
  br i1 %tmp245, label %bb, label %dec_label_pc_13fb6

bb:                                               ; preds = %dec_label_pc_13f90
  %v6_13fb0 = call i64 @function_14090(i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_13fb0, i64* @rax, align 8
  br label %dec_label_pc_13fb6

dec_label_pc_13fb6:                               ; preds = %bb, %dec_label_pc_13f90
  %v0_13fc1 = phi i64 [ %v6_13fb0, %bb ], [ %v0_13f9b, %dec_label_pc_13f90 ]
  store i64 %v0_13fc1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v0_13fc1, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_13ff0() local_unnamed_addr {
dec_label_pc_13ff0:
  %r12.global-to-local = alloca i64, align 8
  %v0_13ff0 = load i64, i64* %r12.global-to-local, align 8
  %v1_13ff0 = add i64 %v0_13ff0, 40
  %v2_13ff0 = inttoptr i64 %v1_13ff0 to i64*
  %v3_13ff0 = load i64, i64* %v2_13ff0, align 8
  store i64 %v3_13ff0, i64* @rdi, align 8
  %v0_13ff5 = load i64, i64* @rbx, align 8
  %v1_13ff5 = add i64 %v0_13ff5, 1
  store i64 %v1_13ff5, i64* @rbx, align 8
  %v0_13ffc = load i64, i64* @rax, align 8
  ret i64 %v0_13ffc
}

define i64 @function_14002() local_unnamed_addr {
dec_label_pc_14002:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_14090(i64 %arg1) local_unnamed_addr {
dec_label_pc_14090:
  %v0_14090 = load i64, i64* inttoptr (i64 82071 to i64*), align 8
  store i64 %v0_14090, i64* @rax, align 8
  store i64 %arg1, i64* @rdx, align 8
  %v2_1409b = add i64 %arg1, 48
  %v3_1409b = inttoptr i64 %v2_1409b to i64*
  store i64 %v0_14090, i64* %v3_1409b, align 8
  %v0_140ad = load i64, i64* @rax, align 8
  ret i64 %v0_140ad
}

define i64 @function_140ae() local_unnamed_addr {
dec_label_pc_140ae:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_140b5() local_unnamed_addr {
dec_label_pc_140b5:
  %v0_140b5 = load i64, i64* @rbx, align 8
  store i64 %v0_140b5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState10loadHeaderEJvv(i64 %arg1) local_unnamed_addr {
dec_label_pc_140c0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_140c3 = load i64, i64* @rdi, align 8
  %v1_140c7 = add i64 %v0_140c3, 40
  %v2_140c7 = inttoptr i64 %v1_140c7 to i64*
  %v3_140c7 = load i64, i64* %v2_140c7, align 8
  store i64 %v3_140c7, i64* @rdi, align 8
  %v1_140cb = icmp eq i64 %v3_140c7, 0
  br i1 %v1_140cb, label %bb, label %dec_label_pc_140c0.dec_label_pc_140d4_crit_edge

dec_label_pc_140c0.dec_label_pc_140d4_crit_edge:  ; preds = %dec_label_pc_140c0
  %v2_140ce.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_140d4

bb:                                               ; preds = %dec_label_pc_140c0
  %v1_140ce = call i64 @function_1425d()
  store i64 %v1_140ce, i64* @rax, align 8
  br label %dec_label_pc_140d4

dec_label_pc_140d4:                               ; preds = %dec_label_pc_140c0.dec_label_pc_140d4_crit_edge, %bb
  %v2_140ce = phi i64 [ %v2_140ce.pre, %dec_label_pc_140c0.dec_label_pc_140d4_crit_edge ], [ %v1_140ce, %bb ]
  ret i64 %v2_140ce
}

define i64 @function_141b0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_141b0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_141b0 = load i64, i64* @rbx, align 8
  %v2_141b0 = add i64 %v0_141b0, 1
  %v17_141b0 = and i64 %v2_141b0, 4294967295
  store i64 %v17_141b0, i64* @rbx, align 8
  %v0_141b3 = load i64, i64* @rcx, align 8
  %v7_141b5 = icmp sgt i64 %v0_141b3, %v17_141b0
  br i1 %v7_141b5, label %dec_label_pc_141b0.dec_label_pc_141bb_crit_edge, label %bb

dec_label_pc_141b0.dec_label_pc_141bb_crit_edge:  ; preds = %dec_label_pc_141b0
  %v0_141c2.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_141bb

bb:                                               ; preds = %dec_label_pc_141b0
  %v11_141b5 = call i64 @function_14258(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_141b5, i64* @rax, align 8
  br label %dec_label_pc_141bb

dec_label_pc_141bb:                               ; preds = %dec_label_pc_141b0.dec_label_pc_141bb_crit_edge, %bb
  %v0_141c2 = phi i64 [ %v0_141c2.pre, %dec_label_pc_141b0.dec_label_pc_141bb_crit_edge ], [ %v11_141b5, %bb ]
  %v0_141bb = load i64, i64* @rbp, align 8
  %v1_141bb = add i64 %v0_141bb, 40
  %v2_141bb = inttoptr i64 %v1_141bb to i64*
  %v3_141bb = load i64, i64* %v2_141bb, align 8
  store i64 %v3_141bb, i64* @rdi, align 8
  ret i64 %v0_141c2
}

define i64 @function_141c8() local_unnamed_addr {
dec_label_pc_141c8:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_14258(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14258:
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  %v0_1425c = load i64, i64* @rax, align 8
  ret i64 %v0_1425c
}

define i64 @function_1425d() local_unnamed_addr {
dec_label_pc_1425d:
  %v0_14264 = load i64, i64* @rbx, align 8
  store i64 %v0_14264, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState12loadFunctionEJPNS1_9PrototypeEPNS1_9LuaStringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_14270:
  store i64 %arg1, i64* @rdi, align 8
  %v0_14272 = load i64, i64* @rdi, align 8
  store i64 %v0_14272, i64* @rbx, align 8
  store i64 82556, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1432e() local_unnamed_addr {
dec_label_pc_1432e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadStateC1EPN4java2io11InputStreamEPNS3_4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14340:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1434a = load i64, i64* @rdi, align 8
  store i64 %v0_1434a, i64* @rbx, align 8
  %v0_1434d = load i64, i64* @rax, align 8
  ret i64 %v0_1434d
}

define i64 @"_ZN4lang12lang_luaj$524callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_143a0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_143a0 = load i64, i64* %r12.global-to-local, align 8
  %v0_143a2 = load i64, i64* @rdi, align 8
  store i64 %v0_143a2, i64* %r12.global-to-local, align 8
  %v0_143a5 = load i64, i64* %rbp.global-to-local, align 8
  %v0_143a6 = load i64, i64* @rbx, align 8
  %v1_143a7 = add i64 %v0_143a2, 24
  %v2_143a7 = inttoptr i64 %v1_143a7 to i64*
  %v3_143a7 = load i64, i64* %v2_143a7, align 8
  store i64 %v3_143a7, i64* @rdi, align 8
  %v0_143ab = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_143ab, i64* %rbp.global-to-local, align 8
  %v1_143ae = inttoptr i64 %v3_143a7 to i64*
  %v2_143ae = load i64, i64* %v1_143ae, align 8
  store i64 %v2_143ae, i64* @rax, align 8
  store i64 %v2_143ae, i64* @rbx, align 8
  %v1_143ba = inttoptr i64 %v2_143ae to i64*
  %v2_143ba = load i64, i64* %v1_143ba, align 8
  store i64 %v2_143ba, i64* @rax, align 8
  store i64 %v2_143ae, i64* @rdi, align 8
  %v4_143c6 = trunc i64 %v2_143ba to i8
  %v5_143c6 = icmp eq i8 %v4_143c6, 0
  %v1_143c8 = icmp eq i1 %v5_143c6, false
  br i1 %v1_143c8, label %dec_label_pc_143de, label %dec_label_pc_143ca

dec_label_pc_143ca:                               ; preds = %dec_label_pc_143a0
  %v1_143ca = add i64 %v0_143a2, 32
  %v2_143ca = inttoptr i64 %v1_143ca to i64*
  %v3_143ca = load i64, i64* %v2_143ca, align 8
  store i64 %v3_143ca, i64* @rdi, align 8
  %v1_143d2 = inttoptr i64 %v3_143ca to i64*
  %v2_143d2 = load i64, i64* %v1_143d2, align 8
  store i64 %v2_143d2, i64* @rax, align 8
  store i64 %v2_143d2, i64* @rbx, align 8
  br label %dec_label_pc_143de

dec_label_pc_143de:                               ; preds = %dec_label_pc_143ca, %dec_label_pc_143a0
  %v0_143de = phi i64 [ %v2_143d2, %dec_label_pc_143ca ], [ %v2_143ae, %dec_label_pc_143a0 ]
  store i64 %v0_143de, i64* @rax, align 8
  store i64 %v0_143a6, i64* @rbx, align 8
  store i64 %v0_143a5, i64* %rbp.global-to-local, align 8
  store i64 %v0_143a0, i64* %r12.global-to-local, align 8
  ret i64 %v0_143de
}

define i64 @"_ZN4lang14lang_luaj$76$54callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_143f0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_143f0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_143f1 = load i64, i64* @rbx, align 8
  %v0_143f2 = load i64, i64* @rdi, align 8
  store i64 %v0_143f2, i64* @rbx, align 8
  %v1_143f9 = add i64 %v0_143f2, 24
  %v2_143f9 = inttoptr i64 %v1_143f9 to i64*
  %v3_143f9 = load i64, i64* %v2_143f9, align 8
  store i64 %v3_143f9, i64* @rdi, align 8
  %v1_143fd = inttoptr i64 %v3_143f9 to i64*
  %v2_143fd = load i64, i64* %v1_143fd, align 8
  store i64 %v2_143fd, i64* @rax, align 8
  %v1_14406 = inttoptr i64 %v2_143fd to i64*
  %v2_14406 = load i64, i64* %v1_14406, align 8
  store i64 %v2_14406, i64* @rdx, align 8
  store i64 %v2_143fd, i64* @rdi, align 8
  %v4_14412 = trunc i64 %v2_143fd to i8
  %v5_14412 = icmp eq i8 %v4_14412, 0
  br i1 %v5_14412, label %dec_label_pc_14428, label %dec_label_pc_14416

dec_label_pc_14416:                               ; preds = %dec_label_pc_144f8, %dec_label_pc_143f0
  %v0_14416 = load i64, i64* inttoptr (i64 82973 to i64*), align 8
  store i64 %v0_14416, i64* @rax, align 8
  store i64 %v0_143f1, i64* @rbx, align 8
  store i64 %v0_143f0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_14416

dec_label_pc_14428:                               ; preds = %dec_label_pc_143f0
  %v1_14428 = add i64 %v0_143f2, 32
  %v2_14428 = inttoptr i64 %v1_14428 to i64*
  %v3_14428 = load i64, i64* %v2_14428, align 8
  store i64 %v3_14428, i64* @rdi, align 8
  %v1_1442c = inttoptr i64 %v3_14428 to i64*
  %v2_1442c = load i64, i64* %v1_1442c, align 8
  store i64 %v2_1442c, i64* @rax, align 8
  %v1_14435 = add i64 %v0_143f2, 40
  %v2_14435 = inttoptr i64 %v1_14435 to i64*
  %v3_14435 = load i64, i64* %v2_14435, align 8
  store i64 %v3_14435, i64* @rdi, align 8
  store i64 %v2_1442c, i64* %rbp.global-to-local, align 8
  %v1_1443f = inttoptr i64 %v3_14435 to i64*
  %v2_1443f = load i64, i64* %v1_1443f, align 8
  store i64 %v2_1443f, i64* @rax, align 8
  %v1_14448 = inttoptr i64 %v2_1443f to i64*
  %v2_14448 = load i64, i64* %v1_14448, align 8
  store i64 %v2_14448, i64* @rdx, align 8
  store i64 %v2_1443f, i64* @rdi, align 8
  %v4_14454 = trunc i64 %v2_1443f to i8
  %v5_14454 = icmp eq i8 %v4_14454, 0
  %v1_14456 = icmp eq i1 %v5_14454, false
  br i1 %v1_14456, label %dec_label_pc_1448d.preheader, label %dec_label_pc_144f8

dec_label_pc_1448d.preheader:                     ; preds = %dec_label_pc_14428
  %v3_1448d250 = load i64, i64* %v2_14435, align 8
  store i64 %v3_1448d250, i64* @rdi, align 8
  %v1_14494251 = inttoptr i64 %v3_1448d250 to i64*
  %v2_14494252 = load i64, i64* %v1_14494251, align 8
  store i64 %v2_14494252, i64* @rax, align 8
  %v1_1449d253 = inttoptr i64 %v2_14494252 to i64*
  %v2_1449d254 = load i64, i64* %v1_1449d253, align 8
  store i64 %v2_1449d254, i64* @rdx, align 8
  store i64 %v2_14494252, i64* @rdi, align 8
  %v4_144a9255 = trunc i64 %v2_14494252 to i8
  %v5_144a9256 = icmp eq i8 %v4_144a9255, 0
  %v1_144ab257 = icmp eq i1 %v5_144a9256, false
  br i1 %v1_144ab257, label %dec_label_pc_14460, label %dec_label_pc_144ad

dec_label_pc_14460:                               ; preds = %dec_label_pc_1448d.preheader, %dec_label_pc_1447d
  %v3_14460 = load i64, i64* %v2_143f9, align 8
  store i64 %v3_14460, i64* @rdi, align 8
  %v1_14464 = inttoptr i64 %v3_14460 to i64*
  %v2_14464 = load i64, i64* %v1_14464, align 8
  store i64 %v2_14464, i64* @rax, align 8
  %v1_1446d = inttoptr i64 %v2_14464 to i64*
  %v2_1446d = load i64, i64* %v1_1446d, align 8
  store i64 %v2_1446d, i64* @rdx, align 8
  store i64 %v2_14464, i64* @rdi, align 8
  %v4_14479 = trunc i64 %v2_14464 to i8
  %v5_14479 = icmp eq i8 %v4_14479, 0
  %v1_1447b = icmp eq i1 %v5_14479, false
  br i1 %v1_1447b, label %dec_label_pc_144ad, label %dec_label_pc_1447d

dec_label_pc_1447d:                               ; preds = %dec_label_pc_14460
  %v3_1447d = load i64, i64* %v2_14428, align 8
  store i64 %v3_1447d, i64* @rdi, align 8
  %v1_14481 = inttoptr i64 %v3_1447d to i64*
  %v2_14481 = load i64, i64* %v1_14481, align 8
  store i64 %v2_14481, i64* @rax, align 8
  store i64 %v2_14481, i64* %rbp.global-to-local, align 8
  %v3_1448d = load i64, i64* %v2_14435, align 8
  store i64 %v3_1448d, i64* @rdi, align 8
  %v1_14494 = inttoptr i64 %v3_1448d to i64*
  %v2_14494 = load i64, i64* %v1_14494, align 8
  store i64 %v2_14494, i64* @rax, align 8
  %v1_1449d = inttoptr i64 %v2_14494 to i64*
  %v2_1449d = load i64, i64* %v1_1449d, align 8
  store i64 %v2_1449d, i64* @rdx, align 8
  store i64 %v2_14494, i64* @rdi, align 8
  %v4_144a9 = trunc i64 %v2_14494 to i8
  %v5_144a9 = icmp eq i8 %v4_144a9, 0
  %v1_144ab = icmp eq i1 %v5_144a9, false
  br i1 %v1_144ab, label %dec_label_pc_14460, label %dec_label_pc_144ad

dec_label_pc_144ad:                               ; preds = %dec_label_pc_1447d, %dec_label_pc_14460, %dec_label_pc_1448d.preheader
  %v3_144ad = load i64, i64* %v2_14435, align 8
  store i64 %v3_144ad, i64* @rdi, align 8
  %v1_144b4 = inttoptr i64 %v3_144ad to i64*
  %v2_144b4 = load i64, i64* %v1_144b4, align 8
  store i64 %v2_144b4, i64* @rax, align 8
  %v1_144bd = inttoptr i64 %v2_144b4 to i64*
  %v2_144bd = load i64, i64* %v1_144bd, align 8
  store i64 %v2_144bd, i64* @rdx, align 8
  store i64 %v2_144b4, i64* @rdi, align 8
  %v4_144c9 = trunc i64 %v2_144b4 to i8
  %v5_144c9 = icmp eq i8 %v4_144c9, 0
  br i1 %v5_144c9, label %dec_label_pc_144e0, label %dec_label_pc_144cd

dec_label_pc_144cd:                               ; preds = %dec_label_pc_144e0, %dec_label_pc_144ad
  %v0_144cd = load i64, i64* inttoptr (i64 83156 to i64*), align 8
  store i64 %v0_144cd, i64* @rax, align 8
  store i64 %v0_143f1, i64* @rbx, align 8
  store i64 %v0_143f0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_144cd

dec_label_pc_144e0:                               ; preds = %dec_label_pc_144ad
  %v1_144e0 = add i64 %v0_143f2, 48
  %v2_144e0 = inttoptr i64 %v1_144e0 to i64*
  %v3_144e0 = load i64, i64* %v2_144e0, align 8
  store i64 %v3_144e0, i64* @rdi, align 8
  %v1_144e7 = inttoptr i64 %v3_144e0 to i64*
  %v2_144e7 = load i64, i64* %v1_144e7, align 8
  store i64 %v2_144e7, i64* @rax, align 8
  br label %dec_label_pc_144cd

dec_label_pc_144f8:                               ; preds = %dec_label_pc_14428
  %v1_144f8 = add i64 %v0_143f2, 48
  %v2_144f8 = inttoptr i64 %v1_144f8 to i64*
  %v3_144f8 = load i64, i64* %v2_144f8, align 8
  store i64 %v3_144f8, i64* @rdi, align 8
  %v1_144ff = inttoptr i64 %v3_144f8 to i64*
  %v2_144ff = load i64, i64* %v1_144ff, align 8
  store i64 %v2_144ff, i64* @rax, align 8
  br label %dec_label_pc_14416
}

define i64 @"_ZN4lang12lang_luaj$394callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14510:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_14510 = load i64, i64* %r13.global-to-local, align 8
  %v0_14512 = load i64, i64* %r12.global-to-local, align 8
  %v0_14514 = load i64, i64* @rdi, align 8
  store i64 %v0_14514, i64* %r12.global-to-local, align 8
  %v0_14517 = load i64, i64* %rbp.global-to-local, align 8
  %v0_14518 = load i64, i64* @rbx, align 8
  %v0_14519 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_14519, i64* @rbx, align 8
  %v0_1451c = load i64, i64* @rdx, align 8
  store i64 %v0_1451c, i64* %rbp.global-to-local, align 8
  store i64 %v0_14519, i64* @rdi, align 8
  store i64 %v0_14519, i64* @rax, align 8
  store i64 %v0_1451c, i64* %rsi.global-to-local, align 8
  %v4_14532 = trunc i64 %v0_14519 to i8
  %v5_14532 = icmp eq i8 %v4_14532, 0
  br i1 %v5_14532, label %dec_label_pc_14550, label %dec_label_pc_14536

dec_label_pc_14536:                               ; preds = %dec_label_pc_145a0, %dec_label_pc_14510
  %v0_14536 = load i64, i64* inttoptr (i64 83261 to i64*), align 8
  store i64 %v0_14536, i64* @rax, align 8
  store i64 %v0_14518, i64* @rbx, align 8
  store i64 %v0_14517, i64* %rbp.global-to-local, align 8
  store i64 %v0_14512, i64* %r12.global-to-local, align 8
  store i64 %v0_14510, i64* %r13.global-to-local, align 8
  ret i64 %v0_14536

dec_label_pc_14550:                               ; preds = %dec_label_pc_14510
  %v1_14550 = add i64 %v0_14514, 24
  %v2_14550 = inttoptr i64 %v1_14550 to i64*
  %v3_14550 = load i64, i64* %v2_14550, align 8
  store i64 %v3_14550, i64* @rdi, align 8
  store i64 %v0_14519, i64* %rsi.global-to-local, align 8
  %v1_14558 = inttoptr i64 %v3_14550 to i64*
  %v2_14558 = load i64, i64* %v1_14558, align 8
  store i64 %v2_14558, i64* @rax, align 8
  %v3_14561 = load i64, i64* %v2_14550, align 8
  store i64 %v3_14561, i64* @rdi, align 8
  store i64 %v2_14558, i64* %r13.global-to-local, align 8
  store i64 %v0_1451c, i64* %rsi.global-to-local, align 8
  %v1_1456c = inttoptr i64 %v3_14561 to i64*
  %v2_1456c = load i64, i64* %v1_1456c, align 8
  store i64 %v2_1456c, i64* @rax, align 8
  %v1_14575 = inttoptr i64 %v2_14558 to i64*
  %v2_14575 = load i64, i64* %v1_14575, align 8
  store i64 %v2_14575, i64* @rdx, align 8
  store i64 %v2_1456c, i64* %rsi.global-to-local, align 8
  store i64 %v2_14558, i64* @rdi, align 8
  %v4_14585 = trunc i64 %v2_1456c to i8
  %v5_14585 = icmp eq i8 %v4_14585, 0
  %v1_14587 = icmp eq i1 %v5_14585, false
  br i1 %v1_14587, label %dec_label_pc_145a0, label %dec_label_pc_14589

dec_label_pc_14589:                               ; preds = %dec_label_pc_14550
  %v0_14589 = load i64, i64* inttoptr (i64 83344 to i64*), align 16
  store i64 %v0_14589, i64* @rax, align 8
  store i64 %v0_14518, i64* @rbx, align 8
  store i64 %v0_14517, i64* %rbp.global-to-local, align 8
  store i64 %v0_14512, i64* %r12.global-to-local, align 8
  store i64 %v0_14510, i64* %r13.global-to-local, align 8
  ret i64 %v0_14589

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14550
  %v1_145a0 = add i64 %v0_14514, 32
  %v2_145a0 = inttoptr i64 %v1_145a0 to i64*
  %v3_145a0 = load i64, i64* %v2_145a0, align 8
  store i64 %v3_145a0, i64* @rdi, align 8
  store i64 %v0_1451c, i64* @rdx, align 8
  store i64 %v0_14519, i64* %rsi.global-to-local, align 8
  %v1_145ab = inttoptr i64 %v3_145a0 to i64*
  %v2_145ab = load i64, i64* %v1_145ab, align 8
  store i64 %v2_145ab, i64* @rax, align 8
  br label %dec_label_pc_14536
}

define i64 @"_ZN4lang14lang_luaj$77$54callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_145c0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_145c0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_145c1 = load i64, i64* @rbx, align 8
  %v0_145c2 = load i64, i64* @rdi, align 8
  store i64 %v0_145c2, i64* @rbx, align 8
  %v1_145c9 = add i64 %v0_145c2, 24
  %v2_145c9 = inttoptr i64 %v1_145c9 to i64*
  %v3_145c9 = load i64, i64* %v2_145c9, align 8
  store i64 %v3_145c9, i64* @rdi, align 8
  %v1_145cd = inttoptr i64 %v3_145c9 to i64*
  %v2_145cd = load i64, i64* %v1_145cd, align 8
  store i64 %v2_145cd, i64* @rax, align 8
  %v1_145d6 = inttoptr i64 %v2_145cd to i64*
  %v2_145d6 = load i64, i64* %v1_145d6, align 8
  store i64 %v2_145d6, i64* @rdx, align 8
  store i64 %v2_145cd, i64* @rdi, align 8
  %v4_145e2 = trunc i64 %v2_145cd to i8
  %v5_145e2 = icmp eq i8 %v4_145e2, 0
  br i1 %v5_145e2, label %dec_label_pc_145f8, label %dec_label_pc_145e6

dec_label_pc_145e6:                               ; preds = %dec_label_pc_146c8, %dec_label_pc_145c0
  %v0_145e6 = load i64, i64* inttoptr (i64 83437 to i64*), align 8
  store i64 %v0_145e6, i64* @rax, align 8
  store i64 %v0_145c1, i64* @rbx, align 8
  store i64 %v0_145c0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_145e6

dec_label_pc_145f8:                               ; preds = %dec_label_pc_145c0
  %v1_145f8 = add i64 %v0_145c2, 32
  %v2_145f8 = inttoptr i64 %v1_145f8 to i64*
  %v3_145f8 = load i64, i64* %v2_145f8, align 8
  store i64 %v3_145f8, i64* @rdi, align 8
  %v1_145fc = inttoptr i64 %v3_145f8 to i64*
  %v2_145fc = load i64, i64* %v1_145fc, align 8
  store i64 %v2_145fc, i64* @rax, align 8
  %v1_14605 = add i64 %v0_145c2, 40
  %v2_14605 = inttoptr i64 %v1_14605 to i64*
  %v3_14605 = load i64, i64* %v2_14605, align 8
  store i64 %v3_14605, i64* @rdi, align 8
  store i64 %v2_145fc, i64* %rbp.global-to-local, align 8
  %v1_1460f = inttoptr i64 %v3_14605 to i64*
  %v2_1460f = load i64, i64* %v1_1460f, align 8
  store i64 %v2_1460f, i64* @rax, align 8
  %v1_14618 = inttoptr i64 %v2_1460f to i64*
  %v2_14618 = load i64, i64* %v1_14618, align 8
  store i64 %v2_14618, i64* @rdx, align 8
  store i64 %v2_1460f, i64* @rdi, align 8
  %v4_14624 = trunc i64 %v2_1460f to i8
  %v5_14624 = icmp eq i8 %v4_14624, 0
  %v1_14626 = icmp eq i1 %v5_14624, false
  br i1 %v1_14626, label %dec_label_pc_1465d.preheader, label %dec_label_pc_146c8

dec_label_pc_1465d.preheader:                     ; preds = %dec_label_pc_145f8
  %v3_1465d250 = load i64, i64* %v2_14605, align 8
  store i64 %v3_1465d250, i64* @rdi, align 8
  %v1_14664251 = inttoptr i64 %v3_1465d250 to i64*
  %v2_14664252 = load i64, i64* %v1_14664251, align 8
  store i64 %v2_14664252, i64* @rax, align 8
  %v1_1466d253 = inttoptr i64 %v2_14664252 to i64*
  %v2_1466d254 = load i64, i64* %v1_1466d253, align 8
  store i64 %v2_1466d254, i64* @rdx, align 8
  store i64 %v2_14664252, i64* @rdi, align 8
  %v4_14679255 = trunc i64 %v2_14664252 to i8
  %v5_14679256 = icmp eq i8 %v4_14679255, 0
  %v1_1467b257 = icmp eq i1 %v5_14679256, false
  br i1 %v1_1467b257, label %dec_label_pc_14630, label %dec_label_pc_1467d

dec_label_pc_14630:                               ; preds = %dec_label_pc_1465d.preheader, %dec_label_pc_1464d
  %v3_14630 = load i64, i64* %v2_145c9, align 8
  store i64 %v3_14630, i64* @rdi, align 8
  %v1_14634 = inttoptr i64 %v3_14630 to i64*
  %v2_14634 = load i64, i64* %v1_14634, align 8
  store i64 %v2_14634, i64* @rax, align 8
  %v1_1463d = inttoptr i64 %v2_14634 to i64*
  %v2_1463d = load i64, i64* %v1_1463d, align 8
  store i64 %v2_1463d, i64* @rdx, align 8
  store i64 %v2_14634, i64* @rdi, align 8
  %v4_14649 = trunc i64 %v2_14634 to i8
  %v5_14649 = icmp eq i8 %v4_14649, 0
  %v1_1464b = icmp eq i1 %v5_14649, false
  br i1 %v1_1464b, label %dec_label_pc_1467d, label %dec_label_pc_1464d

dec_label_pc_1464d:                               ; preds = %dec_label_pc_14630
  %v3_1464d = load i64, i64* %v2_145f8, align 8
  store i64 %v3_1464d, i64* @rdi, align 8
  %v1_14651 = inttoptr i64 %v3_1464d to i64*
  %v2_14651 = load i64, i64* %v1_14651, align 8
  store i64 %v2_14651, i64* @rax, align 8
  store i64 %v2_14651, i64* %rbp.global-to-local, align 8
  %v3_1465d = load i64, i64* %v2_14605, align 8
  store i64 %v3_1465d, i64* @rdi, align 8
  %v1_14664 = inttoptr i64 %v3_1465d to i64*
  %v2_14664 = load i64, i64* %v1_14664, align 8
  store i64 %v2_14664, i64* @rax, align 8
  %v1_1466d = inttoptr i64 %v2_14664 to i64*
  %v2_1466d = load i64, i64* %v1_1466d, align 8
  store i64 %v2_1466d, i64* @rdx, align 8
  store i64 %v2_14664, i64* @rdi, align 8
  %v4_14679 = trunc i64 %v2_14664 to i8
  %v5_14679 = icmp eq i8 %v4_14679, 0
  %v1_1467b = icmp eq i1 %v5_14679, false
  br i1 %v1_1467b, label %dec_label_pc_14630, label %dec_label_pc_1467d

dec_label_pc_1467d:                               ; preds = %dec_label_pc_1464d, %dec_label_pc_14630, %dec_label_pc_1465d.preheader
  %v3_1467d = load i64, i64* %v2_14605, align 8
  store i64 %v3_1467d, i64* @rdi, align 8
  %v1_14684 = inttoptr i64 %v3_1467d to i64*
  %v2_14684 = load i64, i64* %v1_14684, align 8
  store i64 %v2_14684, i64* @rax, align 8
  %v1_1468d = inttoptr i64 %v2_14684 to i64*
  %v2_1468d = load i64, i64* %v1_1468d, align 8
  store i64 %v2_1468d, i64* @rdx, align 8
  store i64 %v2_14684, i64* @rdi, align 8
  %v4_14699 = trunc i64 %v2_14684 to i8
  %v5_14699 = icmp eq i8 %v4_14699, 0
  br i1 %v5_14699, label %dec_label_pc_146b0, label %dec_label_pc_1469d

dec_label_pc_1469d:                               ; preds = %dec_label_pc_146b0, %dec_label_pc_1467d
  %v0_1469d = load i64, i64* inttoptr (i64 83620 to i64*), align 8
  store i64 %v0_1469d, i64* @rax, align 8
  store i64 %v0_145c1, i64* @rbx, align 8
  store i64 %v0_145c0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_1469d

dec_label_pc_146b0:                               ; preds = %dec_label_pc_1467d
  %v1_146b0 = add i64 %v0_145c2, 48
  %v2_146b0 = inttoptr i64 %v1_146b0 to i64*
  %v3_146b0 = load i64, i64* %v2_146b0, align 8
  store i64 %v3_146b0, i64* @rdi, align 8
  %v1_146b7 = inttoptr i64 %v3_146b0 to i64*
  %v2_146b7 = load i64, i64* %v1_146b7, align 8
  store i64 %v2_146b7, i64* @rax, align 8
  br label %dec_label_pc_1469d

dec_label_pc_146c8:                               ; preds = %dec_label_pc_145f8
  %v1_146c8 = add i64 %v0_145c2, 48
  %v2_146c8 = inttoptr i64 %v1_146c8 to i64*
  %v3_146c8 = load i64, i64* %v2_146c8, align 8
  store i64 %v3_146c8, i64* @rdi, align 8
  %v1_146cf = inttoptr i64 %v3_146c8 to i64*
  %v2_146cf = load i64, i64* %v1_146cf, align 8
  store i64 %v2_146cf, i64* @rax, align 8
  br label %dec_label_pc_145e6
}

define i64 @"_ZN4lang12lang_luaj$434callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_146e0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_146e0 = load i64, i64* %r12.global-to-local, align 8
  %v0_146e2 = load i64, i64* @rdi, align 8
  store i64 %v0_146e2, i64* %r12.global-to-local, align 8
  %v0_146e5 = load i64, i64* %rbp.global-to-local, align 8
  %v0_146e6 = load i64, i64* @rbx, align 8
  %v1_146e7 = add i64 %v0_146e2, 24
  %v2_146e7 = inttoptr i64 %v1_146e7 to i64*
  %v3_146e7 = load i64, i64* %v2_146e7, align 8
  store i64 %v3_146e7, i64* @rdi, align 8
  %v0_146eb = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_146eb, i64* %rbp.global-to-local, align 8
  %v1_146ee = inttoptr i64 %v3_146e7 to i64*
  %v2_146ee = load i64, i64* %v1_146ee, align 8
  store i64 %v2_146ee, i64* @rax, align 8
  store i64 %v2_146ee, i64* @rbx, align 8
  %v1_146fa = inttoptr i64 %v2_146ee to i64*
  %v2_146fa = load i64, i64* %v1_146fa, align 8
  store i64 %v2_146fa, i64* @rax, align 8
  store i64 %v2_146ee, i64* @rdi, align 8
  %v4_14706 = trunc i64 %v2_146fa to i8
  %v5_14706 = icmp eq i8 %v4_14706, 0
  br i1 %v5_14706, label %dec_label_pc_14718, label %dec_label_pc_1470a

dec_label_pc_1470a:                               ; preds = %dec_label_pc_14784, %dec_label_pc_14760, %dec_label_pc_1473c, %dec_label_pc_14718, %dec_label_pc_146e0
  %v0_1470a = phi i64 [ %v2_1478c, %dec_label_pc_14784 ], [ %v2_14768, %dec_label_pc_14760 ], [ %v2_14744, %dec_label_pc_1473c ], [ %v2_14720, %dec_label_pc_14718 ], [ %v2_146ee, %dec_label_pc_146e0 ]
  store i64 %v0_1470a, i64* @rax, align 8
  store i64 %v0_146e6, i64* @rbx, align 8
  store i64 %v0_146e5, i64* %rbp.global-to-local, align 8
  store i64 %v0_146e0, i64* %r12.global-to-local, align 8
  ret i64 %v0_1470a

dec_label_pc_14718:                               ; preds = %dec_label_pc_146e0
  %v1_14718 = add i64 %v0_146e2, 32
  %v2_14718 = inttoptr i64 %v1_14718 to i64*
  %v3_14718 = load i64, i64* %v2_14718, align 8
  store i64 %v3_14718, i64* @rdi, align 8
  %v1_14720 = inttoptr i64 %v3_14718 to i64*
  %v2_14720 = load i64, i64* %v1_14720, align 8
  store i64 %v2_14720, i64* @rax, align 8
  store i64 %v2_14720, i64* @rbx, align 8
  %v1_1472c = inttoptr i64 %v2_14720 to i64*
  %v2_1472c = load i64, i64* %v1_1472c, align 8
  store i64 %v2_1472c, i64* @rax, align 8
  store i64 %v2_14720, i64* @rdi, align 8
  %v4_14738 = trunc i64 %v2_1472c to i8
  %v5_14738 = icmp eq i8 %v4_14738, 0
  %v1_1473a = icmp eq i1 %v5_14738, false
  br i1 %v1_1473a, label %dec_label_pc_1470a, label %dec_label_pc_1473c

dec_label_pc_1473c:                               ; preds = %dec_label_pc_14718
  %v1_1473c = add i64 %v0_146e2, 40
  %v2_1473c = inttoptr i64 %v1_1473c to i64*
  %v3_1473c = load i64, i64* %v2_1473c, align 8
  store i64 %v3_1473c, i64* @rdi, align 8
  %v1_14744 = inttoptr i64 %v3_1473c to i64*
  %v2_14744 = load i64, i64* %v1_14744, align 8
  store i64 %v2_14744, i64* @rax, align 8
  store i64 %v2_14744, i64* @rbx, align 8
  %v1_14750 = inttoptr i64 %v2_14744 to i64*
  %v2_14750 = load i64, i64* %v1_14750, align 8
  store i64 %v2_14750, i64* @rax, align 8
  store i64 %v2_14744, i64* @rdi, align 8
  %v4_1475c = trunc i64 %v2_14750 to i8
  %v5_1475c = icmp eq i8 %v4_1475c, 0
  %v1_1475e = icmp eq i1 %v5_1475c, false
  br i1 %v1_1475e, label %dec_label_pc_1470a, label %dec_label_pc_14760

dec_label_pc_14760:                               ; preds = %dec_label_pc_1473c
  %v1_14760 = add i64 %v0_146e2, 48
  %v2_14760 = inttoptr i64 %v1_14760 to i64*
  %v3_14760 = load i64, i64* %v2_14760, align 8
  store i64 %v3_14760, i64* @rdi, align 8
  %v1_14768 = inttoptr i64 %v3_14760 to i64*
  %v2_14768 = load i64, i64* %v1_14768, align 8
  store i64 %v2_14768, i64* @rax, align 8
  store i64 %v2_14768, i64* @rbx, align 8
  %v1_14774 = inttoptr i64 %v2_14768 to i64*
  %v2_14774 = load i64, i64* %v1_14774, align 8
  store i64 %v2_14774, i64* @rax, align 8
  store i64 %v2_14768, i64* @rdi, align 8
  %v4_14780 = trunc i64 %v2_14774 to i8
  %v5_14780 = icmp eq i8 %v4_14780, 0
  %v1_14782 = icmp eq i1 %v5_14780, false
  br i1 %v1_14782, label %dec_label_pc_1470a, label %dec_label_pc_14784

dec_label_pc_14784:                               ; preds = %dec_label_pc_14760
  %v1_14784 = add i64 %v0_146e2, 56
  %v2_14784 = inttoptr i64 %v1_14784 to i64*
  %v3_14784 = load i64, i64* %v2_14784, align 8
  store i64 %v3_14784, i64* @rdi, align 8
  %v1_1478c = inttoptr i64 %v3_14784 to i64*
  %v2_1478c = load i64, i64* %v1_1478c, align 8
  store i64 %v2_1478c, i64* @rax, align 8
  store i64 %v2_1478c, i64* @rbx, align 8
  br label %dec_label_pc_1470a
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame11shortsourceEJPN4java4lang6StringEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_147a0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_147a0 = load i64, i64* @rbx, align 8
  %v0_147a1 = load i64, i64* @rdi, align 8
  store i64 %v0_147a1, i64* @rbx, align 8
  %v1_147a4 = add i64 %v0_147a1, 8
  %v2_147a4 = inttoptr i64 %v1_147a4 to i64*
  %v3_147a4 = load i64, i64* %v2_147a4, align 8
  store i64 %v3_147a4, i64* @rdi, align 8
  %v1_147a8 = inttoptr i64 %v3_147a4 to i64*
  %v2_147a8 = load i64, i64* %v1_147a8, align 8
  store i64 %v2_147a8, i64* @rax, align 8
  %v4_147b1 = trunc i64 %v2_147a8 to i8
  %v5_147b1 = icmp eq i8 %v4_147b1, 0
  %v0_147b3 = load i64, i64* inttoptr (i64 83898 to i64*), align 8
  store i64 %v0_147b3, i64* @rdx, align 8
  %v1_147ba = icmp eq i1 %v5_147b1, false
  br i1 %v1_147ba, label %dec_label_pc_147c8, label %dec_label_pc_147bc

dec_label_pc_147bc:                               ; preds = %dec_label_pc_147a0
  ret i64 %v2_147a8

dec_label_pc_147c8:                               ; preds = %dec_label_pc_147a0
  %v3_147c8 = load i64, i64* %v2_147a4, align 8
  store i64 %v3_147c8, i64* @rdi, align 8
  %v1_147cc = inttoptr i64 %v3_147c8 to i64*
  %v2_147cc = load i64, i64* %v1_147cc, align 8
  store i64 %v2_147cc, i64* @rax, align 8
  %v1_147d5 = add i64 %v2_147cc, 8
  %v2_147d5 = inttoptr i64 %v1_147d5 to i64*
  %v3_147d5 = load i64, i64* %v2_147d5, align 8
  store i64 %v3_147d5, i64* @rdi, align 8
  %v1_147d9 = inttoptr i64 %v3_147d5 to i64*
  %v2_147d9 = load i64, i64* %v1_147d9, align 8
  store i64 %v2_147d9, i64* @rdx, align 8
  store i64 %v2_147d9, i64* @rax, align 8
  store i64 %v0_147a0, i64* @rbx, align 8
  ret i64 %v2_147d9
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$DebugInfo8funcinfoEJvPNS1_11LuaFunctionE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_147f0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_147f0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_147f1 = load i64, i64* @rbx, align 8
  %v0_147f2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_147f2, i64* %rbp.global-to-local, align 8
  %v0_147f5 = load i64, i64* @rdi, align 8
  store i64 %v0_147f5, i64* @rbx, align 8
  store i64 %v0_147f2, i64* @rdi, align 8
  store i64 %v0_147f2, i64* @rax, align 8
  %v4_14808 = trunc i64 %v0_147f2 to i8
  %v5_14808 = icmp eq i8 %v4_14808, 0
  br i1 %v5_14808, label %dec_label_pc_14870, label %dec_label_pc_1480c

dec_label_pc_1480c:                               ; preds = %dec_label_pc_147f0
  store i64 %v0_147f2, i64* @rax, align 8
  store i64 %v0_147f2, i64* @rdi, align 8
  %v1_14819 = add i64 %v0_147f2, 8
  %v2_14819 = inttoptr i64 %v1_14819 to i64*
  %v3_14819 = load i64, i64* %v2_14819, align 8
  store i64 %v3_14819, i64* %rbp.global-to-local, align 8
  %v1_1481d = add i64 %v3_14819, 56
  %v2_1481d = inttoptr i64 %v1_1481d to i64*
  %v3_1481d = load i64, i64* %v2_1481d, align 8
  store i64 %v3_1481d, i64* @rdi, align 8
  %v1_14821 = icmp eq i64 %v3_1481d, 0
  %v1_1482a = inttoptr i64 %v3_1481d to i64*
  %storemerge.in = select i1 %v1_14821, i64* inttoptr (i64 84151 to i64*), i64* %v1_1482a
  %storemerge = load i64, i64* %storemerge.in, align 8
  store i64 %storemerge, i64* @rax, align 8
  %v2_14833 = add i64 %v0_147f5, 32
  %v3_14833 = inttoptr i64 %v2_14833 to i64*
  store i64 %storemerge, i64* %v3_14833, align 8
  %v0_14837 = load i64, i64* %rbp.global-to-local, align 8
  %v1_14837 = add i64 %v0_14837, 64
  %v2_14837 = inttoptr i64 %v1_14837 to i32*
  %v3_14837 = load i32, i32* %v2_14837, align 4
  %v4_14837 = zext i32 %v3_14837 to i64
  store i64 %v4_14837, i64* @rax, align 8
  store i64 %v0_14837, i64* @rdi, align 8
  %v1_1483d = add i64 %v0_14837, ptrtoint (i32** @global_var_44.7477 to i64)
  %v2_1483d = inttoptr i64 %v1_1483d to i32*
  %v3_1483d = load i32, i32* %v2_1483d, align 4
  %v4_1483d = zext i32 %v3_1483d to i64
  store i64 %v4_1483d, i64* @rdx, align 8
  %v5_14840 = icmp eq i32 %v3_14837, 0
  %v2_14842 = load i64, i64* @rbx, align 8
  %v3_14842 = add i64 %v2_14842, 44
  %v4_14842 = inttoptr i64 %v3_14842 to i32*
  store i32 %v3_14837, i32* %v4_14842, align 4
  %v0_14845 = load i64, i64* inttoptr (i64 84044 to i64*), align 8
  store i64 %v0_14845, i64* @rax, align 8
  %v1_1484c = icmp eq i1 %v5_14840, false
  %v3_1484c = load i64, i64* inttoptr (i64 84052 to i64*), align 8
  %v4_1484c = select i1 %v1_1484c, i64 %v3_1484c, i64 %v0_14845
  store i64 %v4_1484c, i64* @rax, align 8
  %v0_14854 = load i64, i64* @rdx, align 8
  %v1_14854 = trunc i64 %v0_14854 to i32
  %v2_14854 = load i64, i64* @rbx, align 8
  %v3_14854 = add i64 %v2_14854, 48
  %v4_14854 = inttoptr i64 %v3_14854 to i32*
  store i32 %v1_14854, i32* %v4_14854, align 4
  %v0_14857 = load i64, i64* @rax, align 8
  %v1_14857 = load i64, i64* @rbx, align 8
  %v2_14857 = add i64 %v1_14857, 24
  %v3_14857 = inttoptr i64 %v2_14857 to i64*
  store i64 %v0_14857, i64* %v3_14857, align 8
  %v0_1485b = load i64, i64* %rbp.global-to-local, align 8
  %v1_1485b = inttoptr i64 %v0_1485b to i64*
  %v2_1485b = load i64, i64* %v1_1485b, align 8
  store i64 %v2_1485b, i64* @rax, align 8
  %v1_14862 = load i64, i64* @rbx, align 8
  %v2_14862 = add i64 %v1_14862, 64
  %v3_14862 = inttoptr i64 %v2_14862 to i64*
  store i64 %v2_1485b, i64* %v3_14862, align 8
  store i64 %v0_147f1, i64* @rbx, align 8
  store i64 %v0_147f0, i64* %rbp.global-to-local, align 8
  %v0_1486c = load i64, i64* @rax, align 8
  ret i64 %v0_1486c

dec_label_pc_14870:                               ; preds = %dec_label_pc_147f0
  %v0_14870 = load i64, i64* inttoptr (i64 84087 to i64*), align 8
  store i64 %v0_14870, i64* @rax, align 8
  store i64 %v0_147f2, i64* @rdi, align 8
  %v1_1487a = add i64 %v0_147f5, 44
  %v2_1487a = inttoptr i64 %v1_1487a to i32*
  store i32 -1, i32* %v2_1487a, align 4
  %v0_14881 = load i64, i64* @rbx, align 8
  %v1_14881 = add i64 %v0_14881, 48
  %v2_14881 = inttoptr i64 %v1_14881 to i32*
  store i32 -1, i32* %v2_14881, align 4
  %v0_14888 = load i64, i64* @rax, align 8
  %v1_14888 = load i64, i64* @rbx, align 8
  %v2_14888 = add i64 %v1_14888, 32
  %v3_14888 = inttoptr i64 %v2_14888 to i64*
  store i64 %v0_14888, i64* %v3_14888, align 8
  %v0_1488c = load i64, i64* inttoptr (i64 84115 to i64*), align 8
  %v1_14893 = load i64, i64* @rbx, align 8
  %v2_14893 = add i64 %v1_14893, 24
  %v3_14893 = inttoptr i64 %v2_14893 to i64*
  store i64 %v0_1488c, i64* %v3_14893, align 8
  %v2_14897 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_14897, i64* @rax, align 8
  %v1_148a1 = load i64, i64* @rbx, align 8
  %v2_148a1 = add i64 %v1_148a1, 64
  %v3_148a1 = inttoptr i64 %v2_148a1 to i64*
  store i64 %v2_14897, i64* %v3_148a1, align 8
  store i64 %v0_147f1, i64* @rbx, align 8
  store i64 %v0_147f0, i64* %rbp.global-to-local, align 8
  %v0_148ab = load i64, i64* @rax, align 8
  ret i64 %v0_148ab
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot6relinkEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_148c0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_148c0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_148c1 = load i64, i64* @rbx, align 8
  %v0_148c2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_148c2, i64* %rbp.global-to-local, align 8
  %v0_148c5 = load i64, i64* @rdi, align 8
  store i64 %v0_148c5, i64* @rbx, align 8
  store i64 %v0_148c5, i64* @rax, align 8
  %v1_148d5 = icmp eq i64 %v0_148c5, 0
  br i1 %v1_148d5, label %dec_label_pc_14920, label %dec_label_pc_148eb

dec_label_pc_148eb:                               ; preds = %dec_label_pc_148c0
  store i64 %v0_148c5, i64* @rax, align 8
  %v1_148eb = icmp eq i64 %v0_148c2, 0
  br i1 %v1_148eb, label %dec_label_pc_14910, label %dec_label_pc_148ff

dec_label_pc_148ff:                               ; preds = %dec_label_pc_14910, %dec_label_pc_148eb
  store i64 %v0_148c5, i64* @rax, align 8
  store i64 %v0_148c1, i64* @rbx, align 8
  store i64 %v0_148c0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_148c5

dec_label_pc_14910:                               ; preds = %dec_label_pc_148eb
  br label %dec_label_pc_148ff

dec_label_pc_14920:                               ; preds = %dec_label_pc_148c0
  store i64 %v0_148c2, i64* @rax, align 8
  store i64 %v0_148c1, i64* @rbx, align 8
  store i64 %v0_148c0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_148c2
}

define i64 @"_ZN3org4luaj3vm219Varargs$PairVarargs3argEJPNS1_8LuaValueEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14930:
  store i64 %arg1, i64* @rdi, align 8
  %v1_14930 = trunc i64 %arg2 to i32
  %v11_14930 = icmp eq i32 %v1_14930, 1
  br i1 %v11_14930, label %dec_label_pc_14950, label %dec_label_pc_14935

dec_label_pc_14935:                               ; preds = %dec_label_pc_14930
  %v0_14939 = load i64, i64* @rdi, align 8
  %v1_14939 = add i64 %v0_14939, 16
  %v2_14939 = inttoptr i64 %v1_14939 to i64*
  %v3_14939 = load i64, i64* %v2_14939, align 8
  store i64 %v3_14939, i64* @rdi, align 8
  %v1_14940 = inttoptr i64 %v3_14939 to i64*
  %v2_14940 = load i64, i64* %v1_14940, align 8
  store i64 %v2_14940, i64* @rax, align 8
  ret i64 %v2_14940

dec_label_pc_14950:                               ; preds = %dec_label_pc_14930
  %v0_14950 = load i64, i64* @rdi, align 8
  %v1_14950 = add i64 %v0_14950, 8
  %v2_14950 = inttoptr i64 %v1_14950 to i64*
  %v3_14950 = load i64, i64* %v2_14950, align 8
  store i64 %v3_14950, i64* @rax, align 8
  ret i64 %v3_14950
}

define i64 @_ZN3org4luaj3vm27Varargs7isvalueEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14960:
  store i64 %arg1, i64* @rdi, align 8
  %v4_14960 = trunc i64 %arg2 to i32
  %tmp239 = icmp slt i32 %v4_14960, 1
  br i1 %tmp239, label %dec_label_pc_14978, label %dec_label_pc_14964

dec_label_pc_14964:                               ; preds = %dec_label_pc_14960
  %v2_14964 = load i64, i64* @rdi, align 8
  %v3_1496d = trunc i64 %v2_14964 to i32
  %v4_1496d = sub i32 %v4_14960, %v3_1496d
  %v10_1496d2 = xor i64 %v2_14964, %arg2
  %v10_1496d = trunc i64 %v10_1496d2 to i32
  %v11_1496d = xor i32 %v4_1496d, %v4_14960
  %v12_1496d = and i32 %v11_1496d, %v10_1496d
  %v13_1496d = icmp slt i32 %v12_1496d, 0
  %v14_1496d = icmp eq i32 %v4_1496d, 0
  %v15_1496d = icmp slt i32 %v4_1496d, 0
  %v3_1496f = icmp ne i1 %v15_1496d, %v13_1496d
  %v4_1496f = or i1 %v14_1496d, %v3_1496f
  %v5_1496f = zext i1 %v4_1496f to i64
  %v7_1496f = and i64 %v2_14964, -256
  %v8_1496f = or i64 %v5_1496f, %v7_1496f
  store i64 %v8_1496f, i64* @rax, align 8
  ret i64 %v8_1496f

dec_label_pc_14978:                               ; preds = %dec_label_pc_14960
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Varargs8optvalueEJPNS1_8LuaValueEiS4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14980:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_14980 = load i64, i64* %rsi.global-to-local, align 8
  %v4_14980 = trunc i64 %v0_14980 to i32
  %v0_14982 = load i64, i64* %r12.global-to-local, align 8
  %v0_14984 = load i64, i64* %rbp.global-to-local, align 8
  %v0_14985 = load i64, i64* @rbx, align 8
  %v0_14986 = load i64, i64* @rdx, align 8
  store i64 %v0_14986, i64* @rbx, align 8
  %tmp242 = icmp slt i32 %v4_14980, 1
  br i1 %tmp242, label %dec_label_pc_1499a, label %dec_label_pc_1498b

dec_label_pc_1498b:                               ; preds = %dec_label_pc_14980
  %v2_1498b = load i64, i64* @rdi, align 8
  store i64 %v2_1498b, i64* @rax, align 8
  store i64 %v0_14980, i64* %rbp.global-to-local, align 8
  store i64 %v2_1498b, i64* %r12.global-to-local, align 8
  %v7_14998 = icmp sgt i64 %v0_14980, %v2_1498b
  br i1 %v7_14998, label %dec_label_pc_1499a, label %dec_label_pc_149a8

dec_label_pc_1499a:                               ; preds = %dec_label_pc_1498b, %dec_label_pc_14980
  store i64 %v0_14986, i64* @rax, align 8
  store i64 %v0_14985, i64* @rbx, align 8
  store i64 %v0_14984, i64* %rbp.global-to-local, align 8
  store i64 %v0_14982, i64* %r12.global-to-local, align 8
  ret i64 %v0_14986

dec_label_pc_149a8:                               ; preds = %dec_label_pc_1498b
  store i64 %v2_1498b, i64* @rax, align 8
  store i64 %v0_14985, i64* @rbx, align 8
  store i64 %v0_14984, i64* %rbp.global-to-local, align 8
  store i64 %v0_14982, i64* %r12.global-to-local, align 8
  ret i64 %v2_1498b
}

define i64 @_ZN3org4luaj3vm27Varargs11isnoneornilEJbi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_149c0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_149c0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_149c1 = load i64, i64* @rbx, align 8
  %v0_149c2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_149c2, i64* %rbp.global-to-local, align 8
  %v0_149c4 = load i64, i64* @rdi, align 8
  store i64 %v0_149c4, i64* @rbx, align 8
  store i64 %v0_149c4, i64* @rax, align 8
  store i64 1, i64* @rdx, align 8
  %v8_149d8 = icmp sgt i64 %v0_149c2, %v0_149c4
  br i1 %v8_149d8, label %dec_label_pc_149f3, label %dec_label_pc_149da

dec_label_pc_149da:                               ; preds = %dec_label_pc_149c0
  store i64 %v0_149c4, i64* @rax, align 8
  store i64 %v0_149c4, i64* @rdx, align 8
  br label %dec_label_pc_149f3

dec_label_pc_149f3:                               ; preds = %dec_label_pc_149da, %dec_label_pc_149c0
  %v0_149f3 = phi i64 [ %v0_149c4, %dec_label_pc_149da ], [ 1, %dec_label_pc_149c0 ]
  store i64 %v0_149f3, i64* @rax, align 8
  store i64 %v0_149c1, i64* @rbx, align 8
  store i64 %v0_149c0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_149f3
}

define i64 @_ZN3org4luaj3vm211LuaUserdata5raweqEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14a00:
  store i64 %arg1, i64* @rdi, align 8
  %v0_14a00 = load i64, i64* @rdi, align 8
  %v12_14a00 = icmp eq i64 %v0_14a00, %arg2
  br i1 %v12_14a00, label %dec_label_pc_14a30, label %dec_label_pc_14a05

dec_label_pc_14a05:                               ; preds = %dec_label_pc_14a00
  store i64 0, i64* @rax, align 8
  %v1_14a07 = add i64 %arg2, 16
  %v2_14a07 = inttoptr i64 %v1_14a07 to i64*
  %v3_14a07 = load i64, i64* %v2_14a07, align 8
  store i64 %v3_14a07, i64* @rdx, align 8
  %v1_14a0b = add i64 %v0_14a00, 16
  %v2_14a0b = inttoptr i64 %v1_14a0b to i64*
  %v3_14a0b = load i64, i64* %v2_14a0b, align 8
  %v15_14a0b = icmp eq i64 %v3_14a0b, %v3_14a07
  br i1 %v15_14a0b, label %dec_label_pc_14a18, label %dec_label_pc_14a11

dec_label_pc_14a11:                               ; preds = %dec_label_pc_14a05
  ret i64 0

dec_label_pc_14a18:                               ; preds = %dec_label_pc_14a05
  %v1_14a1c = add i64 %v0_14a00, 8
  %v2_14a1c = inttoptr i64 %v1_14a1c to i64*
  %v3_14a1c = load i64, i64* %v2_14a1c, align 8
  store i64 %v3_14a1c, i64* @rdi, align 8
  %v1_14a24 = inttoptr i64 %v3_14a1c to i64*
  %v2_14a24 = load i64, i64* %v1_14a24, align 8
  store i64 %v2_14a24, i64* @rax, align 8
  ret i64 %v2_14a24

dec_label_pc_14a30:                               ; preds = %dec_label_pc_14a00
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @"_ZN4lang12lang_luaj$184callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_14a40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_14a43 = load i64, i64* @rdi, align 8
  %v2_14a47 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_14a47, i64* @rax, align 8
  store i64 %v2_14a47, i64* @rbx, align 8
  %v0_14a4d = load i64, i64* @rdx, align 8
  store i64 %v0_14a4d, i64* %rsi.global-to-local, align 8
  store i64 %v2_14a47, i64* @rdi, align 8
  %v4_14a5c = trunc i64 %v2_14a47 to i8
  %v5_14a5c = icmp eq i8 %v4_14a5c, 0
  %v1_14a5e = icmp eq i1 %v5_14a5c, false
  br i1 %v1_14a5e, label %dec_label_pc_14acd, label %dec_label_pc_14a60

dec_label_pc_14a60:                               ; preds = %dec_label_pc_14a40
  %v1_14a60 = add i64 %v0_14a43, 24
  %v2_14a60 = inttoptr i64 %v1_14a60 to i64*
  %v3_14a60 = load i64, i64* %v2_14a60, align 8
  store i64 %v3_14a60, i64* @rax, align 8
  %v1_14a65 = add i64 %v3_14a60, 8
  %v2_14a65 = inttoptr i64 %v1_14a65 to i32*
  %v3_14a65 = load i32, i32* %v2_14a65, align 4
  %v4_14a65 = zext i32 %v3_14a65 to i64
  store i64 %v4_14a65, i64* @rdx, align 8
  %v5_14a68 = icmp eq i32 %v3_14a65, 0
  br i1 %v5_14a68, label %dec_label_pc_14ad9, label %dec_label_pc_14a6c

dec_label_pc_14a6c:                               ; preds = %dec_label_pc_14a60
  %v1_14a6c = add i64 %v3_14a60, 16
  %v2_14a6c = inttoptr i64 %v1_14a6c to i64*
  %v3_14a6c = load i64, i64* %v2_14a6c, align 8
  store i64 %v3_14a6c, i64* @rdx, align 8
  store i64 %v0_14a4d, i64* @rax, align 8
  store i64 %v2_14a47, i64* @rdi, align 8
  %v0_14a76 = load i64, i64* inttoptr (i64 84605 to i64*), align 8
  store i64 %v0_14a76, i64* %rsi.global-to-local, align 8
  store i64 %v0_14a76, i64* @rax, align 8
  store i64 %v0_14a4d, i64* @rdx, align 8
  %v0_14a89 = load i64, i64* inttoptr (i64 84624 to i64*), align 16
  store i64 %v0_14a89, i64* %rsi.global-to-local, align 8
  store i64 %v2_14a47, i64* @rdi, align 8
  store i64 %v0_14a89, i64* @rax, align 8
  %v0_14a9c = load i64, i64* inttoptr (i64 84643 to i64*), align 8
  store i64 %v0_14a9c, i64* @rdx, align 8
  store i64 %v2_14a47, i64* @rdi, align 8
  %v0_14aa6 = load i64, i64* inttoptr (i64 84653 to i64*), align 8
  store i64 %v0_14aa6, i64* %rsi.global-to-local, align 8
  store i64 %v0_14aa6, i64* @rax, align 8
  %v0_14ab6 = load i64, i64* inttoptr (i64 84669 to i64*), align 8
  store i64 %v0_14ab6, i64* @rdx, align 8
  store i64 %v2_14a47, i64* @rdi, align 8
  %v0_14ac0 = load i64, i64* inttoptr (i64 84679 to i64*), align 8
  store i64 %v0_14ac0, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_14acd

dec_label_pc_14acd:                               ; preds = %dec_label_pc_14a6c, %dec_label_pc_14a40
  %v0_14ac7 = phi i64 [ %v0_14aa6, %dec_label_pc_14a6c ], [ %v2_14a47, %dec_label_pc_14a40 ]
  ret i64 %v0_14ac7

dec_label_pc_14ad9:                               ; preds = %dec_label_pc_14a60
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm220Varargs$ArrayVarargs4arg1EJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_14af0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_14af0 = load i64, i64* @rdi, align 8
  %v1_14af0 = add i64 %v0_14af0, 8
  %v2_14af0 = inttoptr i64 %v1_14af0 to i64*
  %v3_14af0 = load i64, i64* %v2_14af0, align 8
  store i64 %v3_14af0, i64* @rax, align 8
  %v1_14af4 = add i64 %v3_14af0, 8
  %v2_14af4 = inttoptr i64 %v1_14af4 to i32*
  %v3_14af4 = load i32, i32* %v2_14af4, align 4
  %v4_14af4 = zext i32 %v3_14af4 to i64
  store i64 %v4_14af4, i64* @rdx, align 8
  %tmp236 = icmp slt i32 %v3_14af4, 1
  br i1 %tmp236, label %dec_label_pc_14b00, label %dec_label_pc_14afb

dec_label_pc_14afb:                               ; preds = %dec_label_pc_14af0
  %v1_14afb = add i64 %v3_14af0, 16
  %v2_14afb = inttoptr i64 %v1_14afb to i64*
  %v3_14afb = load i64, i64* %v2_14afb, align 8
  store i64 %v3_14afb, i64* @rax, align 8
  ret i64 %v3_14afb

dec_label_pc_14b00:                               ; preds = %dec_label_pc_14af0
  %v1_14b04 = add i64 %v0_14af0, 16
  %v2_14b04 = inttoptr i64 %v1_14b04 to i64*
  %v3_14b04 = load i64, i64* %v2_14b04, align 8
  store i64 %v3_14b04, i64* @rdi, align 8
  %v1_14b08 = inttoptr i64 %v3_14b04 to i64*
  %v2_14b08 = load i64, i64* %v1_14b08, align 8
  store i64 %v2_14b08, i64* @rax, align 8
  ret i64 %v2_14b08
}

define i64 @"_ZN3org4luaj3vm224Varargs$ArrayPartVarargs4arg1EJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_14b20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_14b24 = load i64, i64* @rdi, align 8
  %v1_14b24 = add i64 %v0_14b24, 24
  %v2_14b24 = inttoptr i64 %v1_14b24 to i32*
  %v3_14b24 = load i32, i32* %v2_14b24, align 4
  %v4_14b24 = zext i32 %v3_14b24 to i64
  store i64 %v4_14b24, i64* @rax, align 8
  %tmp237 = icmp slt i32 %v3_14b24, 1
  br i1 %tmp237, label %dec_label_pc_14b48, label %dec_label_pc_14b2b

dec_label_pc_14b2b:                               ; preds = %dec_label_pc_14b20
  %v1_14b2b = add i64 %v0_14b24, 16
  %v2_14b2b = inttoptr i64 %v1_14b2b to i64*
  %v3_14b2b = load i64, i64* %v2_14b2b, align 8
  store i64 %v3_14b2b, i64* @rax, align 8
  %v1_14b2f = add i64 %v0_14b24, 8
  %v2_14b2f = inttoptr i64 %v1_14b2f to i32*
  %v3_14b2f = load i32, i32* %v2_14b2f, align 4
  %v4_14b2f = sext i32 %v3_14b2f to i64
  store i64 %v4_14b2f, i64* @rdi, align 8
  %v3_14b33 = add i64 %v3_14b2b, 8
  %v4_14b33 = inttoptr i64 %v3_14b33 to i32*
  %v5_14b33 = load i32, i32* %v4_14b33, align 4
  %v11_14b33 = icmp ult i32 %v3_14b2f, %v5_14b33
  %v1_14b36 = add i64 %v3_14b2b, 16
  store i64 %v1_14b36, i64* @rdx, align 8
  %v1_14b3a = icmp eq i1 %v11_14b33, false
  br i1 %v1_14b3a, label %dec_label_pc_14b57, label %dec_label_pc_14b3c

dec_label_pc_14b3c:                               ; preds = %dec_label_pc_14b2b
  %v2_14b3c = mul nsw i64 %v4_14b2f, 8
  %v3_14b3c = add i64 %v2_14b3c, %v1_14b36
  %v4_14b3c = inttoptr i64 %v3_14b3c to i64*
  %v5_14b3c = load i64, i64* %v4_14b3c, align 8
  store i64 %v5_14b3c, i64* @rax, align 8
  ret i64 %v5_14b3c

dec_label_pc_14b48:                               ; preds = %dec_label_pc_14b20
  %v1_14b48 = add i64 %v0_14b24, 32
  %v2_14b48 = inttoptr i64 %v1_14b48 to i64*
  %v3_14b48 = load i64, i64* %v2_14b48, align 8
  store i64 %v3_14b48, i64* @rdi, align 8
  %v1_14b4c = inttoptr i64 %v3_14b48 to i64*
  %v2_14b4c = load i64, i64* %v1_14b4c, align 8
  store i64 %v2_14b4c, i64* @rax, align 8
  ret i64 %v2_14b4c

dec_label_pc_14b57:                               ; preds = %dec_label_pc_14b2b
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString5raweqEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14b60:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_14b60 = load i64, i64* @rdi, align 8
  %v1_14b60 = load i64, i64* %rsi.global-to-local, align 8
  %v12_14b60 = icmp eq i64 %v0_14b60, %v1_14b60
  br i1 %v12_14b60, label %dec_label_pc_14c4c, label %dec_label_pc_14b69

dec_label_pc_14b69:                               ; preds = %dec_label_pc_14b60
  %v1_14b69 = add i64 %v0_14b60, 20
  %v2_14b69 = inttoptr i64 %v1_14b69 to i32*
  %v3_14b69 = load i32, i32* %v2_14b69, align 4
  %v4_14b69 = zext i32 %v3_14b69 to i64
  store i64 %v4_14b69, i64* @rax, align 8
  %v1_14b6c = add i64 %v1_14b60, 20
  %v2_14b6c = inttoptr i64 %v1_14b6c to i32*
  %v3_14b6c = load i32, i32* %v2_14b6c, align 4
  %v16_14b6c = icmp eq i32 %v3_14b6c, %v3_14b69
  br i1 %v16_14b6c, label %dec_label_pc_14b78, label %dec_label_pc_14b71

dec_label_pc_14b71:                               ; preds = %dec_label_pc_14b69
  store i64 0, i64* @rax, align 8
  ret i64 0

dec_label_pc_14b78:                               ; preds = %dec_label_pc_14b69
  %v1_14b78 = add i64 %v0_14b60, 8
  %v2_14b78 = inttoptr i64 %v1_14b78 to i64*
  %v3_14b78 = load i64, i64* %v2_14b78, align 8
  store i64 %v3_14b78, i64* @rax, align 8
  %v1_14b7c = add i64 %v1_14b60, 8
  %v2_14b7c = inttoptr i64 %v1_14b7c to i64*
  %v3_14b7c = load i64, i64* %v2_14b7c, align 8
  %v15_14b7c = icmp eq i64 %v3_14b7c, %v3_14b78
  br i1 %v15_14b7c, label %dec_label_pc_14c40, label %dec_label_pc_14b86

dec_label_pc_14b86:                               ; preds = %dec_label_pc_14c40, %dec_label_pc_14b78
  %v0_14b86 = load i64, i64* %r12.global-to-local, align 8
  %v0_14b88 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_14b60, i64* %rbp.global-to-local, align 8
  %v0_14b8c = load i64, i64* @rbx, align 8
  store i64 %v1_14b60, i64* @rbx, align 8
  store i64 %v1_14b60, i64* %r12.global-to-local, align 8
  store i64 %v1_14b60, i64* @rax, align 8
  %v3_14bb8 = load i32, i32* %v2_14b69, align 4
  %tmp254 = icmp slt i32 %v3_14bb8, 1
  br i1 %tmp254, label %dec_label_pc_14c30, label %dec_label_pc_14bc1

dec_label_pc_14bc1:                               ; preds = %dec_label_pc_14b86
  %v3_14bc1 = load i64, i64* %v2_14b7c, align 8
  store i64 %v3_14bc1, i64* @rax, align 8
  %v1_14bc5 = add i64 %v1_14b60, 16
  %v2_14bc5 = inttoptr i64 %v1_14bc5 to i32*
  %v3_14bc5 = load i32, i32* %v2_14bc5, align 4
  %v4_14bc5 = zext i32 %v3_14bc5 to i64
  store i64 %v4_14bc5, i64* @rdi, align 8
  %v1_14bc8 = add i64 %v3_14bc1, 8
  %v2_14bc8 = inttoptr i64 %v1_14bc8 to i32*
  %v3_14bc8 = load i32, i32* %v2_14bc8, align 4
  %v1_14bcc = add i64 %v3_14bc1, 12
  store i64 %v1_14bcc, i64* @rbx, align 8
  %v9_14bd0 = icmp ult i32 %v3_14bc5, %v3_14bc8
  %v1_14bd3 = icmp eq i1 %v9_14bd0, false
  br i1 %v1_14bd3, label %dec_label_pc_14c52, label %dec_label_pc_14bd5

dec_label_pc_14bd5:                               ; preds = %dec_label_pc_14bc1
  store i64 %v4_14bc5, i64* @rdx, align 8
  %v4_14bd8 = add i64 %v1_14bcc, %v4_14bc5
  %v5_14bd8 = inttoptr i64 %v4_14bd8 to i8*
  %v6_14bd8 = load i8, i8* %v5_14bd8, align 1
  %v7_14bd8 = zext i8 %v6_14bd8 to i64
  store i64 %v7_14bd8, i64* @rcx, align 8
  %v3_14bdd = load i64, i64* %v2_14b78, align 8
  store i64 %v3_14bdd, i64* @rax, align 8
  %v1_14be1 = add i64 %v0_14b60, 16
  %v2_14be1 = inttoptr i64 %v1_14be1 to i32*
  %v3_14be1 = load i32, i32* %v2_14be1, align 4
  %v4_14be1 = zext i32 %v3_14be1 to i64
  store i64 %v4_14be1, i64* @rdx, align 8
  %v1_14be8 = add i64 %v3_14bdd, 12
  store i64 %v1_14be8, i64* @r11, align 8
  %v1_14bf1 = add nuw nsw i64 %v4_14bc5, 1
  store i64 %v1_14bf1, i64* @rax, align 8
  %v4_14bf4 = add i32 %v3_14bc5, %v3_14bb8
  br label %dec_label_pc_14c1e

dec_label_pc_14c00:                               ; preds = %dec_label_pc_14c1e
  %v1_14c00 = trunc i64 %v0_14c0f to i32
  %v14_14c00 = icmp eq i32 %v1_14c00, %v4_14bf4
  br i1 %v14_14c00, label %dec_label_pc_14c30, label %dec_label_pc_14c05

dec_label_pc_14c05:                               ; preds = %dec_label_pc_14c00
  %v14_14c05 = icmp eq i32 %v1_14c00, %v3_14bc8
  store i64 %v0_14c0f, i64* @rdi, align 8
  br i1 %v14_14c05, label %dec_label_pc_14c52, label %dec_label_pc_14c0c

dec_label_pc_14c0c:                               ; preds = %dec_label_pc_14c05
  %v2_14c0c = add nuw nsw i64 %v0_14c0c, 1
  %v17_14c0c = and i64 %v2_14c0c, 4294967295
  store i64 %v17_14c0c, i64* @rdx, align 8
  store i64 %v0_14c0f, i64* @rcx, align 8
  %v2_14c12 = add nsw i64 %v0_14c0f, 1
  %v17_14c12 = and i64 %v2_14c12, 4294967295
  store i64 %v17_14c12, i64* @rax, align 8
  %v3_14c18 = add i64 %v0_14c0f, %v1_14bcc
  %v4_14c18 = inttoptr i64 %v3_14c18 to i8*
  %v5_14c18 = load i8, i8* %v4_14c18, align 1
  %v6_14c18 = zext i8 %v5_14c18 to i64
  store i64 %v6_14c18, i64* @rcx, align 8
  br label %dec_label_pc_14c1e

dec_label_pc_14c1e:                               ; preds = %dec_label_pc_14c0c, %dec_label_pc_14bd5
  %v0_14c0f = phi i64 [ %v17_14c12, %dec_label_pc_14c0c ], [ %v1_14bf1, %dec_label_pc_14bd5 ]
  %v6_14c21 = phi i8 [ %v5_14c18, %dec_label_pc_14c0c ], [ %v6_14bd8, %dec_label_pc_14bd5 ]
  %v0_14c0c = phi i64 [ %v17_14c0c, %dec_label_pc_14c0c ], [ %v4_14be1, %dec_label_pc_14bd5 ]
  store i64 %v0_14c0c, i64* %rsi.global-to-local, align 8
  %v3_14c21 = add i64 %v0_14c0c, %v1_14be8
  %v4_14c21 = inttoptr i64 %v3_14c21 to i8*
  %v5_14c21 = load i8, i8* %v4_14c21, align 1
  %v18_14c21 = icmp eq i8 %v5_14c21, %v6_14c21
  br i1 %v18_14c21, label %dec_label_pc_14c00, label %dec_label_pc_14c27

dec_label_pc_14c27:                               ; preds = %dec_label_pc_14c1e
  store i64 0, i64* @rax, align 8
  store i64 %v0_14b8c, i64* @rbx, align 8
  store i64 %v0_14b88, i64* %rbp.global-to-local, align 8
  store i64 %v0_14b86, i64* %r12.global-to-local, align 8
  ret i64 0

dec_label_pc_14c30:                               ; preds = %dec_label_pc_14c00, %dec_label_pc_14b86
  store i64 1, i64* @rax, align 8
  store i64 %v0_14b8c, i64* @rbx, align 8
  store i64 %v0_14b88, i64* %rbp.global-to-local, align 8
  store i64 %v0_14b86, i64* %r12.global-to-local, align 8
  ret i64 1

dec_label_pc_14c40:                               ; preds = %dec_label_pc_14b78
  %v1_14c40 = add i64 %v0_14b60, 16
  %v2_14c40 = inttoptr i64 %v1_14c40 to i32*
  %v3_14c40 = load i32, i32* %v2_14c40, align 4
  %v4_14c40 = zext i32 %v3_14c40 to i64
  store i64 %v4_14c40, i64* @rax, align 8
  %v1_14c43 = add i64 %v1_14b60, 16
  %v2_14c43 = inttoptr i64 %v1_14c43 to i32*
  %v3_14c43 = load i32, i32* %v2_14c43, align 4
  %v16_14c43 = icmp eq i32 %v3_14c43, %v3_14c40
  %v1_14c46 = icmp eq i1 %v16_14c43, false
  br i1 %v1_14c46, label %dec_label_pc_14b86, label %dec_label_pc_14c4c

dec_label_pc_14c4c:                               ; preds = %dec_label_pc_14c40, %dec_label_pc_14b60
  store i64 1, i64* @rax, align 8
  ret i64 1

dec_label_pc_14c52:                               ; preds = %dec_label_pc_14c05, %dec_label_pc_14bc1
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot6relinkEJPNS1_13LuaTable$SlotES4_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14c70:
  store i64 %arg1, i64* @rdi, align 8
  %v1_14c70 = icmp eq i64 %arg2, 0
  br i1 %v1_14c70, label %bb, label %dec_label_pc_14c75

bb:                                               ; preds = %dec_label_pc_14c70
  %v2_14c73 = call i64 @function_14cb8(i64 %arg1)
  store i64 %v2_14c73, i64* @rax, align 8
  br label %dec_label_pc_14c75

dec_label_pc_14c75:                               ; preds = %bb, %dec_label_pc_14c70
  store i64 85121, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_14cb8(i64 %arg1) local_unnamed_addr {
dec_label_pc_14cb8:
  store i64 %arg1, i64* @rdi, align 8
  %v1_14cb8 = add i64 %arg1, 8
  %v2_14cb8 = inttoptr i64 %v1_14cb8 to i64*
  %v3_14cb8 = load i64, i64* %v2_14cb8, align 8
  store i64 %v3_14cb8, i64* @rax, align 8
  ret i64 %v3_14cb8
}

define i64 @_ZN3org4luaj3vm29LuaDouble6ddiv_dEJddd() local_unnamed_addr {
dec_label_pc_14cc0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 85191, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_14ccd = load i128, i128* %xmm0.global-to-local, align 8
  %v1_14ccd = call i64 @__asm_movsd.7465(i128 %v0_14ccd)
  %v0_14cd3 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_14cd3 = call i64 @__asm_movsd.7465(i128 %v0_14cd3)
  %v4_14cd3 = load i64, i64* @rax, align 8
  ret i64 %v4_14cd3
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame8setLocalEJPNS1_7VarargsEiPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14d50:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_14d54 = load i64, i64* @rdx, align 8
  store i64 %v0_14d54, i64* %r13.global-to-local, align 8
  %v0_14d59 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_14d59, i64* @rbx, align 8
  %v0_14d5b = load i64, i64* @rdi, align 8
  store i64 %v0_14d5b, i64* %rbp.global-to-local, align 8
  store i64 %v0_14d5b, i64* @rax, align 8
  %v4_14d6b = trunc i64 %v0_14d59 to i32
  %tmp251 = icmp slt i32 %v4_14d6b, 1
  br i1 %tmp251, label %bb, label %dec_label_pc_14d6f

bb:                                               ; preds = %dec_label_pc_14d50
  %v5_14d6d = call i64 @function_14dc0()
  store i64 %v5_14d6d, i64* @rax, align 8
  %v0_14d6f.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_14d79.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_14d6f

dec_label_pc_14d6f:                               ; preds = %bb, %dec_label_pc_14d50
  %v0_14d79 = phi i64 [ %v0_14d79.pre, %bb ], [ %v0_14d59, %dec_label_pc_14d50 ]
  %v0_14d6f = phi i64 [ %v0_14d6f.pre, %bb ], [ %v0_14d5b, %dec_label_pc_14d50 ]
  %v1_14d6f = add i64 %v0_14d6f, 32
  %v2_14d6f = inttoptr i64 %v1_14d6f to i64*
  %v3_14d6f = load i64, i64* %v2_14d6f, align 8
  store i64 %v3_14d6f, i64* @rdi, align 8
  %v1_14d76 = add i64 %v3_14d6f, 8
  %v2_14d76 = inttoptr i64 %v1_14d76 to i32*
  %v3_14d76 = load i32, i32* %v2_14d76, align 4
  %v4_14d76 = zext i32 %v3_14d76 to i64
  store i64 %v4_14d76, i64* @rax, align 8
  %v8_14d7b = icmp sgt i64 %v0_14d79, %v4_14d76
  br i1 %v8_14d7b, label %bb252, label %dec_label_pc_14d7d

bb252:                                            ; preds = %dec_label_pc_14d6f
  %v9_14d7b = call i64 @function_14dc0()
  store i64 %v9_14d7b, i64* @rax, align 8
  %v0_14d7d.pre = load i64, i64* @rbx, align 8
  %v0_14d80.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_14d7d

dec_label_pc_14d7d:                               ; preds = %bb252, %dec_label_pc_14d6f
  %v2_14d84 = phi i64 [ %v9_14d7b, %bb252 ], [ %v4_14d76, %dec_label_pc_14d6f ]
  %v0_14d80 = phi i64 [ %v0_14d80.pre, %bb252 ], [ %v3_14d6f, %dec_label_pc_14d6f ]
  %v0_14d7d = phi i64 [ %v0_14d7d.pre, %bb252 ], [ %v0_14d79, %dec_label_pc_14d6f ]
  %v1_14d7d = trunc i64 %v0_14d7d to i32
  %v2_14d7d = add i32 %v1_14d7d, -1
  %v17_14d7d = zext i32 %v2_14d7d to i64
  store i64 %v17_14d7d, i64* @rbx, align 8
  %v1_14d80 = add i64 %v0_14d80, 16
  store i64 %v1_14d80, i64* @rdx, align 8
  %v3_14d84 = trunc i64 %v2_14d84 to i32
  %v9_14d84 = icmp ult i32 %v2_14d7d, %v3_14d84
  %v1_14d86 = icmp eq i1 %v9_14d84, false
  br i1 %v1_14d86, label %bb253, label %dec_label_pc_14d88

bb253:                                            ; preds = %dec_label_pc_14d7d
  %v2_14d86 = call i64 @function_14de0()
  store i64 %v2_14d86, i64* @rax, align 8
  %v0_14d8b.pre = load i64, i64* @rdx, align 8
  %v1_14d8b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_14d88

dec_label_pc_14d88:                               ; preds = %bb253, %dec_label_pc_14d7d
  %v1_14d8b = phi i64 [ %v1_14d8b.pre, %bb253 ], [ %v17_14d7d, %dec_label_pc_14d7d ]
  %v0_14d8b = phi i64 [ %v0_14d8b.pre, %bb253 ], [ %v1_14d80, %dec_label_pc_14d7d ]
  %v2_14d8b = mul i64 %v1_14d8b, 8
  %v3_14d8b = add i64 %v2_14d8b, %v0_14d8b
  store i64 %v3_14d8b, i64* @rbx, align 8
  %v1_14d8f = inttoptr i64 %v3_14d8b to i64*
  %v2_14d8f = load i64, i64* %v1_14d8f, align 8
  %v9_14d8f = icmp eq i64 %v2_14d8f, 0
  br i1 %v9_14d8f, label %bb254, label %dec_label_pc_14d95

bb254:                                            ; preds = %dec_label_pc_14d88
  %v1_14d93 = call i64 @function_14dc0()
  store i64 %v1_14d93, i64* @rax, align 8
  br label %dec_label_pc_14d95

dec_label_pc_14d95:                               ; preds = %bb254, %dec_label_pc_14d88
  store i64 0, i64* @rax, align 8
  %v0_14d97 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_14d97, i64* %rsi.global-to-local, align 8
  ret i64 0
}

define i64 @function_14dc0() local_unnamed_addr {
dec_label_pc_14dc0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_14dd5(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14dd5:
  store i64 %arg1, i64* @rbx, align 8
  %v0_14ddf = load i64, i64* @rax, align 8
  ret i64 %v0_14ddf
}

define i64 @function_14de0() local_unnamed_addr {
dec_label_pc_14de0:
  %v0_14de0 = load i64, i64* @rbx, align 8
  store i64 %v0_14de0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata4eq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14df0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_14df0 = load i64, i64* %r12.global-to-local, align 8
  %v0_14df2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_14df3 = load i64, i64* @rdi, align 8
  store i64 %v0_14df3, i64* %r12.global-to-local, align 8
  %v0_14df6 = load i64, i64* @rbx, align 8
  %v2_14df7 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_14df7, i64* @rax, align 8
  store i64 %v2_14df7, i64* @rbx, align 8
  store i64 %v0_14df3, i64* %rsi.global-to-local, align 8
  store i64 %v2_14df7, i64* @rdi, align 8
  %v4_14e09 = trunc i64 %v2_14df7 to i8
  %v5_14e09 = icmp eq i8 %v4_14e09, 0
  store i64 %v2_14df7, i64* %rbp.global-to-local, align 8
  %v1_14e0d = icmp eq i1 %v5_14e09, false
  br i1 %v1_14e0d, label %dec_label_pc_14e27, label %dec_label_pc_14e0f

dec_label_pc_14e0f:                               ; preds = %dec_label_pc_14df0
  %v1_14e0f = add i64 %v0_14df3, 16
  %v2_14e0f = inttoptr i64 %v1_14e0f to i64*
  %v3_14e0f = load i64, i64* %v2_14e0f, align 8
  %v10_14e0f = icmp eq i64 %v3_14e0f, 0
  br i1 %v10_14e0f, label %dec_label_pc_14e27, label %dec_label_pc_14e17

dec_label_pc_14e17:                               ; preds = %dec_label_pc_14e0f
  store i64 %v0_14df3, i64* @rax, align 8
  store i64 %v2_14df7, i64* @rdi, align 8
  %v4_14e23 = trunc i64 %v0_14df3 to i8
  %v5_14e23 = icmp eq i8 %v4_14e23, 0
  %v1_14e25 = icmp eq i1 %v5_14e23, false
  br i1 %v1_14e25, label %dec_label_pc_14e30, label %dec_label_pc_14e27

dec_label_pc_14e27:                               ; preds = %dec_label_pc_14e30, %dec_label_pc_14e17, %dec_label_pc_14e0f, %dec_label_pc_14df0
  store i64 %v2_14df7, i64* @rax, align 8
  store i64 %v0_14df6, i64* @rbx, align 8
  store i64 %v0_14df2, i64* %rbp.global-to-local, align 8
  store i64 %v0_14df0, i64* %r12.global-to-local, align 8
  ret i64 %v2_14df7

dec_label_pc_14e30:                               ; preds = %dec_label_pc_14e17
  store i64 %v0_14df3, i64* @rax, align 8
  store i64 %v2_14df7, i64* @rdi, align 8
  %v1_14e3c = icmp eq i64 %v0_14df3, 0
  br i1 %v1_14e3c, label %dec_label_pc_14e27, label %dec_label_pc_14e41

dec_label_pc_14e41:                               ; preds = %dec_label_pc_14e30
  %v3_14e41 = load i64, i64* %v2_14e0f, align 8
  store i64 %v3_14e41, i64* %rsi.global-to-local, align 8
  store i64 %v0_14df3, i64* @rcx, align 8
  store i64 %v2_14df7, i64* @rdx, align 8
  store i64 %v0_14df3, i64* @rdi, align 8
  store i64 %v0_14df3, i64* @rax, align 8
  store i64 %v0_14df6, i64* @rbx, align 8
  store i64 %v0_14df2, i64* %rbp.global-to-local, align 8
  store i64 %v0_14df0, i64* %r12.global-to-local, align 8
  ret i64 %v0_14df3
}

define i64 @_ZN3org4luaj3vm28LuaValue9varargsOfEJPNS1_7VarargsEP6JArrayIPS2_E(i64 %arg1) local_unnamed_addr {
dec_label_pc_14e60:
  store i64 %arg1, i64* @rdi, align 8
  store i64 85614, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_14ec0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14ec0:
  %v0_14ec0 = load i64, i64* inttoptr (i64 85703 to i64*), align 8
  store i64 %v0_14ec0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_14ec0
}

define i64 @function_14ed0() local_unnamed_addr {
dec_label_pc_14ed0:
  store i64 85719, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_14f10(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14f10:
  %rbp.global-to-local = alloca i64, align 8
  %v0_14f10 = load i64, i64* %rbp.global-to-local, align 8
  %v1_14f10 = add i64 %v0_14f10, 16
  %v2_14f10 = inttoptr i64 %v1_14f10 to i64*
  %v3_14f10 = load i64, i64* %v2_14f10, align 8
  store i64 %v3_14f10, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v3_14f10
}

define i64 @function_14f19(i64 %arg1) local_unnamed_addr {
dec_label_pc_14f19:
  store i64 0, i64* @rdi, align 8
  %v12_14f19 = load i64, i64* @rax, align 8
  ret i64 %v12_14f19
}

define i64 @function_14f20() local_unnamed_addr {
dec_label_pc_14f20:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9varargsOfEJPNS1_7VarargsEP6JArrayIPS2_Eii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14f30:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 85824, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_14f9d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_14f9d:
  store i64 %arg1, i64* @rbx, align 8
  %v0_14fa5 = load i64, i64* @rax, align 8
  ret i64 %v0_14fa5
}

define i64 @function_14fb0() local_unnamed_addr {
dec_label_pc_14fb0:
  store i64 85943, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15000(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_15000:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v0_15000 = load i64, i64* %rbp.global-to-local, align 8
  %v1_15000 = trunc i64 %v0_15000 to i32
  %v2_15000 = load i64, i64* %r13.global-to-local, align 8
  %v3_15000 = add i64 %v2_15000, 8
  %v4_15000 = inttoptr i64 %v3_15000 to i32*
  %v5_15000 = load i32, i32* %v4_15000, align 4
  %v11_15000 = icmp ult i32 %v1_15000, %v5_15000
  %v1_15004 = add i64 %v2_15000, 16
  store i64 %v1_15004, i64* @rax, align 8
  %v1_15008 = icmp eq i1 %v11_15000, false
  br i1 %v1_15008, label %dec_label_pc_15017, label %dec_label_pc_1500a

dec_label_pc_1500a:                               ; preds = %dec_label_pc_15000
  %v2_1500a = mul i64 %v0_15000, 8
  %v3_1500a = add i64 %v1_15004, %v2_1500a
  %v4_1500a = inttoptr i64 %v3_1500a to i64*
  %v5_1500a = load i64, i64* %v4_1500a, align 8
  store i64 %v5_1500a, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v5_1500a

dec_label_pc_15017:                               ; preds = %dec_label_pc_15000
  store i64 %v0_15000, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9varargsOfEJPNS1_7VarargsEPS2_S4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15020:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_15026 = load i64, i64* @rdi, align 8
  store i64 %v0_15026, i64* @rbx, align 8
  store i64 86064, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1506c(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1506c:
  %v0_1506c = load i64, i64* @rbx, align 8
  store i64 %v0_1506c, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_1506c
}

define i64 @"_ZN4lang12lang_luaj$578onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15080:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_15084 = load i64, i64* %r13.global-to-local, align 8
  %v0_15086 = load i64, i64* %r12.global-to-local, align 8
  %v0_15088 = load i64, i64* %rbp.global-to-local, align 8
  %v0_15089 = load i64, i64* @rbx, align 8
  %v0_1508a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1508a, i64* @rbx, align 8
  %v0_1508d = load i64, i64* @rdi, align 8
  store i64 %v0_1508d, i64* %rbp.global-to-local, align 8
  store i64 %v0_1508a, i64* %r12.global-to-local, align 8
  store i64 1, i64* %r13.global-to-local, align 8
  store i64 3, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_1508a, i64* @rdi, align 8
  %v0_15132 = load i64, i64* inttoptr (i64 86329 to i64*), align 8
  store i64 %v0_15132, i64* @rax, align 8
  store i64 %v0_15089, i64* @rbx, align 8
  store i64 %v0_15088, i64* %rbp.global-to-local, align 8
  store i64 %v0_15086, i64* %r12.global-to-local, align 8
  store i64 %v0_15084, i64* %r13.global-to-local, align 8
  ret i64 %v0_15132
}

define i64 @function_15360() local_unnamed_addr {
dec_label_pc_15360:
  %v0_15360 = load i64, i64* @rbp, align 8
  %v1_15360 = add i64 %v0_15360, 104
  %v2_15360 = inttoptr i64 %v1_15360 to i64*
  %v3_15360 = load i64, i64* %v2_15360, align 8
  store i64 %v3_15360, i64* @rdi, align 8
  %v1_15367 = inttoptr i64 %v3_15360 to i64*
  %v2_15367 = load i64, i64* %v1_15367, align 8
  store i64 %v2_15367, i64* @rax, align 8
  %v1_15370 = inttoptr i64 %v2_15367 to i64*
  %v2_15370 = load i64, i64* %v1_15370, align 8
  store i64 %v2_15370, i64* @rdx, align 8
  store i64 %v2_15367, i64* @rdi, align 8
  %v4_1537c = trunc i64 %v2_15367 to i8
  %v5_1537c = icmp eq i8 %v4_1537c, 0
  br i1 %v5_1537c, label %bb, label %dec_label_pc_15380

bb:                                               ; preds = %dec_label_pc_15360
  %v1_1537e = call i64 @function_153e0()
  store i64 %v1_1537e, i64* @rax, align 8
  %v0_15380.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_15380

dec_label_pc_15380:                               ; preds = %bb, %dec_label_pc_15360
  %v0_153a4 = phi i64 [ %v0_15380.pre, %bb ], [ %v0_15360, %dec_label_pc_15360 ]
  %v1_15380 = add i64 %v0_153a4, 104
  %v2_15380 = inttoptr i64 %v1_15380 to i64*
  %v3_15380 = load i64, i64* %v2_15380, align 8
  store i64 %v3_15380, i64* @rdi, align 8
  %v1_15387 = inttoptr i64 %v3_15380 to i64*
  %v2_15387 = load i64, i64* %v1_15387, align 8
  store i64 %v2_15387, i64* @rax, align 8
  %v1_15390 = inttoptr i64 %v2_15387 to i64*
  %v2_15390 = load i64, i64* %v1_15390, align 8
  store i64 %v2_15390, i64* @rdx, align 8
  store i64 %v2_15387, i64* @rdi, align 8
  ret i64 %v2_15387
}

define i64 @function_153b8() local_unnamed_addr {
dec_label_pc_153b8:
  %rbp.global-to-local = alloca i64, align 8
  %v0_153b8 = load i64, i64* %rbp.global-to-local, align 8
  %v1_153b8 = add i64 %v0_153b8, 72
  %v2_153b8 = inttoptr i64 %v1_153b8 to i64*
  %v3_153b8 = load i64, i64* %v2_153b8, align 8
  store i64 %v3_153b8, i64* %rbp.global-to-local, align 8
  %v0_153c7 = load i64, i64* @rax, align 8
  store i64 %v3_153b8, i64* @rdi, align 8
  ret i64 %v0_153c7
}

define i64 @function_153e0() local_unnamed_addr {
dec_label_pc_153e0:
  %v0_153e0 = load i64, i64* @rbp, align 8
  %v1_153e0 = add i64 %v0_153e0, 128
  %v2_153e0 = inttoptr i64 %v1_153e0 to i64*
  %v3_153e0 = load i64, i64* %v2_153e0, align 8
  store i64 %v3_153e0, i64* @rdi, align 8
  %v1_153ea = inttoptr i64 %v3_153e0 to i64*
  %v2_153ea = load i64, i64* %v1_153ea, align 8
  store i64 %v2_153ea, i64* @rax, align 8
  %v1_153f3 = inttoptr i64 %v2_153ea to i64*
  %v2_153f3 = load i64, i64* %v1_153f3, align 8
  store i64 %v2_153f3, i64* @rdx, align 8
  store i64 %v2_153ea, i64* @rdi, align 8
  %v4_153ff = trunc i64 %v2_153ea to i8
  %v5_153ff = icmp eq i8 %v4_153ff, 0
  br i1 %v5_153ff, label %dec_label_pc_1543d, label %dec_label_pc_15403

dec_label_pc_15403:                               ; preds = %dec_label_pc_153e0
  %v3_15403 = load i64, i64* %v2_153e0, align 8
  store i64 %v3_15403, i64* @rdi, align 8
  %v1_1540d = inttoptr i64 %v3_15403 to i64*
  %v2_1540d = load i64, i64* %v1_1540d, align 8
  store i64 %v2_1540d, i64* @rax, align 8
  %v1_15416 = inttoptr i64 %v2_1540d to i64*
  %v2_15416 = load i64, i64* %v1_15416, align 8
  store i64 %v2_15416, i64* @rdx, align 8
  store i64 %v2_1540d, i64* @rdi, align 8
  ret i64 %v2_1540d

dec_label_pc_1543d:                               ; preds = %dec_label_pc_153e0
  %v1_1543d = add i64 %v0_153e0, 152
  %v2_1543d = inttoptr i64 %v1_1543d to i64*
  %v3_1543d = load i64, i64* %v2_1543d, align 8
  store i64 %v3_1543d, i64* @rdi, align 8
  ret i64 %v2_153ea
}

define i64 @function_15455(i64 %arg1) local_unnamed_addr {
dec_label_pc_15455:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1545e() local_unnamed_addr {
dec_label_pc_1545e:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1546a() local_unnamed_addr {
dec_label_pc_1546a:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15476() local_unnamed_addr {
dec_label_pc_15476:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$748onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15490:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_15494 = load i64, i64* %r13.global-to-local, align 8
  %v0_15496 = load i64, i64* %r12.global-to-local, align 8
  %v0_15498 = load i64, i64* @rdi, align 8
  store i64 %v0_15498, i64* %r12.global-to-local, align 8
  %v0_1549b = load i64, i64* %rbp.global-to-local, align 8
  %v0_1549c = load i64, i64* @rbx, align 8
  %v0_1549d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1549d, i64* @rbx, align 8
  store i64 %v0_1549d, i64* %rbp.global-to-local, align 8
  store i64 1, i64* %r13.global-to-local, align 8
  store i64 3, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_1549d, i64* @rdi, align 8
  %v0_154eb = load i64, i64* inttoptr (i64 87282 to i64*), align 8
  store i64 %v0_154eb, i64* @rax, align 8
  store i64 %v0_1549c, i64* @rbx, align 8
  store i64 %v0_1549b, i64* %rbp.global-to-local, align 8
  store i64 %v0_15496, i64* %r12.global-to-local, align 8
  store i64 %v0_15494, i64* %r13.global-to-local, align 8
  ret i64 %v0_154eb
}

define i64 @function_15740() local_unnamed_addr {
dec_label_pc_15740:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  %v1_15740 = add i64 %tmp229, 64
  %v2_15740 = inttoptr i64 %v1_15740 to i64*
  %v3_15740 = load i64, i64* %v2_15740, align 8
  store i64 %v3_15740, i64* @rdi, align 8
  %v1_15748 = inttoptr i64 %v3_15740 to i64*
  %v2_15748 = load i64, i64* %v1_15748, align 8
  store i64 %v2_15748, i64* @rax, align 8
  %v1_15751 = inttoptr i64 %v2_15748 to i64*
  %v2_15751 = load i64, i64* %v1_15751, align 8
  store i64 %v2_15751, i64* @rdx, align 8
  store i64 %v2_15748, i64* @rdi, align 8
  %v1_15765 = add i64 %tmp229, 72
  %v2_15765 = inttoptr i64 %v1_15765 to i64*
  %v3_15765 = load i64, i64* %v2_15765, align 8
  store i64 %v3_15765, i64* @rdi, align 8
  ret i64 %v2_15748
}

define i64 @function_15788() local_unnamed_addr {
dec_label_pc_15788:
  %tmp236 = call i64 @__decompiler_undefined_function_0()
  %v1_15788 = add i64 %tmp236, 104
  %v2_15788 = inttoptr i64 %v1_15788 to i64*
  %v3_15788 = load i64, i64* %v2_15788, align 8
  store i64 %v3_15788, i64* @rdi, align 8
  %v1_15790 = inttoptr i64 %v3_15788 to i64*
  %v2_15790 = load i64, i64* %v1_15790, align 8
  store i64 %v2_15790, i64* @rax, align 8
  %v1_15799 = inttoptr i64 %v2_15790 to i64*
  %v2_15799 = load i64, i64* %v1_15799, align 8
  store i64 %v2_15799, i64* @rdx, align 8
  store i64 %v2_15790, i64* @rdi, align 8
  %v4_157a5 = trunc i64 %v2_15790 to i8
  %v5_157a5 = icmp eq i8 %v4_157a5, 0
  br i1 %v5_157a5, label %dec_label_pc_157dd, label %dec_label_pc_157a9

dec_label_pc_157a9:                               ; preds = %dec_label_pc_15788
  %v3_157a9 = load i64, i64* %v2_15788, align 8
  store i64 %v3_157a9, i64* @rdi, align 8
  %v1_157b1 = inttoptr i64 %v3_157a9 to i64*
  %v2_157b1 = load i64, i64* %v1_157b1, align 8
  store i64 %v2_157b1, i64* @rax, align 8
  %v1_157ba = inttoptr i64 %v2_157b1 to i64*
  %v2_157ba = load i64, i64* %v1_157ba, align 8
  store i64 %v2_157ba, i64* @rdx, align 8
  store i64 %v2_157b1, i64* @rdi, align 8
  ret i64 %v2_157b1

dec_label_pc_157dd:                               ; preds = %dec_label_pc_15788
  %v1_157dd = add i64 %tmp236, 128
  %v2_157dd = inttoptr i64 %v1_157dd to i64*
  %v3_157dd = load i64, i64* %v2_157dd, align 8
  store i64 %v3_157dd, i64* @rdi, align 8
  %v1_157e8 = inttoptr i64 %v3_157dd to i64*
  %v2_157e8 = load i64, i64* %v1_157e8, align 8
  store i64 %v2_157e8, i64* @rax, align 8
  %v1_157f1 = inttoptr i64 %v2_157e8 to i64*
  %v2_157f1 = load i64, i64* %v1_157f1, align 8
  store i64 %v2_157f1, i64* @rdx, align 8
  store i64 %v2_157e8, i64* @rdi, align 8
  %v4_157fd = trunc i64 %v2_157e8 to i8
  %v5_157fd = icmp eq i8 %v4_157fd, 0
  br i1 %v5_157fd, label %dec_label_pc_1583e, label %dec_label_pc_15801

dec_label_pc_15801:                               ; preds = %dec_label_pc_157dd
  %v3_15801 = load i64, i64* %v2_157dd, align 8
  store i64 %v3_15801, i64* @rdi, align 8
  %v1_1580c = inttoptr i64 %v3_15801 to i64*
  %v2_1580c = load i64, i64* %v1_1580c, align 8
  store i64 %v2_1580c, i64* @rax, align 8
  %v1_15815 = inttoptr i64 %v2_1580c to i64*
  %v2_15815 = load i64, i64* %v1_15815, align 8
  store i64 %v2_15815, i64* @rdx, align 8
  store i64 %v2_1580c, i64* @rdi, align 8
  ret i64 %v2_1580c

dec_label_pc_1583e:                               ; preds = %dec_label_pc_157dd
  %v1_1583e = add i64 %tmp236, 152
  %v2_1583e = inttoptr i64 %v1_1583e to i64*
  %v3_1583e = load i64, i64* %v2_1583e, align 8
  store i64 %v3_1583e, i64* @rdi, align 8
  %v1_15849 = inttoptr i64 %v3_1583e to i64*
  %v2_15849 = load i64, i64* %v1_15849, align 8
  store i64 %v2_15849, i64* @rax, align 8
  %v1_15852 = inttoptr i64 %v2_15849 to i64*
  %v2_15852 = load i64, i64* %v1_15852, align 8
  store i64 %v2_15852, i64* @rdx, align 8
  store i64 %v2_15849, i64* @rdi, align 8
  %v1_15866 = add i64 %tmp236, 160
  %v2_15866 = inttoptr i64 %v1_15866 to i64*
  %v3_15866 = load i64, i64* %v2_15866, align 8
  store i64 %v3_15866, i64* @rdi, align 8
  %v1_15871 = inttoptr i64 %v3_15866 to i64*
  %v2_15871 = load i64, i64* %v1_15871, align 8
  store i64 %v2_15871, i64* @rax, align 8
  %v1_1587a = inttoptr i64 %v2_15871 to i64*
  %v2_1587a = load i64, i64* %v1_1587a, align 8
  store i64 %v2_1587a, i64* @rdx, align 8
  store i64 %v2_15871, i64* @rdi, align 8
  %v1_1588e = add i64 %tmp236, 168
  %v2_1588e = inttoptr i64 %v1_1588e to i64*
  %v3_1588e = load i64, i64* %v2_1588e, align 8
  store i64 %v3_1588e, i64* @rdi, align 8
  %v1_15899 = inttoptr i64 %v3_1588e to i64*
  %v2_15899 = load i64, i64* %v1_15899, align 8
  store i64 %v2_15899, i64* @rax, align 8
  %v1_158a2 = inttoptr i64 %v2_15899 to i64*
  %v2_158a2 = load i64, i64* %v1_158a2, align 8
  store i64 %v2_158a2, i64* @rdx, align 8
  store i64 %v2_15899, i64* @rdi, align 8
  %v1_158b6 = add i64 %tmp236, 176
  %v2_158b6 = inttoptr i64 %v1_158b6 to i64*
  %v3_158b6 = load i64, i64* %v2_158b6, align 8
  store i64 %v3_158b6, i64* @rdi, align 8
  %v1_158c1 = inttoptr i64 %v3_158b6 to i64*
  %v2_158c1 = load i64, i64* %v1_158c1, align 8
  store i64 %v2_158c1, i64* @rax, align 8
  %v1_158ca = inttoptr i64 %v2_158c1 to i64*
  %v2_158ca = load i64, i64* %v1_158ca, align 8
  store i64 %v2_158ca, i64* @rdx, align 8
  store i64 %v2_158c1, i64* @rdi, align 8
  %v1_158de = add i64 %tmp236, 184
  %v2_158de = inttoptr i64 %v1_158de to i64*
  %v3_158de = load i64, i64* %v2_158de, align 8
  store i64 %v3_158de, i64* @rdi, align 8
  ret i64 %v2_158c1
}

define i64 @function_158f7(i64 %arg1) local_unnamed_addr {
dec_label_pc_158f7:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15900() local_unnamed_addr {
dec_label_pc_15900:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1590c() local_unnamed_addr {
dec_label_pc_1590c:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15918() local_unnamed_addr {
dec_label_pc_15918:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9varargsOfEJPNS1_7VarargsEPS2_S5_S4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15930:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 88382, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_159f0() local_unnamed_addr {
dec_label_pc_159f0:
  %v0_159fc = load i64, i64* @rax, align 8
  store i64 %v0_159fc, i64* @rbx, align 8
  store i64 %v0_159fc, i64* @rdi, align 8
  ret i64 %v0_159fc
}

define i64 @function_15a1b() local_unnamed_addr {
dec_label_pc_15a1b:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15a27(i64 %arg1) local_unnamed_addr {
dec_label_pc_15a27:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm224Varargs$ArrayPartVarargs3argEJPNS1_8LuaValueEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15a30:
  store i64 %arg1, i64* @rdi, align 8
  %v4_15a34 = trunc i64 %arg2 to i32
  %tmp244 = icmp slt i32 %v4_15a34, 1
  br i1 %tmp244, label %dec_label_pc_15a78, label %dec_label_pc_15a38

dec_label_pc_15a38:                               ; preds = %dec_label_pc_15a30
  %v0_15a38 = load i64, i64* @rdi, align 8
  %v1_15a38 = add i64 %v0_15a38, 24
  %v2_15a38 = inttoptr i64 %v1_15a38 to i32*
  %v3_15a38 = load i32, i32* %v2_15a38, align 4
  %v4_15a38 = zext i32 %v3_15a38 to i64
  store i64 %v4_15a38, i64* @rax, align 8
  %v8_15a3d = icmp slt i64 %v4_15a38, %arg2
  br i1 %v8_15a3d, label %dec_label_pc_15a60, label %dec_label_pc_15a3f

dec_label_pc_15a3f:                               ; preds = %dec_label_pc_15a38
  %v1_15a3f = add i64 %v0_15a38, 16
  %v2_15a3f = inttoptr i64 %v1_15a3f to i64*
  %v3_15a3f = load i64, i64* %v2_15a3f, align 8
  store i64 %v3_15a3f, i64* @rax, align 8
  %v1_15a43 = add i64 %v0_15a38, 8
  %v2_15a43 = inttoptr i64 %v1_15a43 to i32*
  %v3_15a43 = load i32, i32* %v2_15a43, align 4
  %v4_15a43 = zext i32 %v3_15a43 to i64
  store i64 %v4_15a43, i64* @rdx, align 8
  %v3_15a46 = add i64 %arg2, -1
  %v4_15a46 = add i64 %v3_15a46, %v4_15a43
  store i64 %v4_15a46, i64* @rdi, align 8
  %v1_15a4a = trunc i64 %v4_15a46 to i32
  %v3_15a4a = add i64 %v3_15a3f, 8
  %v4_15a4a = inttoptr i64 %v3_15a4a to i32*
  %v5_15a4a = load i32, i32* %v4_15a4a, align 4
  %v11_15a4a = icmp ult i32 %v1_15a4a, %v5_15a4a
  %v1_15a4d = add i64 %v3_15a3f, 16
  store i64 %v1_15a4d, i64* @rdx, align 8
  %v1_15a51 = icmp eq i1 %v11_15a4a, false
  br i1 %v1_15a51, label %bb, label %dec_label_pc_15a53

bb:                                               ; preds = %dec_label_pc_15a3f
  %v2_15a51 = call i64 @function_15a8f()
  store i64 %v2_15a51, i64* @rax, align 8
  %v0_15a56.pre = load i64, i64* @rdx, align 8
  %v1_15a56.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_15a53

dec_label_pc_15a53:                               ; preds = %bb, %dec_label_pc_15a3f
  %v1_15a56 = phi i64 [ %v1_15a56.pre, %bb ], [ %v4_15a46, %dec_label_pc_15a3f ]
  %v0_15a56 = phi i64 [ %v0_15a56.pre, %bb ], [ %v1_15a4d, %dec_label_pc_15a3f ]
  %v2_15a56 = mul i64 %v1_15a56, 8
  %v3_15a56 = add i64 %v2_15a56, %v0_15a56
  %v4_15a56 = inttoptr i64 %v3_15a56 to i64*
  %v5_15a56 = load i64, i64* %v4_15a56, align 8
  store i64 %v5_15a56, i64* @rax, align 8
  ret i64 %v5_15a56

dec_label_pc_15a60:                               ; preds = %dec_label_pc_15a38
  %v1_15a60 = add i64 %v0_15a38, 32
  %v2_15a60 = inttoptr i64 %v1_15a60 to i64*
  %v3_15a60 = load i64, i64* %v2_15a60, align 8
  store i64 %v3_15a60, i64* @rdi, align 8
  %v1_15a66 = inttoptr i64 %v3_15a60 to i64*
  %v2_15a66 = load i64, i64* %v1_15a66, align 8
  store i64 %v2_15a66, i64* @rdx, align 8
  ret i64 %v4_15a38

dec_label_pc_15a78:                               ; preds = %dec_label_pc_15a30
  store i64 88703, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15a8f() local_unnamed_addr {
dec_label_pc_15a8f:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @_ZN3org4luaj3vm210LuaInteger7valueOfEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_15aa0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 88747, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15b0e() local_unnamed_addr {
dec_label_pc_15b0e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm218Globals$UTF8Stream5availEJiv"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_15b20:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_15b20 = load i64, i64* @rdi, align 8
  %v1_15b20 = add i64 %v0_15b20, 16
  %v2_15b20 = inttoptr i64 %v1_15b20 to i32*
  %v3_15b20 = load i32, i32* %v2_15b20, align 4
  %v4_15b20 = zext i32 %v3_15b20 to i64
  store i64 %v4_15b20, i64* @rdx, align 8
  %v1_15b23 = add i64 %v0_15b20, 20
  %v2_15b23 = inttoptr i64 %v1_15b23 to i32*
  %v3_15b23 = load i32, i32* %v2_15b23, align 4
  %v4_15b23 = zext i32 %v3_15b23 to i64
  store i64 %v4_15b23, i64* @rax, align 8
  %v9_15b26 = icmp ugt i32 %v3_15b23, %v3_15b20
  br i1 %v9_15b26, label %dec_label_pc_15b2a, label %dec_label_pc_15b30

dec_label_pc_15b2a:                               ; preds = %dec_label_pc_15b20
  %v4_15b2a = sub i32 %v3_15b23, %v3_15b20
  %v20_15b2a = zext i32 %v4_15b2a to i64
  store i64 %v20_15b2a, i64* @rax, align 8
  ret i64 %v20_15b2a

dec_label_pc_15b30:                               ; preds = %dec_label_pc_15b20
  %v0_15b30 = load i64, i64* @rbx, align 8
  store i64 %v0_15b30, i64* %stack_var_-8, align 8
  store i64 %v0_15b20, i64* @rbx, align 8
  %v1_15b34 = add i64 %v0_15b20, 32
  %v2_15b34 = inttoptr i64 %v1_15b34 to i64*
  %v3_15b34 = load i64, i64* %v2_15b34, align 8
  store i64 %v3_15b34, i64* @rdi, align 8
  %v1_15b38 = add i64 %v0_15b20, 24
  %v2_15b38 = inttoptr i64 %v1_15b38 to i64*
  %v1_15b3c = inttoptr i64 %v3_15b34 to i64*
  %v2_15b3c = load i64, i64* %v1_15b3c, align 8
  store i64 %v2_15b3c, i64* @rax, align 8
  %v4_15b42 = trunc i64 %v2_15b3c to i32
  %v6_15b42 = icmp slt i32 %v4_15b42, 0
  br i1 %v6_15b42, label %dec_label_pc_15b8d, label %dec_label_pc_15b46

dec_label_pc_15b46:                               ; preds = %dec_label_pc_15b30
  %v5_15b42 = icmp eq i32 %v4_15b42, 0
  %v1_15b46 = icmp eq i1 %v5_15b42, false
  br i1 %v1_15b46, label %dec_label_pc_15b70, label %dec_label_pc_15b48

dec_label_pc_15b48:                               ; preds = %dec_label_pc_15b46
  %v3_15b48 = load i64, i64* %v2_15b34, align 8
  store i64 %v3_15b48, i64* @rdi, align 8
  %v1_15b4c = inttoptr i64 %v3_15b48 to i64*
  %v2_15b4c = load i64, i64* %v1_15b4c, align 8
  store i64 %v2_15b4c, i64* @rax, align 8
  %v4_15b52 = trunc i64 %v2_15b4c to i32
  %v6_15b52 = icmp slt i32 %v4_15b52, 0
  br i1 %v6_15b52, label %dec_label_pc_15b8d, label %dec_label_pc_15b56

dec_label_pc_15b56:                               ; preds = %dec_label_pc_15b48
  %v3_15b56 = load i64, i64* %v2_15b38, align 8
  store i64 %v3_15b56, i64* @rdi, align 8
  %v1_15b5a = add i64 %v3_15b56, 8
  %v2_15b5a = inttoptr i64 %v1_15b5a to i32*
  %v3_15b5a = load i32, i32* %v2_15b5a, align 4
  %v4_15b5a = zext i32 %v3_15b5a to i64
  store i64 %v4_15b5a, i64* @rdx, align 8
  %v5_15b5d = icmp eq i32 %v3_15b5a, 0
  br i1 %v5_15b5d, label %dec_label_pc_15b94, label %dec_label_pc_15b61

dec_label_pc_15b61:                               ; preds = %dec_label_pc_15b56
  %v1_15b61 = trunc i64 %v2_15b4c to i16
  %v3_15b61 = add i64 %v3_15b56, 12
  %v4_15b61 = inttoptr i64 %v3_15b61 to i16*
  store i16 %v1_15b61, i16* %v4_15b61, align 2
  store i64 1, i64* @rax, align 8
  %v0_15b74.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_15b74

dec_label_pc_15b70:                               ; preds = %dec_label_pc_15b46
  %v3_15b70 = load i64, i64* %v2_15b38, align 8
  store i64 %v3_15b70, i64* @rdi, align 8
  br label %dec_label_pc_15b74

dec_label_pc_15b74:                               ; preds = %dec_label_pc_15b70, %dec_label_pc_15b61
  %v0_15b74 = phi i64 [ %v0_15b20, %dec_label_pc_15b70 ], [ %v0_15b74.pre, %dec_label_pc_15b61 ]
  %v1_15b74 = add i64 %v0_15b74, 8
  %v2_15b74 = inttoptr i64 %v1_15b74 to i64*
  %v3_15b74 = load i64, i64* %v2_15b74, align 8
  store i64 %v3_15b74, i64* @rdx, align 8
  %v1_15b78 = add i64 %v0_15b74, 16
  %v2_15b78 = inttoptr i64 %v1_15b78 to i32*
  store i32 0, i32* %v2_15b78, align 4
  store i64 0, i64* @rcx, align 8
  %v0_15b81 = load i64, i64* @rax, align 8
  %v1_15b88 = trunc i64 %v0_15b81 to i32
  %v2_15b88 = load i64, i64* @rbx, align 8
  %v3_15b88 = add i64 %v2_15b88, 20
  %v4_15b88 = inttoptr i64 %v3_15b88 to i32*
  store i32 %v1_15b88, i32* %v4_15b88, align 4
  %v2_15b8b = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_15b8b, i64* @rbx, align 8
  %v0_15b8c = load i64, i64* @rax, align 8
  ret i64 %v0_15b8c

dec_label_pc_15b8d:                               ; preds = %dec_label_pc_15b48, %dec_label_pc_15b30
  store i64 4294967295, i64* @rax, align 8
  store i64 %v0_15b30, i64* @rbx, align 8
  ret i64 4294967295

dec_label_pc_15b94:                               ; preds = %dec_label_pc_15b56
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable8hashSlotEJiPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15ba0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_15ba2 = load i64, i64* @rdi, align 8
  store i64 %v0_15ba2, i64* @rbx, align 8
  store i64 89004, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15c00() local_unnamed_addr {
dec_label_pc_15c00:
  store i64 89104, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable10isLargeKeyEJbPNS1_8LuaValueE(i64 %arg1) local_unnamed_addr {
dec_label_pc_15c30:
  store i64 %arg1, i64* @rdi, align 8
  %v0_15c31 = load i64, i64* @rdi, align 8
  store i64 %v0_15c31, i64* @rbx, align 8
  store i64 89147, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm28LuaTable12defaultEntryEJPNS1_14LuaTable$EntryEPNS1_8LuaValueES6_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15c90:
  store i64 %arg1, i64* @rdi, align 8
  store i64 89246, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15d00() local_unnamed_addr {
dec_label_pc_15d00:
  store i64 89351, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15d40() local_unnamed_addr {
dec_label_pc_15d40:
  store i64 89415, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry3argEJPNS1_8LuaValueEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15d90:
  store i64 %arg1, i64* @rdi, align 8
  %v1_15d94 = trunc i64 %arg2 to i32
  %v11_15d94 = icmp eq i32 %v1_15d94, 1
  br i1 %v11_15d94, label %dec_label_pc_15dd0, label %dec_label_pc_15d99

dec_label_pc_15d99:                               ; preds = %dec_label_pc_15d90
  %v11_15d99 = icmp eq i32 %v1_15d94, 2
  br i1 %v11_15d99, label %dec_label_pc_15dc0, label %dec_label_pc_15d9e

dec_label_pc_15d9e:                               ; preds = %dec_label_pc_15d99
  store i64 89509, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_15dac = load i64, i64* inttoptr (i64 89523 to i64*), align 8
  store i64 %v0_15dac, i64* @rax, align 8
  ret i64 %v0_15dac

dec_label_pc_15dc0:                               ; preds = %dec_label_pc_15d99
  %v2_15dc0 = load i64, i64* @rdi, align 8
  store i64 %v2_15dc0, i64* @rax, align 8
  ret i64 %v2_15dc0

dec_label_pc_15dd0:                               ; preds = %dec_label_pc_15d90
  %v2_15dd0 = load i64, i64* @rdi, align 8
  store i64 %v2_15dd0, i64* @rax, align 8
  ret i64 %v2_15dd0
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry7subargsEJPNS1_7VarargsEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15de0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_15de0 = trunc i64 %arg2 to i32
  %v11_15de0 = icmp eq i32 %v1_15de0, 1
  store i64 %arg1, i64* @rax, align 8
  br i1 %v11_15de0, label %bb, label %dec_label_pc_15de8

bb:                                               ; preds = %dec_label_pc_15de0
  %v1_15de6 = call i64 @function_15e20()
  store i64 %v1_15de6, i64* @rax, align 8
  %v0_15dec.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_15de8

dec_label_pc_15de8:                               ; preds = %bb, %dec_label_pc_15de0
  %v0_15dec = phi i64 [ %v0_15dec.pre, %bb ], [ %arg2, %dec_label_pc_15de0 ]
  %v1_15dec = trunc i64 %v0_15dec to i32
  %v11_15dec = icmp eq i32 %v1_15dec, 2
  br i1 %v11_15dec, label %bb240, label %dec_label_pc_15df1

bb240:                                            ; preds = %dec_label_pc_15de8
  %v2_15def = call i64 @function_15e10(i64 %arg1)
  store i64 %v2_15def, i64* @rax, align 8
  br label %dec_label_pc_15df1

dec_label_pc_15df1:                               ; preds = %bb240, %dec_label_pc_15de8
  store i64 89592, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_15e10(i64 %arg1) local_unnamed_addr {
dec_label_pc_15e10:
  store i64 %arg1, i64* @rdi, align 8
  %v2_15e10 = load i64, i64* @rdi, align 8
  store i64 %v2_15e10, i64* @rdx, align 8
  %v0_15e1d = load i64, i64* @rax, align 8
  ret i64 %v0_15e1d
}

define i64 @function_15e20() local_unnamed_addr {
dec_label_pc_15e20:
  %v0_15e20 = load i64, i64* @rax, align 8
  ret i64 %v0_15e20
}

define i64 @_ZN3org4luaj3vm29LuaString10scannumberEJdi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15e30:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_15e30 = load i64, i64* %rsi.global-to-local, align 8
  %v1_15e30 = add i64 %v0_15e30, -2
  store i64 %v1_15e30, i64* @rax, align 8
  %v1_15e33 = trunc i64 %v1_15e30 to i32
  %tmp267 = icmp ult i32 %v1_15e33, 35
  br i1 %tmp267, label %dec_label_pc_15e38, label %dec_label_pc_15ea8

dec_label_pc_15e38:                               ; preds = %dec_label_pc_15e30
  %v0_15e38 = load i64, i64* @rdi, align 8
  %v1_15e38 = add i64 %v0_15e38, 16
  %v2_15e38 = inttoptr i64 %v1_15e38 to i32*
  %v3_15e38 = load i32, i32* %v2_15e38, align 4
  %v4_15e38 = zext i32 %v3_15e38 to i64
  store i64 %v4_15e38, i64* @rdx, align 8
  %v1_15e3b = add i64 %v0_15e38, 20
  %v2_15e3b = inttoptr i64 %v1_15e3b to i32*
  %v3_15e3b = load i32, i32* %v2_15e3b, align 4
  %v4_15e3f = add i32 %v3_15e3b, %v3_15e38
  %v20_15e3f = zext i32 %v4_15e3f to i64
  %v9_15e42 = icmp ult i32 %v3_15e38, %v4_15e3f
  br i1 %v9_15e42, label %dec_label_pc_15e47, label %dec_label_pc_15ea8

dec_label_pc_15e47:                               ; preds = %dec_label_pc_15e38
  %v0_15e47 = load i64, i64* @rbx, align 8
  store i64 %v0_15e47, i64* %stack_var_-8, align 8
  %v1_15e48 = add i64 %v0_15e38, 8
  %v2_15e48 = inttoptr i64 %v1_15e48 to i64*
  %v3_15e48 = load i64, i64* %v2_15e48, align 8
  store i64 %v3_15e48, i64* @rbx, align 8
  %v1_15e4c = add i64 %v3_15e48, 8
  %v2_15e4c = inttoptr i64 %v1_15e4c to i32*
  %v3_15e4c = load i32, i32* %v2_15e4c, align 4
  %v1_15e50 = add i64 %v3_15e48, 12
  store i64 %v1_15e50, i64* @r11, align 8
  store i64 %v4_15e38, i64* @rax, align 8
  %v3_15e60 = add nuw nsw i64 %v4_15e38, 12
  %v4_15e60 = add i64 %v3_15e60, %v3_15e48
  %v5_15e60 = inttoptr i64 %v4_15e60 to i8*
  %v6_15e60 = load i8, i8* %v5_15e60, align 1
  %v15_15e60 = icmp eq i8 %v6_15e60, 32
  %v1_15e65 = icmp eq i1 %v15_15e60, false
  br i1 %v1_15e65, label %dec_label_pc_15eb8, label %dec_label_pc_15e67

dec_label_pc_15e67:                               ; preds = %dec_label_pc_15e47
  %v1_15e67 = add nuw nsw i64 %v4_15e38, 1
  store i64 %v1_15e67, i64* @rax, align 8
  %v2_15e6d = add i64 %v1_15e50, %v1_15e67
  store i64 %v2_15e6d, i64* @rcx, align 8
  br label %dec_label_pc_15e92

dec_label_pc_15e78:                               ; preds = %dec_label_pc_15e92
  %v1_15e81 = inttoptr i64 %v0_15e88 to i8*
  %v2_15e81 = load i8, i8* %v1_15e81, align 1
  %v2_15e85 = add nsw i64 %v0_15e85, 1
  %v17_15e85 = and i64 %v2_15e85, 4294967295
  store i64 %v17_15e85, i64* @rax, align 8
  %v1_15e88 = add i64 %v0_15e88, 1
  store i64 %v1_15e88, i64* @rcx, align 8
  %v10_15e8c = icmp eq i8 %v2_15e81, 32
  %v1_15e90 = icmp eq i1 %v10_15e8c, false
  br i1 %v1_15e90, label %dec_label_pc_15eb8, label %dec_label_pc_15e92

dec_label_pc_15e92:                               ; preds = %dec_label_pc_15e78, %dec_label_pc_15e67
  %v0_15e88 = phi i64 [ %v1_15e88, %dec_label_pc_15e78 ], [ %v2_15e6d, %dec_label_pc_15e67 ]
  %v0_15e85 = phi i64 [ %v17_15e85, %dec_label_pc_15e78 ], [ %v1_15e67, %dec_label_pc_15e67 ]
  %v1_15e92 = trunc i64 %v0_15e85 to i32
  %v14_15e92 = icmp eq i32 %v1_15e92, %v4_15e3f
  store i64 %v0_15e85, i64* @rdx, align 8
  %v1_15e97 = icmp eq i1 %v14_15e92, false
  br i1 %v1_15e97, label %dec_label_pc_15e78, label %dec_label_pc_15e99

dec_label_pc_15e99:                               ; preds = %dec_label_pc_15e92
  %v0_15e99 = load i64, i64* inttoptr (i64 89761 to i64*), align 8
  %v1_15e99 = call i128 @__asm_movsd(i64 %v0_15e99)
  br label %dec_label_pc_15ea1

dec_label_pc_15ea1:                               ; preds = %dec_label_pc_15ee8, %dec_label_pc_15e99
  %v2_15ea1 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_15ea1, i64* @rbx, align 8
  %v0_15ea2 = load i64, i64* @rax, align 8
  ret i64 %v0_15ea2

dec_label_pc_15ea8:                               ; preds = %dec_label_pc_15ed8, %dec_label_pc_15ec1, %dec_label_pc_15e38, %dec_label_pc_15e30
  %merge = phi i64 [ %v1_15e30, %dec_label_pc_15e38 ], [ %v1_15e30, %dec_label_pc_15e30 ], [ %v1_15eb8, %dec_label_pc_15ec1 ], [ %v1_15ed0, %dec_label_pc_15ed8 ]
  ret i64 %merge

dec_label_pc_15eb8:                               ; preds = %dec_label_pc_15e78, %dec_label_pc_15e47
  %v2_15ee412 = phi i64 [ %v4_15e38, %dec_label_pc_15e47 ], [ %v0_15e85, %dec_label_pc_15e78 ]
  %v1_15eb8 = add nsw i64 %v20_15e3f, -1
  store i64 %v1_15eb8, i64* @rcx, align 8
  %v1_15ebc = trunc i64 %v1_15eb8 to i32
  %v9_15ebc = icmp ult i32 %v1_15ebc, %v3_15e4c
  %v1_15ebf = icmp eq i1 %v9_15ebc, false
  store i64 %v1_15eb8, i64* @rax, align 8
  br i1 %v1_15ebf, label %dec_label_pc_15efe, label %dec_label_pc_15ec1

dec_label_pc_15ec1:                               ; preds = %dec_label_pc_15eb8
  %v3_15ec4 = add nuw nsw i64 %v20_15e3f, 11
  %v4_15ec4 = add i64 %v3_15ec4, %v3_15e48
  %v5_15ec4 = inttoptr i64 %v4_15ec4 to i8*
  %v6_15ec4 = load i8, i8* %v5_15ec4, align 1
  %v15_15ec4 = icmp eq i8 %v6_15ec4, 32
  br i1 %v15_15ec4, label %dec_label_pc_15ee4.preheader, label %dec_label_pc_15ea8

dec_label_pc_15ee4.preheader:                     ; preds = %dec_label_pc_15ec1
  br label %dec_label_pc_15ee4

dec_label_pc_15ed0:                               ; preds = %dec_label_pc_15ee4
  %v1_15ed0 = add i64 %v0_15ed0, -1
  store i64 %v1_15ed0, i64* @rax, align 8
  %v1_15ed3 = trunc i64 %v1_15ed0 to i32
  %v9_15ed3 = icmp ult i32 %v1_15ed3, %v3_15e4c
  %v1_15ed6 = icmp eq i1 %v9_15ed3, false
  br i1 %v1_15ed6, label %dec_label_pc_15efe, label %dec_label_pc_15ed8

dec_label_pc_15ed8:                               ; preds = %dec_label_pc_15ed0
  %v3_15edb = add i64 %v1_15ed0, %v1_15e50
  %v4_15edb = inttoptr i64 %v3_15edb to i8*
  %v5_15edb = load i8, i8* %v4_15edb, align 1
  %v14_15edb = icmp eq i8 %v5_15edb, 32
  %v1_15ee0 = icmp eq i1 %v14_15edb, false
  br i1 %v1_15ee0, label %dec_label_pc_15ea8, label %dec_label_pc_15ee2

dec_label_pc_15ee2:                               ; preds = %dec_label_pc_15ed8
  store i64 %v1_15ed0, i64* @rcx, align 8
  br label %dec_label_pc_15ee4

dec_label_pc_15ee4:                               ; preds = %dec_label_pc_15ee4.preheader, %dec_label_pc_15ee2
  %v0_15ed0 = phi i64 [ %v1_15ed0, %dec_label_pc_15ee2 ], [ %v1_15eb8, %dec_label_pc_15ee4.preheader ]
  %v8_15ee6 = icmp sgt i64 %v0_15ed0, %v2_15ee412
  br i1 %v8_15ee6, label %dec_label_pc_15ed0, label %dec_label_pc_15ee8

dec_label_pc_15ee8:                               ; preds = %dec_label_pc_15ee4
  %v0_15ee8 = load i64, i64* inttoptr (i64 89840 to i64*), align 16
  %v1_15ee8 = call i128 @__asm_movsd(i64 %v0_15ee8)
  br label %dec_label_pc_15ea1

dec_label_pc_15efe:                               ; preds = %dec_label_pc_15ed0, %dec_label_pc_15eb8
  %v0_15efe = phi i64 [ %v1_15eb8, %dec_label_pc_15eb8 ], [ %v1_15ed0, %dec_label_pc_15ed0 ]
  store i64 %v0_15efe, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata6equalsEJbPN4java4lang6ObjectE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15f10:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_15f10 = load i64, i64* @rdi, align 8
  %v12_15f10 = icmp eq i64 %v0_15f10, %arg2
  br i1 %v12_15f10, label %bb, label %dec_label_pc_15f15

bb:                                               ; preds = %dec_label_pc_15f10
  %v1_15f13 = call i64 @function_15f60()
  store i64 %v1_15f13, i64* @rax, align 8
  %v0_15f17.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_15f15

dec_label_pc_15f15:                               ; preds = %bb, %dec_label_pc_15f10
  %v0_15f17 = phi i64 [ %v0_15f17.pre, %bb ], [ %arg2, %dec_label_pc_15f10 ]
  store i64 %v0_15f17, i64* @rbx, align 8
  store i64 89889, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_15f17, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_15f55(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15f55:
  store i64 %arg1, i64* @rbx, align 8
  %v0_15f5b = load i64, i64* @rax, align 8
  ret i64 %v0_15f5b
}

define i64 @function_15f60() local_unnamed_addr {
dec_label_pc_15f60:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm29LuaString6equalsEJbPN4java4lang6ObjectE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15f70:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble6dmod_dEJddd() local_unnamed_addr {
dec_label_pc_15fc0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 90055, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_15fcd = load i128, i128* %xmm0.global-to-local, align 8
  %v1_15fcd = call i64 @__asm_movsd.7465(i128 %v0_15fcd)
  %v0_15fd3 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_15fd3 = call i64 @__asm_movsd.7465(i128 %v0_15fd3)
  %v4_15fd3 = load i64, i64* @rax, align 8
  ret i64 %v4_15fd3
}

define i64 @_ZN3org4luaj3vm29LuaString3addEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16150:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16155 = load i64, i64* @rdi, align 8
  store i64 %v0_16155, i64* @rbx, align 8
  store i64 %v0_16155, i64* @rax, align 8
  %v0_16165 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_16165 = call i64 @__asm_movsd.7465(i128 %v0_16165)
  %v5_16165 = load i64, i64* @rax, align 8
  ret i64 %v5_16165
}

define i64 @_ZN3org4luaj3vm29LuaString3subEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_161c0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_161c5 = load i64, i64* @rdi, align 8
  store i64 %v0_161c5, i64* @rbx, align 8
  store i64 %v0_161c5, i64* @rax, align 8
  %v0_161d5 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_161d5 = call i64 @__asm_movsd.7465(i128 %v0_161d5)
  %v5_161d5 = load i64, i64* @rax, align 8
  ret i64 %v5_161d5
}

define i64 @_ZN3org4luaj3vm29LuaString3mulEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16230:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16235 = load i64, i64* @rdi, align 8
  store i64 %v0_16235, i64* @rbx, align 8
  store i64 %v0_16235, i64* @rax, align 8
  %v0_16245 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_16245 = call i64 @__asm_movsd.7465(i128 %v0_16245)
  %v5_16245 = load i64, i64* @rax, align 8
  ret i64 %v5_16245
}

define i64 @_ZN3org4luaj3vm29LuaString3powEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_162a0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_162a5 = load i64, i64* @rdi, align 8
  store i64 %v0_162a5, i64* @rbx, align 8
  store i64 %v0_162a5, i64* @rax, align 8
  %v0_162b5 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_162b5 = call i64 @__asm_movsd.7465(i128 %v0_162b5)
  %v5_162b5 = load i64, i64* @rax, align 8
  ret i64 %v5_162b5
}

define i64 @_ZN3org4luaj3vm29LuaString3divEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16310:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16315 = load i64, i64* @rdi, align 8
  store i64 %v0_16315, i64* @rbx, align 8
  store i64 %v0_16315, i64* @rax, align 8
  %v0_16325 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_16325 = call i64 @__asm_movsd.7465(i128 %v0_16325)
  %v5_16325 = load i64, i64* @rax, align 8
  ret i64 %v5_16325
}

define i64 @_ZN3org4luaj3vm29LuaString3modEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16380:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16385 = load i64, i64* @rdi, align 8
  store i64 %v0_16385, i64* @rbx, align 8
  store i64 %v0_16385, i64* @rax, align 8
  %v0_16395 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_16395 = call i64 @__asm_movsd.7465(i128 %v0_16395)
  %v5_16395 = load i64, i64* @rax, align 8
  ret i64 %v5_16395
}

define i64 @_ZN3org4luaj3vm29LuaString10checkarithEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_163f0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_163f0 = load i64, i64* @rbx, align 8
  store i64 %v0_163f0, i64* %stack_var_-8, align 8
  %v0_163f1 = load i64, i64* @rdi, align 8
  store i64 %v0_163f1, i64* @rbx, align 8
  store i64 %v0_163f1, i64* @rax, align 8
  %v0_16401 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_16401 = call i64 @__asm_movsd.7465(i128 %v0_16401)
  %v0_1640c = load i64, i64* @rax, align 8
  %v4_1640c = trunc i64 %v0_1640c to i8
  %v5_1640c = icmp eq i8 %v4_1640c, 0
  %v4_1640e = call i128 @__asm_movsd(i64 %v1_16401)
  br i1 %v5_1640c, label %dec_label_pc_16428, label %dec_label_pc_16416

dec_label_pc_16416:                               ; preds = %dec_label_pc_163f0
  %v2_16416 = load i64, i64* @rdi, align 8
  store i64 %v2_16416, i64* @rax, align 8
  %v0_16419 = load i64, i64* @rbx, align 8
  store i64 %v0_16419, i64* @rdi, align 8
  %v4_16422 = call i128 @__asm_movsd(i64 %v1_16401)
  br label %dec_label_pc_16428

dec_label_pc_16428:                               ; preds = %dec_label_pc_16416, %dec_label_pc_163f0
  %v0_16428 = phi i128 [ %v4_16422, %dec_label_pc_16416 ], [ %v4_1640e, %dec_label_pc_163f0 ]
  %v1_16428 = call i128 @__asm_movapd(i128 %v0_16428)
  store i128 %v1_16428, i128* %xmm0.global-to-local, align 8
  %v2_16430 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_16430, i64* @rbx, align 8
  %v0_16431 = load i64, i64* @rax, align 8
  ret i64 %v0_16431
}

define i64 @_ZN3org4luaj3vm29LuaString11checkdoubleEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_16440:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16441 = load i64, i64* @rdi, align 8
  store i64 %v0_16441, i64* @rbx, align 8
  store i64 %v0_16441, i64* @rax, align 8
  %v0_16451 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_16451 = call i64 @__asm_movsd.7465(i128 %v0_16451)
  %v5_16451 = load i64, i64* @rax, align 8
  ret i64 %v5_16451
}

define i64 @_ZN3org4luaj3vm29LuaDouble9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_16490:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %v0_16491 = load i64, i64* inttoptr (i64 91289 to i64*), align 8
  %v1_16491 = call i128 @__asm_movsd(i64 %v0_16491)
  store i128 %v1_16491, i128* @xmm1, align 8
  %v0_16499 = load i64, i64* @rdi, align 8
  store i64 %v0_16499, i64* @rbx, align 8
  %v1_1649c = add i64 %v0_16499, 8
  %v2_1649c = inttoptr i64 %v1_1649c to i64*
  %v3_1649c = load i64, i64* %v2_1649c, align 8
  %v4_1649c = call i128 @__asm_movsd(i64 %v3_1649c)
  store i64 9223372036854775807, i64* @rdi, align 8
  %v1_164ab = load i128, i128* @xmm1, align 8
  call void @__asm_ucomisd(i128 %v4_1649c, i128 %v1_164ab)
  %v0_164af = load i1, i1* %cf.global-to-local, align 1
  %v1_164af = icmp eq i1 %v0_164af, false
  br i1 %v1_164af, label %dec_label_pc_164dd, label %dec_label_pc_164b1

dec_label_pc_164b1:                               ; preds = %dec_label_pc_16490
  %v1_164b1 = call i128 @__asm_movsd(i64 48968)
  store i128 %v1_164b1, i128* @xmm1, align 8
  store i64 -9223372036854775808, i64* @rdi, align 8
  call void @__asm_ucomisd(i128 %v1_164b1, i128 %v4_1649c)
  %v0_164c7 = load i1, i1* %cf.global-to-local, align 1
  %v1_164c7 = icmp eq i1 %v0_164c7, false
  br i1 %v1_164c7, label %dec_label_pc_164dd, label %dec_label_pc_164c9

dec_label_pc_164c9:                               ; preds = %dec_label_pc_164b1
  call void @__asm_ucomisd(i128 %v4_1649c, i128 %v4_1649c)
  %v0_164cd = load i1, i1* @pf, align 1
  br i1 %v0_164cd, label %bb, label %dec_label_pc_164cf

bb:                                               ; preds = %dec_label_pc_164c9
  %v2_164cd = call i64 @function_16540(i64 -9223372036854775808)
  store i64 %v2_164cd, i64* @rax, align 8
  br label %dec_label_pc_164cf

dec_label_pc_164cf:                               ; preds = %bb, %dec_label_pc_164c9
  %v1_164cf = call i64 @__asm_cvttsd2si.7470(i128 %v4_1649c)
  store i64 %v1_164cf, i64* @rdi, align 8
  %v0_164d4 = load i128, i128* @xmm1, align 8
  %v2_164d4 = call i128 @__asm_pxor(i128 %v0_164d4, i128 %v0_164d4)
  %v1_164d8 = call i128 @__asm_cvtsi2sd(i64 %v1_164cf)
  store i128 %v1_164d8, i128* @xmm1, align 8
  br label %dec_label_pc_164dd

dec_label_pc_164dd:                               ; preds = %dec_label_pc_164cf, %dec_label_pc_164b1, %dec_label_pc_16490
  %v1_164dd = load i128, i128* @xmm1, align 8
  call void @__asm_ucomisd(i128 %v4_1649c, i128 %v1_164dd)
  %v0_164e1 = load i1, i1* @pf, align 1
  br i1 %v0_164e1, label %bb244, label %dec_label_pc_164e3

bb244:                                            ; preds = %dec_label_pc_164dd
  %v1_164e1 = call i64 @function_164f0()
  store i64 %v1_164e1, i64* @rax, align 8
  br label %dec_label_pc_164e3

dec_label_pc_164e3:                               ; preds = %bb244, %dec_label_pc_164dd
  %v0_164e3 = load i1, i1* @zf, align 1
  %v1_164e3 = icmp eq i1 %v0_164e3, false
  br i1 %v1_164e3, label %bb245, label %dec_label_pc_164e3.dec_label_pc_164e5_crit_edge

dec_label_pc_164e3.dec_label_pc_164e5_crit_edge:  ; preds = %dec_label_pc_164e3
  %v3_164e3.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_164e5

bb245:                                            ; preds = %dec_label_pc_164e3
  %v2_164e3 = call i64 @function_164f0()
  store i64 %v2_164e3, i64* @rax, align 8
  br label %dec_label_pc_164e5

dec_label_pc_164e5:                               ; preds = %dec_label_pc_164e3.dec_label_pc_164e5_crit_edge, %bb245
  %v3_164e3 = phi i64 [ %v3_164e3.pre, %dec_label_pc_164e3.dec_label_pc_164e5_crit_edge ], [ %v2_164e3, %bb245 ]
  ret i64 %v3_164e3
}

define i64 @function_164f0() local_unnamed_addr {
dec_label_pc_164f0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_16540(i64 %arg1) local_unnamed_addr {
dec_label_pc_16540:
  store i64 %arg1, i64* @rdi, align 8
  %v0_16540 = load i128, i128* @xmm1, align 8
  %v2_16540 = call i128 @__asm_pxor(i128 %v0_16540, i128 %v0_16540)
  store i128 %v2_16540, i128* @xmm1, align 8
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rdi, align 8
  %v0_16546 = load i64, i64* @rax, align 8
  ret i64 %v0_16546
}

define i64 @_ZN3org4luaj3vm28LuaValue11metatableOfEJPNS1_9MetatableEPS2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_16550:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 91492, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_165b0() local_unnamed_addr {
dec_label_pc_165b0:
  %v2_165b0 = load i64, i64* @rbp, align 8
  store i64 %v2_165b0, i64* @rax, align 8
  store i64 %v2_165b0, i64* @rbx, align 8
  store i64 %v2_165b0, i64* @rax, align 8
  store i64 %v2_165b0, i64* @rdi, align 8
  %v4_165d3 = trunc i64 %v2_165b0 to i8
  %v5_165d3 = icmp eq i8 %v4_165d3, 0
  br i1 %v5_165d3, label %bb, label %dec_label_pc_165de

bb:                                               ; preds = %dec_label_pc_165b0
  %v1_165d8 = call i64 @function_16660()
  store i64 %v1_165d8, i64* @rax, align 8
  %v2_165de.pre = load i64, i64* @rbp, align 8
  %v0_165e1.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_165de

dec_label_pc_165de:                               ; preds = %bb, %dec_label_pc_165b0
  %v0_165e1 = phi i64 [ %v0_165e1.pre, %bb ], [ %v2_165b0, %dec_label_pc_165b0 ]
  %v2_165de = phi i64 [ %v2_165de.pre, %bb ], [ %v2_165b0, %dec_label_pc_165b0 ]
  store i64 %v2_165de, i64* @rax, align 8
  store i64 %v0_165e1, i64* @rdi, align 8
  %v1_165ea = icmp eq i64 %v2_165de, 0
  store i64 %v2_165de, i64* @rbx, align 8
  br i1 %v1_165ea, label %bb240, label %dec_label_pc_165f6

bb240:                                            ; preds = %dec_label_pc_165de
  %v1_165f0 = call i64 @function_1668a()
  store i64 %v1_165f0, i64* @rax, align 8
  %v0_1660b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_165f6

dec_label_pc_165f6:                               ; preds = %bb240, %dec_label_pc_165de
  %v0_1660b = phi i64 [ %v0_1660b.pre, %bb240 ], [ %v2_165de, %dec_label_pc_165de ]
  %v15_16614 = phi i64 [ %v1_165f0, %bb240 ], [ %v2_165de, %dec_label_pc_165de ]
  store i64 %v0_1660b, i64* @rdi, align 8
  ret i64 %v15_16614
}

define i64 @function_16650(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_16650:
  store i64 0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_16660() local_unnamed_addr {
dec_label_pc_16660:
  store i64 91751, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_16680() local_unnamed_addr {
dec_label_pc_16680:
  %tmp233 = call i64 @__decompiler_undefined_function_0()
  %v4_16680 = trunc i64 %tmp233 to i32
  %v6_16680 = icmp slt i32 %v4_16680, 0
  br i1 %v6_16680, label %bb, label %dec_label_pc_16680.dec_label_pc_16685_crit_edge

dec_label_pc_16680.dec_label_pc_16685_crit_edge:  ; preds = %dec_label_pc_16680
  %v0_16688.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_16685

bb:                                               ; preds = %dec_label_pc_16680
  %v1_16683 = call i64 @function_16660()
  store i64 %v1_16683, i64* @rax, align 8
  br label %dec_label_pc_16685

dec_label_pc_16685:                               ; preds = %dec_label_pc_16680.dec_label_pc_16685_crit_edge, %bb
  %v0_16688 = phi i64 [ %v0_16688.pre, %dec_label_pc_16680.dec_label_pc_16685_crit_edge ], [ %v1_16683, %bb ]
  ret i64 %v0_16688
}

define i64 @function_1668a() local_unnamed_addr {
dec_label_pc_1668a:
  store i1 false, i1* @of, align 1
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print6formatEJvPN4java4lang6StringEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_166a0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_166a0 = icmp eq i64 %arg1, 0
  br i1 %v1_166a0, label %bb, label %dec_label_pc_166a0.dec_label_pc_166a9_crit_edge

dec_label_pc_166a0.dec_label_pc_166a9_crit_edge:  ; preds = %dec_label_pc_166a0
  %v1_166ab.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_166a9

bb:                                               ; preds = %dec_label_pc_166a0
  %v1_166a7 = call i64 @function_16728()
  store i64 %v1_166a7, i64* @rax, align 8
  br label %dec_label_pc_166a9

dec_label_pc_166a9:                               ; preds = %dec_label_pc_166a0.dec_label_pc_166a9_crit_edge, %bb
  %v1_166ab = phi i64 [ %v1_166ab.pre, %dec_label_pc_166a0.dec_label_pc_166a9_crit_edge ], [ %v1_166a7, %bb ]
  %v0_166a9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_166a9, i64* @rbx, align 8
  ret i64 %v1_166ab
}

define i64 @function_16728() local_unnamed_addr {
dec_label_pc_16728:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23Lua7chunkidEJPN4java4lang6StringES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_16730:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_16736 = load i64, i64* @rdi, align 8
  store i64 %v0_16736, i64* @rbx, align 8
  store i64 91968, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1682a() local_unnamed_addr {
dec_label_pc_1682a:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_168c0() local_unnamed_addr {
dec_label_pc_168c0:
  %v0_168c5 = load i64, i64* @rbx, align 8
  store i64 %v0_168c5, i64* @rdi, align 8
  %v1_168c5 = load i64, i64* @rax, align 8
  ret i64 %v1_168c5
}

define i64 @function_168d2() local_unnamed_addr {
dec_label_pc_168d2:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState13getSourceNameEJPN4java4lang6StringES6_(i64 %arg1) local_unnamed_addr {
dec_label_pc_168e0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_168e1 = load i64, i64* @rdi, align 8
  store i64 %v0_168e1, i64* @rbx, align 8
  store i64 92395, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_16930() local_unnamed_addr {
dec_label_pc_16930:
  %v0_16937 = load i64, i64* @rbx, align 8
  store i64 %v0_16937, i64* @rdi, align 8
  %v1_16937 = load i64, i64* @rax, align 8
  ret i64 %v1_16937
}

define i64 @function_1693f(i64 %arg1) local_unnamed_addr {
dec_label_pc_1693f:
  %v0_1693f = load i64, i64* @rax, align 8
  %v4_1693f = trunc i64 %v0_1693f to i8
  %v5_1693f = icmp eq i8 %v4_1693f, 0
  %v0_16941 = load i64, i64* @rbx, align 8
  store i64 %v0_16941, i64* @rax, align 8
  %v1_16944 = icmp eq i1 %v5_1693f, false
  %v3_16944 = load i64, i64* inttoptr (i64 92492 to i64*), align 8
  %v4_16944 = select i1 %v1_16944, i64 %v3_16944, i64 %v0_16941
  store i64 %v4_16944, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v4_16944
}

define i64 @function_1694e() local_unnamed_addr {
dec_label_pc_1694e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable4eq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16960:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16960 = load i64, i64* @rdi, align 8
  %v1_16960 = load i64, i64* %rsi.global-to-local, align 8
  %v12_16960 = icmp eq i64 %v0_16960, %v1_16960
  br i1 %v12_16960, label %dec_label_pc_16a08, label %dec_label_pc_16969

dec_label_pc_16969:                               ; preds = %dec_label_pc_16960
  %v1_16969 = add i64 %v0_16960, 32
  %v2_16969 = inttoptr i64 %v1_16969 to i64*
  %v3_16969 = load i64, i64* %v2_16969, align 8
  %v10_16969 = icmp eq i64 %v3_16969, 0
  br i1 %v10_16969, label %dec_label_pc_16a00, label %dec_label_pc_16974

dec_label_pc_16974:                               ; preds = %dec_label_pc_16969
  %v0_16974 = load i64, i64* %r13.global-to-local, align 8
  %v0_16976 = load i64, i64* %r12.global-to-local, align 8
  %v0_16978 = load i64, i64* %rbp.global-to-local, align 8
  %v0_16979 = load i64, i64* @rbx, align 8
  store i64 %v0_16960, i64* %rbp.global-to-local, align 8
  store i64 %v1_16960, i64* @rbx, align 8
  store i64 %v1_16960, i64* @rdi, align 8
  store i64 %v1_16960, i64* @rax, align 8
  %v4_16990 = trunc i64 %v1_16960 to i8
  %v5_16990 = icmp eq i8 %v4_16990, 0
  %v1_16992 = icmp eq i1 %v5_16990, false
  br i1 %v1_16992, label %dec_label_pc_169a8, label %dec_label_pc_16994

dec_label_pc_16994:                               ; preds = %dec_label_pc_169a8, %dec_label_pc_16974
  store i64 0, i64* @rax, align 8
  store i64 %v0_16979, i64* @rbx, align 8
  store i64 %v0_16978, i64* %rbp.global-to-local, align 8
  store i64 %v0_16976, i64* %r12.global-to-local, align 8
  ret i64 0

dec_label_pc_169a8:                               ; preds = %dec_label_pc_16974
  store i64 %v1_16960, i64* @rax, align 8
  store i64 %v1_16960, i64* @rdi, align 8
  %v1_169b4 = icmp eq i64 %v1_16960, 0
  store i64 %v1_16960, i64* %r12.global-to-local, align 8
  br i1 %v1_169b4, label %dec_label_pc_16994, label %dec_label_pc_169bc

dec_label_pc_169bc:                               ; preds = %dec_label_pc_169a8
  store i64 0, i64* @rax, align 8
  store i64 %v1_16960, i64* @rcx, align 8
  store i64 %v1_16960, i64* @rdx, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  store i64 %v0_16960, i64* @rdi, align 8
  store i64 %v0_16979, i64* @rbx, align 8
  store i64 %v0_16978, i64* %rbp.global-to-local, align 8
  store i64 %v0_16976, i64* %r12.global-to-local, align 8
  store i64 %v0_16974, i64* %r13.global-to-local, align 8
  ret i64 0

dec_label_pc_16a00:                               ; preds = %dec_label_pc_16969
  store i64 0, i64* @rax, align 8
  ret i64 0

dec_label_pc_16a08:                               ; preds = %dec_label_pc_16960
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot3setEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_16a10:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbp, align 8
  %v12_16a20 = icmp eq i64 %arg2, %arg1
  br i1 %v12_16a20, label %bb, label %dec_label_pc_16a25

bb:                                               ; preds = %dec_label_pc_16a10
  %v8_16a23 = call i64 @function_16a80(i64 %arg1, i64 %arg2, i64 %arg3, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_16a23, i64* @rax, align 8
  br label %dec_label_pc_16a25

dec_label_pc_16a25:                               ; preds = %bb, %dec_label_pc_16a10
  %v1_16a25 = add i64 %arg1, 16
  %v2_16a25 = inttoptr i64 %v1_16a25 to i64*
  %v3_16a25 = load i64, i64* %v2_16a25, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 7, i64* @rdx, align 8
  %v1_16a38 = inttoptr i64 %v3_16a25 to i64*
  %v2_16a38 = load i64, i64* %v1_16a38, align 8
  store i64 %v2_16a38, i64* @rax, align 8
  %v1_16a3c = inttoptr i64 %v2_16a38 to i64*
  %v2_16a3c = load i64, i64* %v1_16a3c, align 8
  store i64 %v2_16a3c, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_16a80(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_16a80:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16a80 = load i64, i64* %rsi.global-to-local, align 8
  %v1_16a80 = add i64 %v0_16a80, 8
  %v2_16a80 = inttoptr i64 %v1_16a80 to i64*
  %v3_16a80 = load i64, i64* %v2_16a80, align 8
  store i64 %v3_16a80, i64* @rdi, align 8
  %v0_16a84 = load i64, i64* @rdx, align 8
  store i64 %v0_16a84, i64* %rsi.global-to-local, align 8
  %v1_16a87 = inttoptr i64 %v3_16a80 to i64*
  %v2_16a87 = load i64, i64* %v1_16a87, align 8
  %v1_16a90 = load i64, i64* @rbp, align 8
  %v2_16a90 = add i64 %v1_16a90, 8
  %v3_16a90 = inttoptr i64 %v2_16a90 to i64*
  store i64 %v2_16a87, i64* %v3_16a90, align 8
  %v0_16a94 = load i64, i64* @rbp, align 8
  store i64 %v0_16a94, i64* @rax, align 8
  store i64 %arg4, i64* @rbx, align 8
  ret i64 %v0_16a94
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame10sourcelineEJPN4java4lang6StringEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_16ab0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_16ab2 = load i64, i64* @rdi, align 8
  store i64 %v0_16ab2, i64* @rbx, align 8
  %v1_16ab9 = add i64 %v0_16ab2, 8
  %v2_16ab9 = inttoptr i64 %v1_16ab9 to i64*
  %v3_16ab9 = load i64, i64* %v2_16ab9, align 8
  store i64 %v3_16ab9, i64* @rdi, align 8
  %v1_16abd = inttoptr i64 %v3_16ab9 to i64*
  %v2_16abd = load i64, i64* %v1_16abd, align 8
  store i64 %v2_16abd, i64* @rax, align 8
  %v4_16ac6 = trunc i64 %v2_16abd to i8
  %v5_16ac6 = icmp eq i8 %v4_16ac6, 0
  br i1 %v5_16ac6, label %bb, label %dec_label_pc_16ace

bb:                                               ; preds = %dec_label_pc_16ab0
  %v3_16ac8 = call i64 @function_16b50(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_16ac8, i64* @rax, align 8
  br label %dec_label_pc_16ace

dec_label_pc_16ace:                               ; preds = %bb, %dec_label_pc_16ab0
  %v4_16ac8 = phi i64 [ %v3_16ac8, %bb ], [ %v2_16abd, %dec_label_pc_16ab0 ]
  ret i64 %v4_16ac8
}

define i64 @function_16b50(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16b50:
  %v0_16b50 = load i64, i64* @rbx, align 8
  %v1_16b50 = add i64 %v0_16b50, 8
  %v2_16b50 = inttoptr i64 %v1_16b50 to i64*
  %v3_16b50 = load i64, i64* %v2_16b50, align 8
  store i64 %v3_16b50, i64* @rdi, align 8
  %v1_16b54 = inttoptr i64 %v3_16b50 to i64*
  %v2_16b54 = load i64, i64* %v1_16b54, align 8
  store i64 %v2_16b54, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_16b54
}

define i64 @function_16b64() local_unnamed_addr {
dec_label_pc_16b64:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib10lua_assertEJvb(i64 %arg1) local_unnamed_addr {
dec_label_pc_16b70:
  store i64 %arg1, i64* @rdi, align 8
  %v0_16b71 = load i64, i64* @rdi, align 8
  store i64 %v0_16b71, i64* @rbx, align 8
  store i64 93050, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib9checkopenEJPNS2_10IoLib$FileES5_"(i64 %arg1) local_unnamed_addr {
dec_label_pc_16bc0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_16bc0 = load i64, i64* @rdi, align 8
  store i64 %v2_16bc0, i64* @rax, align 8
  %v0_16bc3 = load i64, i64* @rbx, align 8
  store i64 %v2_16bc0, i64* @rbx, align 8
  %v4_16bcd = trunc i64 %v2_16bc0 to i8
  %v5_16bcd = icmp eq i8 %v4_16bcd, 0
  %v1_16bcf = icmp eq i1 %v5_16bcd, false
  br i1 %v1_16bcf, label %dec_label_pc_16bd6, label %dec_label_pc_16bd1

dec_label_pc_16bd1:                               ; preds = %dec_label_pc_16bc0
  store i64 %v2_16bc0, i64* @rax, align 8
  store i64 %v0_16bc3, i64* @rbx, align 8
  ret i64 %v2_16bc0

dec_label_pc_16bd6:                               ; preds = %dec_label_pc_16bc0
  ret i64 %v2_16bc0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState13check_captureEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16be0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16be0 = load i64, i64* %rsi.global-to-local, align 8
  %v1_16be6 = trunc i64 %v0_16be0 to i32
  %v2_16be6 = add i32 %v1_16be6, -49
  %v12_16be6 = icmp slt i32 %v2_16be6, 0
  %v17_16be6 = zext i32 %v2_16be6 to i64
  store i64 %v17_16be6, i64* @rax, align 8
  br i1 %v12_16be6, label %dec_label_pc_16c0b, label %dec_label_pc_16beb

dec_label_pc_16beb:                               ; preds = %dec_label_pc_16be0
  %v2_16beb = load i64, i64* @rdi, align 8
  %v3_16beb = add i64 %v2_16beb, 32
  %v4_16beb = inttoptr i64 %v3_16beb to i32*
  %v5_16beb = load i32, i32* %v4_16beb, align 4
  %v7_16bee = icmp slt i32 %v2_16be6, %v5_16beb
  br i1 %v7_16bee, label %dec_label_pc_16bf0, label %dec_label_pc_16c0b

dec_label_pc_16bf0:                               ; preds = %dec_label_pc_16beb
  %v1_16bf0 = add i64 %v2_16beb, 48
  %v2_16bf0 = inttoptr i64 %v1_16bf0 to i64*
  %v3_16bf0 = load i64, i64* %v2_16bf0, align 8
  store i64 %v3_16bf0, i64* @rdx, align 8
  %v3_16bf4 = add i64 %v3_16bf0, 8
  %v4_16bf4 = inttoptr i64 %v3_16bf4 to i32*
  %v5_16bf4 = load i32, i32* %v4_16bf4, align 4
  %v11_16bf4 = icmp ult i32 %v2_16be6, %v5_16bf4
  %v1_16bf7 = add i64 %v3_16bf0, 12
  store i64 %v1_16bf7, i64* @rcx, align 8
  %v1_16bfb = icmp eq i1 %v11_16bf4, false
  br i1 %v1_16bfb, label %dec_label_pc_16c17, label %dec_label_pc_16bfd

dec_label_pc_16bfd:                               ; preds = %dec_label_pc_16bf0
  store i64 %v17_16be6, i64* @rdx, align 8
  %v2_16c00 = mul nuw nsw i64 %v17_16be6, 4
  %v3_16c00 = add i64 %v1_16bf7, %v2_16c00
  %v4_16c00 = inttoptr i64 %v3_16c00 to i32*
  %v5_16c00 = load i32, i32* %v4_16c00, align 4
  %v15_16c00 = icmp eq i32 %v5_16c00, -1
  br i1 %v15_16c00, label %dec_label_pc_16c0b, label %dec_label_pc_16c06

dec_label_pc_16c06:                               ; preds = %dec_label_pc_16bfd
  ret i64 %v17_16be6

dec_label_pc_16c0b:                               ; preds = %dec_label_pc_16beb, %dec_label_pc_16bfd, %dec_label_pc_16be0
  %v0_16c0b = load i64, i64* inttoptr (i64 93202 to i64*), align 8
  store i64 %v0_16c0b, i64* @rdi, align 8
  br label %dec_label_pc_16c17

dec_label_pc_16c17:                               ; preds = %dec_label_pc_16c0b, %dec_label_pc_16bf0
  ret i64 %v17_16be6
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState16capture_to_closeEJiv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_16c20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_16c24 = load i64, i64* @rdi, align 8
  %v1_16c24 = add i64 %v0_16c24, 32
  %v2_16c24 = inttoptr i64 %v1_16c24 to i32*
  %v3_16c24 = load i32, i32* %v2_16c24, align 4
  %v2_16c27 = add i32 %v3_16c24, -1
  %v12_16c27 = icmp slt i32 %v2_16c27, 0
  %v17_16c27 = zext i32 %v2_16c27 to i64
  store i64 %v17_16c27, i64* @rax, align 8
  br i1 %v12_16c27, label %dec_label_pc_16c5a, label %dec_label_pc_16c2c

dec_label_pc_16c2c:                               ; preds = %dec_label_pc_16c20
  %v1_16c2c = add i64 %v0_16c24, 48
  %v2_16c2c = inttoptr i64 %v1_16c2c to i64*
  %v3_16c2c = load i64, i64* %v2_16c2c, align 8
  store i64 %v3_16c2c, i64* @rdx, align 8
  %v1_16c30 = add i64 %v3_16c2c, 8
  %v2_16c30 = inttoptr i64 %v1_16c30 to i32*
  %v3_16c30 = load i32, i32* %v2_16c30, align 4
  %v1_16c33 = add i64 %v3_16c2c, 12
  store i64 %v1_16c33, i64* @rcx, align 8
  %v9_16c37 = icmp ult i32 %v2_16c27, %v3_16c30
  br i1 %v9_16c37, label %dec_label_pc_16c4c, label %dec_label_pc_16c66

dec_label_pc_16c40:                               ; preds = %dec_label_pc_16c4c
  %v2_16c40 = add nuw nsw i64 %v0_16c40, 4294967295
  %v6_16c40 = icmp eq i64 %v0_16c40, 0
  %v17_16c40 = and i64 %v2_16c40, 4294967295
  store i64 %v17_16c40, i64* @rax, align 8
  br i1 %v6_16c40, label %dec_label_pc_16c5a.loopexit, label %dec_label_pc_16c48

dec_label_pc_16c48:                               ; preds = %dec_label_pc_16c40
  %v1_16c48 = trunc i64 %v2_16c40 to i32
  %v9_16c48 = icmp ult i32 %v1_16c48, %v3_16c30
  %v1_16c4a = icmp eq i1 %v9_16c48, false
  br i1 %v1_16c4a, label %dec_label_pc_16c66.loopexit, label %dec_label_pc_16c4c

dec_label_pc_16c4c:                               ; preds = %dec_label_pc_16c2c, %dec_label_pc_16c48
  %v0_16c40 = phi i64 [ %v17_16c40, %dec_label_pc_16c48 ], [ %v17_16c27, %dec_label_pc_16c2c ]
  store i64 %v0_16c40, i64* @rdx, align 8
  %v2_16c4f = mul nuw nsw i64 %v0_16c40, 4
  %v3_16c4f = add i64 %v2_16c4f, %v1_16c33
  %v4_16c4f = inttoptr i64 %v3_16c4f to i32*
  %v5_16c4f = load i32, i32* %v4_16c4f, align 4
  %v15_16c4f = icmp eq i32 %v5_16c4f, -1
  %v1_16c53 = icmp eq i1 %v15_16c4f, false
  br i1 %v1_16c53, label %dec_label_pc_16c40, label %dec_label_pc_16c55

dec_label_pc_16c55:                               ; preds = %dec_label_pc_16c4c
  ret i64 %v0_16c40

dec_label_pc_16c5a.loopexit:                      ; preds = %dec_label_pc_16c40
  br label %dec_label_pc_16c5a

dec_label_pc_16c5a:                               ; preds = %dec_label_pc_16c5a.loopexit, %dec_label_pc_16c20
  %v0_16c6116 = phi i64 [ %v17_16c40, %dec_label_pc_16c5a.loopexit ], [ %v17_16c27, %dec_label_pc_16c20 ]
  %v0_16c5a = load i64, i64* inttoptr (i64 93281 to i64*), align 8
  store i64 %v0_16c5a, i64* @rdi, align 8
  br label %dec_label_pc_16c66

dec_label_pc_16c66.loopexit:                      ; preds = %dec_label_pc_16c48
  br label %dec_label_pc_16c66

dec_label_pc_16c66:                               ; preds = %dec_label_pc_16c66.loopexit, %dec_label_pc_16c2c, %dec_label_pc_16c5a
  %v0_16c61 = phi i64 [ %v17_16c40, %dec_label_pc_16c66.loopexit ], [ %v17_16c27, %dec_label_pc_16c2c ], [ %v0_16c6116, %dec_label_pc_16c5a ]
  ret i64 %v0_16c61
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState13start_captureEJiiii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_16c70:
  %r8.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_16c70 = load i64, i64* @rbx, align 8
  store i64 %v0_16c70, i64* %stack_var_-8, align 8
  %v0_16c71 = load i64, i64* @rdi, align 8
  store i64 %v0_16c71, i64* @rbx, align 8
  %v1_16c74 = add i64 %v0_16c71, 32
  %v2_16c74 = inttoptr i64 %v1_16c74 to i32*
  %v3_16c74 = load i32, i32* %v2_16c74, align 4
  %v4_16c74 = zext i32 %v3_16c74 to i64
  store i64 %v4_16c74, i64* @rdi, align 8
  %v1_16c7c = add i64 %v0_16c71, 40
  %v2_16c7c = inttoptr i64 %v1_16c7c to i64*
  %v3_16c7c = load i64, i64* %v2_16c7c, align 8
  store i64 %v3_16c7c, i64* @rax, align 8
  %v3_16c80 = add i64 %v3_16c7c, 8
  %v4_16c80 = inttoptr i64 %v3_16c80 to i32*
  %v5_16c80 = load i32, i32* %v4_16c80, align 4
  %v11_16c80 = icmp ult i32 %v3_16c74, %v5_16c80
  %v1_16c83 = icmp eq i1 %v11_16c80, false
  br i1 %v1_16c83, label %dec_label_pc_16cbe, label %dec_label_pc_16c85

dec_label_pc_16c85:                               ; preds = %dec_label_pc_16c70
  store i64 %v4_16c74, i64* %r8.global-to-local, align 8
  %v0_16c88 = load i64, i64* %rsi.global-to-local, align 8
  %v1_16c88 = trunc i64 %v0_16c88 to i32
  %v4_16c88 = mul nuw nsw i64 %v4_16c74, 4
  %v5_16c88 = add nuw nsw i64 %v4_16c88, 12
  %v6_16c88 = add i64 %v5_16c88, %v3_16c7c
  %v7_16c88 = inttoptr i64 %v6_16c88 to i32*
  store i32 %v1_16c88, i32* %v7_16c88, align 4
  %v0_16c8d = load i64, i64* @rbx, align 8
  %v1_16c8d = add i64 %v0_16c8d, 48
  %v2_16c8d = inttoptr i64 %v1_16c8d to i64*
  %v3_16c8d = load i64, i64* %v2_16c8d, align 8
  store i64 %v3_16c8d, i64* @rax, align 8
  %v0_16c91 = load i64, i64* @rdi, align 8
  %v1_16c91 = trunc i64 %v0_16c91 to i32
  %v3_16c91 = add i64 %v3_16c8d, 8
  %v4_16c91 = inttoptr i64 %v3_16c91 to i32*
  %v5_16c91 = load i32, i32* %v4_16c91, align 4
  %v11_16c91 = icmp ult i32 %v1_16c91, %v5_16c91
  %v1_16c98 = icmp eq i1 %v11_16c91, false
  br i1 %v1_16c98, label %dec_label_pc_16cbe, label %dec_label_pc_16c9a

dec_label_pc_16c9a:                               ; preds = %dec_label_pc_16c85
  %v1_16c94 = add i64 %v3_16c8d, 12
  store i64 %v0_16c91, i64* @rax, align 8
  %v2_16c9d = add i64 %v0_16c91, 1
  %v17_16c9d = and i64 %v2_16c9d, 4294967295
  store i64 %v17_16c9d, i64* @rdi, align 8
  %v0_16ca0 = load i64, i64* @rcx, align 8
  %v1_16ca0 = trunc i64 %v0_16ca0 to i32
  %v3_16ca0 = load i64, i64* %r8.global-to-local, align 8
  %v4_16ca0 = mul i64 %v3_16ca0, 4
  %v5_16ca0 = add i64 %v4_16ca0, %v1_16c94
  %v6_16ca0 = inttoptr i64 %v5_16ca0 to i32*
  store i32 %v1_16ca0, i32* %v6_16ca0, align 4
  %v0_16ca4 = load i64, i64* @rdi, align 8
  %v1_16ca4 = trunc i64 %v0_16ca4 to i32
  %v2_16ca4 = load i64, i64* @rbx, align 8
  %v3_16ca4 = add i64 %v2_16ca4, 32
  %v4_16ca4 = inttoptr i64 %v3_16ca4 to i32*
  store i32 %v1_16ca4, i32* %v4_16ca4, align 4
  %v0_16ca7 = load i64, i64* @rbx, align 8
  store i64 %v0_16ca7, i64* @rdi, align 8
  %v0_16cad = load i64, i64* @rax, align 8
  %v1_16cad = trunc i64 %v0_16cad to i32
  %v11_16cad = icmp eq i32 %v1_16cad, -1
  br i1 %v11_16cad, label %dec_label_pc_16cb8, label %dec_label_pc_16cb2

dec_label_pc_16cb2:                               ; preds = %dec_label_pc_16c9a
  %v2_16cb2 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_16cb2, i64* @rbx, align 8
  ret i64 %v0_16cad

dec_label_pc_16cb8:                               ; preds = %dec_label_pc_16c9a
  %v1_16cb8 = add i64 %v0_16ca7, 32
  %v2_16cb8 = inttoptr i64 %v1_16cb8 to i32*
  %v3_16cb8 = load i32, i32* %v2_16cb8, align 4
  %v4_16cb8 = add i32 %v3_16cb8, -1
  store i32 %v4_16cb8, i32* %v2_16cb8, align 4
  %v2_16cbc = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_16cbc, i64* @rbx, align 8
  %v0_16cbd = load i64, i64* @rax, align 8
  ret i64 %v0_16cbd

dec_label_pc_16cbe:                               ; preds = %dec_label_pc_16c85, %dec_label_pc_16c70
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib15BaseLib$_assert6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16ce0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16ce0 = load i64, i64* @rbx, align 8
  %v2_16ce1 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_16ce1, i64* @rax, align 8
  store i64 %v2_16ce1, i64* @rbx, align 8
  store i64 %v2_16ce1, i64* @rdx, align 8
  store i64 %v2_16ce1, i64* @rdi, align 8
  %v4_16cf9 = trunc i64 %v2_16ce1 to i8
  %v5_16cf9 = icmp eq i8 %v4_16cf9, 0
  br i1 %v5_16cf9, label %dec_label_pc_16d02, label %dec_label_pc_16cfd

dec_label_pc_16cfd:                               ; preds = %dec_label_pc_16ce0
  store i64 %v2_16ce1, i64* @rax, align 8
  store i64 %v0_16ce0, i64* @rbx, align 8
  ret i64 %v2_16ce1

dec_label_pc_16d02:                               ; preds = %dec_label_pc_16ce0
  store i64 %v2_16ce1, i64* @rdi, align 8
  %v1_16d0b = trunc i64 %v2_16ce1 to i32
  %v2_16d0b = add i64 %v2_16ce1, 4294967295
  %v17_16d0b = and i64 %v2_16d0b, 4294967295
  store i64 %v17_16d0b, i64* @rax, align 8
  %v8_16d0e = icmp sgt i32 %v1_16d0b, 1
  br i1 %v8_16d0e, label %dec_label_pc_16d10, label %dec_label_pc_16d30

dec_label_pc_16d10:                               ; preds = %dec_label_pc_16d02
  store i64 %v2_16ce1, i64* @rax, align 8
  %v0_16d13 = load i64, i64* inttoptr (i64 93466 to i64*), align 8
  store i64 %v0_16d13, i64* @rdx, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v2_16ce1, i64* @rdi, align 8
  br label %dec_label_pc_16d28

dec_label_pc_16d28:                               ; preds = %dec_label_pc_16d30, %dec_label_pc_16d10
  %v0_16d28 = phi i64 [ %v0_16d30, %dec_label_pc_16d30 ], [ %v2_16ce1, %dec_label_pc_16d10 ]
  store i64 %v0_16d28, i64* @rdi, align 8
  br label %dec_label_pc_16d30

dec_label_pc_16d30:                               ; preds = %dec_label_pc_16d02, %dec_label_pc_16d28
  %v0_16d30 = load i64, i64* inttoptr (i64 93495 to i64*), align 8
  store i64 %v0_16d30, i64* @rax, align 8
  br label %dec_label_pc_16d28
}

define i64 @_ZN3org4luaj3vm27Globals16compilePrototypeEJPNS1_9PrototypeEPN4java2io11InputStreamEPNS5_4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_16d40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16d43 = load i64, i64* @rbx, align 8
  %v0_16d44 = load i64, i64* @rdi, align 8
  %v1_16d44 = add i64 %v0_16d44, 112
  %v2_16d44 = inttoptr i64 %v1_16d44 to i64*
  %v3_16d44 = load i64, i64* %v2_16d44, align 8
  store i64 %v3_16d44, i64* @rbx, align 8
  %v1_16d48 = icmp eq i64 %v3_16d44, 0
  br i1 %v1_16d48, label %dec_label_pc_16d7c, label %dec_label_pc_16d4d

dec_label_pc_16d4d:                               ; preds = %dec_label_pc_16d40
  %v0_16d50 = load i64, i64* %rsi.global-to-local, align 8
  %v0_16d5a = load i64, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_16d5a, i64* @rdx, align 8
  store i64 %v0_16d50, i64* %rsi.global-to-local, align 8
  store i64 %v3_16d44, i64* @rdi, align 8
  store i64 %v0_16d43, i64* @rbx, align 8
  ret i64 0

dec_label_pc_16d7c:                               ; preds = %dec_label_pc_16d40
  %v0_16d7c = load i64, i64* inttoptr (i64 93571 to i64*), align 8
  store i64 %v0_16d7c, i64* @rdi, align 8
  %v0_16d88 = load i64, i64* @rax, align 8
  ret i64 %v0_16d88
}

define i64 @_ZN3org4luaj3vm28LuaValue7assert_EJvbPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16d90:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16d90 = load i64, i64* %rbp.global-to-local, align 8
  %v0_16d91 = load i64, i64* @rbx, align 8
  %v0_16d92 = load i64, i64* @rdi, align 8
  store i64 %v0_16d92, i64* @rbx, align 8
  store i64 93595, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_16d9d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_16d9d, i64* %rbp.global-to-local, align 8
  %v4_16da9 = trunc i64 %v0_16d92 to i8
  %v5_16da9 = icmp eq i8 %v4_16da9, 0
  br i1 %v5_16da9, label %dec_label_pc_16db4, label %dec_label_pc_16dad

dec_label_pc_16dad:                               ; preds = %dec_label_pc_16d90
  store i64 %v0_16d91, i64* @rbx, align 8
  store i64 %v0_16d90, i64* %rbp.global-to-local, align 8
  ret i64 0

dec_label_pc_16db4:                               ; preds = %dec_label_pc_16d90
  store i64 %v0_16d9d, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawset4callEJPNS1_8LuaValueES5_S5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_16dc0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16dc0 = load i64, i64* %r12.global-to-local, align 8
  %v0_16dc2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_16dc3 = load i64, i64* %rsi.global-to-local, align 8
  %v0_16dc6 = load i64, i64* @rbx, align 8
  %v0_16dca = load i64, i64* @rdx, align 8
  store i64 %v0_16dca, i64* @rbx, align 8
  %v0_16dcd = load i64, i64* @rcx, align 8
  store i64 %v0_16dcd, i64* %r12.global-to-local, align 8
  store i64 %v0_16dc3, i64* %rbp.global-to-local, align 8
  store i64 %v0_16dca, i64* @rax, align 8
  store i64 %v0_16dca, i64* @rdi, align 8
  %v4_16de5 = trunc i64 %v0_16dca to i8
  %v5_16de5 = icmp eq i8 %v4_16de5, 0
  br i1 %v5_16de5, label %dec_label_pc_16e04, label %dec_label_pc_16de9

dec_label_pc_16de9:                               ; preds = %dec_label_pc_16dc0
  store i64 %v0_16dcd, i64* @rdx, align 8
  store i64 %v0_16dca, i64* %rsi.global-to-local, align 8
  store i64 %v0_16dc3, i64* @rdi, align 8
  store i64 %v0_16dc3, i64* @rax, align 8
  store i64 %v0_16dc6, i64* @rbx, align 8
  store i64 %v0_16dc2, i64* %rbp.global-to-local, align 8
  store i64 %v0_16dc0, i64* %r12.global-to-local, align 8
  ret i64 %v0_16dc3

dec_label_pc_16e04:                               ; preds = %dec_label_pc_16dc0
  %v0_16e04 = load i64, i64* inttoptr (i64 93707 to i64*), align 8
  store i64 %v0_16e04, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rdi, align 8
  ret i64 %v0_16dca
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$tonumber4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_16e20:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16e20 = load i64, i64* %rbp.global-to-local, align 8
  %v0_16e21 = load i64, i64* @rbx, align 8
  %v0_16e22 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_16e22, i64* %rbp.global-to-local, align 8
  %v0_16e25 = load i64, i64* @rdx, align 8
  store i64 %v0_16e25, i64* @rbx, align 8
  store i64 %v0_16e25, i64* @rdi, align 8
  store i64 %v0_16e25, i64* @rax, align 8
  %v4_16e38 = trunc i64 %v0_16e25 to i8
  %v5_16e38 = icmp eq i8 %v4_16e38, 0
  %v1_16e3a = icmp eq i1 %v5_16e38, false
  br i1 %v1_16e3a, label %dec_label_pc_16e78, label %dec_label_pc_16e3c

dec_label_pc_16e3c:                               ; preds = %dec_label_pc_16e20
  store i64 %v0_16e25, i64* @rdi, align 8
  store i64 %v0_16e25, i64* @rbx, align 8
  %v1_16e4a = add i64 %v0_16e25, -2
  store i64 %v1_16e4a, i64* @rax, align 8
  %v1_16e4d = trunc i64 %v1_16e4a to i32
  %tmp242 = icmp ult i32 %v1_16e4d, 35
  br i1 %tmp242, label %dec_label_pc_16e52, label %dec_label_pc_16e8c

dec_label_pc_16e52:                               ; preds = %dec_label_pc_16e3c
  store i64 %v0_16e22, i64* @rax, align 8
  store i64 %v0_16e22, i64* @rdx, align 8
  store i64 %v0_16e25, i64* %rsi.global-to-local, align 8
  store i64 %v0_16e22, i64* @rdi, align 8
  store i64 %v0_16e21, i64* @rbx, align 8
  store i64 %v0_16e20, i64* %rbp.global-to-local, align 8
  ret i64 %v0_16e22

dec_label_pc_16e78:                               ; preds = %dec_label_pc_16e20
  store i64 %v0_16e22, i64* @rax, align 8
  store i64 %v0_16e22, i64* @rdi, align 8
  store i64 %v0_16e21, i64* @rbx, align 8
  store i64 %v0_16e20, i64* %rbp.global-to-local, align 8
  ret i64 %v0_16e22

dec_label_pc_16e8c:                               ; preds = %dec_label_pc_16e3c
  %v0_16e8c = load i64, i64* inttoptr (i64 93843 to i64*), align 8
  store i64 %v0_16e8c, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rdi, align 8
  ret i64 %v1_16e4a
}

define i64 @_ZN3org4luaj3vm28LuaValue7subargsEJPNS1_7VarargsEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16ea0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_16ea0 = trunc i64 %arg2 to i32
  %v11_16ea0 = icmp eq i32 %v1_16ea0, 1
  br i1 %v11_16ea0, label %dec_label_pc_16eb0, label %dec_label_pc_16ea5

dec_label_pc_16ea5:                               ; preds = %dec_label_pc_16ea0
  %v8_16ea5 = icmp sgt i32 %v1_16ea0, 1
  br i1 %v8_16ea5, label %dec_label_pc_16ea7, label %dec_label_pc_16eb4

dec_label_pc_16ea7:                               ; preds = %dec_label_pc_16ea5
  %v0_16ea7 = load i64, i64* inttoptr (i64 93870 to i64*), align 8
  store i64 %v0_16ea7, i64* @rax, align 8
  ret i64 %v0_16ea7

dec_label_pc_16eb0:                               ; preds = %dec_label_pc_16ea0
  %v1_16eae = load i64, i64* @rax, align 8
  ret i64 %v1_16eae

dec_label_pc_16eb4:                               ; preds = %dec_label_pc_16ea5
  %v2_16eae = load i64, i64* @rax, align 8
  ret i64 %v2_16eae
}

define i64 @"_ZN3org4luaj3vm213LuaValue$None7subargsEJPNS1_7VarargsEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16ed0:
  store i64 %arg1, i64* @rdi, align 8
  %v4_16ed0 = trunc i64 %arg2 to i32
  %tmp236 = icmp slt i32 %v4_16ed0, 1
  br i1 %tmp236, label %dec_label_pc_16ed8, label %dec_label_pc_16ed4

dec_label_pc_16ed4:                               ; preds = %dec_label_pc_16ed0
  %v0_16ed4 = load i64, i64* @rdi, align 8
  store i64 %v0_16ed4, i64* @rax, align 8
  ret i64 %v0_16ed4

dec_label_pc_16ed8:                               ; preds = %dec_label_pc_16ed0
  store i64 1, i64* @rdi, align 8
  %v0_16eee = load i64, i64* @rax, align 8
  ret i64 %v0_16eee
}

define i64 @"_ZN3org4luaj3vm219Varargs$PairVarargs7subargsEJPNS1_7VarargsEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16ef0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_16ef0 = trunc i64 %arg2 to i32
  %v11_16ef0 = icmp eq i32 %v1_16ef0, 1
  br i1 %v11_16ef0, label %dec_label_pc_16f18, label %dec_label_pc_16ef5

dec_label_pc_16ef5:                               ; preds = %dec_label_pc_16ef0
  %v11_16ef9 = icmp eq i32 %v1_16ef0, 2
  br i1 %v11_16ef9, label %dec_label_pc_16f20, label %dec_label_pc_16efe

dec_label_pc_16efe:                               ; preds = %dec_label_pc_16ef5
  %v8_16efe = icmp sgt i32 %v1_16ef0, 2
  br i1 %v8_16efe, label %dec_label_pc_16f00, label %dec_label_pc_16f29

dec_label_pc_16f00:                               ; preds = %dec_label_pc_16efe
  %v0_16f00 = load i64, i64* @rdi, align 8
  %v1_16f00 = add i64 %v0_16f00, 16
  %v2_16f00 = inttoptr i64 %v1_16f00 to i64*
  %v3_16f00 = load i64, i64* %v2_16f00, align 8
  store i64 %v3_16f00, i64* @rdi, align 8
  %v1_16f07 = inttoptr i64 %v3_16f00 to i64*
  %v2_16f07 = load i64, i64* %v1_16f07, align 8
  store i64 %v2_16f07, i64* @rax, align 8
  ret i64 %v2_16f07

dec_label_pc_16f18:                               ; preds = %dec_label_pc_16ef0
  %v0_16f18 = load i64, i64* @rdi, align 8
  store i64 %v0_16f18, i64* @rax, align 8
  ret i64 %v0_16f18

dec_label_pc_16f20:                               ; preds = %dec_label_pc_16ef5
  %v0_16f20 = load i64, i64* @rdi, align 8
  %v1_16f20 = add i64 %v0_16f20, 16
  %v2_16f20 = inttoptr i64 %v1_16f20 to i64*
  %v3_16f20 = load i64, i64* %v2_16f20, align 8
  store i64 %v3_16f20, i64* @rax, align 8
  ret i64 %v3_16f20

dec_label_pc_16f29:                               ; preds = %dec_label_pc_16efe
  store i64 1, i64* @rdi, align 8
  %v0_16f3a = load i64, i64* @rax, align 8
  ret i64 %v0_16f3a
}

define i64 @_ZN3org4luaj3vm27Varargs10checkvalueEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16f40:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_16f40 = load i64, i64* %rbp.global-to-local, align 8
  %v0_16f41 = load i64, i64* @rbx, align 8
  %v0_16f42 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_16f42, i64* %rbp.global-to-local, align 8
  %v0_16f44 = load i64, i64* @rdi, align 8
  store i64 %v0_16f44, i64* @rbx, align 8
  store i64 %v0_16f44, i64* @rax, align 8
  %v8_16f53 = icmp sgt i64 %v0_16f42, %v0_16f44
  br i1 %v8_16f53, label %dec_label_pc_16f67, label %dec_label_pc_16f55

dec_label_pc_16f55:                               ; preds = %dec_label_pc_16f40
  store i64 %v0_16f44, i64* @rax, align 8
  store i64 %v0_16f41, i64* @rbx, align 8
  store i64 %v0_16f40, i64* %rbp.global-to-local, align 8
  ret i64 %v0_16f44

dec_label_pc_16f67:                               ; preds = %dec_label_pc_16f40
  %v0_16f67 = load i64, i64* inttoptr (i64 94062 to i64*), align 8
  store i64 %v0_16f67, i64* %rsi.global-to-local, align 8
  store i64 %v0_16f42, i64* @rdi, align 8
  ret i64 %v0_16f44
}

define i64 @_ZN3org4luaj3vm211LuaUserdata3setEJvPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16f80:
  store i64 %arg1, i64* @rdi, align 8
  %v0_16f89 = load i64, i64* @rdi, align 8
  %v1_16f89 = add i64 %v0_16f89, 16
  %v2_16f89 = inttoptr i64 %v1_16f89 to i64*
  %v3_16f89 = load i64, i64* %v2_16f89, align 8
  %v10_16f89 = icmp eq i64 %v3_16f89, 0
  %v0_16f97.pre = load i64, i64* @rax, align 8
  br i1 %v10_16f89, label %dec_label_pc_16f99, label %dec_label_pc_16f90

dec_label_pc_16f90:                               ; preds = %dec_label_pc_16f80
  br label %dec_label_pc_16f99

dec_label_pc_16f99:                               ; preds = %dec_label_pc_16f80, %dec_label_pc_16f90
  ret i64 %v0_16f97.pre
}

define i64 @function_17000() local_unnamed_addr {
dec_label_pc_17000:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12checkmetatagEJPS2_S3_PN4java4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_17010:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17012 = load i64, i64* %r12.global-to-local, align 8
  %v0_17014 = load i64, i64* @rdx, align 8
  store i64 %v0_17014, i64* %r12.global-to-local, align 8
  %v0_17017 = load i64, i64* %rbp.global-to-local, align 8
  %v0_17018 = load i64, i64* @rbx, align 8
  %v0_17019 = load i64, i64* @rdi, align 8
  store i64 %v0_17019, i64* @rbx, align 8
  store i64 %v0_17019, i64* %rbp.global-to-local, align 8
  store i64 %v0_17019, i64* @rax, align 8
  %v4_17038 = trunc i64 %v0_17019 to i8
  %v5_17038 = icmp eq i8 %v4_17038, 0
  %v1_1703a = icmp eq i1 %v5_17038, false
  br i1 %v1_1703a, label %dec_label_pc_17050, label %dec_label_pc_1703c

dec_label_pc_1703c:                               ; preds = %dec_label_pc_17010
  store i64 %v0_17019, i64* @rax, align 8
  store i64 %v0_17018, i64* @rbx, align 8
  store i64 %v0_17017, i64* %rbp.global-to-local, align 8
  store i64 %v0_17012, i64* %r12.global-to-local, align 8
  ret i64 %v0_17019

dec_label_pc_17050:                               ; preds = %dec_label_pc_17010
  store i64 94295, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_17100() local_unnamed_addr {
dec_label_pc_17100:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals5yieldEJPNS1_7VarargsES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17110:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17110 = load i64, i64* %rbp.global-to-local, align 8
  %v0_17111 = load i64, i64* @rbx, align 8
  %v0_17112 = load i64, i64* @rdi, align 8
  store i64 %v0_17112, i64* @rbx, align 8
  %v1_17119 = add i64 %v0_17112, 72
  %v2_17119 = inttoptr i64 %v1_17119 to i64*
  %v3_17119 = load i64, i64* %v2_17119, align 8
  store i64 %v3_17119, i64* @rdi, align 8
  %v1_1711d = icmp eq i64 %v3_17119, 0
  br i1 %v1_1711d, label %dec_label_pc_1714a, label %dec_label_pc_17122

dec_label_pc_17122:                               ; preds = %dec_label_pc_17110
  %v1_17122 = inttoptr i64 %v3_17119 to i64*
  %v2_17122 = load i64, i64* %v1_17122, align 8
  store i64 %v2_17122, i64* @rax, align 8
  %v0_17125 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_17125, i64* %rbp.global-to-local, align 8
  %v4_1712e = trunc i64 %v2_17122 to i8
  %v5_1712e = icmp eq i8 %v4_1712e, 0
  %v1_17130 = icmp eq i1 %v5_1712e, false
  br i1 %v1_17130, label %dec_label_pc_1714a, label %dec_label_pc_17132

dec_label_pc_17132:                               ; preds = %dec_label_pc_17122
  %v3_17132 = load i64, i64* %v2_17119, align 8
  store i64 %v3_17132, i64* @rax, align 8
  %v1_17139 = add i64 %v3_17132, 8
  %v2_17139 = inttoptr i64 %v1_17139 to i64*
  %v3_17139 = load i64, i64* %v2_17139, align 8
  store i64 %v3_17139, i64* @rdi, align 8
  %v1_1713d = inttoptr i64 %v3_17139 to i64*
  %v2_1713d = load i64, i64* %v1_1713d, align 8
  store i64 %v2_1713d, i64* @rax, align 8
  store i64 %v0_17111, i64* @rbx, align 8
  store i64 %v0_17110, i64* %rbp.global-to-local, align 8
  ret i64 %v2_1713d

dec_label_pc_1714a:                               ; preds = %dec_label_pc_17122, %dec_label_pc_17110
  store i64 94545, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer8makeroomEJvii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_17180:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17184 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_17184, i64* @r13, align 8
  %v0_17189 = load i64, i64* @rdi, align 8
  store i64 %v0_17189, i64* @rbx, align 8
  %v0_1718c = load i64, i64* @rdx, align 8
  store i64 %v0_1718c, i64* @rbp, align 8
  %v1_17192 = add i64 %v0_17189, 24
  %v2_17192 = inttoptr i64 %v1_17192 to i64*
  %v3_17192 = load i64, i64* %v2_17192, align 8
  store i64 %v3_17192, i64* @rdi, align 8
  %v1_17196 = icmp eq i64 %v3_17192, 0
  br i1 %v1_17196, label %bb, label %dec_label_pc_1719b

bb:                                               ; preds = %dec_label_pc_17180
  %v5_17199 = call i64 @function_17200(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_17199, i64* @rax, align 8
  %v0_171a7.pre = load i64, i64* @rbp, align 8
  %v1_171a7.pre = load i64, i64* @r13, align 8
  %v0_171b6.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_1719b

dec_label_pc_1719b:                               ; preds = %bb, %dec_label_pc_17180
  %v0_171b6 = phi i64 [ %v0_171b6.pre, %bb ], [ %v0_17189, %dec_label_pc_17180 ]
  %v1_171a7 = phi i64 [ %v1_171a7.pre, %bb ], [ %v0_17184, %dec_label_pc_17180 ]
  %v0_171a7 = phi i64 [ %v0_171a7.pre, %bb ], [ %v0_1718c, %dec_label_pc_17180 ]
  %v1_1719b = inttoptr i64 %v3_17192 to i64*
  %v2_1719b = load i64, i64* %v1_1719b, align 8
  store i64 %v2_1719b, i64* @rax, align 8
  %v1_171a4 = add i64 %v2_1719b, 20
  %v2_171a4 = inttoptr i64 %v1_171a4 to i32*
  %v3_171a4 = load i32, i32* %v2_171a4, align 4
  %v4_171a4 = zext i32 %v3_171a4 to i64
  store i64 %v4_171a4, i64* @rdx, align 8
  %v3_171a7 = add i64 %v0_171a7, %v1_171a7
  store i64 %v3_171a7, i64* %rsi.global-to-local, align 8
  store i64 94643, i64* @rdi, align 8
  %v1_171b6 = add i64 %v0_171b6, 24
  %v2_171b6 = inttoptr i64 %v1_171b6 to i64*
  store i64 0, i64* %v2_171b6, align 8
  %v0_171be = load i64, i64* @r13, align 8
  %v1_171be = trunc i64 %v0_171be to i32
  %v2_171be = load i64, i64* @rbx, align 8
  %v3_171be = add i64 %v2_171be, 20
  %v4_171be = inttoptr i64 %v3_171be to i32*
  store i32 %v1_171be, i32* %v4_171be, align 4
  store i64 0, i64* @rax, align 8
  %v0_171c4 = load i64, i64* %rsi.global-to-local, align 8
  %v2_171c4 = load i64, i64* @rdx, align 8
  %v3_171c4 = trunc i64 %v2_171c4 to i32
  %v4_171c4 = add i64 %v2_171c4, %v0_171c4
  %v20_171c4 = and i64 %v4_171c4, 4294967295
  store i64 %v20_171c4, i64* %rsi.global-to-local, align 8
  %v2_171c6 = load i64, i64* @rbx, align 8
  %v3_171c6 = add i64 %v2_171c6, 16
  %v4_171c6 = inttoptr i64 %v3_171c6 to i32*
  store i32 %v3_171c4, i32* %v4_171c6, align 4
  %v5_171c6 = load i64, i64* @rax, align 8
  ret i64 %v5_171c6
}

define i64 @function_17200(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_17200:
  %r13.global-to-local = alloca i64, align 8
  %v0_17200 = load i64, i64* @rbx, align 8
  %v1_17200 = add i64 %v0_17200, 8
  %v2_17200 = inttoptr i64 %v1_17200 to i64*
  %v3_17200 = load i64, i64* %v2_17200, align 8
  store i64 %v3_17200, i64* @rax, align 8
  %v1_17204 = add i64 %v0_17200, 20
  %v2_17204 = inttoptr i64 %v1_17204 to i32*
  %v3_17204 = load i32, i32* %v2_17204, align 4
  %v1_17207 = add i64 %v0_17200, 16
  %v2_17207 = inttoptr i64 %v1_17207 to i32*
  %v3_17207 = load i32, i32* %v2_17207, align 4
  %v4_17207 = zext i32 %v3_17207 to i64
  store i64 %v4_17207, i64* @rdx, align 8
  %v1_1720a = add i64 %v3_17200, 8
  %v2_1720a = inttoptr i64 %v1_1720a to i32*
  %v3_1720a = load i32, i32* %v2_1720a, align 4
  %v4_1720a = zext i32 %v3_1720a to i64
  store i64 %v4_1720a, i64* @rcx, align 8
  %v3_1720d = add i32 %v3_17207, %v3_17204
  %v2_17210 = load i64, i64* @rbp, align 8
  %v3_17210 = trunc i64 %v2_17210 to i32
  %v4_17210 = add i32 %v3_1720d, %v3_17210
  %v20_17210 = zext i32 %v4_17210 to i64
  store i64 %v20_17210, i64* @rax, align 8
  %v8_17214 = icmp ugt i32 %v4_17210, %v3_1720a
  %v1_1721b.pre = load i64, i64* @r13, align 8
  br i1 %v8_17214, label %dec_label_pc_1721b, label %dec_label_pc_17216

dec_label_pc_17216:                               ; preds = %dec_label_pc_17200
  br label %dec_label_pc_1721b

dec_label_pc_1721b:                               ; preds = %dec_label_pc_17200, %dec_label_pc_17216
  %v3_1721b = add i64 %v1_1721b.pre, %v2_17210
  %v1_17225 = trunc i64 %v3_1721b to i32
  %v4_17225 = add i32 %v1_17225, %v3_17207
  %v20_17225 = zext i32 %v4_17225 to i64
  store i64 %v20_17225, i64* @rax, align 8
  %v10_1722a = icmp sgt i32 %v4_17225, 31
  br i1 %v10_1722a, label %dec_label_pc_17280, label %dec_label_pc_1722c

dec_label_pc_1722c:                               ; preds = %dec_label_pc_17280, %dec_label_pc_1721b
  %v2_17239 = phi i32 [ %phitmp, %dec_label_pc_17280 ], [ 32, %dec_label_pc_1721b ]
  %sum = add i32 %v3_17210, %v3_17207
  %v4_17230 = sub i32 %v2_17239, %sum
  %v20_17230 = zext i32 %v4_17230 to i64
  %v4_17232 = trunc i64 %v1_1721b.pre to i32
  %v5_17232 = icmp eq i32 %v4_17232, 0
  %v1_17235 = icmp eq i1 %v5_17232, false
  %v6_17235.v = select i1 %v1_17235, i64 %v20_17230, i64 %v1_1721b.pre
  %v7_17235 = and i64 %v6_17235.v, 4294967295
  store i64 %v7_17235, i64* %r13.global-to-local, align 8
  store i64 94788, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v3_1724b = load i64, i64* %v2_17200, align 8
  store i64 %v3_1724b, i64* @rdi, align 8
  store i64 %v7_17235, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* %v2_17200, align 8
  %v0_17268 = load i64, i64* %r13.global-to-local, align 8
  %v1_17268 = trunc i64 %v0_17268 to i32
  %v2_17268 = load i64, i64* @rbx, align 8
  %v3_17268 = add i64 %v2_17268, 20
  %v4_17268 = inttoptr i64 %v3_17268 to i32*
  store i32 %v1_17268, i32* %v4_17268, align 4
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg4, i64* @r13, align 8
  %v0_17276 = load i64, i64* @rax, align 8
  ret i64 %v0_17276

dec_label_pc_17280:                               ; preds = %dec_label_pc_1721b
  %v3_17280 = mul nuw nsw i64 %v4_17207, 2
  %v1_17283 = trunc i64 %v3_17280 to i32
  %v4_17283 = sub i32 %v1_17283, %v4_17225
  %v10_172836 = xor i64 %v20_17225, %v3_17280
  %v10_17283 = trunc i64 %v10_172836 to i32
  %v11_17283 = xor i32 %v4_17283, %v1_17283
  %v12_17283 = and i32 %v10_17283, %v11_17283
  %v13_17283 = icmp slt i32 %v12_17283, 0
  %v15_17283 = icmp slt i32 %v4_17283, 0
  %v2_17285 = icmp ne i1 %v15_17283, %v13_17283
  %v7_17285.v = select i1 %v2_17285, i64 %v20_17225, i64 %v3_17280
  %phitmp = trunc i64 %v7_17285.v to i32
  br label %dec_label_pc_1722c
}

define i64 @_ZN3org4luaj3vm25Print10printValueEJvPN4java2io11PrintStreamEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17290:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17290 = load i64, i64* %rbp.global-to-local, align 8
  %v0_17291 = load i64, i64* @rbx, align 8
  %v0_17292 = load i64, i64* @rdi, align 8
  store i64 %v0_17292, i64* @rbp, align 8
  store i64 94876, i64* @rdi, align 8
  %v0_1729c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1729c, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  %v1_172aa = icmp eq i64 %v0_1729c, 0
  br i1 %v1_172aa, label %bb, label %dec_label_pc_172af

bb:                                               ; preds = %dec_label_pc_17290
  %v3_172ad = call i64 @function_17310(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_172ad, i64* @rax, align 8
  %v2_172af.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_172af

dec_label_pc_172af:                               ; preds = %bb, %dec_label_pc_17290
  %v2_172c0 = phi i64 [ %v2_172af.pre, %bb ], [ %v0_1729c, %dec_label_pc_17290 ]
  store i64 %v2_172c0, i64* @rax, align 8
  store i64 %v0_1729c, i64* @rdi, align 8
  %v1_172bb = trunc i64 %v2_172c0 to i32
  %v11_172bb = icmp eq i32 %v1_172bb, 4
  br i1 %v11_172bb, label %dec_label_pc_172e8, label %dec_label_pc_172c0

dec_label_pc_172c0:                               ; preds = %dec_label_pc_172af
  store i64 %v2_172c0, i64* @rax, align 8
  store i64 %v0_1729c, i64* @rdx, align 8
  store i64 %v2_172c0, i64* %rsi.global-to-local, align 8
  %v0_172d3 = load i64, i64* @rbp, align 8
  store i64 %v0_172d3, i64* @rdi, align 8
  store i64 %v0_17291, i64* @rbx, align 8
  store i64 %v0_17290, i64* %rbp.global-to-local, align 8
  ret i64 %v2_172c0

dec_label_pc_172e8:                               ; preds = %dec_label_pc_172af
  store i64 94959, i64* @rdi, align 8
  store i64 %v0_1729c, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_17310(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17310:
  %v2_17310 = load i64, i64* @rbp, align 8
  store i64 %v2_17310, i64* @rax, align 8
  %v0_17314 = load i64, i64* inttoptr (i64 95003 to i64*), align 8
  store i64 %v0_17314, i64* @rsi, align 8
  store i64 %v2_17310, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  ret i64 %v2_17310
}

define i64 @_ZN3org4luaj3vm28LuaError10getMessageEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_17330:
  store i64 %arg1, i64* @rdi, align 8
  %v0_17333 = load i64, i64* @rbx, align 8
  %v0_17334 = load i64, i64* @rdi, align 8
  %v1_17334 = add i64 %v0_17334, 56
  %v2_17334 = inttoptr i64 %v1_17334 to i64*
  %v3_17334 = load i64, i64* %v2_17334, align 8
  store i64 %v3_17334, i64* @rbx, align 8
  %v1_17338 = icmp eq i64 %v3_17334, 0
  br i1 %v1_17338, label %dec_label_pc_17348, label %dec_label_pc_1733d

dec_label_pc_1733d:                               ; preds = %dec_label_pc_17330
  store i64 %v3_17334, i64* @rax, align 8
  store i64 %v0_17333, i64* @rbx, align 8
  ret i64 %v3_17334

dec_label_pc_17348:                               ; preds = %dec_label_pc_17330
  %v1_17348 = load i64, i64* @rax, align 8
  ret i64 %v1_17348
}

define i64 @function_173c0() local_unnamed_addr {
dec_label_pc_173c0:
  %v0_173c0 = load i64, i64* @rax, align 8
  store i64 %v0_173c0, i64* @rbx, align 8
  ret i64 %v0_173c0
}

define i64 @function_173c8() local_unnamed_addr {
dec_label_pc_173c8:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaUserdata13checkuserdataEJPN4java4lang6ObjectEPNS4_5ClassE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_173d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_173d2 = load i64, i64* @rdi, align 8
  store i64 %v0_173d2, i64* @rbx, align 8
  %v1_173d9 = add i64 %v0_173d2, 8
  %v2_173d9 = inttoptr i64 %v1_173d9 to i64*
  %v3_173d9 = load i64, i64* %v2_173d9, align 8
  store i64 %v3_173d9, i64* @rdi, align 8
  %v1_173dd = icmp eq i64 %v3_173d9, 0
  br i1 %v1_173dd, label %bb, label %dec_label_pc_173d0.dec_label_pc_173e2_crit_edge

dec_label_pc_173d0.dec_label_pc_173e2_crit_edge:  ; preds = %dec_label_pc_173d0
  %v1_173e2.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_173e2

bb:                                               ; preds = %dec_label_pc_173d0
  %v1_173e0 = call i64 @function_1742e()
  store i64 %v1_173e0, i64* @rax, align 8
  br label %dec_label_pc_173e2

dec_label_pc_173e2:                               ; preds = %dec_label_pc_173d0.dec_label_pc_173e2_crit_edge, %bb
  %v1_173e2 = phi i64 [ %v1_173e2.pre, %dec_label_pc_173d0.dec_label_pc_173e2_crit_edge ], [ %v1_173e0, %bb ]
  ret i64 %v1_173e2
}

define i64 @function_1742e() local_unnamed_addr {
dec_label_pc_1742e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print7_assertEJvb(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17440:
  store i64 %arg1, i64* @rdi, align 8
  %v4_17440 = trunc i64 %arg2 to i8
  %v5_17440 = icmp eq i8 %v4_17440, 0
  br i1 %v5_17440, label %dec_label_pc_17446, label %dec_label_pc_17445

dec_label_pc_17445:                               ; preds = %dec_label_pc_17440
  %v0_17445 = load i64, i64* @rax, align 8
  ret i64 %v0_17445

dec_label_pc_17446:                               ; preds = %dec_label_pc_17440
  %v5_17446 = load i64, i64* @rax, align 8
  ret i64 %v5_17446
}

define i64 @_ZN3org4luaj3vm29LuaString6charAtEJii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_17480:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17480 = load i64, i64* %rsi.global-to-local, align 8
  %v4_17480 = trunc i64 %v0_17480 to i32
  %v6_17480 = icmp slt i32 %v4_17480, 0
  br i1 %v6_17480, label %dec_label_pc_17495, label %dec_label_pc_17485

dec_label_pc_17485:                               ; preds = %dec_label_pc_17480
  %v2_17485 = load i64, i64* @rdi, align 8
  %v3_17485 = add i64 %v2_17485, 20
  %v4_17485 = inttoptr i64 %v3_17485 to i32*
  %v5_17485 = load i32, i32* %v4_17485, align 4
  %v7_17488 = icmp slt i32 %v4_17480, %v5_17485
  br i1 %v7_17488, label %dec_label_pc_1748a, label %dec_label_pc_17495

dec_label_pc_1748a:                               ; preds = %dec_label_pc_17485
  store i64 %v2_17485, i64* @rax, align 8
  ret i64 %v2_17485

dec_label_pc_17495:                               ; preds = %dec_label_pc_17485, %dec_label_pc_17480
  %v1_17494 = load i64, i64* @rax, align 8
  ret i64 %v1_17494
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState7dumpIntEJvi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_174c0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  %v0_174c4 = load i64, i64* @rdi, align 8
  store i64 %v0_174c4, i64* @rbx, align 8
  %v1_174cb = add i64 %v0_174c4, 8
  %v2_174cb = inttoptr i64 %v1_174cb to i8*
  %v3_174cb = load i8, i8* %v2_174cb, align 1
  %v10_174cb = icmp eq i8 %v3_174cb, 0
  %v1_174cf = add i64 %v0_174c4, 24
  %v2_174cf = inttoptr i64 %v1_174cf to i64*
  %v3_174cf = load i64, i64* %v2_174cf, align 8
  store i64 %v3_174cf, i64* @rdi, align 8
  br i1 %v10_174cb, label %bb, label %dec_label_pc_174d5

bb:                                               ; preds = %dec_label_pc_174c0
  %v2_174d3 = call i64 @function_17530(i64 %v3_174cf)
  store i64 %v2_174d3, i64* @rax, align 8
  br label %dec_label_pc_174d5

dec_label_pc_174d5:                               ; preds = %bb, %dec_label_pc_174c0
  %v1_174d5 = icmp eq i64 %v3_174cf, 0
  br i1 %v1_174d5, label %bb242, label %dec_label_pc_174de

bb242:                                            ; preds = %dec_label_pc_174d5
  %v1_174dc = call i64 @function_17541()
  store i64 %v1_174dc, i64* @rax, align 8
  br label %dec_label_pc_174de

dec_label_pc_174de:                               ; preds = %bb242, %dec_label_pc_174d5
  %v0_174e3 = load i64, i64* @rbx, align 8
  %v1_174e3 = add i64 %v0_174e3, 24
  %v2_174e3 = inttoptr i64 %v1_174e3 to i64*
  %v3_174e3 = load i64, i64* %v2_174e3, align 8
  store i64 %v3_174e3, i64* @rdi, align 8
  %v0_174e7 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_174e7, i64* @rax, align 8
  %v1_174ec = icmp eq i64 %v3_174e3, 0
  br i1 %v1_174ec, label %bb243, label %dec_label_pc_174f1

bb243:                                            ; preds = %dec_label_pc_174de
  %v1_174ef = call i64 @function_17541()
  store i64 %v1_174ef, i64* @rax, align 8
  br label %dec_label_pc_174f1

dec_label_pc_174f1:                               ; preds = %bb243, %dec_label_pc_174de
  %v2_174ef = phi i64 [ %v1_174ef, %bb243 ], [ %v0_174e7, %dec_label_pc_174de ]
  ret i64 %v2_174ef
}

define i64 @function_17530(i64 %arg1) local_unnamed_addr {
dec_label_pc_17530:
  store i64 %arg1, i64* @rdi, align 8
  %v1_17530 = icmp eq i64 %arg1, 0
  br i1 %v1_17530, label %bb, label %dec_label_pc_17530.dec_label_pc_17535_crit_edge

dec_label_pc_17530.dec_label_pc_17535_crit_edge:  ; preds = %dec_label_pc_17530
  %v2_17533.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_17535

bb:                                               ; preds = %dec_label_pc_17530
  %v1_17533 = call i64 @function_17541()
  store i64 %v1_17533, i64* @rax, align 8
  br label %dec_label_pc_17535

dec_label_pc_17535:                               ; preds = %dec_label_pc_17530.dec_label_pc_17535_crit_edge, %bb
  %v2_17533 = phi i64 [ %v2_17533.pre, %dec_label_pc_17530.dec_label_pc_17535_crit_edge ], [ %v1_17533, %bb ]
  ret i64 %v2_17533
}

define i64 @function_17541() local_unnamed_addr {
dec_label_pc_17541:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString10scannumberEJdv(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_17550:
  %tmp263 = call i8 @__decompiler_undefined_function_3()
  store i64 %arg1, i64* @rdi, align 8
  %v0_17558 = load i64, i64* @rdi, align 8
  %v1_17558 = add i64 %v0_17558, 16
  %v2_17558 = inttoptr i64 %v1_17558 to i32*
  %v3_17558 = load i32, i32* %v2_17558, align 4
  %v4_17558 = zext i32 %v3_17558 to i64
  store i64 %v4_17558, i64* @rbp, align 8
  %v1_1755b = add i64 %v0_17558, 20
  %v2_1755b = inttoptr i64 %v1_1755b to i32*
  %v3_1755b = load i32, i32* %v2_1755b, align 4
  %v4_1755f = add i32 %v3_1755b, %v3_17558
  %v5_17565 = sext i32 %v4_1755f to i64
  %v6_17565 = icmp slt i64 %v4_17558, %v5_17565
  br i1 %v6_17565, label %dec_label_pc_17567, label %dec_label_pc_175c1

dec_label_pc_17567:                               ; preds = %dec_label_pc_17550
  %v1_17567 = add i64 %v0_17558, 8
  %v2_17567 = inttoptr i64 %v1_17567 to i64*
  %v3_17567 = load i64, i64* %v2_17567, align 8
  store i64 %v3_17567, i64* @r10, align 8
  store i64 %v0_17558, i64* @r12, align 8
  store i64 %v4_17558, i64* @rdi, align 8
  %v1_17570 = add i64 %v3_17567, 8
  %v2_17570 = inttoptr i64 %v1_17570 to i32*
  %v3_17570 = load i32, i32* %v2_17570, align 4
  %v4_17570 = zext i32 %v3_17570 to i64
  store i64 %v4_17570, i64* @rcx, align 8
  %v1_17574 = add i64 %v3_17567, 12
  store i64 %v4_17558, i64* @rax, align 8
  %v3_17583 = add nuw nsw i64 %v4_17558, 12
  %v4_17583 = add i64 %v3_17583, %v3_17567
  %v5_17583 = inttoptr i64 %v4_17583 to i8*
  %v6_17583 = load i8, i8* %v5_17583, align 1
  %v15_17583 = icmp eq i8 %v6_17583, 32
  %v1_17589 = icmp eq i1 %v15_17583, false
  br i1 %v1_17589, label %dec_label_pc_175e0, label %dec_label_pc_1758b

dec_label_pc_1758b:                               ; preds = %dec_label_pc_17567
  %v1_1758b = add nuw nsw i64 %v4_17558, 1
  store i64 %v1_1758b, i64* @rax, align 8
  %v3_17591 = add i64 %v1_17574, %v1_1758b
  store i64 %v3_17591, i64* @rdx, align 8
  br label %dec_label_pc_175ba

dec_label_pc_175a0:                               ; preds = %dec_label_pc_175ba
  store i64 %v0_175ad, i64* @rdi, align 8
  %v1_175aa = inttoptr i64 %v0_175b0 to i8*
  %v2_175aa = load i8, i8* %v1_175aa, align 1
  %v2_175ad = add nsw i64 %v0_175ad, 1
  %v17_175ad = and i64 %v2_175ad, 4294967295
  store i64 %v17_175ad, i64* @rax, align 8
  %v1_175b0 = add i64 %v0_175b0, 1
  store i64 %v1_175b0, i64* @rdx, align 8
  %v11_175b4 = icmp eq i8 %v2_175aa, 32
  %v1_175b8 = icmp eq i1 %v11_175b4, false
  br i1 %v1_175b8, label %dec_label_pc_175e0, label %dec_label_pc_175ba

dec_label_pc_175ba:                               ; preds = %dec_label_pc_175a0, %dec_label_pc_1758b
  %v0_175b0 = phi i64 [ %v1_175b0, %dec_label_pc_175a0 ], [ %v3_17591, %dec_label_pc_1758b ]
  %v0_175ad = phi i64 [ %v17_175ad, %dec_label_pc_175a0 ], [ %v1_1758b, %dec_label_pc_1758b ]
  %v1_175ba = trunc i64 %v0_175ad to i32
  %v15_175ba = icmp eq i32 %v1_175ba, %v4_1755f
  store i64 %v0_175ad, i64* @rbp, align 8
  %v1_175bf = icmp eq i1 %v15_175ba, false
  br i1 %v1_175bf, label %dec_label_pc_175a0, label %dec_label_pc_175c1

dec_label_pc_175c1:                               ; preds = %dec_label_pc_175ba, %dec_label_pc_17617, %dec_label_pc_17550
  %v0_175c1 = load i64, i64* inttoptr (i64 95689 to i64*), align 8
  %v1_175c1 = call i128 @__asm_movsd(i64 %v0_175c1)
  %v2_175c1 = load i64, i64* @rax, align 8
  ret i64 %v2_175c1

dec_label_pc_175e0:                               ; preds = %dec_label_pc_175a0, %dec_label_pc_17567
  %.0 = phi i8 [ %tmp263, %dec_label_pc_17567 ], [ %v2_175aa, %dec_label_pc_175a0 ]
  %v2_175e0 = add nsw i64 %v5_17565, -1
  store i64 %v2_175e0, i64* @rbx, align 8
  %v4_175e4 = trunc i64 %v2_175e0 to i32
  %tmp292 = icmp ugt i32 %v3_17570, %v4_175e4
  br i1 %tmp292, label %dec_label_pc_175ec, label %bb

bb:                                               ; preds = %dec_label_pc_175e0
  %v3_175e6 = call i64 @function_1777e()
  store i64 %v3_175e6, i64* @rax, align 8
  %v0_175ec.pre = load i64, i64* @rbx, align 8
  %v0_175ef.pre = load i64, i64* @r10, align 8
  br label %dec_label_pc_175ec

dec_label_pc_175ec:                               ; preds = %dec_label_pc_175e0, %bb
  %v0_175ef = phi i64 [ %v0_175ef.pre, %bb ], [ %v3_17567, %dec_label_pc_175e0 ]
  %v0_175ec = phi i64 [ %v0_175ec.pre, %bb ], [ %v2_175e0, %dec_label_pc_175e0 ]
  store i64 %v0_175ec, i64* @rax, align 8
  %v3_175ef = add i64 %v0_175ef, 12
  %v4_175ef = add i64 %v3_175ef, %v0_175ec
  %v5_175ef = inttoptr i64 %v4_175ef to i8*
  %v6_175ef = load i8, i8* %v5_175ef, align 1
  %v15_175ef = icmp eq i8 %v6_175ef, 32
  br i1 %v15_175ef, label %dec_label_pc_17617, label %dec_label_pc_1761d

dec_label_pc_17600:                               ; preds = %dec_label_pc_17617
  %v1_17600 = add i64 %v0_17600, -1
  store i64 %v1_17600, i64* @rax, align 8
  %v4_17603 = trunc i64 %v1_17600 to i32
  %tmp293 = icmp ugt i32 %v3_17570, %v4_17603
  br i1 %tmp293, label %dec_label_pc_1760b, label %bb283

bb283:                                            ; preds = %dec_label_pc_17600
  %v3_17605 = call i64 @function_17780()
  store i64 %v3_17605, i64* @rax, align 8
  br label %dec_label_pc_1760b

dec_label_pc_1760b:                               ; preds = %dec_label_pc_17600, %bb283
  %v0_17615 = phi i64 [ %v3_17605, %bb283 ], [ %v1_17600, %dec_label_pc_17600 ]
  store i64 %v0_17615, i64* @rdx, align 8
  %v4_1760e = add i64 %v0_17615, %v1_17574
  %v5_1760e = inttoptr i64 %v4_1760e to i8*
  %v6_1760e = load i8, i8* %v5_1760e, align 1
  %v15_1760e = icmp eq i8 %v6_1760e, 32
  %v1_17613 = icmp eq i1 %v15_1760e, false
  br i1 %v1_17613, label %dec_label_pc_17620.loopexit, label %dec_label_pc_17615

dec_label_pc_17615:                               ; preds = %dec_label_pc_1760b
  store i64 %v0_17615, i64* @rbx, align 8
  br label %dec_label_pc_17617

dec_label_pc_17617:                               ; preds = %dec_label_pc_175ec, %dec_label_pc_17615
  %v0_17600 = phi i64 [ %v0_17615, %dec_label_pc_17615 ], [ %v0_175ec, %dec_label_pc_175ec ]
  %v2_17617 = load i64, i64* @rbp, align 8
  %v8_17619 = icmp sgt i64 %v0_17600, %v2_17617
  br i1 %v8_17619, label %dec_label_pc_17600, label %dec_label_pc_175c1

dec_label_pc_1761d:                               ; preds = %dec_label_pc_175ec
  store i64 %v5_17565, i64* @rbx, align 8
  br label %dec_label_pc_17620

dec_label_pc_17620.loopexit:                      ; preds = %dec_label_pc_1760b
  %v0_1762b.pre = load i64, i64* @r10, align 8
  br label %dec_label_pc_17620

dec_label_pc_17620:                               ; preds = %dec_label_pc_17620.loopexit, %dec_label_pc_1761d
  %v0_1762b = phi i64 [ %v0_1762b.pre, %dec_label_pc_17620.loopexit ], [ %v0_175ef, %dec_label_pc_1761d ]
  %v0_17620 = load i64, i64* @rdi, align 8
  %v0_17628 = load i64, i64* @rbp, align 8
  store i64 %v0_17628, i64* @rax, align 8
  %v3_1762b = add i64 %v0_1762b, 12
  %v4_1762b = add i64 %v3_1762b, %v0_17628
  %v5_1762b = inttoptr i64 %v4_1762b to i8*
  %v6_1762b = load i8, i8* %v5_1762b, align 1
  %v7_1762b = zext i8 %v6_1762b to i64
  store i64 %v7_1762b, i64* @rax, align 8
  %v10_17631 = icmp eq i8 %v6_1762b, 48
  br i1 %v10_17631, label %bb286, label %dec_label_pc_17639

bb286:                                            ; preds = %dec_label_pc_17620
  %v3_17633 = sext i8 %.0 to i64
  %v4_17633 = load i64, i64* @rdx, align 8
  %v6_17633 = sext i32 %v3_17570 to i64
  %v11_17633 = call i64 @function_176c0(i64 %v0_17620, i64 %v3_17633, i64 %v4_17633, i64 %v6_17633, i64 %v1_17574, i64 %v5_17565)
  store i64 %v11_17633, i64* @rax, align 8
  %v0_1763e.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_17639

dec_label_pc_17639:                               ; preds = %bb286, %dec_label_pc_17620
  %v0_1763e = phi i64 [ %v0_1763e.pre, %bb286 ], [ %v0_17628, %dec_label_pc_17620 ]
  %v0_1763c = phi i64 [ %v11_17633, %bb286 ], [ %v7_1762b, %dec_label_pc_17620 ]
  %v1_1763c = trunc i64 %v0_1763c to i8
  %v11_1763c = icmp eq i8 %v1_1763c, 45
  store i64 %v0_1763e, i64* @rdi, align 8
  br i1 %v11_1763c, label %bb288, label %dec_label_pc_17642

bb288:                                            ; preds = %dec_label_pc_17639
  %v3_17640 = sext i8 %.0 to i64
  %v4_17640 = load i64, i64* @rdx, align 8
  %v6_17640 = sext i32 %v3_17570 to i64
  %v7_17640 = call i64 @function_176a2(i64 %v0_1763e, i64 %v3_17640, i64 %v4_17640, i64 %v6_17640)
  store i64 %v7_17640, i64* @rax, align 8
  br label %dec_label_pc_17642

dec_label_pc_17642:                               ; preds = %bb288, %dec_label_pc_17639
  store i64 %v0_1763e, i64* @rax, align 8
  %v0_17645 = load i64, i64* @r10, align 8
  %v3_17645 = add i64 %v0_1763e, 12
  %v4_17645 = add i64 %v3_17645, %v0_17645
  %v5_17645 = inttoptr i64 %v4_17645 to i8*
  %v6_17645 = load i8, i8* %v5_17645, align 1
  %v1_1764b = sext i8 %v6_17645 to i32
  %v2_1764b = add nsw i32 %v1_1764b, -48
  %v16_1764b = zext i32 %v2_1764b to i64
  store i64 %v16_1764b, i64* @rdx, align 8
  %v7_1764e = icmp ult i32 %v2_1764b, 9
  %v12_1764e = icmp eq i8 %v6_17645, 57
  %v2_17651 = or i1 %v7_1764e, %v12_1764e
  br i1 %v2_17651, label %bb290, label %dec_label_pc_17657

bb290:                                            ; preds = %dec_label_pc_17642
  %v5_17651 = sext i8 %.0 to i64
  %v7_17651 = sext i32 %v2_1764b to i64
  %v9_17651 = sext i32 %v3_17570 to i64
  %v13_17651 = call i64 @function_17714(i64 %v0_1763e, i64 %v5_17651, i64 %v7_17651, i64 %v9_17651, i64 %v1_17574, i64 0)
  store i64 %v13_17651, i64* @rax, align 8
  br label %dec_label_pc_17657

dec_label_pc_17657:                               ; preds = %bb290, %dec_label_pc_17642
  %v0_17660 = load i64, i64* inttoptr (i64 95848 to i64*), align 8
  %v1_17660 = call i128 @__asm_movsd(i64 %v0_17660)
  %v1_17668 = call i128 @__asm_movapd(i128 %v1_17660)
  %v1_1766c = call i64 @__asm_movsd.7465(i128 %v1_17660)
  %v5_1766c = load i64, i64* @rax, align 8
  ret i64 %v5_1766c
}

define i64 @function_176a2(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_176a2:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_176a2 = load i64, i64* @rbp, align 8
  %v1_176a2 = add i64 %v0_176a2, 1
  store i64 %v1_176a2, i64* @rdi, align 8
  %v2_176a5 = load i64, i64* @rbx, align 8
  %v5_176a7 = icmp slt i64 %v1_176a2, %v2_176a5
  br i1 %v5_176a7, label %dec_label_pc_176a2.dec_label_pc_176ad_crit_edge, label %bb

dec_label_pc_176a2.dec_label_pc_176ad_crit_edge:  ; preds = %dec_label_pc_176a2
  %v0_176bb.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_176ad

bb:                                               ; preds = %dec_label_pc_176a2
  %v6_176a7 = call i64 @function_17775()
  store i64 %v6_176a7, i64* @rax, align 8
  br label %dec_label_pc_176ad

dec_label_pc_176ad:                               ; preds = %dec_label_pc_176a2.dec_label_pc_176ad_crit_edge, %bb
  %v0_176bb = phi i64 [ %v0_176bb.pre, %dec_label_pc_176a2.dec_label_pc_176ad_crit_edge ], [ %v6_176a7, %bb ]
  ret i64 %v0_176bb
}

define i64 @function_176c0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_176c0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_176c0 = load i64, i64* @rbp, align 8
  %v1_176c0 = add i64 %v0_176c0, 1
  store i64 %v1_176c0, i64* @rdi, align 8
  %v2_176c3 = load i64, i64* @rbx, align 8
  %v5_176c5 = icmp slt i64 %v1_176c0, %v2_176c3
  br i1 %v5_176c5, label %dec_label_pc_176e1, label %dec_label_pc_176c7

dec_label_pc_176c7:                               ; preds = %dec_label_pc_176e1, %dec_label_pc_176c0
  store i64 0, i64* @rdx, align 8
  store i64 %v0_176c0, i64* @rdi, align 8
  %v0_176d6 = load i128, i128* @xmm1, align 8
  %v2_176d6 = call i128 @__asm_pxor(i128 %v0_176d6, i128 %v0_176d6)
  %v1_176da = call i128 @__asm_cvtsi2sd(i64 0)
  store i128 %v1_176da, i128* @xmm1, align 8
  %v0_176df = load i64, i64* @rax, align 8
  ret i64 %v0_176df

dec_label_pc_176e1:                               ; preds = %dec_label_pc_176c0
  %v0_176ec = load i64, i64* @r10, align 8
  %v3_176ec = add i64 %v0_176c0, 13
  %v4_176ec = add i64 %v3_176ec, %v0_176ec
  %v5_176ec = inttoptr i64 %v4_176ec to i8*
  %v6_176ec = load i8, i8* %v5_176ec, align 1
  %v1_176f2 = zext i8 %v6_176ec to i32
  %v2_176f2 = and i32 %v1_176f2, 223
  %v9_176f2 = zext i32 %v2_176f2 to i64
  store i64 %v9_176f2, i64* @rax, align 8
  %v11_176f5 = icmp eq i32 %v2_176f2, 88
  %v1_176f7 = icmp eq i1 %v11_176f5, false
  br i1 %v1_176f7, label %dec_label_pc_176c7, label %dec_label_pc_176f9

dec_label_pc_176f9:                               ; preds = %dec_label_pc_176e1
  %v1_176f9 = add i64 %v0_176c0, 2
  store i64 %v1_176f9, i64* @rdx, align 8
  store i64 %v2_176c3, i64* @rcx, align 8
  %v0_17703 = load i64, i64* @r12, align 8
  store i64 %v0_17703, i64* @rdi, align 8
  %v0_1770b = load i128, i128* @xmm0, align 8
  %v1_1770b = call i128 @__asm_movapd(i128 %v0_1770b)
  store i128 %v1_1770b, i128* @xmm1, align 8
  %v0_1770f = load i64, i64* @rax, align 8
  ret i64 %v0_1770f
}

define i64 @function_17714(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_17714:
  %r8.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* %r8.global-to-local, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17714 = load i64, i64* @rdi, align 8
  %v1_17714 = add i64 %v0_17714, 1
  store i64 %v1_17714, i64* @rax, align 8
  store i64 %v1_17714, i64* @rdi, align 8
  %v0_1771f = load i64, i64* %r8.global-to-local, align 8
  %v2_1771f = add i64 %v0_1771f, %v1_17714
  store i64 %v2_1771f, i64* %r8.global-to-local, align 8
  %v0_17722 = load i64, i64* @rbx, align 8
  %v7_17724 = icmp sgt i64 %v0_17722, %v1_17714
  %v0_17744.pre = load i64, i64* @rdx, align 8
  br i1 %v7_17724, label %dec_label_pc_17730.preheader, label %dec_label_pc_17764

dec_label_pc_17730.preheader:                     ; preds = %dec_label_pc_17714
  br label %dec_label_pc_17730

dec_label_pc_17730:                               ; preds = %dec_label_pc_17730.preheader, %dec_label_pc_17730
  %v0_17744 = phi i64 [ %v3_1774e, %dec_label_pc_17730 ], [ %v0_17744.pre, %dec_label_pc_17730.preheader ]
  %v0_1774a = phi i64 [ %v1_1774a, %dec_label_pc_17730 ], [ %v2_1771f, %dec_label_pc_17730.preheader ]
  %v0_1775b = phi i64 [ %v17_1775b, %dec_label_pc_17730 ], [ %v1_17714, %dec_label_pc_17730.preheader ]
  %v1_17734 = inttoptr i64 %v0_1774a to i8*
  %v2_17734 = load i8, i8* %v1_17734, align 1
  %v1_17738 = sext i8 %v2_17734 to i64
  %v2_17738 = add nsw i64 %v1_17738, 4294967248
  %v16_17738 = and i64 %v2_17738, 4294967295
  store i64 %v16_17738, i64* @rax, align 8
  %v1_1774a = add i64 %v0_1774a, 1
  store i64 %v1_1774a, i64* %r8.global-to-local, align 8
  %v2_1774e = mul i64 %v0_17744, 10
  %v3_1774e = add i64 %v16_17738, %v2_1774e
  store i64 %v3_1774e, i64* @rdx, align 8
  %v2_1775b = add i64 %v0_1775b, 1
  %v17_1775b = and i64 %v2_1775b, 4294967295
  store i64 %v17_1775b, i64* @rdi, align 8
  %v8_17762 = icmp sgt i64 %v0_17722, %v17_1775b
  br i1 %v8_17762, label %dec_label_pc_17730, label %dec_label_pc_17764

dec_label_pc_17764:                               ; preds = %dec_label_pc_17730, %dec_label_pc_17714
  %v0_17770 = phi i64 [ %v1_17714, %dec_label_pc_17714 ], [ %v16_17738, %dec_label_pc_17730 ]
  %v0_1776d = phi i64 [ %v0_17744.pre, %dec_label_pc_17714 ], [ %v3_1774e, %dec_label_pc_17730 ]
  %v1_1776d = sub i64 0, %v0_1776d
  store i64 %v1_1776d, i64* @rdx, align 8
  ret i64 %v0_17770
}

define i64 @function_17775() local_unnamed_addr {
dec_label_pc_17775:
  %v0_17775 = load i128, i128* @xmm1, align 8
  %v2_17775 = call i128 @__asm_pxor(i128 %v0_17775, i128 %v0_17775)
  %v0_17779 = load i64, i64* @rax, align 8
  ret i64 %v0_17779
}

define i64 @function_1777e() local_unnamed_addr {
dec_label_pc_1777e:
  %v0_1777e = load i64, i64* @rbx, align 8
  store i64 %v0_1777e, i64* @rax, align 8
  ret i64 %v0_1777e
}

define i64 @function_17780() local_unnamed_addr {
dec_label_pc_17780:
  %v0_17780 = load i64, i64* @rax, align 8
  store i64 %v0_17780, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTableC1EP6JArrayIPNS1_8LuaValueEES7_PNS1_7VarargsE.constprop.137(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_177a0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp274 = call i32 @__decompiler_undefined_function_2()
  %v0_177a0 = load i64, i64* %r15.global-to-local, align 8
  %v0_177a2 = load i64, i64* %r14.global-to-local, align 8
  %v0_177a4 = load i64, i64* %r13.global-to-local, align 8
  %v0_177a6 = load i64, i64* %r12.global-to-local, align 8
  %v0_177a8 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_177a8, i64* %r13.global-to-local, align 8
  %v0_177ab = load i64, i64* %rbp.global-to-local, align 8
  %v0_177ac = load i64, i64* @rbx, align 8
  %v0_177ad = load i64, i64* @rdi, align 8
  store i64 %v0_177ad, i64* %r12.global-to-local, align 8
  %v0_177b0 = load i64, i64* @rdx, align 8
  store i64 %v0_177b0, i64* @rbx, align 8
  %v1_177bc = icmp eq i64 %v0_177a8, 0
  br i1 %v1_177bc, label %dec_label_pc_178bb, label %dec_label_pc_177c5

dec_label_pc_177c5:                               ; preds = %dec_label_pc_177a0
  %v1_177c5 = add i64 %v0_177a8, 8
  %v2_177c5 = inttoptr i64 %v1_177c5 to i32*
  %v3_177c5 = load i32, i32* %v2_177c5, align 4
  %v4_177c5 = zext i32 %v3_177c5 to i64
  store i64 %v4_177c5, i64* @rax, align 8
  %v3_177cf = sdiv i32 %v3_177c5, 2
  %v10_177cf = zext i32 %v3_177cf to i64
  store i64 %v10_177cf, i64* @rdx, align 8
  %v1_177d1 = icmp eq i64 %v0_177b0, 0
  br i1 %v1_177d1, label %dec_label_pc_178ce, label %dec_label_pc_177da

dec_label_pc_177da:                               ; preds = %dec_label_pc_178bb, %dec_label_pc_177c5
  %stack_var_-64.0 = phi i32 [ 0, %dec_label_pc_178bb ], [ %v3_177c5, %dec_label_pc_177c5 ]
  %v1_177da = add i64 %v0_177b0, 8
  %v2_177da = inttoptr i64 %v1_177da to i32*
  %v3_177da = load i32, i32* %v2_177da, align 4
  %v4_177da = zext i32 %v3_177da to i64
  store i64 %v4_177da, i64* %r15.global-to-local, align 8
  store i64 %v0_177ad, i64* @rax, align 8
  store i64 %v4_177da, i64* %rsi.global-to-local, align 8
  %tmp285 = icmp slt i32 %v3_177da, 1
  br i1 %tmp285, label %dec_label_pc_1783e, label %dec_label_pc_177f3

dec_label_pc_177f3:                               ; preds = %dec_label_pc_177da
  %v3_177f3 = load i32, i32* %v2_177da, align 4
  %v4_177f3 = zext i32 %v3_177f3 to i64
  store i64 %v4_177f3, i64* @rax, align 8
  %v1_177f6 = add i64 %v0_177b0, 16
  store i64 %v1_177f6, i64* @rcx, align 8
  %v5_177fa = icmp eq i32 %v3_177f3, 0
  br i1 %v5_177fa, label %dec_label_pc_178eb, label %dec_label_pc_17806

dec_label_pc_17806:                               ; preds = %dec_label_pc_177f3
  store i64 %v1_177f6, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_17822

dec_label_pc_17810:                               ; preds = %dec_label_pc_17822
  %v1_17810 = add i64 %v0_17810, 8
  store i64 %v1_17810, i64* %r14.global-to-local, align 8
  %v3_17814 = load i32, i32* %v2_177da, align 4
  %v1_17817 = add i64 %v4_17814, 1
  store i64 %v1_17817, i64* @rdx, align 8
  %tmp298 = icmp ugt i32 %v3_17814, %v1_17839
  br i1 %tmp298, label %dec_label_pc_17822, label %dec_label_pc_178eb.loopexit

dec_label_pc_17822:                               ; preds = %dec_label_pc_17810, %dec_label_pc_17806
  %v0_17810 = phi i64 [ %v1_177f6, %dec_label_pc_17806 ], [ %v1_17810, %dec_label_pc_17810 ]
  %v4_17814 = phi i64 [ 1, %dec_label_pc_17806 ], [ %v1_17817, %dec_label_pc_17810 ]
  store i64 %v4_17814, i64* %rbp.global-to-local, align 8
  store i64 %v4_17814, i64* %rsi.global-to-local, align 8
  %v1_1782c = inttoptr i64 %v0_17810 to i64*
  %v2_1782c = load i64, i64* %v1_1782c, align 8
  store i64 %v2_1782c, i64* @rdx, align 8
  %v1_17839 = trunc i64 %v4_17814 to i32
  %v14_17839 = icmp eq i32 %v1_17839, %v3_177da
  %v1_1783c = icmp eq i1 %v14_17839, false
  br i1 %v1_1783c, label %dec_label_pc_17810, label %dec_label_pc_1783e.loopexit

dec_label_pc_1783e.loopexit:                      ; preds = %dec_label_pc_17822
  br label %dec_label_pc_1783e

dec_label_pc_1783e:                               ; preds = %dec_label_pc_1783e.loopexit, %dec_label_pc_178ce, %dec_label_pc_177da
  %stack_var_-64.1 = phi i32 [ %stack_var_-64.0, %dec_label_pc_177da ], [ %stack_var_-64.2, %dec_label_pc_178ce ], [ %stack_var_-64.0, %dec_label_pc_1783e.loopexit ]
  %stack_var_-60.0 = phi i32 [ %tmp274, %dec_label_pc_177da ], [ %tmp274, %dec_label_pc_178ce ], [ %v1_17839, %dec_label_pc_1783e.loopexit ]
  %v4_1783e = zext i32 %stack_var_-64.1 to i64
  store i64 %v4_1783e, i64* @rax, align 8
  %tmp286 = icmp slt i32 %stack_var_-64.1, 1
  br i1 %tmp286, label %dec_label_pc_178ac, label %dec_label_pc_17846

dec_label_pc_17846:                               ; preds = %dec_label_pc_1783e
  %v1_17846 = add i64 %v0_177a8, 8
  %v2_17846 = inttoptr i64 %v1_17846 to i32*
  %v3_17846 = load i32, i32* %v2_17846, align 4
  %v1_1784b = add i64 %v0_177a8, 16
  store i64 %v1_1784b, i64* %r14.global-to-local, align 8
  store i64 1, i64* @rbx, align 8
  %tmp299 = or i32 %v3_17846, 1
  %tmp300 = icmp eq i32 %tmp299, 1
  br i1 %tmp300, label %dec_label_pc_178e2, label %dec_label_pc_1785a

dec_label_pc_1785a:                               ; preds = %dec_label_pc_17846
  store i64 0, i64* %rbp.global-to-local, align 8
  %v8_178aa = sext i32 %stack_var_-64.1 to i64
  br label %dec_label_pc_17869

dec_label_pc_17860:                               ; preds = %dec_label_pc_178a3
  %v1_17860 = trunc i64 %v0_17860 to i32
  %v2_17860 = add i32 %v1_17860, 2
  %v17_17860 = zext i32 %v2_17860 to i64
  store i64 %v17_17860, i64* @rbx, align 8
  %v5_17863 = load i32, i32* %v2_17846, align 4
  %v11_17863 = icmp ult i32 %v2_17860, %v5_17863
  %v1_17867 = icmp eq i1 %v11_17863, false
  br i1 %v1_17867, label %dec_label_pc_178e2.loopexit, label %dec_label_pc_17869

dec_label_pc_17869:                               ; preds = %dec_label_pc_17860, %dec_label_pc_1785a
  %v0_178a3 = phi i64 [ %v17_178a3, %dec_label_pc_17860 ], [ 0, %dec_label_pc_1785a ]
  %v0_17860 = phi i64 [ %v17_17860, %dec_label_pc_17860 ], [ 1, %dec_label_pc_1785a ]
  store i64 %v0_17860, i64* @rax, align 8
  %v2_1786c = mul nuw nsw i64 %v0_17860, 8
  %v3_1786c = add i64 %v2_1786c, %v1_1784b
  store i64 %v3_1786c, i64* %r15.global-to-local, align 8
  %v1_17870 = inttoptr i64 %v3_1786c to i64*
  %v2_17870 = load i64, i64* %v1_17870, align 8
  store i64 %v2_17870, i64* @rdi, align 8
  %v1_17873 = inttoptr i64 %v2_17870 to i64*
  %v2_17873 = load i64, i64* %v1_17873, align 8
  store i64 %v2_17873, i64* @rax, align 8
  %v4_1787c = trunc i64 %v2_17873 to i8
  %v5_1787c = icmp eq i8 %v4_1787c, 0
  %v1_1787e = icmp eq i1 %v5_1787c, false
  br i1 %v1_1787e, label %dec_label_pc_178a3, label %dec_label_pc_17880

dec_label_pc_17880:                               ; preds = %dec_label_pc_17869
  %v3_17880 = load i32, i32* %v2_17846, align 4
  %v4_17880 = zext i32 %v3_17880 to i64
  store i64 %v4_17880, i64* @rax, align 8
  store i64 %v0_178a3, i64* @rcx, align 8
  %v3_1788b = trunc i64 %v0_17860 to i32
  %v2_1788d = mul nuw nsw i64 %v0_178a3, 8
  %v3_1788d = add i64 %v2_1788d, %v1_1784b
  %v4_1788d = inttoptr i64 %v3_1788d to i64*
  %v5_1788d = load i64, i64* %v4_1788d, align 8
  store i64 %v5_1788d, i64* %rsi.global-to-local, align 8
  %tmp301 = icmp ugt i32 %v3_17880, %v3_1788b
  br i1 %tmp301, label %dec_label_pc_17893, label %dec_label_pc_178e2.loopexit

dec_label_pc_17893:                               ; preds = %dec_label_pc_17880
  store i64 %v2_17870, i64* @rax, align 8
  %v2_17897 = load i64, i64* %v1_17870, align 8
  store i64 %v2_17897, i64* @rdx, align 8
  store i64 %v0_177ad, i64* @rdi, align 8
  br label %dec_label_pc_178a3

dec_label_pc_178a3:                               ; preds = %dec_label_pc_17893, %dec_label_pc_17869
  %v0_178ba36 = phi i64 [ %v2_17870, %dec_label_pc_17893 ], [ %v2_17873, %dec_label_pc_17869 ]
  %v2_178a3 = add nuw nsw i64 %v0_178a3, 2
  %v17_178a3 = and i64 %v2_178a3, 4294967295
  store i64 %v17_178a3, i64* %rbp.global-to-local, align 8
  %v9_178aa = icmp sgt i64 %v8_178aa, %v17_178a3
  br i1 %v9_178aa, label %dec_label_pc_17860, label %dec_label_pc_178ac.loopexit

dec_label_pc_178ac.loopexit:                      ; preds = %dec_label_pc_178a3
  br label %dec_label_pc_178ac

dec_label_pc_178ac:                               ; preds = %dec_label_pc_178ac.loopexit, %dec_label_pc_1783e
  %v0_178ba = phi i64 [ %v0_178ba36, %dec_label_pc_178ac.loopexit ], [ %v4_1783e, %dec_label_pc_1783e ]
  store i64 %v0_177ac, i64* @rbx, align 8
  store i64 %v0_177ab, i64* %rbp.global-to-local, align 8
  store i64 %v0_177a6, i64* %r12.global-to-local, align 8
  store i64 %v0_177a4, i64* %r13.global-to-local, align 8
  store i64 %v0_177a2, i64* %r14.global-to-local, align 8
  store i64 %v0_177a0, i64* %r15.global-to-local, align 8
  ret i64 %v0_178ba

dec_label_pc_178bb:                               ; preds = %dec_label_pc_177a0
  store i64 0, i64* @rdx, align 8
  %v1_178bd = icmp eq i64 %v0_177b0, 0
  %v1_178c8 = icmp eq i1 %v1_178bd, false
  br i1 %v1_178c8, label %dec_label_pc_177da, label %dec_label_pc_178ce

dec_label_pc_178ce:                               ; preds = %dec_label_pc_178bb, %dec_label_pc_177c5
  %stack_var_-64.2 = phi i32 [ 0, %dec_label_pc_178bb ], [ %v3_177c5, %dec_label_pc_177c5 ]
  store i64 %v0_177ad, i64* @rax, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1783e

dec_label_pc_178e2.loopexit:                      ; preds = %dec_label_pc_17880, %dec_label_pc_17860
  %v0_178e233 = phi i64 [ %v0_17860, %dec_label_pc_17880 ], [ %v17_17860, %dec_label_pc_17860 ]
  br label %dec_label_pc_178e2

dec_label_pc_178e2:                               ; preds = %dec_label_pc_178e2.loopexit, %dec_label_pc_17846
  %v0_178e2 = phi i64 [ %v0_178e233, %dec_label_pc_178e2.loopexit ], [ 1, %dec_label_pc_17846 ]
  store i64 %v0_178e2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_178eb

dec_label_pc_178eb.loopexit:                      ; preds = %dec_label_pc_17810
  br label %dec_label_pc_178eb

dec_label_pc_178eb:                               ; preds = %dec_label_pc_178eb.loopexit, %dec_label_pc_178e2, %dec_label_pc_177f3
  %stack_var_-60.1 = phi i32 [ %stack_var_-60.0, %dec_label_pc_178e2 ], [ 0, %dec_label_pc_177f3 ], [ %v1_17839, %dec_label_pc_178eb.loopexit ]
  %v4_178eb = zext i32 %stack_var_-60.1 to i64
  store i64 %v4_178eb, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEP6JArrayIPS2_E(i64 %arg1) local_unnamed_addr {
dec_label_pc_17900:
  store i64 %arg1, i64* @rdi, align 8
  store i64 96524, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6listOfEJPNS1_8LuaTableEP6JArrayIPS2_E(i64 %arg1) local_unnamed_addr {
dec_label_pc_17950:
  store i64 %arg1, i64* @rdi, align 8
  store i64 96604, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEP6JArrayIPS2_ES8_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_179a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 96686, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 %arg1) local_unnamed_addr {
dec_label_pc_179f0:
  %tmp = sext i32 %arg1 to i64
  store i64 %tmp, i64* @rdi, align 8
  %v0_179f2 = load i64, i64* @rdi, align 8
  store i64 %v0_179f2, i64* @rbp, align 8
  store i64 96763, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$664callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1) local_unnamed_addr {
dec_label_pc_17a40:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_17a40 = load i64, i64* %r15.global-to-local, align 8
  %v0_17a42 = load i64, i64* %r14.global-to-local, align 8
  %v0_17a44 = load i64, i64* %r13.global-to-local, align 8
  %v0_17a46 = load i64, i64* %r12.global-to-local, align 8
  %v0_17a48 = load i64, i64* %rbp.global-to-local, align 8
  %v0_17a49 = load i64, i64* @rbx, align 8
  %v0_17a4e = load i64, i64* @rdi, align 8
  %v1_17a4e = add i64 %v0_17a4e, 24
  %v2_17a4e = inttoptr i64 %v1_17a4e to i64*
  %v3_17a4e = load i64, i64* %v2_17a4e, align 8
  store i64 %v3_17a4e, i64* @rax, align 8
  %v1_17a52 = add i64 %v3_17a4e, 8
  %v2_17a52 = inttoptr i64 %v1_17a52 to i32*
  %v3_17a52 = load i32, i32* %v2_17a52, align 4
  %v4_17a52 = zext i32 %v3_17a52 to i64
  store i64 %v4_17a52, i64* %r15.global-to-local, align 8
  %v5_17a56 = icmp eq i32 %v3_17a52, 0
  br i1 %v5_17a56, label %dec_label_pc_18048, label %dec_label_pc_17a5f

dec_label_pc_17a5f:                               ; preds = %dec_label_pc_17a40
  store i64 %v0_17a4e, i64* %rbp.global-to-local, align 8
  %v1_17a62 = add i64 %v3_17a4e, 16
  %v2_17a62 = inttoptr i64 %v1_17a62 to i64*
  %v3_17a62 = load i64, i64* %v2_17a62, align 8
  store i64 %v3_17a62, i64* @rdi, align 8
  %v1_17a66 = inttoptr i64 %v3_17a62 to i64*
  %v2_17a66 = load i64, i64* %v1_17a66, align 8
  store i64 %v2_17a66, i64* @rax, align 8
  %v1_17a6f = add i64 %v0_17a4e, 32
  %v2_17a6f = inttoptr i64 %v1_17a6f to i64*
  %v3_17a6f = load i64, i64* %v2_17a6f, align 8
  store i64 %v3_17a6f, i64* @rdi, align 8
  store i64 %v2_17a66, i64* @rbx, align 8
  %v1_17a79 = inttoptr i64 %v3_17a6f to i64*
  %v2_17a79 = load i64, i64* %v1_17a79, align 8
  store i64 %v2_17a79, i64* @rax, align 8
  %v1_17a82 = inttoptr i64 %v2_17a79 to i64*
  %v2_17a82 = load i64, i64* %v1_17a82, align 8
  store i64 %v2_17a82, i64* @rdx, align 8
  store i64 %v2_17a79, i64* @rdi, align 8
  %v4_17a8e = trunc i64 %v2_17a79 to i8
  %v5_17a8e = icmp eq i8 %v4_17a8e, 0
  br i1 %v5_17a8e, label %dec_label_pc_17fe0, label %dec_label_pc_17a96

dec_label_pc_17a96:                               ; preds = %dec_label_pc_17a5f
  %v3_17a96 = load i64, i64* %v2_17a4e, align 8
  store i64 %v3_17a96, i64* @rax, align 8
  %v1_17a9a = add i64 %v3_17a96, 8
  %v2_17a9a = inttoptr i64 %v1_17a9a to i32*
  %v3_17a9a = load i32, i32* %v2_17a9a, align 4
  %v4_17a9a = zext i32 %v3_17a9a to i64
  store i64 %v4_17a9a, i64* %r14.global-to-local, align 8
  %v5_17a9e = icmp eq i32 %v3_17a9a, 0
  br i1 %v5_17a9e, label %dec_label_pc_18048, label %dec_label_pc_17aa7

dec_label_pc_17aa7:                               ; preds = %dec_label_pc_17a96
  %v1_17aa7 = add i64 %v0_17a4e, 40
  %v2_17aa7 = inttoptr i64 %v1_17aa7 to i64*
  %v3_17aa7 = load i64, i64* %v2_17aa7, align 8
  store i64 %v3_17aa7, i64* @rdi, align 8
  %v1_17aab = add i64 %v3_17a96, 16
  %v2_17aab = inttoptr i64 %v1_17aab to i64*
  %v3_17aab = load i64, i64* %v2_17aab, align 8
  store i64 %v3_17aab, i64* %r12.global-to-local, align 8
  %v1_17ab2 = inttoptr i64 %v3_17aa7 to i64*
  %v2_17ab2 = load i64, i64* %v1_17ab2, align 8
  store i64 %v2_17ab2, i64* @rax, align 8
  %v1_17abb = inttoptr i64 %v2_17ab2 to i64*
  %v2_17abb = load i64, i64* %v1_17abb, align 8
  store i64 %v2_17abb, i64* @rdx, align 8
  store i64 %v2_17ab2, i64* @rdi, align 8
  %v1_17acc = inttoptr i64 %v3_17aab to i64*
  %v2_17acc = load i64, i64* %v1_17acc, align 8
  store i64 %v2_17acc, i64* @rdx, align 8
  store i64 %v3_17aab, i64* @rdi, align 8
  %v2_17adc = load i64, i64* %v1_17abb, align 8
  store i64 %v2_17adc, i64* @rdx, align 8
  store i64 %v2_17ab2, i64* @rdi, align 8
  %v1_17ae5 = add i64 %v0_17a4e, 48
  %v2_17ae5 = inttoptr i64 %v1_17ae5 to i64*
  %v3_17ae5 = load i64, i64* %v2_17ae5, align 8
  store i64 %v3_17ae5, i64* @rdi, align 8
  store i64 %v2_17ab2, i64* %r12.global-to-local, align 8
  %v1_17aef = inttoptr i64 %v3_17ae5 to i64*
  %v2_17aef = load i64, i64* %v1_17aef, align 8
  store i64 %v2_17aef, i64* @rax, align 8
  %v1_17af8 = inttoptr i64 %v2_17aef to i64*
  %v2_17af8 = load i64, i64* %v1_17af8, align 8
  store i64 %v2_17af8, i64* @rdx, align 8
  store i64 %v2_17aef, i64* @rdi, align 8
  %v4_17b04 = trunc i64 %v2_17aef to i8
  %v5_17b04 = icmp eq i8 %v4_17b04, 0
  br i1 %v5_17b04, label %dec_label_pc_17fe0, label %dec_label_pc_17b0c

dec_label_pc_17b0c:                               ; preds = %dec_label_pc_17aa7
  %v1_17b0c = add i64 %v0_17a4e, 64
  %v2_17b0c = inttoptr i64 %v1_17b0c to i64*
  %v3_17b0c = load i64, i64* %v2_17b0c, align 8
  store i64 %v3_17b0c, i64* @rax, align 8
  %v1_17b10 = add i64 %v0_17a4e, 56
  %v2_17b10 = inttoptr i64 %v1_17b10 to i64*
  %v3_17b10 = load i64, i64* %v2_17b10, align 8
  store i64 %v3_17b10, i64* @rdi, align 8
  %v1_17b14 = add i64 %v3_17b0c, 8
  %v2_17b14 = inttoptr i64 %v1_17b14 to i32*
  %v3_17b14 = load i32, i32* %v2_17b14, align 4
  %v4_17b14 = zext i32 %v3_17b14 to i64
  store i64 %v4_17b14, i64* %r13.global-to-local, align 8
  %v5_17b18 = icmp eq i32 %v3_17b14, 0
  br i1 %v5_17b18, label %dec_label_pc_18048, label %dec_label_pc_17b21

dec_label_pc_17b21:                               ; preds = %dec_label_pc_17b0c
  %v1_17b21 = add i64 %v3_17b0c, 16
  %v2_17b21 = inttoptr i64 %v1_17b21 to i64*
  %v3_17b21 = load i64, i64* %v2_17b21, align 8
  store i64 %v3_17b21, i64* @rdx, align 8
  %v1_17b25 = inttoptr i64 %v3_17b10 to i64*
  %v2_17b25 = load i64, i64* %v1_17b25, align 8
  store i64 %v2_17b25, i64* @rax, align 8
  %v1_17b31 = inttoptr i64 %v2_17b25 to i64*
  %v2_17b31 = load i64, i64* %v1_17b31, align 8
  store i64 %v2_17b31, i64* @rdx, align 8
  store i64 %v2_17b25, i64* @rdi, align 8
  %v4_17b3d = trunc i64 %v2_17b25 to i8
  %v5_17b3d = icmp eq i8 %v4_17b3d, 0
  br i1 %v5_17b3d, label %dec_label_pc_17fe0, label %dec_label_pc_17b45

dec_label_pc_17b45:                               ; preds = %dec_label_pc_17b21
  %v3_17b45 = load i64, i64* %v2_17a4e, align 8
  store i64 %v3_17b45, i64* @rax, align 8
  %v1_17b49 = add i64 %v3_17b45, 8
  %v2_17b49 = inttoptr i64 %v1_17b49 to i32*
  %v3_17b49 = load i32, i32* %v2_17b49, align 4
  %v4_17b49 = zext i32 %v3_17b49 to i64
  store i64 %v4_17b49, i64* @r11, align 8
  %v5_17b4d = icmp eq i32 %v3_17b49, 0
  br i1 %v5_17b4d, label %dec_label_pc_18048, label %dec_label_pc_17b56

dec_label_pc_17b56:                               ; preds = %dec_label_pc_17b45
  %v1_17b56 = add i64 %v0_17a4e, 72
  %v2_17b56 = inttoptr i64 %v1_17b56 to i64*
  %v3_17b56 = load i64, i64* %v2_17b56, align 8
  store i64 %v3_17b56, i64* @rdi, align 8
  %v1_17b5a = add i64 %v3_17b45, 16
  %v2_17b5a = inttoptr i64 %v1_17b5a to i64*
  %v3_17b5a = load i64, i64* %v2_17b5a, align 8
  store i64 %v3_17b5a, i64* %r12.global-to-local, align 8
  %v1_17b61 = inttoptr i64 %v3_17b56 to i64*
  %v2_17b61 = load i64, i64* %v1_17b61, align 8
  store i64 %v2_17b61, i64* @rax, align 8
  %v1_17b6a = inttoptr i64 %v2_17b61 to i64*
  %v2_17b6a = load i64, i64* %v1_17b6a, align 8
  store i64 %v2_17b6a, i64* @rdx, align 8
  store i64 %v2_17b61, i64* @rdi, align 8
  %v1_17b7b = inttoptr i64 %v3_17b5a to i64*
  %v2_17b7b = load i64, i64* %v1_17b7b, align 8
  store i64 %v2_17b7b, i64* @rdx, align 8
  store i64 %v3_17b5a, i64* @rdi, align 8
  %v2_17b8b = load i64, i64* %v1_17b6a, align 8
  store i64 %v2_17b8b, i64* @rdx, align 8
  store i64 %v2_17b61, i64* @rdi, align 8
  %v1_17b94 = add i64 %v0_17a4e, 80
  %v2_17b94 = inttoptr i64 %v1_17b94 to i64*
  %v3_17b94 = load i64, i64* %v2_17b94, align 8
  store i64 %v3_17b94, i64* @rdi, align 8
  store i64 %v2_17b61, i64* %r12.global-to-local, align 8
  %v1_17b9e = inttoptr i64 %v3_17b94 to i64*
  %v2_17b9e = load i64, i64* %v1_17b9e, align 8
  store i64 %v2_17b9e, i64* @rax, align 8
  %v1_17ba7 = inttoptr i64 %v2_17b9e to i64*
  %v2_17ba7 = load i64, i64* %v1_17ba7, align 8
  store i64 %v2_17ba7, i64* @rdx, align 8
  store i64 %v2_17b9e, i64* @rdi, align 8
  %v4_17bb3 = trunc i64 %v2_17b9e to i8
  %v5_17bb3 = icmp eq i8 %v4_17bb3, 0
  br i1 %v5_17bb3, label %dec_label_pc_17fe0, label %dec_label_pc_17bbb

dec_label_pc_17bbb:                               ; preds = %dec_label_pc_17b56
  %v3_17bbb = load i64, i64* %v2_17a4e, align 8
  store i64 %v3_17bbb, i64* @rax, align 8
  %v1_17bbf = add i64 %v0_17a4e, 88
  %v2_17bbf = inttoptr i64 %v1_17bbf to i64*
  %v3_17bbf = load i64, i64* %v2_17bbf, align 8
  store i64 %v3_17bbf, i64* @rbx, align 8
  %v1_17bc3 = add i64 %v3_17bbb, 8
  %v2_17bc3 = inttoptr i64 %v1_17bc3 to i32*
  %v3_17bc3 = load i32, i32* %v2_17bc3, align 4
  %v5_17bc7 = icmp eq i32 %v3_17bc3, 0
  br i1 %v5_17bc7, label %dec_label_pc_18048, label %dec_label_pc_17bd0

dec_label_pc_17bd0:                               ; preds = %dec_label_pc_17bbb
  %v1_17bd0 = add i64 %v0_17a4e, 96
  %v2_17bd0 = inttoptr i64 %v1_17bd0 to i64*
  %v3_17bd0 = load i64, i64* %v2_17bd0, align 8
  store i64 %v3_17bd0, i64* @rdi, align 8
  %v1_17bd4 = add i64 %v3_17bbb, 16
  %v2_17bd4 = inttoptr i64 %v1_17bd4 to i64*
  %v3_17bd4 = load i64, i64* %v2_17bd4, align 8
  store i64 %v3_17bd4, i64* %r13.global-to-local, align 8
  %v1_17bdb = inttoptr i64 %v3_17bd0 to i64*
  %v2_17bdb = load i64, i64* %v1_17bdb, align 8
  store i64 %v2_17bdb, i64* @rax, align 8
  %v1_17be4 = inttoptr i64 %v2_17bdb to i64*
  %v2_17be4 = load i64, i64* %v1_17be4, align 8
  store i64 %v2_17be4, i64* @rdx, align 8
  store i64 %v2_17bdb, i64* @rdi, align 8
  %v1_17bf5 = inttoptr i64 %v3_17bd4 to i64*
  %v2_17bf5 = load i64, i64* %v1_17bf5, align 8
  store i64 %v2_17bf5, i64* @rdx, align 8
  store i64 %v3_17bd4, i64* @rdi, align 8
  %v2_17c05 = load i64, i64* %v1_17be4, align 8
  store i64 %v2_17c05, i64* @rdx, align 8
  store i64 %v2_17bdb, i64* @rdi, align 8
  %v1_17c16 = inttoptr i64 %v3_17bbf to i64*
  %v2_17c16 = load i64, i64* %v1_17c16, align 8
  store i64 %v2_17c16, i64* @rdx, align 8
  store i64 %v3_17bbf, i64* @rdi, align 8
  %v2_17c25 = load i64, i64* %v1_17be4, align 8
  store i64 %v2_17c25, i64* @rdx, align 8
  store i64 %v2_17bdb, i64* @rdi, align 8
  %v2_17c2e = load i64, i64* %v1_17be4, align 8
  store i64 %v2_17c2e, i64* @rdx, align 8
  store i64 %v2_17bdb, i64* @rdi, align 8
  %v4_17c3a = trunc i64 %v2_17bdb to i8
  %v5_17c3a = icmp eq i8 %v4_17c3a, 0
  br i1 %v5_17c3a, label %dec_label_pc_17fe0, label %dec_label_pc_17c42

dec_label_pc_17c42:                               ; preds = %dec_label_pc_17bd0
  store i64 0, i64* @rdi, align 8
  %v2_17c44 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 0)
  store i64 %v2_17c44, i64* @rax, align 8
  store i64 %v2_17c44, i64* @rbx, align 8
  %v0_17c4c = load i64, i64* @rbp, align 8
  %v1_17c4c = add i64 %v0_17c4c, 24
  %v2_17c4c = inttoptr i64 %v1_17c4c to i64*
  %v3_17c4c = load i64, i64* %v2_17c4c, align 8
  store i64 %v3_17c4c, i64* @rax, align 8
  %v1_17c50 = add i64 %v3_17c4c, 8
  %v2_17c50 = inttoptr i64 %v1_17c50 to i32*
  %v3_17c50 = load i32, i32* %v2_17c50, align 4
  %v5_17c54 = icmp eq i32 %v3_17c50, 0
  br i1 %v5_17c54, label %dec_label_pc_18048, label %dec_label_pc_17c5d

dec_label_pc_17c5d:                               ; preds = %dec_label_pc_17c42
  %v1_17c5d = add i64 %v0_17c4c, 104
  %v2_17c5d = inttoptr i64 %v1_17c5d to i64*
  %v3_17c5d = load i64, i64* %v2_17c5d, align 8
  store i64 %v3_17c5d, i64* @rdi, align 8
  %v1_17c61 = add i64 %v3_17c4c, 16
  %v2_17c61 = inttoptr i64 %v1_17c61 to i64*
  %v3_17c61 = load i64, i64* %v2_17c61, align 8
  store i64 %v3_17c61, i64* %r13.global-to-local, align 8
  %v1_17c68 = inttoptr i64 %v3_17c5d to i64*
  %v2_17c68 = load i64, i64* %v1_17c68, align 8
  store i64 %v2_17c68, i64* @rax, align 8
  %v1_17c71 = inttoptr i64 %v2_17c68 to i64*
  %v2_17c71 = load i64, i64* %v1_17c71, align 8
  store i64 %v2_17c71, i64* @rdx, align 8
  store i64 %v2_17c68, i64* @rdi, align 8
  %v1_17c82 = inttoptr i64 %v3_17c61 to i64*
  %v2_17c82 = load i64, i64* %v1_17c82, align 8
  store i64 %v2_17c82, i64* @rdx, align 8
  store i64 %v3_17c61, i64* @rdi, align 8
  %v2_17c92 = load i64, i64* %v1_17c71, align 8
  store i64 %v2_17c92, i64* @rdx, align 8
  store i64 %v2_17c68, i64* @rdi, align 8
  store i64 %v2_17c68, i64* %r13.global-to-local, align 8
  %v1_17ca0 = add i64 %v0_17c4c, 88
  %v2_17ca0 = inttoptr i64 %v1_17ca0 to i64*
  %v3_17ca0317 = load i64, i64* %v2_17ca0, align 8
  store i64 %v3_17ca0317, i64* @rdi, align 8
  %v1_17ca7318 = inttoptr i64 %v3_17ca0317 to i64*
  %v2_17ca7319 = load i64, i64* %v1_17ca7318, align 8
  store i64 %v2_17ca7319, i64* @rax, align 8
  %v1_17cb0320 = inttoptr i64 %v2_17ca7319 to i64*
  %v2_17cb0321 = load i64, i64* %v1_17cb0320, align 8
  store i64 %v2_17cb0321, i64* @rdx, align 8
  store i64 %v2_17ca7319, i64* @rdi, align 8
  %v4_17cbc322 = trunc i64 %v2_17ca7319 to i8
  %v5_17cbc323 = icmp eq i8 %v4_17cbc322, 0
  %v1_17cbe324 = icmp eq i1 %v5_17cbc323, false
  br i1 %v1_17cbe324, label %dec_label_pc_18043, label %dec_label_pc_17cc4.lr.ph

dec_label_pc_17cc4.lr.ph:                         ; preds = %dec_label_pc_17c5d
  %v1_17cc4 = add i64 %v0_17c4c, 80
  %v2_17cc4 = inttoptr i64 %v1_17cc4 to i64*
  %v1_17d49 = add i64 %v0_17c4c, 96
  %v2_17d49 = inttoptr i64 %v1_17d49 to i64*
  %v1_17f75 = inttoptr i64 %v2_17c44 to i64*
  %v1_17ef0 = add i64 %v0_17c4c, 112
  %v2_17ef0 = inttoptr i64 %v1_17ef0 to i64*
  %v1_17fad = add i64 %v0_17c4c, 120
  %v2_17fad = inttoptr i64 %v1_17fad to i64*
  br label %dec_label_pc_17cc4

dec_label_pc_17cc4:                               ; preds = %dec_label_pc_17cc4.lr.ph, %dec_label_pc_17ca0.backedge
  %v3_17cc4 = load i64, i64* %v2_17cc4, align 8
  store i64 %v3_17cc4, i64* @rdi, align 8
  %v1_17ccb = inttoptr i64 %v3_17cc4 to i64*
  %v2_17ccb = load i64, i64* %v1_17ccb, align 8
  store i64 %v2_17ccb, i64* @rax, align 8
  %v1_17cd4 = inttoptr i64 %v2_17ccb to i64*
  %v2_17cd4 = load i64, i64* %v1_17cd4, align 8
  store i64 %v2_17cd4, i64* @rdx, align 8
  store i64 %v2_17ccb, i64* @rdi, align 8
  %v4_17ce0 = trunc i64 %v2_17ccb to i8
  %v5_17ce0 = icmp eq i8 %v4_17ce0, 0
  br i1 %v5_17ce0, label %dec_label_pc_17fe0.loopexit, label %dec_label_pc_17ce8

dec_label_pc_17ce8:                               ; preds = %dec_label_pc_17cc4
  %v3_17ce8 = load i64, i64* %v2_17c4c, align 8
  store i64 %v3_17ce8, i64* @rax, align 8
  %v1_17cec = add i64 %v3_17ce8, 8
  %v2_17cec = inttoptr i64 %v1_17cec to i32*
  %v3_17cec = load i32, i32* %v2_17cec, align 4
  %v5_17cf0 = icmp eq i32 %v3_17cec, 0
  br i1 %v5_17cf0, label %dec_label_pc_18048.loopexit17, label %dec_label_pc_17cf9

dec_label_pc_17cf9:                               ; preds = %dec_label_pc_17ce8
  %v3_17cf9 = load i64, i64* %v2_17c5d, align 8
  store i64 %v3_17cf9, i64* @rdi, align 8
  %v1_17cfd = add i64 %v3_17ce8, 16
  %v2_17cfd = inttoptr i64 %v1_17cfd to i64*
  %v3_17cfd = load i64, i64* %v2_17cfd, align 8
  store i64 %v3_17cfd, i64* %r12.global-to-local, align 8
  %v1_17d04 = inttoptr i64 %v3_17cf9 to i64*
  %v2_17d04 = load i64, i64* %v1_17d04, align 8
  store i64 %v2_17d04, i64* @rax, align 8
  %v1_17d0d = inttoptr i64 %v2_17d04 to i64*
  %v2_17d0d = load i64, i64* %v1_17d0d, align 8
  store i64 %v2_17d0d, i64* @rdx, align 8
  store i64 %v2_17d04, i64* @rdi, align 8
  %v1_17d1e = inttoptr i64 %v3_17cfd to i64*
  %v2_17d1e = load i64, i64* %v1_17d1e, align 8
  store i64 %v2_17d1e, i64* @rdx, align 8
  store i64 %v3_17cfd, i64* @rdi, align 8
  %v2_17d2e = load i64, i64* %v1_17d0d, align 8
  store i64 %v2_17d2e, i64* @rdx, align 8
  store i64 %v2_17d04, i64* @rdi, align 8
  store i64 %v2_17d04, i64* %r14.global-to-local, align 8
  %v3_17d3a = load i64, i64* %v2_17c4c, align 8
  store i64 %v3_17d3a, i64* @rax, align 8
  %v1_17d3e = add i64 %v3_17d3a, 8
  %v2_17d3e = inttoptr i64 %v1_17d3e to i32*
  %v3_17d3e = load i32, i32* %v2_17d3e, align 4
  %v4_17d3e = zext i32 %v3_17d3e to i64
  store i64 %v4_17d3e, i64* @rdi, align 8
  %v5_17d41 = icmp eq i32 %v3_17d3e, 0
  br i1 %v5_17d41, label %dec_label_pc_18048.loopexit17, label %dec_label_pc_17d49

dec_label_pc_17d49:                               ; preds = %dec_label_pc_17cf9
  %v3_17d49 = load i64, i64* %v2_17d49, align 8
  store i64 %v3_17d49, i64* @rdi, align 8
  %v1_17d4d = add i64 %v3_17d3a, 16
  %v2_17d4d = inttoptr i64 %v1_17d4d to i64*
  %v3_17d4d = load i64, i64* %v2_17d4d, align 8
  store i64 %v3_17d4d, i64* %r12.global-to-local, align 8
  %v1_17d54 = inttoptr i64 %v3_17d49 to i64*
  %v2_17d54 = load i64, i64* %v1_17d54, align 8
  store i64 %v2_17d54, i64* @rax, align 8
  %v1_17d5d = inttoptr i64 %v2_17d54 to i64*
  %v2_17d5d = load i64, i64* %v1_17d5d, align 8
  store i64 %v2_17d5d, i64* @rdx, align 8
  store i64 %v2_17d54, i64* @rdi, align 8
  %v1_17d6e = inttoptr i64 %v3_17d4d to i64*
  %v2_17d6e = load i64, i64* %v1_17d6e, align 8
  store i64 %v2_17d6e, i64* @rdx, align 8
  store i64 %v3_17d4d, i64* @rdi, align 8
  %v2_17d7e = load i64, i64* %v1_17d5d, align 8
  store i64 %v2_17d7e, i64* @rdx, align 8
  store i64 %v2_17d54, i64* @rdi, align 8
  %v3_17d87 = load i64, i64* %v2_17cc4, align 8
  store i64 %v3_17d87, i64* @rdi, align 8
  store i64 %v2_17d54, i64* %r13.global-to-local, align 8
  %v1_17d91 = inttoptr i64 %v3_17d87 to i64*
  %v2_17d91 = load i64, i64* %v1_17d91, align 8
  store i64 %v2_17d91, i64* @rax, align 8
  %v1_17d9a = inttoptr i64 %v2_17d91 to i64*
  %v2_17d9a = load i64, i64* %v1_17d9a, align 8
  store i64 %v2_17d9a, i64* @rdx, align 8
  store i64 %v2_17d91, i64* @rdi, align 8
  %v4_17da6 = trunc i64 %v2_17d91 to i8
  %v5_17da6 = icmp eq i8 %v4_17da6, 0
  br i1 %v5_17da6, label %dec_label_pc_17fe0.loopexit, label %dec_label_pc_17dae

dec_label_pc_17dae:                               ; preds = %dec_label_pc_17d49
  %v3_17dae = load i64, i64* %v2_17c5d, align 8
  store i64 %v3_17dae, i64* @rdi, align 8
  %v1_17db5 = inttoptr i64 %v3_17dae to i64*
  %v2_17db5 = load i64, i64* %v1_17db5, align 8
  store i64 %v2_17db5, i64* @rax, align 8
  store i64 %v2_17db5, i64* %r12.global-to-local, align 8
  %v3_17dc1 = load i64, i64* %v2_17c4c, align 8
  store i64 %v3_17dc1, i64* @rax, align 8
  %v1_17dc5 = add i64 %v3_17dc1, 8
  %v2_17dc5 = inttoptr i64 %v1_17dc5 to i32*
  %v3_17dc5 = load i32, i32* %v2_17dc5, align 4
  %v5_17dc8 = icmp eq i32 %v3_17dc5, 0
  br i1 %v5_17dc8, label %dec_label_pc_18048.loopexit17, label %dec_label_pc_17dd0

dec_label_pc_17dd0:                               ; preds = %dec_label_pc_17dae
  %v3_17dd0 = load i64, i64* %v2_17d49, align 8
  store i64 %v3_17dd0, i64* @rdi, align 8
  %v1_17dd4 = add i64 %v3_17dc1, 16
  %v2_17dd4 = inttoptr i64 %v1_17dd4 to i64*
  %v3_17dd4 = load i64, i64* %v2_17dd4, align 8
  store i64 %v3_17dd4, i64* %r15.global-to-local, align 8
  %v1_17ddb = inttoptr i64 %v3_17dd0 to i64*
  %v2_17ddb = load i64, i64* %v1_17ddb, align 8
  store i64 %v2_17ddb, i64* @rax, align 8
  %v1_17de4 = inttoptr i64 %v2_17ddb to i64*
  %v2_17de4 = load i64, i64* %v1_17de4, align 8
  store i64 %v2_17de4, i64* @rdx, align 8
  store i64 %v2_17ddb, i64* @rdi, align 8
  %v1_17df5 = inttoptr i64 %v3_17dd4 to i64*
  %v2_17df5 = load i64, i64* %v1_17df5, align 8
  store i64 %v2_17df5, i64* @rdx, align 8
  store i64 %v3_17dd4, i64* @rdi, align 8
  %v2_17e04 = load i64, i64* %v1_17de4, align 8
  store i64 %v2_17e04, i64* @rdx, align 8
  store i64 %v2_17ddb, i64* @rdi, align 8
  %v3_17e0d = load i64, i64* %v2_17cc4, align 8
  store i64 %v3_17e0d, i64* @rdi, align 8
  store i64 %v2_17ddb, i64* %r14.global-to-local, align 8
  %v1_17e17 = inttoptr i64 %v3_17e0d to i64*
  %v2_17e17 = load i64, i64* %v1_17e17, align 8
  store i64 %v2_17e17, i64* @rax, align 8
  %v1_17e20 = inttoptr i64 %v2_17e17 to i64*
  %v2_17e20 = load i64, i64* %v1_17e20, align 8
  store i64 %v2_17e20, i64* @rdx, align 8
  store i64 %v2_17e17, i64* @rdi, align 8
  %v4_17e2c = trunc i64 %v2_17e17 to i8
  %v5_17e2c = icmp eq i8 %v4_17e2c, 0
  br i1 %v5_17e2c, label %dec_label_pc_17fe0.loopexit, label %dec_label_pc_17e34

dec_label_pc_17e34:                               ; preds = %dec_label_pc_17dd0
  %v3_17e34 = load i64, i64* %v2_17c5d, align 8
  store i64 %v3_17e34, i64* @rdi, align 8
  %v1_17e3b = inttoptr i64 %v3_17e34 to i64*
  %v2_17e3b = load i64, i64* %v1_17e3b, align 8
  store i64 %v2_17e3b, i64* @rax, align 8
  %v3_17e49 = load i64, i64* %v2_17c4c, align 8
  store i64 %v3_17e49, i64* @rax, align 8
  %v3_17e4d = load i64, i64* %v2_17ca0, align 8
  store i64 %v3_17e4d, i64* %r15.global-to-local, align 8
  %v1_17e51 = add i64 %v3_17e49, 8
  %v2_17e51 = inttoptr i64 %v1_17e51 to i32*
  %v3_17e51 = load i32, i32* %v2_17e51, align 4
  %v4_17e51 = zext i32 %v3_17e51 to i64
  store i64 %v4_17e51, i64* @rcx, align 8
  %v5_17e54 = icmp eq i32 %v3_17e51, 0
  br i1 %v5_17e54, label %dec_label_pc_18048.loopexit17, label %dec_label_pc_17e5c

dec_label_pc_17e5c:                               ; preds = %dec_label_pc_17e34
  %v3_17e5c = load i64, i64* %v2_17d49, align 8
  store i64 %v3_17e5c, i64* @rdi, align 8
  %v1_17e60 = add i64 %v3_17e49, 16
  %v2_17e60 = inttoptr i64 %v1_17e60 to i64*
  %v3_17e60 = load i64, i64* %v2_17e60, align 8
  store i64 %v3_17e60, i64* @rcx, align 8
  %v1_17e67 = inttoptr i64 %v3_17e5c to i64*
  %v2_17e67 = load i64, i64* %v1_17e67, align 8
  store i64 %v2_17e67, i64* @rax, align 8
  %v1_17e74 = inttoptr i64 %v2_17e67 to i64*
  store i64 %v2_17e67, i64* @rdi, align 8
  store i64 %v3_17e60, i64* @rcx, align 8
  store i64 %v3_17e60, i64* @rdi, align 8
  %v2_17e9a = load i64, i64* %v1_17e74, align 8
  store i64 %v2_17e9a, i64* @rcx, align 8
  store i64 %v2_17e67, i64* @rdi, align 8
  %v1_17eab = inttoptr i64 %v3_17e4d to i64*
  %v2_17eab = load i64, i64* %v1_17eab, align 8
  store i64 %v2_17eab, i64* @rcx, align 8
  store i64 %v3_17e4d, i64* @rdi, align 8
  %v2_17eba = load i64, i64* %v1_17e74, align 8
  store i64 %v2_17eba, i64* @rdx, align 8
  store i64 %v2_17e67, i64* @rdi, align 8
  %v2_17ec3 = load i64, i64* %v1_17e74, align 8
  store i64 %v2_17ec3, i64* @rdx, align 8
  store i64 %v2_17e67, i64* @rdi, align 8
  %v4_17ecf = trunc i64 %v2_17e67 to i8
  %v5_17ecf = icmp eq i8 %v4_17ecf, 0
  br i1 %v5_17ecf, label %dec_label_pc_17fe0.loopexit, label %dec_label_pc_17ed7

dec_label_pc_17ed7:                               ; preds = %dec_label_pc_17e5c
  %v0_17ed7 = load i64, i64* inttoptr (i64 98014 to i64*), align 8
  store i64 %v0_17ed7, i64* @rax, align 8
  %v0_17ede = load i64, i64* inttoptr (i64 98021 to i64*), align 8
  store i64 %v0_17ede, i64* %r14.global-to-local, align 8
  %v2_17f75309 = load i64, i64* %v1_17f75, align 8
  store i64 %v2_17f75309, i64* @rax, align 8
  store i64 %v2_17c44, i64* @rdi, align 8
  %v1_17f81310 = inttoptr i64 %v0_17ede to i64*
  %v2_17f81311 = load i64, i64* %v1_17f81310, align 8
  store i64 %v2_17f81311, i64* @rdx, align 8
  store i64 %v0_17ede, i64* @rdi, align 8
  %v4_17f90312 = trunc i64 %v2_17f75309 to i8
  %v5_17f90313 = icmp eq i8 %v4_17f90312, 0
  %v1_17f92314 = icmp eq i1 %v5_17f90313, false
  br i1 %v1_17f92314, label %dec_label_pc_17ef0, label %dec_label_pc_17f9c

dec_label_pc_17ef0:                               ; preds = %dec_label_pc_17ed7, %dec_label_pc_17f62
  %v1_17f81316 = phi i64* [ %v1_17f81, %dec_label_pc_17f62 ], [ %v1_17f81310, %dec_label_pc_17ed7 ]
  %v0_18007315 = phi i64 [ %v2_17f59, %dec_label_pc_17f62 ], [ %v0_17ede, %dec_label_pc_17ed7 ]
  %v3_17ef0 = load i64, i64* %v2_17ef0, align 8
  store i64 %v3_17ef0, i64* @rax, align 8
  %v1_17ef4 = add i64 %v3_17ef0, 8
  %v2_17ef4 = inttoptr i64 %v1_17ef4 to i32*
  %v3_17ef4 = load i32, i32* %v2_17ef4, align 4
  %v4_17ef4 = zext i32 %v3_17ef4 to i64
  store i64 %v4_17ef4, i64* @rdx, align 8
  %v5_17ef7 = icmp eq i32 %v3_17ef4, 0
  br i1 %v5_17ef7, label %dec_label_pc_18048.loopexit, label %dec_label_pc_17eff

dec_label_pc_17eff:                               ; preds = %dec_label_pc_17ef0
  %v1_17eff = add i64 %v3_17ef0, 16
  %v2_17eff = inttoptr i64 %v1_17eff to i64*
  %v3_17eff = load i64, i64* %v2_17eff, align 8
  store i64 %v3_17eff, i64* %r15.global-to-local, align 8
  %v2_17f03 = load i64, i64* %v1_17f81316, align 8
  store i64 %v2_17f03, i64* @rax, align 8
  store i64 %v0_18007315, i64* @rdi, align 8
  %v1_17f16 = inttoptr i64 %v2_17f03 to i64*
  %v2_17f16 = load i64, i64* %v1_17f16, align 8
  store i64 %v2_17f16, i64* @rdx, align 8
  store i64 %v2_17f03, i64* @rdi, align 8
  %v2_17f29 = load i64, i64* %v1_17f75, align 8
  store i64 %v2_17f29, i64* @rdx, align 8
  store i64 %v2_17c44, i64* @rdi, align 8
  store i64 %v2_17db5, i64* @rdx, align 8
  store i64 %v3_17eff, i64* @rdi, align 8
  %v2_17f4b = load i64, i64* %v1_17f16, align 8
  store i64 %v2_17f4b, i64* @rdx, align 8
  store i64 %v2_17f03, i64* @rdi, align 8
  %v4_17f57 = trunc i64 %v2_17f03 to i8
  %v5_17f57 = icmp eq i8 %v4_17f57, 0
  %v2_17f59 = load i64, i64* %v1_17f81316, align 8
  store i64 %v2_17f59, i64* @rax, align 8
  %v1_17f5c = icmp eq i1 %v5_17f57, false
  br i1 %v1_17f5c, label %dec_label_pc_18000, label %dec_label_pc_17f62

dec_label_pc_17f62:                               ; preds = %dec_label_pc_17eff
  store i64 %v0_18007315, i64* @rdi, align 8
  store i64 %v2_17f59, i64* %r14.global-to-local, align 8
  %v2_17f75 = load i64, i64* %v1_17f75, align 8
  store i64 %v2_17f75, i64* @rax, align 8
  store i64 %v2_17c44, i64* @rdi, align 8
  %v1_17f81 = inttoptr i64 %v2_17f59 to i64*
  %v2_17f81 = load i64, i64* %v1_17f81, align 8
  store i64 %v2_17f81, i64* @rdx, align 8
  store i64 %v2_17f59, i64* @rdi, align 8
  %v4_17f90 = trunc i64 %v2_17f75 to i8
  %v5_17f90 = icmp eq i8 %v4_17f90, 0
  %v1_17f92 = icmp eq i1 %v5_17f90, false
  br i1 %v1_17f92, label %dec_label_pc_17ef0, label %dec_label_pc_17f9c

dec_label_pc_17f9c:                               ; preds = %dec_label_pc_17ed7, %dec_label_pc_17f62, %dec_label_pc_18000
  %storemerge = phi i64 [ %storemerge.pre, %dec_label_pc_18000 ], [ %v0_17ed7, %dec_label_pc_17f62 ], [ %v0_17ed7, %dec_label_pc_17ed7 ]
  store i64 %storemerge, i64* @rdi, align 8
  %v1_17f9c = inttoptr i64 %storemerge to i64*
  %v2_17f9c = load i64, i64* %v1_17f9c, align 8
  store i64 %v2_17f9c, i64* @rax, align 8
  %v4_17fa5 = trunc i64 %v2_17f9c to i8
  %v5_17fa5 = icmp eq i8 %v4_17fa5, 0
  br i1 %v5_17fa5, label %dec_label_pc_17ca0.backedge, label %dec_label_pc_17fad

dec_label_pc_17ca0.backedge:                      ; preds = %dec_label_pc_17f9c, %dec_label_pc_17fad
  %v3_17ca0 = load i64, i64* %v2_17ca0, align 8
  store i64 %v3_17ca0, i64* @rdi, align 8
  %v1_17ca7 = inttoptr i64 %v3_17ca0 to i64*
  %v2_17ca7 = load i64, i64* %v1_17ca7, align 8
  store i64 %v2_17ca7, i64* @rax, align 8
  %v1_17cb0 = inttoptr i64 %v2_17ca7 to i64*
  %v2_17cb0 = load i64, i64* %v1_17cb0, align 8
  store i64 %v2_17cb0, i64* @rdx, align 8
  store i64 %v2_17ca7, i64* @rdi, align 8
  %v4_17cbc = trunc i64 %v2_17ca7 to i8
  %v5_17cbc = icmp eq i8 %v4_17cbc, 0
  %v1_17cbe = icmp eq i1 %v5_17cbc, false
  br i1 %v1_17cbe, label %dec_label_pc_18043, label %dec_label_pc_17cc4

dec_label_pc_17fad:                               ; preds = %dec_label_pc_17f9c
  %v3_17fad = load i64, i64* %v2_17fad, align 8
  store i64 %v3_17fad, i64* @rdi, align 8
  store i64 %v2_17db5, i64* @rdx, align 8
  %v1_17fb7 = inttoptr i64 %v3_17fad to i64*
  %v2_17fb7 = load i64, i64* %v1_17fb7, align 8
  store i64 %v2_17fb7, i64* @rax, align 8
  %v3_17fc0 = load i64, i64* %v2_17fad, align 8
  store i64 %v3_17fc0, i64* @rdi, align 8
  store i64 %v2_17e3b, i64* @rdx, align 8
  %v1_17fcc = inttoptr i64 %v3_17fc0 to i64*
  %v2_17fcc = load i64, i64* %v1_17fcc, align 8
  store i64 %v2_17fcc, i64* @rax, align 8
  br label %dec_label_pc_17ca0.backedge

dec_label_pc_17fe0.loopexit:                      ; preds = %dec_label_pc_17cc4, %dec_label_pc_17d49, %dec_label_pc_17dd0, %dec_label_pc_17e5c
  br label %dec_label_pc_17fe0

dec_label_pc_17fe0:                               ; preds = %dec_label_pc_17fe0.loopexit, %dec_label_pc_17bd0, %dec_label_pc_17b56, %dec_label_pc_17b21, %dec_label_pc_17aa7, %dec_label_pc_17a5f
  %v0_17fe0 = load i64, i64* inttoptr (i64 98279 to i64*), align 8
  store i64 %v0_17fe0, i64* @rax, align 8
  store i64 %v0_17a49, i64* @rbx, align 8
  store i64 %v0_17a48, i64* %rbp.global-to-local, align 8
  store i64 %v0_17a46, i64* %r12.global-to-local, align 8
  store i64 %v0_17a44, i64* %r13.global-to-local, align 8
  store i64 %v0_17a42, i64* %r14.global-to-local, align 8
  store i64 %v0_17a40, i64* %r15.global-to-local, align 8
  ret i64 %v0_17fe0

dec_label_pc_18000:                               ; preds = %dec_label_pc_17eff
  store i64 %v0_18007315, i64* @rdi, align 8
  %v1_18010 = inttoptr i64 %v2_17f59 to i64*
  %v2_18010 = load i64, i64* %v1_18010, align 8
  store i64 %v2_18010, i64* @rdx, align 8
  store i64 %v2_17f59, i64* @rdi, align 8
  %v2_18023 = load i64, i64* %v1_17f75, align 8
  store i64 %v2_18023, i64* @rcx, align 8
  store i64 %v2_17c44, i64* @rdi, align 8
  store i64 %v2_17e3b, i64* @rdx, align 8
  %storemerge.pre = load i64, i64* inttoptr (i64 98366 to i64*), align 8
  br label %dec_label_pc_17f9c

dec_label_pc_18043:                               ; preds = %dec_label_pc_17ca0.backedge, %dec_label_pc_17c5d
  %v2_17ca7.lcssa = phi i64 [ %v2_17ca7319, %dec_label_pc_17c5d ], [ %v2_17ca7, %dec_label_pc_17ca0.backedge ]
  ret i64 %v2_17ca7.lcssa

dec_label_pc_18048.loopexit:                      ; preds = %dec_label_pc_17ef0
  br label %dec_label_pc_18048

dec_label_pc_18048.loopexit17:                    ; preds = %dec_label_pc_17ce8, %dec_label_pc_17cf9, %dec_label_pc_17dae, %dec_label_pc_17e34
  br label %dec_label_pc_18048

dec_label_pc_18048:                               ; preds = %dec_label_pc_18048.loopexit17, %dec_label_pc_18048.loopexit, %dec_label_pc_17c42, %dec_label_pc_17bbb, %dec_label_pc_17b45, %dec_label_pc_17b0c, %dec_label_pc_17a96, %dec_label_pc_17a40
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot8keyindexEJii"() local_unnamed_addr {
dec_label_pc_18060:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$65$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18070:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$77$21$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18080:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$76$15$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18090:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$77$22$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_180a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$76$16$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_180b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$77$20$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_180c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @"_ZN4lang17lang_luaj$76$17$04callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_180d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm26LuaNil8optvalueEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_180e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm28LuaValue10isuserdataEJbPN4java4lang5ClassE() local_unnamed_addr {
dec_label_pc_180f0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue5raweqEJbPNS1_11LuaUserdataE() local_unnamed_addr {
dec_label_pc_18100:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaNumber11checknumberEJPS2_PN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_18110:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @"_ZN3org4luaj3vm218WeakTable$WeakSlot8arraykeyEJii"() local_unnamed_addr {
dec_label_pc_18120:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm217NonTableMetatable4wrapEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18130:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm217NonTableMetatable13useWeakValuesEJbv() local_unnamed_addr {
dec_label_pc_18140:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger5isintEJbv() local_unnamed_addr {
dec_label_pc_18150:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm210LuaInteger9isinttypeEJbv() local_unnamed_addr {
dec_label_pc_18160:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm210LuaInteger6islongEJbv() local_unnamed_addr {
dec_label_pc_18170:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm210LuaInteger8isstringEJbv() local_unnamed_addr {
dec_label_pc_18180:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @"_ZN3org4luaj3vm222Globals$BufferedStream13markSupportedEJbv"() local_unnamed_addr {
dec_label_pc_18190:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm217NonTableMetatable11useWeakKeysEJbv() local_unnamed_addr {
dec_label_pc_181a0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaThread8isthreadEJbv() local_unnamed_addr {
dec_label_pc_181b0:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm211LuaUserdata10isuserdataEJbv() local_unnamed_addr {
dec_label_pc_181c0:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm211LuaFunction10isfunctionEJbv() local_unnamed_addr {
dec_label_pc_181d0:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm29LuaString8isstringEJbv() local_unnamed_addr {
dec_label_pc_181e0:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm29LuaString8strvalueEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_181f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaTable7istableEJbv() local_unnamed_addr {
dec_label_pc_18200:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm28LuaTable11useWeakKeysEJbv() local_unnamed_addr {
dec_label_pc_18210:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaNumber8isnumberEJbv() local_unnamed_addr {
dec_label_pc_18220:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm29LuaNumber8isstringEJbv() local_unnamed_addr {
dec_label_pc_18230:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm28LuaValue8isthreadEJbv() local_unnamed_addr {
dec_label_pc_18240:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7istableEJbv() local_unnamed_addr {
dec_label_pc_18250:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaBoolean9isbooleanEJbv() local_unnamed_addr {
dec_label_pc_18260:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm27Varargs10isTailcallEJbv() local_unnamed_addr {
dec_label_pc_18270:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10isuserdataEJbv() local_unnamed_addr {
dec_label_pc_18280:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue4nargEJiv() local_unnamed_addr {
dec_label_pc_18290:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm28LuaValue4arg1EJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_182a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaValue6islongEJbv() local_unnamed_addr {
dec_label_pc_182b0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue5isnilEJbv() local_unnamed_addr {
dec_label_pc_182c0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8isnumberEJbv() local_unnamed_addr {
dec_label_pc_182d0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue8isstringEJbv() local_unnamed_addr {
dec_label_pc_182e0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9isbooleanEJbv() local_unnamed_addr {
dec_label_pc_182f0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9isclosureEJbv() local_unnamed_addr {
dec_label_pc_18300:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue10isfunctionEJbv() local_unnamed_addr {
dec_label_pc_18310:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue5isintEJbv() local_unnamed_addr {
dec_label_pc_18320:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9isinttypeEJbv() local_unnamed_addr {
dec_label_pc_18330:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue9tobooleanEJbv() local_unnamed_addr {
dec_label_pc_18340:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm28LuaValue5tointEJiv() local_unnamed_addr {
dec_label_pc_18350:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11checknotnilEJPS2_v(i64 %arg1) local_unnamed_addr {
dec_label_pc_18360:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @_ZN3org4luaj3vm28LuaValue10isvalidkeyEJbv() local_unnamed_addr {
dec_label_pc_18370:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm26LuaNil10isvalidkeyEJbv() local_unnamed_addr {
dec_label_pc_18380:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm215TailcallVarargs10isTailcallEJbv() local_unnamed_addr {
dec_label_pc_18390:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm26LuaNil4typeEJiv() local_unnamed_addr {
dec_label_pc_183a0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26LuaNil9tobooleanEJbv() local_unnamed_addr {
dec_label_pc_183b0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26LuaNil5isnilEJbv() local_unnamed_addr {
dec_label_pc_183c0:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm29LuaDouble8isnumberEJbv() local_unnamed_addr {
dec_label_pc_183d0:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @_ZN3org4luaj3vm29LuaDouble8isstringEJbv() local_unnamed_addr {
dec_label_pc_183e0:
  store i64 1, i64* @rax, align 8
  ret i64 1
}

define i64 @"_ZN3org4luaj3vm23lib10IoLib$File4typeEJiv"() local_unnamed_addr {
dec_label_pc_183f0:
  store i64 7, i64* @rax, align 8
  ret i64 7
}

define i64 @_ZN3org4luaj3vm26LuaNil8toStringEJPN4java4lang6StringEv() local_unnamed_addr {
dec_label_pc_18400:
  %v0_18400 = load i64, i64* inttoptr (i64 99335 to i64*), align 8
  store i64 %v0_18400, i64* @rax, align 8
  ret i64 %v0_18400
}

define i64 @"_ZN3org4luaj3vm26LuaNil9typename$EJPN4java4lang6StringEv"() local_unnamed_addr {
dec_label_pc_18410:
  %v0_18410 = load i64, i64* inttoptr (i64 99351 to i64*), align 8
  store i64 %v0_18410, i64* @rax, align 8
  ret i64 %v0_18410
}

define i128 @_ZN3org4luaj3vm29LuaDouble8todoubleEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_18420:
  store i64 %arg1, i64* @rdi, align 8
  %v1_18420 = add i64 %arg1, 8
  %v2_18420 = inttoptr i64 %v1_18420 to i64*
  %v3_18420 = load i64, i64* %v2_18420, align 8
  %v4_18420 = call i128 @__asm_movsd(i64 %v3_18420)
  ret i128 %v4_18420
}

define i64 @_ZN3org4luaj3vm28LuaValue8tonumberEJPS2_v() local_unnamed_addr {
dec_label_pc_18430:
  %v0_18430 = load i64, i64* inttoptr (i64 99383 to i64*), align 8
  store i64 %v0_18430, i64* @rax, align 8
  ret i64 %v0_18430
}

define i64 @_ZN3org4luaj3vm28LuaValue8tostringEJPS2_v() local_unnamed_addr {
dec_label_pc_18440:
  %v0_18440 = load i64, i64* inttoptr (i64 99399 to i64*), align 8
  store i64 %v0_18440, i64* @rax, align 8
  ret i64 %v0_18440
}

define i64 @_ZN3org4luaj3vm28LuaValue4eq_bEJbPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18450:
  store i64 %arg1, i64* @rdi, align 8
  %v12_18450 = icmp eq i64 %arg1, %arg2
  %v1_18453 = zext i1 %v12_18450 to i64
  %v2_18453 = load i64, i64* @rax, align 8
  %v3_18453 = and i64 %v2_18453, -256
  %v4_18453 = or i64 %v3_18453, %v1_18453
  store i64 %v4_18453, i64* @rax, align 8
  ret i64 %v4_18453
}

define i64 @_ZN3org4luaj3vm210LuaBoolean12booleanValueEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_18460:
  store i64 %arg1, i64* @rdi, align 8
  %v1_18460 = add i64 %arg1, 8
  %v2_18460 = inttoptr i64 %v1_18460 to i8*
  %v3_18460 = load i8, i8* %v2_18460, align 1
  %v4_18460 = zext i8 %v3_18460 to i64
  store i64 %v4_18460, i64* @rax, align 8
  ret i64 %v4_18460
}

define i64 @_ZN3org4luaj3vm210LuaBoolean9tobooleanEJbv(i64 %arg1) local_unnamed_addr {
dec_label_pc_18470:
  store i64 %arg1, i64* @rdi, align 8
  %v1_18470 = add i64 %arg1, 8
  %v2_18470 = inttoptr i64 %v1_18470 to i8*
  %v3_18470 = load i8, i8* %v2_18470, align 1
  %v4_18470 = zext i8 %v3_18470 to i64
  store i64 %v4_18470, i64* @rax, align 8
  ret i64 %v4_18470
}

define i64 @_ZN3org4luaj3vm211LuaUserdata10touserdataEJPN4java4lang6ObjectEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_18480:
  store i64 %arg1, i64* @rdi, align 8
  %v1_18480 = add i64 %arg1, 8
  %v2_18480 = inttoptr i64 %v1_18480 to i64*
  %v3_18480 = load i64, i64* %v2_18480, align 8
  store i64 %v3_18480, i64* @rax, align 8
  ret i64 %v3_18480
}

define i64 @_ZN3org4luaj3vm211LuaUserdata8userdataEJPN4java4lang6ObjectEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_18490:
  store i64 %arg1, i64* @rdi, align 8
  %v1_18490 = add i64 %arg1, 8
  %v2_18490 = inttoptr i64 %v1_18490 to i64*
  %v3_18490 = load i64, i64* %v2_18490, align 8
  store i64 %v3_18490, i64* @rax, align 8
  ret i64 %v3_18490
}

define i64 @_ZN3org4luaj3vm29LuaString6lengthEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_184a0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_184a0 = add i64 %arg1, 20
  %v2_184a0 = inttoptr i64 %v1_184a0 to i32*
  %v3_184a0 = load i32, i32* %v2_184a0, align 4
  %v4_184a0 = zext i32 %v3_184a0 to i64
  store i64 %v4_184a0, i64* @rax, align 8
  ret i64 %v4_184a0
}

define i64 @_ZN3org4luaj3vm210LuaInteger5tointEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_184b0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_184b0 = add i64 %arg1, 8
  %v2_184b0 = inttoptr i64 %v1_184b0 to i32*
  %v3_184b0 = load i32, i32* %v2_184b0, align 4
  %v4_184b0 = zext i32 %v3_184b0 to i64
  store i64 %v4_184b0, i64* @rax, align 8
  ret i64 %v4_184b0
}

define i64 @_ZN3org4luaj3vm210LuaInteger6tolongEJxv(i64 %arg1) local_unnamed_addr {
dec_label_pc_184c0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_184c0 = add i64 %arg1, 8
  %v2_184c0 = inttoptr i64 %v1_184c0 to i32*
  %v3_184c0 = load i32, i32* %v2_184c0, align 4
  %v4_184c0 = sext i32 %v3_184c0 to i64
  store i64 %v4_184c0, i64* @rax, align 8
  ret i64 %v4_184c0
}

define i64 @_ZN3org4luaj3vm210LuaInteger8hashCodeEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_184d0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_184d0 = add i64 %arg1, 8
  %v2_184d0 = inttoptr i64 %v1_184d0 to i32*
  %v3_184d0 = load i32, i32* %v2_184d0, align 4
  %v4_184d0 = zext i32 %v3_184d0 to i64
  store i64 %v4_184d0, i64* @rax, align 8
  ret i64 %v4_184d0
}

define i128 @_ZN3org4luaj3vm210LuaInteger8todoubleEJdv(i64 %arg1) local_unnamed_addr {
dec_label_pc_184e0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_184e0 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_184e0 = call i128 @__asm_pxor(i128 %v0_184e0, i128 %v0_184e0)
  store i128 %v2_184e0, i128* %xmm0.global-to-local, align 8
  %v0_184e4 = load i64, i64* @rdi, align 8
  %v1_184e4 = add i64 %v0_184e4, 8
  %v2_184e4 = inttoptr i64 %v1_184e4 to i32*
  %v3_184e4 = load i32, i32* %v2_184e4, align 4
  %v4_184e4 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_184e4)
  store i128 %v4_184e4, i128* %xmm0.global-to-local, align 8
  ret i128 %v4_184e4
}

define i64 @"_ZN3org4luaj3vm220Varargs$ArrayVarargs3argEJPNS1_8LuaValueEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_184f0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_184f4 = trunc i64 %arg2 to i32
  %tmp246 = icmp slt i32 %v4_184f4, 1
  br i1 %tmp246, label %dec_label_pc_18538, label %dec_label_pc_184f8

dec_label_pc_184f8:                               ; preds = %dec_label_pc_184f0
  %v0_184f8 = load i64, i64* @rdi, align 8
  %v1_184f8 = add i64 %v0_184f8, 8
  %v2_184f8 = inttoptr i64 %v1_184f8 to i64*
  %v3_184f8 = load i64, i64* %v2_184f8, align 8
  store i64 %v3_184f8, i64* @rax, align 8
  %v1_184fc = add i64 %v3_184f8, 8
  %v2_184fc = inttoptr i64 %v1_184fc to i32*
  %v3_184fc = load i32, i32* %v2_184fc, align 4
  %v4_184fc = zext i32 %v3_184fc to i64
  store i64 %v4_184fc, i64* @rdx, align 8
  %v8_18501 = icmp slt i64 %v4_184fc, %arg2
  br i1 %v8_18501, label %dec_label_pc_18520, label %dec_label_pc_18503

dec_label_pc_18503:                               ; preds = %dec_label_pc_184f8
  %v2_18503 = add i32 %v4_184f4, -1
  %v17_18503 = zext i32 %v2_18503 to i64
  store i64 %v17_18503, i64* %rsi.global-to-local, align 8
  %v1_18506 = add i64 %v3_184f8, 16
  store i64 %v1_18506, i64* @rax, align 8
  %v9_1850a = icmp ult i32 %v2_18503, %v3_184fc
  %v1_1850c = icmp eq i1 %v9_1850a, false
  br i1 %v1_1850c, label %bb, label %dec_label_pc_1850e

bb:                                               ; preds = %dec_label_pc_18503
  %v2_1850c = call i64 @function_1854f()
  store i64 %v2_1850c, i64* @rax, align 8
  %v1_18511.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1850e

dec_label_pc_1850e:                               ; preds = %bb, %dec_label_pc_18503
  %v1_18511 = phi i64 [ %v1_18511.pre, %bb ], [ %v17_18503, %dec_label_pc_18503 ]
  %v0_18511 = phi i64 [ %v2_1850c, %bb ], [ %v1_18506, %dec_label_pc_18503 ]
  %v2_18511 = mul i64 %v1_18511, 8
  %v3_18511 = add i64 %v2_18511, %v0_18511
  %v4_18511 = inttoptr i64 %v3_18511 to i64*
  %v5_18511 = load i64, i64* %v4_18511, align 8
  store i64 %v5_18511, i64* @rax, align 8
  ret i64 %v5_18511

dec_label_pc_18520:                               ; preds = %dec_label_pc_184f8
  %v4_184ff = sub i32 %v4_184f4, %v3_184fc
  %v1_18520 = add i64 %v0_184f8, 16
  %v2_18520 = inttoptr i64 %v1_18520 to i64*
  %v3_18520 = load i64, i64* %v2_18520, align 8
  store i64 %v3_18520, i64* @rdi, align 8
  %v20_18524 = zext i32 %v4_184ff to i64
  store i64 %v20_18524, i64* %rsi.global-to-local, align 8
  %v1_18526 = inttoptr i64 %v3_18520 to i64*
  %v2_18526 = load i64, i64* %v1_18526, align 8
  store i64 %v2_18526, i64* @rax, align 8
  ret i64 %v2_18526

dec_label_pc_18538:                               ; preds = %dec_label_pc_184f0
  store i64 99647, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1854f() local_unnamed_addr {
dec_label_pc_1854f:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN3org4luaj3vm23lib11MathLib$pow4callEJddd"() local_unnamed_addr {
dec_label_pc_18560:
  %v0_1856d = load i64, i64* @rax, align 8
  ret i64 %v0_1856d
}

define i64 @_ZN3org4luaj3vm217NonTableMetatable8arraygetEJPNS1_8LuaValueEP6JArrayIS4_Ei(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18570:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_18570 = load i64, i64* @rdx, align 8
  %v1_18570 = trunc i64 %v0_18570 to i32
  %v3_18570 = add i64 %arg2, 8
  %v4_18570 = inttoptr i64 %v3_18570 to i32*
  %v5_18570 = load i32, i32* %v4_18570, align 4
  %v11_18570 = icmp ult i32 %v1_18570, %v5_18570
  %v1_18573 = icmp eq i1 %v11_18570, false
  br i1 %v1_18573, label %dec_label_pc_18581, label %dec_label_pc_18575

dec_label_pc_18575:                               ; preds = %dec_label_pc_18570
  %v1_18575 = add i64 %arg2, 16
  store i64 %v1_18575, i64* @rax, align 8
  %v2_1857c = mul i64 %v0_18570, 8
  %v3_1857c = add i64 %v1_18575, %v2_1857c
  %v4_1857c = inttoptr i64 %v3_1857c to i64*
  %v5_1857c = load i64, i64* %v4_1857c, align 8
  store i64 %v5_1857c, i64* @rax, align 8
  ret i64 %v5_1857c

dec_label_pc_18581:                               ; preds = %dec_label_pc_18570
  store i64 %v0_18570, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger4eq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18590:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_18597 = load i64, i64* @rdi, align 8
  %v1_18597 = add i64 %v0_18597, 8
  %v2_18597 = inttoptr i64 %v1_18597 to i32*
  %v3_18597 = load i32, i32* %v2_18597, align 4
  %v4_18597 = zext i32 %v3_18597 to i64
  store i64 %v4_18597, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaDouble4eq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_185b0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_185b7 = load i64, i64* @rdi, align 8
  %v1_185b7 = add i64 %v0_185b7, 8
  %v2_185b7 = inttoptr i64 %v1_185b7 to i64*
  %v3_185b7 = load i64, i64* %v2_185b7, align 8
  %v4_185b7 = call i128 @__asm_movsd(i64 %v3_185b7)
  %v0_185bc = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_185bc, i64* @rdi, align 8
  %v0_185c9 = load i64, i64* @rax, align 8
  ret i64 %v0_185c9
}

define i64 @_ZN3org4luaj3vm29LuaString4eq_bEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_185d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_185d7 = load i64, i64* @rdi, align 8
  store i64 %v0_185d7, i64* @rdx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @_ZN3org4luaj3vm29LuaDouble5tointEJiv(i64 %arg1) local_unnamed_addr {
dec_label_pc_185f0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_185f0 = add i64 %arg1, 8
  %v2_185f0 = inttoptr i64 %v1_185f0 to i64*
  %v3_185f0 = load i64, i64* %v2_185f0, align 8
  %v4_185f0 = call i128 @__asm_movsd(i64 %v3_185f0)
  store i64 4294967295, i64* @rax, align 8
  %v1_185fa = load i64, i64* inttoptr (i64 99842 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_185f0, i64 %v1_185fa)
  %v0_1861d = load i64, i64* @rax, align 8
  ret i64 %v0_1861d
}

define i64 @_ZN3org4luaj3vm29LuaDouble6tolongEJxv(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18630:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_18630 = add i64 %arg1, 8
  %v2_18630 = inttoptr i64 %v1_18630 to i64*
  %v3_18630 = load i64, i64* %v2_18630, align 8
  %v4_18630 = call i128 @__asm_movsd(i64 %v3_18630)
  store i64 9223372036854775807, i64* @rax, align 8
  %v1_1863f = load i64, i64* inttoptr (i64 99911 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_18630, i64 %v1_1863f)
  %v0_18647 = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_18647, label %dec_label_pc_18650, label %dec_label_pc_18649

dec_label_pc_18649:                               ; preds = %dec_label_pc_18630
  %v1_18647 = load i64, i64* @rax, align 8
  ret i64 %v1_18647

dec_label_pc_18650:                               ; preds = %dec_label_pc_18630
  %v0_18650 = load i64, i64* inttoptr (i64 99928 to i64*), align 8
  %v1_18650 = call i128 @__asm_movsd(i64 %v0_18650)
  call void @__asm_ucomisd(i128 %v1_18650, i128 %v4_18630)
  %v0_1865c = load i1, i1* %cf.global-to-local, align 1
  %v1_1865c = icmp eq i1 %v0_1865c, false
  br i1 %v1_1865c, label %dec_label_pc_18670, label %dec_label_pc_1865e

dec_label_pc_1865e:                               ; preds = %dec_label_pc_18650
  %v2_1865c = load i64, i64* @rax, align 8
  ret i64 %v2_1865c

dec_label_pc_18670:                               ; preds = %dec_label_pc_18650
  store i64 -9223372036854775808, i64* @rax, align 8
  ret i64 -9223372036854775808
}

define i64 @_ZN3org4luaj3vm28LuaValue4nextEJPNS1_7VarargsEPS2_(i64 %arg1) local_unnamed_addr {
dec_label_pc_18680:
  store i64 %arg1, i64* @rdi, align 8
  %v2_18684 = load i64, i64* @rdi, align 8
  store i64 %v2_18684, i64* @rax, align 8
  ret i64 %v2_18684
}

define i64 @_ZN3org4luaj3vm28LuaValue2ltEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_186a0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_186a4 = load i64, i64* @rdi, align 8
  store i64 %v2_186a4, i64* @rax, align 8
  ret i64 %v2_186a4
}

define i64 @_ZN3org4luaj3vm28LuaValue4lteqEJPS2_i(i64 %arg1) local_unnamed_addr {
dec_label_pc_186c0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_186c4 = load i64, i64* @rdi, align 8
  store i64 %v2_186c4, i64* @rax, align 8
  ret i64 %v2_186c4
}

define i64 @_ZN3org4luaj3vm28LuaValue4lt_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_186e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue4lt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_18700:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6lteq_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_18720:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6lteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_18740:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue4gt_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_18760:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue4gt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_18780:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6lteq_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_187a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString4gt_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_187c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString4gt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_187e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString4lt_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_18800:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString4lt_bEJbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_18820:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6lteq_bEJbi(i64 %arg1) local_unnamed_addr {
dec_label_pc_18840:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue2gtEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_18860:
  store i64 %arg1, i64* @rdi, align 8
  %v2_18864 = load i64, i64* @rdi, align 8
  store i64 %v2_18864, i64* @rax, align 8
  ret i64 %v2_18864
}

define i64 @_ZN3org4luaj3vm28LuaValue2ltEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_18880:
  store i64 %arg1, i64* @rdi, align 8
  %v2_18884 = load i64, i64* @rdi, align 8
  store i64 %v2_18884, i64* @rax, align 8
  ret i64 %v2_18884
}

define i64 @_ZN3org4luaj3vm28LuaValue4lteqEJPS2_d(i64 %arg1) local_unnamed_addr {
dec_label_pc_188a0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_188a4 = load i64, i64* @rdi, align 8
  store i64 %v2_188a4, i64* @rax, align 8
  ret i64 %v2_188a4
}

define i64 @"_ZN3org4luaj3vm222WeakTable$WeakUserdata11strongvalueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_188c0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_188c6 = load i64, i64* @rdi, align 8
  store i64 %v0_188c6, i64* @rbp, align 8
  %v1_188cd = add i64 %v0_188c6, 8
  %v2_188cd = inttoptr i64 %v1_188cd to i64*
  %v3_188cd = load i64, i64* %v2_188cd, align 8
  store i64 %v3_188cd, i64* @rdi, align 8
  %v1_188d1 = inttoptr i64 %v3_188cd to i64*
  %v2_188d1 = load i64, i64* %v1_188d1, align 8
  store i64 %v2_188d1, i64* @rax, align 8
  %v1_188d7 = icmp eq i64 %v2_188d1, 0
  br i1 %v1_188d7, label %bb, label %dec_label_pc_188dc

bb:                                               ; preds = %dec_label_pc_188c0
  %v1_188da = call i64 @function_18900()
  store i64 %v1_188da, i64* @rax, align 8
  br label %dec_label_pc_188dc

dec_label_pc_188dc:                               ; preds = %bb, %dec_label_pc_188c0
  store i64 100579, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_18900() local_unnamed_addr {
dec_label_pc_18900:
  %v0_18900 = load i64, i64* @rbp, align 8
  %v1_18900 = add i64 %v0_18900, 16
  %v2_18900 = inttoptr i64 %v1_18900 to i64*
  %v3_18900 = load i64, i64* %v2_18900, align 8
  store i64 %v3_18900, i64* @rdi, align 8
  %v1_18904 = inttoptr i64 %v3_18900 to i64*
  %v2_18904 = load i64, i64* %v1_18904, align 8
  store i64 %v2_18904, i64* @rax, align 8
  %v1_1890a = icmp eq i64 %v2_18904, 0
  br i1 %v1_1890a, label %bb, label %dec_label_pc_18912

bb:                                               ; preds = %dec_label_pc_18900
  %v1_18910 = call i64 @function_18973()
  store i64 %v1_18910, i64* @rax, align 8
  br label %dec_label_pc_18912

dec_label_pc_18912:                               ; preds = %bb, %dec_label_pc_18900
  store i64 100633, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 100651, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_18973() local_unnamed_addr {
dec_label_pc_18973:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer7reallocEJvii(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18980:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_18980 = load i64, i64* @rdi, align 8
  %v1_18980 = add i64 %v0_18980, 8
  %v2_18980 = inttoptr i64 %v1_18980 to i64*
  %v3_18980 = load i64, i64* %v2_18980, align 8
  store i64 %v3_18980, i64* @rax, align 8
  %v0_18984 = load i64, i64* %rsi.global-to-local, align 8
  %v1_18984 = trunc i64 %v0_18984 to i32
  %v3_18984 = add i64 %v3_18980, 8
  %v4_18984 = inttoptr i64 %v3_18984 to i32*
  %v5_18984 = load i32, i32* %v4_18984, align 4
  %v16_18984 = icmp eq i32 %v1_18984, %v5_18984
  br i1 %v16_18984, label %bb, label %dec_label_pc_18989

bb:                                               ; preds = %dec_label_pc_18980
  %v1_18987 = call i64 @function_189c8()
  store i64 %v1_18987, i64* @rax, align 8
  %v0_1898f.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_18989

dec_label_pc_18989:                               ; preds = %bb, %dec_label_pc_18980
  %v0_1898f = phi i64 [ %v0_1898f.pre, %bb ], [ %v0_18980, %dec_label_pc_18980 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_1898f, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_189c8() local_unnamed_addr {
dec_label_pc_189c8:
  %v0_189c8 = load i64, i64* @rax, align 8
  ret i64 %v0_189c8
}

define i64 @"_ZN3org4luaj3vm222Globals$BufferedStreamC1EPN4java2io11InputStreamE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_189d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_189d5 = load i64, i64* @rdi, align 8
  store i64 %v0_189d5, i64* @rbx, align 8
  %v17_189d8 = load i64, i64* @rax, align 8
  ret i64 %v17_189d8
}

define i64 @"_ZN3org4luaj3vm222Globals$BufferedStreamC1EiPN4java2io11InputStreamE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18a20:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_18a2a = load i64, i64* @rdi, align 8
  store i64 %v0_18a2a, i64* @rbx, align 8
  %v0_18a2d = load i64, i64* @rax, align 8
  ret i64 %v0_18a2d
}

define i64 @"_ZN3org4luaj3vm222WeakTable$WeakUserdataC1EPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18a60:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_18a67 = load i64, i64* @rax, align 8
  ret i64 %v1_18a67
}

define i64 @_ZN3org4luaj3vm26BufferC1Ev(i64 %arg1) local_unnamed_addr {
dec_label_pc_18ad0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_18ad1 = load i64, i64* @rdi, align 8
  store i64 %v0_18ad1, i64* @rbx, align 8
  %v1_18ad1 = load i64, i64* @rax, align 8
  ret i64 %v1_18ad1
}

define i64 @"_ZN3org4luaj3vm218Globals$UTF8StreamC1EPN4java2io6ReaderE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18b10:
  store i64 %arg1, i64* @rdi, align 8
  %v0_18b15 = load i64, i64* @rdi, align 8
  store i64 %v0_18b15, i64* @rbx, align 8
  %v17_18b18 = load i64, i64* @rax, align 8
  ret i64 %v17_18b18
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState4dumpEJiPNS1_9PrototypeEPN4java2io12OutputStreamEb(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18b70:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 101251, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib9checkfileEJPNS2_10IoLib$FileEPNS1_8LuaValueE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_18c10:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_18c1a = load i64, i64* @rdi, align 8
  store i64 %v0_18c1a, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_18c58() local_unnamed_addr {
dec_label_pc_18c58:
  store i64 1, i64* @rdi, align 8
  %v0_18c6e = load i64, i64* @rax, align 8
  ret i64 %v0_18c6e
}

define i64 @_ZN3org4luaj3vm23lib5IoLib8_io_typeEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_18c70:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_18cc0(i64 %arg1) local_unnamed_addr {
dec_label_pc_18cc0:
  %v0_18cc0 = load i64, i64* inttoptr (i64 101575 to i64*), align 8
  store i64 %v0_18cc0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_18cc0
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib10findsetregEJiPNS1_9PrototypeEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18cd0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 101602, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_18ce6 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_18ce6, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_18dc6() local_unnamed_addr {
dec_label_pc_18dc6:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_18dfe(i32 %arg1) local_unnamed_addr {
dec_label_pc_18dfe:
  %v4_18dfe = zext i32 %arg1 to i64
  store i64 %v4_18dfe, i64* @rax, align 8
  ret i64 %v4_18dfe
}

define i64 @function_18e48() local_unnamed_addr {
dec_label_pc_18e48:
  %v0_18e51 = load i64, i64* @rax, align 8
  ret i64 %v0_18e51
}

define i64 @function_18e60(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_18e60:
  store i64 %arg1, i64* @rdi, align 8
  %v1_18e60 = add i64 %arg2, 2
  store i64 %v1_18e60, i64* @rax, align 8
  %v5_18e67 = sext i32 %arg3 to i64
  %v6_18e67 = icmp slt i64 %v5_18e67, %v1_18e60
  br i1 %v6_18e67, label %dec_label_pc_18e69, label %bb

bb:                                               ; preds = %dec_label_pc_18e60
  %v7_18e67 = call i64 @function_18e48()
  store i64 %v7_18e67, i64* @rax, align 8
  br label %dec_label_pc_18e69

dec_label_pc_18e69:                               ; preds = %dec_label_pc_18e60, %bb
  %v0_18e69 = phi i64 [ %v1_18e60, %dec_label_pc_18e60 ], [ %v7_18e67, %bb ]
  ret i64 %v0_18e69
}

define i64 @function_18e70() local_unnamed_addr {
dec_label_pc_18e70:
  %tmp230 = call i64 @__decompiler_undefined_function_0()
  %v0_18e76 = load i64, i64* @rbx, align 8
  %v2_18e76 = and i64 %v0_18e76, 8372224
  store i64 %v2_18e76, i64* @rbx, align 8
  ret i64 %tmp230
}

define i64 @function_18e90(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_18e90:
  store i64 %arg1, i64* @rdi, align 8
  %v6_18e90 = sext i32 %arg3 to i64
  %v7_18e94 = icmp slt i64 %v6_18e90, %arg2
  br i1 %v7_18e94, label %dec_label_pc_18e90.dec_label_pc_18e96_crit_edge, label %bb

dec_label_pc_18e90.dec_label_pc_18e96_crit_edge:  ; preds = %dec_label_pc_18e90
  %v0_18e96.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_18e96

bb:                                               ; preds = %dec_label_pc_18e90
  %v8_18e94 = call i64 @function_18e48()
  store i64 %v8_18e94, i64* @rax, align 8
  br label %dec_label_pc_18e96

dec_label_pc_18e96:                               ; preds = %dec_label_pc_18e90.dec_label_pc_18e96_crit_edge, %bb
  %v0_18e96 = phi i64 [ %v0_18e96.pre, %dec_label_pc_18e90.dec_label_pc_18e96_crit_edge ], [ %v8_18e94, %bb ]
  ret i64 %v0_18e96
}

define i64 @function_18e9b() local_unnamed_addr {
dec_label_pc_18e9b:
  %v1_18ea3 = call i64 @function_18dfe(i32 -1)
  store i64 %v1_18ea3, i64* @rax, align 8
  ret i64 %v1_18ea3
}

define i64 @function_18ea8() local_unnamed_addr {
dec_label_pc_18ea8:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib8DebugLib10getobjnameEJPNS2_17DebugLib$NameWhatEPNS1_9PrototypeEii"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_18ec0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_18ed5 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_18ed5, i64* @rbx, align 8
  %v1_18ed5 = load i64, i64* @rax, align 8
  ret i64 %v1_18ed5
}

define i64 @function_18f12() local_unnamed_addr {
dec_label_pc_18f12:
  %v0_18f12 = load i64, i64* @rax, align 8
  ret i64 %v0_18f12
}

define i64 @function_18f1d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_18f1d:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_0 = alloca i64, align 8
  store i64 %arg5, i64* %stack_var_0, align 8
  %v2_18f1d = load i8, i8* bitcast (i64* @rbx to i8*), align 8
  %v3_18f1d = load i64, i64* @rbx, align 8
  %v4_18f1d = udiv i64 %v3_18f1d, 256
  %v5_18f1d = trunc i64 %v4_18f1d to i8
  %v6_18f1d = load i1, i1* %cf.global-to-local, align 1
  %v7_18f1d = zext i1 %v6_18f1d to i8
  %v8_18f1d = add i8 %v5_18f1d, %v2_18f1d
  %v9_18f1d = add i8 %v8_18f1d, %v7_18f1d
  %v27_18f1d = icmp ule i8 %v9_18f1d, %v2_18f1d
  %v28_18f1d = icmp ult i8 %v8_18f1d, %v2_18f1d
  %v29_18f1d = select i1 %v6_18f1d, i1 %v27_18f1d, i1 %v28_18f1d
  store i1 %v29_18f1d, i1* %cf.global-to-local, align 1
  %v31_18f1d = inttoptr i64 %v3_18f1d to i8*
  store i8 %v9_18f1d, i8* %v31_18f1d, align 1
  %v2_18f1f = load i64, i64* %stack_var_0, align 8
  store i64 %v2_18f1f, i64* @rax, align 8
  %v1_18f20 = add i64 %v2_18f1f, -115
  %v2_18f20 = inttoptr i64 %v1_18f20 to i8*
  %v3_18f20 = load i8, i8* %v2_18f20, align 1
  %v4_18f20 = load i64, i64* @rcx, align 8
  %v5_18f20 = trunc i64 %v4_18f20 to i8
  %v6_18f20 = or i8 %v5_18f20, %v3_18f20
  store i8 %v6_18f20, i8* %v2_18f20, align 1
  %v0_18f23 = load i64, i64* @rax, align 8
  store i64 %v0_18f23, i64* %stack_var_0, align 8
  %v11_18f24 = or i64 %v0_18f23, 15
  store i64 %v11_18f24, i64* @rax, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v11_18f26 = load i64, i64* @rdx, align 8
  %v12_18f26 = add i64 %v11_18f26, 3
  %v13_18f26 = inttoptr i64 %v12_18f26 to i32*
  store i32 0, i32* %v13_18f26, align 4
  %v0_18f2a = load i64, i64* @rax, align 8
  %v1_18f2a = add i64 %v0_18f2a, 99
  %v2_18f2a = inttoptr i64 %v1_18f2a to i8*
  %v3_18f2a = load i8, i8* %v2_18f2a, align 1
  %v4_18f2a = load i64, i64* @rcx, align 8
  %v5_18f2a = trunc i64 %v4_18f2a to i8
  %v6_18f2a = add i8 %v5_18f2a, %v3_18f2a
  %v11_18f2a = icmp ult i8 %v6_18f2a, %v3_18f2a
  store i1 %v11_18f2a, i1* %cf.global-to-local, align 1
  store i8 %v6_18f2a, i8* %v2_18f2a, align 1
  %v0_18f2d = load i64, i64* @rax, align 8
  ret i64 %v0_18f2d
}

define i64 @function_19073(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_19073:
  store i64 0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_19200() local_unnamed_addr {
dec_label_pc_19200:
  %v0_19207 = load i64, i64* @rax, align 8
  ret i64 %v0_19207
}

define i64 @function_19210() local_unnamed_addr {
dec_label_pc_19210:
  %v0_19217 = load i64, i64* @rax, align 8
  ret i64 %v0_19217
}

define i64 @function_19220() local_unnamed_addr {
dec_label_pc_19220:
  %tmp228 = call i64 @__decompiler_undefined_function_0()
  %v0_19227 = load i64, i64* @rbx, align 8
  store i64 %v0_19227, i64* @rdx, align 8
  ret i64 %tmp228
}

define i64 @function_19240() local_unnamed_addr {
dec_label_pc_19240:
  %rbp.global-to-local = alloca i64, align 8
  store i64 102983, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_19249 = load i64, i64* %rbp.global-to-local, align 8
  %v1_19249 = trunc i64 %v0_19249 to i32
  %v3_19249 = udiv i32 %v1_19249, 16384
  %v10_19249 = zext i32 %v3_19249 to i64
  store i64 %v10_19249, i64* %rbp.global-to-local, align 8
  ret i64 0
}

define i64 @function_1928d() local_unnamed_addr {
dec_label_pc_1928d:
  %v0_1928d = load i64, i64* @rbx, align 8
  store i64 %v0_1928d, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_19296() local_unnamed_addr {
dec_label_pc_19296:
  %rbp.global-to-local = alloca i64, align 8
  %v0_19296 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_19296, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib8DebugLib11getfuncnameEJPNS2_17DebugLib$NameWhatEPNS2_18DebugLib$CallFrameE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_192a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 103086, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_19328() local_unnamed_addr {
dec_label_pc_19328:
  %rbp.global-to-local = alloca i64, align 8
  store i64 103215, i64* @rdi, align 8
  %v0_19334 = load i64, i64* %rbp.global-to-local, align 8
  %v1_19334 = add i64 %v0_19334, 8
  %v2_19334 = inttoptr i64 %v1_19334 to i64*
  %v3_19334 = load i64, i64* %v2_19334, align 8
  store i64 %v3_19334, i64* @rdi, align 8
  %v0_19338 = load i64, i64* @rax, align 8
  store i64 %v0_19338, i64* @rbx, align 8
  %v1_1933b = inttoptr i64 %v3_19334 to i64*
  %v2_1933b = load i64, i64* %v1_1933b, align 8
  store i64 %v2_1933b, i64* @rax, align 8
  %v0_19344 = load i64, i64* inttoptr (i64 103243 to i64*), align 8
  store i64 %v0_19344, i64* %rbp.global-to-local, align 8
  store i64 %v0_19338, i64* @rdi, align 8
  ret i64 %v2_1933b
}

define i64 @function_19361(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_19361:
  store i64 %arg1, i64* @rbx, align 8
  %v0_19365 = load i64, i64* @rax, align 8
  ret i64 %v0_19365
}

define i64 @function_19380() local_unnamed_addr {
dec_label_pc_19380:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_193d0() local_unnamed_addr {
dec_label_pc_193d0:
  %v0_193d7 = call i64 @function_19380()
  store i64 %v0_193d7, i64* @rax, align 8
  ret i64 %v0_193d7
}

define i64 @function_193df(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_193df:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_193df = load i64, i64* @rax, align 8
  %v1_193df = add i64 %v0_193df, -117
  %v2_193df = inttoptr i64 %v1_193df to i8*
  %v3_193df = load i8, i8* %v2_193df, align 1
  %v5_193df = trunc i64 %arg4 to i8
  %v6_193df = add i8 %v3_193df, %v5_193df
  store i8 %v6_193df, i8* %v2_193df, align 1
  %v0_193e7 = call i64 @function_19380()
  store i64 %v0_193e7, i64* @rax, align 8
  ret i64 %v0_193e7
}

define i64 @function_193f0() local_unnamed_addr {
dec_label_pc_193f0:
  %v0_193f7 = call i64 @function_19380()
  store i64 %v0_193f7, i64* @rax, align 8
  ret i64 %v0_193f7
}

define i64 @function_193ff(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_193ff:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_193ff = load i64, i64* @rax, align 8
  %v1_193ff = add i64 %v0_193ff, -117
  %v2_193ff = inttoptr i64 %v1_193ff to i8*
  %v3_193ff = load i8, i8* %v2_193ff, align 1
  %v5_193ff = trunc i64 %arg4 to i8
  %v6_193ff = add i8 %v3_193ff, %v5_193ff
  store i8 %v6_193ff, i8* %v2_193ff, align 1
  %v0_19407 = call i64 @function_19380()
  store i64 %v0_19407, i64* @rax, align 8
  ret i64 %v0_19407
}

define i64 @function_19410() local_unnamed_addr {
dec_label_pc_19410:
  %v0_19417 = call i64 @function_19380()
  store i64 %v0_19417, i64* @rax, align 8
  ret i64 %v0_19417
}

define i64 @function_1941f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1941f:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1941f = load i64, i64* @rax, align 8
  %v1_1941f = add i64 %v0_1941f, -117
  %v2_1941f = inttoptr i64 %v1_1941f to i8*
  %v3_1941f = load i8, i8* %v2_1941f, align 1
  %v5_1941f = trunc i64 %arg4 to i8
  %v6_1941f = add i8 %v3_1941f, %v5_1941f
  store i8 %v6_1941f, i8* %v2_1941f, align 1
  %v0_19427 = call i64 @function_19380()
  store i64 %v0_19427, i64* @rax, align 8
  ret i64 %v0_19427
}

define i64 @function_19430() local_unnamed_addr {
dec_label_pc_19430:
  %v0_19437 = call i64 @function_19380()
  store i64 %v0_19437, i64* @rax, align 8
  ret i64 %v0_19437
}

define i64 @function_1943f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1943f:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1943f = load i64, i64* @rax, align 8
  %v1_1943f = add i64 %v0_1943f, -117
  %v2_1943f = inttoptr i64 %v1_1943f to i8*
  %v3_1943f = load i8, i8* %v2_1943f, align 1
  %v5_1943f = trunc i64 %arg4 to i8
  %v6_1943f = add i8 %v3_1943f, %v5_1943f
  store i8 %v6_1943f, i8* %v2_1943f, align 1
  %v0_19447 = call i64 @function_19380()
  store i64 %v0_19447, i64* @rax, align 8
  ret i64 %v0_19447
}

define i64 @function_19450() local_unnamed_addr {
dec_label_pc_19450:
  %v0_19457 = call i64 @function_19380()
  store i64 %v0_19457, i64* @rax, align 8
  ret i64 %v0_19457
}

define i64 @function_1945f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1945f:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1945f = load i64, i64* @rax, align 8
  %v1_1945f = add i64 %v0_1945f, -117
  %v2_1945f = inttoptr i64 %v1_1945f to i8*
  %v3_1945f = load i8, i8* %v2_1945f, align 1
  %v5_1945f = trunc i64 %arg4 to i8
  %v6_1945f = add i8 %v3_1945f, %v5_1945f
  store i8 %v6_1945f, i8* %v2_1945f, align 1
  %v0_19467 = call i64 @function_19380()
  store i64 %v0_19467, i64* @rax, align 8
  ret i64 %v0_19467
}

define i64 @function_19470() local_unnamed_addr {
dec_label_pc_19470:
  %v0_19477 = call i64 @function_19380()
  store i64 %v0_19477, i64* @rax, align 8
  ret i64 %v0_19477
}

define i64 @function_1947f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1947f:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1947f = load i64, i64* @rax, align 8
  %v1_1947f = add i64 %v0_1947f, -117
  %v2_1947f = inttoptr i64 %v1_1947f to i8*
  %v3_1947f = load i8, i8* %v2_1947f, align 1
  %v5_1947f = trunc i64 %arg4 to i8
  %v6_1947f = add i8 %v3_1947f, %v5_1947f
  store i8 %v6_1947f, i8* %v2_1947f, align 1
  %v0_19487 = call i64 @function_19380()
  store i64 %v0_19487, i64* @rax, align 8
  ret i64 %v0_19487
}

define i64 @function_194b7(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_194b7:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_194b7 = load i64, i64* @rax, align 8
  %v1_194b7 = add i64 %v0_194b7, -117
  %v2_194b7 = inttoptr i64 %v1_194b7 to i8*
  %v3_194b7 = load i8, i8* %v2_194b7, align 1
  %v5_194b7 = trunc i64 %arg4 to i8
  %v6_194b7 = add i8 %v3_194b7, %v5_194b7
  store i8 %v6_194b7, i8* %v2_194b7, align 1
  %v0_194bf = call i64 @function_19380()
  store i64 %v0_194bf, i64* @rax, align 8
  ret i64 %v0_194bf
}

define i64 @function_194c8() local_unnamed_addr {
dec_label_pc_194c8:
  store i64 0, i64* @rax, align 8
  %v3_194ca = call i64 @function_19361(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_194ca, i64* @rax, align 8
  ret i64 %v3_194ca
}

define i64 @function_194cf() local_unnamed_addr {
dec_label_pc_194cf:
  %rbp.global-to-local = alloca i64, align 8
  %v0_194cf = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_194cf, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallStack10auxgetinfoEJPNS2_18DebugLib$DebugInfoEPN4java4lang6StringEPNS1_11LuaFunctionEPNS2_18DebugLib$CallFrameE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_194e0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_195c8(i64 %arg1) local_unnamed_addr {
dec_label_pc_195c8:
  %r12.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_195d4 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_195d4, i64* @rax, align 8
  ret i64 %v0_195d4
}

define i64 @function_195f0(i64 %arg1) local_unnamed_addr {
dec_label_pc_195f0:
  %r12.global-to-local = alloca i64, align 8
  %v2_195f0 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_195f0, i64* @rax, align 8
  %v1_195f4 = add i64 %v2_195f0, 64
  %v2_195f4 = inttoptr i64 %v1_195f4 to i64*
  %v3_195f4 = load i64, i64* %v2_195f4, align 8
  store i64 %v3_195f4, i64* @rax, align 8
  store i64 %v2_195f0, i64* @rdi, align 8
  ret i64 %v3_195f4
}

define i64 @function_19608(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_19608:
  %r12.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_19608 = load i64, i64* %r15.global-to-local, align 8
  %v1_19608 = icmp eq i64 %v0_19608, 0
  br i1 %v1_19608, label %dec_label_pc_196c8, label %dec_label_pc_19611

dec_label_pc_19611:                               ; preds = %dec_label_pc_19608
  %v1_19611 = add i64 %v0_19608, 8
  %v2_19611 = inttoptr i64 %v1_19611 to i64*
  %v3_19611 = load i64, i64* %v2_19611, align 8
  store i64 %v3_19611, i64* @rdi, align 8
  %v1_19615 = inttoptr i64 %v3_19611 to i64*
  %v2_19615 = load i64, i64* %v1_19615, align 8
  store i64 %v2_19615, i64* @rax, align 8
  %v1_19618 = add i64 %v2_19615, 584
  %v2_19618 = inttoptr i64 %v1_19618 to i64*
  %v3_19618 = load i64, i64* %v2_19618, align 8
  store i64 %v3_19618, i64* @rax, align 8
  %v4_19621 = trunc i64 %v3_19618 to i8
  %v5_19621 = icmp eq i8 %v4_19621, 0
  br i1 %v5_19621, label %dec_label_pc_196c8, label %dec_label_pc_19629

dec_label_pc_19629:                               ; preds = %dec_label_pc_19611
  store i64 %v0_19608, i64* @rax, align 8
  %v1_1962c = add i64 %v0_19608, 120
  %v2_1962c = inttoptr i64 %v1_1962c to i64*
  %v3_1962c = load i64, i64* %v2_1962c, align 8
  store i64 %v3_1962c, i64* @rax, align 8
  store i64 %v0_19608, i64* @rdi, align 8
  %phitmp = trunc i64 %v3_1962c to i32
  br label %dec_label_pc_19635

dec_label_pc_19635:                               ; preds = %dec_label_pc_196c8, %dec_label_pc_19629
  %v0_19635 = phi i32 [ -1, %dec_label_pc_196c8 ], [ %phitmp, %dec_label_pc_19629 ]
  %v2_19635 = load i64, i64* %r12.global-to-local, align 8
  %v3_19635 = add i64 %v2_19635, 40
  %v4_19635 = inttoptr i64 %v3_19635 to i32*
  store i32 %v0_19635, i32* %v4_19635, align 4
  %v0_1963a = load i64, i64* @rax, align 8
  ret i64 %v0_1963a

dec_label_pc_196c8:                               ; preds = %dec_label_pc_19611, %dec_label_pc_19608
  store i64 4294967295, i64* @rax, align 8
  br label %dec_label_pc_19635
}

define i64 @function_196d8() local_unnamed_addr {
dec_label_pc_196d8:
  %r12.global-to-local = alloca i64, align 8
  %v0_196d8 = load i64, i64* inttoptr (i64 104159 to i64*), align 8
  store i64 %v0_196d8, i64* @rax, align 8
  %v1_196df = load i64, i64* %r12.global-to-local, align 8
  %v2_196df = add i64 %v1_196df, 16
  %v3_196df = inttoptr i64 %v2_196df to i64*
  store i64 %v0_196d8, i64* %v3_196df, align 8
  %v0_196e4 = load i64, i64* %r12.global-to-local, align 8
  %v1_196e4 = add i64 %v0_196e4, 8
  %v2_196e4 = inttoptr i64 %v1_196e4 to i64*
  store i64 0, i64* %v2_196e4, align 8
  %v0_196ed = load i64, i64* @rax, align 8
  ret i64 %v0_196ed
}

define i64 @function_196f4(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_196f4:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_196f6 = load i64, i64* @rax, align 8
  %v1_196f6 = add i64 %v0_196f6, -119
  %v2_196f6 = inttoptr i64 %v1_196f6 to i8*
  %v3_196f6 = load i8, i8* %v2_196f6, align 1
  %v5_196f6 = trunc i64 %arg4 to i8
  %v6_196f6 = or i8 %v3_196f6, %v5_196f6
  store i8 %v6_196f6, i8* %v2_196f6, align 1
  %v0_196f9 = load i64, i64* @rax, align 8
  ret i64 %v0_196f9
}

define i64 @function_19709() local_unnamed_addr {
dec_label_pc_19709:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals16compilePrototypeEJPNS1_9PrototypeEPN4java2io6ReaderEPNS5_4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_19710:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 104226, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals4loadEJPNS1_8LuaValueEPN4java2io6ReaderEPNS5_4lang6StringEPNS1_8LuaTableE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_197a0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 104372, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals4loadEJPNS1_8LuaValueEPN4java2io6ReaderEPNS5_4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_19840:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 104530, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals4loadEJPNS1_8LuaValueEPN4java4lang6StringES8_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_198e0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 104688, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_19945() local_unnamed_addr {
dec_label_pc_19945:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals4loadEJPNS1_8LuaValueEPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_19950:
  store i64 %arg1, i64* @rdi, align 8
  store i64 104797, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_199a6() local_unnamed_addr {
dec_label_pc_199a6:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals4loadEJPNS1_8LuaValueEPN4java4lang6StringES8_PNS1_8LuaTableE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_199b0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 104899, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_19a17() local_unnamed_addr {
dec_label_pc_19a17:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaThreadC1EPNS1_7GlobalsE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_19a20:
  store i64 %arg1, i64* @rdi, align 8
  %v17_19a2c = load i64, i64* @rax, align 8
  ret i64 %v17_19a2c
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState11end_captureEJiii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_19ac0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_19ac0 = load i64, i64* %r12.global-to-local, align 8
  %v0_19ac2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_19ac3 = load i64, i64* @rbx, align 8
  store i64 %v0_19ac3, i64* %stack_var_-24, align 8
  %v0_19ac4 = load i64, i64* @rdi, align 8
  %v1_19ac4 = add i64 %v0_19ac4, 32
  %v2_19ac4 = inttoptr i64 %v1_19ac4 to i32*
  %v3_19ac4 = load i32, i32* %v2_19ac4, align 4
  %v2_19ac7 = add i32 %v3_19ac4, -1
  %v12_19ac7 = icmp slt i32 %v2_19ac7, 0
  %v17_19ac7 = zext i32 %v2_19ac7 to i64
  store i64 %v17_19ac7, i64* @rbx, align 8
  br i1 %v12_19ac7, label %dec_label_pc_19ac0.dec_label_pc_19b44_crit_edge, label %dec_label_pc_19acc

dec_label_pc_19ac0.dec_label_pc_19b44_crit_edge:  ; preds = %dec_label_pc_19ac0
  %v0_19b4b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_19b44

dec_label_pc_19acc:                               ; preds = %dec_label_pc_19ac0
  %v1_19acc = add i64 %v0_19ac4, 48
  %v2_19acc = inttoptr i64 %v1_19acc to i64*
  %v3_19acc = load i64, i64* %v2_19acc, align 8
  store i64 %v3_19acc, i64* @rax, align 8
  store i64 %v0_19ac4, i64* %r12.global-to-local, align 8
  %v1_19ad3 = add i64 %v3_19acc, 8
  %v2_19ad3 = inttoptr i64 %v1_19ad3 to i32*
  %v3_19ad3 = load i32, i32* %v2_19ad3, align 4
  %v4_19ad3 = zext i32 %v3_19ad3 to i64
  store i64 %v4_19ad3, i64* @rdi, align 8
  %v1_19ad6 = add i64 %v3_19acc, 12
  store i64 %v1_19ad6, i64* @rcx, align 8
  %v9_19ada = icmp ult i32 %v2_19ac7, %v3_19ad3
  br i1 %v9_19ada, label %dec_label_pc_19aec, label %dec_label_pc_19b3b

dec_label_pc_19ae0:                               ; preds = %dec_label_pc_19aec
  %v2_19ae0 = add nuw nsw i64 %v0_19ae0, 4294967295
  %v6_19ae0 = icmp eq i64 %v0_19ae0, 0
  %v17_19ae0 = and i64 %v2_19ae0, 4294967295
  store i64 %v17_19ae0, i64* @rbx, align 8
  br i1 %v6_19ae0, label %dec_label_pc_19b44.loopexit, label %dec_label_pc_19ae8

dec_label_pc_19ae8:                               ; preds = %dec_label_pc_19ae0
  %v3_19ae8 = trunc i64 %v2_19ae0 to i32
  %tmp277 = icmp ugt i32 %v3_19ad3, %v3_19ae8
  br i1 %tmp277, label %dec_label_pc_19aec, label %dec_label_pc_19b3b.loopexit

dec_label_pc_19aec:                               ; preds = %dec_label_pc_19ae8, %dec_label_pc_19acc
  %v0_19ae0 = phi i64 [ %v17_19ae0, %dec_label_pc_19ae8 ], [ %v17_19ac7, %dec_label_pc_19acc ]
  %v2_19aef = mul nuw nsw i64 %v0_19ae0, 4
  store i64 %v2_19aef, i64* %rbp.global-to-local, align 8
  %v3_19af3 = add i64 %v2_19aef, %v1_19ad6
  store i64 %v3_19af3, i64* @rax, align 8
  %v1_19af7 = inttoptr i64 %v3_19af3 to i32*
  %v2_19af7 = load i32, i32* %v1_19af7, align 4
  %v12_19af7 = icmp eq i32 %v2_19af7, -1
  %v1_19afa = icmp eq i1 %v12_19af7, false
  br i1 %v1_19afa, label %dec_label_pc_19ae0, label %dec_label_pc_19afc

dec_label_pc_19afc:                               ; preds = %dec_label_pc_19aec
  %v1_19afc = add i64 %v0_19ac4, 40
  %v2_19afc = inttoptr i64 %v1_19afc to i64*
  %v3_19afc = load i64, i64* %v2_19afc, align 8
  store i64 %v3_19afc, i64* @rcx, align 8
  %v1_19b01 = add i64 %v3_19afc, 8
  %v2_19b01 = inttoptr i64 %v1_19b01 to i32*
  %v3_19b01 = load i32, i32* %v2_19b01, align 4
  %v5_19b01 = trunc i64 %v0_19ae0 to i32
  %tmp278 = icmp ugt i32 %v3_19b01, %v5_19b01
  br i1 %tmp278, label %dec_label_pc_19b06, label %dec_label_pc_19b3b

dec_label_pc_19b06:                               ; preds = %dec_label_pc_19afc
  %v0_19b06 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_19b06, i64* @rdi, align 8
  %v1_19b08 = trunc i64 %v0_19b06 to i32
  %v5_19b08 = add nuw nsw i64 %v2_19aef, 12
  %v6_19b08 = add i64 %v5_19b08, %v3_19afc
  %v7_19b08 = inttoptr i64 %v6_19b08 to i32*
  %v8_19b08 = load i32, i32* %v7_19b08, align 4
  %v9_19b08 = sub i32 %v1_19b08, %v8_19b08
  %v25_19b08 = zext i32 %v9_19b08 to i64
  store i64 %v25_19b08, i64* @rdi, align 8
  store i32 %v9_19b08, i32* %v1_19af7, align 4
  %v2_19b0e = load i64, i64* @rdi, align 8
  store i64 %v2_19b0e, i64* @rax, align 8
  %v0_19b12 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_19b12, i64* @rdi, align 8
  %v1_19b18 = trunc i64 %v2_19b0e to i32
  %v11_19b18 = icmp eq i32 %v1_19b18, -1
  br i1 %v11_19b18, label %dec_label_pc_19b28, label %dec_label_pc_19b1d

dec_label_pc_19b1d:                               ; preds = %dec_label_pc_19b06
  %v2_19b1d = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_19b1d, i64* @rbx, align 8
  store i64 %v0_19ac2, i64* %rbp.global-to-local, align 8
  store i64 %v0_19ac0, i64* %r12.global-to-local, align 8
  ret i64 %v2_19b0e

dec_label_pc_19b28:                               ; preds = %dec_label_pc_19b06
  %v1_19b28 = add i64 %v0_19b12, 48
  %v2_19b28 = inttoptr i64 %v1_19b28 to i64*
  %v3_19b28 = load i64, i64* %v2_19b28, align 8
  store i64 %v3_19b28, i64* @rdx, align 8
  %v1_19b2d = add i64 %v3_19b28, 8
  %v2_19b2d = inttoptr i64 %v1_19b2d to i32*
  %v3_19b2d = load i32, i32* %v2_19b2d, align 4
  %v4_19b2d = load i64, i64* @rbx, align 8
  %v5_19b2d = trunc i64 %v4_19b2d to i32
  %tmp279 = icmp ugt i32 %v3_19b2d, %v5_19b2d
  br i1 %tmp279, label %dec_label_pc_19b32, label %dec_label_pc_19b3b

dec_label_pc_19b32:                               ; preds = %dec_label_pc_19b28
  %v3_19b32 = load i64, i64* %rbp.global-to-local, align 8
  %v5_19b32 = add i64 %v3_19b28, 12
  %v6_19b32 = add i64 %v5_19b32, %v3_19b32
  %v7_19b32 = inttoptr i64 %v6_19b32 to i32*
  store i32 %v1_19b18, i32* %v7_19b32, align 4
  %v2_19b36 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_19b36, i64* @rbx, align 8
  store i64 %v0_19ac2, i64* %rbp.global-to-local, align 8
  store i64 %v0_19ac0, i64* %r12.global-to-local, align 8
  %v0_19b3a = load i64, i64* @rax, align 8
  ret i64 %v0_19b3a

dec_label_pc_19b3b.loopexit:                      ; preds = %dec_label_pc_19ae8
  br label %dec_label_pc_19b3b

dec_label_pc_19b3b:                               ; preds = %dec_label_pc_19b28, %dec_label_pc_19afc, %dec_label_pc_19b3b.loopexit, %dec_label_pc_19acc
  %v0_19b3b = phi i64 [ %v17_19ae0, %dec_label_pc_19b3b.loopexit ], [ %v17_19ac7, %dec_label_pc_19acc ], [ %v4_19b2d, %dec_label_pc_19b28 ], [ %v0_19ae0, %dec_label_pc_19afc ]
  store i64 %v0_19b3b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_19b44

dec_label_pc_19b44.loopexit:                      ; preds = %dec_label_pc_19ae0
  br label %dec_label_pc_19b44

dec_label_pc_19b44:                               ; preds = %dec_label_pc_19ac0.dec_label_pc_19b44_crit_edge, %dec_label_pc_19b44.loopexit, %dec_label_pc_19b3b
  %v0_19b4b = phi i64 [ %v0_19b4b.pre, %dec_label_pc_19ac0.dec_label_pc_19b44_crit_edge ], [ %v3_19af3, %dec_label_pc_19b44.loopexit ], [ 0, %dec_label_pc_19b3b ]
  %v0_19b44 = load i64, i64* inttoptr (i64 105291 to i64*), align 8
  store i64 %v0_19b44, i64* @rdi, align 8
  ret i64 %v0_19b4b
}

define i64 @_ZN3org4luaj3vm23lib7BaseLib4callEJPNS1_8LuaValueES5_S5_() local_unnamed_addr {
dec_label_pc_19b50:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm23lib7MathLib4callEJPNS1_8LuaValueES5_S5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1a040:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 106574, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1a483(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1a483:
  %rbp.global-to-local = alloca i64, align 8
  %v2_1a48b = load i64, i64* @rbx, align 8
  store i64 %v2_1a48b, i64* @rdi, align 8
  %v2_1a49d = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_1a49d, i64* @rax, align 8
  store i64 %v2_1a48b, i64* @rdx, align 8
  store i64 %v2_1a49d, i64* @rdi, align 8
  store i64 %v2_1a49d, i64* @rax, align 8
  store i64 %v2_1a49d, i64* @rdx, align 8
  store i64 %v2_1a49d, i64* @rdi, align 8
  %v4_1a4d4 = trunc i64 %v2_1a49d to i8
  %v5_1a4d4 = icmp eq i8 %v4_1a4d4, 0
  %v1_1a4d6 = icmp eq i1 %v5_1a4d4, false
  br i1 %v1_1a4d6, label %dec_label_pc_1a515, label %dec_label_pc_1a4d8

dec_label_pc_1a4d8:                               ; preds = %dec_label_pc_1a483
  store i64 %v2_1a49d, i64* @rax, align 8
  store i64 %v2_1a49d, i64* @rdi, align 8
  store i64 %v2_1a49d, i64* @rdx, align 8
  store i64 %v2_1a49d, i64* @rdi, align 8
  store i64 %v2_1a49d, i64* @rcx, align 8
  store i64 %v2_1a48b, i64* @rdx, align 8
  store i64 %v2_1a49d, i64* @rdi, align 8
  br label %dec_label_pc_1a515

dec_label_pc_1a515:                               ; preds = %dec_label_pc_1a4d8, %dec_label_pc_1a483
  store i64 %v2_1a48b, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_1a48b
}

define i64 @_ZN3org4luaj3vm27GlobalsC1Ev(i64 %arg1) local_unnamed_addr {
dec_label_pc_1a530:
  store i64 %arg1, i64* @rdi, align 8
  %v17_1a539 = load i64, i64* @rax, align 8
  ret i64 %v17_1a539
}

define i64 @_ZN3org4luaj3vm29LuaThreadC1EPNS1_7GlobalsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1a630:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_1a63e = load i64, i64* @rax, align 8
  ret i64 %v1_1a63e
}

define i64 @function_1a6e0() local_unnamed_addr {
dec_label_pc_1a6e0:
  %v0_1a6e0 = load i64, i64* inttoptr (i64 108263 to i64*), align 8
  store i64 %v0_1a6e0, i64* @rbx, align 8
  store i64 108270, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib19StringLib$GMatchAuxC1EPNS1_7VarargsEPNS1_9LuaStringES7_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1a700:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_1a711 = load i64, i64* @rax, align 8
  ret i64 %v1_1a711
}

define i64 @"_ZN3org4luaj3vm23lib16StringLib$gmatch6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1a7a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 108504, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure10setUpvalueEJviPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1a870:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_1a876 = add i64 %arg1, 16
  %v2_1a876 = inttoptr i64 %v1_1a876 to i64*
  %v3_1a876 = load i64, i64* %v2_1a876, align 8
  store i64 %v3_1a876, i64* @rax, align 8
  %v1_1a87a = trunc i64 %arg2 to i32
  %v3_1a87a = add i64 %v3_1a876, 8
  %v4_1a87a = inttoptr i64 %v3_1a87a to i32*
  %v5_1a87a = load i32, i32* %v4_1a87a, align 4
  %v11_1a87a = icmp ult i32 %v1_1a87a, %v5_1a87a
  %v1_1a87d = icmp eq i1 %v11_1a87a, false
  br i1 %v1_1a87d, label %bb, label %dec_label_pc_1a87f

bb:                                               ; preds = %dec_label_pc_1a870
  %v4_1a87d = call i64 @function_1a8bc(i64 %arg1, i64 %arg2)
  store i64 %v4_1a87d, i64* @rax, align 8
  br label %dec_label_pc_1a87f

dec_label_pc_1a87f:                               ; preds = %bb, %dec_label_pc_1a870
  %v0_1a882 = phi i64 [ %v4_1a87d, %bb ], [ %v3_1a876, %dec_label_pc_1a870 ]
  %v0_1a87f = load i64, i64* @rdx, align 8
  store i64 %v0_1a87f, i64* @rbx, align 8
  %v1_1a882 = add i64 %v0_1a882, 16
  store i64 %v1_1a882, i64* @rdx, align 8
  %v2_1a889 = mul i64 %arg2, 8
  %v3_1a889 = add i64 %v1_1a882, %v2_1a889
  %v4_1a889 = inttoptr i64 %v3_1a889 to i64*
  %v5_1a889 = load i64, i64* %v4_1a889, align 8
  store i64 %v5_1a889, i64* @rax, align 8
  %v1_1a88d = icmp eq i64 %v5_1a889, 0
  br i1 %v1_1a88d, label %bb243, label %dec_label_pc_1a892

bb243:                                            ; preds = %dec_label_pc_1a87f
  %v1_1a890 = call i64 @function_1a8ce()
  store i64 %v1_1a890, i64* @rax, align 8
  br label %dec_label_pc_1a892

dec_label_pc_1a892:                               ; preds = %bb243, %dec_label_pc_1a87f
  %v0_1a892 = phi i64 [ %v1_1a890, %bb243 ], [ %v5_1a889, %dec_label_pc_1a87f ]
  %v1_1a892 = add i64 %v0_1a892, 8
  %v2_1a892 = inttoptr i64 %v1_1a892 to i64*
  %v3_1a892 = load i64, i64* %v2_1a892, align 8
  store i64 %v3_1a892, i64* @rdi, align 8
  %v1_1a89d = add i64 %v3_1a892, 16
  store i64 %v1_1a89d, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1a8bc(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1a8bc:
  store i64 %arg2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1a8ce() local_unnamed_addr {
dec_label_pc_1a8ce:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlotC1EPNS1_8LuaValueEPNS1_13LuaTable$SlotEPS2_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1a8e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1a8ec = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1a8ec, i64* @rbx, align 8
  %v17_1a8ef = load i64, i64* @rax, align 8
  ret i64 %v17_1a8ef
}

define i64 @function_1a93d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1a93d:
  %v0_1a93d = load i64, i64* @r12, align 8
  %v1_1a93d = load i64, i64* @rbp, align 8
  %v2_1a93d = add i64 %v1_1a93d, 8
  %v3_1a93d = inttoptr i64 %v2_1a93d to i64*
  store i64 %v0_1a93d, i64* %v3_1a93d, align 8
  %v0_1a941 = load i64, i64* @r13, align 8
  %v1_1a941 = load i64, i64* @rbp, align 8
  %v2_1a941 = add i64 %v1_1a941, 16
  %v3_1a941 = inttoptr i64 %v2_1a941 to i64*
  store i64 %v0_1a941, i64* %v3_1a941, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_1a94f = load i64, i64* @rax, align 8
  ret i64 %v0_1a94f
}

define i64 @function_1a950() local_unnamed_addr {
dec_label_pc_1a950:
  %v2_1a950 = load i64, i64* @rbx, align 8
  store i64 %v2_1a950, i64* @rax, align 8
  store i64 %v2_1a950, i64* @rdi, align 8
  ret i64 %v2_1a950
}

define i64 @function_1a961() local_unnamed_addr {
dec_label_pc_1a961:
  %v0_1a961 = load i64, i64* @rbx, align 8
  store i64 %v0_1a961, i64* @r12, align 8
  %v4_1a964 = call i64 @function_1a93d(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_1a964, i64* @rax, align 8
  ret i64 %v4_1a964
}

define i64 @_ZN3org4luaj3vm23lib10PackageLib11toClassnameEJPN4java4lang6StringES7_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1a970:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 108932, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1aa30() local_unnamed_addr {
dec_label_pc_1aa30:
  %v0_1aa30 = load i64, i64* @rax, align 8
  %v1_1aa30 = trunc i64 %v0_1aa30 to i32
  %v10_1aa33 = icmp sgt i32 %v1_1aa30, 64
  br i1 %v10_1aa33, label %bb, label %dec_label_pc_1aa39

bb:                                               ; preds = %dec_label_pc_1aa30
  %v11_1aa33 = call i64 @function_1ab40()
  store i64 %v11_1aa33, i64* @rax, align 8
  br label %dec_label_pc_1aa39

dec_label_pc_1aa39:                               ; preds = %bb, %dec_label_pc_1aa30
  %v0_1aa3c = phi i64 [ %v11_1aa33, %bb ], [ %v0_1aa30, %dec_label_pc_1aa30 ]
  ret i64 %v0_1aa3c
}

define i64 @function_1aa42() local_unnamed_addr {
dec_label_pc_1aa42:
  %v0_1aa42 = load i64, i64* @rax, align 8
  %v1_1aa42 = add i64 %v0_1aa42, -36
  store i64 %v1_1aa42, i64* @rdx, align 8
  %v1_1aa45 = trunc i64 %v1_1aa42 to i32
  %tmp = icmp ult i32 %v1_1aa45, 60
  br i1 %tmp, label %dec_label_pc_1aa4a, label %dec_label_pc_1aa50

dec_label_pc_1aa4a:                               ; preds = %dec_label_pc_1aa42
  %v0_1aa4a = load i64, i64* @r14, align 8
  %v2_1aa4a = urem i64 %v1_1aa42, 64
  %v3_1aa4a = shl i64 1, %v2_1aa4a
  %v4_1aa4a = and i64 %v0_1aa4a, %v3_1aa4a
  %v5_1aa4a = icmp eq i64 %v4_1aa4a, 0
  br i1 %v5_1aa4a, label %dec_label_pc_1aa50, label %dec_label_pc_1aa67

dec_label_pc_1aa50:                               ; preds = %dec_label_pc_1aa4a, %dec_label_pc_1aa42
  %v1_1aa50 = trunc i64 %v0_1aa42 to i32
  %v11_1aa50 = icmp eq i32 %v1_1aa50, 47
  br i1 %v11_1aa50, label %bb, label %dec_label_pc_1aa59

bb:                                               ; preds = %dec_label_pc_1aa50
  %v1_1aa53 = call i64 @function_1ab30()
  store i64 %v1_1aa53, i64* @rax, align 8
  br label %dec_label_pc_1aa59

dec_label_pc_1aa59:                               ; preds = %bb, %dec_label_pc_1aa50
  %v0_1aa59 = phi i64 [ %v1_1aa53, %bb ], [ %v0_1aa42, %dec_label_pc_1aa50 ]
  %v1_1aa59 = trunc i64 %v0_1aa59 to i32
  %v11_1aa59 = icmp eq i32 %v1_1aa59, 92
  br i1 %v11_1aa59, label %bb5, label %dec_label_pc_1aa67

bb5:                                              ; preds = %dec_label_pc_1aa59
  %v1_1aa61 = call i64 @function_1ab30()
  store i64 %v1_1aa61, i64* @rax, align 8
  br label %dec_label_pc_1aa67

dec_label_pc_1aa67:                               ; preds = %dec_label_pc_1aa4a, %bb5, %dec_label_pc_1aa59
  %v0_1aa75 = phi i64 [ %v1_1aa61, %bb5 ], [ %v0_1aa59, %dec_label_pc_1aa59 ], [ %v0_1aa42, %dec_label_pc_1aa4a ]
  %v0_1aa67 = load i64, i64* @r13, align 8
  store i64 %v0_1aa67, i64* @rdi, align 8
  %v0_1aa6a = load i64, i64* @rbx, align 8
  %v2_1aa6a = add i64 %v0_1aa6a, 1
  %v17_1aa6a = and i64 %v2_1aa6a, 4294967295
  store i64 %v17_1aa6a, i64* @rbx, align 8
  ret i64 %v0_1aa75
}

define i64 @function_1aa77() local_unnamed_addr {
dec_label_pc_1aa77:
  %rbp.global-to-local = alloca i64, align 8
  %v0_1aa79 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1aa79, i64* @rdi, align 8
  %v1_1aa79 = load i64, i64* @rax, align 8
  ret i64 %v1_1aa79
}

define i64 @function_1aaa8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1aaa8:
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  %v0_1aab0 = load i64, i64* @rax, align 8
  ret i64 %v0_1aab0
}

define i64 @function_1aab8() local_unnamed_addr {
dec_label_pc_1aab8:
  %v0_1aab8 = load i64, i64* @rax, align 8
  ret i64 %v0_1aab8
}

define i64 @function_1aac1() local_unnamed_addr {
dec_label_pc_1aac1:
  %v0_1aac1 = load i64, i64* @rax, align 8
  ret i64 %v0_1aac1
}

define i64 @function_1aae0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1aae0:
  %r12.global-to-local = alloca i64, align 8
  %tmp233 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rdi, align 8
  %v1_1aae0 = trunc i64 %tmp233 to i32
  %v2_1aae0 = load i64, i64* %r12.global-to-local, align 8
  %v3_1aae0 = trunc i64 %v2_1aae0 to i32
  %v14_1aae0 = icmp eq i32 %v1_1aae0, %v3_1aae0
  br i1 %v14_1aae0, label %bb, label %dec_label_pc_1aae0.dec_label_pc_1aae9_crit_edge

dec_label_pc_1aae0.dec_label_pc_1aae9_crit_edge:  ; preds = %dec_label_pc_1aae0
  %v1_1aaee.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_1aae9

bb:                                               ; preds = %dec_label_pc_1aae0
  %v1_1aae3 = call i64 @function_1ab6c()
  store i64 %v1_1aae3, i64* @rax, align 8
  %v0_1aae9.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_1aae9

dec_label_pc_1aae9:                               ; preds = %dec_label_pc_1aae0.dec_label_pc_1aae9_crit_edge, %bb
  %v1_1aaee = phi i64 [ %v1_1aae3, %bb ], [ %v1_1aaee.pre, %dec_label_pc_1aae0.dec_label_pc_1aae9_crit_edge ]
  %v0_1aae9 = phi i64 [ %v0_1aae9.pre, %bb ], [ %v2_1aae0, %dec_label_pc_1aae0.dec_label_pc_1aae9_crit_edge ]
  store i64 %v0_1aae9, i64* @rdx, align 8
  %v0_1aaee = load i64, i64* @rbp, align 8
  store i64 %v0_1aaee, i64* @rdi, align 8
  ret i64 %v1_1aaee
}

define i64 @function_1ab00() local_unnamed_addr {
dec_label_pc_1ab00:
  %v0_1ab00 = load i64, i64* @rax, align 8
  %v1_1ab00 = trunc i64 %v0_1ab00 to i32
  %v10_1ab03 = icmp sgt i32 %v1_1ab00, 64
  br i1 %v10_1ab03, label %bb, label %dec_label_pc_1ab05

bb:                                               ; preds = %dec_label_pc_1ab00
  %v11_1ab03 = call i64 @function_1aab8()
  store i64 %v11_1ab03, i64* @rax, align 8
  br label %dec_label_pc_1ab05

dec_label_pc_1ab05:                               ; preds = %bb, %dec_label_pc_1ab00
  %v0_1ab0e = phi i64 [ %v11_1ab03, %bb ], [ %v0_1ab00, %dec_label_pc_1ab00 ]
  %v1_1ab05 = trunc i64 %v0_1ab0e to i32
  %v9_1ab11 = icmp sgt i32 %v1_1ab05, 57
  br i1 %v9_1ab11, label %dec_label_pc_1ab13, label %bb244

bb244:                                            ; preds = %dec_label_pc_1ab05
  %v10_1ab11 = call i64 @function_1aac1()
  store i64 %v10_1ab11, i64* @rax, align 8
  br label %dec_label_pc_1ab13

dec_label_pc_1ab13:                               ; preds = %dec_label_pc_1ab05, %bb244
  %v0_1ab13 = phi i64 [ %v0_1ab0e, %dec_label_pc_1ab05 ], [ %v10_1ab11, %bb244 ]
  ret i64 %v0_1ab13
}

define i64 @function_1ab20(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1ab20:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ab2a = call i64 @function_1aac1()
  store i64 %v0_1ab2a, i64* @rax, align 8
  ret i64 %v0_1ab2a
}

define i64 @function_1ab30() local_unnamed_addr {
dec_label_pc_1ab30:
  %v0_1ab35 = load i64, i64* @rax, align 8
  ret i64 %v0_1ab35
}

define i64 @function_1ab40() local_unnamed_addr {
dec_label_pc_1ab40:
  %v0_1ab49 = call i64 @function_1aa42()
  store i64 %v0_1ab49, i64* @rax, align 8
  ret i64 %v0_1ab49
}

define i64 @function_1ab50() local_unnamed_addr {
dec_label_pc_1ab50:
  %v0_1ab59 = call i64 @function_1aa42()
  store i64 %v0_1ab59, i64* @rax, align 8
  ret i64 %v0_1ab59
}

define i64 @function_1ab60() local_unnamed_addr {
dec_label_pc_1ab60:
  %v0_1ab66 = load i64, i64* @rax, align 8
  ret i64 %v0_1ab66
}

define i64 @function_1ab6c() local_unnamed_addr {
dec_label_pc_1ab6c:
  %v0_1ab6c = load i64, i64* @rbp, align 8
  store i64 %v0_1ab6c, i64* @rax, align 8
  %v5_1ab6f = call i64 @function_1aaa8(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_1ab6f, i64* @rax, align 8
  ret i64 %v5_1ab6f
}

define i64 @function_1ab74(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ab74:
  %rbp.global-to-local = alloca i64, align 8
  %v0_1ab76 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1ab76, i64* @rdi, align 8
  %v1_1ab76 = load i64, i64* @rax, align 8
  ret i64 %v1_1ab76
}

define i64 @function_1ab7e() local_unnamed_addr {
dec_label_pc_1ab7e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry6removeEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_1ab90:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1ab96 = load i64, i64* @rdi, align 8
  store i64 %v0_1ab96, i64* @rbx, align 8
  store i64 109472, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1ac07(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1ac07:
  %v0_1ac07 = load i64, i64* @rbx, align 8
  %v1_1ac07 = load i64, i64* @rbp, align 8
  %v2_1ac07 = add i64 %v1_1ac07, 8
  %v3_1ac07 = inttoptr i64 %v2_1ac07 to i64*
  store i64 %v0_1ac07, i64* %v3_1ac07, align 8
  %v0_1ac0b = load i64, i64* @rbp, align 8
  %v1_1ac0b = add i64 %v0_1ac0b, 16
  %v2_1ac0b = inttoptr i64 %v1_1ac0b to i64*
  store i64 0, i64* %v2_1ac0b, align 8
  %v0_1ac13 = load i64, i64* @rbp, align 8
  store i64 %v0_1ac13, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_1ac13
}

define i64 @function_1ac20() local_unnamed_addr {
dec_label_pc_1ac20:
  %v2_1ac20 = load i64, i64* @rbx, align 8
  store i64 %v2_1ac20, i64* @rax, align 8
  store i64 %v2_1ac20, i64* @rdi, align 8
  %v1_1ac2c = trunc i64 %v2_1ac20 to i32
  %v9_1ac2f = icmp sgt i32 %v1_1ac2c, 32
  br i1 %v9_1ac2f, label %dec_label_pc_1ac31, label %bb

bb:                                               ; preds = %dec_label_pc_1ac20
  %v13_1ac2f = call i64 @function_1ac07(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v13_1ac2f, i64* @rax, align 8
  br label %dec_label_pc_1ac31

dec_label_pc_1ac31:                               ; preds = %dec_label_pc_1ac20, %bb
  %v0_1ac31 = phi i64 [ %v2_1ac20, %dec_label_pc_1ac20 ], [ %v13_1ac2f, %bb ]
  ret i64 %v0_1ac31
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlotC1EPNS1_8LuaValueEPNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1ac40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ac4c = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ac4c, i64* @rbx, align 8
  %v17_1ac4f = load i64, i64* @rax, align 8
  ret i64 %v17_1ac4f
}

define i64 @function_1ac9d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1ac9d:
  %v0_1ac9d = load i64, i64* @r12, align 8
  %v1_1ac9d = load i64, i64* @rbp, align 8
  %v2_1ac9d = add i64 %v1_1ac9d, 8
  %v3_1ac9d = inttoptr i64 %v2_1ac9d to i64*
  store i64 %v0_1ac9d, i64* %v3_1ac9d, align 8
  %v0_1aca1 = load i64, i64* @r13, align 8
  %v1_1aca1 = load i64, i64* @rbp, align 8
  %v2_1aca1 = add i64 %v1_1aca1, 16
  %v3_1aca1 = inttoptr i64 %v2_1aca1 to i64*
  store i64 %v0_1aca1, i64* %v3_1aca1, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_1acaf = load i64, i64* @rax, align 8
  ret i64 %v0_1acaf
}

define i64 @function_1acb0() local_unnamed_addr {
dec_label_pc_1acb0:
  %v2_1acb0 = load i64, i64* @rbx, align 8
  store i64 %v2_1acb0, i64* @rax, align 8
  store i64 %v2_1acb0, i64* @rdi, align 8
  ret i64 %v2_1acb0
}

define i64 @function_1acc1() local_unnamed_addr {
dec_label_pc_1acc1:
  %v0_1acc1 = load i64, i64* @rbx, align 8
  store i64 %v0_1acc1, i64* @r12, align 8
  %v4_1acc4 = call i64 @function_1ac9d(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_1acc4, i64* @rax, align 8
  ret i64 %v4_1acc4
}

define i64 @_ZN3org4luaj3vm29LuaString7indexOfEJiPS2_i(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1acd0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1acdb = load i64, i64* @rdi, align 8
  %v0_1ace0 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ace0, i64* @rdi, align 8
  store i64 %v0_1ace0, i64* @rax, align 8
  %v1_1acf5 = add i64 %v0_1acdb, 20
  %v2_1acf5 = inttoptr i64 %v1_1acf5 to i32*
  %v3_1acf5 = load i32, i32* %v2_1acf5, align 4
  %v3_1acfa = trunc i64 %v0_1ace0 to i32
  %v4_1acfa = sub i32 %v3_1acf5, %v3_1acfa
  %v20_1acfa = zext i32 %v4_1acfa to i64
  store i64 %v20_1acfa, i64* @rax, align 8
  ret i64 %v20_1acfa
}

define i64 @function_1add0() local_unnamed_addr {
dec_label_pc_1add0:
  %v0_1add0 = load i64, i64* @rax, align 8
  store i64 %v0_1add0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString11lastIndexOfEJiPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ade0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ade4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ade4, i64* @rdi, align 8
  store i64 %v0_1ade4, i64* @rax, align 8
  ret i64 %v0_1ade4
}

define i64 @_ZN3org4luaj3vm28compiler9DumpState4dumpEJiPNS1_9PrototypeEPN4java2io12OutputStreamEbib(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1aec0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 110294, i64* @rdi, align 8
  %v0_1aed6 = load i64, i64* @rcx, align 8
  store i64 %v0_1aed6, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_1af70() local_unnamed_addr {
dec_label_pc_1af70:
  store i64 110455, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1b018() local_unnamed_addr {
dec_label_pc_1b018:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer6appendEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1b020:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_1b030 = load i64, i64* @rax, align 8
  ret i64 %v1_1b030
}

define i64 @"_ZN4lang11lang_luaj$818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b0d0:
  store i64 110807, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$3518__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b120:
  store i64 110905, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b170:
  store i64 110967, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b1c0:
  store i64 111047, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang16lang_luaj$77$7$018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b210:
  store i64 111127, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b260:
  store i64 111207, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang11lang_luaj$418__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b2b0:
  store i64 111287, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b300:
  store i64 111385, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang11lang_luaj$918__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b350:
  store i64 111447, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b3a0:
  store i64 111527, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$44$218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b3f0:
  store i64 111625, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$3218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b440:
  store i64 111687, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang11lang_luaj$618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b490:
  store i64 111767, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b4e0:
  store i64 111847, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$6718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b530:
  store i64 111927, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b580:
  store i64 112007, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1518__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b5d0:
  store i64 112105, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang11lang_luaj$718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b620:
  store i64 112167, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b670:
  store i64 112247, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2418__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b6c0:
  store i64 112327, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b710:
  store i64 112407, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$3118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b760:
  store i64 112487, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang16lang_luaj$76$7$018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b7b0:
  store i64 112567, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2918__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b800:
  store i64 112647, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b850:
  store i64 112727, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$2318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b8a0:
  store i64 112825, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$6818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b8f0:
  store i64 112887, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$3318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b940:
  store i64 112967, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$3618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b990:
  store i64 113047, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang25lang_luaj$__TS__ArrayPush18__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1b9e0:
  store i64 113127, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$3718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1ba30:
  store i64 113207, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1918__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1ba80:
  store i64 113305, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print14printConstantsEJvPNS1_9PrototypeE(i64 %arg1) local_unnamed_addr {
dec_label_pc_1bad0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 113378, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1bbb0() local_unnamed_addr {
dec_label_pc_1bbb0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v2_1bbb0 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_1bbb0, i64* @rax, align 8
  %v2_1bbbd = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_1bbbd, i64* @rdx, align 8
  store i64 %v2_1bbbd, i64* @rdi, align 8
  ret i64 %v2_1bbb0
}

define i64 @function_1bbcd() local_unnamed_addr {
dec_label_pc_1bbcd:
  %v0_1bbcd = load i64, i64* inttoptr (i64 113620 to i64*), align 8
  store i64 %v0_1bbcd, i64* @rdi, align 8
  %v0_1bbd4 = load i64, i64* @rbx, align 8
  %v1_1bbd4 = add i64 %v0_1bbd4, 1
  store i64 %v1_1bbd4, i64* @rbx, align 8
  %v1_1bbdf = inttoptr i64 %v0_1bbcd to i64*
  %v2_1bbdf = load i64, i64* %v1_1bbdf, align 8
  store i64 %v2_1bbdf, i64* @rax, align 8
  ret i64 %v2_1bbdf
}

define i64 @function_1bbf1() local_unnamed_addr {
dec_label_pc_1bbf1:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_1bcf0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_1bcf0:
  store i64 %arg1, i64* @rbx, align 8
  %v0_1bcfe = load i64, i64* @rax, align 8
  ret i64 %v0_1bcfe
}

define i64 @function_1bcff() local_unnamed_addr {
dec_label_pc_1bcff:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1bd06() local_unnamed_addr {
dec_label_pc_1bd06:
  %v0_1bd06 = load i64, i64* @rbx, align 8
  store i64 %v0_1bd06, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib6onCallEJvPNS1_10LuaClosureEPNS1_7VarargsEP6JArrayIPNS1_8LuaValueEE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1bd10:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1bd18 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1bd1e = load i64, i64* @rdi, align 8
  %v1_1bd1e = add i64 %v0_1bd1e, 24
  %v2_1bd1e = inttoptr i64 %v1_1bd1e to i64*
  %v3_1bd1e = load i64, i64* %v2_1bd1e, align 8
  store i64 %v3_1bd1e, i64* @rax, align 8
  %v1_1bd22 = add i64 %v3_1bd1e, 72
  %v2_1bd22 = inttoptr i64 %v1_1bd22 to i64*
  %v3_1bd22 = load i64, i64* %v2_1bd22, align 8
  store i64 %v3_1bd22, i64* @rax, align 8
  %v1_1bd26 = add i64 %v3_1bd22, 8
  %v2_1bd26 = inttoptr i64 %v1_1bd26 to i64*
  %v3_1bd26 = load i64, i64* %v2_1bd26, align 8
  store i64 %v3_1bd26, i64* %rbp.global-to-local, align 8
  %v1_1bd2a = add i64 %v3_1bd26, 72
  %v2_1bd2a = inttoptr i64 %v1_1bd2a to i8*
  %v3_1bd2a = load i8, i8* %v2_1bd2a, align 1
  %v10_1bd2a = icmp eq i8 %v3_1bd2a, 0
  br i1 %v10_1bd2a, label %dec_label_pc_1bd40, label %dec_label_pc_1bd30

dec_label_pc_1bd30:                               ; preds = %dec_label_pc_1bd10
  store i64 %v0_1bd18, i64* %rbp.global-to-local, align 8
  ret i64 %v3_1bd22

dec_label_pc_1bd40:                               ; preds = %dec_label_pc_1bd10
  store i64 %v0_1bd1e, i64* @rax, align 8
  store i64 %v0_1bd1e, i64* @rbx, align 8
  %v1_1bd55 = icmp eq i64 %v0_1bd1e, 0
  br i1 %v1_1bd55, label %bb, label %dec_label_pc_1bd5d

bb:                                               ; preds = %dec_label_pc_1bd40
  %v1_1bd5b = call i64 @function_1bdc1()
  store i64 %v1_1bd5b, i64* @rax, align 8
  br label %dec_label_pc_1bd5d

dec_label_pc_1bd5d:                               ; preds = %bb, %dec_label_pc_1bd40
  %v0_1bd5d = phi i64 [ %v1_1bd5b, %bb ], [ %v0_1bd1e, %dec_label_pc_1bd40 ]
  store i64 %v0_1bd5d, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1bdc1() local_unnamed_addr {
dec_label_pc_1bdc1:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib6onCallEJvPNS1_11LuaFunctionE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1bde0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1bde4 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1bdea = load i64, i64* @rdi, align 8
  %v1_1bdea = add i64 %v0_1bdea, 24
  %v2_1bdea = inttoptr i64 %v1_1bdea to i64*
  %v3_1bdea = load i64, i64* %v2_1bdea, align 8
  store i64 %v3_1bdea, i64* @rax, align 8
  %v1_1bdee = add i64 %v3_1bdea, 72
  %v2_1bdee = inttoptr i64 %v1_1bdee to i64*
  %v3_1bdee = load i64, i64* %v2_1bdee, align 8
  store i64 %v3_1bdee, i64* @rax, align 8
  %v1_1bdf2 = add i64 %v3_1bdee, 8
  %v2_1bdf2 = inttoptr i64 %v1_1bdf2 to i64*
  %v3_1bdf2 = load i64, i64* %v2_1bdf2, align 8
  store i64 %v3_1bdf2, i64* %rbp.global-to-local, align 8
  %v1_1bdf6 = add i64 %v3_1bdf2, 72
  %v2_1bdf6 = inttoptr i64 %v1_1bdf6 to i8*
  %v3_1bdf6 = load i8, i8* %v2_1bdf6, align 1
  %v10_1bdf6 = icmp eq i8 %v3_1bdf6, 0
  br i1 %v10_1bdf6, label %dec_label_pc_1be10, label %dec_label_pc_1bdfc

dec_label_pc_1bdfc:                               ; preds = %dec_label_pc_1bde0
  store i64 %v0_1bde4, i64* %rbp.global-to-local, align 8
  ret i64 %v3_1bdee

dec_label_pc_1be10:                               ; preds = %dec_label_pc_1bde0
  store i64 %v0_1bdea, i64* @rax, align 8
  store i64 %v0_1bdea, i64* @rbx, align 8
  %v1_1be1f = icmp eq i64 %v0_1bdea, 0
  br i1 %v1_1be1f, label %bb, label %dec_label_pc_1be27

bb:                                               ; preds = %dec_label_pc_1be10
  %v1_1be25 = call i64 @function_1be80()
  store i64 %v1_1be25, i64* @rax, align 8
  br label %dec_label_pc_1be27

dec_label_pc_1be27:                               ; preds = %bb, %dec_label_pc_1be10
  %v0_1be27 = phi i64 [ %v1_1be25, %bb ], [ %v0_1bdea, %dec_label_pc_1be10 ]
  store i64 %v0_1be27, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1be80() local_unnamed_addr {
dec_label_pc_1be80:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$5118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1bea0:
  store i64 114361, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1bf1d() local_unnamed_addr {
dec_label_pc_1bf1d:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1bf29() local_unnamed_addr {
dec_label_pc_1bf29:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$44$018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1bf40:
  store i64 114503, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1bfbd() local_unnamed_addr {
dec_label_pc_1bfbd:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1bfc9() local_unnamed_addr {
dec_label_pc_1bfc9:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$56$218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1bfe0:
  store i64 114663, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c05d() local_unnamed_addr {
dec_label_pc_1c05d:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c069() local_unnamed_addr {
dec_label_pc_1c069:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$5318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c080:
  store i64 114841, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c0fd() local_unnamed_addr {
dec_label_pc_1c0fd:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c109() local_unnamed_addr {
dec_label_pc_1c109:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$3818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c120:
  store i64 114983, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c19d() local_unnamed_addr {
dec_label_pc_1c19d:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c1a9() local_unnamed_addr {
dec_label_pc_1c1a9:
  store i64 259, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$4018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c1c0:
  store i64 115143, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c23d() local_unnamed_addr {
dec_label_pc_1c23d:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c249() local_unnamed_addr {
dec_label_pc_1c249:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$4218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c260:
  store i64 115321, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c2dd() local_unnamed_addr {
dec_label_pc_1c2dd:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c2e9() local_unnamed_addr {
dec_label_pc_1c2e9:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang11lang_luaj$318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c300:
  store i64 115463, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c37d() local_unnamed_addr {
dec_label_pc_1c37d:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c389() local_unnamed_addr {
dec_label_pc_1c389:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$5518__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c3a0:
  store i64 115623, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c41d() local_unnamed_addr {
dec_label_pc_1c41d:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c429() local_unnamed_addr {
dec_label_pc_1c429:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$5618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c440:
  store i64 115801, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c4bd() local_unnamed_addr {
dec_label_pc_1c4bd:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c4c9() local_unnamed_addr {
dec_label_pc_1c4c9:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$15$018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c4e0:
  store i64 115943, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c55d() local_unnamed_addr {
dec_label_pc_1c55d:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c569() local_unnamed_addr {
dec_label_pc_1c569:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$76$1118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c580:
  store i64 116103, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c5fd() local_unnamed_addr {
dec_label_pc_1c5fd:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c609() local_unnamed_addr {
dec_label_pc_1c609:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$1118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1c620:
  store i64 116281, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c69d() local_unnamed_addr {
dec_label_pc_1c69d:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c6a9() local_unnamed_addr {
dec_label_pc_1c6a9:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Globals13loadPrototypeEJPNS1_9PrototypeEPN4java2io11InputStreamEPNS5_4lang6StringESB_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1c6c0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_1c6c0 = icmp eq i64 %arg4, 0
  br i1 %v1_1c6c0, label %bb, label %dec_label_pc_1c6c0.dec_label_pc_1c6d1_crit_edge

dec_label_pc_1c6c0.dec_label_pc_1c6d1_crit_edge:  ; preds = %dec_label_pc_1c6c0
  %v1_1c6e2.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_1c6d1

bb:                                               ; preds = %dec_label_pc_1c6c0
  %v1_1c6cb = call i64 @function_1c860()
  store i64 %v1_1c6cb, i64* @rax, align 8
  br label %dec_label_pc_1c6d1

dec_label_pc_1c6d1:                               ; preds = %dec_label_pc_1c6c0.dec_label_pc_1c6d1_crit_edge, %bb
  %v1_1c6e2 = phi i64 [ %v1_1c6e2.pre, %dec_label_pc_1c6c0.dec_label_pc_1c6d1_crit_edge ], [ %v1_1c6cb, %bb ]
  %v0_1c6d4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1c6d4, i64* @rbx, align 8
  store i64 %arg4, i64* @rdi, align 8
  store i64 98, i64* %rsi.global-to-local, align 8
  ret i64 %v1_1c6e2
}

define i64 @function_1c750() local_unnamed_addr {
dec_label_pc_1c750:
  store i64 116567, i64* @rdi, align 8
  %v0_1c750 = load i64, i64* @rax, align 8
  ret i64 %v0_1c750
}

define i64 @function_1c7a0() local_unnamed_addr {
dec_label_pc_1c7a0:
  %v2_1c7a0 = load i64, i64* @rbx, align 8
  store i64 %v2_1c7a0, i64* @rax, align 8
  store i64 %v2_1c7a0, i64* @rdi, align 8
  ret i64 %v2_1c7a0
}

define i64 @function_1c7a9() local_unnamed_addr {
dec_label_pc_1c7a9:
  %rbp.global-to-local = alloca i64, align 8
  %v0_1c7ae = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1c7ae, i64* @rdi, align 8
  %v1_1c7ae = load i64, i64* @rax, align 8
  ret i64 %v1_1c7ae
}

define i64 @function_1c860() local_unnamed_addr {
dec_label_pc_1c860:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1c867() local_unnamed_addr {
dec_label_pc_1c867:
  %v0_1c867 = load i64, i64* inttoptr (i64 116846 to i64*), align 8
  store i64 %v0_1c867, i64* @rdi, align 8
  %v0_1c876 = load i64, i64* @rax, align 8
  ret i64 %v0_1c876
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$FormatDesc3padEJvPNS1_6BufferEwi"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1c880:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1c880 = load i64, i64* @rcx, align 8
  %v4_1c880 = trunc i64 %v0_1c880 to i32
  %tmp243 = icmp slt i32 %v4_1c880, 1
  br i1 %tmp243, label %bb, label %dec_label_pc_1c880.dec_label_pc_1c888_crit_edge

dec_label_pc_1c880.dec_label_pc_1c888_crit_edge:  ; preds = %dec_label_pc_1c880
  %v0_1c8a4.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_1c888

bb:                                               ; preds = %dec_label_pc_1c880
  %v5_1c882 = call i64 @function_1c9c3()
  store i64 %v5_1c882, i64* @rax, align 8
  br label %dec_label_pc_1c888

dec_label_pc_1c888:                               ; preds = %dec_label_pc_1c880.dec_label_pc_1c888_crit_edge, %bb
  %v0_1c8a4 = phi i64 [ %v5_1c882, %bb ], [ %v0_1c8a4.pre, %dec_label_pc_1c880.dec_label_pc_1c888_crit_edge ]
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v0_1c8a4
}

define i64 @function_1c9b8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1c9b8:
  store i64 %arg1, i64* @rbx, align 8
  %v0_1c9c2 = load i64, i64* @rax, align 8
  ret i64 %v0_1c9c2
}

define i64 @function_1c9c3() local_unnamed_addr {
dec_label_pc_1c9c3:
  %v0_1c9c3 = load i64, i64* @rax, align 8
  ret i64 %v0_1c9c3
}

define i64 @function_1c9c4() local_unnamed_addr {
dec_label_pc_1c9c4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable7heapifyEJviPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1c9e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1c9e0 = load i64, i64* %rsi.global-to-local, align 8
  %v1_1c9e6 = trunc i64 %v0_1c9e0 to i32
  %tmp250 = icmp slt i32 %v1_1c9e6, 0
  %v3_1c9e6 = zext i1 %tmp250 to i32
  %v4_1c9ed = add i32 %v3_1c9e6, %v1_1c9e6
  %v3_1c9f1 = sdiv i32 %v4_1c9ed, 2
  %v2_1c9f7 = add nsw i32 %v3_1c9f1, -1
  %v12_1c9f7 = icmp slt i32 %v4_1c9ed, 2
  %v17_1c9f7 = zext i32 %v2_1c9f7 to i64
  store i64 %v17_1c9f7, i64* @rax, align 8
  br i1 %v12_1c9f7, label %bb, label %dec_label_pc_1ca04

bb:                                               ; preds = %dec_label_pc_1c9e0
  %v1_1c9fe = call i64 @function_1cbd7()
  store i64 %v1_1c9fe, i64* @rax, align 8
  %v0_1ca08.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1ca04

dec_label_pc_1ca04:                               ; preds = %bb, %dec_label_pc_1c9e0
  %v0_1ca08 = phi i64 [ %v0_1ca08.pre, %bb ], [ %v0_1c9e0, %dec_label_pc_1c9e0 ]
  %v0_1ca04 = phi i64 [ %v1_1c9fe, %bb ], [ %v17_1c9f7, %dec_label_pc_1c9e0 ]
  %factor = mul i64 %v0_1ca04, 2
  %v4_1ca04 = or i64 %factor, 1
  %v2_1ca08 = add i64 %v0_1ca08, 4294967295
  %v17_1ca08 = and i64 %v2_1ca08, 4294967295
  %v4_1ca20 = and i64 %v4_1ca04, 4294967295
  store i64 %v4_1ca20, i64* %rsi.global-to-local, align 8
  %v2_1ca2e = add i64 %v4_1ca04, 4294967295
  %v17_1ca2e = and i64 %v2_1ca2e, 4294967294
  store i64 %v17_1ca2e, i64* @rax, align 8
  %v4_1ca3b = call i64 @function_1cbc0(i64 %v17_1ca08, i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_1ca3b, i64* @rax, align 8
  ret i64 %v4_1ca3b
}

define i64 @function_1cbc0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1cbc0:
  %v5_1cbc0 = mul i64 %arg1, 4294967296
  %sext = add i64 %v5_1cbc0, -4294967296
  %v23_1cbc0 = sdiv i64 %sext, 4294967296
  store i64 %v23_1cbc0, i64* @rax, align 8
  ret i64 %v23_1cbc0
}

define i64 @function_1cbd7() local_unnamed_addr {
dec_label_pc_1cbd7:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_1cbf0() local_unnamed_addr {
dec_label_pc_1cbf0:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  ret i64 %tmp229
}

define i64 @function_1cc14() local_unnamed_addr {
dec_label_pc_1cc14:
  %v0_1cc14 = load i64, i64* @rbx, align 8
  store i64 %v0_1cc14, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cc1d() local_unnamed_addr {
dec_label_pc_1cc1d:
  %rbp.global-to-local = alloca i64, align 8
  %v0_1cc1d = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1cc1d, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm222WeakTable$WeakUserdataC1EPNS1_8LuaValueEPS2_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1cc30:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_1cc37 = load i64, i64* @rax, align 8
  ret i64 %v1_1cc37
}

define i64 @_ZN3org4luaj3vm210LuaClosure4callEJPNS1_8LuaValueEv(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1cca0:
  %r12.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1cca0 = load i64, i64* %r12.global-to-local, align 8
  %v0_1ccaa = load i64, i64* @rbx, align 8
  %v0_1ccab = load i64, i64* @rdi, align 8
  %v1_1ccab = add i64 %v0_1ccab, 8
  %v2_1ccab = inttoptr i64 %v1_1ccab to i64*
  %v3_1ccab = load i64, i64* %v2_1ccab, align 8
  store i64 %v3_1ccab, i64* @rax, align 8
  store i64 %v0_1ccab, i64* @rbx, align 8
  store i64 0, i64* @rdx, align 8
  %v1_1ccb4 = add i64 %v3_1ccab, 80
  %v2_1ccb4 = inttoptr i64 %v1_1ccb4 to i32*
  %v3_1ccb4 = load i32, i32* %v2_1ccb4, align 4
  %v4_1ccb4 = zext i32 %v3_1ccb4 to i64
  store i64 %v4_1ccb4, i64* %r12.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v4_1ccb4, i64* @rdi, align 8
  %v0_1ccc2 = load i64, i64* inttoptr (i64 117961 to i64*), align 8
  store i64 0, i64* @rcx, align 8
  store i64 %v0_1ccc2, i64* @rax, align 8
  store i64 %v0_1ccab, i64* @rdx, align 8
  store i64 %v0_1ccc2, i64* @rdi, align 8
  store i64 %v0_1ccaa, i64* @rbx, align 8
  store i64 %v0_1cca0, i64* %r12.global-to-local, align 8
  ret i64 %v0_1ccc2
}

define i64 @"_ZN4lang12lang_luaj$4718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1cd00:
  store i64 118023, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cdbb() local_unnamed_addr {
dec_label_pc_1cdbb:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cdc7() local_unnamed_addr {
dec_label_pc_1cdc7:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cdd3() local_unnamed_addr {
dec_label_pc_1cdd3:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$4618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1cde0:
  store i64 118247, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1ce9b() local_unnamed_addr {
dec_label_pc_1ce9b:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cea7() local_unnamed_addr {
dec_label_pc_1cea7:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1ceb3() local_unnamed_addr {
dec_label_pc_1ceb3:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$6618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1cec0:
  store i64 118489, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cf7b() local_unnamed_addr {
dec_label_pc_1cf7b:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cf87() local_unnamed_addr {
dec_label_pc_1cf87:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1cf93() local_unnamed_addr {
dec_label_pc_1cf93:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$4918__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1cfa0:
  store i64 118695, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d05b() local_unnamed_addr {
dec_label_pc_1d05b:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d067() local_unnamed_addr {
dec_label_pc_1d067:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d073() local_unnamed_addr {
dec_label_pc_1d073:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$4818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1d080:
  store i64 118919, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d13b() local_unnamed_addr {
dec_label_pc_1d13b:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d147() local_unnamed_addr {
dec_label_pc_1d147:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d153() local_unnamed_addr {
dec_label_pc_1d153:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$5018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1d160:
  store i64 119161, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d21b() local_unnamed_addr {
dec_label_pc_1d21b:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d227() local_unnamed_addr {
dec_label_pc_1d227:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d233() local_unnamed_addr {
dec_label_pc_1d233:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib10ioopenfileEJPNS2_10IoLib$FileEiPN4java4lang6StringES9_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1d240:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_1d251 = load i64, i64* %rsi.global-to-local, align 8
  %v1_1d251 = trunc i64 %v0_1d251 to i32
  %v11_1d251 = icmp eq i32 %v1_1d251, 1
  br i1 %v11_1d251, label %bb, label %dec_label_pc_1d25a

bb:                                               ; preds = %dec_label_pc_1d240
  %v2_1d254 = call i64 @function_1d330(i64 %arg1)
  store i64 %v2_1d254, i64* @rax, align 8
  %v0_1d25a.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1d25a

dec_label_pc_1d25a:                               ; preds = %bb, %dec_label_pc_1d240
  %v0_1d25a = phi i64 [ %v0_1d25a.pre, %bb ], [ %v0_1d251, %dec_label_pc_1d240 ]
  %v1_1d25a = trunc i64 %v0_1d25a to i32
  %v11_1d25a = icmp eq i32 %v1_1d25a, 2
  br i1 %v11_1d25a, label %bb251, label %dec_label_pc_1d263

bb251:                                            ; preds = %dec_label_pc_1d25a
  %v2_1d25d = call i64 @function_1d320(i64 %arg1)
  store i64 %v2_1d25d, i64* @rax, align 8
  %v0_1d263.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1d263

dec_label_pc_1d263:                               ; preds = %bb251, %dec_label_pc_1d25a
  %v0_1d263 = phi i64 [ %v0_1d263.pre, %bb251 ], [ %v0_1d25a, %dec_label_pc_1d25a ]
  %v4_1d263 = trunc i64 %v0_1d263 to i32
  %v5_1d263 = icmp eq i32 %v4_1d263, 0
  br i1 %v5_1d263, label %bb252, label %dec_label_pc_1d26b

bb252:                                            ; preds = %dec_label_pc_1d263
  %v8_1d265 = call i64 @function_1d2f8(i64 %arg1, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_1d265, i64* @rax, align 8
  br label %dec_label_pc_1d26b

dec_label_pc_1d26b:                               ; preds = %bb252, %dec_label_pc_1d263
  %v1_1d26b = icmp eq i64 %arg4, 0
  %v0_1d271 = load i64, i64* inttoptr (i64 119416 to i64*), align 8
  store i64 %v0_1d271, i64* %rsi.global-to-local, align 8
  br i1 %v1_1d26b, label %bb253, label %dec_label_pc_1d26b.dec_label_pc_1d27e_crit_edge

dec_label_pc_1d26b.dec_label_pc_1d27e_crit_edge:  ; preds = %dec_label_pc_1d26b
  %v2_1d278.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_1d27e

bb253:                                            ; preds = %dec_label_pc_1d26b
  %v1_1d278 = call i64 @function_1d33c()
  store i64 %v1_1d278, i64* @rax, align 8
  br label %dec_label_pc_1d27e

dec_label_pc_1d27e:                               ; preds = %dec_label_pc_1d26b.dec_label_pc_1d27e_crit_edge, %bb253
  %v2_1d278 = phi i64 [ %v2_1d278.pre, %dec_label_pc_1d26b.dec_label_pc_1d27e_crit_edge ], [ %v1_1d278, %bb253 ]
  ret i64 %v2_1d278
}

define i64 @function_1d2f8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_1d2f8:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1d2f8 = load i64, i64* @rdi, align 8
  store i64 %v2_1d2f8, i64* @rax, align 8
  %v1_1d2fb = add i64 %v2_1d2f8, 2224
  %v2_1d2fb = inttoptr i64 %v1_1d2fb to i64*
  %v3_1d2fb = load i64, i64* %v2_1d2fb, align 8
  store i64 %v3_1d2fb, i64* @rax, align 8
  %v0_1d302 = load i64, i64* @rbx, align 8
  store i64 %v0_1d302, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v3_1d2fb
}

define i64 @function_1d320(i64 %arg1) local_unnamed_addr {
dec_label_pc_1d320:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_1d323 = add i64 %arg1, 2240
  %v2_1d323 = inttoptr i64 %v1_1d323 to i64*
  %v3_1d323 = load i64, i64* %v2_1d323, align 8
  store i64 %v3_1d323, i64* @rax, align 8
  ret i64 %v3_1d323
}

define i64 @function_1d330(i64 %arg1) local_unnamed_addr {
dec_label_pc_1d330:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_1d333 = add i64 %arg1, 2232
  %v2_1d333 = inttoptr i64 %v1_1d333 to i64*
  %v3_1d333 = load i64, i64* %v2_1d333, align 8
  store i64 %v3_1d333, i64* @rax, align 8
  ret i64 %v3_1d333
}

define i64 @function_1d33c() local_unnamed_addr {
dec_label_pc_1d33c:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d351() local_unnamed_addr {
dec_label_pc_1d351:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN4lang12lang_luaj$5418__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1d3b0:
  store i64 119735, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d4a9() local_unnamed_addr {
dec_label_pc_1d4a9:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d4b5() local_unnamed_addr {
dec_label_pc_1d4b5:
  store i64 259, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d4c1() local_unnamed_addr {
dec_label_pc_1d4c1:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d4cd() local_unnamed_addr {
dec_label_pc_1d4cd:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$4418__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1d4e0:
  store i64 120039, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d5d9() local_unnamed_addr {
dec_label_pc_1d5d9:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d5e5() local_unnamed_addr {
dec_label_pc_1d5e5:
  store i64 259, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d5f1() local_unnamed_addr {
dec_label_pc_1d5f1:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d5fd() local_unnamed_addr {
dec_label_pc_1d5fd:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$1818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_1d610:
  store i64 120343, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d709() local_unnamed_addr {
dec_label_pc_1d709:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d715() local_unnamed_addr {
dec_label_pc_1d715:
  store i64 260, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d721() local_unnamed_addr {
dec_label_pc_1d721:
  store i64 259, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d72d() local_unnamed_addr {
dec_label_pc_1d72d:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib8_io_openEJPNS1_7VarargsEPN4java4lang6StringES9_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1d740:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_1d751 = icmp eq i64 %arg3, 0
  br i1 %v1_1d751, label %bb, label %dec_label_pc_1d740.dec_label_pc_1d75d_crit_edge

dec_label_pc_1d740.dec_label_pc_1d75d_crit_edge:  ; preds = %dec_label_pc_1d740
  %v2_1d75b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_1d75d

bb:                                               ; preds = %dec_label_pc_1d740
  %v1_1d75b = call i64 @function_1d7d4()
  store i64 %v1_1d75b, i64* @rax, align 8
  br label %dec_label_pc_1d75d

dec_label_pc_1d75d:                               ; preds = %dec_label_pc_1d740.dec_label_pc_1d75d_crit_edge, %bb
  %v2_1d75b = phi i64 [ %v2_1d75b.pre, %dec_label_pc_1d740.dec_label_pc_1d75d_crit_edge ], [ %v1_1d75b, %bb ]
  ret i64 %v2_1d75b
}

define i64 @function_1d7d4() local_unnamed_addr {
dec_label_pc_1d7d4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure8onInvokeEJPNS1_7VarargsES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1d7e0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v0_1d7f6 = load i64, i64* @rdi, align 8
  %v1_1d7fd = add i64 %v0_1d7f6, 8
  %v2_1d7fd = inttoptr i64 %v1_1d7fd to i64*
  %v3_1d7fd = load i64, i64* %v2_1d7fd, align 8
  store i64 %v3_1d7fd, i64* @rax, align 8
  %v1_1d801 = add i64 %v3_1d7fd, 80
  %v2_1d801 = inttoptr i64 %v1_1d801 to i32*
  %v3_1d801 = load i32, i32* %v2_1d801, align 4
  %v4_1d801 = zext i32 %v3_1d801 to i64
  store i64 %v4_1d801, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v4_1d801, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1d880(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8, i64 %arg9, i64 %arg10) local_unnamed_addr {
dec_label_pc_1d880:
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1d880 = load i64, i64* @rcx, align 8
  %v1_1d880 = add i64 %v0_1d880, 76
  %v2_1d880 = inttoptr i64 %v1_1d880 to i32*
  %v3_1d880 = load i32, i32* %v2_1d880, align 4
  %v4_1d880 = zext i32 %v3_1d880 to i64
  store i64 %v4_1d880, i64* @rax, align 8
  %v0_1d883 = load i64, i64* inttoptr (i64 120970 to i64*), align 8
  store i64 %v0_1d883, i64* @rdx, align 8
  %v5_1d88a = icmp eq i32 %v3_1d880, 0
  %v1_1d88c = icmp eq i1 %v5_1d88a, false
  br i1 %v1_1d88c, label %dec_label_pc_1d8ac, label %dec_label_pc_1d88e

dec_label_pc_1d88e:                               ; preds = %dec_label_pc_1d8ac, %dec_label_pc_1d880
  %v2_1d88c = phi i64 [ %v2_1d8ac, %dec_label_pc_1d8ac ], [ %v4_1d880, %dec_label_pc_1d880 ]
  ret i64 %v2_1d88c

dec_label_pc_1d8ac:                               ; preds = %dec_label_pc_1d880
  %v2_1d8ac = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_1d8ac, i64* @rax, align 8
  %v0_1d8b0 = load i64, i64* %rsi.global-to-local, align 8
  %v2_1d8b0 = add i64 %v0_1d8b0, 1
  %v17_1d8b0 = and i64 %v2_1d8b0, 4294967295
  store i64 %v17_1d8b0, i64* %rsi.global-to-local, align 8
  store i64 %v2_1d8ac, i64* @rdi, align 8
  store i64 %v2_1d8ac, i64* @rdx, align 8
  br label %dec_label_pc_1d88e
}

define i64 @function_1d8c1() local_unnamed_addr {
dec_label_pc_1d8c1:
  %v0_1d8c1 = load i64, i64* @rbx, align 8
  store i64 %v0_1d8c1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure6invokeEJPNS1_7VarargsES4_() local_unnamed_addr {
dec_label_pc_1d8d0:
  %v2_1d8d9 = load i64, i64* @rax, align 8
  store i64 %v2_1d8d9, i64* @rdx, align 8
  store i64 %v2_1d8d9, i64* @rdi, align 8
  ret i64 %v2_1d8d9
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib8onReturnEJvv(i64 %arg1) local_unnamed_addr {
dec_label_pc_1d8f0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1d8f2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1d8f4 = load i64, i64* @rdi, align 8
  %v1_1d8f4 = add i64 %v0_1d8f4, 24
  %v2_1d8f4 = inttoptr i64 %v1_1d8f4 to i64*
  %v3_1d8f4 = load i64, i64* %v2_1d8f4, align 8
  store i64 %v3_1d8f4, i64* @rax, align 8
  %v1_1d8f8 = add i64 %v3_1d8f4, 72
  %v2_1d8f8 = inttoptr i64 %v1_1d8f8 to i64*
  %v3_1d8f8 = load i64, i64* %v2_1d8f8, align 8
  store i64 %v3_1d8f8, i64* @rax, align 8
  %v1_1d8fc = add i64 %v3_1d8f8, 8
  %v2_1d8fc = inttoptr i64 %v1_1d8fc to i64*
  %v3_1d8fc = load i64, i64* %v2_1d8fc, align 8
  store i64 %v3_1d8fc, i64* %rbp.global-to-local, align 8
  %v1_1d900 = add i64 %v3_1d8fc, 72
  %v2_1d900 = inttoptr i64 %v1_1d900 to i8*
  %v3_1d900 = load i8, i8* %v2_1d900, align 1
  %v10_1d900 = icmp eq i8 %v3_1d900, 0
  br i1 %v10_1d900, label %dec_label_pc_1d910, label %dec_label_pc_1d906

dec_label_pc_1d906:                               ; preds = %dec_label_pc_1d8f0
  store i64 %v0_1d8f2, i64* %rbp.global-to-local, align 8
  ret i64 %v3_1d8f8

dec_label_pc_1d910:                               ; preds = %dec_label_pc_1d8f0
  store i64 %v0_1d8f4, i64* @rax, align 8
  store i64 %v0_1d8f4, i64* @rbx, align 8
  %v1_1d91c = icmp eq i64 %v0_1d8f4, 0
  br i1 %v1_1d91c, label %bb, label %dec_label_pc_1d924

bb:                                               ; preds = %dec_label_pc_1d910
  %v1_1d922 = call i64 @function_1d990()
  store i64 %v1_1d922, i64* @rax, align 8
  br label %dec_label_pc_1d924

dec_label_pc_1d924:                               ; preds = %bb, %dec_label_pc_1d910
  %v0_1d924 = phi i64 [ %v1_1d922, %bb ], [ %v0_1d8f4, %dec_label_pc_1d910 ]
  store i64 %v0_1d924, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d990() local_unnamed_addr {
dec_label_pc_1d990:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1d997() local_unnamed_addr {
dec_label_pc_1d997:
  %v0_1d997 = load i64, i64* @rax, align 8
  store i64 %v0_1d997, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure4callEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1d9c0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v0_1d9d2 = load i64, i64* @rdi, align 8
  %v1_1d9d9 = add i64 %v0_1d9d2, 8
  %v2_1d9d9 = inttoptr i64 %v1_1d9d9 to i64*
  %v3_1d9d9 = load i64, i64* %v2_1d9d9, align 8
  store i64 %v3_1d9d9, i64* @rax, align 8
  %v1_1d9dd = add i64 %v3_1d9d9, 80
  %v2_1d9dd = inttoptr i64 %v1_1d9dd to i32*
  %v3_1d9dd = load i32, i32* %v2_1d9dd, align 4
  %v4_1d9dd = zext i32 %v3_1d9dd to i64
  store i64 0, i64* @rax, align 8
  store i64 %v4_1d9dd, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1da32(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1da32:
  %v2_1da3e = load i64, i64* @rax, align 8
  store i64 %v2_1da3e, i64* @rdx, align 8
  store i64 %v2_1da3e, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_1da3e
}

define i64 @function_1da58() local_unnamed_addr {
dec_label_pc_1da58:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v2_1da58 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_1da58, i64* @rax, align 8
  %v0_1da5c = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_1da5c, i64* @rdx, align 8
  %v4_1da5f = call i64 @function_1da32(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_1da5f, i64* @rax, align 8
  ret i64 %v4_1da5f
}

define i64 @function_1da61(i64 %arg1) local_unnamed_addr {
dec_label_pc_1da61:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib11LibFunction9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_1da70:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1da77 = load i64, i64* @rdi, align 8
  store i64 %v0_1da77, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_1dad0() local_unnamed_addr {
dec_label_pc_1dad0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_1dae5() local_unnamed_addr {
dec_label_pc_1dae5:
  %rbp.global-to-local = alloca i64, align 8
  %v2_1dae5 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_1dae5 = load i64, i64* @rax, align 8
  %v4_1dae5 = trunc i64 %v3_1dae5 to i8
  %v5_1dae5 = add i8 %v4_1dae5, %v2_1dae5
  %v21_1dae5 = inttoptr i64 %v3_1dae5 to i8*
  store i8 %v5_1dae5, i8* %v21_1dae5, align 1
  %v2_1dae7 = load i64, i64* @rbx, align 8
  store i64 %v2_1dae7, i64* @rax, align 8
  store i64 %v2_1dae7, i64* @rdi, align 8
  %v0_1daf3 = load i64, i64* %rbp.global-to-local, align 8
  %v1_1daf3 = icmp eq i64 %v0_1daf3, 0
  br i1 %v1_1daf3, label %bb, label %dec_label_pc_1daf8

bb:                                               ; preds = %dec_label_pc_1dae5
  %v1_1daf6 = call i64 @function_1dafd()
  store i64 %v1_1daf6, i64* @rax, align 8
  br label %dec_label_pc_1daf8

dec_label_pc_1daf8:                               ; preds = %bb, %dec_label_pc_1dae5
  %v0_1daf8 = phi i64 [ %v1_1daf6, %bb ], [ %v2_1dae7, %dec_label_pc_1dae5 ]
  ret i64 %v0_1daf8
}

define i64 @function_1dafd() local_unnamed_addr {
dec_label_pc_1dafd:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib11rawopenfileEJPNS2_10IoLib$FileEiPN4java4lang6StringES9_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1db10:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_1db21 = load i64, i64* %rsi.global-to-local, align 8
  %v1_1db21 = trunc i64 %v0_1db21 to i32
  %v11_1db21 = icmp eq i32 %v1_1db21, 1
  br i1 %v11_1db21, label %bb, label %dec_label_pc_1db2a

bb:                                               ; preds = %dec_label_pc_1db10
  %v8_1db24 = call i64 @function_1dc00(i64 %arg1, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_1db24, i64* @rax, align 8
  %v0_1db2a.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1db2a

dec_label_pc_1db2a:                               ; preds = %bb, %dec_label_pc_1db10
  %v0_1db2a = phi i64 [ %v0_1db2a.pre, %bb ], [ %v0_1db21, %dec_label_pc_1db10 ]
  %v1_1db2a = trunc i64 %v0_1db2a to i32
  %v11_1db2a = icmp eq i32 %v1_1db2a, 2
  br i1 %v11_1db2a, label %bb251, label %dec_label_pc_1db33

bb251:                                            ; preds = %dec_label_pc_1db2a
  %v8_1db2d = call i64 @function_1dbe0(i64 %arg1, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_1db2d, i64* @rax, align 8
  %v0_1db33.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_1db33

dec_label_pc_1db33:                               ; preds = %bb251, %dec_label_pc_1db2a
  %v0_1db33 = phi i64 [ %v0_1db33.pre, %bb251 ], [ %v0_1db2a, %dec_label_pc_1db2a ]
  %v4_1db33 = trunc i64 %v0_1db33 to i32
  %v5_1db33 = icmp eq i32 %v4_1db33, 0
  br i1 %v5_1db33, label %bb252, label %dec_label_pc_1db3b

bb252:                                            ; preds = %dec_label_pc_1db33
  %v8_1db35 = call i64 @function_1dbc8(i64 %arg1, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_1db35, i64* @rax, align 8
  br label %dec_label_pc_1db3b

dec_label_pc_1db3b:                               ; preds = %bb252, %dec_label_pc_1db33
  %v1_1db3b = icmp eq i64 %arg4, 0
  %v0_1db41 = load i64, i64* inttoptr (i64 121672 to i64*), align 8
  store i64 %v0_1db41, i64* %rsi.global-to-local, align 8
  br i1 %v1_1db3b, label %bb253, label %dec_label_pc_1db3b.dec_label_pc_1db4e_crit_edge

dec_label_pc_1db3b.dec_label_pc_1db4e_crit_edge:  ; preds = %dec_label_pc_1db3b
  %v2_1db48.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_1db4e

bb253:                                            ; preds = %dec_label_pc_1db3b
  %v1_1db48 = call i64 @function_1dc18()
  store i64 %v1_1db48, i64* @rax, align 8
  br label %dec_label_pc_1db4e

dec_label_pc_1db4e:                               ; preds = %dec_label_pc_1db3b.dec_label_pc_1db4e_crit_edge, %bb253
  %v2_1db48 = phi i64 [ %v2_1db48.pre, %dec_label_pc_1db3b.dec_label_pc_1db4e_crit_edge ], [ %v1_1db48, %bb253 ]
  ret i64 %v2_1db48
}

define i64 @function_1dbc8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_1dbc8:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1dbc8 = load i64, i64* @rdi, align 8
  store i64 %v2_1dbc8, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v2_1dbc8
}

define i64 @function_1dbe0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_1dbe0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1dbe0 = load i64, i64* @rdi, align 8
  store i64 %v2_1dbe0, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v2_1dbe0
}

define i64 @function_1dc00(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_1dc00:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1dc00 = load i64, i64* @rdi, align 8
  store i64 %v2_1dc00, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v2_1dc00
}

define i64 @function_1dc18() local_unnamed_addr {
dec_label_pc_1dc18:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaStringC1EP6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1dc20:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1dc2c = load i64, i64* @rdi, align 8
  store i64 %v0_1dc2c, i64* @rbx, align 8
  %v17_1dc31 = load i64, i64* @rax, align 8
  ret i64 %v17_1dc31
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot6removeEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1dcf0:
  store i64 %arg1, i64* @rdi, align 8
  %v4_1dcf7 = load i64, i64* @rax, align 8
  ret i64 %v4_1dcf7
}

define i64 @function_1dd30() local_unnamed_addr {
dec_label_pc_1dd30:
  store i64 122167, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1dd78(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1dd78:
  %v0_1dd78 = load i64, i64* @rbx, align 8
  %v1_1dd78 = add i64 %v0_1dd78, 16
  %v2_1dd78 = inttoptr i64 %v1_1dd78 to i64*
  %v3_1dd78 = load i64, i64* %v2_1dd78, align 8
  store i64 %v3_1dd78, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v3_1dd78
}

define i64 @_ZN3org4luaj3vm29LuaString13valueFromCopyEJPS2_P6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1dd90:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 122275, i64* @rdi, align 8
  %v0_1dda3 = load i64, i64* @rdx, align 8
  store i64 %v0_1dda3, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib9StringLib4callEJPNS1_8LuaValueES5_S5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1de70:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_1e1ac() local_unnamed_addr {
dec_label_pc_1e1ac:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_1e29f(i64 %arg1) local_unnamed_addr {
dec_label_pc_1e29f:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1e2a8() local_unnamed_addr {
dec_label_pc_1e2a8:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6equalsEJbPS2_iS3_ii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1e2c0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 123602, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1e2d9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1e2d9, i64* @rbx, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot5keyeqEJbPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1e390:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1e3a2 = load i64, i64* @rdi, align 8
  %v1_1e3a2 = add i64 %v0_1e3a2, 8
  %v2_1e3a2 = inttoptr i64 %v1_1e3a2 to i64*
  %v3_1e3a2 = load i64, i64* %v2_1e3a2, align 8
  store i64 %v3_1e3a2, i64* @rbx, align 8
  store i64 %v3_1e3a2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1e3cf() local_unnamed_addr {
dec_label_pc_1e3cf:
  store i64 123862, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot3setEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1e400:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1e40b = load i64, i64* @rdi, align 8
  %v1_1e40b = add i64 %v0_1e40b, 16
  %v2_1e40b = inttoptr i64 %v1_1e40b to i64*
  %v3_1e40b = load i64, i64* %v2_1e40b, align 8
  store i64 %v0_1e40b, i64* @rbx, align 8
  %v1_1e417 = inttoptr i64 %v3_1e40b to i64*
  %v2_1e417 = load i64, i64* %v1_1e417, align 8
  store i64 %v2_1e417, i64* @rax, align 8
  store i64 7, i64* @rdx, align 8
  %v1_1e42d = inttoptr i64 %v2_1e417 to i64*
  %v2_1e42d = load i64, i64* %v1_1e42d, align 8
  store i64 %v2_1e42d, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1e47b() local_unnamed_addr {
dec_label_pc_1e47b:
  store i64 124034, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29WeakTable6weakenEJPNS1_8LuaValueES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_1e4b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1e4b6 = load i64, i64* @rdi, align 8
  store i64 %v0_1e4b6, i64* @rbx, align 8
  store i64 124096, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1e520() local_unnamed_addr {
dec_label_pc_1e520:
  %v0_1e520 = load i64, i64* @rax, align 8
  ret i64 %v0_1e520
}

define i64 @function_1e525(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1e525:
  %v0_1e525 = load i64, i64* @rbx, align 8
  store i64 %v0_1e525, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_1e525
}

define i64 @function_1e530() local_unnamed_addr {
dec_label_pc_1e530:
  store i64 124215, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm229WeakTable$WeakKeyAndValueSlotC1EPNS1_8LuaValueES4_PNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1e5b0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1e5b0 = load i64, i64* %r14.global-to-local, align 8
  %v0_1e5b2 = load i64, i64* %r13.global-to-local, align 8
  %v0_1e5b7 = load i64, i64* %r12.global-to-local, align 8
  %v0_1e5b9 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1e5ba = load i64, i64* @rcx, align 8
  store i64 %v0_1e5ba, i64* %r12.global-to-local, align 8
  %v0_1e5bd = load i64, i64* @rbx, align 8
  %v0_1e5be = load i64, i64* @rdi, align 8
  store i64 %v0_1e5be, i64* @rbx, align 8
  %v0_1e5c1 = load i64, i64* %rsi.global-to-local, align 8
  %v0_1e5cf = load i64, i64* @rax, align 8
  store i64 %v0_1e5cf, i64* %r13.global-to-local, align 8
  store i64 %v0_1e5c1, i64* @rax, align 8
  store i64 %v0_1e5c1, i64* @rdi, align 8
  %v2_1e5e9 = add i64 %v0_1e5be, 8
  %v3_1e5e9 = inttoptr i64 %v2_1e5e9 to i64*
  store i64 %v0_1e5cf, i64* %v3_1e5e9, align 8
  %v0_1e5ed = load i64, i64* %r13.global-to-local, align 8
  %v1_1e5ed = load i64, i64* @rbx, align 8
  %v2_1e5ed = add i64 %v1_1e5ed, 16
  %v3_1e5ed = inttoptr i64 %v2_1e5ed to i64*
  store i64 %v0_1e5ed, i64* %v3_1e5ed, align 8
  %v0_1e5f1 = load i64, i64* %r12.global-to-local, align 8
  %v1_1e5f1 = load i64, i64* @rbx, align 8
  %v2_1e5f1 = add i64 %v1_1e5f1, 24
  %v3_1e5f1 = inttoptr i64 %v2_1e5f1 to i64*
  store i64 %v0_1e5f1, i64* %v3_1e5f1, align 8
  %v0_1e5f8 = load i64, i64* @rax, align 8
  %v1_1e5f8 = trunc i64 %v0_1e5f8 to i32
  %v2_1e5f8 = load i64, i64* @rbx, align 8
  %v3_1e5f8 = add i64 %v2_1e5f8, 32
  %v4_1e5f8 = inttoptr i64 %v3_1e5f8 to i32*
  store i32 %v1_1e5f8, i32* %v4_1e5f8, align 4
  store i64 %v0_1e5bd, i64* @rbx, align 8
  store i64 %v0_1e5b9, i64* %rbp.global-to-local, align 8
  store i64 %v0_1e5b7, i64* %r12.global-to-local, align 8
  store i64 %v0_1e5b2, i64* %r13.global-to-local, align 8
  store i64 %v0_1e5b0, i64* %r14.global-to-local, align 8
  %v0_1e603 = load i64, i64* @rax, align 8
  ret i64 %v0_1e603
}

define i64 @_ZN3org4luaj3vm28LuaTable8siftDownEJviiPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1e610:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1e61c = load i64, i64* %rsi.global-to-local, align 8
  %v3_1e620 = mul i64 %v0_1e61c, 2
  store i64 %v3_1e620, i64* @rax, align 8
  ret i64 %v3_1e620
}

define i64 @function_1e706(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1e706:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_1e706 = udiv i64 %arg4, 256
  %v4_1e706 = and i64 %arg4, -65536
  %v7_1e706 = mul i64 %arg4, 256
  %v2_1e706.masked = and i64 %v2_1e706, 72057594037862655
  %v8_1e706 = or i64 %v7_1e706, %v4_1e706
  %v9_1e706 = or i64 %v8_1e706, %v2_1e706.masked
  store i64 %v9_1e706, i64* @rcx, align 8
  %v2_1e708 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_1e708 = load i64, i64* @rax, align 8
  %v4_1e708 = trunc i64 %v3_1e708 to i8
  %v5_1e708 = add i8 %v4_1e708, %v2_1e708
  %v21_1e708 = inttoptr i64 %v3_1e708 to i8*
  store i8 %v5_1e708, i8* %v21_1e708, align 1
  %v0_1e70a = load i64, i64* @rax, align 8
  %v1_1e70a = add i64 %v0_1e70a, 99
  %v2_1e70a = inttoptr i64 %v1_1e70a to i8*
  %v3_1e70a = load i8, i8* %v2_1e70a, align 1
  %v4_1e70a = load i64, i64* @rcx, align 8
  %v5_1e70a = trunc i64 %v4_1e70a to i8
  %v6_1e70a = add i8 %v5_1e70a, %v3_1e70a
  store i8 %v6_1e70a, i8* %v2_1e70a, align 1
  %v0_1e70d = load i64, i64* @rax, align 8
  ret i64 %v0_1e70d
}

define i64 @function_1e7d0() local_unnamed_addr {
dec_label_pc_1e7d0:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  ret i64 %tmp229
}

define i64 @function_1e7f4() local_unnamed_addr {
dec_label_pc_1e7f4:
  %v0_1e7f4 = load i64, i64* @rbx, align 8
  store i64 %v0_1e7f4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1e7fd() local_unnamed_addr {
dec_label_pc_1e7fd:
  %rbp.global-to-local = alloca i64, align 8
  %v0_1e7fd = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1e7fd, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable8heapSortEJviPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1e810:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1e810 = load i64, i64* %rsi.global-to-local, align 8
  %v1_1e816 = trunc i64 %v0_1e810 to i32
  %tmp245 = icmp slt i32 %v1_1e816, 0
  %v3_1e816 = zext i1 %tmp245 to i32
  %v4_1e81d = add i32 %v3_1e816, %v1_1e816
  %v3_1e821 = sdiv i32 %v4_1e81d, 2
  %v0_1e823 = load i64, i64* @rdi, align 8
  store i64 %v0_1e823, i64* @r12, align 8
  %v2_1e82d = add nsw i32 %v3_1e821, -1
  %v17_1e82d = zext i32 %v2_1e82d to i64
  %factor = mul nuw nsw i64 %v17_1e82d, 2
  %v4_1e845 = or i64 %factor, 1
  %v4_1e850 = and i64 %v4_1e845, 4294967295
  store i64 %v4_1e850, i64* @rcx, align 8
  %v2_1e85e = add nuw nsw i64 %v4_1e845, 4294967295
  %v17_1e85e = and i64 %v2_1e85e, 4294967294
  store i64 %v17_1e85e, i64* @rax, align 8
  %tmp246 = mul i64 %v0_1e810, 4294967296
  %sext = add i64 %tmp246, -4294967296
  %v1_1e86b = sdiv i64 %sext, 4294967296
  %v2_1e86b = call i64 @function_1e9f0(i64 %v1_1e86b)
  store i64 %v2_1e86b, i64* @rax, align 8
  ret i64 %v2_1e86b
}

define i64 @function_1e9f0(i64 %arg1) local_unnamed_addr {
dec_label_pc_1e9f0:
  %tmp8 = call i32 @__decompiler_undefined_function_2()
  %v4_1e9f0 = add i32 %tmp8, -1
  %v4_1e9fa = zext i32 %v4_1e9f0 to i64
  store i64 %v4_1e9fa, i64* @rax, align 8
  store i64 %arg1, i64* @r14, align 8
  %v4_1ea0c = trunc i64 %arg1 to i32
  %tmp9 = icmp slt i32 %v4_1ea0c, 1
  br i1 %tmp9, label %bb, label %dec_label_pc_1ea11

bb:                                               ; preds = %dec_label_pc_1e9f0
  %v11_1ea0f = call i64 @function_1ea8c(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_1ea0f, i64* @rax, align 8
  %v4_1ea16.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_1ea11

dec_label_pc_1ea11:                               ; preds = %bb, %dec_label_pc_1e9f0
  %v0_1ea3f = phi i64 [ %v4_1ea16.pre, %bb ], [ %arg1, %dec_label_pc_1e9f0 ]
  %v0_1ea11 = load i64, i64* @r12, align 8
  %v1_1ea11 = add i64 %v0_1ea11, 8
  %v2_1ea11 = inttoptr i64 %v1_1ea11 to i64*
  %v3_1ea11 = load i64, i64* %v2_1ea11, align 8
  store i64 %v3_1ea11, i64* @rdi, align 8
  %v1_1ea16 = add i64 %v3_1ea11, 8
  %v2_1ea16 = inttoptr i64 %v1_1ea16 to i32*
  %v3_1ea16 = load i32, i32* %v2_1ea16, align 4
  %v5_1ea16 = trunc i64 %v0_1ea3f to i32
  %v1_1ea1a = add i64 %v3_1ea11, 16
  store i64 %v1_1ea1a, i64* @rax, align 8
  %tmp10 = icmp ugt i32 %v3_1ea16, %v5_1ea16
  br i1 %tmp10, label %dec_label_pc_1ea3b, label %dec_label_pc_1ea20

dec_label_pc_1ea20:                               ; preds = %dec_label_pc_1ea11
  %v1_1ea20 = call i64 @function_1eae7(i64 %v3_1ea11)
  store i64 %v1_1ea20, i64* @rax, align 8
  ret i64 %v1_1ea20

dec_label_pc_1ea3b:                               ; preds = %dec_label_pc_1ea11
  store i64 %v0_1ea3f, i64* @rdx, align 8
  %v2_1ea42 = mul i64 %v0_1ea3f, 8
  %v3_1ea42 = add i64 %v1_1ea1a, %v2_1ea42
  store i64 %v3_1ea42, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1ea8c(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_1ea8c:
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg5, i64* @r14, align 8
  %v0_1ea9a = load i64, i64* @rax, align 8
  ret i64 %v0_1ea9a
}

define i64 @function_1eaa0() local_unnamed_addr {
dec_label_pc_1eaa0:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  ret i64 %tmp229
}

define i64 @function_1eac4() local_unnamed_addr {
dec_label_pc_1eac4:
  %v0_1eac4 = load i64, i64* @rbx, align 8
  store i64 %v0_1eac4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1eacd() local_unnamed_addr {
dec_label_pc_1eacd:
  %rbp.global-to-local = alloca i64, align 8
  %v0_1eacd = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1eacd, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1eade(i64 %arg1) local_unnamed_addr {
dec_label_pc_1eade:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1eae7(i64 %arg1) local_unnamed_addr {
dec_label_pc_1eae7:
  %v0_1eae7 = load i64, i64* @r14, align 8
  store i64 %v0_1eae7, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$76$15$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1eb00:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1eb07 = load i64, i64* @rdi, align 8
  store i64 %v0_1eb07, i64* @rbx, align 8
  store i64 125727, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$21$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1eb60:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1eb67 = load i64, i64* @rdi, align 8
  store i64 %v0_1eb67, i64* @rbx, align 8
  store i64 125823, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$20$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ebc0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ebc7 = load i64, i64* @rdi, align 8
  store i64 %v0_1ebc7, i64* @rbx, align 8
  store i64 125919, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 125944, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$76$16$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ec20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ec27 = load i64, i64* @rdi, align 8
  store i64 %v0_1ec27, i64* @rbx, align 8
  store i64 126015, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 126040, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$22$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ec80:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ec87 = load i64, i64* @rdi, align 8
  store i64 %v0_1ec87, i64* @rbx, align 8
  store i64 126111, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$76$17$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ece0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ece7 = load i64, i64* @rdi, align 8
  store i64 %v0_1ece7, i64* @rbx, align 8
  store i64 126207, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib9_io_writeEJPNS1_7VarargsES5_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ed40:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ed40 = load i64, i64* %r13.global-to-local, align 8
  %v0_1ed42 = load i64, i64* %r12.global-to-local, align 8
  %v0_1ed44 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1ed45 = load i64, i64* @rbx, align 8
  %v0_1ed46 = load i64, i64* @rdi, align 8
  store i64 %v0_1ed46, i64* @rbx, align 8
  %v0_1ed49 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ed49, i64* %rbp.global-to-local, align 8
  %v1_1ed50 = add i64 %v0_1ed46, 32
  %v2_1ed50 = inttoptr i64 %v1_1ed50 to i64*
  %v3_1ed50 = load i64, i64* %v2_1ed50, align 8
  store i64 %v3_1ed50, i64* @rdi, align 8
  %v1_1ed54 = icmp eq i64 %v3_1ed50, 0
  br i1 %v1_1ed54, label %dec_label_pc_1edb5, label %dec_label_pc_1ed59

dec_label_pc_1ed59:                               ; preds = %dec_label_pc_1edb5, %dec_label_pc_1ed40
  %v0_1ed59 = phi i64 [ %v0_1ed59.pre, %dec_label_pc_1edb5 ], [ %v3_1ed50, %dec_label_pc_1ed40 ]
  %v1_1ed59 = inttoptr i64 %v0_1ed59 to i64*
  %v2_1ed59 = load i64, i64* %v1_1ed59, align 8
  store i64 %v2_1ed59, i64* @rax, align 8
  %v4_1ed62 = trunc i64 %v2_1ed59 to i8
  %v5_1ed62 = icmp eq i8 %v4_1ed62, 0
  %v1_1ed64 = icmp eq i1 %v5_1ed62, false
  br i1 %v1_1ed64, label %dec_label_pc_1edd9, label %dec_label_pc_1ed66

dec_label_pc_1ed66:                               ; preds = %dec_label_pc_1ed59
  %v2_1ed66 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_1ed66, i64* @rax, align 8
  %v0_1ed6a = load i64, i64* @rbx, align 8
  %v1_1ed6a = add i64 %v0_1ed6a, 32
  %v2_1ed6a = inttoptr i64 %v1_1ed6a to i64*
  %v3_1ed6a = load i64, i64* %v2_1ed6a, align 8
  store i64 %v3_1ed6a, i64* %r12.global-to-local, align 8
  %v0_1ed6e = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1ed6e, i64* @rdi, align 8
  store i64 1, i64* @rbx, align 8
  %v4_1ed79 = trunc i64 %v2_1ed66 to i32
  store i64 %v2_1ed66, i64* %r13.global-to-local, align 8
  %tmp251 = icmp slt i32 %v4_1ed79, 1
  br i1 %tmp251, label %dec_label_pc_1eda7, label %dec_label_pc_1ed80.preheader

dec_label_pc_1ed80.preheader:                     ; preds = %dec_label_pc_1ed66
  %v1_1ed92 = inttoptr i64 %v3_1ed6a to i64*
  br label %dec_label_pc_1ed80

dec_label_pc_1ed80:                               ; preds = %dec_label_pc_1ed80.preheader, %dec_label_pc_1ed80
  %v0_1ed84 = phi i64 [ %v17_1ed89, %dec_label_pc_1ed80 ], [ 1, %dec_label_pc_1ed80.preheader ]
  store i64 %v2_1ed66, i64* @rax, align 8
  store i64 %v0_1ed84, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ed6e, i64* @rdi, align 8
  %v2_1ed89 = add nuw nsw i64 %v0_1ed84, 1
  %v17_1ed89 = and i64 %v2_1ed89, 4294967295
  store i64 %v17_1ed89, i64* @rbx, align 8
  %v2_1ed92 = load i64, i64* %v1_1ed92, align 8
  store i64 %v2_1ed92, i64* @rdx, align 8
  store i64 %v2_1ed66, i64* %rsi.global-to-local, align 8
  store i64 %v3_1ed6a, i64* @rdi, align 8
  %v5_1eda5 = icmp slt i64 %v2_1ed66, %v17_1ed89
  br i1 %v5_1eda5, label %dec_label_pc_1eda7.loopexit, label %dec_label_pc_1ed80

dec_label_pc_1eda7.loopexit:                      ; preds = %dec_label_pc_1ed80
  br label %dec_label_pc_1eda7

dec_label_pc_1eda7:                               ; preds = %dec_label_pc_1eda7.loopexit, %dec_label_pc_1ed66
  store i64 %v3_1ed6a, i64* @rax, align 8
  store i64 %v0_1ed45, i64* @rbx, align 8
  store i64 %v0_1ed44, i64* %rbp.global-to-local, align 8
  store i64 %v0_1ed42, i64* %r12.global-to-local, align 8
  store i64 %v0_1ed40, i64* %r13.global-to-local, align 8
  ret i64 %v3_1ed6a

dec_label_pc_1edb5:                               ; preds = %dec_label_pc_1ed40
  %v0_1edb5 = load i64, i64* inttoptr (i64 126396 to i64*), align 8
  store i64 %v0_1edb5, i64* @rcx, align 8
  %v0_1edbc = load i64, i64* inttoptr (i64 126403 to i64*), align 8
  store i64 %v0_1edbc, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v0_1edd0 = load i64, i64* @rax, align 8
  store i64 %v0_1edd0, i64* @rdi, align 8
  store i64 %v0_1edd0, i64* %v2_1ed50, align 8
  %v0_1ed59.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_1ed59

dec_label_pc_1edd9:                               ; preds = %dec_label_pc_1ed59
  ret i64 %v2_1ed59
}

define i64 @_ZN3org4luaj3vm23lib5IoLib9_io_flushEJPNS1_7VarargsEv(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1ede0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ede0 = load i64, i64* @rbx, align 8
  %v0_1ede1 = load i64, i64* @rdi, align 8
  store i64 %v0_1ede1, i64* @rbx, align 8
  %v1_1ede4 = add i64 %v0_1ede1, 32
  %v2_1ede4 = inttoptr i64 %v1_1ede4 to i64*
  %v3_1ede4 = load i64, i64* %v2_1ede4, align 8
  store i64 %v3_1ede4, i64* @rdi, align 8
  %v1_1ede8 = icmp eq i64 %v3_1ede4, 0
  br i1 %v1_1ede8, label %dec_label_pc_1ee10, label %dec_label_pc_1eded

dec_label_pc_1eded:                               ; preds = %dec_label_pc_1ede0
  %v1_1eded = inttoptr i64 %v3_1ede4 to i64*
  %v2_1eded = load i64, i64* %v1_1eded, align 8
  store i64 %v2_1eded, i64* @rax, align 8
  %v4_1edf6 = trunc i64 %v2_1eded to i8
  %v5_1edf6 = icmp eq i8 %v4_1edf6, 0
  %v1_1edf8 = icmp eq i1 %v5_1edf6, false
  br i1 %v1_1edf8, label %dec_label_pc_1ee34, label %dec_label_pc_1edfa

dec_label_pc_1edfa:                               ; preds = %dec_label_pc_1eded
  %v3_1edfa = load i64, i64* %v2_1ede4, align 8
  store i64 %v3_1edfa, i64* @rdi, align 8
  %v1_1edfe = inttoptr i64 %v3_1edfa to i64*
  %v2_1edfe = load i64, i64* %v1_1edfe, align 8
  store i64 %v2_1edfe, i64* @rax, align 8
  %v0_1ee07 = load i64, i64* inttoptr (i64 126478 to i64*), align 8
  store i64 %v0_1ee07, i64* @rax, align 8
  store i64 %v0_1ede0, i64* @rbx, align 8
  ret i64 %v0_1ee07

dec_label_pc_1ee10:                               ; preds = %dec_label_pc_1ede0
  %v1_1ee0f = load i64, i64* @rax, align 8
  ret i64 %v1_1ee0f

dec_label_pc_1ee34:                               ; preds = %dec_label_pc_1eded
  ret i64 %v2_1eded
}

define i64 @_ZN3org4luaj3vm28LuaTable4sortEJvPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ee40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ee4a = load i64, i64* @rdi, align 8
  %v0_1ee4d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ee4d, i64* @rbx, align 8
  store i64 %v0_1ee4a, i64* @rdx, align 8
  store i64 126588, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1f010() local_unnamed_addr {
dec_label_pc_1f010:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1f017(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f017:
  store i64 %arg2, i64* @rdi, align 8
  %v1_1f017 = load i64, i64* @rax, align 8
  ret i64 %v1_1f017
}

define i64 @function_1f019() local_unnamed_addr {
dec_label_pc_1f019:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState13match_captureEJiii"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1f020:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f02e = load i64, i64* @rdx, align 8
  %v2_1f02e = add i64 %v0_1f02e, 4294967247
  %v17_1f02e = and i64 %v2_1f02e, 4294967295
  store i64 %v17_1f02e, i64* @rdx, align 8
  %v2_1f037 = load i64, i64* @rdi, align 8
  store i64 %v17_1f02e, i64* @rbx, align 8
  %v1_1f045 = add i64 %v2_1f037, 48
  %v2_1f045 = inttoptr i64 %v1_1f045 to i64*
  %v3_1f045 = load i64, i64* %v2_1f045, align 8
  store i64 %v3_1f045, i64* @rax, align 8
  %v2_1f055 = mul nuw nsw i64 %v17_1f02e, 4
  %v1_1f068 = add i64 %v2_1f037, 8
  %v2_1f068 = inttoptr i64 %v1_1f068 to i64*
  %v3_1f068 = load i64, i64* %v2_1f068, align 8
  store i64 %v3_1f068, i64* @rdi, align 8
  %v0_1f06c = load i64, i64* %rsi.global-to-local, align 8
  %v1_1f06f = inttoptr i64 %v3_1f068 to i64*
  %v2_1f06f = load i64, i64* %v1_1f06f, align 8
  %v4_1f078 = sub i64 %v2_1f06f, %v0_1f06c
  %v20_1f078 = and i64 %v4_1f078, 4294967295
  store i64 %v20_1f078, i64* @rax, align 8
  %v1_1f080 = add i64 %v2_1f037, 40
  %v2_1f080 = inttoptr i64 %v1_1f080 to i64*
  %v3_1f080 = load i64, i64* %v2_1f080, align 8
  store i64 %v3_1f080, i64* @rax, align 8
  store i64 127128, i64* @rdi, align 8
  %v3_1f098 = add i64 %v3_1f080, 12
  %v4_1f098 = add i64 %v3_1f098, %v2_1f055
  %v5_1f098 = inttoptr i64 %v4_1f098 to i32*
  %v6_1f098 = load i32, i32* %v5_1f098, align 4
  %v7_1f098 = zext i32 %v6_1f098 to i64
  store i64 %v7_1f098, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 127155, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1f132() local_unnamed_addr {
dec_label_pc_1f132:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$DeadSlot8toStringEJPN4java4lang6StringEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f150:
  store i64 %arg1, i64* @rdi, align 8
  %v5_1f155 = load i64, i64* @rax, align 8
  ret i64 %v5_1f155
}

define i64 @function_1f1f9() local_unnamed_addr {
dec_label_pc_1f1f9:
  %v0_1f1fe = load i64, i64* @rbx, align 8
  store i64 %v0_1f1fe, i64* @rdi, align 8
  %v1_1f1fe = load i64, i64* @rax, align 8
  ret i64 %v1_1f1fe
}

define i64 @function_1f233(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1f233:
  %v0_1f233 = load i64, i64* @rbx, align 8
  store i64 %v0_1f233, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_1f23f = load i64, i64* @rax, align 8
  ret i64 %v0_1f23f
}

define i64 @function_1f240() local_unnamed_addr {
dec_label_pc_1f240:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11_file_writeEJPNS1_7VarargsEPNS1_8LuaValueES5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1f250:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1f258 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f258, i64* @rbx, align 8
  store i64 127586, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f258, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1f2f0() local_unnamed_addr {
dec_label_pc_1f2f0:
  store i64 1, i64* @rdi, align 8
  %v0_1f306 = load i64, i64* @rax, align 8
  ret i64 %v0_1f306
}

define i64 @"_ZN4lang14lang_luaj$69$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f310:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f317 = load i64, i64* @rdi, align 8
  %v2_1f31b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_1f31b, i64* @rbx, align 8
  store i64 2, i64* @rax, align 8
  store i64 %v2_1f31b, i64* @rdi, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  %v1_1f351 = add i64 %v0_1f317, 32
  %v2_1f351 = inttoptr i64 %v1_1f351 to i64*
  %v3_1f351 = load i64, i64* %v2_1f351, align 8
  store i64 %v3_1f351, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 127851, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$658onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f3b0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f3b6 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f3b6, i64* @rbx, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 127977, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11_file_flushEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f470:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$44$28onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f4f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  %v0_1f4f7 = load i64, i64* @rdi, align 8
  store i64 %v0_1f4f7, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_1f508 = add i64 %v0_1f4f7, 24
  %v2_1f508 = inttoptr i64 %v1_1f508 to i64*
  %v3_1f508 = load i64, i64* %v2_1f508, align 8
  store i64 %v3_1f508, i64* @rax, align 8
  %v1_1f50c = add i64 %v3_1f508, 8
  %v2_1f50c = inttoptr i64 %v1_1f50c to i32*
  %v3_1f50c = load i32, i32* %v2_1f50c, align 4
  %v4_1f50c = zext i32 %v3_1f50c to i64
  store i64 %v4_1f50c, i64* @rcx, align 8
  %v5_1f50f = icmp eq i32 %v3_1f50c, 0
  br i1 %v5_1f50f, label %bb, label %dec_label_pc_1f513

bb:                                               ; preds = %dec_label_pc_1f4f0
  %v2_1f511 = call i64 @function_1f578(i64 %arg2)
  store i64 %v2_1f511, i64* @rax, align 8
  %v0_1f52e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_1f513

dec_label_pc_1f513:                               ; preds = %bb, %dec_label_pc_1f4f0
  %v0_1f52e = phi i64 [ %v0_1f52e.pre, %bb ], [ %v0_1f4f7, %dec_label_pc_1f4f0 ]
  %v0_1f513 = phi i64 [ %v2_1f511, %bb ], [ %v3_1f508, %dec_label_pc_1f4f0 ]
  %v1_1f513 = add i64 %v0_1f513, 16
  %v2_1f513 = inttoptr i64 %v1_1f513 to i64*
  %v3_1f513 = load i64, i64* %v2_1f513, align 8
  store i64 %v3_1f513, i64* @rdi, align 8
  %v0_1f517 = load i64, i64* inttoptr (i64 128286 to i64*), align 8
  store i64 %v0_1f517, i64* @rdx, align 8
  %v1_1f525 = inttoptr i64 %v3_1f513 to i64*
  %v2_1f525 = load i64, i64* %v1_1f525, align 8
  store i64 %v2_1f525, i64* @rax, align 8
  %v1_1f52e = add i64 %v0_1f52e, 40
  %v2_1f52e = inttoptr i64 %v1_1f52e to i64*
  %v3_1f52e = load i64, i64* %v2_1f52e, align 8
  store i64 %v3_1f52e, i64* @rax, align 8
  %v1_1f536 = add i64 %v3_1f52e, 8
  %v2_1f536 = inttoptr i64 %v1_1f536 to i32*
  %v3_1f536 = load i32, i32* %v2_1f536, align 4
  %v4_1f536 = zext i32 %v3_1f536 to i64
  store i64 %v4_1f536, i64* @rdx, align 8
  %v5_1f539 = icmp eq i32 %v3_1f536, 0
  br i1 %v5_1f539, label %bb243, label %dec_label_pc_1f53d

bb243:                                            ; preds = %dec_label_pc_1f513
  %v2_1f53b = call i64 @function_1f578(i64 %v3_1f513)
  store i64 %v2_1f53b, i64* @rax, align 8
  br label %dec_label_pc_1f53d

dec_label_pc_1f53d:                               ; preds = %bb243, %dec_label_pc_1f513
  store i64 128324, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1f578(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f578:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11_file_linesEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f590:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1f598 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f598, i64* @rbx, align 8
  store i64 128418, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f598, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1f602(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1f602:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %v0_1f602 = load i64, i64* %r13.global-to-local, align 8
  %v1_1f602 = load i64, i64* @rbx, align 8
  %v2_1f602 = add i64 %v1_1f602, 16
  %v3_1f602 = inttoptr i64 %v2_1f602 to i64*
  store i64 %v0_1f602, i64* %v3_1f602, align 8
  %v0_1f606 = load i64, i64* @rbx, align 8
  %v1_1f606 = add i64 %v0_1f606, 8
  %v2_1f606 = inttoptr i64 %v1_1f606 to i32*
  store i32 19, i32* %v2_1f606, align 4
  %v0_1f60d = load i64, i64* %r12.global-to-local, align 8
  %v1_1f60d = load i64, i64* @rbx, align 8
  %v2_1f60d = add i64 %v1_1f60d, 32
  %v3_1f60d = inttoptr i64 %v2_1f60d to i64*
  store i64 %v0_1f60d, i64* %v3_1f60d, align 8
  %v0_1f611 = load i64, i64* @rbx, align 8
  store i64 %v0_1f611, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v0_1f611
}

define i64 @function_1f620(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1f620:
  store i64 %arg3, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  %v1_1f636 = add i64 %arg3, -1
  %v10_1f636 = icmp eq i64 %v1_1f636, 0
  store i64 %v1_1f636, i64* @rdx, align 8
  br i1 %v10_1f636, label %dec_label_pc_1f644, label %dec_label_pc_1f63c

dec_label_pc_1f63c:                               ; preds = %dec_label_pc_1f620
  %v0_1f64b.pre = load i64, i64* @rax, align 8
  store i64 %v0_1f64b.pre, i64* @rdi, align 8
  br label %dec_label_pc_1f644

dec_label_pc_1f644:                               ; preds = %dec_label_pc_1f620, %dec_label_pc_1f63c
  store i64 128587, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1f68d() local_unnamed_addr {
dec_label_pc_1f68d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217LuaTable$LinkSlot6removeEJPNS1_13LuaTable$SlotEPNS1_19LuaTable$StrongSlotE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f6a0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f6a0 = load i64, i64* %r13.global-to-local, align 8
  %v0_1f6a2 = load i64, i64* %r12.global-to-local, align 8
  %v0_1f6a4 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1f6a5 = load i64, i64* @rbx, align 8
  %v0_1f6a6 = load i64, i64* @rdi, align 8
  store i64 %v0_1f6a6, i64* @rbx, align 8
  %v1_1f6ad = load i64, i64* %rsi.global-to-local, align 8
  %v12_1f6ad = icmp eq i64 %v0_1f6a6, %v1_1f6ad
  br i1 %v12_1f6ad, label %dec_label_pc_1f6f0, label %dec_label_pc_1f6b2

dec_label_pc_1f6b2:                               ; preds = %dec_label_pc_1f6a0
  %v1_1f6b2 = add i64 %v0_1f6a6, 16
  %v2_1f6b2 = inttoptr i64 %v1_1f6b2 to i64*
  %v3_1f6b2 = load i64, i64* %v2_1f6b2, align 8
  store i64 9, i64* @rdx, align 8
  store i64 %v1_1f6ad, i64* %rsi.global-to-local, align 8
  store i64 %v3_1f6b2, i64* @rdi, align 8
  store i64 0, i64* %v2_1f6b2, align 8
  %v0_1f6df = load i64, i64* @rbx, align 8
  store i64 %v0_1f6df, i64* @rax, align 8
  store i64 %v0_1f6a5, i64* @rbx, align 8
  store i64 %v0_1f6a4, i64* %rbp.global-to-local, align 8
  store i64 %v0_1f6a2, i64* %r12.global-to-local, align 8
  store i64 %v0_1f6a0, i64* %r13.global-to-local, align 8
  ret i64 %v0_1f6df

dec_label_pc_1f6f0:                               ; preds = %dec_label_pc_1f6a0
  store i64 128759, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1f762(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1f762:
  %v0_1f762 = load i64, i64* @r12, align 8
  store i64 %v0_1f762, i64* @rax, align 8
  %v0_1f765 = load i64, i64* @rbp, align 8
  %v2_1f765 = add i64 %v0_1f762, 8
  %v3_1f765 = inttoptr i64 %v2_1f765 to i64*
  store i64 %v0_1f765, i64* %v3_1f765, align 8
  %v0_1f76a = load i64, i64* @rbx, align 8
  %v1_1f76a = load i64, i64* @r12, align 8
  %v2_1f76a = add i64 %v1_1f76a, 16
  %v3_1f76a = inttoptr i64 %v2_1f76a to i64*
  store i64 %v0_1f76a, i64* %v3_1f76a, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_1f779 = load i64, i64* @rax, align 8
  ret i64 %v0_1f779
}

define i64 @function_1f780() local_unnamed_addr {
dec_label_pc_1f780:
  %v2_1f780 = load i64, i64* @rbp, align 8
  store i64 %v2_1f780, i64* @rax, align 8
  store i64 %v2_1f780, i64* @rdi, align 8
  %v4_1f792 = call i64 @function_1f762(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_1f792, i64* @rax, align 8
  ret i64 %v4_1f792
}

define i64 @_ZN3org4luaj3vm23lib5IoLib13_file_setvbufEJPNS1_7VarargsEPNS1_8LuaValueEPN4java4lang6StringEi(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1f7a0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_1f810() local_unnamed_addr {
dec_label_pc_1f810:
  store i64 1, i64* @rdi, align 8
  %v0_1f826 = load i64, i64* @rax, align 8
  ret i64 %v0_1f826
}

define i64 @"_ZN4lang14lang_luaj$56$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f830:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f836 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f836, i64* @rbx, align 8
  %v0_1f839 = load i64, i64* @rdi, align 8
  store i64 %v0_1f839, i64* %rbp.global-to-local, align 8
  store i64 %v0_1f836, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f836, i64* @rdi, align 8
  %v1_1f862 = add i64 %v0_1f839, 32
  %v2_1f862 = inttoptr i64 %v1_1f862 to i64*
  %v3_1f862 = load i64, i64* %v2_1f862, align 8
  store i64 %v3_1f862, i64* @rax, align 8
  %v1_1f86a = add i64 %v3_1f862, 8
  %v2_1f86a = inttoptr i64 %v1_1f86a to i32*
  %v3_1f86a = load i32, i32* %v2_1f86a, align 4
  %v4_1f86a = zext i32 %v3_1f86a to i64
  store i64 %v4_1f86a, i64* @rcx, align 8
  %v5_1f86d = icmp eq i32 %v3_1f86a, 0
  br i1 %v5_1f86d, label %bb, label %dec_label_pc_1f871

bb:                                               ; preds = %dec_label_pc_1f830
  %v2_1f86f = call i64 @function_1f8cc(i64 %v0_1f836)
  store i64 %v2_1f86f, i64* @rax, align 8
  %v0_1f875.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_1f871

dec_label_pc_1f871:                               ; preds = %bb, %dec_label_pc_1f830
  %v0_1f875 = phi i64 [ %v0_1f875.pre, %bb ], [ %v0_1f839, %dec_label_pc_1f830 ]
  %v0_1f871 = phi i64 [ %v2_1f86f, %bb ], [ %v3_1f862, %dec_label_pc_1f830 ]
  %v1_1f871 = add i64 %v0_1f871, 16
  %v2_1f871 = inttoptr i64 %v1_1f871 to i64*
  %v3_1f871 = load i64, i64* %v2_1f871, align 8
  store i64 %v3_1f871, i64* @rdi, align 8
  %v1_1f875 = add i64 %v0_1f875, 40
  %v2_1f875 = inttoptr i64 %v1_1f875 to i64*
  %v3_1f875 = load i64, i64* %v2_1f875, align 8
  store i64 %v3_1f875, i64* @rax, align 8
  %v1_1f879 = add i64 %v3_1f875, 8
  %v2_1f879 = inttoptr i64 %v1_1f879 to i32*
  %v3_1f879 = load i32, i32* %v2_1f879, align 4
  %v4_1f879 = zext i32 %v3_1f879 to i64
  store i64 %v4_1f879, i64* @rdx, align 8
  %v5_1f87c = icmp eq i32 %v3_1f879, 0
  br i1 %v5_1f87c, label %bb245, label %dec_label_pc_1f880

bb245:                                            ; preds = %dec_label_pc_1f871
  %v2_1f87e = call i64 @function_1f8cc(i64 %v3_1f871)
  store i64 %v2_1f87e, i64* @rax, align 8
  br label %dec_label_pc_1f880

dec_label_pc_1f880:                               ; preds = %bb245, %dec_label_pc_1f871
  %v0_1f893 = phi i64 [ %v2_1f87e, %bb245 ], [ %v3_1f875, %dec_label_pc_1f871 ]
  %v1_1f880 = add i64 %v0_1f893, 16
  %v2_1f880 = inttoptr i64 %v1_1f880 to i64*
  %v3_1f880 = load i64, i64* %v2_1f880, align 8
  store i64 %v3_1f880, i64* %rsi.global-to-local, align 8
  %v0_1f884 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_1f884, i64* @rdx, align 8
  store i64 129171, i64* @rdi, align 8
  store i64 %v0_1f893, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1f8cc(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f8cc:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$758onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1f8e0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f8e6 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f8e6, i64* @rbx, align 8
  %v0_1f8e9 = load i64, i64* @rdi, align 8
  store i64 %v0_1f8e9, i64* %rbp.global-to-local, align 8
  store i64 %v0_1f8e6, i64* %r12.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f8e6, i64* @rdi, align 8
  %v1_1f912 = add i64 %v0_1f8e9, 24
  %v2_1f912 = inttoptr i64 %v1_1f912 to i64*
  %v3_1f912 = load i64, i64* %v2_1f912, align 8
  store i64 %v3_1f912, i64* @rax, align 8
  %v1_1f916 = add i64 %v3_1f912, 8
  %v2_1f916 = inttoptr i64 %v1_1f916 to i32*
  %v3_1f916 = load i32, i32* %v2_1f916, align 4
  %v4_1f916 = zext i32 %v3_1f916 to i64
  store i64 %v4_1f916, i64* @rcx, align 8
  %v5_1f919 = icmp eq i32 %v3_1f916, 0
  br i1 %v5_1f919, label %bb, label %dec_label_pc_1f91d

bb:                                               ; preds = %dec_label_pc_1f8e0
  %v2_1f91b = call i64 @function_1f98d(i64 %v0_1f8e6)
  store i64 %v2_1f91b, i64* @rax, align 8
  %v0_1f921.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_1f91d

dec_label_pc_1f91d:                               ; preds = %bb, %dec_label_pc_1f8e0
  %v0_1f921 = phi i64 [ %v0_1f921.pre, %bb ], [ %v0_1f8e9, %dec_label_pc_1f8e0 ]
  %v1_1f921 = add i64 %v0_1f921, 32
  %v2_1f921 = inttoptr i64 %v1_1f921 to i64*
  %v3_1f921 = load i64, i64* %v2_1f921, align 8
  store i64 %v3_1f921, i64* @rax, align 8
  %v1_1f925 = add i64 %v3_1f921, 8
  %v2_1f925 = inttoptr i64 %v1_1f925 to i32*
  %v3_1f925 = load i32, i32* %v2_1f925, align 4
  %v4_1f925 = zext i32 %v3_1f925 to i64
  store i64 %v4_1f925, i64* @rdx, align 8
  %v5_1f928 = icmp eq i32 %v3_1f925, 0
  br i1 %v5_1f928, label %bb245, label %dec_label_pc_1f92c

bb245:                                            ; preds = %dec_label_pc_1f91d
  %v2_1f92a = call i64 @function_1f98d(i64 %v0_1f8e6)
  store i64 %v2_1f92a, i64* @rax, align 8
  br label %dec_label_pc_1f92c

dec_label_pc_1f92c:                               ; preds = %bb245, %dec_label_pc_1f91d
  %v0_1f92c = phi i64 [ %v2_1f92a, %bb245 ], [ %v3_1f921, %dec_label_pc_1f91d ]
  %v1_1f92c = add i64 %v0_1f92c, 16
  %v2_1f92c = inttoptr i64 %v1_1f92c to i64*
  %v3_1f92c = load i64, i64* %v2_1f92c, align 8
  store i64 %v3_1f92c, i64* @rdi, align 8
  %v0_1f930 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_1f930, i64* %rsi.global-to-local, align 8
  %v1_1f933 = inttoptr i64 %v3_1f92c to i64*
  %v2_1f933 = load i64, i64* %v1_1f933, align 8
  store i64 %v2_1f933, i64* @rax, align 8
  %v1_1f93c = inttoptr i64 %v2_1f933 to i64*
  %v2_1f93c = load i64, i64* %v1_1f93c, align 8
  store i64 %v2_1f93c, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 129364, i64* @rdi, align 8
  store i64 %v2_1f933, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1f98d(i64 %arg1) local_unnamed_addr {
dec_label_pc_1f98d:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7byteseqEJbP6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1f9a0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1f9a0 = load i64, i64* %r14.global-to-local, align 8
  %v0_1f9a2 = load i64, i64* %r13.global-to-local, align 8
  %v0_1f9a4 = load i64, i64* %r12.global-to-local, align 8
  %v0_1f9a6 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1f9a7 = load i64, i64* @rbx, align 8
  %v0_1f9a8 = load i64, i64* @rdi, align 8
  %v1_1f9a8 = add i64 %v0_1f9a8, 20
  %v2_1f9a8 = inttoptr i64 %v1_1f9a8 to i32*
  %v3_1f9a8 = load i32, i32* %v2_1f9a8, align 4
  %v4_1f9a8 = zext i32 %v3_1f9a8 to i64
  store i64 %v4_1f9a8, i64* @rbx, align 8
  %v2_1f9ab = load i64, i64* @rcx, align 8
  %v3_1f9ab = trunc i64 %v2_1f9ab to i32
  %v14_1f9ab = icmp eq i32 %v3_1f9a8, %v3_1f9ab
  br i1 %v14_1f9ab, label %dec_label_pc_1f9c0, label %dec_label_pc_1f9af

dec_label_pc_1f9af:                               ; preds = %dec_label_pc_1fa0a, %dec_label_pc_1f9e6, %dec_label_pc_1f9c0, %dec_label_pc_1f9a0
  br label %dec_label_pc_1f9b1

dec_label_pc_1f9b1:                               ; preds = %dec_label_pc_1fa1b, %dec_label_pc_1f9af
  %storemerge = phi i64 [ 0, %dec_label_pc_1f9af ], [ 1, %dec_label_pc_1fa1b ]
  store i64 %storemerge, i64* @rax, align 8
  store i64 %v0_1f9a7, i64* @rbx, align 8
  store i64 %v0_1f9a6, i64* %rbp.global-to-local, align 8
  store i64 %v0_1f9a4, i64* %r12.global-to-local, align 8
  store i64 %v0_1f9a2, i64* %r13.global-to-local, align 8
  store i64 %v0_1f9a0, i64* %r14.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_1f9c0:                               ; preds = %dec_label_pc_1f9a0
  %v1_1f9c0 = add i64 %v0_1f9a8, 8
  %v2_1f9c0 = inttoptr i64 %v1_1f9c0 to i64*
  %v3_1f9c0 = load i64, i64* %v2_1f9c0, align 8
  store i64 %v3_1f9c0, i64* %r14.global-to-local, align 8
  %v1_1f9c4 = add i64 %v0_1f9a8, 16
  %v2_1f9c4 = inttoptr i64 %v1_1f9c4 to i32*
  %v3_1f9c4 = load i32, i32* %v2_1f9c4, align 4
  %v4_1f9c4 = zext i32 %v3_1f9c4 to i64
  store i64 %v4_1f9c4, i64* %rbp.global-to-local, align 8
  store i64 129486, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_1f9d0 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1f9d0, i64* %r13.global-to-local, align 8
  %v0_1f9d3 = load i64, i64* @rdx, align 8
  store i64 %v0_1f9d3, i64* %r12.global-to-local, align 8
  %v1_1f9db = add i64 %v3_1f9c0, 8
  %v2_1f9db = inttoptr i64 %v1_1f9db to i32*
  %v3_1f9db = load i32, i32* %v2_1f9db, align 4
  %v4_1f9db = zext i32 %v3_1f9db to i64
  store i64 %v4_1f9db, i64* %rsi.global-to-local, align 8
  %v3_1f9df = add nuw nsw i64 %v4_1f9c4, %v4_1f9a8
  store i64 %v3_1f9df, i64* @rax, align 8
  %v5_1f9e4 = icmp ult i64 %v4_1f9db, %v3_1f9df
  br i1 %v5_1f9e4, label %dec_label_pc_1f9af, label %dec_label_pc_1f9e6

dec_label_pc_1f9e6:                               ; preds = %dec_label_pc_1f9c0
  %v1_1f9e6 = add i64 %v0_1f9d0, 8
  %v2_1f9e6 = inttoptr i64 %v1_1f9e6 to i32*
  %v3_1f9e6 = load i32, i32* %v2_1f9e6, align 4
  %v4_1f9e6 = zext i32 %v3_1f9e6 to i64
  %v3_1f9ea = add i64 %v0_1f9d3, %v4_1f9a8
  store i64 %v3_1f9ea, i64* @rax, align 8
  %v5_1f9f1 = icmp slt i64 %v4_1f9e6, %v3_1f9ea
  br i1 %v5_1f9f1, label %dec_label_pc_1f9af, label %dec_label_pc_1fa1b.preheader

dec_label_pc_1fa1b.preheader:                     ; preds = %dec_label_pc_1f9e6
  %v3_1fa02 = add i64 %v3_1f9c0, 12
  %v5_1fa14 = add i64 %v0_1f9d0, 12
  br label %dec_label_pc_1fa1b

dec_label_pc_1f9f8:                               ; preds = %dec_label_pc_1fa1b
  store i64 %v0_1fa0d, i64* @rcx, align 8
  %v3_1f9ff = trunc i64 %v3_1fa14 to i32
  %v4_1fa02 = add i64 %v3_1fa02, %v0_1fa0d
  %v5_1fa02 = inttoptr i64 %v4_1fa02 to i8*
  %v6_1fa02 = load i8, i8* %v5_1fa02, align 1
  %v7_1fa02 = zext i8 %v6_1fa02 to i64
  store i64 %v7_1fa02, i64* @rcx, align 8
  %tmp258 = icmp ugt i32 %v3_1f9e6, %v3_1f9ff
  store i64 %v3_1fa14, i64* @rdi, align 8
  br i1 %tmp258, label %dec_label_pc_1fa0a, label %dec_label_pc_1fa27

dec_label_pc_1fa0a:                               ; preds = %dec_label_pc_1f9f8
  %v2_1fa0d = add nuw nsw i64 %v0_1fa0d, 1
  %v17_1fa0d = and i64 %v2_1fa0d, 4294967295
  store i64 %v17_1fa0d, i64* %rbp.global-to-local, align 8
  %v2_1fa10 = add i64 %v3_1fa14, 1
  %v17_1fa10 = and i64 %v2_1fa10, 4294967295
  store i64 %v17_1fa10, i64* %r12.global-to-local, align 8
  %v6_1fa14 = add i64 %v5_1fa14, %v3_1fa14
  %v7_1fa14 = inttoptr i64 %v6_1fa14 to i8*
  %v8_1fa14 = load i8, i8* %v7_1fa14, align 1
  %v19_1fa14 = icmp eq i8 %v6_1fa02, %v8_1fa14
  %v1_1fa19 = icmp eq i1 %v19_1fa14, false
  br i1 %v1_1fa19, label %dec_label_pc_1f9af, label %dec_label_pc_1fa1b

dec_label_pc_1fa1b:                               ; preds = %dec_label_pc_1fa1b.preheader, %dec_label_pc_1fa0a
  %v3_1fa14 = phi i64 [ %v17_1fa10, %dec_label_pc_1fa0a ], [ %v0_1f9d3, %dec_label_pc_1fa1b.preheader ]
  %v0_1fa0d = phi i64 [ %v17_1fa0d, %dec_label_pc_1fa0a ], [ %v4_1f9c4, %dec_label_pc_1fa1b.preheader ]
  %v0_1fa1b = phi i32 [ %v2_1fa1b, %dec_label_pc_1fa0a ], [ %v3_1f9a8, %dec_label_pc_1fa1b.preheader ]
  %v2_1fa1b = add i32 %v0_1fa1b, -1
  %v12_1fa1b = icmp slt i32 %v2_1fa1b, 0
  %v17_1fa1b = zext i32 %v2_1fa1b to i64
  store i64 %v17_1fa1b, i64* @rbx, align 8
  %v1_1fa1e = icmp eq i1 %v12_1fa1b, false
  br i1 %v1_1fa1e, label %dec_label_pc_1f9f8, label %dec_label_pc_1f9b1

dec_label_pc_1fa27:                               ; preds = %dec_label_pc_1f9f8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$608onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1fa40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1fa46 = load i64, i64* %rsi.global-to-local, align 8
  %v0_1fa49 = load i64, i64* @rdi, align 8
  store i64 %v0_1fa49, i64* @rbx, align 8
  store i64 1, i64* @rax, align 8
  store i64 %v0_1fa46, i64* @rdi, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  %v1_1fa73 = add i64 %v0_1fa49, 48
  %v2_1fa73 = inttoptr i64 %v1_1fa73 to i64*
  %v3_1fa73 = load i64, i64* %v2_1fa73, align 8
  store i64 %v3_1fa73, i64* @rax, align 8
  %v1_1fa7f = add i64 %v0_1fa49, 40
  %v2_1fa7f = inttoptr i64 %v1_1fa7f to i64*
  %v3_1fa7f = load i64, i64* %v2_1fa7f, align 8
  store i64 %v3_1fa7f, i64* @rdi, align 8
  %v1_1fa83 = add i64 %v3_1fa73, 8
  %v2_1fa83 = inttoptr i64 %v1_1fa83 to i32*
  %v3_1fa83 = load i32, i32* %v2_1fa83, align 4
  %v4_1fa83 = zext i32 %v3_1fa83 to i64
  store i64 %v4_1fa83, i64* @rdx, align 8
  %v5_1fa86 = icmp eq i32 %v3_1fa83, 0
  br i1 %v5_1fa86, label %bb, label %dec_label_pc_1fa8e

bb:                                               ; preds = %dec_label_pc_1fa40
  %v2_1fa88 = call i64 @function_1fb1c(i64 %v3_1fa7f)
  store i64 %v2_1fa88, i64* @rax, align 8
  br label %dec_label_pc_1fa8e

dec_label_pc_1fa8e:                               ; preds = %bb, %dec_label_pc_1fa40
  store i64 129701, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1fb1c(i64 %arg1) local_unnamed_addr {
dec_label_pc_1fb1c:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib4callEJPNS1_8LuaValueES5_S5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1fb30:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1fb3a = load i64, i64* @rdi, align 8
  store i64 %v0_1fb3a, i64* @rbx, align 8
  %v0_1fb3d = load i64, i64* @rdx, align 8
  store i64 129881, i64* @rdi, align 8
  %v2_1fb59 = add i64 %v0_1fb3a, 56
  %v3_1fb59 = inttoptr i64 %v2_1fb59 to i64*
  store i64 %v0_1fb3d, i64* %v3_1fb59, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1fd01() local_unnamed_addr {
dec_label_pc_1fd01:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %v0_1fd01 = load i64, i64* @rbx, align 8
  %v1_1fd01 = add i64 %v0_1fd01, 48
  %v2_1fd01 = inttoptr i64 %v1_1fd01 to i64*
  %v3_1fd01 = load i64, i64* %v2_1fd01, align 8
  store i64 1, i64* @r15, align 8
  %v1_1fd0b = inttoptr i64 %v3_1fd01 to i64*
  %v2_1fd0b = load i64, i64* %v1_1fd0b, align 8
  store i64 %v2_1fd0b, i64* @rax, align 8
  store i64 %v3_1fd01, i64* @rdi, align 8
  %v1_1fd18 = add i64 %v2_1fd0b, 8
  %v2_1fd18 = inttoptr i64 %v1_1fd18 to i32*
  %v3_1fd18 = load i32, i32* %v2_1fd18, align 4
  %v4_1fd18 = zext i32 %v3_1fd18 to i64
  store i64 %v4_1fd18, i64* @rdx, align 8
  %v1_1fd20 = add i64 %v2_1fd0b, 16
  store i64 %v1_1fd20, i64* %r14.global-to-local, align 8
  %v5_1fd24 = icmp eq i32 %v3_1fd18, 0
  %v6_1fd24 = icmp slt i32 %v3_1fd18, 0
  %v3_1fd2a = icmp eq i1 %v6_1fd24, false
  %v4_1fd2a = icmp eq i1 %v5_1fd24, false
  %v5_1fd2a = icmp eq i1 %v3_1fd2a, %v4_1fd2a
  br i1 %v5_1fd2a, label %dec_label_pc_1fd4a, label %dec_label_pc_1fd76

dec_label_pc_1fd30:                               ; preds = %dec_label_pc_1fd4a
  store i64 %v2_1fd0b, i64* @rcx, align 8
  %v0_1fd35 = load i64, i64* %r14.global-to-local, align 8
  %v1_1fd35 = add i64 %v0_1fd35, 8
  store i64 %v1_1fd35, i64* %r14.global-to-local, align 8
  %v0_1fd39 = load i64, i64* @r15, align 8
  %v1_1fd39 = add i64 %v0_1fd39, 1
  store i64 %v1_1fd39, i64* @rax, align 8
  %v3_1fd3d = load i32, i32* %v2_1fd18, align 4
  %v5_1fd3d = trunc i64 %v0_1fd39 to i32
  %tmp245 = icmp ugt i32 %v3_1fd3d, %v5_1fd3d
  br i1 %tmp245, label %dec_label_pc_1fd47, label %bb

bb:                                               ; preds = %dec_label_pc_1fd30
  %v3_1fd41 = call i64 @function_1fe6f()
  store i64 %v3_1fd41, i64* @rax, align 8
  br label %dec_label_pc_1fd47

dec_label_pc_1fd47:                               ; preds = %dec_label_pc_1fd30, %bb
  %v0_1fd47 = phi i64 [ %v3_1fd41, %bb ], [ %v1_1fd39, %dec_label_pc_1fd30 ]
  store i64 %v0_1fd47, i64* @r15, align 8
  %v0_1fd70.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_1fd4a

dec_label_pc_1fd4a:                               ; preds = %dec_label_pc_1fd01, %dec_label_pc_1fd47
  %v0_1fd70 = phi i64 [ %v0_1fd70.pre, %dec_label_pc_1fd47 ], [ %v0_1fd01, %dec_label_pc_1fd01 ]
  %v4_1fd6b = phi i64 [ %v0_1fd47, %dec_label_pc_1fd47 ], [ 1, %dec_label_pc_1fd01 ]
  store i64 130401, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v5_1fd6b = trunc i64 %v4_1fd6b to i32
  %v16_1fd6b = icmp eq i32 %v3_1fd18, %v5_1fd6b
  store i64 %v0_1fd70, i64* inttoptr (i64 32 to i64*), align 32
  %v1_1fd74 = icmp eq i1 %v16_1fd6b, false
  br i1 %v1_1fd74, label %dec_label_pc_1fd30, label %dec_label_pc_1fd76

dec_label_pc_1fd76:                               ; preds = %dec_label_pc_1fd4a, %dec_label_pc_1fd01
  %v2_1fd76 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_1fd76, i64* @rax, align 8
  store i64 %v2_1fd76, i64* @rdi, align 8
  %v1_1fd8c = add i64 %v2_1fd76, 8
  %v2_1fd8c = inttoptr i64 %v1_1fd8c to i32*
  %v3_1fd8c = load i32, i32* %v2_1fd8c, align 4
  %v4_1fd8c = zext i32 %v3_1fd8c to i64
  store i64 %v4_1fd8c, i64* @rax, align 8
  %v1_1fd8f = add i64 %v2_1fd76, 16
  store i64 %v1_1fd8f, i64* %r14.global-to-local, align 8
  %v5_1fd93 = icmp eq i32 %v3_1fd8c, 0
  %v6_1fd93 = icmp slt i32 %v3_1fd8c, 0
  %v3_1fd99 = icmp eq i1 %v6_1fd93, false
  %v4_1fd99 = icmp eq i1 %v5_1fd93, false
  %v5_1fd99 = icmp eq i1 %v3_1fd99, %v4_1fd99
  br i1 %v5_1fd99, label %dec_label_pc_1fdb5, label %dec_label_pc_1fd9b

dec_label_pc_1fd9b:                               ; preds = %dec_label_pc_1fd76
  %v1_1fd9b = sext i32 %v3_1fd8c to i64
  %v2_1fd9b = call i64 @function_1fde1(i64 %v1_1fd9b)
  store i64 %v2_1fd9b, i64* @rax, align 8
  ret i64 %v2_1fd9b

dec_label_pc_1fdb5:                               ; preds = %dec_label_pc_1fd76
  store i64 130508, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1fde1(i64 %arg1) local_unnamed_addr {
dec_label_pc_1fde1:
  store i64 %arg1, i64* @rbx, align 8
  %v0_1fde6 = load i64, i64* @rbp, align 8
  store i64 %v0_1fde6, i64* @rdx, align 8
  %v1_1fdf0 = inttoptr i64 %arg1 to i64*
  %v2_1fdf0 = load i64, i64* %v1_1fdf0, align 8
  store i64 %v2_1fdf0, i64* @rax, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_1fdfc = load i64, i64* %v1_1fdf0, align 8
  store i64 %v2_1fdfc, i64* @rax, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_1fe0f = inttoptr i64 %v2_1fdfc to i64*
  %v2_1fe0f = load i64, i64* %v1_1fe0f, align 8
  store i64 %v2_1fe0f, i64* @rdx, align 8
  store i64 %v2_1fdfc, i64* @rdi, align 8
  %v4_1fe1b = trunc i64 %v2_1fdfc to i8
  %v5_1fe1b = icmp eq i8 %v4_1fe1b, 0
  %v1_1fe1d = icmp eq i1 %v5_1fe1b, false
  br i1 %v1_1fe1d, label %dec_label_pc_1fe5d, label %dec_label_pc_1fe1f

dec_label_pc_1fe1f:                               ; preds = %dec_label_pc_1fde1
  store i64 %arg1, i64* @rdi, align 8
  %v2_1fe2b = load i64, i64* %v1_1fdf0, align 8
  store i64 %v2_1fe2b, i64* @rax, align 8
  %v1_1fe34 = inttoptr i64 %v2_1fe2b to i64*
  %v2_1fe34 = load i64, i64* %v1_1fe34, align 8
  store i64 %v2_1fe34, i64* @rdx, align 8
  store i64 %v2_1fe2b, i64* @rdi, align 8
  %v2_1fe47 = load i64, i64* %v1_1fe34, align 8
  store i64 %v2_1fe47, i64* @rcx, align 8
  store i64 %v0_1fde6, i64* @rdx, align 8
  store i64 %v2_1fe2b, i64* @rdi, align 8
  br label %dec_label_pc_1fe5d

dec_label_pc_1fe5d:                               ; preds = %dec_label_pc_1fe1f, %dec_label_pc_1fde1
  store i64 %v0_1fde6, i64* @rax, align 8
  ret i64 %v0_1fde6
}

define i64 @function_1fe6f() local_unnamed_addr {
dec_label_pc_1fe6f:
  %v0_1fe6f = load i64, i64* @r15, align 8
  store i64 %v0_1fe6f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$618onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1fe90:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1fe97 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1fe97, i64* %rbp.global-to-local, align 8
  %v0_1fe9e = load i64, i64* @rdi, align 8
  store i64 %v0_1fe9e, i64* @rbx, align 8
  store i64 %v0_1fe97, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  store i64 %v0_1fe97, i64* @rdi, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  %v1_1fec1 = add i64 %v0_1fe9e, 48
  %v2_1fec1 = inttoptr i64 %v1_1fec1 to i64*
  %v3_1fec1 = load i64, i64* %v2_1fec1, align 8
  store i64 %v3_1fec1, i64* @rax, align 8
  %v1_1fec9 = add i64 %v0_1fe9e, 32
  %v2_1fec9 = inttoptr i64 %v1_1fec9 to i64*
  %v3_1fec9 = load i64, i64* %v2_1fec9, align 8
  store i64 %v3_1fec9, i64* %rbp.global-to-local, align 8
  %v1_1fecd = add i64 %v0_1fe9e, 40
  %v2_1fecd = inttoptr i64 %v1_1fecd to i64*
  %v3_1fecd = load i64, i64* %v2_1fecd, align 8
  store i64 %v3_1fecd, i64* %r14.global-to-local, align 8
  %v1_1fed1 = add i64 %v3_1fec1, 8
  %v2_1fed1 = inttoptr i64 %v1_1fed1 to i32*
  %v3_1fed1 = load i32, i32* %v2_1fed1, align 4
  %v4_1fed1 = zext i32 %v3_1fed1 to i64
  store i64 %v4_1fed1, i64* @rdx, align 8
  %v5_1fed4 = icmp eq i32 %v3_1fed1, 0
  br i1 %v5_1fed4, label %bb, label %dec_label_pc_1fed8

bb:                                               ; preds = %dec_label_pc_1fe90
  %v2_1fed6 = call i64 @function_1ff57(i64 %v0_1fe97)
  store i64 %v2_1fed6, i64* @rax, align 8
  %v0_1fedc.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_1fee0.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_1fee3.pre = load i64, i64* @rbx, align 8
  %v0_1fef8.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_1fed8

dec_label_pc_1fed8:                               ; preds = %bb, %dec_label_pc_1fe90
  %v0_1fef8 = phi i64 [ %v0_1fef8.pre, %bb ], [ %v3_1fecd, %dec_label_pc_1fe90 ]
  %v0_1fef4 = phi i64 [ %v0_1fee3.pre, %bb ], [ %v0_1fe9e, %dec_label_pc_1fe90 ]
  %v0_1fee0 = phi i64 [ %v0_1fee0.pre, %bb ], [ %v0_1fe97, %dec_label_pc_1fe90 ]
  %v0_1fefb = phi i64 [ %v0_1fedc.pre, %bb ], [ %v3_1fec9, %dec_label_pc_1fe90 ]
  %v0_1fed8 = phi i64 [ %v2_1fed6, %bb ], [ %v3_1fec1, %dec_label_pc_1fe90 ]
  %v1_1fed8 = add i64 %v0_1fed8, 16
  %v2_1fed8 = inttoptr i64 %v1_1fed8 to i64*
  %v3_1fed8 = load i64, i64* %v2_1fed8, align 8
  store i64 %v3_1fed8, i64* %rsi.global-to-local, align 8
  %v1_1fedc = inttoptr i64 %v0_1fefb to i64*
  %v2_1fedc = load i64, i64* %v1_1fedc, align 8
  store i64 %v2_1fedc, i64* @rax, align 8
  store i64 %v0_1fee0, i64* @rcx, align 8
  %v1_1fee3 = add i64 %v0_1fef4, 56
  %v2_1fee3 = inttoptr i64 %v1_1fee3 to i64*
  %v3_1fee3 = load i64, i64* %v2_1fee3, align 8
  store i64 %v3_1fee3, i64* @rdx, align 8
  store i64 %v0_1fefb, i64* @rdi, align 8
  %v1_1fef4 = add i64 %v0_1fef4, 64
  %v2_1fef4 = inttoptr i64 %v1_1fef4 to i64*
  %v3_1fef4 = load i64, i64* %v2_1fef4, align 8
  store i64 %v3_1fef4, i64* @rcx, align 8
  store i64 %v0_1fef8, i64* %rsi.global-to-local, align 8
  store i64 %v0_1fefb, i64* @rdi, align 8
  store i64 %v2_1fedc, i64* @rdx, align 8
  %v1_1ff08 = inttoptr i64 %v2_1fedc to i64*
  %v2_1ff08 = load i64, i64* %v1_1ff08, align 8
  store i64 %v2_1ff08, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 130848, i64* @rdi, align 8
  store i64 %v2_1fedc, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_1ff57(i64 %arg1) local_unnamed_addr {
dec_label_pc_1ff57:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib9_io_indexEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1ff60:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1ff60 = load i64, i64* %rbp.global-to-local, align 8
  %v0_1ff61 = load i64, i64* @rbx, align 8
  %v0_1ff62 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ff62, i64* @rbx, align 8
  %v0_1ff65 = load i64, i64* @rdi, align 8
  store i64 %v0_1ff65, i64* %rbp.global-to-local, align 8
  store i64 %v0_1ff62, i64* @rdi, align 8
  store i64 %v0_1ff62, i64* @rax, align 8
  %v0_1ff72 = load i64, i64* inttoptr (i64 130937 to i64*), align 8
  store i64 %v0_1ff72, i64* %rsi.global-to-local, align 8
  %v4_1ff7c = trunc i64 %v0_1ff62 to i8
  %v5_1ff7c = icmp eq i8 %v4_1ff7c, 0
  br i1 %v5_1ff7c, label %dec_label_pc_1ff98, label %dec_label_pc_1ff80

dec_label_pc_1ff80:                               ; preds = %dec_label_pc_1ffd8, %dec_label_pc_1ff60
  %merge = phi i64 [ %v0_1ff62, %dec_label_pc_1ff60 ], [ %v0_1ffea, %dec_label_pc_1ffd8 ]
  ret i64 %merge

dec_label_pc_1ff8d:                               ; preds = %dec_label_pc_1ffd8, %dec_label_pc_1ffb5, %dec_label_pc_1ffac
  %v0_1ff93 = phi i64 [ %v0_1ffea, %dec_label_pc_1ffd8 ], [ %v0_1ff93.pre, %dec_label_pc_1ffb5 ], [ %v3_1ffac, %dec_label_pc_1ffac ]
  store i64 %v0_1ff61, i64* @rbx, align 8
  store i64 %v0_1ff60, i64* %rbp.global-to-local, align 8
  ret i64 %v0_1ff93

dec_label_pc_1ff98:                               ; preds = %dec_label_pc_1ff60
  store i64 %v0_1ff72, i64* @rax, align 8
  %v0_1ff9b = load i64, i64* inttoptr (i64 130978 to i64*), align 8
  store i64 %v0_1ff9b, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ff62, i64* @rdi, align 8
  %v4_1ffa8 = trunc i64 %v0_1ff72 to i8
  %v5_1ffa8 = icmp eq i8 %v4_1ffa8, 0
  br i1 %v5_1ffa8, label %dec_label_pc_1ffd8, label %dec_label_pc_1ffac

dec_label_pc_1ffac:                               ; preds = %dec_label_pc_1ff98
  %v1_1ffac = add i64 %v0_1ff65, 24
  %v2_1ffac = inttoptr i64 %v1_1ffac to i64*
  %v3_1ffac = load i64, i64* %v2_1ffac, align 8
  store i64 %v3_1ffac, i64* @rax, align 8
  %v1_1ffb0 = icmp eq i64 %v3_1ffac, 0
  %v1_1ffb3 = icmp eq i1 %v1_1ffb0, false
  br i1 %v1_1ffb3, label %dec_label_pc_1ff8d, label %dec_label_pc_1ffb5

dec_label_pc_1ffb5:                               ; preds = %dec_label_pc_1ffac
  %v0_1ffb5 = load i64, i64* inttoptr (i64 131004 to i64*), align 8
  store i64 %v0_1ffb5, i64* @rcx, align 8
  %v0_1ffbc = load i64, i64* inttoptr (i64 131011 to i64*), align 8
  store i64 %v0_1ffbc, i64* @rdx, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ff65, i64* @rdi, align 8
  store i64 %v3_1ffac, i64* %v2_1ffac, align 8
  %v0_1ff93.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_1ff8d

dec_label_pc_1ffd8:                               ; preds = %dec_label_pc_1ff98
  store i64 %v0_1ff9b, i64* @rax, align 8
  %v0_1ffdb = load i64, i64* inttoptr (i64 131042 to i64*), align 8
  store i64 %v0_1ffdb, i64* %rsi.global-to-local, align 8
  store i64 %v0_1ff62, i64* @rdi, align 8
  store i64 %v0_1ff9b, i64* @rdx, align 8
  %v0_1ffea = load i64, i64* inttoptr (i64 131057 to i64*), align 8
  store i64 %v0_1ffea, i64* @rax, align 8
  %v4_1fff1 = trunc i64 %v0_1ff9b to i8
  %v5_1fff1 = icmp eq i8 %v4_1fff1, 0
  br i1 %v5_1fff1, label %dec_label_pc_1ff8d, label %dec_label_pc_1ff80
}

define i64 @_ZN3org4luaj3vm25Print12printUpvalueEJvPN4java2io11PrintStreamEPNS1_9UpvaldescE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20050:
  store i64 %arg1, i64* @rdi, align 8
  store i64 131166, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_20140(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20140:
  %rbp.global-to-local = alloca i64, align 8
  %v2_20140 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_20140, i64* @rax, align 8
  store i64 %v2_20140, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_20140
}

define i64 @function_20159() local_unnamed_addr {
dec_label_pc_20159:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm28LuaTable5entryEJPNS1_13LuaTable$SlotEPNS1_8LuaValueES6_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20160:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 131434, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_201d0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_201d0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 0, i64* @rbx, align 8
  %v2_201e1 = load i64, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_201fb = trunc i64 %v2_201e1 to i32
  store i32 %v1_201fb, i32* inttoptr (i64 8 to i32*), align 8
  %v0_201fe = load i64, i64* %r12.global-to-local, align 8
  %v1_201fe = load i64, i64* @rbx, align 8
  %v2_201fe = add i64 %v1_201fe, 16
  %v3_201fe = inttoptr i64 %v2_201fe to i64*
  store i64 %v0_201fe, i64* %v3_201fe, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  %v0_2020a = load i64, i64* @rax, align 8
  ret i64 %v0_2020a
}

define i64 @function_20210() local_unnamed_addr {
dec_label_pc_20210:
  store i64 131607, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm217NonTableMetatable5entryEJPNS1_13LuaTable$SlotEPNS1_8LuaValueES6_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20260:
  %r12.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_20270 = load i64, i64* @rdx, align 8
  store i64 %v0_20270, i64* %r12.global-to-local, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_20289 = trunc i64 %arg2 to i8
  %v5_20289 = icmp eq i8 %v4_20289, 0
  %v1_2028b = icmp eq i1 %v5_20289, false
  br i1 %v1_2028b, label %bb, label %dec_label_pc_2028d

bb:                                               ; preds = %dec_label_pc_20260
  %v2_2028b = call i64 @function_202d0()
  store i64 %v2_2028b, i64* @rax, align 8
  %v2_2028d.pre = load i64, i64* @rdx, align 8
  %v0_20291.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_2028d

dec_label_pc_2028d:                               ; preds = %bb, %dec_label_pc_20260
  %v0_20291 = phi i64 [ %v0_20291.pre, %bb ], [ %v0_20270, %dec_label_pc_20260 ]
  %v2_2028d = phi i64 [ %v2_2028d.pre, %bb ], [ %v0_20270, %dec_label_pc_20260 ]
  store i64 %v2_2028d, i64* @rax, align 8
  store i64 %v0_20291, i64* @rdi, align 8
  %v1_2029a = trunc i64 %v2_2028d to i32
  %v11_2029a = icmp eq i32 %v1_2029a, 3
  br i1 %v11_2029a, label %bb244, label %dec_label_pc_2029f

bb244:                                            ; preds = %dec_label_pc_2028d
  %v1_2029d = call i64 @function_20310()
  store i64 %v1_2029d, i64* @rax, align 8
  br label %dec_label_pc_2029f

dec_label_pc_2029f:                               ; preds = %bb244, %dec_label_pc_2028d
  store i64 131750, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_202d0() local_unnamed_addr {
dec_label_pc_202d0:
  store i64 131799, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_20310() local_unnamed_addr {
dec_label_pc_20310:
  store i64 131863, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$594callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20360:
  store i64 %arg1, i64* @rdi, align 8
  store i64 131949, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$FormatDesc6formatEJvPNS1_6BufferEc"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_203e0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_203ed = add i64 %arg2, 24
  %v2_203ed = inttoptr i64 %v1_203ed to i64*
  %v3_203ed = load i64, i64* %v2_203ed, align 8
  store i64 %v3_203ed, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_203f7 = icmp eq i64 %v3_203ed, 0
  br i1 %v1_203f7, label %bb, label %dec_label_pc_203fc

bb:                                               ; preds = %dec_label_pc_203e0
  %v3_203fa = call i64 @function_20470(i64 0, i64 %arg2)
  store i64 %v3_203fa, i64* @rax, align 8
  br label %dec_label_pc_203fc

dec_label_pc_203fc:                               ; preds = %bb, %dec_label_pc_203e0
  %v1_203fc = inttoptr i64 %v3_203ed to i64*
  %v2_203fc = load i64, i64* %v1_203fc, align 8
  store i64 %v2_203fc, i64* @rax, align 8
  ret i64 %v2_203fc
}

define i64 @function_20470(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20470:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_20470 = load i64, i64* %rsi.global-to-local, align 8
  %v1_20470 = add i64 %v0_20470, 8
  %v2_20470 = inttoptr i64 %v1_20470 to i64*
  %v3_20470 = load i64, i64* %v2_20470, align 8
  store i64 %v3_20470, i64* @rax, align 8
  %v1_20474 = add i64 %v0_20470, 20
  %v2_20474 = inttoptr i64 %v1_20474 to i32*
  %v3_20474 = load i32, i32* %v2_20474, align 4
  %v4_20474 = zext i32 %v3_20474 to i64
  store i64 %v4_20474, i64* @rdi, align 8
  %v1_20477 = add i64 %v0_20470, 16
  %v2_20477 = inttoptr i64 %v1_20477 to i32*
  %v3_20477 = load i32, i32* %v2_20477, align 4
  %v4_20477 = zext i32 %v3_20477 to i64
  store i64 %v4_20477, i64* @rdx, align 8
  %v1_2047a = add i64 %v3_20470, 8
  %v2_2047a = inttoptr i64 %v1_2047a to i32*
  %v3_2047a = load i32, i32* %v2_2047a, align 4
  %v4_2047a = zext i32 %v3_2047a to i64
  store i64 %v4_2047a, i64* @rcx, align 8
  %v2_2047d = sext i32 %v3_20474 to i64
  %v4_2047d = add nuw nsw i64 %v4_20477, 1
  %v5_2047d = add nsw i64 %v4_2047d, %v2_2047d
  store i64 %v5_2047d, i64* %rsi.global-to-local, align 8
  %v8_20483 = sext i32 %v3_2047a to i64
  %v9_20483 = icmp sgt i64 %v5_2047d, %v8_20483
  br i1 %v9_20483, label %dec_label_pc_20489, label %dec_label_pc_20485

dec_label_pc_20485:                               ; preds = %dec_label_pc_20470
  br label %dec_label_pc_20489

dec_label_pc_20489:                               ; preds = %dec_label_pc_20485, %dec_label_pc_20470
  %v2_20489 = trunc i64 %v4_2047d to i32
  store i64 32, i64* %rsi.global-to-local, align 8
  %v10_20496 = icmp sgt i32 %v2_20489, 31
  br i1 %v10_20496, label %bb, label %dec_label_pc_20498

bb:                                               ; preds = %dec_label_pc_20489
  %sext = mul i64 %v4_2047d, 4294967296
  %v18_20496 = sdiv i64 %sext, 4294967296
  %v19_20496 = call i64 @function_204e0(i64 %v2_2047d, i64 32, i64 %v4_20477, i64 %v8_20483, i64 %v18_20496)
  store i64 %v19_20496, i64* @rax, align 8
  br label %dec_label_pc_20498

dec_label_pc_20498:                               ; preds = %bb, %dec_label_pc_20489
  store i64 132259, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_204e0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_204e0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_204ea = load i64, i64* @rax, align 8
  ret i64 %v0_204ea
}

define i64 @function_204ec() local_unnamed_addr {
dec_label_pc_204ec:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$628onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20500:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2050a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2050a, i64* @rbx, align 8
  %v0_2050d = load i64, i64* @rdi, align 8
  store i64 %v0_2050d, i64* %rbp.global-to-local, align 8
  store i64 %v0_2050a, i64* %r13.global-to-local, align 8
  store i64 1, i64* %r12.global-to-local, align 8
  store i64 2, i64* @rax, align 8
  store i64 %v0_2050a, i64* @rdi, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  %v1_20547 = add i64 %v0_2050d, 48
  %v2_20547 = inttoptr i64 %v1_20547 to i64*
  %v3_20547 = load i64, i64* %v2_20547, align 8
  store i64 %v3_20547, i64* @rax, align 8
  %v1_2054f = add i64 %v0_2050d, 32
  %v2_2054f = inttoptr i64 %v1_2054f to i64*
  %v3_2054f = load i64, i64* %v2_2054f, align 8
  store i64 %v3_2054f, i64* @rbx, align 8
  %v1_20553 = add i64 %v0_2050d, 40
  %v2_20553 = inttoptr i64 %v1_20553 to i64*
  %v3_20553 = load i64, i64* %v2_20553, align 8
  store i64 %v3_20553, i64* %r14.global-to-local, align 8
  %v1_20557 = add i64 %v3_20547, 8
  %v2_20557 = inttoptr i64 %v1_20557 to i32*
  %v3_20557 = load i32, i32* %v2_20557, align 4
  %v4_20557 = zext i32 %v3_20557 to i64
  store i64 %v4_20557, i64* @rdx, align 8
  %v5_2055a = icmp eq i32 %v3_20557, 0
  br i1 %v5_2055a, label %bb, label %dec_label_pc_20562

bb:                                               ; preds = %dec_label_pc_20500
  %v2_2055c = call i64 @function_205fe(i64 %v0_2050a)
  store i64 %v2_2055c, i64* @rax, align 8
  %v0_20566.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_20569.pre = load i64, i64* @rbx, align 8
  %v0_2057d.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_20596.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_20599.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_20562

dec_label_pc_20562:                               ; preds = %bb, %dec_label_pc_20500
  %v0_20599 = phi i64 [ %v0_20599.pre, %bb ], [ %v3_20553, %dec_label_pc_20500 ]
  %v0_20596 = phi i64 [ %v0_20596.pre, %bb ], [ 1, %dec_label_pc_20500 ]
  %v0_2057d = phi i64 [ %v0_2057d.pre, %bb ], [ %v0_2050d, %dec_label_pc_20500 ]
  %v0_2059c = phi i64 [ %v0_20569.pre, %bb ], [ %v3_2054f, %dec_label_pc_20500 ]
  %v0_20566 = phi i64 [ %v0_20566.pre, %bb ], [ %v0_2050a, %dec_label_pc_20500 ]
  %v0_20562 = phi i64 [ %v2_2055c, %bb ], [ %v3_20547, %dec_label_pc_20500 ]
  %v1_20562 = add i64 %v0_20562, 16
  %v2_20562 = inttoptr i64 %v1_20562 to i64*
  %v3_20562 = load i64, i64* %v2_20562, align 8
  store i64 %v3_20562, i64* @rax, align 8
  store i64 %v0_20566, i64* %rsi.global-to-local, align 8
  store i64 %v0_2059c, i64* @rdi, align 8
  %v1_20571 = inttoptr i64 %v0_2059c to i64*
  %v2_20571 = load i64, i64* %v1_20571, align 8
  store i64 %v2_20571, i64* @rax, align 8
  %v1_2057d = add i64 %v0_2057d, 56
  %v2_2057d = inttoptr i64 %v1_2057d to i64*
  %v3_2057d = load i64, i64* %v2_2057d, align 8
  store i64 %v3_2057d, i64* @rcx, align 8
  store i64 %v0_2059c, i64* @rdi, align 8
  store i64 %v3_20562, i64* %rsi.global-to-local, align 8
  store i64 %v2_20571, i64* @rdx, align 8
  store i64 %v0_20596, i64* @rcx, align 8
  store i64 %v0_20599, i64* %rsi.global-to-local, align 8
  store i64 %v0_2059c, i64* @rdi, align 8
  store i64 %v2_20571, i64* @rdx, align 8
  %v1_205a9 = inttoptr i64 %v2_20571 to i64*
  %v2_205a9 = load i64, i64* %v1_205a9, align 8
  store i64 %v2_205a9, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 132545, i64* @rdi, align 8
  store i64 %v2_20571, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_205fe(i64 %arg1) local_unnamed_addr {
dec_label_pc_205fe:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$418onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20610:
  store i64 %arg1, i64* @rdi, align 8
  store i64 132655, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer6appendEJPS2_PNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_206c0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_206c6 = load i64, i64* @rdi, align 8
  store i64 %v0_206c6, i64* @rbx, align 8
  %v0_206c9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_206c9, i64* @rdi, align 8
  store i64 %v0_206c9, i64* @rax, align 8
  %v1_206d9 = add i64 %v0_206c6, 24
  %v2_206d9 = inttoptr i64 %v1_206d9 to i64*
  %v3_206d9 = load i64, i64* %v2_206d9, align 8
  store i64 %v3_206d9, i64* @rdi, align 8
  %v1_206e0 = add i64 %v0_206c9, 20
  %v2_206e0 = inttoptr i64 %v1_206e0 to i32*
  %v3_206e0 = load i32, i32* %v2_206e0, align 4
  %v4_206e0 = zext i32 %v3_206e0 to i64
  store i64 %v4_206e0, i64* @rbp, align 8
  %v1_206e3 = icmp eq i64 %v3_206d9, 0
  br i1 %v1_206e3, label %bb, label %dec_label_pc_206ec

bb:                                               ; preds = %dec_label_pc_206c0
  %v1_206e6 = call i64 @function_20770()
  store i64 %v1_206e6, i64* @rax, align 8
  br label %dec_label_pc_206ec

dec_label_pc_206ec:                               ; preds = %bb, %dec_label_pc_206c0
  %v1_206ec = inttoptr i64 %v3_206d9 to i64*
  %v2_206ec = load i64, i64* %v1_206ec, align 8
  store i64 %v2_206ec, i64* @rax, align 8
  %v1_206f5 = add i64 %v2_206ec, 20
  %v2_206f5 = inttoptr i64 %v1_206f5 to i32*
  %v3_206f5 = load i32, i32* %v2_206f5, align 4
  %v4_206f5 = zext i32 %v3_206f5 to i64
  store i64 %v4_206f5, i64* %rsi.global-to-local, align 8
  ret i64 %v2_206ec
}

define i64 @function_20770() local_unnamed_addr {
dec_label_pc_20770:
  %v0_20770 = load i64, i64* @rbx, align 8
  %v1_20770 = add i64 %v0_20770, 20
  %v2_20770 = inttoptr i64 %v1_20770 to i32*
  %v3_20770 = load i32, i32* %v2_20770, align 4
  %v4_20770 = zext i32 %v3_20770 to i64
  store i64 %v4_20770, i64* @rcx, align 8
  %v1_20773 = add i64 %v0_20770, 16
  %v2_20773 = inttoptr i64 %v1_20773 to i32*
  %v3_20773 = load i32, i32* %v2_20773, align 4
  %v4_20773 = zext i32 %v3_20773 to i64
  store i64 %v4_20773, i64* @rdi, align 8
  %v1_20776 = add i64 %v0_20770, 8
  %v2_20776 = inttoptr i64 %v1_20776 to i64*
  %v3_20776 = load i64, i64* %v2_20776, align 8
  store i64 %v3_20776, i64* @rdx, align 8
  %v3_2077a = add nuw nsw i64 %v4_20773, %v4_20770
  store i64 %v3_2077a, i64* @rax, align 8
  %v1_2077d = add i64 %v3_20776, 8
  %v2_2077d = inttoptr i64 %v1_2077d to i32*
  %v3_2077d = load i32, i32* %v2_2077d, align 4
  %v1_20781 = trunc i64 %v3_2077a to i32
  %v2_20781 = load i64, i64* @rbp, align 8
  %v3_20781 = trunc i64 %v2_20781 to i32
  %v4_20781 = add i32 %v3_20781, %v1_20781
  %v20_20781 = zext i32 %v4_20781 to i64
  store i64 %v20_20781, i64* @rax, align 8
  %v8_20786 = icmp ugt i32 %v4_20781, %v3_2077d
  br i1 %v8_20786, label %dec_label_pc_2078c, label %dec_label_pc_20788

dec_label_pc_20788:                               ; preds = %dec_label_pc_20770
  br label %dec_label_pc_2078c

dec_label_pc_2078c:                               ; preds = %dec_label_pc_20788, %dec_label_pc_20770
  %v3_2078c = add i64 %v2_20781, %v4_20773
  store i64 %v3_2078c, i64* @rax, align 8
  %v1_20795 = trunc i64 %v3_2078c to i32
  %v10_20798 = icmp sgt i32 %v1_20795, 31
  br i1 %v10_20798, label %bb, label %dec_label_pc_2079a

bb:                                               ; preds = %dec_label_pc_2078c
  %v12_20798 = call i64 @function_207e0(i64 %v4_20773)
  store i64 %v12_20798, i64* @rax, align 8
  br label %dec_label_pc_2079a

dec_label_pc_2079a:                               ; preds = %bb, %dec_label_pc_2078c
  %v0_2079d = phi i64 [ %v12_20798, %bb ], [ %v3_2078c, %dec_label_pc_2078c ]
  ret i64 %v0_2079d
}

define i64 @function_207e0(i64 %arg1) local_unnamed_addr {
dec_label_pc_207e0:
  store i64 %arg1, i64* @rdi, align 8
  %v3_207e0 = mul i64 %arg1, 2
  %v1_207e3 = trunc i64 %v3_207e0 to i32
  %v2_207e3 = load i64, i64* @rax, align 8
  %v3_207e3 = trunc i64 %v2_207e3 to i32
  %v4_207e3 = sub i32 %v1_207e3, %v3_207e3
  %v10_207e31 = xor i64 %v2_207e3, %v3_207e0
  %v10_207e3 = trunc i64 %v10_207e31 to i32
  %v11_207e3 = xor i32 %v4_207e3, %v1_207e3
  %v12_207e3 = and i32 %v11_207e3, %v10_207e3
  %v13_207e3 = icmp slt i32 %v12_207e3, 0
  %v15_207e3 = icmp slt i32 %v4_207e3, 0
  %v2_207e5 = icmp ne i1 %v15_207e3, %v13_207e3
  %v7_207e5.v = select i1 %v2_207e5, i64 %v2_207e3, i64 %v3_207e0
  %v8_207e5 = and i64 %v7_207e5.v, 4294967295
  store i64 %v8_207e5, i64* @rsi, align 8
  ret i64 %v2_207e3
}

define i64 @_ZN3org4luaj3vm28LuaValue6invokeEJPNS1_7VarargsEPS2_S4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_207f0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 133120, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_20843(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_20843:
  %r12.global-to-local = alloca i64, align 8
  %v2_20843 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_20843, i64* @rax, align 8
  store i64 %v2_20843, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  ret i64 %v2_20843
}

define i64 @"_ZN4lang11lang_luaj$28onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20860:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_20860 = load i64, i64* %r12.global-to-local, align 8
  %v0_20862 = load i64, i64* %rbp.global-to-local, align 8
  %v0_20863 = load i64, i64* @rdi, align 8
  store i64 %v0_20863, i64* %r12.global-to-local, align 8
  %v0_20866 = load i64, i64* @rbx, align 8
  %v2_20867 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_20867, i64* @rbx, align 8
  store i64 %v2_20867, i64* %rbp.global-to-local, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rax, align 8
  store i64 %v2_20867, i64* @rdi, align 8
  %v0_2089d = load i64, i64* inttoptr (i64 133284 to i64*), align 8
  store i64 %v0_2089d, i64* @rax, align 8
  store i64 %v0_20866, i64* @rbx, align 8
  store i64 %v0_20862, i64* %rbp.global-to-local, align 8
  store i64 %v0_20860, i64* %r12.global-to-local, align 8
  ret i64 %v0_2089d
}

define i64 @"_ZN4lang15lang_luaj$77$128onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20900:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 2, i64* @rax, align 8
  store i64 133451, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString6concatEJPNS1_6BufferES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20990:
  store i64 %arg1, i64* @rdi, align 8
  %v1_20990 = icmp eq i64 %arg2, 0
  br i1 %v1_20990, label %bb, label %dec_label_pc_209a1

bb:                                               ; preds = %dec_label_pc_20990
  %v1_2099b = call i64 @function_20b24()
  store i64 %v1_2099b, i64* @rax, align 8
  br label %dec_label_pc_209a1

dec_label_pc_209a1:                               ; preds = %bb, %dec_label_pc_20990
  %v0_209a1 = load i64, i64* @rdi, align 8
  store i64 %v0_209a1, i64* @r12, align 8
  %v1_209a4 = add i64 %arg2, 24
  %v2_209a4 = inttoptr i64 %v1_209a4 to i64*
  %v3_209a4 = load i64, i64* %v2_209a4, align 8
  store i64 %v3_209a4, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_209ab = icmp eq i64 %v3_209a4, 0
  br i1 %v1_209ab, label %bb243, label %dec_label_pc_209b4

bb243:                                            ; preds = %dec_label_pc_209a1
  %v1_209ae = call i64 @function_20a98()
  store i64 %v1_209ae, i64* @rax, align 8
  br label %dec_label_pc_209b4

dec_label_pc_209b4:                               ; preds = %bb243, %dec_label_pc_209a1
  %v1_209b4 = inttoptr i64 %v3_209a4 to i64*
  %v2_209b4 = load i64, i64* %v1_209b4, align 8
  store i64 %v2_209b4, i64* @rax, align 8
  %v4_209bd = trunc i64 %v2_209b4 to i8
  %v5_209bd = icmp eq i8 %v4_209bd, 0
  br i1 %v5_209bd, label %bb244, label %dec_label_pc_209c5

bb244:                                            ; preds = %dec_label_pc_209b4
  %v6_209bf = call i64 @function_20a58(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_209bf, i64* @rax, align 8
  br label %dec_label_pc_209c5

dec_label_pc_209c5:                               ; preds = %bb244, %dec_label_pc_209b4
  %v0_209c5 = load i64, i64* @rbx, align 8
  %v1_209c5 = add i64 %v0_209c5, 24
  %v2_209c5 = inttoptr i64 %v1_209c5 to i64*
  %v3_209c5 = load i64, i64* %v2_209c5, align 8
  store i64 %v3_209c5, i64* @rdi, align 8
  %v0_209c9 = load i64, i64* @r12, align 8
  %v1_209c9 = add i64 %v0_209c9, 20
  %v2_209c9 = inttoptr i64 %v1_209c9 to i32*
  %v3_209c9 = load i32, i32* %v2_209c9, align 4
  %v4_209c9 = zext i32 %v3_209c9 to i64
  store i64 %v4_209c9, i64* @rbp, align 8
  %v1_209ce = icmp eq i64 %v3_209c5, 0
  br i1 %v1_209ce, label %bb245, label %dec_label_pc_209d7

bb245:                                            ; preds = %dec_label_pc_209c5
  %v1_209d1 = call i64 @function_20a9d()
  store i64 %v1_209d1, i64* @rax, align 8
  br label %dec_label_pc_209d7

dec_label_pc_209d7:                               ; preds = %bb245, %dec_label_pc_209c5
  %v1_209d7 = inttoptr i64 %v3_209c5 to i64*
  %v2_209d7 = load i64, i64* %v1_209d7, align 8
  store i64 %v2_209d7, i64* @rax, align 8
  ret i64 %v2_209d7
}

define i64 @function_20a58(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_20a58:
  %v2_20a58 = load i64, i64* @r12, align 8
  store i64 %v2_20a58, i64* @rax, align 8
  %v0_20a5c = load i64, i64* @rbx, align 8
  store i64 %v2_20a58, i64* @rdi, align 8
  %v0_20a69 = load i64, i64* inttoptr (i64 133744 to i64*), align 16
  store i64 %v0_20a69, i64* @rdx, align 8
  %v1_20a70 = add i64 %v0_20a5c, 16
  %v2_20a70 = inttoptr i64 %v1_20a70 to i32*
  store i32 0, i32* %v2_20a70, align 4
  %v0_20a77 = load i64, i64* @rbx, align 8
  %v1_20a77 = add i64 %v0_20a77, 20
  %v2_20a77 = inttoptr i64 %v1_20a77 to i32*
  store i32 0, i32* %v2_20a77, align 4
  %v0_20a7e = load i64, i64* @rax, align 8
  %v1_20a7e = load i64, i64* @rbx, align 8
  %v2_20a7e = add i64 %v1_20a7e, 24
  %v3_20a7e = inttoptr i64 %v2_20a7e to i64*
  store i64 %v0_20a7e, i64* %v3_20a7e, align 8
  %v0_20a82 = load i64, i64* @rdx, align 8
  %v1_20a82 = load i64, i64* @rbx, align 8
  %v2_20a82 = add i64 %v1_20a82, 8
  %v3_20a82 = inttoptr i64 %v2_20a82 to i64*
  store i64 %v0_20a82, i64* %v3_20a82, align 8
  %v0_20a86 = load i64, i64* @rbx, align 8
  store i64 %v0_20a86, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* @r12, align 8
  ret i64 %v0_20a86
}

define i64 @function_20a98() local_unnamed_addr {
dec_label_pc_20a98:
  %v5_20a98 = load i64, i64* @rax, align 8
  ret i64 %v5_20a98
}

define i64 @function_20a9d() local_unnamed_addr {
dec_label_pc_20a9d:
  %v0_20a9d = load i64, i64* @rbx, align 8
  %v1_20a9d = add i64 %v0_20a9d, 8
  %v2_20a9d = inttoptr i64 %v1_20a9d to i64*
  %v3_20a9d = load i64, i64* %v2_20a9d, align 8
  store i64 %v3_20a9d, i64* @rdx, align 8
  %v1_20aa1 = add i64 %v0_20a9d, 20
  %v2_20aa1 = inttoptr i64 %v1_20aa1 to i32*
  %v3_20aa1 = load i32, i32* %v2_20aa1, align 4
  %v4_20aa1 = zext i32 %v3_20aa1 to i64
  store i64 %v4_20aa1, i64* @rcx, align 8
  %v1_20aa4 = add i64 %v0_20a9d, 16
  %v2_20aa4 = inttoptr i64 %v1_20aa4 to i32*
  %v3_20aa4 = load i32, i32* %v2_20aa4, align 4
  %v4_20aa4 = zext i32 %v3_20aa4 to i64
  store i64 %v4_20aa4, i64* @rax, align 8
  %v1_20aa7 = add i64 %v3_20a9d, 8
  %v2_20aa7 = inttoptr i64 %v1_20aa7 to i32*
  %v3_20aa7 = load i32, i32* %v2_20aa7, align 4
  %v4_20aa7 = zext i32 %v3_20aa7 to i64
  store i64 %v4_20aa7, i64* @rdi, align 8
  %v3_20aaa = add nuw nsw i64 %v4_20aa4, %v4_20aa1
  %v8_20aaf = icmp ugt i64 %v3_20aaa, %v4_20aa7
  %v0_20ab9.pre = load i64, i64* @rbp, align 8
  br i1 %v8_20aaf, label %dec_label_pc_20ab9, label %dec_label_pc_20ab1

dec_label_pc_20ab1:                               ; preds = %dec_label_pc_20a9d
  br label %dec_label_pc_20ab9

dec_label_pc_20ab9:                               ; preds = %dec_label_pc_20a9d, %dec_label_pc_20ab1
  %v3_20ab9 = add i64 %v0_20ab9.pre, %v4_20aa4
  %v1_20ac3 = trunc i64 %v3_20ab9 to i32
  %v9_20ac7 = icmp sgt i32 %v1_20ac3, 31
  br i1 %v9_20ac7, label %dec_label_pc_20ac9, label %dec_label_pc_20ad3

dec_label_pc_20ac9:                               ; preds = %dec_label_pc_20ab9
  br label %dec_label_pc_20ad3

dec_label_pc_20ad3:                               ; preds = %dec_label_pc_20ab9, %dec_label_pc_20ac9
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_20b24() local_unnamed_addr {
dec_label_pc_20b24:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm215TailcallVarargsC1EPNS1_8LuaValueES4_PNS1_7VarargsE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_20b30:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_20b34 = load i64, i64* @rdx, align 8
  %v0_20b39 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_20b39, i64* @rbx, align 8
  %v0_20b3f = load i64, i64* @rdi, align 8
  store i64 %v0_20b34, i64* %rsi.global-to-local, align 8
  store i64 133985, i64* @rdi, align 8
  %v2_20b61 = add i64 %v0_20b3f, 8
  %v3_20b61 = inttoptr i64 %v2_20b61 to i64*
  store i64 %v0_20b39, i64* %v3_20b61, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_20b9e(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_20b9e:
  %rbp.global-to-local = alloca i64, align 8
  %v0_20b9e = load i64, i64* @rbx, align 8
  %v1_20b9e = load i64, i64* %rbp.global-to-local, align 8
  %v2_20b9e = add i64 %v1_20b9e, 16
  %v3_20b9e = inttoptr i64 %v2_20b9e to i64*
  store i64 %v0_20b9e, i64* %v3_20b9e, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  %v0_20bac = load i64, i64* @rax, align 8
  ret i64 %v0_20bac
}

define i64 @_ZN3org4luaj3vm29LuaString3lenEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_20bb0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 134082, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_20c26() local_unnamed_addr {
dec_label_pc_20c26:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaNumber6concatEJPNS1_6BufferES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_20c30:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_20c30 = icmp eq i64 %arg2, 0
  br i1 %v1_20c30, label %bb, label %dec_label_pc_20c41

bb:                                               ; preds = %dec_label_pc_20c30
  %v1_20c3b = call i64 @function_20dba()
  store i64 %v1_20c3b, i64* @rax, align 8
  br label %dec_label_pc_20c41

dec_label_pc_20c41:                               ; preds = %bb, %dec_label_pc_20c30
  %v0_20c41 = load i64, i64* @rdi, align 8
  store i64 %v0_20c41, i64* @rbp, align 8
  %v1_20c44 = add i64 %arg2, 24
  %v2_20c44 = inttoptr i64 %v1_20c44 to i64*
  %v3_20c44 = load i64, i64* %v2_20c44, align 8
  store i64 %v3_20c44, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_20c4b = icmp eq i64 %v3_20c44, 0
  br i1 %v1_20c4b, label %dec_label_pc_20c61, label %dec_label_pc_20c50

dec_label_pc_20c50:                               ; preds = %dec_label_pc_20c41
  %v1_20c50 = inttoptr i64 %v3_20c44 to i64*
  %v2_20c50 = load i64, i64* %v1_20c50, align 8
  store i64 %v2_20c50, i64* @rax, align 8
  %v4_20c59 = trunc i64 %v2_20c50 to i8
  %v5_20c59 = icmp eq i8 %v4_20c59, 0
  br i1 %v5_20c59, label %bb247, label %dec_label_pc_20c61

bb247:                                            ; preds = %dec_label_pc_20c50
  %v6_20c5b = call i64 @function_20d80(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_20c5b, i64* @rax, align 8
  %v0_20c65.pre = load i64, i64* @rbp, align 8
  %v0_20c6e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_20c61

dec_label_pc_20c61:                               ; preds = %bb247, %dec_label_pc_20c50, %dec_label_pc_20c41
  %v0_20c6e = phi i64 [ %v0_20c6e.pre, %bb247 ], [ %arg2, %dec_label_pc_20c50 ], [ %arg2, %dec_label_pc_20c41 ]
  %v0_20c65 = phi i64 [ %v0_20c65.pre, %bb247 ], [ %v0_20c41, %dec_label_pc_20c50 ], [ %v0_20c41, %dec_label_pc_20c41 ]
  store i64 %v3_20c44, i64* @rax, align 8
  store i64 %v0_20c65, i64* @rdi, align 8
  %v1_20c6e = add i64 %v0_20c6e, 24
  %v2_20c6e = inttoptr i64 %v1_20c6e to i64*
  %v3_20c6e = load i64, i64* %v2_20c6e, align 8
  store i64 %v3_20c6e, i64* @rdi, align 8
  %v1_20c75 = add i64 %v3_20c44, 20
  %v2_20c75 = inttoptr i64 %v1_20c75 to i32*
  %v3_20c75 = load i32, i32* %v2_20c75, align 4
  %v4_20c75 = zext i32 %v3_20c75 to i64
  store i64 %v4_20c75, i64* @rbp, align 8
  %v1_20c78 = icmp eq i64 %v3_20c6e, 0
  br i1 %v1_20c78, label %bb248, label %dec_label_pc_20c81

bb248:                                            ; preds = %dec_label_pc_20c61
  %v1_20c7b = call i64 @function_20d00()
  store i64 %v1_20c7b, i64* @rax, align 8
  %v0_20c97.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_20c81

dec_label_pc_20c81:                               ; preds = %bb248, %dec_label_pc_20c61
  %v0_20c97 = phi i64 [ %v0_20c97.pre, %bb248 ], [ %v0_20c6e, %dec_label_pc_20c61 ]
  %v1_20c81 = inttoptr i64 %v3_20c6e to i64*
  %v2_20c81 = load i64, i64* %v1_20c81, align 8
  store i64 %v2_20c81, i64* @rax, align 8
  %v1_20c8a = add i64 %v2_20c81, 20
  %v2_20c8a = inttoptr i64 %v1_20c8a to i32*
  %v3_20c8a = load i32, i32* %v2_20c8a, align 4
  %v4_20c8a = zext i32 %v3_20c8a to i64
  store i64 %v4_20c8a, i64* %rsi.global-to-local, align 8
  store i64 134292, i64* @rdi, align 8
  %v1_20c97 = add i64 %v0_20c97, 24
  %v2_20c97 = inttoptr i64 %v1_20c97 to i64*
  store i64 0, i64* %v2_20c97, align 8
  %v0_20c9f = load i64, i64* @rbp, align 8
  %v1_20c9f = trunc i64 %v0_20c9f to i32
  %v2_20c9f = load i64, i64* @rbx, align 8
  %v3_20c9f = add i64 %v2_20c9f, 20
  %v4_20c9f = inttoptr i64 %v3_20c9f to i32*
  store i32 %v1_20c9f, i32* %v4_20c9f, align 4
  store i64 0, i64* @rax, align 8
  %v0_20ca4 = load i64, i64* %rsi.global-to-local, align 8
  %v1_20ca4 = trunc i64 %v0_20ca4 to i32
  %v2_20ca4 = load i64, i64* @rbx, align 8
  %v3_20ca4 = add i64 %v2_20ca4, 16
  %v4_20ca4 = inttoptr i64 %v3_20ca4 to i32*
  store i32 %v1_20ca4, i32* %v4_20ca4, align 4
  %v0_20ca7 = load i64, i64* %rsi.global-to-local, align 8
  %v2_20ca7 = load i64, i64* @rbp, align 8
  %v4_20ca7 = add i64 %v2_20ca7, %v0_20ca7
  %v20_20ca7 = and i64 %v4_20ca7, 4294967295
  store i64 %v20_20ca7, i64* %rsi.global-to-local, align 8
  %v21_20ca7 = load i64, i64* @rax, align 8
  ret i64 %v21_20ca7
}

define i64 @function_20d00() local_unnamed_addr {
dec_label_pc_20d00:
  %v0_20d00 = load i64, i64* @rbx, align 8
  %v1_20d00 = add i64 %v0_20d00, 8
  %v2_20d00 = inttoptr i64 %v1_20d00 to i64*
  %v3_20d00 = load i64, i64* %v2_20d00, align 8
  store i64 %v3_20d00, i64* @rdx, align 8
  %v1_20d04 = add i64 %v0_20d00, 20
  %v2_20d04 = inttoptr i64 %v1_20d04 to i32*
  %v3_20d04 = load i32, i32* %v2_20d04, align 4
  %v4_20d04 = zext i32 %v3_20d04 to i64
  store i64 %v4_20d04, i64* @rcx, align 8
  %v1_20d07 = add i64 %v0_20d00, 16
  %v2_20d07 = inttoptr i64 %v1_20d07 to i32*
  %v3_20d07 = load i32, i32* %v2_20d07, align 4
  %v4_20d07 = zext i32 %v3_20d07 to i64
  store i64 %v4_20d07, i64* @rax, align 8
  %v1_20d0a = add i64 %v3_20d00, 8
  %v2_20d0a = inttoptr i64 %v1_20d0a to i32*
  %v3_20d0a = load i32, i32* %v2_20d0a, align 4
  %v4_20d0a = zext i32 %v3_20d0a to i64
  store i64 %v4_20d0a, i64* @rdi, align 8
  %v3_20d0d = add nuw nsw i64 %v4_20d07, %v4_20d04
  %v8_20d12 = icmp ugt i64 %v3_20d0d, %v4_20d0a
  %v0_20d18.pre = load i64, i64* @rbp, align 8
  br i1 %v8_20d12, label %dec_label_pc_20d18, label %dec_label_pc_20d14

dec_label_pc_20d14:                               ; preds = %dec_label_pc_20d00
  br label %dec_label_pc_20d18

dec_label_pc_20d18:                               ; preds = %dec_label_pc_20d00, %dec_label_pc_20d14
  %v3_20d18 = add i64 %v0_20d18.pre, %v4_20d07
  %v1_20d22 = trunc i64 %v3_20d18 to i32
  %v9_20d26 = icmp sgt i32 %v1_20d22, 31
  br i1 %v9_20d26, label %dec_label_pc_20d28, label %dec_label_pc_20d32

dec_label_pc_20d28:                               ; preds = %dec_label_pc_20d18
  br label %dec_label_pc_20d32

dec_label_pc_20d32:                               ; preds = %dec_label_pc_20d18, %dec_label_pc_20d28
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_20d80(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_20d80:
  %v2_20d80 = load i64, i64* @rbp, align 8
  store i64 %v2_20d80, i64* @rax, align 8
  %v0_20d84 = load i64, i64* @rbx, align 8
  store i64 %v2_20d80, i64* @rdi, align 8
  %v0_20d91 = load i64, i64* inttoptr (i64 134552 to i64*), align 8
  store i64 %v0_20d91, i64* @rdx, align 8
  %v1_20d98 = add i64 %v0_20d84, 16
  %v2_20d98 = inttoptr i64 %v1_20d98 to i32*
  store i32 0, i32* %v2_20d98, align 4
  %v0_20d9f = load i64, i64* @rbx, align 8
  %v1_20d9f = add i64 %v0_20d9f, 20
  %v2_20d9f = inttoptr i64 %v1_20d9f to i32*
  store i32 0, i32* %v2_20d9f, align 4
  %v0_20da6 = load i64, i64* @rax, align 8
  %v1_20da6 = load i64, i64* @rbx, align 8
  %v2_20da6 = add i64 %v1_20da6, 24
  %v3_20da6 = inttoptr i64 %v2_20da6 to i64*
  store i64 %v0_20da6, i64* %v3_20da6, align 8
  %v0_20daa = load i64, i64* @rdx, align 8
  %v1_20daa = load i64, i64* @rbx, align 8
  %v2_20daa = add i64 %v1_20daa, 8
  %v3_20daa = inttoptr i64 %v2_20daa to i64*
  store i64 %v0_20daa, i64* %v3_20daa, align 8
  %v0_20dae = load i64, i64* @rbx, align 8
  store i64 %v0_20dae, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  ret i64 %v0_20dae
}

define i64 @function_20dba() local_unnamed_addr {
dec_label_pc_20dba:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$104callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20dd0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 134626, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$344callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20e80:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 134802, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang11lang_luaj$54callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20f30:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 134978, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$304callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_20fe0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 135154, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$144callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_21090:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 135330, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$214callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_21140:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 135506, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer6appendEJPS2_c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_211f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_211f7 = load i64, i64* @rdi, align 8
  store i64 %v0_211f7, i64* @rbx, align 8
  %v1_211fa = add i64 %v0_211f7, 24
  %v2_211fa = inttoptr i64 %v1_211fa to i64*
  %v3_211fa = load i64, i64* %v2_211fa, align 8
  store i64 %v3_211fa, i64* @rdi, align 8
  %v1_211fe = icmp eq i64 %v3_211fa, 0
  br i1 %v1_211fe, label %bb, label %dec_label_pc_21203

bb:                                               ; preds = %dec_label_pc_211f0
  %v1_21201 = call i64 @function_21280()
  store i64 %v1_21201, i64* @rax, align 8
  br label %dec_label_pc_21203

dec_label_pc_21203:                               ; preds = %bb, %dec_label_pc_211f0
  %v1_21203 = inttoptr i64 %v3_211fa to i64*
  %v2_21203 = load i64, i64* %v1_21203, align 8
  store i64 %v2_21203, i64* @rax, align 8
  ret i64 %v2_21203
}

define i64 @function_21280() local_unnamed_addr {
dec_label_pc_21280:
  %v0_21280 = load i64, i64* @rbx, align 8
  %v1_21280 = add i64 %v0_21280, 8
  %v2_21280 = inttoptr i64 %v1_21280 to i64*
  %v3_21280 = load i64, i64* %v2_21280, align 8
  store i64 %v3_21280, i64* @rax, align 8
  %v1_21284 = add i64 %v0_21280, 20
  %v2_21284 = inttoptr i64 %v1_21284 to i32*
  %v3_21284 = load i32, i32* %v2_21284, align 4
  %v4_21284 = zext i32 %v3_21284 to i64
  store i64 %v4_21284, i64* @rdi, align 8
  %v1_21287 = add i64 %v0_21280, 16
  %v2_21287 = inttoptr i64 %v1_21287 to i32*
  %v3_21287 = load i32, i32* %v2_21287, align 4
  %v4_21287 = zext i32 %v3_21287 to i64
  store i64 %v4_21287, i64* @rdx, align 8
  %v1_2128a = add i64 %v3_21280, 8
  %v2_2128a = inttoptr i64 %v1_2128a to i32*
  %v3_2128a = load i32, i32* %v2_2128a, align 4
  %v4_2128a = zext i32 %v3_2128a to i64
  store i64 %v4_2128a, i64* @rcx, align 8
  %v2_2128d = sext i32 %v3_21284 to i64
  %v4_2128d = add nuw nsw i64 %v4_21287, 1
  %v5_2128d = add nsw i64 %v4_2128d, %v2_2128d
  %v8_21293 = sext i32 %v3_2128a to i64
  %v9_21293 = icmp sgt i64 %v5_2128d, %v8_21293
  br i1 %v9_21293, label %dec_label_pc_21299, label %dec_label_pc_21295

dec_label_pc_21295:                               ; preds = %dec_label_pc_21280
  br label %dec_label_pc_21299

dec_label_pc_21299:                               ; preds = %dec_label_pc_21295, %dec_label_pc_21280
  %v2_21299 = trunc i64 %v4_2128d to i32
  %v10_212a6 = icmp sgt i32 %v2_21299, 31
  br i1 %v10_212a6, label %bb, label %dec_label_pc_212a8

bb:                                               ; preds = %dec_label_pc_21299
  %sext = mul i64 %v4_2128d, 4294967296
  %v18_212a6 = sdiv i64 %sext, 4294967296
  %v19_212a6 = call i64 @function_212f0(i64 %v2_2128d, i64 32, i64 %v4_21287, i64 %v8_21293, i64 %v18_212a6)
  store i64 %v19_212a6, i64* @rax, align 8
  br label %dec_label_pc_212a8

dec_label_pc_212a8:                               ; preds = %bb, %dec_label_pc_21299
  store i64 135859, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_212f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_212f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_212fa = load i64, i64* @rax, align 8
  ret i64 %v0_212fa
}

define i64 @function_212fc() local_unnamed_addr {
dec_label_pc_212fc:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7valueOfEJPNS1_10LuaIntegerEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_21310:
  store i64 %arg1, i64* @rdi, align 8
  store i64 135963, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2138e() local_unnamed_addr {
dec_label_pc_2138e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm214LuaTable$Entry9toVarargsEJPNS1_7VarargsEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_213a0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_213a4 = load i64, i64* @rdi, align 8
  store i64 %v2_213a4, i64* @rbx, align 8
  store i64 136168, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm220LuaTable$IntKeyEntry3keyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_21410:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 136226, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2148e() local_unnamed_addr {
dec_label_pc_2148e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib14VarArgFunction4callEJPNS1_8LuaValueES5_S5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_214a0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 136368, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_214f3(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_214f3:
  %r12.global-to-local = alloca i64, align 8
  %v2_214f3 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_214f3, i64* @rax, align 8
  store i64 %v2_214f3, i64* @rdx, align 8
  store i64 %v2_214f3, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  ret i64 %v2_214f3
}

define i64 @_ZN3org4luaj3vm23lib9StringLib9addquotedEJvPNS1_6BufferEPNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_21520:
  store i64 %arg1, i64* @rdi, align 8
  store i64 136498, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2163f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2163f:
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2163f = load i64, i64* @rcx, align 8
  %v1_2163f = trunc i64 %v0_2163f to i32
  %v3_2163f = trunc i64 %arg3 to i32
  %v4_2163f = add i32 %v1_2163f, %v3_2163f
  %v20_2163f = zext i32 %v4_2163f to i64
  store i64 %v20_2163f, i64* @rcx, align 8
  %v2_21641 = load i64, i64* @rax, align 8
  %v3_21641 = add i64 %v2_21641, 8
  %v4_21641 = inttoptr i64 %v3_21641 to i32*
  %v5_21641 = load i32, i32* %v4_21641, align 4
  %v11_21641 = icmp ult i32 %v4_2163f, %v5_21641
  %v16_21641 = icmp eq i32 %v4_2163f, %v5_21641
  store i1 %v16_21641, i1* %zf.global-to-local, align 1
  %v1_21644 = add i64 %arg3, 1
  %v2_21644 = trunc i64 %v1_21644 to i32
  %v3_21647 = load i64, i64* @r15, align 8
  %v4_21647 = add i64 %v3_21647, 16
  %v5_21647 = inttoptr i64 %v4_21647 to i32*
  store i32 %v2_21644, i32* %v5_21647, align 4
  %v1_2164b = icmp eq i1 %v11_21641, false
  br i1 %v1_2164b, label %bb, label %dec_label_pc_2163f.dec_label_pc_21651_crit_edge

dec_label_pc_2163f.dec_label_pc_21651_crit_edge:  ; preds = %dec_label_pc_2163f
  %v0_2165b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_21651

bb:                                               ; preds = %dec_label_pc_2163f
  %sext = mul i64 %v1_21644, 4294967296
  %v4_2164b = sdiv i64 %sext, 4294967296
  %v7_2164b = call i64 @function_21a84(i64 %arg1, i64 %v4_2164b, i64 %arg3, i64 %v20_2163f)
  store i64 %v7_2164b, i64* @rax, align 8
  br label %dec_label_pc_21651

dec_label_pc_21651:                               ; preds = %dec_label_pc_2163f.dec_label_pc_21651_crit_edge, %bb
  %v0_2165b = phi i64 [ %v0_2165b.pre, %dec_label_pc_2163f.dec_label_pc_21651_crit_edge ], [ %v7_2164b, %bb ]
  %v4_21651 = trunc i64 %arg5 to i32
  %v5_21651 = load i64, i64* @rbx, align 8
  %v6_21651 = trunc i64 %v5_21651 to i32
  %v17_21651 = icmp eq i32 %v4_21651, %v6_21651
  store i1 %v17_21651, i1* %zf.global-to-local, align 1
  store i64 %v20_2163f, i64* @rcx, align 8
  %v3_2165b = add nuw nsw i64 %v20_2163f, 12
  %v4_2165b = add i64 %v3_2165b, %v0_2165b
  %v5_2165b = inttoptr i64 %v4_2165b to i8*
  store i8 92, i8* %v5_2165b, align 1
  %v0_21660 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_21660, label %dec_label_pc_21651.dec_label_pc_2167a_crit_edge, label %dec_label_pc_21662

dec_label_pc_21651.dec_label_pc_2167a_crit_edge:  ; preds = %dec_label_pc_21651
  %v1_2167a.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2167a

dec_label_pc_21662:                               ; preds = %dec_label_pc_21651
  %v2_21662 = load i64, i64* @rbp, align 8
  store i64 %v2_21662, i64* @rax, align 8
  store i64 %v2_21662, i64* @rdi, align 8
  %v1_21671 = trunc i64 %v2_21662 to i32
  %v12_21671 = icmp eq i32 %v1_21671, 47
  store i1 %v12_21671, i1* %zf.global-to-local, align 1
  %v10_21674 = icmp sgt i32 %v1_21671, 47
  br i1 %v10_21674, label %bb15, label %dec_label_pc_2167a

bb15:                                             ; preds = %dec_label_pc_21662
  %v11_21674 = call i64 @function_218e8()
  store i64 %v11_21674, i64* @rax, align 8
  br label %dec_label_pc_2167a

dec_label_pc_2167a:                               ; preds = %dec_label_pc_21651.dec_label_pc_2167a_crit_edge, %bb15, %dec_label_pc_21662
  %v1_2167a = phi i64 [ %v1_2167a.pre, %dec_label_pc_21651.dec_label_pc_2167a_crit_edge ], [ %v11_21674, %bb15 ], [ %v2_21662, %dec_label_pc_21662 ]
  %v0_2167a = load i64, i64* @r14, align 8
  store i64 %v0_2167a, i64* @rdi, align 8
  ret i64 %v1_2167a
}

define i64 @function_21723(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_21723:
  %r15.global-to-local = alloca i64, align 8
  %v0_21728 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_21728, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg6, i64* %r15.global-to-local, align 8
  %v0_2173e = load i64, i64* @rax, align 8
  ret i64 %v0_2173e
}

define i64 @function_21740() local_unnamed_addr {
dec_label_pc_21740:
  %v0_21740 = load i64, i64* @r15, align 8
  %v1_21740 = add i64 %v0_21740, 24
  %v2_21740 = inttoptr i64 %v1_21740 to i64*
  %v3_21740 = load i64, i64* %v2_21740, align 8
  store i64 %v3_21740, i64* @rdi, align 8
  %v1_21744 = icmp eq i64 %v3_21740, 0
  br i1 %v1_21744, label %bb, label %dec_label_pc_2174d

bb:                                               ; preds = %dec_label_pc_21740
  %v1_21747 = call i64 @function_219f0()
  store i64 %v1_21747, i64* @rax, align 8
  br label %dec_label_pc_2174d

dec_label_pc_2174d:                               ; preds = %bb, %dec_label_pc_21740
  %v1_2174d = inttoptr i64 %v3_21740 to i64*
  %v2_2174d = load i64, i64* %v1_2174d, align 8
  store i64 %v2_2174d, i64* @rax, align 8
  ret i64 %v2_2174d
}

define i64 @function_217ab(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_217ab:
  %r12.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_217ab = load i64, i64* @rax, align 8
  %v1_217ab = add i64 %v0_217ab, 8
  %v2_217ab = inttoptr i64 %v1_217ab to i32*
  %v3_217ab = load i32, i32* %v2_217ab, align 4
  %v4_217ab = zext i32 %v3_217ab to i64
  store i64 %v4_217ab, i64* @r10, align 8
  %v3_217af = add i64 %arg4, %arg3
  store i64 %v3_217af, i64* @rdi, align 8
  %v1_217b2 = add i64 %arg3, 1
  %v2_217b2 = trunc i64 %v1_217b2 to i32
  %v3_217b6 = load i64, i64* @r15, align 8
  %v4_217b6 = add i64 %v3_217b6, 16
  %v5_217b6 = inttoptr i64 %v4_217b6 to i32*
  store i32 %v2_217b2, i32* %v5_217b6, align 4
  %v0_217ba = load i64, i64* @rdi, align 8
  %v1_217ba = trunc i64 %v0_217ba to i32
  %v2_217ba = load i64, i64* @r10, align 8
  %v3_217ba = trunc i64 %v2_217ba to i32
  %v9_217ba = icmp ult i32 %v1_217ba, %v3_217ba
  %v1_217bd = icmp eq i1 %v9_217ba, false
  br i1 %v1_217bd, label %bb, label %dec_label_pc_217ab.dec_label_pc_217c3_crit_edge

dec_label_pc_217ab.dec_label_pc_217c3_crit_edge:  ; preds = %dec_label_pc_217ab
  %v0_217c6.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_217c3

bb:                                               ; preds = %dec_label_pc_217ab
  %v2_217bd = call i64 @function_21a86()
  store i64 %v2_217bd, i64* @rax, align 8
  %v1_217c6.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_217c3

dec_label_pc_217c3:                               ; preds = %dec_label_pc_217ab.dec_label_pc_217c3_crit_edge, %bb
  %v1_217c6 = phi i64 [ %v0_217ba, %dec_label_pc_217ab.dec_label_pc_217c3_crit_edge ], [ %v1_217c6.pre, %bb ]
  %v0_217c6 = phi i64 [ %v0_217c6.pre, %dec_label_pc_217ab.dec_label_pc_217c3_crit_edge ], [ %v2_217bd, %bb ]
  %v3_217c6 = add i64 %v1_217c6, 12
  %v4_217c6 = add i64 %v3_217c6, %v0_217c6
  %v5_217c6 = inttoptr i64 %v4_217c6 to i8*
  store i8 92, i8* %v5_217c6, align 1
  %v0_217cb = load i64, i64* @r15, align 8
  %v1_217cb = add i64 %v0_217cb, 24
  %v2_217cb = inttoptr i64 %v1_217cb to i64*
  %v3_217cb = load i64, i64* %v2_217cb, align 8
  store i64 %v3_217cb, i64* @rdi, align 8
  %v1_217cf = icmp eq i64 %v3_217cb, 0
  br i1 %v1_217cf, label %bb12, label %dec_label_pc_217d8

bb12:                                             ; preds = %dec_label_pc_217c3
  %sext = mul i64 %v1_217b2, 4294967296
  %v6_217d2 = sdiv i64 %sext, 4294967296
  %v7_217d2 = call i64 @function_21980(i64 0, i64 %arg2, i64 %arg3, i64 %arg4, i64 %v6_217d2)
  store i64 %v7_217d2, i64* @rax, align 8
  %v0_217ee.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_217d8

dec_label_pc_217d8:                               ; preds = %bb12, %dec_label_pc_217c3
  %v0_217ee = phi i64 [ %v0_217ee.pre, %bb12 ], [ %v0_217cb, %dec_label_pc_217c3 ]
  %v1_217d8 = inttoptr i64 %v3_217cb to i64*
  %v2_217d8 = load i64, i64* %v1_217d8, align 8
  store i64 %v2_217d8, i64* @rax, align 8
  %v1_217e1 = add i64 %v2_217d8, 20
  %v2_217e1 = inttoptr i64 %v1_217e1 to i32*
  %v3_217e1 = load i32, i32* %v2_217e1, align 4
  %v4_217e1 = zext i32 %v3_217e1 to i64
  store i64 %v4_217e1, i64* %rsi.global-to-local, align 8
  store i64 137195, i64* @rdi, align 8
  store i64 %v2_217d8, i64* %r12.global-to-local, align 8
  %v1_217ee = add i64 %v0_217ee, 24
  %v2_217ee = inttoptr i64 %v1_217ee to i64*
  store i64 0, i64* %v2_217ee, align 8
  %v0_217f6 = load i64, i64* @r15, align 8
  %v1_217f6 = add i64 %v0_217f6, 20
  %v2_217f6 = inttoptr i64 %v1_217f6 to i32*
  store i32 0, i32* %v2_217f6, align 4
  store i64 0, i64* @rax, align 8
  %v0_21800 = load i64, i64* %rsi.global-to-local, align 8
  %v1_21800 = trunc i64 %v0_21800 to i32
  %v2_21800 = load i64, i64* @r15, align 8
  %v3_21800 = add i64 %v2_21800, 16
  %v4_21800 = inttoptr i64 %v3_21800 to i32*
  store i32 %v1_21800, i32* %v4_21800, align 4
  %v0_21804 = load i64, i64* %rsi.global-to-local, align 8
  %v2_21804 = add i64 %v0_21804, 1
  %v17_21804 = and i64 %v2_21804, 4294967295
  store i64 %v17_21804, i64* %rsi.global-to-local, align 8
  %v0_2180c = load i64, i64* @r15, align 8
  %v1_2180c = add i64 %v0_2180c, 20
  %v2_2180c = inttoptr i64 %v1_2180c to i32*
  %v3_2180c = load i32, i32* %v2_2180c, align 4
  %v4_2180c = zext i32 %v3_2180c to i64
  store i64 %v4_2180c, i64* @rcx, align 8
  %v0_21810 = load i64, i64* %r12.global-to-local, align 8
  %v1_21810 = add i64 %v0_21810, 8
  %v2_21810 = inttoptr i64 %v1_21810 to i64*
  %v3_21810 = load i64, i64* %v2_21810, align 8
  store i64 %v3_21810, i64* @rdi, align 8
  %v0_21815 = load i64, i64* @rax, align 8
  store i64 %v0_21815, i64* @rdx, align 8
  %v1_21818 = add i64 %v0_21810, 16
  %v2_21818 = inttoptr i64 %v1_21818 to i32*
  %v3_21818 = load i32, i32* %v2_21818, align 4
  %v4_21818 = zext i32 %v3_21818 to i64
  store i64 %v4_21818, i64* %rsi.global-to-local, align 8
  %v2_21821 = add i64 %v0_2180c, 8
  %v3_21821 = inttoptr i64 %v2_21821 to i64*
  store i64 %v0_21815, i64* %v3_21821, align 8
  %v4_21821 = load i64, i64* @rax, align 8
  ret i64 %v4_21821
}

define i64 @function_21832(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_21832:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21832 = load i64, i64* @r15, align 8
  %v1_21832 = add i64 %v0_21832, 16
  %v2_21832 = inttoptr i64 %v1_21832 to i32*
  %v3_21832 = load i32, i32* %v2_21832, align 4
  %v4_21832 = zext i32 %v3_21832 to i64
  store i64 %v4_21832, i64* @rdi, align 8
  %v1_21836 = trunc i64 %arg4 to i32
  %v4_21836 = add i32 %v3_21832, %v1_21836
  %v20_21836 = zext i32 %v4_21836 to i64
  store i64 %v20_21836, i64* @rcx, align 8
  %v2_21838 = load i64, i64* @rax, align 8
  %v3_21838 = add i64 %v2_21838, 8
  %v4_21838 = inttoptr i64 %v3_21838 to i32*
  %v5_21838 = load i32, i32* %v4_21838, align 4
  %v11_21838 = icmp ult i32 %v4_21836, %v5_21838
  %v1_2183b = add nuw nsw i64 %v4_21832, 1
  %v2_2183b = trunc i64 %v1_2183b to i32
  store i64 %v1_2183b, i64* @rdx, align 8
  store i32 %v2_2183b, i32* %v2_21832, align 4
  %v1_21842 = icmp eq i1 %v11_21838, false
  br i1 %v1_21842, label %bb, label %dec_label_pc_21832.dec_label_pc_21848_crit_edge

dec_label_pc_21832.dec_label_pc_21848_crit_edge:  ; preds = %dec_label_pc_21832
  %v2_2184e.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_21848

bb:                                               ; preds = %dec_label_pc_21832
  %sext = mul i64 %v1_2183b, 4294967296
  %v5_21842 = sdiv i64 %sext, 4294967296
  %v7_21842 = call i64 @function_21a84(i64 %v4_21832, i64 %arg2, i64 %v5_21842, i64 %v20_21836)
  store i64 %v7_21842, i64* @rax, align 8
  br label %dec_label_pc_21848

dec_label_pc_21848:                               ; preds = %dec_label_pc_21832.dec_label_pc_21848_crit_edge, %bb
  %v2_2184e = phi i64 [ %v2_2184e.pre, %dec_label_pc_21832.dec_label_pc_21848_crit_edge ], [ %v7_21842, %bb ]
  store i64 %v20_21836, i64* @rcx, align 8
  %v0_2184e = load i64, i64* @r14, align 8
  %v1_2184e = trunc i64 %v0_2184e to i8
  %v5_2184e = add nuw nsw i64 %v20_21836, 12
  %v6_2184e = add i64 %v5_2184e, %v2_2184e
  %v7_2184e = inttoptr i64 %v6_2184e to i8*
  store i8 %v1_2184e, i8* %v7_2184e, align 1
  %v0_21853 = load i64, i64* @rax, align 8
  ret i64 %v0_21853
}

define i64 @function_21860() local_unnamed_addr {
dec_label_pc_21860:
  %v0_21860 = load i64, i64* @r15, align 8
  %v1_21860 = add i64 %v0_21860, 8
  %v2_21860 = inttoptr i64 %v1_21860 to i64*
  %v3_21860 = load i64, i64* %v2_21860, align 8
  store i64 %v3_21860, i64* @rax, align 8
  %v1_21864 = add i64 %v0_21860, 20
  %v2_21864 = inttoptr i64 %v1_21864 to i32*
  %v3_21864 = load i32, i32* %v2_21864, align 4
  %v4_21864 = zext i32 %v3_21864 to i64
  store i64 %v4_21864, i64* @rcx, align 8
  %v1_21868 = add i64 %v0_21860, 16
  %v2_21868 = inttoptr i64 %v1_21868 to i32*
  %v3_21868 = load i32, i32* %v2_21868, align 4
  %v4_21868 = zext i32 %v3_21868 to i64
  store i64 %v4_21868, i64* @rdx, align 8
  %v1_2186c = add i64 %v3_21860, 8
  %v2_2186c = inttoptr i64 %v1_2186c to i32*
  %v3_2186c = load i32, i32* %v2_2186c, align 4
  %v4_2186c = zext i32 %v3_2186c to i64
  store i64 %v4_2186c, i64* @rdi, align 8
  %v2_2186f = sext i32 %v3_21864 to i64
  %v4_2186f = add nuw nsw i64 %v4_21868, 1
  %v5_2186f = add nsw i64 %v4_2186f, %v2_2186f
  %v6_2186f = trunc i64 %v5_2186f to i32
  %v10_21875 = icmp sgt i32 %v6_2186f, %v3_2186c
  br i1 %v10_21875, label %dec_label_pc_2187f, label %dec_label_pc_21877

dec_label_pc_21877:                               ; preds = %dec_label_pc_21860
  %v8_21877 = icmp slt i32 %v3_21864, 0
  %v1_21879 = icmp eq i1 %v8_21877, false
  br i1 %v1_21879, label %bb, label %dec_label_pc_2187f

bb:                                               ; preds = %dec_label_pc_21877
  %v3_21879 = sext i32 %v3_2186c to i64
  %sext = mul i64 %v5_2186f, 4294967296
  %v5_21879 = sdiv i64 %sext, 4294967296
  %v10_21879 = call i64 @function_2163f(i64 %v3_21879, i64 %v5_21879, i64 %v4_21868, i64 %v2_2186f, i64 ptrtoint (i32* @0 to i64))
  store i64 %v10_21879, i64* @rax, align 8
  br label %dec_label_pc_2187f

dec_label_pc_2187f:                               ; preds = %bb, %dec_label_pc_21877, %dec_label_pc_21860
  %v9_2189a4 = phi i64 [ %v10_21879, %bb ], [ %v3_21860, %dec_label_pc_21877 ], [ %v3_21860, %dec_label_pc_21860 ]
  %v1_21888 = trunc i64 %v4_2186f to i32
  %v9_2188c = icmp sgt i32 %v1_21888, 31
  br i1 %v9_2188c, label %dec_label_pc_2188e, label %dec_label_pc_21898

dec_label_pc_2188e:                               ; preds = %dec_label_pc_2187f
  %v3_2188e = mul nuw nsw i64 %v4_21868, 2
  %v1_21891 = trunc i64 %v3_2188e to i32
  %v4_21891 = sub i32 %v1_21891, %v1_21888
  %v10_218911 = xor i64 %v4_2186f, %v3_2188e
  %v10_21891 = trunc i64 %v10_218911 to i32
  %v11_21891 = xor i32 %v4_21891, %v1_21891
  %v12_21891 = and i32 %v11_21891, %v10_21891
  %v13_21891 = icmp slt i32 %v12_21891, 0
  %v15_21891 = icmp slt i32 %v4_21891, 0
  %v2_21894 = icmp ne i1 %v15_21891, %v13_21891
  %v7_21894.v = select i1 %v2_21894, i64 %v4_2186f, i64 %v3_2188e
  %v8_21894 = and i64 %v7_21894.v, 4294967295
  br label %dec_label_pc_21898

dec_label_pc_21898:                               ; preds = %dec_label_pc_2187f, %dec_label_pc_2188e
  %v3_2189a = phi i64 [ 32, %dec_label_pc_2187f ], [ %v8_21894, %dec_label_pc_2188e ]
  %v4_21898 = trunc i64 %v3_2189a to i32
  %v15_21898 = icmp eq i32 %v3_2186c, %v4_21898
  br i1 %v15_21898, label %bb256, label %dec_label_pc_218a0

bb256:                                            ; preds = %dec_label_pc_21898
  %v2_2189a = sext i32 %v3_2186c to i64
  %v8_2189a = call i64 @function_2163f(i64 %v2_2189a, i64 %v3_2189a, i64 %v4_21868, i64 %v2_2186f, i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_2189a, i64* @rax, align 8
  br label %dec_label_pc_218a0

dec_label_pc_218a0:                               ; preds = %bb256, %dec_label_pc_21898
  %v9_2189a = phi i64 [ %v8_2189a, %bb256 ], [ %v9_2189a4, %dec_label_pc_21898 ]
  ret i64 %v9_2189a
}

define i64 @function_218e8() local_unnamed_addr {
dec_label_pc_218e8:
  %v2_218e8 = load i64, i64* @rbp, align 8
  store i64 %v2_218e8, i64* @rax, align 8
  store i64 1, i64* @rdx, align 8
  %v0_21907 = load i64, i64* @r15, align 8
  store i64 %v0_21907, i64* @rdi, align 8
  %v1_2190f = add i64 %v0_21907, 16
  %v2_2190f = inttoptr i64 %v1_2190f to i32*
  %v3_2190f = load i32, i32* %v2_2190f, align 4
  %v4_2190f = zext i32 %v3_2190f to i64
  store i64 %v4_2190f, i64* @rdi, align 8
  %v1_21913 = add i64 %v0_21907, 8
  %v2_21913 = inttoptr i64 %v1_21913 to i64*
  %v3_21913 = load i64, i64* %v2_21913, align 8
  store i64 %v3_21913, i64* @rax, align 8
  %v1_21917 = add nuw nsw i64 %v4_2190f, 1
  store i64 %v1_21917, i64* @rdx, align 8
  %v3_2191a = add i64 %v0_21907, 20
  %v4_2191a = inttoptr i64 %v3_2191a to i32*
  %v5_2191a = load i32, i32* %v4_2191a, align 4
  %v6_2191a = add i32 %v5_2191a, %v3_2190f
  %v22_2191a = zext i32 %v6_2191a to i64
  store i64 %v22_2191a, i64* @rdi, align 8
  %v3_2191e = add i64 %v3_21913, 8
  %v4_2191e = inttoptr i64 %v3_2191e to i32*
  %v5_2191e = load i32, i32* %v4_2191e, align 4
  %v11_2191e = icmp ult i32 %v6_2191a, %v5_2191e
  %v1_21921 = trunc i64 %v1_21917 to i32
  store i32 %v1_21921, i32* %v2_2190f, align 4
  %v1_21925 = icmp eq i1 %v11_2191e, false
  br i1 %v1_21925, label %bb, label %dec_label_pc_218e8.dec_label_pc_2192b_crit_edge

dec_label_pc_218e8.dec_label_pc_2192b_crit_edge:  ; preds = %dec_label_pc_218e8
  %v0_2192e.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2192b

bb:                                               ; preds = %dec_label_pc_218e8
  %v2_21925 = call i64 @function_21a86()
  store i64 %v2_21925, i64* @rax, align 8
  br label %dec_label_pc_2192b

dec_label_pc_2192b:                               ; preds = %dec_label_pc_218e8.dec_label_pc_2192b_crit_edge, %bb
  %v0_2192e = phi i64 [ %v0_2192e.pre, %dec_label_pc_218e8.dec_label_pc_2192b_crit_edge ], [ %v2_21925, %bb ]
  %v1_2192e = load i64, i64* @rdi, align 8
  %v3_2192e = add i64 %v0_2192e, 12
  %v4_2192e = add i64 %v3_2192e, %v1_2192e
  %v5_2192e = inttoptr i64 %v4_2192e to i8*
  store i8 48, i8* %v5_2192e, align 1
  %v0_21938 = load i64, i64* @r15, align 8
  %v0_2193b = load i64, i64* @r14, align 8
  %v2_2193b = mul i64 %v0_2193b, 1717986919
  %v3_2193b = udiv i64 %v2_2193b, 4294967296
  %v4_2193b = trunc i64 %v3_2193b to i32
  %v1_21941 = trunc i64 %v0_2193b to i32
  %v3_21941 = ashr i32 %v1_21941, 31
  %v3_21944 = sdiv i32 %v4_2193b, 4
  %v4_21947 = sub nsw i32 %v3_21944, %v3_21941
  %v20_21947 = zext i32 %v4_21947 to i64
  store i64 %v20_21947, i64* @rdx, align 8
  store i64 %v0_21938, i64* @rdi, align 8
  %v4_21966 = mul i32 %v4_21947, 10
  %v20_21966 = zext i32 %v4_21966 to i64
  store i64 %v20_21966, i64* @rax, align 8
  ret i64 %v20_21966
}

define i64 @function_21980(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_21980:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v3_21980 = add i64 %arg4, 1
  %v4_21980 = add i64 %v3_21980, %arg5
  %v0_21985 = load i64, i64* @r10, align 8
  %sext = mul i64 %v4_21980, 4294967296
  %v5_21988 = sdiv i64 %sext, 4294967296
  %v6_21988 = icmp slt i64 %v0_21985, %v5_21988
  br i1 %v6_21988, label %dec_label_pc_21992, label %dec_label_pc_2198a

dec_label_pc_2198a:                               ; preds = %dec_label_pc_21980
  %v4_2198a = trunc i64 %arg4 to i32
  %v6_2198a = icmp slt i32 %v4_2198a, 0
  %v1_2198c = icmp eq i1 %v6_2198a, false
  br i1 %v1_2198c, label %bb, label %dec_label_pc_21992

bb:                                               ; preds = %dec_label_pc_2198a
  %v7_2198c = call i64 @function_21832(i64 %arg1, i64 %v5_21988, i64 %arg3, i64 %arg4)
  store i64 %v7_2198c, i64* @rax, align 8
  br label %dec_label_pc_21992

dec_label_pc_21992:                               ; preds = %bb, %dec_label_pc_2198a, %dec_label_pc_21980
  %v1_21992 = trunc i64 %arg3 to i32
  %v2_21992 = add i32 %v1_21992, 2
  %v17_21992 = zext i32 %v2_21992 to i64
  store i64 %v17_21992, i64* @rdx, align 8
  %v9_2199d = icmp sgt i32 %v2_21992, 31
  br i1 %v9_2199d, label %bb25, label %dec_label_pc_219a3

bb25:                                             ; preds = %dec_label_pc_21992
  %v16_2199d = call i64 @function_21a73(i64 %arg1, i64 32, i64 %v17_21992, i64 %arg4, i64 %arg5)
  store i64 %v16_2199d, i64* @rax, align 8
  br label %dec_label_pc_219a3

dec_label_pc_219a3:                               ; preds = %bb25, %dec_label_pc_21992
  %v0_219a3 = load i64, i64* @r10, align 8
  %v1_219a3 = trunc i64 %v0_219a3 to i32
  %v15_219a3 = icmp eq i32 %v1_219a3, 32
  br i1 %v15_219a3, label %bb27, label %dec_label_pc_219a3.dec_label_pc_219ac_crit_edge

dec_label_pc_219a3.dec_label_pc_219ac_crit_edge:  ; preds = %dec_label_pc_219a3
  %v7_219a6.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_219ac

bb27:                                             ; preds = %dec_label_pc_219a3
  %v6_219a6 = call i64 @function_21832(i64 %arg1, i64 32, i64 %v17_21992, i64 %arg4)
  store i64 %v6_219a6, i64* @rax, align 8
  br label %dec_label_pc_219ac

dec_label_pc_219ac:                               ; preds = %dec_label_pc_219a3.dec_label_pc_219ac_crit_edge, %bb27
  %v7_219a6 = phi i64 [ %v7_219a6.pre, %dec_label_pc_219a3.dec_label_pc_219ac_crit_edge ], [ %v6_219a6, %bb27 ]
  ret i64 %v7_219a6
}

define i64 @function_219f0() local_unnamed_addr {
dec_label_pc_219f0:
  %v0_219f0 = load i64, i64* @r15, align 8
  %v1_219f0 = add i64 %v0_219f0, 8
  %v2_219f0 = inttoptr i64 %v1_219f0 to i64*
  %v3_219f0 = load i64, i64* %v2_219f0, align 8
  store i64 %v3_219f0, i64* @rax, align 8
  %v1_219f4 = add i64 %v0_219f0, 20
  %v2_219f4 = inttoptr i64 %v1_219f4 to i32*
  %v3_219f4 = load i32, i32* %v2_219f4, align 4
  %v4_219f4 = zext i32 %v3_219f4 to i64
  store i64 %v4_219f4, i64* @rcx, align 8
  %v1_219f8 = add i64 %v0_219f0, 16
  %v2_219f8 = inttoptr i64 %v1_219f8 to i32*
  %v3_219f8 = load i32, i32* %v2_219f8, align 4
  %v4_219f8 = zext i32 %v3_219f8 to i64
  store i64 %v4_219f8, i64* @rdx, align 8
  %v1_219fc = add i64 %v3_219f0, 8
  %v2_219fc = inttoptr i64 %v1_219fc to i32*
  %v3_219fc = load i32, i32* %v2_219fc, align 4
  %v4_219fc = zext i32 %v3_219fc to i64
  store i64 %v4_219fc, i64* @rdi, align 8
  %v2_219ff = sext i32 %v3_219f4 to i64
  %v4_219ff = add nuw nsw i64 %v4_219f8, 1
  %v5_219ff = add nsw i64 %v4_219ff, %v2_219ff
  %sext = mul i64 %v5_219ff, 4294967296
  %v7_21a05 = sdiv i64 %sext, 4294967296
  %v9_21a05 = icmp sgt i64 %v7_21a05, %v4_219fc
  br i1 %v9_21a05, label %dec_label_pc_21a0f, label %dec_label_pc_21a07

dec_label_pc_21a07:                               ; preds = %dec_label_pc_219f0
  %v8_21a07 = icmp slt i32 %v3_219f4, 0
  %v1_21a09 = icmp eq i1 %v8_21a07, false
  br i1 %v1_21a09, label %bb, label %dec_label_pc_21a0f

bb:                                               ; preds = %dec_label_pc_21a07
  %v8_21a09 = call i64 @function_217ab(i64 %v4_219fc, i64 %v7_21a05, i64 %v4_219f8, i64 %v2_219ff)
  store i64 %v8_21a09, i64* @rax, align 8
  br label %dec_label_pc_21a0f

dec_label_pc_21a0f:                               ; preds = %bb, %dec_label_pc_21a07, %dec_label_pc_219f0
  %v8_21a206 = phi i64 [ %v8_21a09, %bb ], [ %v3_219f0, %dec_label_pc_21a07 ], [ %v3_219f0, %dec_label_pc_219f0 ]
  %v2_21a0f = trunc i64 %v4_219ff to i32
  %v10_21a1c = icmp sgt i32 %v2_21a0f, 31
  br i1 %v10_21a1c, label %bb30, label %dec_label_pc_21a1e

bb30:                                             ; preds = %dec_label_pc_21a0f
  %sext2 = mul i64 %v4_219ff, 4294967296
  %v18_21a1c = sdiv i64 %sext2, 4294967296
  %v19_21a1c = call i64 @function_21a67(i64 %v4_219fc, i64 32, i64 %v4_219f8, i64 %v2_219ff, i64 %v18_21a1c)
  store i64 %v19_21a1c, i64* @rax, align 8
  br label %dec_label_pc_21a1e

dec_label_pc_21a1e:                               ; preds = %bb30, %dec_label_pc_21a0f
  %v8_21a205 = phi i64 [ %v19_21a1c, %bb30 ], [ %v8_21a206, %dec_label_pc_21a0f ]
  %v15_21a1e = icmp eq i32 %v3_219fc, 32
  br i1 %v15_21a1e, label %bb32, label %dec_label_pc_21a26

bb32:                                             ; preds = %dec_label_pc_21a1e
  %v7_21a20 = call i64 @function_217ab(i64 %v4_219fc, i64 32, i64 %v4_219f8, i64 %v2_219ff)
  store i64 %v7_21a20, i64* @rax, align 8
  br label %dec_label_pc_21a26

dec_label_pc_21a26:                               ; preds = %bb32, %dec_label_pc_21a1e
  %v8_21a20 = phi i64 [ %v7_21a20, %bb32 ], [ %v8_21a205, %dec_label_pc_21a1e ]
  ret i64 %v8_21a20
}

define i64 @function_21a67(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_21a67:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21a71 = load i64, i64* @rax, align 8
  ret i64 %v0_21a71
}

define i64 @function_21a73(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_21a73:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21a7f = load i64, i64* @rax, align 8
  ret i64 %v0_21a7f
}

define i64 @function_21a84(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_21a84:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg4, i64* @rdi, align 8
  %v1_21a84 = load i64, i64* @rax, align 8
  ret i64 %v1_21a84
}

define i64 @function_21a86() local_unnamed_addr {
dec_label_pc_21a86:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_21a8d() local_unnamed_addr {
dec_label_pc_21a8d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12invokemethodEJPNS1_7VarargsEPS2_S4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_21aa0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21aa9 = load i64, i64* @rdi, align 8
  store i64 %v0_21aa9, i64* @rbx, align 8
  store i64 137920, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_21afc(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_21afc:
  %r12.global-to-local = alloca i64, align 8
  %v2_21afc = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_21afc, i64* @rax, align 8
  store i64 %v2_21afc, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  ret i64 %v2_21afc
}

define i64 @_ZN3org4luaj3vm28LuaValue12invokemethodEJPNS1_7VarargsEPN4java4lang6StringES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_21b20:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21b29 = load i64, i64* @rdi, align 8
  store i64 %v0_21b29, i64* @rbx, align 8
  store i64 138048, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_21b7c(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_21b7c:
  %r12.global-to-local = alloca i64, align 8
  %v2_21b7c = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_21b7c, i64* @rax, align 8
  store i64 %v2_21b7c, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  ret i64 %v2_21b7c
}

define i64 @_ZN3org4luaj3vm210LuaInteger3subEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_21ba0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_21ba8 = load i64, i64* @rdi, align 8
  %v1_21ba8 = add i64 %v0_21ba8, 8
  %v2_21ba8 = inttoptr i64 %v1_21ba8 to i32*
  %v3_21ba8 = load i32, i32* %v2_21ba8, align 4
  store i64 138162, i64* @rdi, align 8
  %v2_21bb2 = load i64, i64* %rsi.global-to-local, align 8
  %v3_21bb2 = trunc i64 %v2_21bb2 to i32
  %v4_21bb2 = sub i32 %v3_21ba8, %v3_21bb2
  %v20_21bb2 = zext i32 %v4_21bb2 to i64
  store i64 %v20_21bb2, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_21c26() local_unnamed_addr {
dec_label_pc_21c26:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$638onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_21c30:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21c3a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_21c3a, i64* %rbp.global-to-local, align 8
  %v0_21c3d = load i64, i64* @rdi, align 8
  store i64 %v0_21c3d, i64* @rbx, align 8
  store i64 1, i64* @rax, align 8
  store i64 %v0_21c3a, i64* @rdi, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  %v1_21c69 = add i64 %v0_21c3d, 48
  %v2_21c69 = inttoptr i64 %v1_21c69 to i64*
  %v3_21c69 = load i64, i64* %v2_21c69, align 8
  store i64 %v3_21c69, i64* @rax, align 8
  %v1_21c71 = add i64 %v0_21c3d, 32
  %v2_21c71 = inttoptr i64 %v1_21c71 to i64*
  %v3_21c71 = load i64, i64* %v2_21c71, align 8
  store i64 %v3_21c71, i64* %rbp.global-to-local, align 8
  %v1_21c75 = add i64 %v0_21c3d, 40
  %v2_21c75 = inttoptr i64 %v1_21c75 to i64*
  %v3_21c75 = load i64, i64* %v2_21c75, align 8
  store i64 %v3_21c75, i64* %r12.global-to-local, align 8
  store i64 %v0_21c3a, i64* @rdx, align 8
  %v1_21c7e = add i64 %v3_21c69, 8
  %v2_21c7e = inttoptr i64 %v1_21c7e to i32*
  %v3_21c7e = load i32, i32* %v2_21c7e, align 4
  %v4_21c7e = zext i32 %v3_21c7e to i64
  store i64 %v4_21c7e, i64* @rcx, align 8
  %v5_21c81 = icmp eq i32 %v3_21c7e, 0
  br i1 %v5_21c81, label %bb, label %dec_label_pc_21c89

bb:                                               ; preds = %dec_label_pc_21c30
  %v2_21c83 = call i64 @function_21dbd(i64 %v0_21c3a)
  store i64 %v2_21c83, i64* @rax, align 8
  %v0_21c8d.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_21c91.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_21c94.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_21c89

dec_label_pc_21c89:                               ; preds = %bb, %dec_label_pc_21c30
  %v0_21c94 = phi i64 [ %v0_21c94.pre, %bb ], [ %v0_21c3d, %dec_label_pc_21c30 ]
  %v0_21c91 = phi i64 [ %v0_21c91.pre, %bb ], [ %v3_21c75, %dec_label_pc_21c30 ]
  %v0_21c9c = phi i64 [ %v0_21c8d.pre, %bb ], [ %v3_21c71, %dec_label_pc_21c30 ]
  %v1_21c8d = inttoptr i64 %v0_21c9c to i64*
  %v2_21c8d = load i64, i64* %v1_21c8d, align 8
  store i64 %v2_21c8d, i64* @rax, align 8
  store i64 %v0_21c91, i64* %rsi.global-to-local, align 8
  %v1_21c94 = add i64 %v0_21c94, 64
  %v2_21c94 = inttoptr i64 %v1_21c94 to i64*
  %v3_21c94 = load i64, i64* %v2_21c94, align 8
  store i64 %v3_21c94, i64* @rcx, align 8
  store i64 138412, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_21dbd(i64 %arg1) local_unnamed_addr {
dec_label_pc_21dbd:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_21dc6() local_unnamed_addr {
dec_label_pc_21dc6:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$68onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_21de0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21de3 = load i64, i64* @rbx, align 8
  %v2_21de4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_21de4, i64* @rax, align 8
  %v0_21de7 = load i64, i64* @rdi, align 8
  store i64 %v0_21de7, i64* @rbx, align 8
  store i64 %v2_21de4, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_21df8 = add i64 %v0_21de7, 24
  %v2_21df8 = inttoptr i64 %v1_21df8 to i64*
  %v3_21df8 = load i64, i64* %v2_21df8, align 8
  store i64 %v3_21df8, i64* @rdi, align 8
  %v1_21dfc = inttoptr i64 %v3_21df8 to i64*
  %v2_21dfc = load i64, i64* %v1_21dfc, align 8
  store i64 %v2_21dfc, i64* @rax, align 8
  %v1_21e05 = inttoptr i64 %v2_21dfc to i64*
  %v2_21e05 = load i64, i64* %v1_21e05, align 8
  store i64 %v2_21e05, i64* @rdx, align 8
  store i64 %v2_21dfc, i64* @rdi, align 8
  %v4_21e11 = trunc i64 %v2_21dfc to i8
  %v5_21e11 = icmp eq i8 %v4_21e11, 0
  br i1 %v5_21e11, label %dec_label_pc_21e28, label %dec_label_pc_21e15

dec_label_pc_21e15:                               ; preds = %dec_label_pc_21de0
  %v0_21e15 = load i64, i64* inttoptr (i64 138780 to i64*), align 8
  store i64 %v0_21e15, i64* @rax, align 8
  store i64 %v0_21de3, i64* @rbx, align 8
  ret i64 %v0_21e15

dec_label_pc_21e28:                               ; preds = %dec_label_pc_21de0
  %v1_21e28 = add i64 %v0_21de7, 32
  %v2_21e28 = inttoptr i64 %v1_21e28 to i64*
  %v3_21e28 = load i64, i64* %v2_21e28, align 8
  store i64 %v3_21e28, i64* @rdi, align 8
  %v1_21e2c = inttoptr i64 %v3_21e28 to i64*
  %v2_21e2c = load i64, i64* %v1_21e2c, align 8
  store i64 %v2_21e2c, i64* @rax, align 8
  store i64 %v2_21e2c, i64* @r12, align 8
  %v1_21e38 = add i64 %v0_21de7, 40
  %v2_21e38 = inttoptr i64 %v1_21e38 to i64*
  %v3_21e38 = load i64, i64* %v2_21e38, align 8
  store i64 %v3_21e38, i64* @rax, align 8
  %v0_21e3c = load i64, i64* inttoptr (i64 138819 to i64*), align 8
  store i64 %v0_21e3c, i64* %rbp.global-to-local, align 8
  %v1_21e43 = add i64 %v3_21e38, 8
  %v2_21e43 = inttoptr i64 %v1_21e43 to i32*
  %v3_21e43 = load i32, i32* %v2_21e43, align 4
  %v4_21e43 = zext i32 %v3_21e43 to i64
  store i64 %v4_21e43, i64* %rsi.global-to-local, align 8
  %v5_21e46 = icmp eq i32 %v3_21e43, 0
  br i1 %v5_21e46, label %bb, label %dec_label_pc_21e4e

bb:                                               ; preds = %dec_label_pc_21e28
  %v2_21e48 = call i64 @function_21f95(i64 %v3_21e28)
  store i64 %v2_21e48, i64* @rax, align 8
  %v0_21e52.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_21e4e

dec_label_pc_21e4e:                               ; preds = %bb, %dec_label_pc_21e28
  %v0_21e52 = phi i64 [ %v0_21e52.pre, %bb ], [ %v2_21e2c, %dec_label_pc_21e28 ]
  %v0_21e4e = phi i64 [ %v2_21e48, %bb ], [ %v3_21e38, %dec_label_pc_21e28 ]
  %v1_21e4e = add i64 %v0_21e4e, 16
  %v2_21e4e = inttoptr i64 %v1_21e4e to i64*
  %v3_21e4e = load i64, i64* %v2_21e4e, align 8
  store i64 %v3_21e4e, i64* @rdi, align 8
  store i64 %v0_21e52, i64* %rsi.global-to-local, align 8
  %v1_21e55 = inttoptr i64 %v3_21e4e to i64*
  %v2_21e55 = load i64, i64* %v1_21e55, align 8
  store i64 %v2_21e55, i64* @rax, align 8
  %v1_21e5e = inttoptr i64 %v2_21e55 to i64*
  %v2_21e5e = load i64, i64* %v1_21e5e, align 8
  store i64 %v2_21e5e, i64* @rdx, align 8
  store i64 %v2_21e55, i64* @rdi, align 8
  %v4_21e6a = trunc i64 %v2_21e55 to i8
  %v5_21e6a = icmp eq i8 %v4_21e6a, 0
  %v1_21e6c = icmp eq i1 %v5_21e6a, false
  br i1 %v1_21e6c, label %dec_label_pc_21eb8.preheader, label %dec_label_pc_21e6e

dec_label_pc_21eb8.preheader:                     ; preds = %dec_label_pc_21e4e
  %v0_21eb8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_21eb8

dec_label_pc_21e6e:                               ; preds = %dec_label_pc_21e4e
  %v3_21e6e = call i64 @function_21f80(i64 %v2_21e55, i64 %v0_21e52, i64 %v2_21e5e)
  store i64 %v3_21e6e, i64* @rax, align 8
  ret i64 %v3_21e6e

dec_label_pc_21e78:                               ; preds = %dec_label_pc_21ec7
  %v1_21e78 = add i64 %v0_21e78, 24
  %v2_21e78 = inttoptr i64 %v1_21e78 to i64*
  %v3_21e78 = load i64, i64* %v2_21e78, align 8
  store i64 %v3_21e78, i64* @rdi, align 8
  %v1_21e7c = inttoptr i64 %v3_21e78 to i64*
  %v2_21e7c = load i64, i64* %v1_21e7c, align 8
  store i64 %v2_21e7c, i64* @rax, align 8
  %v1_21e85 = inttoptr i64 %v2_21e7c to i64*
  %v2_21e85 = load i64, i64* %v1_21e85, align 8
  store i64 %v2_21e85, i64* @rdx, align 8
  store i64 %v2_21e7c, i64* @rdi, align 8
  %v4_21e91 = trunc i64 %v2_21e7c to i8
  %v5_21e91 = icmp eq i8 %v4_21e91, 0
  %v1_21e93 = icmp eq i1 %v5_21e91, false
  br i1 %v1_21e93, label %dec_label_pc_21ee7, label %dec_label_pc_21e95

dec_label_pc_21e95:                               ; preds = %dec_label_pc_21e78
  %v0_21e95 = load i64, i64* %rbp.global-to-local, align 8
  %v1_21e95 = inttoptr i64 %v0_21e95 to i64*
  %v2_21e95 = load i64, i64* %v1_21e95, align 8
  store i64 %v2_21e95, i64* @rax, align 8
  store i64 %v0_21e99, i64* %rsi.global-to-local, align 8
  store i64 %v0_21e95, i64* @rdi, align 8
  %v1_21ea5 = add i64 %v0_21e78, 32
  %v2_21ea5 = inttoptr i64 %v1_21ea5 to i64*
  %v3_21ea5 = load i64, i64* %v2_21ea5, align 8
  store i64 %v3_21ea5, i64* @rdi, align 8
  store i64 %v2_21e95, i64* %rbp.global-to-local, align 8
  %v1_21eac = inttoptr i64 %v3_21ea5 to i64*
  %v2_21eac = load i64, i64* %v1_21eac, align 8
  store i64 %v2_21eac, i64* @rax, align 8
  store i64 %v2_21eac, i64* @r12, align 8
  br label %dec_label_pc_21eb8

dec_label_pc_21eb8:                               ; preds = %dec_label_pc_21eb8.preheader, %dec_label_pc_21e95
  %v0_21ecb14 = phi i64 [ %v0_21e52, %dec_label_pc_21eb8.preheader ], [ %v2_21eac, %dec_label_pc_21e95 ]
  %v1_21ec1 = phi i64 [ %v2_21e55, %dec_label_pc_21eb8.preheader ], [ %v3_21ea5, %dec_label_pc_21e95 ]
  %v0_21eb8 = phi i64 [ %v0_21eb8.pre, %dec_label_pc_21eb8.preheader ], [ %v0_21e78, %dec_label_pc_21e95 ]
  %v1_21eb8 = add i64 %v0_21eb8, 40
  %v2_21eb8 = inttoptr i64 %v1_21eb8 to i64*
  %v3_21eb8 = load i64, i64* %v2_21eb8, align 8
  store i64 %v3_21eb8, i64* @rax, align 8
  %v1_21ebc = add i64 %v3_21eb8, 8
  %v2_21ebc = inttoptr i64 %v1_21ebc to i32*
  %v3_21ebc = load i32, i32* %v2_21ebc, align 4
  %v4_21ebc = zext i32 %v3_21ebc to i64
  store i64 %v4_21ebc, i64* @rcx, align 8
  %v5_21ebf = icmp eq i32 %v3_21ebc, 0
  br i1 %v5_21ebf, label %bb260, label %dec_label_pc_21ec7

bb260:                                            ; preds = %dec_label_pc_21eb8
  %v2_21ec1 = call i64 @function_21f95(i64 %v1_21ec1)
  store i64 %v2_21ec1, i64* @rax, align 8
  %v0_21ecb.pre = load i64, i64* @r12, align 8
  %v0_21e78.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_21ec7

dec_label_pc_21ec7:                               ; preds = %bb260, %dec_label_pc_21eb8
  %v0_21e78 = phi i64 [ %v0_21e78.pre, %bb260 ], [ %v0_21eb8, %dec_label_pc_21eb8 ]
  %v0_21e99 = phi i64 [ %v0_21ecb.pre, %bb260 ], [ %v0_21ecb14, %dec_label_pc_21eb8 ]
  %v0_21ec7 = phi i64 [ %v2_21ec1, %bb260 ], [ %v3_21eb8, %dec_label_pc_21eb8 ]
  %v1_21ec7 = add i64 %v0_21ec7, 16
  %v2_21ec7 = inttoptr i64 %v1_21ec7 to i64*
  %v3_21ec7 = load i64, i64* %v2_21ec7, align 8
  store i64 %v3_21ec7, i64* @rdi, align 8
  store i64 %v0_21e99, i64* %rsi.global-to-local, align 8
  %v1_21ece = inttoptr i64 %v3_21ec7 to i64*
  %v2_21ece = load i64, i64* %v1_21ece, align 8
  store i64 %v2_21ece, i64* @rax, align 8
  %v1_21ed7 = inttoptr i64 %v2_21ece to i64*
  %v2_21ed7 = load i64, i64* %v1_21ed7, align 8
  store i64 %v2_21ed7, i64* @rdx, align 8
  store i64 %v2_21ece, i64* @rdi, align 8
  %v4_21ee3 = trunc i64 %v2_21ece to i8
  %v5_21ee3 = icmp eq i8 %v4_21ee3, 0
  %v1_21ee5 = icmp eq i1 %v5_21ee3, false
  br i1 %v1_21ee5, label %dec_label_pc_21e78, label %dec_label_pc_21ee7

dec_label_pc_21ee7:                               ; preds = %dec_label_pc_21ec7, %dec_label_pc_21e78
  %v1_21ef0 = phi i64 [ %v2_21e7c, %dec_label_pc_21e78 ], [ %v2_21ece, %dec_label_pc_21ec7 ]
  %v1_21ee7 = add i64 %v0_21e78, 40
  %v2_21ee7 = inttoptr i64 %v1_21ee7 to i64*
  %v3_21ee7 = load i64, i64* %v2_21ee7, align 8
  store i64 %v3_21ee7, i64* @rax, align 8
  %v1_21eeb = add i64 %v3_21ee7, 8
  %v2_21eeb = inttoptr i64 %v1_21eeb to i32*
  %v3_21eeb = load i32, i32* %v2_21eeb, align 4
  %v4_21eeb = zext i32 %v3_21eeb to i64
  store i64 %v4_21eeb, i64* @rdx, align 8
  %v5_21eee = icmp eq i32 %v3_21eeb, 0
  br i1 %v5_21eee, label %bb261, label %dec_label_pc_21ef6

bb261:                                            ; preds = %dec_label_pc_21ee7
  %v2_21ef0 = call i64 @function_21f95(i64 %v1_21ef0)
  store i64 %v2_21ef0, i64* @rax, align 8
  %v0_21efa.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_21ef6

dec_label_pc_21ef6:                               ; preds = %bb261, %dec_label_pc_21ee7
  %v0_21efa = phi i64 [ %v0_21efa.pre, %bb261 ], [ %v0_21e99, %dec_label_pc_21ee7 ]
  %v0_21ef6 = phi i64 [ %v2_21ef0, %bb261 ], [ %v3_21ee7, %dec_label_pc_21ee7 ]
  %v1_21ef6 = add i64 %v0_21ef6, 16
  %v2_21ef6 = inttoptr i64 %v1_21ef6 to i64*
  %v3_21ef6 = load i64, i64* %v2_21ef6, align 8
  store i64 %v3_21ef6, i64* @rdi, align 8
  store i64 %v0_21efa, i64* %rsi.global-to-local, align 8
  %v1_21efd = inttoptr i64 %v3_21ef6 to i64*
  %v2_21efd = load i64, i64* %v1_21efd, align 8
  store i64 %v2_21efd, i64* @rax, align 8
  %v1_21f06 = inttoptr i64 %v2_21efd to i64*
  %v2_21f06 = load i64, i64* %v1_21f06, align 8
  store i64 %v2_21f06, i64* @rdx, align 8
  store i64 %v2_21efd, i64* @rdi, align 8
  %v4_21f12 = trunc i64 %v2_21efd to i8
  %v5_21f12 = icmp eq i8 %v4_21f12, 0
  br i1 %v5_21f12, label %bb262, label %dec_label_pc_21f16

bb262:                                            ; preds = %dec_label_pc_21ef6
  %v1_21f14 = call i64 @function_21f68()
  store i64 %v1_21f14, i64* @rax, align 8
  %v0_21f1d.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_21f16

dec_label_pc_21f16:                               ; preds = %bb262, %dec_label_pc_21ef6
  %v0_21f1d = phi i64 [ %v0_21f1d.pre, %bb262 ], [ %v0_21efa, %dec_label_pc_21ef6 ]
  %v0_21f16 = load i64, i64* %rbp.global-to-local, align 8
  %v1_21f16 = inttoptr i64 %v0_21f16 to i64*
  %v2_21f16 = load i64, i64* %v1_21f16, align 8
  store i64 %v0_21f1d, i64* %rsi.global-to-local, align 8
  store i64 %v2_21f16, i64* %rbp.global-to-local, align 8
  store i64 139056, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 139074, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_21f68() local_unnamed_addr {
dec_label_pc_21f68:
  %v0_21f68 = load i64, i64* @rbx, align 8
  %v1_21f68 = add i64 %v0_21f68, 48
  %v2_21f68 = inttoptr i64 %v1_21f68 to i64*
  %v3_21f68 = load i64, i64* %v2_21f68, align 8
  store i64 %v3_21f68, i64* @rdi, align 8
  %v1_21f6f = inttoptr i64 %v3_21f68 to i64*
  %v2_21f6f = load i64, i64* %v1_21f6f, align 8
  store i64 %v2_21f6f, i64* @rax, align 8
  ret i64 %v2_21f6f
}

define i64 @function_21f80(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_21f80:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21f80 = load i64, i64* @rbx, align 8
  %v1_21f80 = add i64 %v0_21f80, 48
  %v2_21f80 = inttoptr i64 %v1_21f80 to i64*
  %v3_21f80 = load i64, i64* %v2_21f80, align 8
  store i64 %v3_21f80, i64* @rdi, align 8
  %v1_21f87 = inttoptr i64 %v3_21f80 to i64*
  %v2_21f87 = load i64, i64* %v1_21f87, align 8
  store i64 %v2_21f87, i64* @rax, align 8
  ret i64 %v2_21f87
}

define i64 @function_21f95(i64 %arg1) local_unnamed_addr {
dec_label_pc_21f95:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$68onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_21fa0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_21fa3 = load i64, i64* @rbx, align 8
  %v2_21fa4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_21fa4, i64* @rax, align 8
  %v0_21fa7 = load i64, i64* @rdi, align 8
  store i64 %v0_21fa7, i64* @rbx, align 8
  store i64 %v2_21fa4, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_21fb8 = add i64 %v0_21fa7, 24
  %v2_21fb8 = inttoptr i64 %v1_21fb8 to i64*
  %v3_21fb8 = load i64, i64* %v2_21fb8, align 8
  store i64 %v3_21fb8, i64* @rdi, align 8
  %v1_21fbc = inttoptr i64 %v3_21fb8 to i64*
  %v2_21fbc = load i64, i64* %v1_21fbc, align 8
  store i64 %v2_21fbc, i64* @rax, align 8
  %v1_21fc5 = inttoptr i64 %v2_21fbc to i64*
  %v2_21fc5 = load i64, i64* %v1_21fc5, align 8
  store i64 %v2_21fc5, i64* @rdx, align 8
  store i64 %v2_21fbc, i64* @rdi, align 8
  %v4_21fd1 = trunc i64 %v2_21fbc to i8
  %v5_21fd1 = icmp eq i8 %v4_21fd1, 0
  br i1 %v5_21fd1, label %dec_label_pc_21fe8, label %dec_label_pc_21fd5

dec_label_pc_21fd5:                               ; preds = %dec_label_pc_21fa0
  %v0_21fd5 = load i64, i64* inttoptr (i64 139228 to i64*), align 8
  store i64 %v0_21fd5, i64* @rax, align 8
  store i64 %v0_21fa3, i64* @rbx, align 8
  ret i64 %v0_21fd5

dec_label_pc_21fe8:                               ; preds = %dec_label_pc_21fa0
  %v1_21fe8 = add i64 %v0_21fa7, 32
  %v2_21fe8 = inttoptr i64 %v1_21fe8 to i64*
  %v3_21fe8 = load i64, i64* %v2_21fe8, align 8
  store i64 %v3_21fe8, i64* @rdi, align 8
  %v1_21fec = inttoptr i64 %v3_21fe8 to i64*
  %v2_21fec = load i64, i64* %v1_21fec, align 8
  store i64 %v2_21fec, i64* @rax, align 8
  store i64 %v2_21fec, i64* @r12, align 8
  %v1_21ff8 = add i64 %v0_21fa7, 40
  %v2_21ff8 = inttoptr i64 %v1_21ff8 to i64*
  %v3_21ff8 = load i64, i64* %v2_21ff8, align 8
  store i64 %v3_21ff8, i64* @rax, align 8
  %v0_21ffc = load i64, i64* inttoptr (i64 139267 to i64*), align 8
  store i64 %v0_21ffc, i64* %rbp.global-to-local, align 8
  %v1_22003 = add i64 %v3_21ff8, 8
  %v2_22003 = inttoptr i64 %v1_22003 to i32*
  %v3_22003 = load i32, i32* %v2_22003, align 4
  %v4_22003 = zext i32 %v3_22003 to i64
  store i64 %v4_22003, i64* %rsi.global-to-local, align 8
  %v5_22006 = icmp eq i32 %v3_22003, 0
  br i1 %v5_22006, label %bb, label %dec_label_pc_2200e

bb:                                               ; preds = %dec_label_pc_21fe8
  %v2_22008 = call i64 @function_22155(i64 %v3_21fe8)
  store i64 %v2_22008, i64* @rax, align 8
  %v0_22012.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_2200e

dec_label_pc_2200e:                               ; preds = %bb, %dec_label_pc_21fe8
  %v0_22012 = phi i64 [ %v0_22012.pre, %bb ], [ %v2_21fec, %dec_label_pc_21fe8 ]
  %v0_2200e = phi i64 [ %v2_22008, %bb ], [ %v3_21ff8, %dec_label_pc_21fe8 ]
  %v1_2200e = add i64 %v0_2200e, 16
  %v2_2200e = inttoptr i64 %v1_2200e to i64*
  %v3_2200e = load i64, i64* %v2_2200e, align 8
  store i64 %v3_2200e, i64* @rdi, align 8
  store i64 %v0_22012, i64* %rsi.global-to-local, align 8
  %v1_22015 = inttoptr i64 %v3_2200e to i64*
  %v2_22015 = load i64, i64* %v1_22015, align 8
  store i64 %v2_22015, i64* @rax, align 8
  %v1_2201e = inttoptr i64 %v2_22015 to i64*
  %v2_2201e = load i64, i64* %v1_2201e, align 8
  store i64 %v2_2201e, i64* @rdx, align 8
  store i64 %v2_22015, i64* @rdi, align 8
  %v4_2202a = trunc i64 %v2_22015 to i8
  %v5_2202a = icmp eq i8 %v4_2202a, 0
  %v1_2202c = icmp eq i1 %v5_2202a, false
  br i1 %v1_2202c, label %dec_label_pc_22078.preheader, label %dec_label_pc_2202e

dec_label_pc_22078.preheader:                     ; preds = %dec_label_pc_2200e
  %v0_22078.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_22078

dec_label_pc_2202e:                               ; preds = %dec_label_pc_2200e
  %v3_2202e = call i64 @function_22140(i64 %v2_22015, i64 %v0_22012, i64 %v2_2201e)
  store i64 %v3_2202e, i64* @rax, align 8
  ret i64 %v3_2202e

dec_label_pc_22038:                               ; preds = %dec_label_pc_22087
  %v1_22038 = add i64 %v0_22038, 24
  %v2_22038 = inttoptr i64 %v1_22038 to i64*
  %v3_22038 = load i64, i64* %v2_22038, align 8
  store i64 %v3_22038, i64* @rdi, align 8
  %v1_2203c = inttoptr i64 %v3_22038 to i64*
  %v2_2203c = load i64, i64* %v1_2203c, align 8
  store i64 %v2_2203c, i64* @rax, align 8
  %v1_22045 = inttoptr i64 %v2_2203c to i64*
  %v2_22045 = load i64, i64* %v1_22045, align 8
  store i64 %v2_22045, i64* @rdx, align 8
  store i64 %v2_2203c, i64* @rdi, align 8
  %v4_22051 = trunc i64 %v2_2203c to i8
  %v5_22051 = icmp eq i8 %v4_22051, 0
  %v1_22053 = icmp eq i1 %v5_22051, false
  br i1 %v1_22053, label %dec_label_pc_220a7, label %dec_label_pc_22055

dec_label_pc_22055:                               ; preds = %dec_label_pc_22038
  %v0_22055 = load i64, i64* %rbp.global-to-local, align 8
  %v1_22055 = inttoptr i64 %v0_22055 to i64*
  %v2_22055 = load i64, i64* %v1_22055, align 8
  store i64 %v2_22055, i64* @rax, align 8
  store i64 %v0_22059, i64* %rsi.global-to-local, align 8
  store i64 %v0_22055, i64* @rdi, align 8
  %v1_22065 = add i64 %v0_22038, 32
  %v2_22065 = inttoptr i64 %v1_22065 to i64*
  %v3_22065 = load i64, i64* %v2_22065, align 8
  store i64 %v3_22065, i64* @rdi, align 8
  store i64 %v2_22055, i64* %rbp.global-to-local, align 8
  %v1_2206c = inttoptr i64 %v3_22065 to i64*
  %v2_2206c = load i64, i64* %v1_2206c, align 8
  store i64 %v2_2206c, i64* @rax, align 8
  store i64 %v2_2206c, i64* @r12, align 8
  br label %dec_label_pc_22078

dec_label_pc_22078:                               ; preds = %dec_label_pc_22078.preheader, %dec_label_pc_22055
  %v0_2208b13 = phi i64 [ %v0_22012, %dec_label_pc_22078.preheader ], [ %v2_2206c, %dec_label_pc_22055 ]
  %v1_22081 = phi i64 [ %v2_22015, %dec_label_pc_22078.preheader ], [ %v3_22065, %dec_label_pc_22055 ]
  %v0_22078 = phi i64 [ %v0_22078.pre, %dec_label_pc_22078.preheader ], [ %v0_22038, %dec_label_pc_22055 ]
  %v1_22078 = add i64 %v0_22078, 40
  %v2_22078 = inttoptr i64 %v1_22078 to i64*
  %v3_22078 = load i64, i64* %v2_22078, align 8
  store i64 %v3_22078, i64* @rax, align 8
  %v1_2207c = add i64 %v3_22078, 8
  %v2_2207c = inttoptr i64 %v1_2207c to i32*
  %v3_2207c = load i32, i32* %v2_2207c, align 4
  %v4_2207c = zext i32 %v3_2207c to i64
  store i64 %v4_2207c, i64* @rcx, align 8
  %v5_2207f = icmp eq i32 %v3_2207c, 0
  br i1 %v5_2207f, label %bb259, label %dec_label_pc_22087

bb259:                                            ; preds = %dec_label_pc_22078
  %v2_22081 = call i64 @function_22155(i64 %v1_22081)
  store i64 %v2_22081, i64* @rax, align 8
  %v0_2208b.pre = load i64, i64* @r12, align 8
  %v0_22038.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_22087

dec_label_pc_22087:                               ; preds = %bb259, %dec_label_pc_22078
  %v0_22038 = phi i64 [ %v0_22038.pre, %bb259 ], [ %v0_22078, %dec_label_pc_22078 ]
  %v0_22059 = phi i64 [ %v0_2208b.pre, %bb259 ], [ %v0_2208b13, %dec_label_pc_22078 ]
  %v0_22087 = phi i64 [ %v2_22081, %bb259 ], [ %v3_22078, %dec_label_pc_22078 ]
  %v1_22087 = add i64 %v0_22087, 16
  %v2_22087 = inttoptr i64 %v1_22087 to i64*
  %v3_22087 = load i64, i64* %v2_22087, align 8
  store i64 %v3_22087, i64* @rdi, align 8
  store i64 %v0_22059, i64* %rsi.global-to-local, align 8
  %v1_2208e = inttoptr i64 %v3_22087 to i64*
  %v2_2208e = load i64, i64* %v1_2208e, align 8
  store i64 %v2_2208e, i64* @rax, align 8
  %v1_22097 = inttoptr i64 %v2_2208e to i64*
  %v2_22097 = load i64, i64* %v1_22097, align 8
  store i64 %v2_22097, i64* @rdx, align 8
  store i64 %v2_2208e, i64* @rdi, align 8
  %v4_220a3 = trunc i64 %v2_2208e to i8
  %v5_220a3 = icmp eq i8 %v4_220a3, 0
  %v1_220a5 = icmp eq i1 %v5_220a3, false
  br i1 %v1_220a5, label %dec_label_pc_22038, label %dec_label_pc_220a7

dec_label_pc_220a7:                               ; preds = %dec_label_pc_22087, %dec_label_pc_22038
  %v1_220b0 = phi i64 [ %v2_2203c, %dec_label_pc_22038 ], [ %v2_2208e, %dec_label_pc_22087 ]
  %v1_220a7 = add i64 %v0_22038, 40
  %v2_220a7 = inttoptr i64 %v1_220a7 to i64*
  %v3_220a7 = load i64, i64* %v2_220a7, align 8
  store i64 %v3_220a7, i64* @rax, align 8
  %v1_220ab = add i64 %v3_220a7, 8
  %v2_220ab = inttoptr i64 %v1_220ab to i32*
  %v3_220ab = load i32, i32* %v2_220ab, align 4
  %v4_220ab = zext i32 %v3_220ab to i64
  store i64 %v4_220ab, i64* @rdx, align 8
  %v5_220ae = icmp eq i32 %v3_220ab, 0
  br i1 %v5_220ae, label %bb260, label %dec_label_pc_220b6

bb260:                                            ; preds = %dec_label_pc_220a7
  %v2_220b0 = call i64 @function_22155(i64 %v1_220b0)
  store i64 %v2_220b0, i64* @rax, align 8
  %v0_220ba.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_220b6

dec_label_pc_220b6:                               ; preds = %bb260, %dec_label_pc_220a7
  %v0_220ba = phi i64 [ %v0_220ba.pre, %bb260 ], [ %v0_22059, %dec_label_pc_220a7 ]
  %v0_220b6 = phi i64 [ %v2_220b0, %bb260 ], [ %v3_220a7, %dec_label_pc_220a7 ]
  %v1_220b6 = add i64 %v0_220b6, 16
  %v2_220b6 = inttoptr i64 %v1_220b6 to i64*
  %v3_220b6 = load i64, i64* %v2_220b6, align 8
  store i64 %v3_220b6, i64* @rdi, align 8
  store i64 %v0_220ba, i64* %rsi.global-to-local, align 8
  %v1_220bd = inttoptr i64 %v3_220b6 to i64*
  %v2_220bd = load i64, i64* %v1_220bd, align 8
  store i64 %v2_220bd, i64* @rax, align 8
  %v1_220c6 = inttoptr i64 %v2_220bd to i64*
  %v2_220c6 = load i64, i64* %v1_220c6, align 8
  store i64 %v2_220c6, i64* @rdx, align 8
  store i64 %v2_220bd, i64* @rdi, align 8
  %v4_220d2 = trunc i64 %v2_220bd to i8
  %v5_220d2 = icmp eq i8 %v4_220d2, 0
  br i1 %v5_220d2, label %bb261, label %dec_label_pc_220d6

bb261:                                            ; preds = %dec_label_pc_220b6
  %v1_220d4 = call i64 @function_22128()
  store i64 %v1_220d4, i64* @rax, align 8
  %v0_220dd.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_220d6

dec_label_pc_220d6:                               ; preds = %bb261, %dec_label_pc_220b6
  %v0_220dd = phi i64 [ %v0_220dd.pre, %bb261 ], [ %v0_220ba, %dec_label_pc_220b6 ]
  %v0_220d6 = load i64, i64* %rbp.global-to-local, align 8
  %v1_220d6 = inttoptr i64 %v0_220d6 to i64*
  %v2_220d6 = load i64, i64* %v1_220d6, align 8
  store i64 %v0_220dd, i64* %rsi.global-to-local, align 8
  store i64 %v2_220d6, i64* %rbp.global-to-local, align 8
  store i64 139504, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22128() local_unnamed_addr {
dec_label_pc_22128:
  %v0_22128 = load i64, i64* @rbx, align 8
  %v1_22128 = add i64 %v0_22128, 48
  %v2_22128 = inttoptr i64 %v1_22128 to i64*
  %v3_22128 = load i64, i64* %v2_22128, align 8
  store i64 %v3_22128, i64* @rdi, align 8
  %v1_2212f = inttoptr i64 %v3_22128 to i64*
  %v2_2212f = load i64, i64* %v1_2212f, align 8
  store i64 %v2_2212f, i64* @rax, align 8
  ret i64 %v2_2212f
}

define i64 @function_22140(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_22140:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_22140 = load i64, i64* @rbx, align 8
  %v1_22140 = add i64 %v0_22140, 48
  %v2_22140 = inttoptr i64 %v1_22140 to i64*
  %v3_22140 = load i64, i64* %v2_22140, align 8
  store i64 %v3_22140, i64* @rdi, align 8
  %v1_22147 = inttoptr i64 %v3_22140 to i64*
  %v2_22147 = load i64, i64* %v1_22147, align 8
  store i64 %v2_22147, i64* @rax, align 8
  ret i64 %v2_22147
}

define i64 @function_22155(i64 %arg1) local_unnamed_addr {
dec_label_pc_22155:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$684callEJPN3org4luaj3vm28LuaValueES5_S5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_22160:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 139638, i64* @rdi, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$254callEJPN3org4luaj3vm28LuaValueES5_S5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_22250:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 139897, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$674callEJPN3org4luaj3vm28LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_22310:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 140070, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble12checkintegerEJPNS1_10LuaIntegerEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_22410:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_22411 = load i64, i64* @rbx, align 8
  store i64 %v0_22411, i64* %stack_var_-16, align 8
  %v5_22412 = icmp ult i64* %stack_var_-16, inttoptr (i64 8 to i64*)
  store i1 %v5_22412, i1* %cf.global-to-local, align 1
  %v0_22416 = load i64, i64* @rdi, align 8
  %v1_22416 = add i64 %v0_22416, 8
  %v2_22416 = inttoptr i64 %v1_22416 to i64*
  %v3_22416 = load i64, i64* %v2_22416, align 8
  %v4_22416 = call i128 @__asm_movsd(i64 %v3_22416)
  %v1_2241b = load i64, i64* inttoptr (i64 140323 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_22416, i64 %v1_2241b)
  %v0_22429 = load i64, i64* inttoptr (i64 140337 to i64*), align 8
  %v1_22429 = call i128 @__asm_movsd(i64 %v0_22429)
  call void @__asm_ucomisd(i128 %v1_22429, i128 %v4_22416)
  %v0_22435 = load i1, i1* %cf.global-to-local, align 1
  %v1_22435 = icmp eq i1 %v0_22435, false
  br i1 %v1_22435, label %bb, label %dec_label_pc_22410.dec_label_pc_22437_crit_edge

dec_label_pc_22410.dec_label_pc_22437_crit_edge:  ; preds = %dec_label_pc_22410
  %v4_22435.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_22437

bb:                                               ; preds = %dec_label_pc_22410
  %v2_22435 = call i64 @function_22480()
  store i64 %v2_22435, i64* @rax, align 8
  br label %dec_label_pc_22437

dec_label_pc_22437:                               ; preds = %dec_label_pc_22410.dec_label_pc_22437_crit_edge, %bb
  %v4_22435 = phi i64 [ %v4_22435.pre, %dec_label_pc_22410.dec_label_pc_22437_crit_edge ], [ %v2_22435, %bb ]
  ret i64 %v4_22435
}

define i64 @function_22480() local_unnamed_addr {
dec_label_pc_22480:
  store i64 140425, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22490(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_22490:
  %v0_22490 = load i64, i64* inttoptr (i64 140439 to i64*), align 8
  store i64 %v0_22490, i64* @rax, align 8
  %v0_22497 = load i64, i64* @rbp, align 8
  %v1_22497 = trunc i64 %v0_22497 to i32
  %v2_22497 = add i32 %v1_22497, 256
  %v16_22497 = zext i32 %v2_22497 to i64
  %v3_2249d = add i64 %v0_22490, 8
  %v4_2249d = inttoptr i64 %v3_2249d to i32*
  %v5_2249d = load i32, i32* %v4_2249d, align 4
  %v11_2249d = icmp ult i32 %v2_22497, %v5_2249d
  %v1_224a0 = add i64 %v0_22490, 16
  store i64 %v1_224a0, i64* @rdx, align 8
  %v1_224a4 = icmp eq i1 %v11_2249d, false
  br i1 %v1_224a4, label %dec_label_pc_224c7, label %dec_label_pc_224a6

dec_label_pc_224a6:                               ; preds = %dec_label_pc_22490
  %v2_224a9 = mul nuw nsw i64 %v16_22497, 8
  %v3_224a9 = add i64 %v2_224a9, %v1_224a0
  %v4_224a9 = inttoptr i64 %v3_224a9 to i64*
  %v5_224a9 = load i64, i64* %v4_224a9, align 8
  store i64 %v5_224a9, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v5_224a9

dec_label_pc_224c7:                               ; preds = %dec_label_pc_22490
  store i64 %v16_22497, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_224d0() local_unnamed_addr {
dec_label_pc_224d0:
  %v2_224dc = call i64 @function_22490(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_224dc, i64* @rax, align 8
  ret i64 %v2_224dc
}

define i64 @_ZN3org4luaj3vm29LuaDouble10optintegerEJPNS1_10LuaIntegerES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_224e0:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_224e1 = load i64, i64* @rbx, align 8
  store i64 %v0_224e1, i64* %stack_var_-16, align 8
  %v5_224e2 = icmp ult i64* %stack_var_-16, inttoptr (i64 8 to i64*)
  store i1 %v5_224e2, i1* %cf.global-to-local, align 1
  %v0_224e6 = load i64, i64* @rdi, align 8
  %v1_224e6 = add i64 %v0_224e6, 8
  %v2_224e6 = inttoptr i64 %v1_224e6 to i64*
  %v3_224e6 = load i64, i64* %v2_224e6, align 8
  %v4_224e6 = call i128 @__asm_movsd(i64 %v3_224e6)
  %v1_224eb = load i64, i64* inttoptr (i64 140531 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_224e6, i64 %v1_224eb)
  %v0_224f9 = load i64, i64* inttoptr (i64 140545 to i64*), align 8
  %v1_224f9 = call i128 @__asm_movsd(i64 %v0_224f9)
  call void @__asm_ucomisd(i128 %v1_224f9, i128 %v4_224e6)
  %v0_22505 = load i1, i1* %cf.global-to-local, align 1
  %v1_22505 = icmp eq i1 %v0_22505, false
  br i1 %v1_22505, label %bb, label %dec_label_pc_224e0.dec_label_pc_22507_crit_edge

dec_label_pc_224e0.dec_label_pc_22507_crit_edge:  ; preds = %dec_label_pc_224e0
  %v4_22505.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_22507

bb:                                               ; preds = %dec_label_pc_224e0
  %v2_22505 = call i64 @function_22550()
  store i64 %v2_22505, i64* @rax, align 8
  br label %dec_label_pc_22507

dec_label_pc_22507:                               ; preds = %dec_label_pc_224e0.dec_label_pc_22507_crit_edge, %bb
  %v4_22505 = phi i64 [ %v4_22505.pre, %dec_label_pc_224e0.dec_label_pc_22507_crit_edge ], [ %v2_22505, %bb ]
  ret i64 %v4_22505
}

define i64 @function_22550() local_unnamed_addr {
dec_label_pc_22550:
  store i64 140633, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22560(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_22560:
  %v0_22560 = load i64, i64* inttoptr (i64 140647 to i64*), align 8
  store i64 %v0_22560, i64* @rax, align 8
  %v0_22567 = load i64, i64* @rbp, align 8
  %v1_22567 = trunc i64 %v0_22567 to i32
  %v2_22567 = add i32 %v1_22567, 256
  %v16_22567 = zext i32 %v2_22567 to i64
  %v3_2256d = add i64 %v0_22560, 8
  %v4_2256d = inttoptr i64 %v3_2256d to i32*
  %v5_2256d = load i32, i32* %v4_2256d, align 4
  %v11_2256d = icmp ult i32 %v2_22567, %v5_2256d
  %v1_22570 = add i64 %v0_22560, 16
  store i64 %v1_22570, i64* @rdx, align 8
  %v1_22574 = icmp eq i1 %v11_2256d, false
  br i1 %v1_22574, label %dec_label_pc_22597, label %dec_label_pc_22576

dec_label_pc_22576:                               ; preds = %dec_label_pc_22560
  %v2_22579 = mul nuw nsw i64 %v16_22567, 8
  %v3_22579 = add i64 %v2_22579, %v1_22570
  %v4_22579 = inttoptr i64 %v3_22579 to i64*
  %v5_22579 = load i64, i64* %v4_22579, align 8
  store i64 %v5_22579, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v5_22579

dec_label_pc_22597:                               ; preds = %dec_label_pc_22560
  store i64 %v16_22567, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_225a0() local_unnamed_addr {
dec_label_pc_225a0:
  %v2_225ac = call i64 @function_22560(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_225ac, i64* @rax, align 8
  ret i64 %v2_225ac
}

define i64 @_ZN3org4luaj3vm28LuaValue3setEJviPS2_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_225b0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 140738, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2261d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2261d:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v2_2261d = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_2261d, i64* @rax, align 8
  %v0_22621 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_22621, i64* @rdx, align 8
  store i64 %v2_2261d, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v2_2261d
}

define i64 @function_2263b() local_unnamed_addr {
dec_label_pc_2263b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3getEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_22650:
  store i64 %arg1, i64* @rdi, align 8
  store i64 140894, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_226b5(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_226b5:
  %rbp.global-to-local = alloca i64, align 8
  %v2_226b5 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_226b5, i64* @rax, align 8
  store i64 %v2_226b5, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_226b5
}

define i64 @function_226ca() local_unnamed_addr {
dec_label_pc_226ca:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$rawlen4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_226e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 141049, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22766() local_unnamed_addr {
dec_label_pc_22766:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString12checkintegerEJPNS1_10LuaIntegerEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_22770:
  store i64 %arg1, i64* @rdi, align 8
  store i64 141190, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_227f6() local_unnamed_addr {
dec_label_pc_227f6:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawsetEJviPS2_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_22800:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 141330, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2287d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2287d:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v2_2287d = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_2287d, i64* @rax, align 8
  %v0_22881 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_22881, i64* @rdx, align 8
  store i64 %v2_2287d, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v2_2287d
}

define i64 @function_2289b() local_unnamed_addr {
dec_label_pc_2289b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawgetEJPS2_i(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_228b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 141502, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2291d(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2291d:
  %rbp.global-to-local = alloca i64, align 8
  %v2_2291d = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_2291d, i64* @rax, align 8
  store i64 %v2_2291d, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_2291d
}

define i64 @function_22932() local_unnamed_addr {
dec_label_pc_22932:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$53$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_22940:
  %r15.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_22944 = load i64, i64* @rdi, align 8
  store i64 %v0_22944, i64* %r15.global-to-local, align 8
  %v0_2294b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2294b, i64* @rdi, align 8
  store i64 %v0_2294b, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_22962 = add i64 %v0_22944, 24
  %v2_22962 = inttoptr i64 %v1_22962 to i64*
  %v3_22962 = load i64, i64* %v2_22962, align 8
  store i64 %v3_22962, i64* @rax, align 8
  %v1_2296a = add i64 %v0_22944, 32
  %v2_2296a = inttoptr i64 %v1_2296a to i64*
  %v3_2296a = load i64, i64* %v2_2296a, align 8
  store i64 %v3_2296a, i64* @rax, align 8
  %v1_2296e = add i64 %v3_2296a, 8
  %v2_2296e = inttoptr i64 %v1_2296e to i32*
  %v3_2296e = load i32, i32* %v2_2296e, align 4
  %v5_22972 = icmp eq i32 %v3_2296e, 0
  br i1 %v5_22972, label %bb, label %dec_label_pc_2297b

bb:                                               ; preds = %dec_label_pc_22940
  %v2_22975 = call i64 @function_22b51(i64 %v0_2294b)
  store i64 %v2_22975, i64* @rax, align 8
  %v0_2297f.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_2297b

dec_label_pc_2297b:                               ; preds = %bb, %dec_label_pc_22940
  %v0_2297f = phi i64 [ %v0_2297f.pre, %bb ], [ %v0_22944, %dec_label_pc_22940 ]
  %v1_2297f = add i64 %v0_2297f, 48
  %v2_2297f = inttoptr i64 %v1_2297f to i64*
  %v3_2297f = load i64, i64* %v2_2297f, align 8
  store i64 %v3_2297f, i64* @rax, align 8
  %v1_22983 = add i64 %v0_2297f, 40
  %v2_22983 = inttoptr i64 %v1_22983 to i64*
  %v3_22983 = load i64, i64* %v2_22983, align 8
  store i64 %v3_22983, i64* @rbx, align 8
  %v1_22987 = add i64 %v3_2297f, 8
  %v2_22987 = inttoptr i64 %v1_22987 to i32*
  %v3_22987 = load i32, i32* %v2_22987, align 4
  %v5_2298b = icmp eq i32 %v3_22987, 0
  br i1 %v5_2298b, label %bb256, label %dec_label_pc_22994

bb256:                                            ; preds = %dec_label_pc_2297b
  %v2_2298e = call i64 @function_22b51(i64 %v0_2294b)
  store i64 %v2_2298e, i64* @rax, align 8
  %v0_22998.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_22994

dec_label_pc_22994:                               ; preds = %bb256, %dec_label_pc_2297b
  %v0_22998 = phi i64 [ %v0_22998.pre, %bb256 ], [ %v0_2297f, %dec_label_pc_2297b ]
  %v1_22998 = add i64 %v0_22998, 56
  %v2_22998 = inttoptr i64 %v1_22998 to i64*
  %v3_22998 = load i64, i64* %v2_22998, align 8
  store i64 %v3_22998, i64* @rax, align 8
  %v1_2299c = add i64 %v3_22998, 8
  %v2_2299c = inttoptr i64 %v1_2299c to i32*
  %v3_2299c = load i32, i32* %v2_2299c, align 4
  %v5_229a0 = icmp eq i32 %v3_2299c, 0
  br i1 %v5_229a0, label %bb257, label %dec_label_pc_229a9

bb257:                                            ; preds = %dec_label_pc_22994
  %v2_229a3 = call i64 @function_22b51(i64 %v0_2294b)
  store i64 %v2_229a3, i64* @rax, align 8
  %v0_229ad.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_229a9

dec_label_pc_229a9:                               ; preds = %bb257, %dec_label_pc_22994
  %v0_229ad = phi i64 [ %v0_229ad.pre, %bb257 ], [ %v0_22998, %dec_label_pc_22994 ]
  %v1_229ad = add i64 %v0_229ad, 64
  %v2_229ad = inttoptr i64 %v1_229ad to i64*
  %v3_229ad = load i64, i64* %v2_229ad, align 8
  store i64 %v3_229ad, i64* @rax, align 8
  %v1_229b1 = add i64 %v3_229ad, 8
  %v2_229b1 = inttoptr i64 %v1_229b1 to i32*
  %v3_229b1 = load i32, i32* %v2_229b1, align 4
  %v4_229b1 = zext i32 %v3_229b1 to i64
  store i64 %v4_229b1, i64* @rdi, align 8
  %v7_229b4 = icmp eq i32 %v3_229b1, 0
  br i1 %v7_229b4, label %bb258, label %dec_label_pc_229bc

bb258:                                            ; preds = %dec_label_pc_229a9
  %v3_229b6 = call i64 @function_22b51(i64 0)
  store i64 %v3_229b6, i64* @rax, align 8
  %v0_229bc.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_229bc

dec_label_pc_229bc:                               ; preds = %bb258, %dec_label_pc_229a9
  %v0_229c4 = phi i64 [ %v0_229bc.pre, %bb258 ], [ %v0_229ad, %dec_label_pc_229a9 ]
  %v1_229bc = add i64 %v0_229c4, 72
  %v2_229bc = inttoptr i64 %v1_229bc to i64*
  %v3_229bc = load i64, i64* %v2_229bc, align 8
  store i64 %v3_229bc, i64* @rdi, align 8
  %v1_229c4 = add i64 %v0_229c4, 80
  %v2_229c4 = inttoptr i64 %v1_229c4 to i64*
  %v3_229c4 = load i64, i64* %v2_229c4, align 8
  store i64 %v3_229c4, i64* %rsi.global-to-local, align 8
  %v1_229c8 = inttoptr i64 %v3_229bc to i64*
  %v2_229c8 = load i64, i64* %v1_229c8, align 8
  store i64 141784, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_229c8, i64* %r15.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22b51(i64 %arg1) local_unnamed_addr {
dec_label_pc_22b51:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib10_file_seekEJPNS1_7VarargsEPNS1_8LuaValueEPN4java4lang6StringEi(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_22b60:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_22c20(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_22c20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_22c20 = load i64, i64* inttoptr (i64 142375 to i64*), align 8
  store i64 %v0_22c20, i64* @rax, align 8
  %v4_22c27 = load i64, i64* @rdi, align 8
  %v1_22c2a = add i64 %v0_22c20, 16
  store i64 %v1_22c2a, i64* @rdx, align 8
  %v2_22c33 = mul i64 %v4_22c27, 8
  %v3_22c33 = add i64 %v2_22c33, %v1_22c2a
  %v4_22c33 = inttoptr i64 %v3_22c33 to i64*
  %v5_22c33 = load i64, i64* %v4_22c33, align 8
  store i64 %v5_22c33, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v5_22c33
}

define i64 @function_22c40() local_unnamed_addr {
dec_label_pc_22c40:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$498onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_22c60:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_22c68 = load i64, i64* @rdi, align 8
  store i64 %v0_22c68, i64* %r13.global-to-local, align 8
  %v0_22c6d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_22c6d, i64* @rbx, align 8
  store i64 %v0_22c6d, i64* %rbp.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_22c6d, i64* @rdi, align 8
  %v1_22c96 = add i64 %v0_22c68, 24
  %v2_22c96 = inttoptr i64 %v1_22c96 to i64*
  %v3_22c96 = load i64, i64* %v2_22c96, align 8
  store i64 %v3_22c96, i64* @rax, align 8
  %v1_22c9a = add i64 %v3_22c96, 8
  %v2_22c9a = inttoptr i64 %v1_22c9a to i32*
  %v3_22c9a = load i32, i32* %v2_22c9a, align 4
  %v4_22c9a = zext i32 %v3_22c9a to i64
  store i64 %v4_22c9a, i64* @rcx, align 8
  %v5_22c9d = icmp eq i32 %v3_22c9a, 0
  br i1 %v5_22c9d, label %bb, label %dec_label_pc_22ca5

bb:                                               ; preds = %dec_label_pc_22c60
  %v2_22c9f = call i64 @function_22e3f(i64 %v0_22c6d)
  store i64 %v2_22c9f, i64* @rax, align 8
  %v2_22d72.pre.pre = load i64, i64* %rsi.global-to-local, align 8
  %v0_22d76.pre.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_22ca5

dec_label_pc_22ca5:                               ; preds = %bb, %dec_label_pc_22c60
  %v0_22d76.pre = phi i64 [ %v0_22d76.pre.pre, %bb ], [ %v0_22c6d, %dec_label_pc_22c60 ]
  %v2_22d72.pre = phi i64 [ %v2_22d72.pre.pre, %bb ], [ 2, %dec_label_pc_22c60 ]
  %v0_22ca5 = phi i64 [ %v2_22c9f, %bb ], [ %v3_22c96, %dec_label_pc_22c60 ]
  %v1_22ca5 = add i64 %v0_22ca5, 16
  %v2_22ca5 = inttoptr i64 %v1_22ca5 to i64*
  %v3_22ca5 = load i64, i64* %v2_22ca5, align 8
  store i64 %v3_22ca5, i64* %r14.global-to-local, align 8
  %v0_22ca9 = load i64, i64* inttoptr (i64 142512 to i64*), align 16
  store i64 %v0_22ca9, i64* @rbx, align 8
  store i64 %v2_22d72.pre, i64* @rax, align 8
  store i64 %v0_22d76.pre, i64* @rdi, align 8
  %v1_22d7f257 = inttoptr i64 %v0_22ca9 to i64*
  %v2_22d7f258 = load i64, i64* %v1_22d7f257, align 8
  store i64 %v2_22d7f258, i64* @rdx, align 8
  store i64 %v2_22d72.pre, i64* %rsi.global-to-local, align 8
  store i64 %v0_22ca9, i64* @rdi, align 8
  %v4_22d8e259 = trunc i64 %v2_22d72.pre to i8
  %v5_22d8e260 = icmp eq i8 %v4_22d8e259, 0
  %v1_22d90261 = icmp eq i1 %v5_22d8e260, false
  %v0_22cbb.pre = load i64, i64* %r13.global-to-local, align 8
  br i1 %v1_22d90261, label %dec_label_pc_22cb8, label %dec_label_pc_22d96

dec_label_pc_22cb8:                               ; preds = %dec_label_pc_22ca5, %dec_label_pc_22cb8
  %v1_22d7f264 = phi i64* [ %v1_22d7f, %dec_label_pc_22cb8 ], [ %v1_22d7f257, %dec_label_pc_22ca5 ]
  %v0_22d5c263 = phi i64 [ %v2_22d5c, %dec_label_pc_22cb8 ], [ %v0_22ca9, %dec_label_pc_22ca5 ]
  %v0_22d4a262 = phi i64 [ %v2_22cfb, %dec_label_pc_22cb8 ], [ %v3_22ca5, %dec_label_pc_22ca5 ]
  %v2_22cb8 = load i64, i64* %v1_22d7f264, align 8
  store i64 %v2_22cb8, i64* @rax, align 8
  %v1_22cbb = add i64 %v0_22cbb.pre, 32
  %v2_22cbb = inttoptr i64 %v1_22cbb to i64*
  %v3_22cbb = load i64, i64* %v2_22cbb, align 8
  store i64 %v0_22d5c263, i64* @rdi, align 8
  %v1_22cc2 = add i64 %v0_22cbb.pre, 40
  %v2_22cc2 = inttoptr i64 %v1_22cc2 to i64*
  %v3_22cc2 = load i64, i64* %v2_22cc2, align 8
  %v0_22cc6 = load i64, i64* inttoptr (i64 142541 to i64*), align 8
  store i64 %v0_22cc6, i64* %rsi.global-to-local, align 8
  %v1_22cd3 = inttoptr i64 %v2_22cb8 to i64*
  %v2_22cd3 = load i64, i64* %v1_22cd3, align 8
  store i64 %v2_22cd3, i64* @rdx, align 8
  %v0_22cd6 = load i64, i64* inttoptr (i64 142557 to i64*), align 8
  store i64 %v0_22cd6, i64* @rdx, align 8
  store i64 %v2_22cb8, i64* %rsi.global-to-local, align 8
  store i64 %v0_22d76.pre, i64* @rdi, align 8
  %v2_22cfb = load i64, i64* %v1_22d7f264, align 8
  store i64 %v2_22cfb, i64* @rax, align 8
  store i64 %v0_22d5c263, i64* @rdi, align 8
  %v0_22d01 = load i64, i64* inttoptr (i64 142600 to i64*), align 8
  store i64 %v0_22d01, i64* %rsi.global-to-local, align 8
  %v1_22d0e = inttoptr i64 %v2_22cfb to i64*
  %v2_22d0e = load i64, i64* %v1_22d0e, align 8
  store i64 %v2_22d0e, i64* @rdx, align 8
  %v0_22d11 = load i64, i64* inttoptr (i64 142616 to i64*), align 8
  store i64 %v0_22d11, i64* @rdx, align 8
  store i64 %v2_22cfb, i64* %rsi.global-to-local, align 8
  store i64 %v0_22d76.pre, i64* @rdi, align 8
  store i64 %v2_22cfb, i64* @rdx, align 8
  store i64 %v2_22cb8, i64* %rsi.global-to-local, align 8
  store i64 %v3_22cc2, i64* @rdi, align 8
  %v1_22d46 = inttoptr i64 %v3_22cbb to i64*
  %v2_22d46 = load i64, i64* %v1_22d46, align 8
  store i64 %v2_22d46, i64* @rcx, align 8
  store i64 %v0_22d4a262, i64* @rdx, align 8
  store i64 %v2_22cfb, i64* %rsi.global-to-local, align 8
  store i64 %v3_22cbb, i64* @rdi, align 8
  store i64 %v2_22cfb, i64* %r14.global-to-local, align 8
  %v2_22d5c = load i64, i64* %v1_22d7f264, align 8
  store i64 %v2_22d5c, i64* @rax, align 8
  store i64 %v0_22d5c263, i64* @rdi, align 8
  %v0_22d62 = load i64, i64* inttoptr (i64 142697 to i64*), align 8
  store i64 %v0_22d62, i64* %rsi.global-to-local, align 8
  store i64 %v2_22d5c, i64* @rbx, align 8
  store i64 %v0_22d62, i64* @rax, align 8
  store i64 %v0_22d76.pre, i64* @rdi, align 8
  %v1_22d7f = inttoptr i64 %v2_22d5c to i64*
  %v2_22d7f = load i64, i64* %v1_22d7f, align 8
  store i64 %v2_22d7f, i64* @rdx, align 8
  store i64 %v0_22d62, i64* %rsi.global-to-local, align 8
  store i64 %v2_22d5c, i64* @rdi, align 8
  %v4_22d8e = trunc i64 %v0_22d62 to i8
  %v5_22d8e = icmp eq i8 %v4_22d8e, 0
  %v1_22d90 = icmp eq i1 %v5_22d8e, false
  br i1 %v1_22d90, label %dec_label_pc_22cb8, label %dec_label_pc_22d96

dec_label_pc_22d96:                               ; preds = %dec_label_pc_22ca5, %dec_label_pc_22cb8
  %v0_22d4a.lcssa = phi i64 [ %v2_22cfb, %dec_label_pc_22cb8 ], [ %v3_22ca5, %dec_label_pc_22ca5 ]
  %v0_22d5c.lcssa = phi i64 [ %v2_22d5c, %dec_label_pc_22cb8 ], [ %v0_22ca9, %dec_label_pc_22ca5 ]
  %v1_22d96 = add i64 %v0_22cbb.pre, 56
  %v2_22d96 = inttoptr i64 %v1_22d96 to i64*
  %v3_22d96 = load i64, i64* %v2_22d96, align 8
  store i64 %v3_22d96, i64* @rax, align 8
  %v1_22d9a = add i64 %v0_22cbb.pre, 48
  %v2_22d9a = inttoptr i64 %v1_22d9a to i64*
  %v3_22d9a = load i64, i64* %v2_22d9a, align 8
  store i64 %v3_22d9a, i64* %rbp.global-to-local, align 8
  %v1_22d9e = add i64 %v3_22d96, 8
  %v2_22d9e = inttoptr i64 %v1_22d9e to i32*
  %v3_22d9e = load i32, i32* %v2_22d9e, align 4
  %v4_22d9e = zext i32 %v3_22d9e to i64
  store i64 %v4_22d9e, i64* @rdx, align 8
  %v5_22da1 = icmp eq i32 %v3_22d9e, 0
  br i1 %v5_22da1, label %bb256, label %dec_label_pc_22da9

bb256:                                            ; preds = %dec_label_pc_22d96
  %v2_22da3 = call i64 @function_22e3f(i64 %v0_22d5c.lcssa)
  store i64 %v2_22da3, i64* @rax, align 8
  %v0_22da9.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_22db1.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_22da9

dec_label_pc_22da9:                               ; preds = %bb256, %dec_label_pc_22d96
  %v0_22db1 = phi i64 [ %v0_22db1.pre, %bb256 ], [ %v0_22d4a.lcssa, %dec_label_pc_22d96 ]
  %v0_22da9 = phi i64 [ %v0_22da9.pre, %bb256 ], [ %v0_22cbb.pre, %dec_label_pc_22d96 ]
  %v1_22da9 = add i64 %v0_22da9, 40
  %v2_22da9 = inttoptr i64 %v1_22da9 to i64*
  %v3_22da9 = load i64, i64* %v2_22da9, align 8
  store i64 %v3_22da9, i64* @rdi, align 8
  store i64 %v0_22db1, i64* %rsi.global-to-local, align 8
  %v1_22db4 = inttoptr i64 %v3_22da9 to i64*
  %v2_22db4 = load i64, i64* %v1_22db4, align 8
  store i64 142788, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_22db4, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22e3f(i64 %arg1) local_unnamed_addr {
dec_label_pc_22e3f:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable6rawsetEJvPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_22e50:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_22e52 = load i64, i64* %r13.global-to-local, align 8
  %v0_22e54 = load i64, i64* %r12.global-to-local, align 8
  %v0_22e56 = load i64, i64* %rbp.global-to-local, align 8
  %v0_22e57 = load i64, i64* @rdx, align 8
  store i64 %v0_22e57, i64* %r12.global-to-local, align 8
  %v0_22e5a = load i64, i64* @rbx, align 8
  %v2_22e5b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_22e5b, i64* @rax, align 8
  %v0_22e5e = load i64, i64* @rdi, align 8
  store i64 %v0_22e5e, i64* %rbp.global-to-local, align 8
  store i64 %v2_22e5b, i64* @rbx, align 8
  store i64 %v2_22e5b, i64* @rdi, align 8
  %v4_22e6d = trunc i64 %v2_22e5b to i8
  %v5_22e6d = icmp eq i8 %v4_22e6d, 0
  br i1 %v5_22e6d, label %dec_label_pc_22e8b, label %dec_label_pc_22e71

dec_label_pc_22e71:                               ; preds = %dec_label_pc_22e50
  store i64 %v2_22e5b, i64* @rax, align 8
  store i64 %v2_22e5b, i64* @rdi, align 8
  %v4_22e7d = trunc i64 %v2_22e5b to i32
  %tmp250 = icmp slt i32 %v4_22e7d, 1
  br i1 %tmp250, label %dec_label_pc_22e8b, label %dec_label_pc_22e81

dec_label_pc_22e81:                               ; preds = %dec_label_pc_22e71
  %v1_22e81 = add i64 %v0_22e5e, 8
  %v2_22e81 = inttoptr i64 %v1_22e81 to i64*
  %v3_22e81 = load i64, i64* %v2_22e81, align 8
  store i64 %v3_22e81, i64* %r13.global-to-local, align 8
  %v3_22e85 = add i64 %v3_22e81, 8
  %v4_22e85 = inttoptr i64 %v3_22e85 to i32*
  %v5_22e85 = load i32, i32* %v4_22e85, align 4
  %v9_22e89 = icmp sgt i32 %v4_22e7d, %v5_22e85
  br i1 %v9_22e89, label %dec_label_pc_22e8b, label %dec_label_pc_22eb0

dec_label_pc_22e8b:                               ; preds = %dec_label_pc_22e81, %dec_label_pc_22e71, %dec_label_pc_22e50
  store i64 %v2_22e5b, i64* @rax, align 8
  store i64 %v0_22e5e, i64* @rdi, align 8
  store i64 %v0_22e5a, i64* @rbx, align 8
  store i64 %v0_22e56, i64* %rbp.global-to-local, align 8
  store i64 %v0_22e54, i64* %r12.global-to-local, align 8
  store i64 %v0_22e52, i64* %r13.global-to-local, align 8
  ret i64 %v2_22e5b

dec_label_pc_22eb0:                               ; preds = %dec_label_pc_22e81
  %v1_22eb0 = add i64 %v2_22e5b, -1
  store i64 %v1_22eb0, i64* @rbx, align 8
  store i64 %v0_22e57, i64* @rax, align 8
  store i64 %v0_22e57, i64* @rdi, align 8
  %v1_22ec7 = add i64 %v0_22e5e, 32
  %v2_22ec7 = inttoptr i64 %v1_22ec7 to i64*
  %v3_22ec7 = load i64, i64* %v2_22ec7, align 8
  store i64 %v3_22ec7, i64* %rbp.global-to-local, align 8
  %v1_22ed3 = inttoptr i64 %v3_22ec7 to i64*
  %v2_22ed3 = load i64, i64* %v1_22ed3, align 8
  store i64 %v2_22ed3, i64* @rax, align 8
  store i64 143070, i64* %rsi.global-to-local, align 8
  store i64 5, i64* @rdx, align 8
  %v1_22ee3 = inttoptr i64 %v2_22ed3 to i64*
  %v2_22ee3 = load i64, i64* %v1_22ee3, align 8
  store i64 %v2_22ee3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22f22() local_unnamed_addr {
dec_label_pc_22f22:
  %v0_22f22 = load i64, i64* @rbx, align 8
  store i64 %v0_22f22, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm221WeakTable$WeakKeySlot9strongkeyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_22f30:
  store i64 %arg1, i64* @rdi, align 8
  %v0_22f31 = load i64, i64* @rdi, align 8
  %v1_22f31 = add i64 %v0_22f31, 8
  %v2_22f31 = inttoptr i64 %v1_22f31 to i64*
  %v3_22f31 = load i64, i64* %v2_22f31, align 8
  store i64 %v3_22f31, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_22f31, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_22f80() local_unnamed_addr {
dec_label_pc_22f80:
  store i64 143239, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_22fa0() local_unnamed_addr {
dec_label_pc_22fa0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm229WeakTable$WeakKeyAndValueSlot9strongkeyEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_22fc0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_22fc1 = load i64, i64* @rdi, align 8
  %v1_22fc1 = add i64 %v0_22fc1, 8
  %v2_22fc1 = inttoptr i64 %v1_22fc1 to i64*
  %v3_22fc1 = load i64, i64* %v2_22fc1, align 8
  store i64 %v3_22fc1, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_22fc1, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_23010() local_unnamed_addr {
dec_label_pc_23010:
  store i64 143383, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_23030() local_unnamed_addr {
dec_label_pc_23030:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm229WeakTable$WeakKeyAndValueSlot11strongvalueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_23050:
  store i64 %arg1, i64* @rdi, align 8
  %v0_23051 = load i64, i64* @rdi, align 8
  %v1_23051 = add i64 %v0_23051, 16
  %v2_23051 = inttoptr i64 %v1_23051 to i64*
  %v3_23051 = load i64, i64* %v2_23051, align 8
  store i64 %v3_23051, i64* @rbx, align 8
  store i64 143452, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_230a0() local_unnamed_addr {
dec_label_pc_230a0:
  store i64 143527, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_230c0() local_unnamed_addr {
dec_label_pc_230c0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm223WeakTable$WeakValueSlot11strongvalueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_230e0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_230e1 = load i64, i64* @rdi, align 8
  %v1_230e1 = add i64 %v0_230e1, 16
  %v2_230e1 = inttoptr i64 %v1_230e1 to i64*
  %v3_230e1 = load i64, i64* %v2_230e1, align 8
  store i64 %v3_230e1, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_230e1, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_23130() local_unnamed_addr {
dec_label_pc_23130:
  store i64 143671, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_23150() local_unnamed_addr {
dec_label_pc_23150:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm23lib14MathLib$random4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23170:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_23172 = load i64, i64* @rdi, align 8
  store i64 %v0_23172, i64* @rbx, align 8
  %v0_23175 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_23175, i64* @rdi, align 8
  store i64 %v0_23175, i64* @rax, align 8
  %v1_2318d = add i64 %v0_23172, 24
  %v2_2318d = inttoptr i64 %v1_2318d to i64*
  %v3_2318d = load i64, i64* %v2_2318d, align 8
  store i64 %v3_2318d, i64* @rdi, align 8
  %v1_23193 = inttoptr i64 %v3_2318d to i64*
  %v2_23193 = load i64, i64* %v1_23193, align 8
  store i64 %v2_23193, i64* @rdx, align 8
  store i64 143776, i64* @rdi, align 8
  store i64 %v0_23175, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_231f0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_231f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_231f0 = load i64, i64* inttoptr (i64 143863 to i64*), align 8
  store i64 %v0_231f0, i64* @rax, align 8
  %v0_231f7 = load i64, i64* @rdi, align 8
  %v1_231f7 = trunc i64 %v0_231f7 to i32
  %v3_231f7 = add i64 %v0_231f0, 8
  %v4_231f7 = inttoptr i64 %v3_231f7 to i32*
  %v5_231f7 = load i32, i32* %v4_231f7, align 4
  %v11_231f7 = icmp ult i32 %v1_231f7, %v5_231f7
  %v1_231fa = add i64 %v0_231f0, 16
  store i64 %v1_231fa, i64* @rdx, align 8
  %v1_231fe = icmp eq i1 %v11_231f7, false
  br i1 %v1_231fe, label %dec_label_pc_23222, label %dec_label_pc_23200

dec_label_pc_23200:                               ; preds = %dec_label_pc_231f0
  %v2_23203 = mul i64 %v0_231f7, 8
  %v3_23203 = add i64 %v2_23203, %v1_231fa
  %v4_23203 = inttoptr i64 %v3_23203 to i64*
  %v5_23203 = load i64, i64* %v4_23203, align 8
  store i64 %v5_23203, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v5_23203

dec_label_pc_23222:                               ; preds = %dec_label_pc_231f0
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$76$104callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23230:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_23238 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2323a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2323a, i64* %rbp.global-to-local, align 8
  %v0_23241 = load i64, i64* @rdi, align 8
  %v1_23241 = add i64 %v0_23241, 24
  %v2_23241 = inttoptr i64 %v1_23241 to i64*
  %v3_23241 = load i64, i64* %v2_23241, align 8
  store i64 %v3_23241, i64* @rdi, align 8
  %v1_23245 = inttoptr i64 %v3_23241 to i64*
  %v2_23245 = load i64, i64* %v1_23245, align 8
  store i64 %v2_23245, i64* @rax, align 8
  %v1_2324e = inttoptr i64 %v2_23245 to i64*
  %v2_2324e = load i64, i64* %v1_2324e, align 8
  store i64 %v2_2324e, i64* @rdx, align 8
  store i64 %v2_23245, i64* @rdi, align 8
  %v4_2325a = trunc i64 %v2_23245 to i8
  %v5_2325a = icmp eq i8 %v4_2325a, 0
  br i1 %v5_2325a, label %dec_label_pc_23278, label %dec_label_pc_2325e

dec_label_pc_2325e:                               ; preds = %dec_label_pc_23230
  %v0_2325e = load i64, i64* inttoptr (i64 143973 to i64*), align 8
  store i64 %v0_2325e, i64* @rax, align 8
  store i64 %v0_23238, i64* %rbp.global-to-local, align 8
  ret i64 %v0_2325e

dec_label_pc_23278:                               ; preds = %dec_label_pc_23230
  store i64 143999, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$104callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_235b0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_235b8 = load i64, i64* %rbp.global-to-local, align 8
  %v0_235ba = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_235ba, i64* %rbp.global-to-local, align 8
  %v0_235c1 = load i64, i64* @rdi, align 8
  %v1_235c1 = add i64 %v0_235c1, 24
  %v2_235c1 = inttoptr i64 %v1_235c1 to i64*
  %v3_235c1 = load i64, i64* %v2_235c1, align 8
  store i64 %v3_235c1, i64* @rdi, align 8
  %v1_235c5 = inttoptr i64 %v3_235c1 to i64*
  %v2_235c5 = load i64, i64* %v1_235c5, align 8
  store i64 %v2_235c5, i64* @rax, align 8
  %v1_235ce = inttoptr i64 %v2_235c5 to i64*
  %v2_235ce = load i64, i64* %v1_235ce, align 8
  store i64 %v2_235ce, i64* @rdx, align 8
  store i64 %v2_235c5, i64* @rdi, align 8
  %v4_235da = trunc i64 %v2_235c5 to i8
  %v5_235da = icmp eq i8 %v4_235da, 0
  br i1 %v5_235da, label %dec_label_pc_235f8, label %dec_label_pc_235de

dec_label_pc_235de:                               ; preds = %dec_label_pc_235b0
  %v0_235de = load i64, i64* inttoptr (i64 144869 to i64*), align 8
  store i64 %v0_235de, i64* @rax, align 8
  store i64 %v0_235b8, i64* %rbp.global-to-local, align 8
  ret i64 %v0_235de

dec_label_pc_235f8:                               ; preds = %dec_label_pc_235b0
  store i64 144895, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm220LuaTable$NormalEntry8keyindexEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23930:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2393a = load i64, i64* @rdi, align 8
  %v1_2393a = add i64 %v0_2393a, 8
  %v2_2393a = inttoptr i64 %v1_2393a to i64*
  %v3_2393a = load i64, i64* %v2_2393a, align 8
  store i64 %v3_2393a, i64* @rbx, align 8
  store i64 145733, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_23998() local_unnamed_addr {
dec_label_pc_23998:
  store i64 145832, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm225LuaTable$NumberValueEntry8keyindexEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_239d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_239da = load i64, i64* @rdi, align 8
  %v1_239da = add i64 %v0_239da, 16
  %v2_239da = inttoptr i64 %v1_239da to i64*
  %v3_239da = load i64, i64* %v2_239da, align 8
  store i64 %v3_239da, i64* @rbx, align 8
  store i64 145893, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_23a38() local_unnamed_addr {
dec_label_pc_23a38:
  store i64 145992, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$56$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23a70:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_23a78 = load i64, i64* @rdi, align 8
  store i64 %v0_23a78, i64* @r13, align 8
  %v0_23a7d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_23a7d, i64* @rdi, align 8
  store i64 %v0_23a7d, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_23a92 = add i64 %v0_23a78, 24
  %v2_23a92 = inttoptr i64 %v1_23a92 to i64*
  %v3_23a92 = load i64, i64* %v2_23a92, align 8
  store i64 %v3_23a92, i64* @rax, align 8
  %v1_23a96 = add i64 %v3_23a92, 8
  %v2_23a96 = inttoptr i64 %v1_23a96 to i32*
  %v3_23a96 = load i32, i32* %v2_23a96, align 4
  %v4_23a96 = zext i32 %v3_23a96 to i64
  store i64 %v4_23a96, i64* @r11, align 8
  %v5_23a9a = icmp eq i32 %v3_23a96, 0
  br i1 %v5_23a9a, label %bb, label %dec_label_pc_23aa3

bb:                                               ; preds = %dec_label_pc_23a70
  %v2_23a9d = call i64 @function_23d30(i64 %v0_23a7d)
  store i64 %v2_23a9d, i64* @rax, align 8
  br label %dec_label_pc_23aa3

dec_label_pc_23aa3:                               ; preds = %bb, %dec_label_pc_23a70
  %v0_23aa3 = phi i64 [ %v2_23a9d, %bb ], [ %v3_23a92, %dec_label_pc_23a70 ]
  %v1_23aa3 = add i64 %v0_23aa3, 16
  %v2_23aa3 = inttoptr i64 %v1_23aa3 to i64*
  %v3_23aa3 = load i64, i64* %v2_23aa3, align 8
  store i64 %v3_23aa3, i64* @rdi, align 8
  %v0_23aa7 = load i64, i64* inttoptr (i64 146094 to i64*), align 8
  store i64 %v0_23aa7, i64* %rsi.global-to-local, align 8
  %v1_23aae = inttoptr i64 %v3_23aa3 to i64*
  %v2_23aae = load i64, i64* %v1_23aae, align 8
  store i64 %v2_23aae, i64* @rax, align 8
  %v4_23ab7 = trunc i64 %v2_23aae to i8
  %v5_23ab7 = icmp eq i8 %v4_23ab7, 0
  br i1 %v5_23ab7, label %bb258, label %dec_label_pc_23abf

bb258:                                            ; preds = %dec_label_pc_23aa3
  %v7_23ab9 = call i64 @function_23d10(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_23ab9, i64* @rax, align 8
  br label %dec_label_pc_23abf

dec_label_pc_23abf:                               ; preds = %bb258, %dec_label_pc_23aa3
  %v0_23abf = load i64, i64* @r13, align 8
  %v1_23abf = add i64 %v0_23abf, 32
  %v2_23abf = inttoptr i64 %v1_23abf to i64*
  %v3_23abf = load i64, i64* %v2_23abf, align 8
  store i64 %v3_23abf, i64* @rax, align 8
  %v1_23ac8 = add i64 %v0_23abf, 40
  %v2_23ac8 = inttoptr i64 %v1_23ac8 to i64*
  %v3_23ac8 = load i64, i64* %v2_23ac8, align 8
  store i64 %v3_23ac8, i64* @rax, align 8
  %v1_23acc = add i64 %v3_23ac8, 8
  %v2_23acc = inttoptr i64 %v1_23acc to i32*
  %v3_23acc = load i32, i32* %v2_23acc, align 4
  %v5_23ad0 = icmp eq i32 %v3_23acc, 0
  br i1 %v5_23ad0, label %bb259, label %dec_label_pc_23ad9

bb259:                                            ; preds = %dec_label_pc_23abf
  %v2_23ad3 = call i64 @function_23d30(i64 %v3_23aa3)
  store i64 %v2_23ad3, i64* @rax, align 8
  %v0_23add.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_23ad9

dec_label_pc_23ad9:                               ; preds = %bb259, %dec_label_pc_23abf
  %v0_23add = phi i64 [ %v0_23add.pre, %bb259 ], [ %v0_23abf, %dec_label_pc_23abf ]
  %v0_23ad9 = phi i64 [ %v2_23ad3, %bb259 ], [ %v3_23ac8, %dec_label_pc_23abf ]
  %v1_23ad9 = add i64 %v0_23ad9, 16
  %v2_23ad9 = inttoptr i64 %v1_23ad9 to i64*
  %v3_23ad9 = load i64, i64* %v2_23ad9, align 8
  store i64 %v3_23ad9, i64* @rax, align 8
  %v1_23add = add i64 %v0_23add, 48
  %v2_23add = inttoptr i64 %v1_23add to i64*
  %v3_23add = load i64, i64* %v2_23add, align 8
  store i64 %v3_23add, i64* @rbx, align 8
  %v1_23ae6 = add i64 %v0_23add, 56
  %v2_23ae6 = inttoptr i64 %v1_23ae6 to i64*
  %v3_23ae6 = load i64, i64* %v2_23ae6, align 8
  store i64 %v3_23ae6, i64* @rax, align 8
  %v1_23aea = add i64 %v3_23ae6, 8
  %v2_23aea = inttoptr i64 %v1_23aea to i32*
  %v3_23aea = load i32, i32* %v2_23aea, align 4
  %v5_23aee = icmp eq i32 %v3_23aea, 0
  br i1 %v5_23aee, label %bb260, label %dec_label_pc_23af7

bb260:                                            ; preds = %dec_label_pc_23ad9
  %v2_23af1 = call i64 @function_23d30(i64 %v3_23aa3)
  store i64 %v2_23af1, i64* @rax, align 8
  %v0_23afb.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_23af7

dec_label_pc_23af7:                               ; preds = %bb260, %dec_label_pc_23ad9
  %v0_23b14 = phi i64 [ %v0_23afb.pre, %bb260 ], [ %v0_23add, %dec_label_pc_23ad9 ]
  %v0_23af7 = phi i64 [ %v2_23af1, %bb260 ], [ %v3_23ae6, %dec_label_pc_23ad9 ]
  %v1_23af7 = add i64 %v0_23af7, 16
  %v2_23af7 = inttoptr i64 %v1_23af7 to i64*
  %v3_23af7 = load i64, i64* %v2_23af7, align 8
  store i64 %v3_23af7, i64* @rax, align 8
  %v1_23afb = add i64 %v0_23b14, 64
  %v2_23afb = inttoptr i64 %v1_23afb to i64*
  %v3_23afb = load i64, i64* %v2_23afb, align 8
  store i64 %v3_23afb, i64* @rdi, align 8
  %v1_23aff = add i64 %v0_23b14, 72
  %v2_23aff = inttoptr i64 %v1_23aff to i64*
  %v3_23aff = load i64, i64* %v2_23aff, align 8
  store i64 %v3_23aff, i64* %rsi.global-to-local, align 8
  %v1_23b08 = inttoptr i64 %v3_23afb to i64*
  %v2_23b08 = load i64, i64* %v1_23b08, align 8
  store i64 %v2_23b08, i64* @rax, align 8
  %v1_23b14 = add i64 %v0_23b14, 80
  %v2_23b14 = inttoptr i64 %v1_23b14 to i64*
  %v3_23b14 = load i64, i64* %v2_23b14, align 8
  store i64 %v3_23b14, i64* @rax, align 8
  %v1_23b18 = add i64 %v3_23b14, 8
  %v2_23b18 = inttoptr i64 %v1_23b18 to i32*
  %v3_23b18 = load i32, i32* %v2_23b18, align 4
  %v4_23b18 = zext i32 %v3_23b18 to i64
  store i64 %v4_23b18, i64* @rdi, align 8
  %v7_23b1b = icmp eq i32 %v3_23b18, 0
  br i1 %v7_23b1b, label %bb261, label %dec_label_pc_23b23

bb261:                                            ; preds = %dec_label_pc_23af7
  %v3_23b1d = call i64 @function_23d30(i64 0)
  store i64 %v3_23b1d, i64* @rax, align 8
  br label %dec_label_pc_23b23

dec_label_pc_23b23:                               ; preds = %bb261, %dec_label_pc_23af7
  store i64 146218, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_23d10(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_23d10:
  %v0_23d10 = load i64, i64* @r13, align 8
  %v1_23d10 = add i64 %v0_23d10, 24
  %v2_23d10 = inttoptr i64 %v1_23d10 to i64*
  %v3_23d10 = load i64, i64* %v2_23d10, align 8
  store i64 %v3_23d10, i64* @rax, align 8
  %v1_23d14 = add i64 %v3_23d10, 8
  %v2_23d14 = inttoptr i64 %v1_23d14 to i32*
  %v3_23d14 = load i32, i32* %v2_23d14, align 4
  %v5_23d18 = icmp eq i32 %v3_23d14, 0
  br i1 %v5_23d18, label %bb, label %dec_label_pc_23d1d

bb:                                               ; preds = %dec_label_pc_23d10
  %v1_23d1b = load i64, i64* @rdi, align 8
  %v2_23d1b = call i64 @function_23d30(i64 %v1_23d1b)
  store i64 %v2_23d1b, i64* @rax, align 8
  br label %dec_label_pc_23d1d

dec_label_pc_23d1d:                               ; preds = %bb, %dec_label_pc_23d10
  %v0_23d1d = phi i64 [ %v2_23d1b, %bb ], [ %v3_23d10, %dec_label_pc_23d10 ]
  %v1_23d1d = add i64 %v0_23d1d, 16
  %v2_23d1d = inttoptr i64 %v1_23d1d to i64*
  %v3_23d1d = load i64, i64* %v2_23d1d, align 8
  store i64 %v3_23d1d, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* @r13, align 8
  ret i64 %v3_23d1d
}

define i64 @function_23d30(i64 %arg1) local_unnamed_addr {
dec_label_pc_23d30:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_23d39() local_unnamed_addr {
dec_label_pc_23d39:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable8hashSlotEJiPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23d50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v0_23d59 = load i64, i64* @rdi, align 8
  %v1_23d59 = add i64 %v0_23d59, 16
  %v2_23d59 = inttoptr i64 %v1_23d59 to i64*
  %v3_23d59 = load i64, i64* %v2_23d59, align 8
  store i64 %v3_23d59, i64* @rax, align 8
  store i64 146788, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_23dc0() local_unnamed_addr {
dec_label_pc_23dc0:
  store i64 146896, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$76$178onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23df0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_23dfd = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_23dfd, i64* @rbx, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 147006, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_23ed4() local_unnamed_addr {
dec_label_pc_23ed4:
  store i64 147163, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$76$158onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_23f20:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_23f2d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_23f2d, i64* @rbx, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 147310, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24004() local_unnamed_addr {
dec_label_pc_24004:
  store i64 147467, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$208onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24050:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2405d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2405d, i64* @rbx, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 147614, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24134() local_unnamed_addr {
dec_label_pc_24134:
  store i64 147771, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$228onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24180:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2418d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2418d, i64* @rbx, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 147918, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24264() local_unnamed_addr {
dec_label_pc_24264:
  store i64 148075, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$FormatDesc6formatEJvPNS1_6BufferEd"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_242b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_242b7 = load i64, i64* @rdi, align 8
  %v1_242b7 = add i64 %v0_242b7, 40
  %v2_242b7 = inttoptr i64 %v1_242b7 to i64*
  %v3_242b7 = load i64, i64* %v2_242b7, align 8
  store i64 %v3_242b7, i64* @rax, align 8
  %v1_242bf = inttoptr i64 %v3_242b7 to i64*
  %v2_242bf = load i64, i64* %v1_242bf, align 8
  store i64 %v2_242bf, i64* @rdx, align 8
  store i64 %v3_242b7, i64* @rdi, align 8
  ret i64 %v3_242b7
}

define i64 @"_ZN4lang12lang_luaj$424callEJPN3org4luaj3vm28LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24370:
  store i64 %arg1, i64* @rdi, align 8
  store i64 148371, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14MathLib$random4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24490:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_24493 = load i64, i64* @rdx, align 8
  %v0_2449a = load i64, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %v0_24493, i64* @rax, align 8
  store i64 %v0_24493, i64* @rdi, align 8
  %v1_244bd = add i64 %v0_2449a, 24
  %v2_244bd = inttoptr i64 %v1_244bd to i64*
  %v3_244bd = load i64, i64* %v2_244bd, align 8
  store i64 %v3_244bd, i64* @rdi, align 8
  %v1_244c7 = inttoptr i64 %v3_244bd to i64*
  %v2_244c7 = load i64, i64* %v1_244c7, align 8
  store i64 %v2_244c7, i64* @rdx, align 8
  store i64 148692, i64* @rdi, align 8
  %v4_244d4 = add i64 %v0_24493, %arg2
  %v20_244d4 = and i64 %v4_244d4, 4294967295
  store i64 %v20_244d4, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24520(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_24520:
  store i64 %arg1, i64* @rdi, align 8
  %v0_24520 = load i64, i64* inttoptr (i64 148775 to i64*), align 8
  store i64 %v0_24520, i64* @rax, align 8
  %v0_24527 = load i64, i64* @rdi, align 8
  %v1_24527 = trunc i64 %v0_24527 to i32
  %v3_24527 = add i64 %v0_24520, 8
  %v4_24527 = inttoptr i64 %v3_24527 to i32*
  %v5_24527 = load i32, i32* %v4_24527, align 4
  %v11_24527 = icmp ult i32 %v1_24527, %v5_24527
  %v1_2452a = add i64 %v0_24520, 16
  store i64 %v1_2452a, i64* @rdx, align 8
  %v1_2452e = icmp eq i1 %v11_24527, false
  br i1 %v1_2452e, label %dec_label_pc_24550, label %dec_label_pc_24530

dec_label_pc_24530:                               ; preds = %dec_label_pc_24520
  %v2_24533 = mul i64 %v0_24527, 8
  %v3_24533 = add i64 %v2_24533, %v1_2452a
  %v4_24533 = inttoptr i64 %v3_24533 to i64*
  %v5_24533 = load i64, i64* %v4_24533, align 8
  store i64 %v5_24533, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v5_24533

dec_label_pc_24550:                               ; preds = %dec_label_pc_24520
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm223WeakTable$WeakValueSlot8keyindexEJii"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24560:
  store i64 %arg1, i64* @rdi, align 8
  %v2_24568 = load i64, i64* @rdi, align 8
  store i64 148856, i64* @rdi, align 8
  store i64 %v2_24568, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_245d0() local_unnamed_addr {
dec_label_pc_245d0:
  store i64 148960, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm29WeakTable5entryEJPNS1_13LuaTable$SlotEPNS1_8LuaValueES6_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_24600:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_24604 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_24604, i64* @r12, align 8
  %v0_24609 = load i64, i64* @rdi, align 8
  store i64 %v0_24609, i64* @rbx, align 8
  %v0_2460c = load i64, i64* @rdx, align 8
  store i64 %v0_2460c, i64* @rdi, align 8
  store i64 %v0_2460c, i64* @rax, align 8
  %v1_2461c = icmp eq i64 %v0_2460c, 0
  br i1 %v1_2461c, label %bb, label %dec_label_pc_24625

bb:                                               ; preds = %dec_label_pc_24600
  %v1_2461f = call i64 @function_24858()
  store i64 %v1_2461f, i64* @rax, align 8
  %v0_24625.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_24625

dec_label_pc_24625:                               ; preds = %bb, %dec_label_pc_24600
  %v0_24629 = phi i64 [ %v1_2461f, %bb ], [ %v0_2460c, %dec_label_pc_24600 ]
  %v0_24625 = phi i64 [ %v0_24625.pre, %bb ], [ %v0_24609, %dec_label_pc_24600 ]
  %v1_24625 = add i64 %v0_24625, 8
  %v2_24625 = inttoptr i64 %v1_24625 to i8*
  %v3_24625 = load i8, i8* %v2_24625, align 1
  %v10_24625 = icmp eq i8 %v3_24625, 0
  store i64 %v0_24629, i64* @rbp, align 8
  %v1_2462c = icmp eq i1 %v10_24625, false
  br i1 %v1_2462c, label %bb243, label %dec_label_pc_24632

bb243:                                            ; preds = %dec_label_pc_24625
  %v2_2462c = call i64 @function_24760()
  store i64 %v2_2462c, i64* @rax, align 8
  %v0_24632.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_24632

dec_label_pc_24632:                               ; preds = %bb243, %dec_label_pc_24625
  %v0_24632 = phi i64 [ %v0_24632.pre, %bb243 ], [ %v0_24625, %dec_label_pc_24625 ]
  %v1_24632 = add i64 %v0_24632, 9
  %v2_24632 = inttoptr i64 %v1_24632 to i8*
  %v3_24632 = load i8, i8* %v2_24632, align 1
  %v10_24632 = icmp eq i8 %v3_24632, 0
  %v1_24636 = icmp eq i1 %v10_24632, false
  br i1 %v1_24636, label %bb244, label %dec_label_pc_24638

bb244:                                            ; preds = %dec_label_pc_24632
  %v2_24636 = call i64 @function_246a0()
  store i64 %v2_24636, i64* @rax, align 8
  br label %dec_label_pc_24638

dec_label_pc_24638:                               ; preds = %bb244, %dec_label_pc_24632
  store i64 149055, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_246a0() local_unnamed_addr {
dec_label_pc_246a0:
  %v2_246a0 = load i64, i64* @rbp, align 8
  store i64 %v2_246a0, i64* @rax, align 8
  store i64 149218, i64* @rdi, align 8
  ret i64 %v2_246a0
}

define i64 @function_24718() local_unnamed_addr {
dec_label_pc_24718:
  store i64 149279, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24760() local_unnamed_addr {
dec_label_pc_24760:
  %v2_24760 = load i64, i64* @r12, align 8
  store i64 %v2_24760, i64* @rax, align 8
  store i64 %v2_24760, i64* @rdi, align 8
  %v0_2479f = load i64, i64* @rbx, align 8
  %v1_2479f = add i64 %v0_2479f, 9
  %v2_2479f = inttoptr i64 %v1_2479f to i8*
  %v3_2479f = load i8, i8* %v2_2479f, align 1
  %v10_2479f = icmp eq i8 %v3_2479f, 0
  br i1 %v10_2479f, label %dec_label_pc_247ba, label %dec_label_pc_247a5

dec_label_pc_247a5:                               ; preds = %dec_label_pc_24760
  %v2_247a5 = load i64, i64* @rbp, align 8
  store i64 %v2_247a5, i64* @rax, align 8
  store i64 %v2_247a5, i64* @rdi, align 8
  %v4_247b2 = trunc i64 %v2_247a5 to i8
  %v5_247b2 = icmp eq i8 %v4_247b2, 0
  br i1 %v5_247b2, label %bb, label %dec_label_pc_247ba

bb:                                               ; preds = %dec_label_pc_247a5
  %v1_247b4 = call i64 @function_2485f()
  store i64 %v1_247b4, i64* @rax, align 8
  br label %dec_label_pc_247ba

dec_label_pc_247ba:                               ; preds = %bb, %dec_label_pc_247a5, %dec_label_pc_24760
  store i64 149441, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24808() local_unnamed_addr {
dec_label_pc_24808:
  store i64 149519, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24858() local_unnamed_addr {
dec_label_pc_24858:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2485f() local_unnamed_addr {
dec_label_pc_2485f:
  %v2_2485f = load i64, i64* @rbp, align 8
  store i64 %v2_2485f, i64* @rax, align 8
  store i64 149648, i64* @rdi, align 8
  ret i64 %v2_2485f
}

define i64 @"_ZN4lang15lang_luaj$76$168onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_248b0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_248ba = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_248ba, i64* @rbx, align 8
  store i64 4, i64* %rsi.global-to-local, align 8
  store i64 149777, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_249f0() local_unnamed_addr {
dec_label_pc_249f0:
  store i64 150007, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$218onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24a40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_24a4a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_24a4a, i64* @rbx, align 8
  store i64 4, i64* %rsi.global-to-local, align 8
  store i64 150177, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_24b80() local_unnamed_addr {
dec_label_pc_24b80:
  store i64 150407, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$488onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_24bd0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_24bd7 = load i64, i64* @rdi, align 8
  store i64 %v0_24bd7, i64* @r12, align 8
  %v2_24bdb = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_24bdb, i64* @rbx, align 8
  store i64 %v2_24bdb, i64* @rbp, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 1, i64* @r13, align 8
  store i64 2, i64* @rax, align 8
  store i64 %v2_24bdb, i64* @rdi, align 8
  br label %dec_label_pc_24ca6

dec_label_pc_24c20:                               ; preds = %dec_label_pc_24ca6
  %v0_24c20 = load i64, i64* @r12, align 8
  %v1_24c20 = add i64 %v0_24c20, 24
  %v2_24c20 = inttoptr i64 %v1_24c20 to i64*
  %v3_24c20 = load i64, i64* %v2_24c20, align 8
  store i64 %v3_24c20, i64* @rax, align 8
  %v1_24c25 = add i64 %v3_24c20, 8
  %v2_24c25 = inttoptr i64 %v1_24c25 to i32*
  %v3_24c25 = load i32, i32* %v2_24c25, align 4
  %v4_24c25 = zext i32 %v3_24c25 to i64
  store i64 %v4_24c25, i64* @rdx, align 8
  %v5_24c28 = icmp eq i32 %v3_24c25, 0
  br i1 %v5_24c28, label %bb, label %dec_label_pc_24c30

bb:                                               ; preds = %dec_label_pc_24c20
  %v2_24c2a = call i64 @function_24d4c(i64 %storemerge)
  store i64 %v2_24c2a, i64* @rax, align 8
  %v0_24c34.pre = load i64, i64* @rbx, align 8
  %v0_24c61.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_24c30

dec_label_pc_24c30:                               ; preds = %bb, %dec_label_pc_24c20
  %v0_24c61 = phi i64 [ %v0_24c61.pre, %bb ], [ %v0_24caa, %dec_label_pc_24c20 ]
  %v0_24c8a = phi i64 [ %v0_24c34.pre, %bb ], [ %storemerge, %dec_label_pc_24c20 ]
  %v0_24c30 = phi i64 [ %v2_24c2a, %bb ], [ %v3_24c20, %dec_label_pc_24c20 ]
  %v1_24c30 = add i64 %v0_24c30, 16
  %v2_24c30 = inttoptr i64 %v1_24c30 to i64*
  %v3_24c30 = load i64, i64* %v2_24c30, align 8
  %v1_24c34 = inttoptr i64 %v0_24c8a to i64*
  %v2_24c34 = load i64, i64* %v1_24c34, align 8
  store i64 %v2_24c34, i64* @rax, align 8
  store i64 %v0_24c8a, i64* @rdi, align 8
  %v0_24c3a = load i64, i64* inttoptr (i64 150593 to i64*), align 8
  store i64 %v0_24c3a, i64* %rsi.global-to-local, align 8
  %v1_24c47 = inttoptr i64 %v2_24c34 to i64*
  %v2_24c47 = load i64, i64* %v1_24c47, align 8
  store i64 %v2_24c47, i64* @rdx, align 8
  %v0_24c4a = load i64, i64* inttoptr (i64 150609 to i64*), align 8
  store i64 %v0_24c4a, i64* @rdx, align 8
  store i64 %v2_24c34, i64* %rsi.global-to-local, align 8
  store i64 %v0_24c61, i64* @rdi, align 8
  %v1_24c6a = inttoptr i64 %v3_24c30 to i64*
  %v2_24c6a = load i64, i64* %v1_24c6a, align 8
  store i64 %v2_24c6a, i64* @rcx, align 8
  %v0_24c6d = load i64, i64* @r13, align 8
  store i64 %v0_24c6d, i64* @rdx, align 8
  store i64 %v2_24c34, i64* %rsi.global-to-local, align 8
  store i64 %v3_24c30, i64* @rdi, align 8
  %v2_24c7c = load i64, i64* %v1_24c47, align 8
  store i64 %v2_24c7c, i64* @rdx, align 8
  store i64 %v2_24c34, i64* @rdi, align 8
  %v4_24c88 = trunc i64 %v2_24c34 to i8
  %v5_24c88 = icmp eq i8 %v4_24c88, 0
  %v2_24c8a = load i64, i64* %v1_24c34, align 8
  store i64 %v2_24c8a, i64* @rax, align 8
  %v1_24c8d = icmp eq i1 %v5_24c88, false
  br i1 %v1_24c8d, label %bb249, label %dec_label_pc_24c93

bb249:                                            ; preds = %dec_label_pc_24c30
  %v7_24c8d = call i64 @function_24d10(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_24c8d, i64* @rax, align 8
  %v0_24c93.pre = load i64, i64* @rbx, align 8
  %v0_24caa.pre.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_24c93

dec_label_pc_24c93:                               ; preds = %bb249, %dec_label_pc_24c30
  %v0_24caa.pre = phi i64 [ %v0_24caa.pre.pre, %bb249 ], [ %v0_24c61, %dec_label_pc_24c30 ]
  %v0_24c93 = phi i64 [ %v0_24c93.pre, %bb249 ], [ %v0_24c8a, %dec_label_pc_24c30 ]
  store i64 %v0_24c93, i64* @rdi, align 8
  %v0_24c96 = load i64, i64* inttoptr (i64 150685 to i64*), align 8
  br label %dec_label_pc_24ca6

dec_label_pc_24ca6:                               ; preds = %dec_label_pc_24c93, %dec_label_pc_24bd0
  %v0_24caa = phi i64 [ %v2_24bdb, %dec_label_pc_24bd0 ], [ %v0_24caa.pre, %dec_label_pc_24c93 ]
  %v1_24cd6 = phi i64 [ 3, %dec_label_pc_24bd0 ], [ %v0_24c96, %dec_label_pc_24c93 ]
  %storemerge.in = phi i64* [ inttoptr (i64 150552 to i64*), %dec_label_pc_24bd0 ], [ @rax, %dec_label_pc_24c93 ]
  store i64 %v1_24cd6, i64* %rsi.global-to-local, align 8
  %storemerge = load i64, i64* %storemerge.in, align 8
  store i64 %storemerge, i64* @rbx, align 8
  store i64 %v1_24cd6, i64* @rax, align 8
  store i64 %v0_24caa, i64* @rdi, align 8
  %v1_24cb3 = inttoptr i64 %storemerge to i64*
  %v2_24cb3 = load i64, i64* %v1_24cb3, align 8
  store i64 %v2_24cb3, i64* @rdx, align 8
  store i64 %v1_24cd6, i64* %rsi.global-to-local, align 8
  store i64 %storemerge, i64* @rdi, align 8
  %v4_24cc2 = trunc i64 %v1_24cd6 to i8
  %v5_24cc2 = icmp eq i8 %v4_24cc2, 0
  %v1_24cc4 = icmp eq i1 %v5_24cc2, false
  br i1 %v1_24cc4, label %dec_label_pc_24c20, label %dec_label_pc_24cca

dec_label_pc_24cca:                               ; preds = %dec_label_pc_24ca6
  store i64 150737, i64* @rdi, align 8
  ret i64 %v1_24cd6
}

define i64 @function_24d10(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_24d10:
  %v2_24d20 = load i64, i64* @rax, align 8
  %v2_24d33 = load i64, i64* @rbp, align 8
  store i64 %v2_24d33, i64* @rdx, align 8
  store i64 %v2_24d33, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg4, i64* @r13, align 8
  ret i64 %v2_24d20
}

define i64 @function_24d4c(i64 %arg1) local_unnamed_addr {
dec_label_pc_24d4c:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7valueOfEJPNS1_9LuaNumberEd() local_unnamed_addr {
dec_label_pc_24d60:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 150889, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_24d6f = load i128, i128* %xmm0.global-to-local, align 8
  %v1_24d6f = call i64 @__asm_movsd.7465(i128 %v0_24d6f)
  store i64 150913, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24e60() local_unnamed_addr {
dec_label_pc_24e60:
  %v0_24e65 = load i64, i64* @rax, align 8
  ret i64 %v0_24e65
}

define i64 @function_24e70() local_unnamed_addr {
dec_label_pc_24e70:
  store i64 151159, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24e7e() local_unnamed_addr {
dec_label_pc_24e7e:
  store i64 151173, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24ea4() local_unnamed_addr {
dec_label_pc_24ea4:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_24ea4 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_24ea4 = load i64, i64* inttoptr (i64 151212 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_24ea4, i64 %v1_24ea4)
  store i64 151231, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_24ed5() local_unnamed_addr {
dec_label_pc_24ed5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3powEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_24ee0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_24ee8 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_24ee8 = call i64 @__asm_movsd.7465(i128 %v0_24ee8)
  %v0_24eee = load i64, i64* @rdi, align 8
  %v1_24eee = add i64 %v0_24eee, 8
  %v2_24eee = inttoptr i64 %v1_24eee to i64*
  %v3_24eee = load i64, i64* %v2_24eee, align 8
  %v4_24eee = call i128 @__asm_movsd(i64 %v3_24eee)
  store i128 %v4_24eee, i128* %xmm0.global-to-local, align 8
  store i64 151290, i64* @rdi, align 8
  %v1_24efa = call i64 @__asm_movsd.7465(i128 %v4_24eee)
  %v4_24efa = load i64, i64* @rax, align 8
  ret i64 %v4_24efa
}

define i64 @function_25010() local_unnamed_addr {
dec_label_pc_25010:
  %v0_25015 = load i64, i64* @rax, align 8
  ret i64 %v0_25015
}

define i64 @function_25020() local_unnamed_addr {
dec_label_pc_25020:
  %v0_25025 = load i64, i64* @rax, align 8
  ret i64 %v0_25025
}

define i64 @function_25030() local_unnamed_addr {
dec_label_pc_25030:
  store i64 151607, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2503e() local_unnamed_addr {
dec_label_pc_2503e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_25064() local_unnamed_addr {
dec_label_pc_25064:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_25064 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_25064 = load i64, i64* inttoptr (i64 151660 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25064, i64 %v1_25064)
  store i64 151679, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25095() local_unnamed_addr {
dec_label_pc_25095:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble7powWithEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_250a0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_250a8 = load i64, i64* @rdi, align 8
  %v1_250a8 = add i64 %v0_250a8, 8
  %v2_250a8 = inttoptr i64 %v1_250a8 to i64*
  %v3_250a8 = load i64, i64* %v2_250a8, align 8
  %v4_250a8 = call i128 @__asm_movsd(i64 %v3_250a8)
  store i64 151732, i64* @rdi, align 8
  %v0_250b4 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_250b4 = call i64 @__asm_movsd.7465(i128 %v0_250b4)
  %v1_250ba = call i64 @__asm_movsd.7465(i128 %v4_250a8)
  %v0_250c4 = load i64, i64* inttoptr (i64 151755 to i64*), align 8
  store i64 %v0_250c4, i64* @rdi, align 8
  %v3_250cb = call i128 @__asm_movsd(i64 %v1_250ba)
  %v4_250d0 = call i128 @__asm_movsd(i64 %v1_250b4)
  store i128 %v4_250d0, i128* %xmm0.global-to-local, align 8
  %v1_250d6 = icmp eq i64 %v0_250c4, 0
  br i1 %v1_250d6, label %bb, label %dec_label_pc_250df

bb:                                               ; preds = %dec_label_pc_250a0
  %v1_250d9 = call i64 @function_251e0()
  store i64 %v1_250d9, i64* @rax, align 8
  br label %dec_label_pc_250df

dec_label_pc_250df:                               ; preds = %bb, %dec_label_pc_250a0
  store i64 151791, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_250f1 = call i64 @__asm_movsd.7465(i128 %v4_250d0)
  %v4_250f1 = load i64, i64* @rax, align 8
  ret i64 %v4_250f1
}

define i64 @function_251d0() local_unnamed_addr {
dec_label_pc_251d0:
  %v0_251d5 = load i64, i64* @rax, align 8
  ret i64 %v0_251d5
}

define i64 @function_251e0() local_unnamed_addr {
dec_label_pc_251e0:
  %v0_251e5 = load i64, i64* @rax, align 8
  ret i64 %v0_251e5
}

define i64 @function_251f0() local_unnamed_addr {
dec_label_pc_251f0:
  store i64 152055, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_251fe() local_unnamed_addr {
dec_label_pc_251fe:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_25224() local_unnamed_addr {
dec_label_pc_25224:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_25224 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_25224 = load i64, i64* inttoptr (i64 152108 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25224, i64 %v1_25224)
  store i64 152127, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25255() local_unnamed_addr {
dec_label_pc_25255:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble7subFromEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_25260:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25268 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_25268 = load i64, i64* @rdi, align 8
  %v2_25268 = add i64 %v1_25268, 8
  %v3_25268 = inttoptr i64 %v2_25268 to i64*
  %v4_25268 = load i64, i64* %v3_25268, align 8
  %v5_25268 = call i128 @__asm_subsd.7473(i128 %v0_25268, i64 %v4_25268)
  store i128 %v5_25268, i128* %xmm0.global-to-local, align 8
  store i64 152180, i64* @rdi, align 8
  %v1_25274 = call i64 @__asm_movsd.7465(i128 %v5_25268)
  %v5_25274 = load i64, i64* @rax, align 8
  ret i64 %v5_25274
}

define i64 @function_25310() local_unnamed_addr {
dec_label_pc_25310:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_25315 = load i128, i128* @xmm0, align 8
  %v1_25315 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_25315, i128 %v1_25315)
  %v0_25319 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_25319, label %bb, label %dec_label_pc_25310.dec_label_pc_2531b_crit_edge

dec_label_pc_25310.dec_label_pc_2531b_crit_edge:  ; preds = %dec_label_pc_25310
  %v0_2531b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2531b

bb:                                               ; preds = %dec_label_pc_25310
  %v1_25319 = call i64 @function_2531d()
  store i64 %v1_25319, i64* @rax, align 8
  br label %dec_label_pc_2531b

dec_label_pc_2531b:                               ; preds = %dec_label_pc_25310.dec_label_pc_2531b_crit_edge, %bb
  %v0_2531b = phi i64 [ %v0_2531b.pre, %dec_label_pc_25310.dec_label_pc_2531b_crit_edge ], [ %v1_25319, %bb ]
  ret i64 %v0_2531b
}

define i64 @function_2531d() local_unnamed_addr {
dec_label_pc_2531d:
  store i64 152356, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25326 = load i128, i128* @xmm0, align 8
  %v1_25326 = call i64 @__asm_movsd.7465(i128 %v0_25326)
  %v5_25326 = load i64, i64* @rax, align 8
  ret i64 %v5_25326
}

define i64 @function_25358() local_unnamed_addr {
dec_label_pc_25358:
  %v0_2535d = load i64, i64* @rax, align 8
  ret i64 %v0_2535d
}

define i64 @function_25360() local_unnamed_addr {
dec_label_pc_25360:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2536e() local_unnamed_addr {
dec_label_pc_2536e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_25394() local_unnamed_addr {
dec_label_pc_25394:
  %pf.global-to-local = alloca i1, align 1
  %v0_25394 = load i128, i128* @xmm0, align 8
  %v1_25394 = load i64, i64* inttoptr (i64 152476 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25394, i64 %v1_25394)
  %v0_2539c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2539c, label %bb, label %dec_label_pc_25394.dec_label_pc_253a2_crit_edge

dec_label_pc_25394.dec_label_pc_253a2_crit_edge:  ; preds = %dec_label_pc_25394
  %v2_2539c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_253a2

bb:                                               ; preds = %dec_label_pc_25394
  %v1_2539c = call i64 @function_2531d()
  store i64 %v1_2539c, i64* @rax, align 8
  br label %dec_label_pc_253a2

dec_label_pc_253a2:                               ; preds = %dec_label_pc_25394.dec_label_pc_253a2_crit_edge, %bb
  %v2_2539c = phi i64 [ %v2_2539c.pre, %dec_label_pc_25394.dec_label_pc_253a2_crit_edge ], [ %v1_2539c, %bb ]
  ret i64 %v2_2539c
}

define i64 @function_253c5() local_unnamed_addr {
dec_label_pc_253c5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3addEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_253d0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_253d8 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_253d8 = load i64, i64* @rdi, align 8
  %v2_253d8 = add i64 %v1_253d8, 8
  %v3_253d8 = inttoptr i64 %v2_253d8 to i64*
  %v4_253d8 = load i64, i64* %v3_253d8, align 8
  %v5_253d8 = call i128 @__asm_addsd.7472(i128 %v0_253d8, i64 %v4_253d8)
  store i128 %v5_253d8, i128* %xmm0.global-to-local, align 8
  store i64 152548, i64* @rdi, align 8
  %v1_253e4 = call i64 @__asm_movsd.7465(i128 %v5_253d8)
  %v5_253e4 = load i64, i64* @rax, align 8
  ret i64 %v5_253e4
}

define i64 @function_25480() local_unnamed_addr {
dec_label_pc_25480:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_25485 = load i128, i128* @xmm0, align 8
  %v1_25485 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_25485, i128 %v1_25485)
  %v0_25489 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_25489, label %bb, label %dec_label_pc_25480.dec_label_pc_2548b_crit_edge

dec_label_pc_25480.dec_label_pc_2548b_crit_edge:  ; preds = %dec_label_pc_25480
  %v0_2548b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2548b

bb:                                               ; preds = %dec_label_pc_25480
  %v1_25489 = call i64 @function_2548d()
  store i64 %v1_25489, i64* @rax, align 8
  br label %dec_label_pc_2548b

dec_label_pc_2548b:                               ; preds = %dec_label_pc_25480.dec_label_pc_2548b_crit_edge, %bb
  %v0_2548b = phi i64 [ %v0_2548b.pre, %dec_label_pc_25480.dec_label_pc_2548b_crit_edge ], [ %v1_25489, %bb ]
  ret i64 %v0_2548b
}

define i64 @function_2548d() local_unnamed_addr {
dec_label_pc_2548d:
  store i64 152724, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25496 = load i128, i128* @xmm0, align 8
  %v1_25496 = call i64 @__asm_movsd.7465(i128 %v0_25496)
  %v5_25496 = load i64, i64* @rax, align 8
  ret i64 %v5_25496
}

define i64 @function_254c8() local_unnamed_addr {
dec_label_pc_254c8:
  %v0_254cd = load i64, i64* @rax, align 8
  ret i64 %v0_254cd
}

define i64 @function_254d0() local_unnamed_addr {
dec_label_pc_254d0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_254de() local_unnamed_addr {
dec_label_pc_254de:
  store i64 152805, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25504() local_unnamed_addr {
dec_label_pc_25504:
  %pf.global-to-local = alloca i1, align 1
  %v0_25504 = load i128, i128* @xmm0, align 8
  %v1_25504 = load i64, i64* inttoptr (i64 152844 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25504, i64 %v1_25504)
  %v0_2550c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2550c, label %bb, label %dec_label_pc_25504.dec_label_pc_25512_crit_edge

dec_label_pc_25504.dec_label_pc_25512_crit_edge:  ; preds = %dec_label_pc_25504
  %v2_2550c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_25512

bb:                                               ; preds = %dec_label_pc_25504
  %v1_2550c = call i64 @function_2548d()
  store i64 %v1_2550c, i64* @rax, align 8
  br label %dec_label_pc_25512

dec_label_pc_25512:                               ; preds = %dec_label_pc_25504.dec_label_pc_25512_crit_edge, %bb
  %v2_2550c = phi i64 [ %v2_2550c.pre, %dec_label_pc_25504.dec_label_pc_25512_crit_edge ], [ %v1_2550c, %bb ]
  ret i64 %v2_2550c
}

define i64 @function_25535() local_unnamed_addr {
dec_label_pc_25535:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3negEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_25540:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25548 = load i64, i64* @rdi, align 8
  %v1_25548 = add i64 %v0_25548, 8
  %v2_25548 = inttoptr i64 %v1_25548 to i64*
  %v3_25548 = load i64, i64* %v2_25548, align 8
  %v4_25548 = call i128 @__asm_movsd(i64 %v3_25548)
  store i64 152916, i64* @rdi, align 8
  %v1_25554 = call i128 @__asm_movapd(i128 %v4_25548)
  %v1_25558 = call i64 @__asm_movsd.7465(i128 %v4_25548)
  %v1_2555e = load i128, i128* inttoptr (i64 152934 to i128*), align 8
  %v2_2555e = call i128 @__asm_xorpd(i128 %v1_25554, i128 %v1_2555e)
  %v1_25566 = call i64 @__asm_movsd.7465(i128 %v2_2555e)
  %v4_25566 = load i64, i64* @rax, align 8
  ret i64 %v4_25566
}

define i64 @function_25600(i64 %arg1) local_unnamed_addr {
dec_label_pc_25600:
  %pf.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  %v0_25600 = load i64, i64* inttoptr (i64 153096 to i64*), align 8
  %v1_25600 = call i128 @__asm_movsd(i64 %v0_25600)
  %v3_2560d = call i128 @__asm_movsd(i64 %arg1)
  call void @__asm_ucomisd(i128 %v3_2560d, i128 %v1_25600)
  %v0_25616 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_25616, label %dec_label_pc_2561a, label %dec_label_pc_25618

dec_label_pc_25618:                               ; preds = %dec_label_pc_25600
  %v0_25618 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_25618, label %bb, label %dec_label_pc_2561a

bb:                                               ; preds = %dec_label_pc_25618
  %v1_25618 = call i64 @function_25660()
  store i64 %v1_25618, i64* @rax, align 8
  br label %dec_label_pc_2561a

dec_label_pc_2561a:                               ; preds = %bb, %dec_label_pc_25618, %dec_label_pc_25600
  store i64 153121, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i1 true, i1* %pf.global-to-local, align 1
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i128 @function_25650() local_unnamed_addr {
dec_label_pc_25650:
  %v0_25650 = load i64, i64* inttoptr (i64 153176 to i64*), align 8
  %v1_25650 = call i128 @__asm_movsd(i64 %v0_25650)
  ret i128 %v1_25650
}

define i64 @function_25660() local_unnamed_addr {
dec_label_pc_25660:
  store i64 153191, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2566e() local_unnamed_addr {
dec_label_pc_2566e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_256c5() local_unnamed_addr {
dec_label_pc_256c5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3subEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_256d0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_256d1 = load i64, i64* @rbx, align 8
  store i64 %v0_256d1, i64* %stack_var_-16, align 8
  %v4_256d1 = ptrtoint i64* %stack_var_-16 to i64
  store i64 0, i64* @rax, align 8
  %v1_256d4 = add i64 %v4_256d1, -24
  %v5_256d4 = icmp ult i64* %stack_var_-16, inttoptr (i64 24 to i64*)
  store i1 %v5_256d4, i1* @cf, align 1
  %v10_256d4 = icmp eq i64 %v1_256d4, 0
  store i1 %v10_256d4, i1* @zf, align 1
  %v12_256d4 = trunc i64 %v1_256d4 to i8
  %v13_256d4 = call i8 @llvm.ctpop.i8(i8 %v12_256d4)
  %v14_256d4 = urem i8 %v13_256d4, 2
  %v15_256d4 = icmp eq i8 %v14_256d4, 0
  store i1 %v15_256d4, i1* @pf, align 1
  %v0_256d8 = load i64, i64* @rdi, align 8
  %v1_256d8 = add i64 %v0_256d8, 8
  %v2_256d8 = inttoptr i64 %v1_256d8 to i64*
  %v3_256d8 = load i64, i64* %v2_256d8, align 8
  %v4_256d8 = call i128 @__asm_movsd(i64 %v3_256d8)
  store i64 153316, i64* @rdi, align 8
  %v1_256e4 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_256e4 = call i128 @__asm_subsd(i128 %v4_256d8, i128 %v1_256e4)
  %v1_256e8 = call i64 @__asm_movsd.7465(i128 %v2_256e4)
  %v0_256f3 = load i64, i64* inttoptr (i64 153339 to i64*), align 8
  %v1_256f3 = call i128 @__asm_movsd(i64 %v0_256f3)
  store i128 %v1_256f3, i128* @xmm1, align 8
  %v4_256fb = call i128 @__asm_movsd(i64 %v1_256e8)
  store i128 %v4_256fb, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v4_256fb, i128 %v1_256f3)
  %v0_25705 = load i1, i1* @cf, align 1
  %v1_25705 = icmp eq i1 %v0_25705, false
  br i1 %v1_25705, label %bb, label %dec_label_pc_25707

bb:                                               ; preds = %dec_label_pc_256d0
  %v2_25705 = call i64 @function_25780()
  store i64 %v2_25705, i64* @rax, align 8
  br label %dec_label_pc_25707

dec_label_pc_25707:                               ; preds = %bb, %dec_label_pc_256d0
  %v0_25707 = load i64, i64* inttoptr (i64 153359 to i64*), align 8
  %v1_25707 = call i128 @__asm_movsd(i64 %v0_25707)
  call void @__asm_ucomisd(i128 %v1_25707, i128 %v4_256fb)
  %v0_25713 = load i1, i1* @cf, align 1
  %v1_25713 = icmp eq i1 %v0_25713, false
  br i1 %v1_25713, label %bb256, label %dec_label_pc_25719

bb256:                                            ; preds = %dec_label_pc_25707
  %v2_25713 = call i64 @function_257c8()
  store i64 %v2_25713, i64* @rax, align 8
  br label %dec_label_pc_25719

dec_label_pc_25719:                               ; preds = %bb256, %dec_label_pc_25707
  call void @__asm_ucomisd(i128 %v4_256fb, i128 %v4_256fb)
  %v0_2571d = load i1, i1* @pf, align 1
  br i1 %v0_2571d, label %bb257, label %dec_label_pc_25723

bb257:                                            ; preds = %dec_label_pc_25719
  %v1_2571d = call i64 @function_25804()
  store i64 %v1_2571d, i64* @rax, align 8
  br label %dec_label_pc_25723

dec_label_pc_25723:                               ; preds = %bb257, %dec_label_pc_25719
  %v1_25723 = call i32 @__asm_cvttsd2si(i128 %v4_256fb)
  %v2_25727 = call i128 @__asm_pxor(i128 %v1_25707, i128 %v1_25707)
  %v3_2572b = call i128 @__asm_cvtsi2sd.7468(i32 %v1_25723)
  call void @__asm_ucomisd(i128 %v4_256fb, i128 %v3_2572b)
  %v0_25733 = load i1, i1* @pf, align 1
  br i1 %v0_25733, label %bb258, label %dec_label_pc_25735

bb258:                                            ; preds = %dec_label_pc_25723
  %v1_25733 = call i64 @function_2578d()
  store i64 %v1_25733, i64* @rax, align 8
  br label %dec_label_pc_25735

dec_label_pc_25735:                               ; preds = %bb258, %dec_label_pc_25723
  %v0_25735 = load i1, i1* @zf, align 1
  %v1_25735 = icmp eq i1 %v0_25735, false
  br i1 %v1_25735, label %bb259, label %dec_label_pc_25737

bb259:                                            ; preds = %dec_label_pc_25735
  %v2_25735 = call i64 @function_2578d()
  store i64 %v2_25735, i64* @rax, align 8
  br label %dec_label_pc_25737

dec_label_pc_25737:                               ; preds = %bb259, %dec_label_pc_25735
  store i64 153406, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25780() local_unnamed_addr {
dec_label_pc_25780:
  %v0_25785 = load i128, i128* @xmm0, align 8
  %v1_25785 = load i128, i128* @xmm1, align 8
  call void @__asm_ucomisd(i128 %v0_25785, i128 %v1_25785)
  %v0_25789 = load i1, i1* @pf, align 1
  br i1 %v0_25789, label %bb, label %dec_label_pc_25780.dec_label_pc_2578b_crit_edge

dec_label_pc_25780.dec_label_pc_2578b_crit_edge:  ; preds = %dec_label_pc_25780
  %v0_2578b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2578b

bb:                                               ; preds = %dec_label_pc_25780
  %v1_25789 = call i64 @function_2578d()
  store i64 %v1_25789, i64* @rax, align 8
  br label %dec_label_pc_2578b

dec_label_pc_2578b:                               ; preds = %dec_label_pc_25780.dec_label_pc_2578b_crit_edge, %bb
  %v0_2578b = phi i64 [ %v0_2578b.pre, %dec_label_pc_25780.dec_label_pc_2578b_crit_edge ], [ %v1_25789, %bb ]
  ret i64 %v0_2578b
}

define i64 @function_2578d() local_unnamed_addr {
dec_label_pc_2578d:
  store i64 153492, i64* @rdi, align 8
  store i1 false, i1* @cf, align 1
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rax, align 8
  %v0_25796 = load i128, i128* @xmm0, align 8
  %v1_25796 = call i64 @__asm_movsd.7465(i128 %v0_25796)
  %v5_25796 = load i64, i64* @rax, align 8
  ret i64 %v5_25796
}

define i64 @function_257c8() local_unnamed_addr {
dec_label_pc_257c8:
  %v0_257cd = load i64, i64* @rax, align 8
  ret i64 %v0_257cd
}

define i64 @function_257d0() local_unnamed_addr {
dec_label_pc_257d0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_257de() local_unnamed_addr {
dec_label_pc_257de:
  store i64 153573, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25804() local_unnamed_addr {
dec_label_pc_25804:
  %v0_25804 = load i128, i128* @xmm0, align 8
  %v1_25804 = load i64, i64* inttoptr (i64 153612 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25804, i64 %v1_25804)
  %v0_2580c = load i1, i1* @pf, align 1
  br i1 %v0_2580c, label %bb, label %dec_label_pc_25804.dec_label_pc_25812_crit_edge

dec_label_pc_25804.dec_label_pc_25812_crit_edge:  ; preds = %dec_label_pc_25804
  %v2_2580c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_25812

bb:                                               ; preds = %dec_label_pc_25804
  %v1_2580c = call i64 @function_2578d()
  store i64 %v1_2580c, i64* @rax, align 8
  br label %dec_label_pc_25812

dec_label_pc_25812:                               ; preds = %dec_label_pc_25804.dec_label_pc_25812_crit_edge, %bb
  %v2_2580c = phi i64 [ %v2_2580c.pre, %dec_label_pc_25804.dec_label_pc_25812_crit_edge ], [ %v1_2580c, %bb ]
  ret i64 %v2_2580c
}

define i64 @function_25835() local_unnamed_addr {
dec_label_pc_25835:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3mulEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_25840:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25848 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_25848 = load i64, i64* @rdi, align 8
  %v2_25848 = add i64 %v1_25848, 8
  %v3_25848 = inttoptr i64 %v2_25848 to i64*
  %v4_25848 = load i64, i64* %v3_25848, align 8
  %v5_25848 = call i128 @__asm_mulsd.7466(i128 %v0_25848, i64 %v4_25848)
  store i128 %v5_25848, i128* %xmm0.global-to-local, align 8
  store i64 153684, i64* @rdi, align 8
  %v1_25854 = call i64 @__asm_movsd.7465(i128 %v5_25848)
  %v5_25854 = load i64, i64* @rax, align 8
  ret i64 %v5_25854
}

define i64 @function_258f0() local_unnamed_addr {
dec_label_pc_258f0:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_258f5 = load i128, i128* @xmm0, align 8
  %v1_258f5 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_258f5, i128 %v1_258f5)
  %v0_258f9 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_258f9, label %bb, label %dec_label_pc_258f0.dec_label_pc_258fb_crit_edge

dec_label_pc_258f0.dec_label_pc_258fb_crit_edge:  ; preds = %dec_label_pc_258f0
  %v0_258fb.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_258fb

bb:                                               ; preds = %dec_label_pc_258f0
  %v1_258f9 = call i64 @function_258fd()
  store i64 %v1_258f9, i64* @rax, align 8
  br label %dec_label_pc_258fb

dec_label_pc_258fb:                               ; preds = %dec_label_pc_258f0.dec_label_pc_258fb_crit_edge, %bb
  %v0_258fb = phi i64 [ %v0_258fb.pre, %dec_label_pc_258f0.dec_label_pc_258fb_crit_edge ], [ %v1_258f9, %bb ]
  ret i64 %v0_258fb
}

define i64 @function_258fd() local_unnamed_addr {
dec_label_pc_258fd:
  store i64 153860, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25906 = load i128, i128* @xmm0, align 8
  %v1_25906 = call i64 @__asm_movsd.7465(i128 %v0_25906)
  %v5_25906 = load i64, i64* @rax, align 8
  ret i64 %v5_25906
}

define i64 @function_25938() local_unnamed_addr {
dec_label_pc_25938:
  %v0_2593d = load i64, i64* @rax, align 8
  ret i64 %v0_2593d
}

define i64 @function_25940() local_unnamed_addr {
dec_label_pc_25940:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2594e() local_unnamed_addr {
dec_label_pc_2594e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_25974() local_unnamed_addr {
dec_label_pc_25974:
  %pf.global-to-local = alloca i1, align 1
  %v0_25974 = load i128, i128* @xmm0, align 8
  %v1_25974 = load i64, i64* inttoptr (i64 153980 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25974, i64 %v1_25974)
  %v0_2597c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2597c, label %bb, label %dec_label_pc_25974.dec_label_pc_25982_crit_edge

dec_label_pc_25974.dec_label_pc_25982_crit_edge:  ; preds = %dec_label_pc_25974
  %v2_2597c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_25982

bb:                                               ; preds = %dec_label_pc_25974
  %v1_2597c = call i64 @function_258fd()
  store i64 %v1_2597c, i64* @rax, align 8
  br label %dec_label_pc_25982

dec_label_pc_25982:                               ; preds = %dec_label_pc_25974.dec_label_pc_25982_crit_edge, %bb
  %v2_2597c = phi i64 [ %v2_2597c.pre, %dec_label_pc_25974.dec_label_pc_25982_crit_edge ], [ %v1_2597c, %bb ]
  ret i64 %v2_2597c
}

define i64 @function_259a5() local_unnamed_addr {
dec_label_pc_259a5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$69$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_259b0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_259ba = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_259ba, i64* @rbx, align 8
  %v0_259bd = load i64, i64* @rdi, align 8
  store i64 3, i64* @rax, align 8
  store i64 4, i64* %rsi.global-to-local, align 8
  store i64 %v0_259ba, i64* @rdi, align 8
  %v1_25a08 = add i64 %v0_259bd, 32
  %v2_25a08 = inttoptr i64 %v1_25a08 to i64*
  %v3_25a08 = load i64, i64* %v2_25a08, align 8
  store i64 %v3_25a08, i64* @rax, align 8
  %v1_25a10 = add i64 %v3_25a08, 8
  %v2_25a10 = inttoptr i64 %v1_25a10 to i32*
  %v3_25a10 = load i32, i32* %v2_25a10, align 4
  %v4_25a10 = zext i32 %v3_25a10 to i64
  store i64 %v4_25a10, i64* @rdx, align 8
  %v5_25a13 = icmp eq i32 %v3_25a10, 0
  br i1 %v5_25a13, label %bb, label %dec_label_pc_25a1b

bb:                                               ; preds = %dec_label_pc_259b0
  %v2_25a15 = call i64 @function_25b15(i64 %v0_259ba)
  store i64 %v2_25a15, i64* @rax, align 8
  br label %dec_label_pc_25a1b

dec_label_pc_25a1b:                               ; preds = %bb, %dec_label_pc_259b0
  store i64 154146, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25ad4() local_unnamed_addr {
dec_label_pc_25ad4:
  store i64 154331, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25b15(i64 %arg1) local_unnamed_addr {
dec_label_pc_25b15:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger7powWithEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_25b20:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_25b21 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_25b21 = call i128 @__asm_pxor(i128 %v0_25b21, i128 %v0_25b21)
  store i128 %v2_25b21, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_25b2c = load i64, i64* @rdi, align 8
  %v1_25b2c = add i64 %v0_25b2c, 8
  %v2_25b2c = inttoptr i64 %v1_25b2c to i32*
  %v3_25b2c = load i32, i32* %v2_25b2c, align 4
  %v4_25b2c = call i128 @__asm_cvtsi2sd.7468(i32 %v3_25b2c)
  store i128 %v4_25b2c, i128* %xmm1.global-to-local, align 8
  store i64 154424, i64* @rdi, align 8
  %v0_25b38 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_25b38 = call i64 @__asm_movsd.7465(i128 %v0_25b38)
  %v1_25b3e = call i64 @__asm_movsd.7465(i128 %v4_25b2c)
  %v4_25b3e = load i64, i64* @rax, align 8
  ret i64 %v4_25b3e
}

define i64 @function_25c10() local_unnamed_addr {
dec_label_pc_25c10:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_25c15 = load i128, i128* @xmm0, align 8
  %v1_25c15 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_25c15, i128 %v1_25c15)
  %v0_25c19 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_25c19, label %bb, label %dec_label_pc_25c10.dec_label_pc_25c1b_crit_edge

dec_label_pc_25c10.dec_label_pc_25c1b_crit_edge:  ; preds = %dec_label_pc_25c10
  %v0_25c1b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_25c1b

bb:                                               ; preds = %dec_label_pc_25c10
  %v1_25c19 = call i64 @function_25c1d()
  store i64 %v1_25c19, i64* @rax, align 8
  br label %dec_label_pc_25c1b

dec_label_pc_25c1b:                               ; preds = %dec_label_pc_25c10.dec_label_pc_25c1b_crit_edge, %bb
  %v0_25c1b = phi i64 [ %v0_25c1b.pre, %dec_label_pc_25c10.dec_label_pc_25c1b_crit_edge ], [ %v1_25c19, %bb ]
  ret i64 %v0_25c1b
}

define i64 @function_25c1d() local_unnamed_addr {
dec_label_pc_25c1d:
  store i64 154660, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25c26 = load i128, i128* @xmm0, align 8
  %v1_25c26 = call i64 @__asm_movsd.7465(i128 %v0_25c26)
  %v4_25c26 = load i64, i64* @rax, align 8
  ret i64 %v4_25c26
}

define i64 @function_25c50() local_unnamed_addr {
dec_label_pc_25c50:
  %v0_25c55 = load i64, i64* @rax, align 8
  ret i64 %v0_25c55
}

define i64 @function_25c60() local_unnamed_addr {
dec_label_pc_25c60:
  %v0_25c65 = load i64, i64* @rax, align 8
  ret i64 %v0_25c65
}

define i64 @function_25c70() local_unnamed_addr {
dec_label_pc_25c70:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_25c7e() local_unnamed_addr {
dec_label_pc_25c7e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_25ca4() local_unnamed_addr {
dec_label_pc_25ca4:
  %pf.global-to-local = alloca i1, align 1
  %v0_25ca4 = load i128, i128* @xmm0, align 8
  %v1_25ca4 = load i64, i64* inttoptr (i64 154796 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25ca4, i64 %v1_25ca4)
  %v0_25cac = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_25cac, label %bb, label %dec_label_pc_25ca4.dec_label_pc_25cb2_crit_edge

dec_label_pc_25ca4.dec_label_pc_25cb2_crit_edge:  ; preds = %dec_label_pc_25ca4
  %v2_25cac.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_25cb2

bb:                                               ; preds = %dec_label_pc_25ca4
  %v1_25cac = call i64 @function_25c1d()
  store i64 %v1_25cac, i64* @rax, align 8
  br label %dec_label_pc_25cb2

dec_label_pc_25cb2:                               ; preds = %dec_label_pc_25ca4.dec_label_pc_25cb2_crit_edge, %bb
  %v2_25cac = phi i64 [ %v2_25cac.pre, %dec_label_pc_25ca4.dec_label_pc_25cb2_crit_edge ], [ %v1_25cac, %bb ]
  ret i64 %v2_25cac
}

define i64 @function_25cd5() local_unnamed_addr {
dec_label_pc_25cd5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3powEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_25ce0:
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_25ce0 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_25ce0 = call i128 @__asm_pxor(i128 %v0_25ce0, i128 %v0_25ce0)
  store i128 %v2_25ce0, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_25ce8 = trunc i64 %arg2 to i32
  %v2_25ce8 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_25ce8)
  store i128 %v2_25ce8, i128* %xmm1.global-to-local, align 8
  %v0_25cf0 = load i64, i64* @rdi, align 8
  %v1_25cf0 = add i64 %v0_25cf0, 8
  %v2_25cf0 = inttoptr i64 %v1_25cf0 to i64*
  %v3_25cf0 = load i64, i64* %v2_25cf0, align 8
  %v4_25cf0 = call i128 @__asm_movsd(i64 %v3_25cf0)
  store i64 154876, i64* @rdi, align 8
  %v1_25cfc = call i64 @__asm_movsd.7465(i128 %v4_25cf0)
  %v1_25d02 = call i64 @__asm_movsd.7465(i128 %v2_25ce8)
  %v0_25d0c = load i64, i64* inttoptr (i64 154899 to i64*), align 8
  store i64 %v0_25d0c, i64* @rdi, align 8
  %v3_25d13 = call i128 @__asm_movsd(i64 %v1_25d02)
  store i128 %v3_25d13, i128* %xmm1.global-to-local, align 8
  %v4_25d18 = call i128 @__asm_movsd(i64 %v1_25cfc)
  %v1_25d1e = icmp eq i64 %v0_25d0c, 0
  br i1 %v1_25d1e, label %bb, label %dec_label_pc_25d27

bb:                                               ; preds = %dec_label_pc_25ce0
  %v1_25d21 = call i64 @function_25e20()
  store i64 %v1_25d21, i64* @rax, align 8
  br label %dec_label_pc_25d27

dec_label_pc_25d27:                               ; preds = %bb, %dec_label_pc_25ce0
  store i64 154935, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_25d39 = call i64 @__asm_movsd.7465(i128 %v4_25d18)
  %v4_25d39 = load i64, i64* @rax, align 8
  ret i64 %v4_25d39
}

define i64 @function_25e10() local_unnamed_addr {
dec_label_pc_25e10:
  %v0_25e15 = load i64, i64* @rax, align 8
  ret i64 %v0_25e15
}

define i64 @function_25e20() local_unnamed_addr {
dec_label_pc_25e20:
  %v0_25e25 = load i64, i64* @rax, align 8
  ret i64 %v0_25e25
}

define i64 @function_25e30() local_unnamed_addr {
dec_label_pc_25e30:
  store i64 155191, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25e3e() local_unnamed_addr {
dec_label_pc_25e3e:
  store i64 155205, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25e64() local_unnamed_addr {
dec_label_pc_25e64:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_25e64 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_25e64 = load i64, i64* inttoptr (i64 155244 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25e64, i64 %v1_25e64)
  store i64 155263, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25e95() local_unnamed_addr {
dec_label_pc_25e95:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm225LuaTable$NumberValueEntry5valueEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_25ea0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25ea8 = load i64, i64* @rdi, align 8
  %v1_25ea8 = add i64 %v0_25ea8, 8
  %v2_25ea8 = inttoptr i64 %v1_25ea8 to i64*
  %v3_25ea8 = load i64, i64* %v2_25ea8, align 8
  %v4_25ea8 = call i128 @__asm_movsd(i64 %v3_25ea8)
  store i64 155316, i64* @rdi, align 8
  %v1_25eb4 = call i64 @__asm_movsd.7465(i128 %v4_25ea8)
  %v5_25eb4 = load i64, i64* @rax, align 8
  ret i64 %v5_25eb4
}

define i64 @function_25f60() local_unnamed_addr {
dec_label_pc_25f60:
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_25f65 = load i128, i128* @xmm1, align 8
  %v1_25f65 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_25f65, i128 %v1_25f65)
  %v0_25f69 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_25f69, label %bb, label %dec_label_pc_25f60.dec_label_pc_25f6b_crit_edge

dec_label_pc_25f60.dec_label_pc_25f6b_crit_edge:  ; preds = %dec_label_pc_25f60
  %v0_25f6b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_25f6b

bb:                                               ; preds = %dec_label_pc_25f60
  %v1_25f69 = call i64 @function_25f6d()
  store i64 %v1_25f69, i64* @rax, align 8
  br label %dec_label_pc_25f6b

dec_label_pc_25f6b:                               ; preds = %dec_label_pc_25f60.dec_label_pc_25f6b_crit_edge, %bb
  %v0_25f6b = phi i64 [ %v0_25f6b.pre, %dec_label_pc_25f60.dec_label_pc_25f6b_crit_edge ], [ %v1_25f69, %bb ]
  ret i64 %v0_25f6b
}

define i64 @function_25f6d() local_unnamed_addr {
dec_label_pc_25f6d:
  store i64 155508, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_25f76 = load i128, i128* @xmm1, align 8
  %v1_25f76 = call i64 @__asm_movsd.7465(i128 %v0_25f76)
  %v5_25f76 = load i64, i64* @rax, align 8
  ret i64 %v5_25f76
}

define i64 @function_25fa8() local_unnamed_addr {
dec_label_pc_25fa8:
  %v0_25fad = load i64, i64* @rax, align 8
  ret i64 %v0_25fad
}

define i64 @function_25fb0() local_unnamed_addr {
dec_label_pc_25fb0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_25fbe() local_unnamed_addr {
dec_label_pc_25fbe:
  store i64 155589, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_25fe4() local_unnamed_addr {
dec_label_pc_25fe4:
  %pf.global-to-local = alloca i1, align 1
  %v0_25fe4 = load i128, i128* @xmm1, align 8
  %v1_25fe4 = load i64, i64* inttoptr (i64 155628 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_25fe4, i64 %v1_25fe4)
  %v0_25fec = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_25fec, label %bb, label %dec_label_pc_25fe4.dec_label_pc_25ff2_crit_edge

dec_label_pc_25fe4.dec_label_pc_25ff2_crit_edge:  ; preds = %dec_label_pc_25fe4
  %v2_25fec.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_25ff2

bb:                                               ; preds = %dec_label_pc_25fe4
  %v1_25fec = call i64 @function_25f6d()
  store i64 %v1_25fec, i64* @rax, align 8
  br label %dec_label_pc_25ff2

dec_label_pc_25ff2:                               ; preds = %dec_label_pc_25fe4.dec_label_pc_25ff2_crit_edge, %bb
  %v2_25fec = phi i64 [ %v2_25fec.pre, %dec_label_pc_25fe4.dec_label_pc_25ff2_crit_edge ], [ %v1_25fec, %bb ]
  ret i64 %v2_25fec
}

define i64 @function_25ff7() local_unnamed_addr {
dec_label_pc_25ff7:
  %v0_25ff7 = load i64, i64* @rax, align 8
  %v1_25ff7 = add i64 %v0_25ff7, -115
  %v2_25ff7 = inttoptr i64 %v1_25ff7 to i32*
  %v3_25ff7 = load i32, i32* %v2_25ff7, align 4
  %v4_25ff7 = add i32 %v3_25ff7, -1
  store i32 %v4_25ff7, i32* %v2_25ff7, align 4
  store i64 0, i64* @rax, align 8
  store i64 256, i64* @rdx, align 8
  store i64 256, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_26015() local_unnamed_addr {
dec_label_pc_26015:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble7powWithEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26020:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_26020 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_26020 = call i128 @__asm_pxor(i128 %v0_26020, i128 %v0_26020)
  store i128 %v2_26020, i128* %xmm0.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_26028 = trunc i64 %arg2 to i32
  %v2_26028 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_26028)
  store i128 %v2_26028, i128* %xmm0.global-to-local, align 8
  %v0_26030 = load i64, i64* @rdi, align 8
  %v1_26030 = add i64 %v0_26030, 8
  %v2_26030 = inttoptr i64 %v1_26030 to i64*
  %v3_26030 = load i64, i64* %v2_26030, align 8
  %v4_26030 = call i128 @__asm_movsd(i64 %v3_26030)
  store i64 155708, i64* @rdi, align 8
  %v1_2603c = call i64 @__asm_movsd.7465(i128 %v4_26030)
  %v1_26041 = call i64 @__asm_movsd.7465(i128 %v2_26028)
  %v0_2604c = load i64, i64* inttoptr (i64 155731 to i64*), align 8
  store i64 %v0_2604c, i64* @rdi, align 8
  %v3_26053 = call i128 @__asm_movsd(i64 %v1_2603c)
  %v4_26058 = call i128 @__asm_movsd(i64 %v1_26041)
  store i128 %v4_26058, i128* %xmm0.global-to-local, align 8
  %v1_2605e = icmp eq i64 %v0_2604c, 0
  br i1 %v1_2605e, label %bb, label %dec_label_pc_26067

bb:                                               ; preds = %dec_label_pc_26020
  %v1_26061 = call i64 @function_26160()
  store i64 %v1_26061, i64* @rax, align 8
  br label %dec_label_pc_26067

dec_label_pc_26067:                               ; preds = %bb, %dec_label_pc_26020
  store i64 155767, i64* @rdi, align 8
  store i1 false, i1* @cf, align 1
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rax, align 8
  %v1_26079 = call i64 @__asm_movsd.7465(i128 %v4_26058)
  %v0_26083 = load i64, i64* inttoptr (i64 155787 to i64*), align 8
  %v1_26083 = call i128 @__asm_movsd(i64 %v0_26083)
  store i128 %v1_26083, i128* @xmm1, align 8
  %v3_2608b = call i128 @__asm_movsd(i64 %v1_26079)
  store i128 %v3_2608b, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v3_2608b, i128 %v1_26083)
  %v0_26094 = load i1, i1* @cf, align 1
  %v1_26094 = icmp eq i1 %v0_26094, false
  br i1 %v1_26094, label %bb260, label %dec_label_pc_26096

bb260:                                            ; preds = %dec_label_pc_26067
  %v2_26094 = call i64 @function_26110()
  store i64 %v2_26094, i64* @rax, align 8
  br label %dec_label_pc_26096

dec_label_pc_26096:                               ; preds = %bb260, %dec_label_pc_26067
  %v0_26096 = load i64, i64* inttoptr (i64 155806 to i64*), align 8
  %v1_26096 = call i128 @__asm_movsd(i64 %v0_26096)
  call void @__asm_ucomisd(i128 %v1_26096, i128 %v3_2608b)
  %v0_260a2 = load i1, i1* @cf, align 1
  %v1_260a2 = icmp eq i1 %v0_260a2, false
  br i1 %v1_260a2, label %bb261, label %dec_label_pc_260a8

bb261:                                            ; preds = %dec_label_pc_26096
  %v2_260a2 = call i64 @function_26150()
  store i64 %v2_260a2, i64* @rax, align 8
  br label %dec_label_pc_260a8

dec_label_pc_260a8:                               ; preds = %bb261, %dec_label_pc_26096
  call void @__asm_ucomisd(i128 %v3_2608b, i128 %v3_2608b)
  %v0_260ac = load i1, i1* @pf, align 1
  br i1 %v0_260ac, label %bb262, label %dec_label_pc_260b2

bb262:                                            ; preds = %dec_label_pc_260a8
  %v1_260ac = call i64 @function_261a4()
  store i64 %v1_260ac, i64* @rax, align 8
  br label %dec_label_pc_260b2

dec_label_pc_260b2:                               ; preds = %bb262, %dec_label_pc_260a8
  %v1_260b2 = call i32 @__asm_cvttsd2si(i128 %v3_2608b)
  %v2_260b6 = call i128 @__asm_pxor(i128 %v1_26096, i128 %v1_26096)
  %v3_260ba = call i128 @__asm_cvtsi2sd.7468(i32 %v1_260b2)
  call void @__asm_ucomisd(i128 %v3_2608b, i128 %v3_260ba)
  %v0_260c2 = load i1, i1* @pf, align 1
  br i1 %v0_260c2, label %bb263, label %dec_label_pc_260c4

bb263:                                            ; preds = %dec_label_pc_260b2
  %v1_260c2 = call i64 @function_2611d()
  store i64 %v1_260c2, i64* @rax, align 8
  br label %dec_label_pc_260c4

dec_label_pc_260c4:                               ; preds = %bb263, %dec_label_pc_260b2
  %v0_260c4 = load i1, i1* @zf, align 1
  %v1_260c4 = icmp eq i1 %v0_260c4, false
  br i1 %v1_260c4, label %bb264, label %dec_label_pc_260c6

bb264:                                            ; preds = %dec_label_pc_260c4
  %v2_260c4 = call i64 @function_2611d()
  store i64 %v2_260c4, i64* @rax, align 8
  br label %dec_label_pc_260c6

dec_label_pc_260c6:                               ; preds = %bb264, %dec_label_pc_260c4
  store i64 155853, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_26110() local_unnamed_addr {
dec_label_pc_26110:
  %v0_26115 = load i128, i128* @xmm0, align 8
  %v1_26115 = load i128, i128* @xmm1, align 8
  call void @__asm_ucomisd(i128 %v0_26115, i128 %v1_26115)
  %v0_26119 = load i1, i1* @pf, align 1
  br i1 %v0_26119, label %bb, label %dec_label_pc_26110.dec_label_pc_2611b_crit_edge

dec_label_pc_26110.dec_label_pc_2611b_crit_edge:  ; preds = %dec_label_pc_26110
  %v0_2611b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2611b

bb:                                               ; preds = %dec_label_pc_26110
  %v1_26119 = call i64 @function_2611d()
  store i64 %v1_26119, i64* @rax, align 8
  br label %dec_label_pc_2611b

dec_label_pc_2611b:                               ; preds = %dec_label_pc_26110.dec_label_pc_2611b_crit_edge, %bb
  %v0_2611b = phi i64 [ %v0_2611b.pre, %dec_label_pc_26110.dec_label_pc_2611b_crit_edge ], [ %v1_26119, %bb ]
  ret i64 %v0_2611b
}

define i64 @function_2611d() local_unnamed_addr {
dec_label_pc_2611d:
  store i64 155940, i64* @rdi, align 8
  store i1 false, i1* @cf, align 1
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rax, align 8
  %v0_26126 = load i128, i128* @xmm0, align 8
  %v1_26126 = call i64 @__asm_movsd.7465(i128 %v0_26126)
  %v4_26126 = load i64, i64* @rax, align 8
  ret i64 %v4_26126
}

define i64 @function_26150() local_unnamed_addr {
dec_label_pc_26150:
  %v0_26155 = load i64, i64* @rax, align 8
  ret i64 %v0_26155
}

define i64 @function_26160() local_unnamed_addr {
dec_label_pc_26160:
  %v0_26165 = load i64, i64* @rax, align 8
  ret i64 %v0_26165
}

define i64 @function_26170() local_unnamed_addr {
dec_label_pc_26170:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2617e() local_unnamed_addr {
dec_label_pc_2617e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_261a4() local_unnamed_addr {
dec_label_pc_261a4:
  %v0_261a4 = load i128, i128* @xmm0, align 8
  %v1_261a4 = load i64, i64* inttoptr (i64 156076 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_261a4, i64 %v1_261a4)
  %v0_261ac = load i1, i1* @pf, align 1
  br i1 %v0_261ac, label %bb, label %dec_label_pc_261a4.dec_label_pc_261b2_crit_edge

dec_label_pc_261a4.dec_label_pc_261b2_crit_edge:  ; preds = %dec_label_pc_261a4
  %v2_261ac.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_261b2

bb:                                               ; preds = %dec_label_pc_261a4
  %v1_261ac = call i64 @function_2611d()
  store i64 %v1_261ac, i64* @rax, align 8
  br label %dec_label_pc_261b2

dec_label_pc_261b2:                               ; preds = %dec_label_pc_261a4.dec_label_pc_261b2_crit_edge, %bb
  %v2_261ac = phi i64 [ %v2_261ac.pre, %dec_label_pc_261a4.dec_label_pc_261b2_crit_edge ], [ %v1_261ac, %bb ]
  ret i64 %v2_261ac
}

define i64 @function_261d5() local_unnamed_addr {
dec_label_pc_261d5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger3powEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_261e0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_261e8 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_261e8 = call i64 @__asm_movsd.7465(i128 %v0_261e8)
  %v2_261ee = call i128 @__asm_pxor(i128 %v0_261e8, i128 %v0_261e8)
  store i128 %v2_261ee, i128* %xmm0.global-to-local, align 8
  %v0_261f2 = load i64, i64* @rdi, align 8
  %v1_261f2 = add i64 %v0_261f2, 8
  %v2_261f2 = inttoptr i64 %v1_261f2 to i32*
  %v3_261f2 = load i32, i32* %v2_261f2, align 4
  %v4_261f2 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_261f2)
  store i128 %v4_261f2, i128* %xmm0.global-to-local, align 8
  store i64 156158, i64* @rdi, align 8
  %v1_261fe = call i64 @__asm_movsd.7465(i128 %v4_261f2)
  %v4_261fe = load i64, i64* @rax, align 8
  ret i64 %v4_261fe
}

define i64 @function_262d0() local_unnamed_addr {
dec_label_pc_262d0:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_262d5 = load i128, i128* @xmm0, align 8
  %v1_262d5 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_262d5, i128 %v1_262d5)
  %v0_262d9 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_262d9, label %bb, label %dec_label_pc_262d0.dec_label_pc_262db_crit_edge

dec_label_pc_262d0.dec_label_pc_262db_crit_edge:  ; preds = %dec_label_pc_262d0
  %v0_262db.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_262db

bb:                                               ; preds = %dec_label_pc_262d0
  %v1_262d9 = call i64 @function_262dd()
  store i64 %v1_262d9, i64* @rax, align 8
  br label %dec_label_pc_262db

dec_label_pc_262db:                               ; preds = %dec_label_pc_262d0.dec_label_pc_262db_crit_edge, %bb
  %v0_262db = phi i64 [ %v0_262db.pre, %dec_label_pc_262d0.dec_label_pc_262db_crit_edge ], [ %v1_262d9, %bb ]
  ret i64 %v0_262db
}

define i64 @function_262dd() local_unnamed_addr {
dec_label_pc_262dd:
  store i64 156388, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_262e6 = load i128, i128* @xmm0, align 8
  %v1_262e6 = call i64 @__asm_movsd.7465(i128 %v0_262e6)
  %v4_262e6 = load i64, i64* @rax, align 8
  ret i64 %v4_262e6
}

define i64 @function_26310() local_unnamed_addr {
dec_label_pc_26310:
  %v0_26315 = load i64, i64* @rax, align 8
  ret i64 %v0_26315
}

define i64 @function_26320() local_unnamed_addr {
dec_label_pc_26320:
  %v0_26325 = load i64, i64* @rax, align 8
  ret i64 %v0_26325
}

define i64 @function_26330() local_unnamed_addr {
dec_label_pc_26330:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2633e() local_unnamed_addr {
dec_label_pc_2633e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_26364() local_unnamed_addr {
dec_label_pc_26364:
  %pf.global-to-local = alloca i1, align 1
  %v0_26364 = load i128, i128* @xmm0, align 8
  %v1_26364 = load i64, i64* inttoptr (i64 156524 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_26364, i64 %v1_26364)
  %v0_2636c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2636c, label %bb, label %dec_label_pc_26364.dec_label_pc_26372_crit_edge

dec_label_pc_26364.dec_label_pc_26372_crit_edge:  ; preds = %dec_label_pc_26364
  %v2_2636c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26372

bb:                                               ; preds = %dec_label_pc_26364
  %v1_2636c = call i64 @function_262dd()
  store i64 %v1_2636c, i64* @rax, align 8
  br label %dec_label_pc_26372

dec_label_pc_26372:                               ; preds = %dec_label_pc_26364.dec_label_pc_26372_crit_edge, %bb
  %v2_2636c = phi i64 [ %v2_2636c.pre, %dec_label_pc_26364.dec_label_pc_26372_crit_edge ], [ %v1_2636c, %bb ]
  ret i64 %v2_2636c
}

define i64 @function_26395() local_unnamed_addr {
dec_label_pc_26395:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger7subFromEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_263a0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_263a1 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_263a1 = call i128 @__asm_pxor(i128 %v0_263a1, i128 %v0_263a1)
  store i128 %v2_263a1, i128* %xmm1.global-to-local, align 8
  %v0_263a5 = load i64, i64* @rbx, align 8
  store i64 %v0_263a5, i64* %stack_var_-16, align 8
  %v4_263a5 = ptrtoint i64* %stack_var_-16 to i64
  store i64 0, i64* @rax, align 8
  %v1_263a8 = add i64 %v4_263a5, -24
  %v5_263a8 = icmp ult i64* %stack_var_-16, inttoptr (i64 24 to i64*)
  store i1 %v5_263a8, i1* @cf, align 1
  %v10_263a8 = icmp eq i64 %v1_263a8, 0
  store i1 %v10_263a8, i1* @zf, align 1
  %v12_263a8 = trunc i64 %v1_263a8 to i8
  %v13_263a8 = call i8 @llvm.ctpop.i8(i8 %v12_263a8)
  %v14_263a8 = urem i8 %v13_263a8, 2
  %v15_263a8 = icmp eq i8 %v14_263a8, 0
  store i1 %v15_263a8, i1* @pf, align 1
  %v0_263ac = load i64, i64* @rdi, align 8
  %v1_263ac = add i64 %v0_263ac, 8
  %v2_263ac = inttoptr i64 %v1_263ac to i32*
  %v3_263ac = load i32, i32* %v2_263ac, align 4
  %v4_263ac = call i128 @__asm_cvtsi2sd.7468(i32 %v3_263ac)
  store i128 %v4_263ac, i128* %xmm1.global-to-local, align 8
  %v0_263b1 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_263b1 = call i128 @__asm_subsd(i128 %v0_263b1, i128 %v4_263ac)
  store i128 %v2_263b1, i128* %xmm0.global-to-local, align 8
  store i64 156604, i64* @rdi, align 8
  %v1_263bc = call i64 @__asm_movsd.7465(i128 %v2_263b1)
  %v0_263c7 = load i64, i64* inttoptr (i64 156623 to i64*), align 8
  %v1_263c7 = call i128 @__asm_movsd(i64 %v0_263c7)
  store i128 %v1_263c7, i128* @xmm1, align 8
  %v4_263cf = call i128 @__asm_movsd(i64 %v1_263bc)
  store i128 %v4_263cf, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v4_263cf, i128 %v1_263c7)
  %v0_263d9 = load i1, i1* @cf, align 1
  %v1_263d9 = icmp eq i1 %v0_263d9, false
  br i1 %v1_263d9, label %bb, label %dec_label_pc_263db

bb:                                               ; preds = %dec_label_pc_263a0
  %v2_263d9 = call i64 @function_26458()
  store i64 %v2_263d9, i64* @rax, align 8
  br label %dec_label_pc_263db

dec_label_pc_263db:                               ; preds = %bb, %dec_label_pc_263a0
  %v0_263db = load i64, i64* inttoptr (i64 156643 to i64*), align 8
  %v1_263db = call i128 @__asm_movsd(i64 %v0_263db)
  store i128 %v1_263db, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_263db, i128 %v4_263cf)
  %v0_263e7 = load i1, i1* @cf, align 1
  %v1_263e7 = icmp eq i1 %v0_263e7, false
  br i1 %v1_263e7, label %bb256, label %dec_label_pc_263ed

bb256:                                            ; preds = %dec_label_pc_263db
  %v2_263e7 = call i64 @function_264a0()
  store i64 %v2_263e7, i64* @rax, align 8
  br label %dec_label_pc_263ed

dec_label_pc_263ed:                               ; preds = %bb256, %dec_label_pc_263db
  call void @__asm_ucomisd(i128 %v4_263cf, i128 %v4_263cf)
  %v0_263f1 = load i1, i1* @pf, align 1
  br i1 %v0_263f1, label %bb257, label %dec_label_pc_263f7

bb257:                                            ; preds = %dec_label_pc_263ed
  %v1_263f1 = call i64 @function_264e4()
  store i64 %v1_263f1, i64* @rax, align 8
  br label %dec_label_pc_263f7

dec_label_pc_263f7:                               ; preds = %bb257, %dec_label_pc_263ed
  %v1_263f7 = call i32 @__asm_cvttsd2si(i128 %v4_263cf)
  %v2_263fb = call i128 @__asm_pxor(i128 %v1_263db, i128 %v1_263db)
  store i128 %v2_263fb, i128* %xmm1.global-to-local, align 8
  %v3_263ff = call i128 @__asm_cvtsi2sd.7468(i32 %v1_263f7)
  store i128 %v3_263ff, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_263cf, i128 %v3_263ff)
  %v0_26407 = load i1, i1* @pf, align 1
  br i1 %v0_26407, label %bb258, label %dec_label_pc_26409

bb258:                                            ; preds = %dec_label_pc_263f7
  %v1_26407 = call i64 @function_26465()
  store i64 %v1_26407, i64* @rax, align 8
  br label %dec_label_pc_26409

dec_label_pc_26409:                               ; preds = %bb258, %dec_label_pc_263f7
  %v0_26409 = load i1, i1* @zf, align 1
  %v1_26409 = icmp eq i1 %v0_26409, false
  br i1 %v1_26409, label %bb259, label %dec_label_pc_2640b

bb259:                                            ; preds = %dec_label_pc_26409
  %v2_26409 = call i64 @function_26465()
  store i64 %v2_26409, i64* @rax, align 8
  br label %dec_label_pc_2640b

dec_label_pc_2640b:                               ; preds = %bb259, %dec_label_pc_26409
  store i64 156690, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_26458() local_unnamed_addr {
dec_label_pc_26458:
  %v0_2645d = load i128, i128* @xmm0, align 8
  %v1_2645d = load i128, i128* @xmm1, align 8
  call void @__asm_ucomisd(i128 %v0_2645d, i128 %v1_2645d)
  %v0_26461 = load i1, i1* @pf, align 1
  br i1 %v0_26461, label %bb, label %dec_label_pc_26458.dec_label_pc_26463_crit_edge

dec_label_pc_26458.dec_label_pc_26463_crit_edge:  ; preds = %dec_label_pc_26458
  %v0_26463.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26463

bb:                                               ; preds = %dec_label_pc_26458
  %v1_26461 = call i64 @function_26465()
  store i64 %v1_26461, i64* @rax, align 8
  br label %dec_label_pc_26463

dec_label_pc_26463:                               ; preds = %dec_label_pc_26458.dec_label_pc_26463_crit_edge, %bb
  %v0_26463 = phi i64 [ %v0_26463.pre, %dec_label_pc_26458.dec_label_pc_26463_crit_edge ], [ %v1_26461, %bb ]
  ret i64 %v0_26463
}

define i64 @function_26465() local_unnamed_addr {
dec_label_pc_26465:
  store i64 156780, i64* @rdi, align 8
  store i1 false, i1* @cf, align 1
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rax, align 8
  %v0_2646e = load i128, i128* @xmm0, align 8
  %v1_2646e = call i64 @__asm_movsd.7465(i128 %v0_2646e)
  %v5_2646e = load i64, i64* @rax, align 8
  ret i64 %v5_2646e
}

define i64 @function_264a0() local_unnamed_addr {
dec_label_pc_264a0:
  %v0_264a5 = load i64, i64* @rax, align 8
  ret i64 %v0_264a5
}

define i64 @function_264b0() local_unnamed_addr {
dec_label_pc_264b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_264be() local_unnamed_addr {
dec_label_pc_264be:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_264e4() local_unnamed_addr {
dec_label_pc_264e4:
  %v0_264e4 = load i128, i128* @xmm0, align 8
  %v1_264e4 = load i64, i64* inttoptr (i64 156908 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_264e4, i64 %v1_264e4)
  %v0_264ec = load i1, i1* @pf, align 1
  br i1 %v0_264ec, label %bb, label %dec_label_pc_264e4.dec_label_pc_264f2_crit_edge

dec_label_pc_264e4.dec_label_pc_264f2_crit_edge:  ; preds = %dec_label_pc_264e4
  %v2_264ec.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_264f2

bb:                                               ; preds = %dec_label_pc_264e4
  %v1_264ec = call i64 @function_26465()
  store i64 %v1_264ec, i64* @rax, align 8
  br label %dec_label_pc_264f2

dec_label_pc_264f2:                               ; preds = %dec_label_pc_264e4.dec_label_pc_264f2_crit_edge, %bb
  %v2_264ec = phi i64 [ %v2_264ec.pre, %dec_label_pc_264e4.dec_label_pc_264f2_crit_edge ], [ %v1_264ec, %bb ]
  ret i64 %v2_264ec
}

define i64 @function_26515() local_unnamed_addr {
dec_label_pc_26515:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3mulEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26520:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_26520 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_26520 = call i128 @__asm_pxor(i128 %v0_26520, i128 %v0_26520)
  store i128 %v2_26520, i128* %xmm0.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_26528 = trunc i64 %arg2 to i32
  %v2_26528 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_26528)
  store i128 %v2_26528, i128* %xmm0.global-to-local, align 8
  %v1_26530 = load i64, i64* @rdi, align 8
  %v2_26530 = add i64 %v1_26530, 8
  %v3_26530 = inttoptr i64 %v2_26530 to i64*
  %v4_26530 = load i64, i64* %v3_26530, align 8
  %v5_26530 = call i128 @__asm_mulsd.7466(i128 %v2_26528, i64 %v4_26530)
  store i128 %v5_26530, i128* %xmm0.global-to-local, align 8
  store i64 156988, i64* @rdi, align 8
  %v1_2653c = call i64 @__asm_movsd.7465(i128 %v5_26530)
  %v5_2653c = load i64, i64* @rax, align 8
  ret i64 %v5_2653c
}

define i64 @function_265d8() local_unnamed_addr {
dec_label_pc_265d8:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_265dd = load i128, i128* @xmm0, align 8
  %v1_265dd = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_265dd, i128 %v1_265dd)
  %v0_265e1 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_265e1, label %bb, label %dec_label_pc_265d8.dec_label_pc_265e3_crit_edge

dec_label_pc_265d8.dec_label_pc_265e3_crit_edge:  ; preds = %dec_label_pc_265d8
  %v0_265e3.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_265e3

bb:                                               ; preds = %dec_label_pc_265d8
  %v1_265e1 = call i64 @function_265e5()
  store i64 %v1_265e1, i64* @rax, align 8
  br label %dec_label_pc_265e3

dec_label_pc_265e3:                               ; preds = %dec_label_pc_265d8.dec_label_pc_265e3_crit_edge, %bb
  %v0_265e3 = phi i64 [ %v0_265e3.pre, %dec_label_pc_265d8.dec_label_pc_265e3_crit_edge ], [ %v1_265e1, %bb ]
  ret i64 %v0_265e3
}

define i64 @function_265e5() local_unnamed_addr {
dec_label_pc_265e5:
  store i64 157164, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_265ee = load i128, i128* @xmm0, align 8
  %v1_265ee = call i64 @__asm_movsd.7465(i128 %v0_265ee)
  %v5_265ee = load i64, i64* @rax, align 8
  ret i64 %v5_265ee
}

define i64 @function_26620() local_unnamed_addr {
dec_label_pc_26620:
  %v0_26625 = load i64, i64* @rax, align 8
  ret i64 %v0_26625
}

define i64 @function_26630() local_unnamed_addr {
dec_label_pc_26630:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2663e() local_unnamed_addr {
dec_label_pc_2663e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_26664() local_unnamed_addr {
dec_label_pc_26664:
  %pf.global-to-local = alloca i1, align 1
  %v0_26664 = load i128, i128* @xmm0, align 8
  %v1_26664 = load i64, i64* inttoptr (i64 157292 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_26664, i64 %v1_26664)
  %v0_2666c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2666c, label %bb, label %dec_label_pc_26664.dec_label_pc_26672_crit_edge

dec_label_pc_26664.dec_label_pc_26672_crit_edge:  ; preds = %dec_label_pc_26664
  %v2_2666c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26672

bb:                                               ; preds = %dec_label_pc_26664
  %v1_2666c = call i64 @function_265e5()
  store i64 %v1_2666c, i64* @rax, align 8
  br label %dec_label_pc_26672

dec_label_pc_26672:                               ; preds = %dec_label_pc_26664.dec_label_pc_26672_crit_edge, %bb
  %v2_2666c = phi i64 [ %v2_2666c.pre, %dec_label_pc_26664.dec_label_pc_26672_crit_edge ], [ %v1_2666c, %bb ]
  ret i64 %v2_2666c
}

define i64 @function_26695() local_unnamed_addr {
dec_label_pc_26695:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger3mulEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_266a0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_266a1 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_266a1 = call i128 @__asm_pxor(i128 %v0_266a1, i128 %v0_266a1)
  store i128 %v2_266a1, i128* %xmm1.global-to-local, align 8
  %v0_266a5 = load i64, i64* @rbx, align 8
  store i64 %v0_266a5, i64* %stack_var_-16, align 8
  %v4_266a5 = ptrtoint i64* %stack_var_-16 to i64
  store i64 0, i64* @rax, align 8
  %v1_266a8 = add i64 %v4_266a5, -24
  %v5_266a8 = icmp ult i64* %stack_var_-16, inttoptr (i64 24 to i64*)
  store i1 %v5_266a8, i1* @cf, align 1
  %v10_266a8 = icmp eq i64 %v1_266a8, 0
  store i1 %v10_266a8, i1* @zf, align 1
  %v12_266a8 = trunc i64 %v1_266a8 to i8
  %v13_266a8 = call i8 @llvm.ctpop.i8(i8 %v12_266a8)
  %v14_266a8 = urem i8 %v13_266a8, 2
  %v15_266a8 = icmp eq i8 %v14_266a8, 0
  store i1 %v15_266a8, i1* @pf, align 1
  %v0_266ac = load i64, i64* @rdi, align 8
  %v1_266ac = add i64 %v0_266ac, 8
  %v2_266ac = inttoptr i64 %v1_266ac to i32*
  %v3_266ac = load i32, i32* %v2_266ac, align 4
  %v4_266ac = call i128 @__asm_cvtsi2sd.7468(i32 %v3_266ac)
  store i128 %v4_266ac, i128* %xmm1.global-to-local, align 8
  %v0_266b1 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_266b1 = call i128 @__asm_mulsd(i128 %v0_266b1, i128 %v4_266ac)
  store i128 %v2_266b1, i128* %xmm0.global-to-local, align 8
  store i64 157372, i64* @rdi, align 8
  %v1_266bc = call i64 @__asm_movsd.7465(i128 %v2_266b1)
  %v0_266c7 = load i64, i64* inttoptr (i64 157391 to i64*), align 8
  %v1_266c7 = call i128 @__asm_movsd(i64 %v0_266c7)
  store i128 %v1_266c7, i128* @xmm1, align 8
  %v4_266cf = call i128 @__asm_movsd(i64 %v1_266bc)
  store i128 %v4_266cf, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v4_266cf, i128 %v1_266c7)
  %v0_266d9 = load i1, i1* @cf, align 1
  %v1_266d9 = icmp eq i1 %v0_266d9, false
  br i1 %v1_266d9, label %bb, label %dec_label_pc_266db

bb:                                               ; preds = %dec_label_pc_266a0
  %v2_266d9 = call i64 @function_26758()
  store i64 %v2_266d9, i64* @rax, align 8
  br label %dec_label_pc_266db

dec_label_pc_266db:                               ; preds = %bb, %dec_label_pc_266a0
  %v0_266db = load i64, i64* inttoptr (i64 157411 to i64*), align 8
  %v1_266db = call i128 @__asm_movsd(i64 %v0_266db)
  store i128 %v1_266db, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_266db, i128 %v4_266cf)
  %v0_266e7 = load i1, i1* @cf, align 1
  %v1_266e7 = icmp eq i1 %v0_266e7, false
  br i1 %v1_266e7, label %bb256, label %dec_label_pc_266ed

bb256:                                            ; preds = %dec_label_pc_266db
  %v2_266e7 = call i64 @function_267a0()
  store i64 %v2_266e7, i64* @rax, align 8
  br label %dec_label_pc_266ed

dec_label_pc_266ed:                               ; preds = %bb256, %dec_label_pc_266db
  call void @__asm_ucomisd(i128 %v4_266cf, i128 %v4_266cf)
  %v0_266f1 = load i1, i1* @pf, align 1
  br i1 %v0_266f1, label %bb257, label %dec_label_pc_266f7

bb257:                                            ; preds = %dec_label_pc_266ed
  %v1_266f1 = call i64 @function_267e4()
  store i64 %v1_266f1, i64* @rax, align 8
  br label %dec_label_pc_266f7

dec_label_pc_266f7:                               ; preds = %bb257, %dec_label_pc_266ed
  %v1_266f7 = call i32 @__asm_cvttsd2si(i128 %v4_266cf)
  %v2_266fb = call i128 @__asm_pxor(i128 %v1_266db, i128 %v1_266db)
  store i128 %v2_266fb, i128* %xmm1.global-to-local, align 8
  %v3_266ff = call i128 @__asm_cvtsi2sd.7468(i32 %v1_266f7)
  store i128 %v3_266ff, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_266cf, i128 %v3_266ff)
  %v0_26707 = load i1, i1* @pf, align 1
  br i1 %v0_26707, label %bb258, label %dec_label_pc_26709

bb258:                                            ; preds = %dec_label_pc_266f7
  %v1_26707 = call i64 @function_26765()
  store i64 %v1_26707, i64* @rax, align 8
  br label %dec_label_pc_26709

dec_label_pc_26709:                               ; preds = %bb258, %dec_label_pc_266f7
  %v0_26709 = load i1, i1* @zf, align 1
  %v1_26709 = icmp eq i1 %v0_26709, false
  br i1 %v1_26709, label %bb259, label %dec_label_pc_2670b

bb259:                                            ; preds = %dec_label_pc_26709
  %v2_26709 = call i64 @function_26765()
  store i64 %v2_26709, i64* @rax, align 8
  br label %dec_label_pc_2670b

dec_label_pc_2670b:                               ; preds = %bb259, %dec_label_pc_26709
  store i64 157458, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_26758() local_unnamed_addr {
dec_label_pc_26758:
  %v0_2675d = load i128, i128* @xmm0, align 8
  %v1_2675d = load i128, i128* @xmm1, align 8
  call void @__asm_ucomisd(i128 %v0_2675d, i128 %v1_2675d)
  %v0_26761 = load i1, i1* @pf, align 1
  br i1 %v0_26761, label %bb, label %dec_label_pc_26758.dec_label_pc_26763_crit_edge

dec_label_pc_26758.dec_label_pc_26763_crit_edge:  ; preds = %dec_label_pc_26758
  %v0_26763.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26763

bb:                                               ; preds = %dec_label_pc_26758
  %v1_26761 = call i64 @function_26765()
  store i64 %v1_26761, i64* @rax, align 8
  br label %dec_label_pc_26763

dec_label_pc_26763:                               ; preds = %dec_label_pc_26758.dec_label_pc_26763_crit_edge, %bb
  %v0_26763 = phi i64 [ %v0_26763.pre, %dec_label_pc_26758.dec_label_pc_26763_crit_edge ], [ %v1_26761, %bb ]
  ret i64 %v0_26763
}

define i64 @function_26765() local_unnamed_addr {
dec_label_pc_26765:
  store i64 157548, i64* @rdi, align 8
  store i1 false, i1* @cf, align 1
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rax, align 8
  %v0_2676e = load i128, i128* @xmm0, align 8
  %v1_2676e = call i64 @__asm_movsd.7465(i128 %v0_2676e)
  %v5_2676e = load i64, i64* @rax, align 8
  ret i64 %v5_2676e
}

define i64 @function_267a0() local_unnamed_addr {
dec_label_pc_267a0:
  %v0_267a5 = load i64, i64* @rax, align 8
  ret i64 %v0_267a5
}

define i64 @function_267b0() local_unnamed_addr {
dec_label_pc_267b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_267be() local_unnamed_addr {
dec_label_pc_267be:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_267e4() local_unnamed_addr {
dec_label_pc_267e4:
  %v0_267e4 = load i128, i128* @xmm0, align 8
  %v1_267e4 = load i64, i64* inttoptr (i64 157676 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_267e4, i64 %v1_267e4)
  %v0_267ec = load i1, i1* @pf, align 1
  br i1 %v0_267ec, label %bb, label %dec_label_pc_267e4.dec_label_pc_267f2_crit_edge

dec_label_pc_267e4.dec_label_pc_267f2_crit_edge:  ; preds = %dec_label_pc_267e4
  %v2_267ec.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_267f2

bb:                                               ; preds = %dec_label_pc_267e4
  %v1_267ec = call i64 @function_26765()
  store i64 %v1_267ec, i64* @rax, align 8
  br label %dec_label_pc_267f2

dec_label_pc_267f2:                               ; preds = %dec_label_pc_267e4.dec_label_pc_267f2_crit_edge, %bb
  %v2_267ec = phi i64 [ %v2_267ec.pre, %dec_label_pc_267e4.dec_label_pc_267f2_crit_edge ], [ %v1_267ec, %bb ]
  ret i64 %v2_267ec
}

define i64 @function_26815() local_unnamed_addr {
dec_label_pc_26815:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger3subEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_26820:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_26821 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_26821 = call i128 @__asm_pxor(i128 %v0_26821, i128 %v0_26821)
  store i128 %v2_26821, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_2682c = load i64, i64* @rdi, align 8
  %v1_2682c = add i64 %v0_2682c, 8
  %v2_2682c = inttoptr i64 %v1_2682c to i32*
  %v3_2682c = load i32, i32* %v2_2682c, align 4
  %v4_2682c = call i128 @__asm_cvtsi2sd.7468(i32 %v3_2682c)
  store i128 %v4_2682c, i128* %xmm1.global-to-local, align 8
  %v1_26831 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_26831 = call i128 @__asm_subsd(i128 %v4_2682c, i128 %v1_26831)
  store i128 %v2_26831, i128* %xmm1.global-to-local, align 8
  store i64 157756, i64* @rdi, align 8
  %v1_2683c = call i64 @__asm_movsd.7465(i128 %v2_26831)
  %v5_2683c = load i64, i64* @rax, align 8
  ret i64 %v5_2683c
}

define i64 @function_268d8() local_unnamed_addr {
dec_label_pc_268d8:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_268dd = load i128, i128* @xmm0, align 8
  %v1_268dd = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_268dd, i128 %v1_268dd)
  %v0_268e1 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_268e1, label %bb, label %dec_label_pc_268d8.dec_label_pc_268e3_crit_edge

dec_label_pc_268d8.dec_label_pc_268e3_crit_edge:  ; preds = %dec_label_pc_268d8
  %v0_268e3.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_268e3

bb:                                               ; preds = %dec_label_pc_268d8
  %v1_268e1 = call i64 @function_268e5()
  store i64 %v1_268e1, i64* @rax, align 8
  br label %dec_label_pc_268e3

dec_label_pc_268e3:                               ; preds = %dec_label_pc_268d8.dec_label_pc_268e3_crit_edge, %bb
  %v0_268e3 = phi i64 [ %v0_268e3.pre, %dec_label_pc_268d8.dec_label_pc_268e3_crit_edge ], [ %v1_268e1, %bb ]
  ret i64 %v0_268e3
}

define i64 @function_268e5() local_unnamed_addr {
dec_label_pc_268e5:
  store i64 157932, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_268ee = load i128, i128* @xmm0, align 8
  %v1_268ee = call i64 @__asm_movsd.7465(i128 %v0_268ee)
  %v5_268ee = load i64, i64* @rax, align 8
  ret i64 %v5_268ee
}

define i64 @function_26920() local_unnamed_addr {
dec_label_pc_26920:
  %v0_26925 = load i64, i64* @rax, align 8
  ret i64 %v0_26925
}

define i64 @function_26930() local_unnamed_addr {
dec_label_pc_26930:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2693e() local_unnamed_addr {
dec_label_pc_2693e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_26964() local_unnamed_addr {
dec_label_pc_26964:
  %pf.global-to-local = alloca i1, align 1
  %v0_26964 = load i128, i128* @xmm0, align 8
  %v1_26964 = load i64, i64* inttoptr (i64 158060 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_26964, i64 %v1_26964)
  %v0_2696c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2696c, label %bb, label %dec_label_pc_26964.dec_label_pc_26972_crit_edge

dec_label_pc_26964.dec_label_pc_26972_crit_edge:  ; preds = %dec_label_pc_26964
  %v2_2696c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26972

bb:                                               ; preds = %dec_label_pc_26964
  %v1_2696c = call i64 @function_268e5()
  store i64 %v1_2696c, i64* @rax, align 8
  br label %dec_label_pc_26972

dec_label_pc_26972:                               ; preds = %dec_label_pc_26964.dec_label_pc_26972_crit_edge, %bb
  %v2_2696c = phi i64 [ %v2_2696c.pre, %dec_label_pc_26964.dec_label_pc_26972_crit_edge ], [ %v1_2696c, %bb ]
  ret i64 %v2_2696c
}

define i64 @function_26995() local_unnamed_addr {
dec_label_pc_26995:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger3addEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_269a0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_269a1 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_269a1 = call i128 @__asm_pxor(i128 %v0_269a1, i128 %v0_269a1)
  store i128 %v2_269a1, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_269ac = load i64, i64* @rdi, align 8
  %v1_269ac = add i64 %v0_269ac, 8
  %v2_269ac = inttoptr i64 %v1_269ac to i32*
  %v3_269ac = load i32, i32* %v2_269ac, align 4
  %v4_269ac = call i128 @__asm_cvtsi2sd.7468(i32 %v3_269ac)
  store i128 %v4_269ac, i128* %xmm1.global-to-local, align 8
  %v0_269b1 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_269b1 = call i128 @__asm_addsd(i128 %v0_269b1, i128 %v4_269ac)
  store i128 %v2_269b1, i128* %xmm0.global-to-local, align 8
  store i64 158140, i64* @rdi, align 8
  %v1_269bc = call i64 @__asm_movsd.7465(i128 %v2_269b1)
  %v5_269bc = load i64, i64* @rax, align 8
  ret i64 %v5_269bc
}

define i64 @function_26a58() local_unnamed_addr {
dec_label_pc_26a58:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_26a5d = load i128, i128* @xmm0, align 8
  %v1_26a5d = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_26a5d, i128 %v1_26a5d)
  %v0_26a61 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_26a61, label %bb, label %dec_label_pc_26a58.dec_label_pc_26a63_crit_edge

dec_label_pc_26a58.dec_label_pc_26a63_crit_edge:  ; preds = %dec_label_pc_26a58
  %v0_26a63.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26a63

bb:                                               ; preds = %dec_label_pc_26a58
  %v1_26a61 = call i64 @function_26a65()
  store i64 %v1_26a61, i64* @rax, align 8
  br label %dec_label_pc_26a63

dec_label_pc_26a63:                               ; preds = %dec_label_pc_26a58.dec_label_pc_26a63_crit_edge, %bb
  %v0_26a63 = phi i64 [ %v0_26a63.pre, %dec_label_pc_26a58.dec_label_pc_26a63_crit_edge ], [ %v1_26a61, %bb ]
  ret i64 %v0_26a63
}

define i64 @function_26a65() local_unnamed_addr {
dec_label_pc_26a65:
  store i64 158316, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_26a6e = load i128, i128* @xmm0, align 8
  %v1_26a6e = call i64 @__asm_movsd.7465(i128 %v0_26a6e)
  %v5_26a6e = load i64, i64* @rax, align 8
  ret i64 %v5_26a6e
}

define i64 @function_26aa0() local_unnamed_addr {
dec_label_pc_26aa0:
  %v0_26aa5 = load i64, i64* @rax, align 8
  ret i64 %v0_26aa5
}

define i64 @function_26ab0() local_unnamed_addr {
dec_label_pc_26ab0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_26abe() local_unnamed_addr {
dec_label_pc_26abe:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_26ae4() local_unnamed_addr {
dec_label_pc_26ae4:
  %pf.global-to-local = alloca i1, align 1
  %v0_26ae4 = load i128, i128* @xmm0, align 8
  %v1_26ae4 = load i64, i64* inttoptr (i64 158444 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_26ae4, i64 %v1_26ae4)
  %v0_26aec = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_26aec, label %bb, label %dec_label_pc_26ae4.dec_label_pc_26af2_crit_edge

dec_label_pc_26ae4.dec_label_pc_26af2_crit_edge:  ; preds = %dec_label_pc_26ae4
  %v2_26aec.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26af2

bb:                                               ; preds = %dec_label_pc_26ae4
  %v1_26aec = call i64 @function_26a65()
  store i64 %v1_26aec, i64* @rax, align 8
  br label %dec_label_pc_26af2

dec_label_pc_26af2:                               ; preds = %dec_label_pc_26ae4.dec_label_pc_26af2_crit_edge, %bb
  %v2_26aec = phi i64 [ %v2_26aec.pre, %dec_label_pc_26ae4.dec_label_pc_26af2_crit_edge ], [ %v1_26aec, %bb ]
  ret i64 %v2_26aec
}

define i64 @function_26b15() local_unnamed_addr {
dec_label_pc_26b15:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3subEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26b20:
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_26b20 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_26b20 = call i128 @__asm_pxor(i128 %v0_26b20, i128 %v0_26b20)
  store i128 %v2_26b20, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_26b28 = trunc i64 %arg2 to i32
  %v2_26b28 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_26b28)
  store i128 %v2_26b28, i128* %xmm1.global-to-local, align 8
  %v0_26b2c = load i64, i64* @rsp, align 8
  %v1_26b2c = add i64 %v0_26b2c, -24
  %v5_26b2c = icmp ult i64 %v0_26b2c, 24
  store i1 %v5_26b2c, i1* @cf, align 1
  %v10_26b2c = icmp eq i64 %v1_26b2c, 0
  store i1 %v10_26b2c, i1* @zf, align 1
  %v12_26b2c = trunc i64 %v1_26b2c to i8
  %v13_26b2c = call i8 @llvm.ctpop.i8(i8 %v12_26b2c)
  %v14_26b2c = urem i8 %v13_26b2c, 2
  %v15_26b2c = icmp eq i8 %v14_26b2c, 0
  store i1 %v15_26b2c, i1* @pf, align 1
  %v0_26b30 = load i64, i64* @rdi, align 8
  %v1_26b30 = add i64 %v0_26b30, 8
  %v2_26b30 = inttoptr i64 %v1_26b30 to i64*
  %v3_26b30 = load i64, i64* %v2_26b30, align 8
  %v4_26b30 = call i128 @__asm_movsd(i64 %v3_26b30)
  store i64 158524, i64* @rdi, align 8
  %v2_26b3c = call i128 @__asm_subsd(i128 %v4_26b30, i128 %v2_26b28)
  %v1_26b40 = call i64 @__asm_movsd.7465(i128 %v2_26b3c)
  %v0_26b4b = load i64, i64* inttoptr (i64 158547 to i64*), align 8
  %v1_26b4b = call i128 @__asm_movsd(i64 %v0_26b4b)
  store i128 %v1_26b4b, i128* @xmm1, align 8
  %v4_26b53 = call i128 @__asm_movsd(i64 %v1_26b40)
  store i128 %v4_26b53, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v4_26b53, i128 %v1_26b4b)
  %v0_26b5d = load i1, i1* @cf, align 1
  %v1_26b5d = icmp eq i1 %v0_26b5d, false
  br i1 %v1_26b5d, label %bb, label %dec_label_pc_26b63

bb:                                               ; preds = %dec_label_pc_26b20
  %v2_26b5d = call i64 @function_26be0()
  store i64 %v2_26b5d, i64* @rax, align 8
  br label %dec_label_pc_26b63

dec_label_pc_26b63:                               ; preds = %bb, %dec_label_pc_26b20
  %v0_26b63 = load i64, i64* inttoptr (i64 158571 to i64*), align 8
  %v1_26b63 = call i128 @__asm_movsd(i64 %v0_26b63)
  store i128 %v1_26b63, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_26b63, i128 %v4_26b53)
  %v0_26b6f = load i1, i1* @cf, align 1
  %v1_26b6f = icmp eq i1 %v0_26b6f, false
  br i1 %v1_26b6f, label %bb258, label %dec_label_pc_26b75

bb258:                                            ; preds = %dec_label_pc_26b63
  %v2_26b6f = call i64 @function_26c28()
  store i64 %v2_26b6f, i64* @rax, align 8
  br label %dec_label_pc_26b75

dec_label_pc_26b75:                               ; preds = %bb258, %dec_label_pc_26b63
  call void @__asm_ucomisd(i128 %v4_26b53, i128 %v4_26b53)
  %v0_26b79 = load i1, i1* @pf, align 1
  br i1 %v0_26b79, label %bb259, label %dec_label_pc_26b7f

bb259:                                            ; preds = %dec_label_pc_26b75
  %v1_26b79 = call i64 @function_26c64()
  store i64 %v1_26b79, i64* @rax, align 8
  br label %dec_label_pc_26b7f

dec_label_pc_26b7f:                               ; preds = %bb259, %dec_label_pc_26b75
  %v1_26b7f = call i32 @__asm_cvttsd2si(i128 %v4_26b53)
  %v2_26b83 = call i128 @__asm_pxor(i128 %v1_26b63, i128 %v1_26b63)
  store i128 %v2_26b83, i128* %xmm1.global-to-local, align 8
  %v3_26b87 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_26b7f)
  store i128 %v3_26b87, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_26b53, i128 %v3_26b87)
  %v0_26b8f = load i1, i1* @pf, align 1
  br i1 %v0_26b8f, label %bb260, label %dec_label_pc_26b91

bb260:                                            ; preds = %dec_label_pc_26b7f
  %v1_26b8f = call i64 @function_26bed()
  store i64 %v1_26b8f, i64* @rax, align 8
  br label %dec_label_pc_26b91

dec_label_pc_26b91:                               ; preds = %bb260, %dec_label_pc_26b7f
  %v0_26b91 = load i1, i1* @zf, align 1
  %v1_26b91 = icmp eq i1 %v0_26b91, false
  br i1 %v1_26b91, label %bb261, label %dec_label_pc_26b93

bb261:                                            ; preds = %dec_label_pc_26b91
  %v2_26b91 = call i64 @function_26bed()
  store i64 %v2_26b91, i64* @rax, align 8
  br label %dec_label_pc_26b93

dec_label_pc_26b93:                               ; preds = %bb261, %dec_label_pc_26b91
  store i64 158618, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_26be0() local_unnamed_addr {
dec_label_pc_26be0:
  %v0_26be5 = load i128, i128* @xmm0, align 8
  %v1_26be5 = load i128, i128* @xmm1, align 8
  call void @__asm_ucomisd(i128 %v0_26be5, i128 %v1_26be5)
  %v0_26be9 = load i1, i1* @pf, align 1
  br i1 %v0_26be9, label %bb, label %dec_label_pc_26be0.dec_label_pc_26beb_crit_edge

dec_label_pc_26be0.dec_label_pc_26beb_crit_edge:  ; preds = %dec_label_pc_26be0
  %v0_26beb.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26beb

bb:                                               ; preds = %dec_label_pc_26be0
  %v1_26be9 = call i64 @function_26bed()
  store i64 %v1_26be9, i64* @rax, align 8
  br label %dec_label_pc_26beb

dec_label_pc_26beb:                               ; preds = %dec_label_pc_26be0.dec_label_pc_26beb_crit_edge, %bb
  %v0_26beb = phi i64 [ %v0_26beb.pre, %dec_label_pc_26be0.dec_label_pc_26beb_crit_edge ], [ %v1_26be9, %bb ]
  ret i64 %v0_26beb
}

define i64 @function_26bed() local_unnamed_addr {
dec_label_pc_26bed:
  store i64 158708, i64* @rdi, align 8
  store i1 false, i1* @cf, align 1
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rax, align 8
  %v0_26bf6 = load i128, i128* @xmm0, align 8
  %v1_26bf6 = call i64 @__asm_movsd.7465(i128 %v0_26bf6)
  %v5_26bf6 = load i64, i64* @rax, align 8
  ret i64 %v5_26bf6
}

define i64 @function_26c28() local_unnamed_addr {
dec_label_pc_26c28:
  %v0_26c2d = load i64, i64* @rax, align 8
  ret i64 %v0_26c2d
}

define i64 @function_26c30() local_unnamed_addr {
dec_label_pc_26c30:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_26c3e() local_unnamed_addr {
dec_label_pc_26c3e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_26c64() local_unnamed_addr {
dec_label_pc_26c64:
  %v0_26c64 = load i128, i128* @xmm0, align 8
  %v1_26c64 = load i64, i64* inttoptr (i64 158828 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_26c64, i64 %v1_26c64)
  %v0_26c6c = load i1, i1* @pf, align 1
  br i1 %v0_26c6c, label %bb, label %dec_label_pc_26c64.dec_label_pc_26c72_crit_edge

dec_label_pc_26c64.dec_label_pc_26c72_crit_edge:  ; preds = %dec_label_pc_26c64
  %v2_26c6c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26c72

bb:                                               ; preds = %dec_label_pc_26c64
  %v1_26c6c = call i64 @function_26bed()
  store i64 %v1_26c6c, i64* @rax, align 8
  br label %dec_label_pc_26c72

dec_label_pc_26c72:                               ; preds = %dec_label_pc_26c64.dec_label_pc_26c72_crit_edge, %bb
  %v2_26c6c = phi i64 [ %v2_26c6c.pre, %dec_label_pc_26c64.dec_label_pc_26c72_crit_edge ], [ %v1_26c6c, %bb ]
  ret i64 %v2_26c6c
}

define i64 @function_26c95() local_unnamed_addr {
dec_label_pc_26c95:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang16lang_luaj$78$0$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26ca0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_26ca0 = load i64, i64* %r12.global-to-local, align 8
  %v0_26ca2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_26ca3 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_26ca3, i64* %rbp.global-to-local, align 8
  %v0_26ca6 = load i64, i64* @rbx, align 8
  store i64 %v0_26ca6, i64* %stack_var_-24, align 8
  %v0_26caa = load i64, i64* @rdi, align 8
  store i64 %v0_26caa, i64* %r12.global-to-local, align 8
  store i64 %v0_26ca3, i64* @rbx, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_26ca3, i64* @rdi, align 8
  %v1_26ccd = add i64 %v0_26caa, 24
  %v2_26ccd = inttoptr i64 %v1_26ccd to i64*
  %v3_26ccd = load i64, i64* %v2_26ccd, align 8
  store i64 %v3_26ccd, i64* @rdi, align 8
  %v0_26cd2 = load i64, i64* inttoptr (i64 158937 to i64*), align 8
  store i64 %v0_26cd2, i64* %rsi.global-to-local, align 8
  %v1_26cd9 = inttoptr i64 %v3_26ccd to i64*
  %v2_26cd9 = load i64, i64* %v1_26cd9, align 8
  store i64 %v2_26cd9, i64* @rax, align 8
  %v4_26ce2 = trunc i64 %v2_26cd9 to i8
  %v5_26ce2 = icmp eq i8 %v4_26ce2, 0
  %v1_26ce4 = icmp eq i1 %v5_26ce2, false
  br i1 %v1_26ce4, label %bb, label %dec_label_pc_26ce6

bb:                                               ; preds = %dec_label_pc_26ca0
  %v5_26ce4 = call i64 @function_26d58(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_26ce4, i64* @rax, align 8
  %v0_26ce6.pre = load i64, i64* @r12, align 8
  %v0_26cfd.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_26ce6

dec_label_pc_26ce6:                               ; preds = %bb, %dec_label_pc_26ca0
  %v0_26d08 = phi i64 [ %v0_26cfd.pre, %bb ], [ %v0_26ca3, %dec_label_pc_26ca0 ]
  %v0_26d19 = phi i64 [ %v0_26ce6.pre, %bb ], [ %v0_26caa, %dec_label_pc_26ca0 ]
  %v1_26ce6 = add i64 %v0_26d19, 24
  %v2_26ce6 = inttoptr i64 %v1_26ce6 to i64*
  %v3_26ce6 = load i64, i64* %v2_26ce6, align 8
  store i64 %v3_26ce6, i64* @rdi, align 8
  %v0_26ceb = load i64, i64* inttoptr (i64 158962 to i64*), align 8
  store i64 %v0_26ceb, i64* %rsi.global-to-local, align 8
  %v1_26cf2 = inttoptr i64 %v3_26ce6 to i64*
  %v2_26cf2 = load i64, i64* %v1_26cf2, align 8
  store i64 %v2_26cf2, i64* @rdx, align 8
  store i64 %v0_26d08, i64* @rax, align 8
  %v4_26d00 = trunc i64 %v2_26cf2 to i8
  %v5_26d00 = icmp eq i8 %v4_26d00, 0
  br i1 %v5_26d00, label %dec_label_pc_26d10, label %dec_label_pc_26d04

dec_label_pc_26d04:                               ; preds = %dec_label_pc_26ce6
  %v2_26d04 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_26d04, i64* @rbx, align 8
  store i64 %v0_26ca2, i64* %rbp.global-to-local, align 8
  store i64 %v0_26ca0, i64* %r12.global-to-local, align 8
  ret i64 %v0_26d08

dec_label_pc_26d10:                               ; preds = %dec_label_pc_26ce6
  store i64 158999, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_26d19 = add i64 %v0_26d19, 32
  %v2_26d19 = inttoptr i64 %v1_26d19 to i64*
  %v3_26d19 = load i64, i64* %v2_26d19, align 8
  store i64 %v3_26d19, i64* %r12.global-to-local, align 8
  %v0_26d1e = load i64, i64* inttoptr (i64 159013 to i64*), align 8
  store i64 %v0_26d1e, i64* %rbp.global-to-local, align 8
  ret i64 0
}

define i64 @function_26d58(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_26d58:
  %v0_26d58 = load i64, i64* inttoptr (i64 159071 to i64*), align 8
  store i64 %v0_26d58, i64* @rdi, align 8
  %v1_26d62 = inttoptr i64 %v0_26d58 to i64*
  %v2_26d62 = load i64, i64* %v1_26d62, align 8
  store i64 %v2_26d62, i64* @rax, align 8
  %v1_26d72 = inttoptr i64 %v2_26d62 to i64*
  %v2_26d72 = load i64, i64* %v1_26d72, align 8
  store i64 %v2_26d72, i64* @rdx, align 8
  store i64 %v2_26d62, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* @r12, align 8
  ret i64 %v2_26d62
}

define i64 @_ZN3org4luaj3vm210LuaInteger3powEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26d90:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_26d90 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_26d90 = call i128 @__asm_pxor(i128 %v0_26d90, i128 %v0_26d90)
  store i128 %v2_26d90, i128* %xmm1.global-to-local, align 8
  %v0_26d95 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_26d95 = call i128 @__asm_pxor(i128 %v0_26d95, i128 %v0_26d95)
  store i128 %v2_26d95, i128* %xmm0.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_26d9c = trunc i64 %arg2 to i32
  %v2_26d9c = call i128 @__asm_cvtsi2sd.7468(i32 %v1_26d9c)
  store i128 %v2_26d9c, i128* %xmm1.global-to-local, align 8
  %v0_26da4 = load i64, i64* @rdi, align 8
  %v1_26da4 = add i64 %v0_26da4, 8
  %v2_26da4 = inttoptr i64 %v1_26da4 to i32*
  %v3_26da4 = load i32, i32* %v2_26da4, align 4
  %v4_26da4 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_26da4)
  store i128 %v4_26da4, i128* %xmm0.global-to-local, align 8
  store i64 159152, i64* @rdi, align 8
  %v1_26db0 = call i64 @__asm_movsd.7465(i128 %v4_26da4)
  %v1_26db6 = call i64 @__asm_movsd.7465(i128 %v2_26d9c)
  %v4_26db6 = load i64, i64* @rax, align 8
  ret i64 %v4_26db6
}

define i64 @function_26e88() local_unnamed_addr {
dec_label_pc_26e88:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_26e8d = load i128, i128* @xmm0, align 8
  %v1_26e8d = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_26e8d, i128 %v1_26e8d)
  %v0_26e91 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_26e91, label %bb, label %dec_label_pc_26e88.dec_label_pc_26e93_crit_edge

dec_label_pc_26e88.dec_label_pc_26e93_crit_edge:  ; preds = %dec_label_pc_26e88
  %v0_26e93.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26e93

bb:                                               ; preds = %dec_label_pc_26e88
  %v1_26e91 = call i64 @function_26e95()
  store i64 %v1_26e91, i64* @rax, align 8
  br label %dec_label_pc_26e93

dec_label_pc_26e93:                               ; preds = %dec_label_pc_26e88.dec_label_pc_26e93_crit_edge, %bb
  %v0_26e93 = phi i64 [ %v0_26e93.pre, %dec_label_pc_26e88.dec_label_pc_26e93_crit_edge ], [ %v1_26e91, %bb ]
  ret i64 %v0_26e93
}

define i64 @function_26e95() local_unnamed_addr {
dec_label_pc_26e95:
  store i64 159388, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_26e9e = load i128, i128* @xmm0, align 8
  %v1_26e9e = call i64 @__asm_movsd.7465(i128 %v0_26e9e)
  %v4_26e9e = load i64, i64* @rax, align 8
  ret i64 %v4_26e9e
}

define i64 @function_26ed0() local_unnamed_addr {
dec_label_pc_26ed0:
  %v0_26ed5 = load i64, i64* @rax, align 8
  ret i64 %v0_26ed5
}

define i64 @function_26ee0() local_unnamed_addr {
dec_label_pc_26ee0:
  %v0_26ee5 = load i64, i64* @rax, align 8
  ret i64 %v0_26ee5
}

define i64 @function_26ef0() local_unnamed_addr {
dec_label_pc_26ef0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_26efe() local_unnamed_addr {
dec_label_pc_26efe:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_26f24() local_unnamed_addr {
dec_label_pc_26f24:
  %pf.global-to-local = alloca i1, align 1
  %v0_26f24 = load i128, i128* @xmm0, align 8
  %v1_26f24 = load i64, i64* inttoptr (i64 159532 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_26f24, i64 %v1_26f24)
  %v0_26f2c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_26f2c, label %bb, label %dec_label_pc_26f24.dec_label_pc_26f32_crit_edge

dec_label_pc_26f24.dec_label_pc_26f32_crit_edge:  ; preds = %dec_label_pc_26f24
  %v2_26f2c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_26f32

bb:                                               ; preds = %dec_label_pc_26f24
  %v1_26f2c = call i64 @function_26e95()
  store i64 %v1_26f2c, i64* @rax, align 8
  br label %dec_label_pc_26f32

dec_label_pc_26f32:                               ; preds = %dec_label_pc_26f24.dec_label_pc_26f32_crit_edge, %bb
  %v2_26f2c = phi i64 [ %v2_26f2c.pre, %dec_label_pc_26f24.dec_label_pc_26f32_crit_edge ], [ %v1_26f2c, %bb ]
  ret i64 %v2_26f2c
}

define i64 @function_26f55() local_unnamed_addr {
dec_label_pc_26f55:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger7powWithEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_26f60:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_26f60 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_26f60 = call i128 @__asm_pxor(i128 %v0_26f60, i128 %v0_26f60)
  store i128 %v2_26f60, i128* %xmm0.global-to-local, align 8
  %v0_26f65 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_26f65 = call i128 @__asm_pxor(i128 %v0_26f65, i128 %v0_26f65)
  store i128 %v2_26f65, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_26f6c = trunc i64 %arg2 to i32
  %v2_26f6c = call i128 @__asm_cvtsi2sd.7468(i32 %v1_26f6c)
  store i128 %v2_26f6c, i128* %xmm0.global-to-local, align 8
  %v0_26f74 = load i64, i64* @rdi, align 8
  %v1_26f74 = add i64 %v0_26f74, 8
  %v2_26f74 = inttoptr i64 %v1_26f74 to i32*
  %v3_26f74 = load i32, i32* %v2_26f74, align 4
  %v4_26f74 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_26f74)
  store i128 %v4_26f74, i128* %xmm1.global-to-local, align 8
  store i64 159616, i64* @rdi, align 8
  %v1_26f80 = call i64 @__asm_movsd.7465(i128 %v4_26f74)
  %v1_26f85 = call i64 @__asm_movsd.7465(i128 %v2_26f6c)
  %v5_26f85 = load i64, i64* @rax, align 8
  ret i64 %v5_26f85
}

define i64 @function_27058() local_unnamed_addr {
dec_label_pc_27058:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_2705d = load i128, i128* @xmm0, align 8
  %v1_2705d = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_2705d, i128 %v1_2705d)
  %v0_27061 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_27061, label %bb, label %dec_label_pc_27058.dec_label_pc_27063_crit_edge

dec_label_pc_27058.dec_label_pc_27063_crit_edge:  ; preds = %dec_label_pc_27058
  %v0_27063.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_27063

bb:                                               ; preds = %dec_label_pc_27058
  %v1_27061 = call i64 @function_27065()
  store i64 %v1_27061, i64* @rax, align 8
  br label %dec_label_pc_27063

dec_label_pc_27063:                               ; preds = %dec_label_pc_27058.dec_label_pc_27063_crit_edge, %bb
  %v0_27063 = phi i64 [ %v0_27063.pre, %dec_label_pc_27058.dec_label_pc_27063_crit_edge ], [ %v1_27061, %bb ]
  ret i64 %v0_27063
}

define i64 @function_27065() local_unnamed_addr {
dec_label_pc_27065:
  store i64 159852, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2706e = load i128, i128* @xmm0, align 8
  %v1_2706e = call i64 @__asm_movsd.7465(i128 %v0_2706e)
  %v4_2706e = load i64, i64* @rax, align 8
  ret i64 %v4_2706e
}

define i64 @function_270a0() local_unnamed_addr {
dec_label_pc_270a0:
  %v0_270a5 = load i64, i64* @rax, align 8
  ret i64 %v0_270a5
}

define i64 @function_270b0() local_unnamed_addr {
dec_label_pc_270b0:
  %v0_270b5 = load i64, i64* @rax, align 8
  ret i64 %v0_270b5
}

define i64 @function_270c0() local_unnamed_addr {
dec_label_pc_270c0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_270ce() local_unnamed_addr {
dec_label_pc_270ce:
  store i64 159957, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_270f4() local_unnamed_addr {
dec_label_pc_270f4:
  %pf.global-to-local = alloca i1, align 1
  %v0_270f4 = load i128, i128* @xmm0, align 8
  %v1_270f4 = load i64, i64* inttoptr (i64 159996 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_270f4, i64 %v1_270f4)
  %v0_270fc = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_270fc, label %bb, label %dec_label_pc_270f4.dec_label_pc_27102_crit_edge

dec_label_pc_270f4.dec_label_pc_27102_crit_edge:  ; preds = %dec_label_pc_270f4
  %v2_270fc.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_27102

bb:                                               ; preds = %dec_label_pc_270f4
  %v1_270fc = call i64 @function_27065()
  store i64 %v1_270fc, i64* @rax, align 8
  br label %dec_label_pc_27102

dec_label_pc_27102:                               ; preds = %dec_label_pc_270f4.dec_label_pc_27102_crit_edge, %bb
  %v2_270fc = phi i64 [ %v2_270fc.pre, %dec_label_pc_270f4.dec_label_pc_27102_crit_edge ], [ %v1_270fc, %bb ]
  ret i64 %v2_270fc
}

define i64 @function_27125() local_unnamed_addr {
dec_label_pc_27125:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTableC1EPNS1_7VarargsEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_27130:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27134 = load i64, i64* @rdx, align 8
  %v0_2713b = load i64, i64* %rsi.global-to-local, align 8
  %v1_27156 = trunc i64 %v0_2713b to i32
  %v3_27156 = trunc i64 %v0_27134 to i32
  %v4_27156 = sub i32 %v1_27156, %v3_27156
  store i64 1, i64* @rdx, align 8
  %v2_27161 = add i32 %v4_27156, 1
  %v12_27161 = icmp slt i32 %v2_27161, 0
  %v17_27161 = zext i32 %v2_27161 to i64
  %v6_2716c = select i1 %v12_27161, i64 0, i64 %v17_27161
  store i64 %v6_2716c, i64* %rsi.global-to-local, align 8
  store i64 160132, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_27220(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_27220:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 1, i64* @rbx, align 8
  %v0_27225 = load i64, i64* %r14.global-to-local, align 8
  %v2_27225 = add i64 %v0_27225, 4294967295
  %v17_27225 = and i64 %v2_27225, 4294967295
  store i64 %v17_27225, i64* %r14.global-to-local, align 8
  %v2_27230 = load i64, i64* %r12.global-to-local, align 8
  %v2_2723e = load i64, i64* %rbp.global-to-local, align 8
  %v0_27253 = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_27230

dec_label_pc_27230:                               ; preds = %dec_label_pc_27230, %dec_label_pc_27220
  %v2_272532 = phi i64 [ %v17_27244, %dec_label_pc_27230 ], [ 1, %dec_label_pc_27220 ]
  %v2_27244 = add nuw nsw i64 %v2_272532, 1
  %v17_27244 = and i64 %v2_27244, 4294967295
  %v5_27256 = icmp slt i64 %v0_27253, %v17_27244
  br i1 %v5_27256, label %dec_label_pc_27258, label %dec_label_pc_27230

dec_label_pc_27258:                               ; preds = %dec_label_pc_27230
  store i64 %v2_27230, i64* @rax, align 8
  store i64 %v2_2723e, i64* @rdi, align 8
  store i64 %v2_2723e, i64* @rcx, align 8
  store i64 %v2_27230, i64* @rdx, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  store i64 %arg5, i64* %r14.global-to-local, align 8
  ret i64 %v2_27230
}

define i64 @function_27267() local_unnamed_addr {
dec_label_pc_27267:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEPNS1_7VarargsEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27270:
  store i64 %arg1, i64* @rdi, align 8
  store i64 160382, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTableC1EPNS1_7VarargsE() local_unnamed_addr {
dec_label_pc_272b0:
  store i64 1, i64* @rdx, align 8
  %v0_272c2 = load i64, i64* @rax, align 8
  ret i64 %v0_272c2
}

define i64 @_ZN3org4luaj3vm211LuaUserdata4eqmtEJbPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_272d0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_272d0 = load i64, i64* @rdi, align 8
  %v1_272d0 = add i64 %v0_272d0, 16
  %v2_272d0 = inttoptr i64 %v1_272d0 to i64*
  %v3_272d0 = load i64, i64* %v2_272d0, align 8
  %v10_272d0 = icmp eq i64 %v3_272d0, 0
  br i1 %v10_272d0, label %bb, label %dec_label_pc_272db

bb:                                               ; preds = %dec_label_pc_272d0
  %v1_272d5 = call i64 @function_27398()
  store i64 %v1_272d5, i64* @rax, align 8
  %v0_272e1.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_272db

dec_label_pc_272db:                               ; preds = %bb, %dec_label_pc_272d0
  %v0_27313 = phi i64 [ %v0_272e1.pre, %bb ], [ %v0_272d0, %dec_label_pc_272d0 ]
  %v0_272df = load i64, i64* %rbp.global-to-local, align 8
  %v0_272e0 = load i64, i64* @rbx, align 8
  store i64 %v0_27313, i64* %rbp.global-to-local, align 8
  %v0_272e4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_272e4, i64* @rbx, align 8
  store i64 %v0_272e4, i64* @rdi, align 8
  store i64 %v0_272e4, i64* @rax, align 8
  %v4_272f7 = trunc i64 %v0_272e4 to i8
  %v5_272f7 = icmp eq i8 %v4_272f7, 0
  %v1_272f9 = icmp eq i1 %v5_272f7, false
  br i1 %v1_272f9, label %dec_label_pc_27310, label %dec_label_pc_272fb

dec_label_pc_272fb:                               ; preds = %dec_label_pc_272db
  store i64 0, i64* @rax, align 8
  store i64 %v0_272e0, i64* @rbx, align 8
  store i64 %v0_272df, i64* %rbp.global-to-local, align 8
  ret i64 0

dec_label_pc_27310:                               ; preds = %dec_label_pc_272db
  store i64 %v0_272e4, i64* @rax, align 8
  store i64 160551, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_27398() local_unnamed_addr {
dec_label_pc_27398:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString3powEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_273a0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_273a2 = load i64, i64* @rdi, align 8
  store i64 %v0_273a2, i64* @rbx, align 8
  store i64 %v0_273a2, i64* @rax, align 8
  %v0_273ac = load i128, i128* %xmm0.global-to-local, align 8
  %v1_273ac = call i64 @__asm_movsd.7465(i128 %v0_273ac)
  %v1_273b8 = call i64 @__asm_movsd.7465(i128 %v0_273ac)
  %v4_273b8 = load i64, i64* @rax, align 8
  ret i64 %v4_273b8
}

define i64 @function_27470() local_unnamed_addr {
dec_label_pc_27470:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_27470 = load i64, i64* inttoptr (i64 160888 to i64*), align 8
  %v1_27470 = call i128 @__asm_movsd(i64 %v0_27470)
  %v1_27478 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_27470, i128 %v1_27478)
  %v0_2747c = load i1, i1* %cf.global-to-local, align 1
  %v1_2747c = icmp eq i1 %v0_2747c, false
  br i1 %v1_2747c, label %bb, label %dec_label_pc_27470.dec_label_pc_2747e_crit_edge

dec_label_pc_27470.dec_label_pc_2747e_crit_edge:  ; preds = %dec_label_pc_27470
  %v3_2747c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2747e

bb:                                               ; preds = %dec_label_pc_27470
  %v2_2747c = call i64 @function_274e0()
  store i64 %v2_2747c, i64* @rax, align 8
  br label %dec_label_pc_2747e

dec_label_pc_2747e:                               ; preds = %dec_label_pc_27470.dec_label_pc_2747e_crit_edge, %bb
  %v3_2747c = phi i64 [ %v3_2747c.pre, %dec_label_pc_27470.dec_label_pc_2747e_crit_edge ], [ %v2_2747c, %bb ]
  ret i64 %v3_2747c
}

define i64 @function_274e0() local_unnamed_addr {
dec_label_pc_274e0:
  %v0_274e5 = load i64, i64* @rax, align 8
  ret i64 %v0_274e5
}

define i128 @function_274f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_274f0:
  %v4_274f0 = call i128 @__asm_movsd(i64 %arg2)
  %v3_274f6 = call i128 @__asm_movsd(i64 %arg1)
  ret i128 %v3_274f6
}

define i64 @function_27508() local_unnamed_addr {
dec_label_pc_27508:
  store i64 161039, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_27516() local_unnamed_addr {
dec_label_pc_27516:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2754c() local_unnamed_addr {
dec_label_pc_2754c:
  %v0_2754c = call i64 @function_2754c()
  store i64 %v0_2754c, i64* @rax, align 8
  ret i64 %v0_2754c
}

define i64 @function_2756d() local_unnamed_addr {
dec_label_pc_2756d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7powWithEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_27580:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27582 = load i64, i64* @rdi, align 8
  store i64 %v0_27582, i64* @rbx, align 8
  store i64 %v0_27582, i64* @rax, align 8
  %v0_2758c = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2758c = call i64 @__asm_movsd.7465(i128 %v0_2758c)
  %v1_27598 = call i64 @__asm_movsd.7465(i128 %v0_2758c)
  %v4_27598 = load i64, i64* @rax, align 8
  ret i64 %v4_27598
}

define i64 @function_27650() local_unnamed_addr {
dec_label_pc_27650:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_27650 = load i64, i64* inttoptr (i64 161368 to i64*), align 8
  %v1_27650 = call i128 @__asm_movsd(i64 %v0_27650)
  %v1_27658 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_27650, i128 %v1_27658)
  %v0_2765c = load i1, i1* %cf.global-to-local, align 1
  %v1_2765c = icmp eq i1 %v0_2765c, false
  br i1 %v1_2765c, label %bb, label %dec_label_pc_27650.dec_label_pc_2765e_crit_edge

dec_label_pc_27650.dec_label_pc_2765e_crit_edge:  ; preds = %dec_label_pc_27650
  %v3_2765c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2765e

bb:                                               ; preds = %dec_label_pc_27650
  %v2_2765c = call i64 @function_276c0()
  store i64 %v2_2765c, i64* @rax, align 8
  br label %dec_label_pc_2765e

dec_label_pc_2765e:                               ; preds = %dec_label_pc_27650.dec_label_pc_2765e_crit_edge, %bb
  %v3_2765c = phi i64 [ %v3_2765c.pre, %dec_label_pc_27650.dec_label_pc_2765e_crit_edge ], [ %v2_2765c, %bb ]
  ret i64 %v3_2765c
}

define i64 @function_276c0() local_unnamed_addr {
dec_label_pc_276c0:
  %v0_276c5 = load i64, i64* @rax, align 8
  ret i64 %v0_276c5
}

define i128 @function_276d0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_276d0:
  %v3_276d0 = call i128 @__asm_movsd(i64 %arg1)
  %v4_276d5 = call i128 @__asm_movsd(i64 %arg2)
  ret i128 %v4_276d5
}

define i64 @function_276e8() local_unnamed_addr {
dec_label_pc_276e8:
  store i64 161519, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_276f6() local_unnamed_addr {
dec_label_pc_276f6:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2772c() local_unnamed_addr {
dec_label_pc_2772c:
  %v0_2772c = call i64 @function_2772c()
  store i64 %v0_2772c, i64* @rax, align 8
  ret i64 %v0_2772c
}

define i64 @function_2774d() local_unnamed_addr {
dec_label_pc_2774d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29WeakTable8arraygetEJPNS1_8LuaValueEP6JArrayIS4_Ei(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_27760:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27764 = load i64, i64* @rdx, align 8
  store i64 %v0_27764, i64* @r12, align 8
  %v1_2776d = trunc i64 %v0_27764 to i32
  %v2_2776d = load i64, i64* %rsi.global-to-local, align 8
  %v3_2776d = add i64 %v2_2776d, 8
  %v4_2776d = inttoptr i64 %v3_2776d to i32*
  %v5_2776d = load i32, i32* %v4_2776d, align 4
  %v11_2776d = icmp ult i32 %v1_2776d, %v5_2776d
  %v1_27770 = icmp eq i1 %v11_2776d, false
  br i1 %v1_27770, label %bb, label %dec_label_pc_27776

bb:                                               ; preds = %dec_label_pc_27760
  %v2_27770 = call i64 @function_27862()
  store i64 %v2_27770, i64* @rax, align 8
  %v0_27776.pre = load i64, i64* %rsi.global-to-local, align 8
  %v1_2777d.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_27776

dec_label_pc_27776:                               ; preds = %bb, %dec_label_pc_27760
  %v1_2777d = phi i64 [ %v1_2777d.pre, %bb ], [ %v0_27764, %dec_label_pc_27760 ]
  %v0_27793 = phi i64 [ %v0_27776.pre, %bb ], [ %v2_2776d, %dec_label_pc_27760 ]
  %v1_27776 = add i64 %v0_27793, 16
  store i64 %v1_27776, i64* @rax, align 8
  %v2_2777d = mul i64 %v1_2777d, 8
  %v3_2777d = add i64 %v1_27776, %v2_2777d
  %v1_27781 = inttoptr i64 %v3_2777d to i64*
  %v2_27781 = load i64, i64* %v1_27781, align 8
  store i64 %v2_27781, i64* @rbx, align 8
  store i64 161681, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_277f0() local_unnamed_addr {
dec_label_pc_277f0:
  store i64 161783, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_27812(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_27812:
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27812 = load i64, i64* @r12, align 8
  %v1_27812 = trunc i64 %v0_27812 to i32
  %v2_27812 = load i64, i64* %rbp.global-to-local, align 8
  %v3_27812 = add i64 %v2_27812, 8
  %v4_27812 = inttoptr i64 %v3_27812 to i32*
  %v5_27812 = load i32, i32* %v4_27812, align 4
  %v11_27812 = icmp ult i32 %v1_27812, %v5_27812
  %v1_27816 = icmp eq i1 %v11_27812, false
  br i1 %v1_27816, label %bb, label %dec_label_pc_27818

bb:                                               ; preds = %dec_label_pc_27812
  %v2_27816 = call i64 @function_27862()
  store i64 %v2_27816, i64* @rax, align 8
  %v0_2781a.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_27818

dec_label_pc_27818:                               ; preds = %bb, %dec_label_pc_27812
  %v0_2781a = phi i64 [ %v0_2781a.pre, %bb ], [ %v2_27812, %dec_label_pc_27812 ]
  store i64 %v0_2781a, i64* @rdi, align 8
  %v0_27824 = load i64, i64* %r13.global-to-local, align 8
  %v1_27824 = inttoptr i64 %v0_27824 to i64*
  store i64 0, i64* %v1_27824, align 8
  %v0_2782c = load i64, i64* @rbx, align 8
  store i64 %v0_2782c, i64* @rax, align 8
  store i64 %arg3, i64* @rbx, align 8
  store i64 %arg4, i64* %rbp.global-to-local, align 8
  store i64 %arg6, i64* %r13.global-to-local, align 8
  ret i64 %v0_2782c
}

define i64 @function_27840() local_unnamed_addr {
dec_label_pc_27840:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_27862() local_unnamed_addr {
dec_label_pc_27862:
  %v0_27862 = load i64, i64* @r12, align 8
  store i64 %v0_27862, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable3lenEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_27870:
  store i64 %arg1, i64* @rdi, align 8
  %v0_27872 = load i64, i64* @rdi, align 8
  store i64 %v0_27872, i64* @rbx, align 8
  store i64 %v0_27872, i64* @rax, align 8
  store i64 161967, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_278f0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_278f0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_278f0 = load i64, i64* inttoptr (i64 162039 to i64*), align 8
  store i64 %v0_278f0, i64* @rax, align 8
  %v0_278f7 = load i64, i64* @rdi, align 8
  %v1_278f7 = trunc i64 %v0_278f7 to i32
  %v3_278f7 = add i64 %v0_278f0, 8
  %v4_278f7 = inttoptr i64 %v3_278f7 to i32*
  %v5_278f7 = load i32, i32* %v4_278f7, align 4
  %v11_278f7 = icmp ult i32 %v1_278f7, %v5_278f7
  %v1_278fa = add i64 %v0_278f0, 16
  store i64 %v1_278fa, i64* @rdx, align 8
  %v1_278fe = icmp eq i1 %v11_278f7, false
  br i1 %v1_278fe, label %dec_label_pc_27927, label %dec_label_pc_27900

dec_label_pc_27900:                               ; preds = %dec_label_pc_278f0
  %v2_27903 = mul i64 %v0_278f7, 8
  %v3_27903 = add i64 %v2_27903, %v1_278fa
  %v4_27903 = inttoptr i64 %v3_27903 to i64*
  %v5_27903 = load i64, i64* %v4_27903, align 8
  store i64 %v5_27903, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v5_27903

dec_label_pc_27927:                               ; preds = %dec_label_pc_278f0
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer6appendEJPS2_PNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27930:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27934 = load i64, i64* %rsi.global-to-local, align 8
  %v0_27939 = load i64, i64* @rdi, align 8
  store i64 %v0_27939, i64* @rbx, align 8
  %v1_27940 = add i64 %v0_27939, 24
  %v2_27940 = inttoptr i64 %v1_27940 to i64*
  %v3_27940 = load i64, i64* %v2_27940, align 8
  store i64 %v3_27940, i64* @rdi, align 8
  %v1_27944 = add i64 %v0_27934, 20
  %v2_27944 = inttoptr i64 %v1_27944 to i32*
  %v3_27944 = load i32, i32* %v2_27944, align 4
  %v4_27944 = zext i32 %v3_27944 to i64
  store i64 %v4_27944, i64* @rbp, align 8
  %v1_27947 = icmp eq i64 %v3_27940, 0
  br i1 %v1_27947, label %bb, label %dec_label_pc_27950

bb:                                               ; preds = %dec_label_pc_27930
  %v1_2794a = call i64 @function_279d0()
  store i64 %v1_2794a, i64* @rax, align 8
  br label %dec_label_pc_27950

dec_label_pc_27950:                               ; preds = %bb, %dec_label_pc_27930
  %v1_27950 = inttoptr i64 %v3_27940 to i64*
  %v2_27950 = load i64, i64* %v1_27950, align 8
  store i64 %v2_27950, i64* @rax, align 8
  %v1_27959 = add i64 %v2_27950, 20
  %v2_27959 = inttoptr i64 %v1_27959 to i32*
  %v3_27959 = load i32, i32* %v2_27959, align 4
  %v4_27959 = zext i32 %v3_27959 to i64
  store i64 %v4_27959, i64* %rsi.global-to-local, align 8
  ret i64 %v2_27950
}

define i64 @function_279d0() local_unnamed_addr {
dec_label_pc_279d0:
  %v0_279d0 = load i64, i64* @rbx, align 8
  %v1_279d0 = add i64 %v0_279d0, 20
  %v2_279d0 = inttoptr i64 %v1_279d0 to i32*
  %v3_279d0 = load i32, i32* %v2_279d0, align 4
  %v4_279d0 = zext i32 %v3_279d0 to i64
  store i64 %v4_279d0, i64* @rcx, align 8
  %v1_279d3 = add i64 %v0_279d0, 16
  %v2_279d3 = inttoptr i64 %v1_279d3 to i32*
  %v3_279d3 = load i32, i32* %v2_279d3, align 4
  %v4_279d3 = zext i32 %v3_279d3 to i64
  store i64 %v4_279d3, i64* @rdi, align 8
  %v1_279d6 = add i64 %v0_279d0, 8
  %v2_279d6 = inttoptr i64 %v1_279d6 to i64*
  %v3_279d6 = load i64, i64* %v2_279d6, align 8
  store i64 %v3_279d6, i64* @rdx, align 8
  %v3_279da = add nuw nsw i64 %v4_279d3, %v4_279d0
  store i64 %v3_279da, i64* @rax, align 8
  %v1_279dd = add i64 %v3_279d6, 8
  %v2_279dd = inttoptr i64 %v1_279dd to i32*
  %v3_279dd = load i32, i32* %v2_279dd, align 4
  %v1_279e1 = trunc i64 %v3_279da to i32
  %v2_279e1 = load i64, i64* @rbp, align 8
  %v3_279e1 = trunc i64 %v2_279e1 to i32
  %v4_279e1 = add i32 %v3_279e1, %v1_279e1
  %v20_279e1 = zext i32 %v4_279e1 to i64
  store i64 %v20_279e1, i64* @rax, align 8
  %v8_279e6 = icmp ugt i32 %v4_279e1, %v3_279dd
  br i1 %v8_279e6, label %dec_label_pc_279ec, label %dec_label_pc_279e8

dec_label_pc_279e8:                               ; preds = %dec_label_pc_279d0
  br label %dec_label_pc_279ec

dec_label_pc_279ec:                               ; preds = %dec_label_pc_279e8, %dec_label_pc_279d0
  %v3_279ec = add i64 %v2_279e1, %v4_279d3
  store i64 %v3_279ec, i64* @rax, align 8
  %v1_279f5 = trunc i64 %v3_279ec to i32
  %v10_279f8 = icmp sgt i32 %v1_279f5, 31
  br i1 %v10_279f8, label %bb, label %dec_label_pc_279fa

bb:                                               ; preds = %dec_label_pc_279ec
  %v12_279f8 = call i64 @function_27a40(i64 %v4_279d3)
  store i64 %v12_279f8, i64* @rax, align 8
  br label %dec_label_pc_279fa

dec_label_pc_279fa:                               ; preds = %bb, %dec_label_pc_279ec
  %v0_279fd = phi i64 [ %v12_279f8, %bb ], [ %v3_279ec, %dec_label_pc_279ec ]
  ret i64 %v0_279fd
}

define i64 @function_27a40(i64 %arg1) local_unnamed_addr {
dec_label_pc_27a40:
  store i64 %arg1, i64* @rdi, align 8
  %v3_27a40 = mul i64 %arg1, 2
  %v1_27a43 = trunc i64 %v3_27a40 to i32
  %v2_27a43 = load i64, i64* @rax, align 8
  %v3_27a43 = trunc i64 %v2_27a43 to i32
  %v4_27a43 = sub i32 %v1_27a43, %v3_27a43
  %v10_27a431 = xor i64 %v2_27a43, %v3_27a40
  %v10_27a43 = trunc i64 %v10_27a431 to i32
  %v11_27a43 = xor i32 %v4_27a43, %v1_27a43
  %v12_27a43 = and i32 %v11_27a43, %v10_27a43
  %v13_27a43 = icmp slt i32 %v12_27a43, 0
  %v15_27a43 = icmp slt i32 %v4_27a43, 0
  %v2_27a45 = icmp ne i1 %v15_27a43, %v13_27a43
  %v7_27a45.v = select i1 %v2_27a45, i64 %v2_27a43, i64 %v3_27a40
  %v8_27a45 = and i64 %v7_27a45.v, 4294967295
  store i64 %v8_27a45, i64* @rsi, align 8
  ret i64 %v2_27a43
}

define i64 @_ZN3org4luaj3vm29LuaString3powEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27a50:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27a52 = load i64, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %v0_27a52, i64* @rax, align 8
  %v0_27a64 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_27a64 = call i64 @__asm_movsd.7465(i128 %v0_27a64)
  %v4_27a64 = load i64, i64* @rax, align 8
  ret i64 %v4_27a64
}

define i64 @function_27b30() local_unnamed_addr {
dec_label_pc_27b30:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_27b30 = load i64, i64* inttoptr (i64 162616 to i64*), align 8
  %v1_27b30 = call i128 @__asm_movsd(i64 %v0_27b30)
  %v1_27b38 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_27b30, i128 %v1_27b38)
  %v0_27b3c = load i1, i1* %cf.global-to-local, align 1
  %v1_27b3c = icmp eq i1 %v0_27b3c, false
  br i1 %v1_27b3c, label %bb, label %dec_label_pc_27b30.dec_label_pc_27b3e_crit_edge

dec_label_pc_27b30.dec_label_pc_27b3e_crit_edge:  ; preds = %dec_label_pc_27b30
  %v3_27b3c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_27b3e

bb:                                               ; preds = %dec_label_pc_27b30
  %v2_27b3c = call i64 @function_27ba0()
  store i64 %v2_27b3c, i64* @rax, align 8
  br label %dec_label_pc_27b3e

dec_label_pc_27b3e:                               ; preds = %dec_label_pc_27b30.dec_label_pc_27b3e_crit_edge, %bb
  %v3_27b3c = phi i64 [ %v3_27b3c.pre, %dec_label_pc_27b30.dec_label_pc_27b3e_crit_edge ], [ %v2_27b3c, %bb ]
  ret i64 %v3_27b3c
}

define i64 @function_27ba0() local_unnamed_addr {
dec_label_pc_27ba0:
  %v0_27ba5 = load i64, i64* @rax, align 8
  ret i64 %v0_27ba5
}

define i128 @function_27bb0(i64 %arg1) local_unnamed_addr {
dec_label_pc_27bb0:
  %v3_27bb0 = call i128 @__asm_movsd(i64 %arg1)
  ret i128 %v3_27bb0
}

define i64 @function_27bc0() local_unnamed_addr {
dec_label_pc_27bc0:
  store i64 162759, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_27bce() local_unnamed_addr {
dec_label_pc_27bce:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_27c25() local_unnamed_addr {
dec_label_pc_27c25:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7powWithEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27c30:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm2.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27c30 = load i128, i128* %xmm2.global-to-local, align 8
  %v2_27c30 = call i128 @__asm_pxor(i128 %v0_27c30, i128 %v0_27c30)
  store i128 %v2_27c30, i128* %xmm2.global-to-local, align 8
  %v0_27c36 = load i64, i64* @rdi, align 8
  store i64 %v0_27c36, i64* @rbx, align 8
  %v1_27c39 = trunc i64 %arg2 to i32
  %v2_27c39 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_27c39)
  store i128 %v2_27c39, i128* %xmm2.global-to-local, align 8
  %v2_27c41 = load i64, i64* @rdi, align 8
  store i64 %v2_27c41, i64* @rax, align 8
  %v1_27c44 = call i64 @__asm_movsd.7465(i128 %v2_27c39)
  %v0_27c4f = load i128, i128* %xmm0.global-to-local, align 8
  %v1_27c4f = call i64 @__asm_movsd.7465(i128 %v0_27c4f)
  %v5_27c4f = load i64, i64* @rax, align 8
  ret i64 %v5_27c4f
}

define i64 @function_27d08() local_unnamed_addr {
dec_label_pc_27d08:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_27d08 = load i64, i64* inttoptr (i64 163088 to i64*), align 16
  %v1_27d08 = call i128 @__asm_movsd(i64 %v0_27d08)
  %v1_27d10 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_27d08, i128 %v1_27d10)
  %v0_27d14 = load i1, i1* %cf.global-to-local, align 1
  %v1_27d14 = icmp eq i1 %v0_27d14, false
  br i1 %v1_27d14, label %bb, label %dec_label_pc_27d08.dec_label_pc_27d16_crit_edge

dec_label_pc_27d08.dec_label_pc_27d16_crit_edge:  ; preds = %dec_label_pc_27d08
  %v3_27d14.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_27d16

bb:                                               ; preds = %dec_label_pc_27d08
  %v2_27d14 = call i64 @function_27d80()
  store i64 %v2_27d14, i64* @rax, align 8
  br label %dec_label_pc_27d16

dec_label_pc_27d16:                               ; preds = %dec_label_pc_27d08.dec_label_pc_27d16_crit_edge, %bb
  %v3_27d14 = phi i64 [ %v3_27d14.pre, %dec_label_pc_27d08.dec_label_pc_27d16_crit_edge ], [ %v2_27d14, %bb ]
  ret i64 %v3_27d14
}

define i64 @function_27d80() local_unnamed_addr {
dec_label_pc_27d80:
  %v0_27d85 = load i64, i64* @rax, align 8
  ret i64 %v0_27d85
}

define i128 @function_27d90(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_27d90:
  %v4_27d90 = call i128 @__asm_movsd(i64 %arg2)
  %v3_27d96 = call i128 @__asm_movsd(i64 %arg1)
  ret i128 %v3_27d96
}

define i64 @function_27da8() local_unnamed_addr {
dec_label_pc_27da8:
  store i64 163247, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_27db6() local_unnamed_addr {
dec_label_pc_27db6:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_27de6() local_unnamed_addr {
dec_label_pc_27de6:
  %v0_27de6 = call i64 @function_10027de9()
  store i64 %v0_27de6, i64* @rax, align 8
  ret i64 %v0_27de6
}

define i64 @function_27e0d() local_unnamed_addr {
dec_label_pc_27e0d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$FormatDesc6formatEJvPNS1_6BufferEPNS1_9LuaStringE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_27e20:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_27e26 = load i64, i64* @rdx, align 8
  store i64 %v0_27e26, i64* %rbp.global-to-local, align 8
  %v0_27e29 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_27e29, i64* @rbx, align 8
  store i64 %v0_27e26, i64* @rdi, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  store i64 %v0_27e26, i64* @rax, align 8
  store i64 0, i64* @rdx, align 8
  %v1_27e40 = trunc i64 %v0_27e26 to i32
  %v11_27e40 = icmp eq i32 %v1_27e40, -1
  br i1 %v11_27e40, label %dec_label_pc_27e59, label %dec_label_pc_27e45

dec_label_pc_27e45:                               ; preds = %dec_label_pc_27e20
  store i64 0, i64* @rcx, align 8
  store i64 %v0_27e26, i64* @rdi, align 8
  store i64 %v0_27e26, i64* @rdx, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  store i64 %v0_27e26, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_27e59

dec_label_pc_27e59:                               ; preds = %dec_label_pc_27e45, %dec_label_pc_27e20
  %v1_27e59 = icmp eq i64 %v0_27e29, 0
  br i1 %v1_27e59, label %bb, label %dec_label_pc_27e62

bb:                                               ; preds = %dec_label_pc_27e59
  %v1_27e5c = call i64 @function_27f6a()
  store i64 %v1_27e5c, i64* @rax, align 8
  %v0_27e66.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_27e62

dec_label_pc_27e62:                               ; preds = %bb, %dec_label_pc_27e59
  %v0_27e66 = phi i64 [ %v0_27e66.pre, %bb ], [ %v0_27e26, %dec_label_pc_27e59 ]
  %v1_27e62 = add i64 %v0_27e29, 24
  %v2_27e62 = inttoptr i64 %v1_27e62 to i64*
  %v3_27e62 = load i64, i64* %v2_27e62, align 8
  store i64 %v3_27e62, i64* @rdi, align 8
  %v1_27e66 = add i64 %v0_27e66, 20
  %v2_27e66 = inttoptr i64 %v1_27e66 to i32*
  %v3_27e66 = load i32, i32* %v2_27e66, align 4
  %v4_27e66 = zext i32 %v3_27e66 to i64
  store i64 %v4_27e66, i64* @r12, align 8
  %v1_27e6a = icmp eq i64 %v3_27e62, 0
  br i1 %v1_27e6a, label %bb246, label %dec_label_pc_27e73

bb246:                                            ; preds = %dec_label_pc_27e62
  %v1_27e6d = call i64 @function_27ef0()
  store i64 %v1_27e6d, i64* @rax, align 8
  br label %dec_label_pc_27e73

dec_label_pc_27e73:                               ; preds = %bb246, %dec_label_pc_27e62
  %v1_27e73 = inttoptr i64 %v3_27e62 to i64*
  %v2_27e73 = load i64, i64* %v1_27e73, align 8
  store i64 %v2_27e73, i64* @rax, align 8
  %v1_27e7c = add i64 %v2_27e73, 20
  %v2_27e7c = inttoptr i64 %v1_27e7c to i32*
  %v3_27e7c = load i32, i32* %v2_27e7c, align 4
  %v4_27e7c = zext i32 %v3_27e7c to i64
  store i64 %v4_27e7c, i64* %rsi.global-to-local, align 8
  ret i64 %v2_27e73
}

define i64 @function_27ef0() local_unnamed_addr {
dec_label_pc_27ef0:
  %v0_27ef0 = load i64, i64* @rbx, align 8
  %v1_27ef0 = add i64 %v0_27ef0, 20
  %v2_27ef0 = inttoptr i64 %v1_27ef0 to i32*
  %v3_27ef0 = load i32, i32* %v2_27ef0, align 4
  %v4_27ef0 = zext i32 %v3_27ef0 to i64
  store i64 %v4_27ef0, i64* @rcx, align 8
  %v1_27ef3 = add i64 %v0_27ef0, 16
  %v2_27ef3 = inttoptr i64 %v1_27ef3 to i32*
  %v3_27ef3 = load i32, i32* %v2_27ef3, align 4
  %v4_27ef3 = zext i32 %v3_27ef3 to i64
  store i64 %v4_27ef3, i64* @rdi, align 8
  %v1_27ef6 = add i64 %v0_27ef0, 8
  %v2_27ef6 = inttoptr i64 %v1_27ef6 to i64*
  %v3_27ef6 = load i64, i64* %v2_27ef6, align 8
  store i64 %v3_27ef6, i64* @rdx, align 8
  %v3_27efa = add nuw nsw i64 %v4_27ef3, %v4_27ef0
  store i64 %v3_27efa, i64* @rax, align 8
  %v1_27efd = add i64 %v3_27ef6, 8
  %v2_27efd = inttoptr i64 %v1_27efd to i32*
  %v3_27efd = load i32, i32* %v2_27efd, align 4
  %v1_27f01 = trunc i64 %v3_27efa to i32
  %v2_27f01 = load i64, i64* @r12, align 8
  %v3_27f01 = trunc i64 %v2_27f01 to i32
  %v4_27f01 = add i32 %v3_27f01, %v1_27f01
  %v20_27f01 = zext i32 %v4_27f01 to i64
  store i64 %v20_27f01, i64* @rax, align 8
  %v8_27f07 = icmp ugt i32 %v4_27f01, %v3_27efd
  br i1 %v8_27f07, label %dec_label_pc_27f0d, label %dec_label_pc_27f09

dec_label_pc_27f09:                               ; preds = %dec_label_pc_27ef0
  br label %dec_label_pc_27f0d

dec_label_pc_27f0d:                               ; preds = %dec_label_pc_27f09, %dec_label_pc_27ef0
  %v3_27f0d = add i64 %v2_27f01, %v4_27ef3
  store i64 %v3_27f0d, i64* @rax, align 8
  %v1_27f16 = trunc i64 %v3_27f0d to i32
  %v10_27f19 = icmp sgt i32 %v1_27f16, 31
  br i1 %v10_27f19, label %bb, label %dec_label_pc_27f1b

bb:                                               ; preds = %dec_label_pc_27f0d
  %v12_27f19 = call i64 @function_27f60(i64 %v4_27ef3)
  store i64 %v12_27f19, i64* @rax, align 8
  br label %dec_label_pc_27f1b

dec_label_pc_27f1b:                               ; preds = %bb, %dec_label_pc_27f0d
  store i64 163623, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_27f60(i64 %arg1) local_unnamed_addr {
dec_label_pc_27f60:
  store i64 %arg1, i64* @rdi, align 8
  %v2_27f63 = load i64, i64* @rax, align 8
  ret i64 %v2_27f63
}

define i64 @function_27f6a() local_unnamed_addr {
dec_label_pc_27f6a:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString11checknumberEJPNS1_9LuaNumberEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_27f80:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 163734, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_27f98 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_27f98 = call i64 @__asm_movsd.7465(i128 %v0_27f98)
  store i64 163754, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28088() local_unnamed_addr {
dec_label_pc_28088:
  %v0_2808d = load i64, i64* @rax, align 8
  ret i64 %v0_2808d
}

define i64 @function_28090() local_unnamed_addr {
dec_label_pc_28090:
  store i64 163991, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2809e(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2809e:
  %rbp.global-to-local = alloca i64, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_280b7 = load i64, i64* %rbp.global-to-local, align 8
  %v1_280b7 = trunc i64 %v0_280b7 to i32
  store i32 %v1_280b7, i32* inttoptr (i64 8 to i32*), align 8
  %v0_280ba = load i64, i64* @rbx, align 8
  store i64 %v0_280ba, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v0_280ba
}

define i64 @function_280c4() local_unnamed_addr {
dec_label_pc_280c4:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_280c4 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_280c4 = load i64, i64* inttoptr (i64 164044 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_280c4, i64 %v1_280c4)
  store i64 164063, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_280f5() local_unnamed_addr {
dec_label_pc_280f5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7subFromEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_28100:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_28102 = load i64, i64* @rdi, align 8
  store i64 %v0_28102, i64* @rbx, align 8
  store i64 %v0_28102, i64* @rax, align 8
  %v0_2810c = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2810c = call i64 @__asm_movsd.7465(i128 %v0_2810c)
  %v1_28118 = call i64 @__asm_movsd.7465(i128 %v0_2810c)
  store i64 %v1_28118, i64* %stack_var_-40, align 8
  %v0_28122 = load i64, i64* @rax, align 8
  %v4_28122 = trunc i64 %v0_28122 to i8
  %v5_28122 = icmp eq i8 %v4_28122, 0
  %v3_28124 = call i128 @__asm_movsd(i64 %v1_28118)
  store i128 %v3_28124, i128* %xmm1.global-to-local, align 8
  br i1 %v5_28122, label %dec_label_pc_2813c, label %dec_label_pc_2812b

dec_label_pc_2812b:                               ; preds = %dec_label_pc_28100
  %v2_2812b = load i64, i64* @rdi, align 8
  store i64 %v2_2812b, i64* @rax, align 8
  %v0_2812e = load i64, i64* @rbx, align 8
  store i64 %v0_2812e, i64* @rdi, align 8
  %v2_28137 = load i64, i64* %stack_var_-40, align 8
  %v3_28137 = call i128 @__asm_movsd(i64 %v2_28137)
  store i128 %v3_28137, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_2813c

dec_label_pc_2813c:                               ; preds = %dec_label_pc_2812b, %dec_label_pc_28100
  %v4_2813c = call i128 @__asm_movsd(i64 %v1_2810c)
  store i128 %v4_2813c, i128* %xmm0.global-to-local, align 8
  store i64 164169, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2814b = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2814b = call i128 @__asm_subsd(i128 %v4_2813c, i128 %v1_2814b)
  store i128 %v2_2814b, i128* %xmm0.global-to-local, align 8
  %v1_2814f = call i64 @__asm_movsd.7465(i128 %v2_2814b)
  %v4_2814f = load i64, i64* @rax, align 8
  ret i64 %v4_2814f
}

define i64 @function_281c0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_281c0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_281c0 = load i64, i64* inttoptr (i64 164296 to i64*), align 8
  %v1_281c0 = call i128 @__asm_movsd(i64 %v0_281c0)
  %v1_281c8 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_281c0, i128 %v1_281c8)
  %v0_281cc = load i1, i1* %cf.global-to-local, align 1
  %v1_281cc = icmp eq i1 %v0_281cc, false
  br i1 %v1_281cc, label %dec_label_pc_28230, label %dec_label_pc_281ce

dec_label_pc_281ce:                               ; preds = %dec_label_pc_281c0
  %v2_281cc = load i64, i64* @rax, align 8
  ret i64 %v2_281cc

dec_label_pc_28230:                               ; preds = %dec_label_pc_281c0
  %v0_28235 = load i64, i64* @rax, align 8
  ret i64 %v0_28235
}

define i64 @function_28240() local_unnamed_addr {
dec_label_pc_28240:
  store i64 164423, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_282a5() local_unnamed_addr {
dec_label_pc_282a5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString3addEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_282b0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_282b2 = load i64, i64* @rdi, align 8
  store i64 %v0_282b2, i64* @rbx, align 8
  store i64 %v0_282b2, i64* @rax, align 8
  %v0_282bc = load i128, i128* %xmm0.global-to-local, align 8
  %v1_282bc = call i64 @__asm_movsd.7465(i128 %v0_282bc)
  %v1_282c8 = call i64 @__asm_movsd.7465(i128 %v0_282bc)
  store i64 %v1_282c8, i64* %stack_var_-40, align 8
  %v0_282d2 = load i64, i64* @rax, align 8
  %v4_282d2 = trunc i64 %v0_282d2 to i8
  %v5_282d2 = icmp eq i8 %v4_282d2, 0
  %v3_282d4 = call i128 @__asm_movsd(i64 %v1_282c8)
  store i128 %v3_282d4, i128* %xmm1.global-to-local, align 8
  br i1 %v5_282d2, label %dec_label_pc_282ec, label %dec_label_pc_282db

dec_label_pc_282db:                               ; preds = %dec_label_pc_282b0
  %v2_282db = load i64, i64* @rdi, align 8
  store i64 %v2_282db, i64* @rax, align 8
  %v0_282de = load i64, i64* @rbx, align 8
  store i64 %v0_282de, i64* @rdi, align 8
  %v2_282e7 = load i64, i64* %stack_var_-40, align 8
  %v3_282e7 = call i128 @__asm_movsd(i64 %v2_282e7)
  store i128 %v3_282e7, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_282ec

dec_label_pc_282ec:                               ; preds = %dec_label_pc_282db, %dec_label_pc_282b0
  %v4_282ec = call i128 @__asm_movsd(i64 %v1_282bc)
  store i128 %v4_282ec, i128* %xmm0.global-to-local, align 8
  store i64 164601, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_282fb = load i128, i128* %xmm1.global-to-local, align 8
  %v2_282fb = call i128 @__asm_addsd(i128 %v4_282ec, i128 %v1_282fb)
  store i128 %v2_282fb, i128* %xmm0.global-to-local, align 8
  %v1_282ff = call i64 @__asm_movsd.7465(i128 %v2_282fb)
  %v4_282ff = load i64, i64* @rax, align 8
  ret i64 %v4_282ff
}

define i64 @function_28370(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_28370:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28370 = load i64, i64* inttoptr (i64 164728 to i64*), align 8
  %v1_28370 = call i128 @__asm_movsd(i64 %v0_28370)
  %v1_28378 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_28370, i128 %v1_28378)
  %v0_2837c = load i1, i1* %cf.global-to-local, align 1
  %v1_2837c = icmp eq i1 %v0_2837c, false
  br i1 %v1_2837c, label %dec_label_pc_283e0, label %dec_label_pc_2837e

dec_label_pc_2837e:                               ; preds = %dec_label_pc_28370
  %v2_2837c = load i64, i64* @rax, align 8
  ret i64 %v2_2837c

dec_label_pc_283e0:                               ; preds = %dec_label_pc_28370
  %v0_283e5 = load i64, i64* @rax, align 8
  ret i64 %v0_283e5
}

define i64 @function_283f0() local_unnamed_addr {
dec_label_pc_283f0:
  store i64 164855, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28455() local_unnamed_addr {
dec_label_pc_28455:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString3mulEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_28460:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28462 = load i64, i64* @rdi, align 8
  store i64 %v0_28462, i64* @rbx, align 8
  store i64 %v0_28462, i64* @rax, align 8
  %v0_2846c = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2846c = call i64 @__asm_movsd.7465(i128 %v0_2846c)
  %v1_28478 = call i64 @__asm_movsd.7465(i128 %v0_2846c)
  %v4_28478 = load i64, i64* @rax, align 8
  ret i64 %v4_28478
}

define i64 @function_28520(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_28520:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28520 = load i64, i64* inttoptr (i64 165160 to i64*), align 8
  %v1_28520 = call i128 @__asm_movsd(i64 %v0_28520)
  %v1_28528 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_28520, i128 %v1_28528)
  %v0_2852c = load i1, i1* %cf.global-to-local, align 1
  %v1_2852c = icmp eq i1 %v0_2852c, false
  br i1 %v1_2852c, label %dec_label_pc_28590, label %dec_label_pc_2852e

dec_label_pc_2852e:                               ; preds = %dec_label_pc_28520
  %v2_2852c = load i64, i64* @rax, align 8
  ret i64 %v2_2852c

dec_label_pc_28590:                               ; preds = %dec_label_pc_28520
  %v0_28595 = load i64, i64* @rax, align 8
  ret i64 %v0_28595
}

define i64 @function_285a0() local_unnamed_addr {
dec_label_pc_285a0:
  store i64 165287, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_285d4() local_unnamed_addr {
dec_label_pc_285d4:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_285d4 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_285d4 = load i64, i64* inttoptr (i64 165340 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_285d4, i64 %v1_285d4)
  store i64 0, i64* @rax, align 8
  store i64 256, i64* @rdi, align 8
  store i64 256, i64* @rdx, align 8
  ret i64 0
}

define i64 @function_28605() local_unnamed_addr {
dec_label_pc_28605:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString3subEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_28610:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_28612 = load i64, i64* @rdi, align 8
  store i64 %v0_28612, i64* @rbx, align 8
  store i64 %v0_28612, i64* @rax, align 8
  %v0_2861c = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2861c = call i64 @__asm_movsd.7465(i128 %v0_2861c)
  %v1_28628 = call i64 @__asm_movsd.7465(i128 %v0_2861c)
  store i64 %v1_28628, i64* %stack_var_-40, align 8
  %v0_28632 = load i64, i64* @rax, align 8
  %v4_28632 = trunc i64 %v0_28632 to i8
  %v5_28632 = icmp eq i8 %v4_28632, 0
  %v3_28634 = call i128 @__asm_movsd(i64 %v1_28628)
  br i1 %v5_28632, label %dec_label_pc_2864c, label %dec_label_pc_2863b

dec_label_pc_2863b:                               ; preds = %dec_label_pc_28610
  %v2_2863b = load i64, i64* @rdi, align 8
  store i64 %v2_2863b, i64* @rax, align 8
  %v0_2863e = load i64, i64* @rbx, align 8
  store i64 %v0_2863e, i64* @rdi, align 8
  %v2_28647 = load i64, i64* %stack_var_-40, align 8
  %v3_28647 = call i128 @__asm_movsd(i64 %v2_28647)
  br label %dec_label_pc_2864c

dec_label_pc_2864c:                               ; preds = %dec_label_pc_2863b, %dec_label_pc_28610
  %v0_2864c = phi i128 [ %v3_28647, %dec_label_pc_2863b ], [ %v3_28634, %dec_label_pc_28610 ]
  %v5_2864c = call i128 @__asm_subsd.7473(i128 %v0_2864c, i64 %v1_2861c)
  store i64 165465, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2865b = call i64 @__asm_movsd.7465(i128 %v5_2864c)
  %v4_2865b = load i64, i64* @rax, align 8
  ret i64 %v4_2865b
}

define i64 @function_286d0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_286d0:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_286d0 = load i64, i64* inttoptr (i64 165592 to i64*), align 8
  %v1_286d0 = call i128 @__asm_movsd(i64 %v0_286d0)
  %v1_286d8 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_286d0, i128 %v1_286d8)
  %v0_286dc = load i1, i1* %cf.global-to-local, align 1
  %v1_286dc = icmp eq i1 %v0_286dc, false
  br i1 %v1_286dc, label %dec_label_pc_28740, label %dec_label_pc_286de

dec_label_pc_286de:                               ; preds = %dec_label_pc_286d0
  %v2_286dc = load i64, i64* @rax, align 8
  ret i64 %v2_286dc

dec_label_pc_28740:                               ; preds = %dec_label_pc_286d0
  %v0_28745 = load i64, i64* @rax, align 8
  ret i64 %v0_28745
}

define i64 @function_28750(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28750:
  %rbp.global-to-local = alloca i64, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_28777 = load i64, i64* %rbp.global-to-local, align 8
  %v1_28777 = trunc i64 %v0_28777 to i32
  store i32 %v1_28777, i32* inttoptr (i64 8 to i32*), align 8
  %v0_2877a = load i64, i64* @rbx, align 8
  store i64 %v0_2877a, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v0_2877a
}

define i64 @function_28784() local_unnamed_addr {
dec_label_pc_28784:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_28784 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_28784 = load i64, i64* inttoptr (i64 165772 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_28784, i64 %v1_28784)
  store i64 0, i64* @rax, align 8
  store i64 256, i64* @rdi, align 8
  store i64 256, i64* @rdx, align 8
  ret i64 0
}

define i64 @function_287b5() local_unnamed_addr {
dec_label_pc_287b5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14MathLib$random4callEJPNS1_8LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_287c0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 165850, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_287dc = load i128, i128* %xmm0.global-to-local, align 8
  %v1_287dc = call i64 @__asm_movsd.7465(i128 %v0_287dc)
  %v5_287dc = load i64, i64* @rax, align 8
  ret i64 %v5_287dc
}

define i64 @function_28880() local_unnamed_addr {
dec_label_pc_28880:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_28885 = load i128, i128* @xmm0, align 8
  %v1_28885 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_28885, i128 %v1_28885)
  %v0_28889 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_28889, label %bb, label %dec_label_pc_28880.dec_label_pc_2888b_crit_edge

dec_label_pc_28880.dec_label_pc_2888b_crit_edge:  ; preds = %dec_label_pc_28880
  %v0_2888b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2888b

bb:                                               ; preds = %dec_label_pc_28880
  %v1_28889 = call i64 @function_2888d()
  store i64 %v1_28889, i64* @rax, align 8
  br label %dec_label_pc_2888b

dec_label_pc_2888b:                               ; preds = %dec_label_pc_28880.dec_label_pc_2888b_crit_edge, %bb
  %v0_2888b = phi i64 [ %v0_2888b.pre, %dec_label_pc_28880.dec_label_pc_2888b_crit_edge ], [ %v1_28889, %bb ]
  ret i64 %v0_2888b
}

define i64 @function_2888d() local_unnamed_addr {
dec_label_pc_2888d:
  store i64 166036, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_28896 = load i128, i128* @xmm0, align 8
  %v1_28896 = call i64 @__asm_movsd.7465(i128 %v0_28896)
  %v5_28896 = load i64, i64* @rax, align 8
  ret i64 %v5_28896
}

define i64 @function_288c8() local_unnamed_addr {
dec_label_pc_288c8:
  %v0_288cd = load i64, i64* @rax, align 8
  ret i64 %v0_288cd
}

define i64 @function_288d0() local_unnamed_addr {
dec_label_pc_288d0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_288de() local_unnamed_addr {
dec_label_pc_288de:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_28904() local_unnamed_addr {
dec_label_pc_28904:
  %pf.global-to-local = alloca i1, align 1
  %v0_28904 = load i128, i128* @xmm0, align 8
  %v1_28904 = load i64, i64* inttoptr (i64 166156 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_28904, i64 %v1_28904)
  %v0_2890c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2890c, label %bb, label %dec_label_pc_28904.dec_label_pc_28912_crit_edge

dec_label_pc_28904.dec_label_pc_28912_crit_edge:  ; preds = %dec_label_pc_28904
  %v2_2890c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_28912

bb:                                               ; preds = %dec_label_pc_28904
  %v1_2890c = call i64 @function_2888d()
  store i64 %v1_2890c, i64* @rax, align 8
  br label %dec_label_pc_28912

dec_label_pc_28912:                               ; preds = %dec_label_pc_28904.dec_label_pc_28912_crit_edge, %bb
  %v2_2890c = phi i64 [ %v2_2890c.pre, %dec_label_pc_28904.dec_label_pc_28912_crit_edge ], [ %v1_2890c, %bb ]
  ret i64 %v2_2890c
}

define i64 @function_28935() local_unnamed_addr {
dec_label_pc_28935:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString3subEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28940:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28942 = load i64, i64* @rdi, align 8
  %v0_28945 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_28945, i64* @rbx, align 8
  store i64 %v0_28942, i64* @rax, align 8
  %v0_28954 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_28954 = call i64 @__asm_movsd.7465(i128 %v0_28954)
  %v5_28954 = load i64, i64* @rax, align 8
  ret i64 %v5_28954
}

define i64 @function_28a08() local_unnamed_addr {
dec_label_pc_28a08:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_28a08 = load i64, i64* inttoptr (i64 166416 to i64*), align 16
  %v1_28a08 = call i128 @__asm_movsd(i64 %v0_28a08)
  %v1_28a10 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_28a08, i128 %v1_28a10)
  %v0_28a14 = load i1, i1* %cf.global-to-local, align 1
  %v1_28a14 = icmp eq i1 %v0_28a14, false
  br i1 %v1_28a14, label %bb, label %dec_label_pc_28a08.dec_label_pc_28a16_crit_edge

dec_label_pc_28a08.dec_label_pc_28a16_crit_edge:  ; preds = %dec_label_pc_28a08
  %v3_28a14.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_28a16

bb:                                               ; preds = %dec_label_pc_28a08
  %v2_28a14 = call i64 @function_28a80()
  store i64 %v2_28a14, i64* @rax, align 8
  br label %dec_label_pc_28a16

dec_label_pc_28a16:                               ; preds = %dec_label_pc_28a08.dec_label_pc_28a16_crit_edge, %bb
  %v3_28a14 = phi i64 [ %v3_28a14.pre, %dec_label_pc_28a08.dec_label_pc_28a16_crit_edge ], [ %v2_28a14, %bb ]
  ret i64 %v3_28a14
}

define i64 @function_28a80() local_unnamed_addr {
dec_label_pc_28a80:
  %v0_28a85 = load i64, i64* @rax, align 8
  ret i64 %v0_28a85
}

define i64 @function_28a90() local_unnamed_addr {
dec_label_pc_28a90:
  store i64 166551, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28a9e() local_unnamed_addr {
dec_label_pc_28a9e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_28af5() local_unnamed_addr {
dec_label_pc_28af5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString3addEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28b00:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28b02 = load i64, i64* @rdi, align 8
  %v0_28b05 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_28b05, i64* @rbx, align 8
  store i64 %v0_28b02, i64* @rax, align 8
  %v0_28b14 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_28b14 = call i64 @__asm_movsd.7465(i128 %v0_28b14)
  %v5_28b14 = load i64, i64* @rax, align 8
  ret i64 %v5_28b14
}

define i64 @function_28bc8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_28bc8:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28bc8 = load i64, i64* inttoptr (i64 166864 to i64*), align 16
  %v1_28bc8 = call i128 @__asm_movsd(i64 %v0_28bc8)
  %v1_28bd0 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_28bc8, i128 %v1_28bd0)
  %v0_28bd4 = load i1, i1* %cf.global-to-local, align 1
  %v1_28bd4 = icmp eq i1 %v0_28bd4, false
  br i1 %v1_28bd4, label %dec_label_pc_28c40, label %dec_label_pc_28bd6

dec_label_pc_28bd6:                               ; preds = %dec_label_pc_28bc8
  %v2_28bd4 = load i64, i64* @rax, align 8
  ret i64 %v2_28bd4

dec_label_pc_28c40:                               ; preds = %dec_label_pc_28bc8
  %v0_28c45 = load i64, i64* @rax, align 8
  ret i64 %v0_28c45
}

define i64 @function_28c50() local_unnamed_addr {
dec_label_pc_28c50:
  store i64 166999, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28cb5() local_unnamed_addr {
dec_label_pc_28cb5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString3mulEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28cc0:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28cc2 = load i64, i64* @rdi, align 8
  %v0_28cc5 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_28cc5, i64* @rbx, align 8
  store i64 %v0_28cc2, i64* @rax, align 8
  %v0_28cd4 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_28cd4 = call i64 @__asm_movsd.7465(i128 %v0_28cd4)
  %v5_28cd4 = load i64, i64* @rax, align 8
  ret i64 %v5_28cd4
}

define i64 @function_28d88() local_unnamed_addr {
dec_label_pc_28d88:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_28d88 = load i64, i64* inttoptr (i64 167312 to i64*), align 16
  %v1_28d88 = call i128 @__asm_movsd(i64 %v0_28d88)
  %v1_28d90 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_28d88, i128 %v1_28d90)
  %v0_28d94 = load i1, i1* %cf.global-to-local, align 1
  %v1_28d94 = icmp eq i1 %v0_28d94, false
  br i1 %v1_28d94, label %bb, label %dec_label_pc_28d88.dec_label_pc_28d96_crit_edge

dec_label_pc_28d88.dec_label_pc_28d96_crit_edge:  ; preds = %dec_label_pc_28d88
  %v3_28d94.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_28d96

bb:                                               ; preds = %dec_label_pc_28d88
  %v2_28d94 = call i64 @function_28e00()
  store i64 %v2_28d94, i64* @rax, align 8
  br label %dec_label_pc_28d96

dec_label_pc_28d96:                               ; preds = %dec_label_pc_28d88.dec_label_pc_28d96_crit_edge, %bb
  %v3_28d94 = phi i64 [ %v3_28d94.pre, %dec_label_pc_28d88.dec_label_pc_28d96_crit_edge ], [ %v2_28d94, %bb ]
  ret i64 %v3_28d94
}

define i64 @function_28e00() local_unnamed_addr {
dec_label_pc_28e00:
  %v0_28e05 = load i64, i64* @rax, align 8
  ret i64 %v0_28e05
}

define i64 @function_28e10() local_unnamed_addr {
dec_label_pc_28e10:
  store i64 167447, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28e1e() local_unnamed_addr {
dec_label_pc_28e1e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_28e75() local_unnamed_addr {
dec_label_pc_28e75:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable6rawsetEJviPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_28e80:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_28e80 = trunc i64 %arg2 to i32
  store i64 %arg3, i64* @r13, align 8
  store i64 %arg1, i64* @rbp, align 8
  store i64 %arg2, i64* @rbx, align 8
  %tmp247 = icmp slt i32 %v4_28e80, 1
  br i1 %tmp247, label %dec_label_pc_28e9f, label %dec_label_pc_28e94

dec_label_pc_28e94:                               ; preds = %dec_label_pc_28e80
  %v1_28e94 = add i64 %arg1, 8
  %v2_28e94 = inttoptr i64 %v1_28e94 to i64*
  %v3_28e94 = load i64, i64* %v2_28e94, align 8
  %v3_28e98 = add i64 %v3_28e94, 8
  %v4_28e98 = inttoptr i64 %v3_28e98 to i32*
  %v5_28e98 = load i32, i32* %v4_28e98, align 4
  %v9_28e9d = icmp sgt i32 %v4_28e80, %v5_28e98
  br i1 %v9_28e9d, label %dec_label_pc_28e9f, label %bb

bb:                                               ; preds = %dec_label_pc_28e94
  %v13_28e9d = call i64 @function_28f00(i64 %arg1, i64 %arg2, i64 %arg3)
  store i64 %v13_28e9d, i64* @rax, align 8
  br label %dec_label_pc_28e9f

dec_label_pc_28e9f:                               ; preds = %dec_label_pc_28e94, %bb, %dec_label_pc_28e80
  store i64 167590, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28edd(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_28edd:
  %v2_28edd = load i64, i64* @rbp, align 8
  store i64 %v2_28edd, i64* @rax, align 8
  %v0_28ee1 = load i64, i64* @r13, align 8
  store i64 %v0_28ee1, i64* @rdx, align 8
  store i64 %v2_28edd, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_28edd
}

define i64 @function_28f00(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_28f00:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg3, i64* @rax, align 8
  %v0_28f03 = load i64, i64* @rbx, align 8
  %v2_28f03 = add i64 %v0_28f03, 4294967295
  %v17_28f03 = and i64 %v2_28f03, 4294967295
  store i64 %v17_28f03, i64* @rbx, align 8
  store i64 %arg3, i64* @rdi, align 8
  %v0_28f16 = load i64, i64* @rbp, align 8
  %v1_28f16 = add i64 %v0_28f16, 32
  %v2_28f16 = inttoptr i64 %v1_28f16 to i64*
  %v3_28f16 = load i64, i64* %v2_28f16, align 8
  %v1_28f22 = inttoptr i64 %v3_28f16 to i64*
  %v2_28f22 = load i64, i64* %v1_28f22, align 8
  store i64 %v2_28f22, i64* @rax, align 8
  store i64 5, i64* @rdx, align 8
  %v1_28f32 = inttoptr i64 %v2_28f22 to i64*
  %v2_28f32 = load i64, i64* %v1_28f32, align 8
  store i64 %v2_28f32, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28f78(i64 %arg1) local_unnamed_addr {
dec_label_pc_28f78:
  store i64 %arg1, i64* @rdi, align 8
  %v0_28f78 = load i64, i64* inttoptr (i64 167807 to i64*), align 8
  store i64 %v0_28f78, i64* @rax, align 8
  %v1_28f7f = add i64 %v0_28f78, 8
  %v2_28f7f = inttoptr i64 %v1_28f7f to i32*
  %v3_28f7f = load i32, i32* %v2_28f7f, align 4
  %v5_28f7f = trunc i64 %arg1 to i32
  %v1_28f82 = add i64 %v0_28f78, 16
  store i64 %v1_28f82, i64* @rdx, align 8
  %tmp235 = icmp ugt i32 %v3_28f7f, %v5_28f7f
  br i1 %tmp235, label %dec_label_pc_28f88, label %dec_label_pc_28f94

dec_label_pc_28f88:                               ; preds = %dec_label_pc_28f78
  %v2_28f8b = mul i64 %arg1, 8
  %v3_28f8b = add i64 %v1_28f82, %v2_28f8b
  %v4_28f8b = inttoptr i64 %v3_28f8b to i64*
  %v5_28f8b = load i64, i64* %v4_28f8b, align 8
  store i64 %v5_28f8b, i64* @r12, align 8
  %v5_28f8f = call i64 @function_28edd(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_28f8f, i64* @rax, align 8
  ret i64 %v5_28f8f

dec_label_pc_28f94:                               ; preds = %dec_label_pc_28f78
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_28f9b() local_unnamed_addr {
dec_label_pc_28f9b:
  %v0_28f9b = load i64, i64* @rbx, align 8
  store i64 %v0_28f9b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$76$148onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_28fb0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_28fb6 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_28fb6, i64* @rbx, align 8
  %v0_28fb9 = load i64, i64* @rdi, align 8
  store i64 %v0_28fb9, i64* @rbp, align 8
  store i64 2, i64* @rax, align 8
  store i64 %v0_28fb6, i64* @rdi, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  %v1_28ff3 = add i64 %v0_28fb9, 24
  %v2_28ff3 = inttoptr i64 %v1_28ff3 to i64*
  %v3_28ff3 = load i64, i64* %v2_28ff3, align 8
  store i64 %v3_28ff3, i64* @rdi, align 8
  store i64 %v0_28fb6, i64* %rsi.global-to-local, align 8
  %v1_28ffa = inttoptr i64 %v3_28ff3 to i64*
  %v2_28ffa = load i64, i64* %v1_28ffa, align 8
  store i64 %v2_28ffa, i64* @rax, align 8
  store i64 %v2_28ffa, i64* @rbx, align 8
  %v1_29006 = inttoptr i64 %v2_28ffa to i64*
  %v2_29006 = load i64, i64* %v1_29006, align 8
  store i64 %v2_29006, i64* @rax, align 8
  %v0_29009 = load i64, i64* inttoptr (i64 167952 to i64*), align 16
  store i64 %v0_29009, i64* %rsi.global-to-local, align 8
  store i64 %v2_28ffa, i64* @rdi, align 8
  %v4_29019 = trunc i64 %v2_29006 to i8
  %v5_29019 = icmp eq i8 %v4_29019, 0
  %v1_2901b = icmp eq i1 %v5_29019, false
  br i1 %v1_2901b, label %bb, label %dec_label_pc_29021

bb:                                               ; preds = %dec_label_pc_28fb0
  %v2_2901b = call i64 @function_290b0()
  store i64 %v2_2901b, i64* @rax, align 8
  br label %dec_label_pc_29021

dec_label_pc_29021:                               ; preds = %bb, %dec_label_pc_28fb0
  store i64 167976, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_29088() local_unnamed_addr {
dec_label_pc_29088:
  store i64 168079, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_290b0() local_unnamed_addr {
dec_label_pc_290b0:
  store i64 168119, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_290bd = load i64, i64* inttoptr (i64 168132 to i64*), align 8
  store i64 %v0_290bd, i64* @rbp, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$198onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29100:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_29106 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_29106, i64* @rbx, align 8
  %v0_29109 = load i64, i64* @rdi, align 8
  store i64 %v0_29109, i64* @rbp, align 8
  store i64 2, i64* @rax, align 8
  store i64 %v0_29106, i64* @rdi, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  %v1_29143 = add i64 %v0_29109, 24
  %v2_29143 = inttoptr i64 %v1_29143 to i64*
  %v3_29143 = load i64, i64* %v2_29143, align 8
  store i64 %v3_29143, i64* @rdi, align 8
  store i64 %v0_29106, i64* %rsi.global-to-local, align 8
  %v1_2914a = inttoptr i64 %v3_29143 to i64*
  %v2_2914a = load i64, i64* %v1_2914a, align 8
  store i64 %v2_2914a, i64* @rax, align 8
  store i64 %v2_2914a, i64* @rbx, align 8
  %v1_29156 = inttoptr i64 %v2_2914a to i64*
  %v2_29156 = load i64, i64* %v1_29156, align 8
  store i64 %v2_29156, i64* @rax, align 8
  %v0_29159 = load i64, i64* inttoptr (i64 168288 to i64*), align 32
  store i64 %v0_29159, i64* %rsi.global-to-local, align 8
  store i64 %v2_2914a, i64* @rdi, align 8
  %v4_29169 = trunc i64 %v2_29156 to i8
  %v5_29169 = icmp eq i8 %v4_29169, 0
  %v1_2916b = icmp eq i1 %v5_29169, false
  br i1 %v1_2916b, label %bb, label %dec_label_pc_29171

bb:                                               ; preds = %dec_label_pc_29100
  %v2_2916b = call i64 @function_29200()
  store i64 %v2_2916b, i64* @rax, align 8
  br label %dec_label_pc_29171

dec_label_pc_29171:                               ; preds = %bb, %dec_label_pc_29100
  store i64 168312, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_291d8() local_unnamed_addr {
dec_label_pc_291d8:
  store i64 168415, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_29200() local_unnamed_addr {
dec_label_pc_29200:
  store i64 168455, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2920d = load i64, i64* inttoptr (i64 168468 to i64*), align 8
  store i64 %v0_2920d, i64* @rbp, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$44$34callEJPN3org4luaj3vm28LuaValueEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_29250:
  store i64 %arg1, i64* @rdi, align 8
  store i64 168542, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer7prependEJPS2_PNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29400:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_29407 = load i64, i64* %rsi.global-to-local, align 8
  %v0_2940b = load i64, i64* @rdi, align 8
  store i64 %v0_2940b, i64* @rbx, align 8
  %v1_2940e = add i64 %v0_2940b, 24
  %v2_2940e = inttoptr i64 %v1_2940e to i64*
  %v3_2940e = load i64, i64* %v2_2940e, align 8
  store i64 %v3_2940e, i64* @rdi, align 8
  %v1_29412 = add i64 %v0_29407, 20
  %v2_29412 = inttoptr i64 %v1_29412 to i32*
  %v3_29412 = load i32, i32* %v2_29412, align 4
  %v4_29412 = zext i32 %v3_29412 to i64
  store i64 %v4_29412, i64* @rbp, align 8
  %v1_29415 = icmp eq i64 %v3_2940e, 0
  br i1 %v1_29415, label %bb, label %dec_label_pc_2941e

bb:                                               ; preds = %dec_label_pc_29400
  %v1_29418 = call i64 @function_294a0()
  store i64 %v1_29418, i64* @rax, align 8
  br label %dec_label_pc_2941e

dec_label_pc_2941e:                               ; preds = %bb, %dec_label_pc_29400
  %v1_2941e = inttoptr i64 %v3_2940e to i64*
  %v2_2941e = load i64, i64* %v1_2941e, align 8
  store i64 %v2_2941e, i64* @rax, align 8
  %v1_29427 = add i64 %v2_2941e, 20
  %v2_29427 = inttoptr i64 %v1_29427 to i32*
  %v3_29427 = load i32, i32* %v2_29427, align 4
  %v4_29427 = zext i32 %v3_29427 to i64
  store i64 %v4_29427, i64* %rsi.global-to-local, align 8
  ret i64 %v2_2941e
}

define i64 @function_294a0() local_unnamed_addr {
dec_label_pc_294a0:
  %v0_294a0 = load i64, i64* @rbx, align 8
  %v1_294a0 = add i64 %v0_294a0, 8
  %v2_294a0 = inttoptr i64 %v1_294a0 to i64*
  %v3_294a0 = load i64, i64* %v2_294a0, align 8
  store i64 %v3_294a0, i64* @rdx, align 8
  %v1_294a4 = add i64 %v0_294a0, 20
  %v2_294a4 = inttoptr i64 %v1_294a4 to i32*
  %v3_294a4 = load i32, i32* %v2_294a4, align 4
  %v4_294a4 = zext i32 %v3_294a4 to i64
  store i64 %v4_294a4, i64* @rcx, align 8
  %v1_294a7 = add i64 %v0_294a0, 16
  %v2_294a7 = inttoptr i64 %v1_294a7 to i32*
  %v3_294a7 = load i32, i32* %v2_294a7, align 4
  %v4_294a7 = zext i32 %v3_294a7 to i64
  store i64 %v4_294a7, i64* @rax, align 8
  %v1_294aa = add i64 %v3_294a0, 8
  %v2_294aa = inttoptr i64 %v1_294aa to i32*
  %v3_294aa = load i32, i32* %v2_294aa, align 4
  %v4_294aa = zext i32 %v3_294aa to i64
  store i64 %v4_294aa, i64* @rdi, align 8
  %v1_294ad = sext i32 %v3_294a4 to i64
  %v4_294ad = add nsw i64 %v4_294a7, %v1_294ad
  %v8_294b2 = sext i32 %v3_294aa to i64
  %v9_294b2 = icmp sgt i64 %v4_294ad, %v8_294b2
  %v0_294b8.pre = load i64, i64* @rbp, align 8
  br i1 %v9_294b2, label %dec_label_pc_294b8, label %dec_label_pc_294b4

dec_label_pc_294b4:                               ; preds = %dec_label_pc_294a0
  br label %dec_label_pc_294b8

dec_label_pc_294b8:                               ; preds = %dec_label_pc_294a0, %dec_label_pc_294b4
  %v3_294b8 = add i64 %v0_294b8.pre, %v4_294a7
  %v4_294b8 = trunc i64 %v3_294b8 to i32
  %v10_294c6 = icmp sgt i32 %v4_294b8, 31
  br i1 %v10_294c6, label %bb, label %dec_label_pc_294c8

bb:                                               ; preds = %dec_label_pc_294b8
  %sext = mul i64 %v3_294b8, 4294967296
  %v19_294c6 = sdiv i64 %sext, 4294967296
  %v20_294c6 = call i64 @function_29518(i64 %v8_294b2, i64 32, i64 %v3_294a0, i64 %v1_294ad, i64 %v19_294c6)
  store i64 %v20_294c6, i64* @rax, align 8
  br label %dec_label_pc_294c8

dec_label_pc_294c8:                               ; preds = %bb, %dec_label_pc_294b8
  store i64 0, i64* @rax, align 8
  store i64 169188, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_29518(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_29518:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_29518 = load i64, i64* @rax, align 8
  ret i64 %v0_29518
}

define i64 @_ZN3org4luaj3vm28LuaTable3getEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29530:
  store i64 %arg1, i64* @rdi, align 8
  %v2_29537 = load i64, i64* @rdi, align 8
  store i64 %v2_29537, i64* @rbx, align 8
  store i64 169316, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_295f3() local_unnamed_addr {
dec_label_pc_295f3:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6invokeEJPNS1_7VarargsEP6JArrayIPS2_E(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29600:
  store i64 %arg1, i64* @rdi, align 8
  store i64 169488, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_29665(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_29665:
  %v2_29665 = load i64, i64* @r12, align 8
  store i64 %v2_29665, i64* @rax, align 8
  store i64 %v2_29665, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_29665
}

define i64 @function_29680() local_unnamed_addr {
dec_label_pc_29680:
  store i64 169607, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_296c0() local_unnamed_addr {
dec_label_pc_296c0:
  %v4_296c4 = call i64 @function_29665(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_296c4, i64* @rax, align 8
  ret i64 %v4_296c4
}

define i64 @function_296c6(i64 %arg1) local_unnamed_addr {
dec_label_pc_296c6:
  store i64 0, i64* @rdi, align 8
  %v12_296c6 = load i64, i64* @rax, align 8
  ret i64 %v12_296c6
}

define i64 @function_296cd() local_unnamed_addr {
dec_label_pc_296cd:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$69$28onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_296e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_296e4 = load i64, i64* @rdi, align 8
  %v0_296ed = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_296ed, i64* @rbx, align 8
  store i64 4, i64* @rax, align 8
  store i64 %v0_296ed, i64* @rdi, align 8
  store i64 5, i64* %rsi.global-to-local, align 8
  %v1_2974a = add i64 %v0_296e4, 24
  %v2_2974a = inttoptr i64 %v1_2974a to i64*
  %v3_2974a = load i64, i64* %v2_2974a, align 8
  store i64 %v3_2974a, i64* @rax, align 8
  %v1_2974e = add i64 %v0_296e4, 32
  %v2_2974e = inttoptr i64 %v1_2974e to i64*
  %v3_2974e = load i64, i64* %v2_2974e, align 8
  store i64 %v3_2974e, i64* @rbx, align 8
  %v1_29757 = add i64 %v0_296e4, 40
  %v2_29757 = inttoptr i64 %v1_29757 to i64*
  %v3_29757 = load i64, i64* %v2_29757, align 8
  store i64 %v3_29757, i64* @rax, align 8
  %v1_2975b = add i64 %v3_29757, 8
  %v2_2975b = inttoptr i64 %v1_2975b to i32*
  %v3_2975b = load i32, i32* %v2_2975b, align 4
  %v4_2975b = zext i32 %v3_2975b to i64
  store i64 %v4_2975b, i64* @rcx, align 8
  %v5_2975e = icmp eq i32 %v3_2975b, 0
  br i1 %v5_2975e, label %bb, label %dec_label_pc_29766

bb:                                               ; preds = %dec_label_pc_296e0
  %v2_29760 = call i64 @function_2994d(i64 %v0_296ed)
  store i64 %v2_29760, i64* @rax, align 8
  br label %dec_label_pc_29766

dec_label_pc_29766:                               ; preds = %bb, %dec_label_pc_296e0
  store i64 169841, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2994d(i64 %arg1) local_unnamed_addr {
dec_label_pc_2994d:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm229WeakTable$WeakKeyAndValueSlot3setEJPNS1_13LuaTable$SlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29960:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_29960 = load i64, i64* %r13.global-to-local, align 8
  %v0_29962 = load i64, i64* %r12.global-to-local, align 8
  %v0_29966 = load i64, i64* %rbp.global-to-local, align 8
  %v0_29967 = load i64, i64* @rbx, align 8
  %v0_29968 = load i64, i64* @rdi, align 8
  store i64 %v0_29968, i64* %rbp.global-to-local, align 8
  %v0_29972 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_29972, i64* @rbx, align 8
  store i64 %v0_29972, i64* @rax, align 8
  store i64 %v0_29972, i64* @rdi, align 8
  %v1_2998a = trunc i64 %v0_29972 to i32
  %v11_2998a = icmp eq i32 %v1_2998a, 7
  br i1 %v11_2998a, label %bb, label %dec_label_pc_2998f

bb:                                               ; preds = %dec_label_pc_29960
  %v1_2998d = call i64 @function_299f8()
  store i64 %v1_2998d, i64* @rax, align 8
  br label %dec_label_pc_2998f

dec_label_pc_2998f:                               ; preds = %bb, %dec_label_pc_29960
  %v0_299b0 = phi i64 [ %v1_2998d, %bb ], [ %v0_29972, %dec_label_pc_29960 ]
  %v9_2998f = icmp sgt i32 %v1_2998a, 7
  %v1_299b0 = trunc i64 %v0_299b0 to i32
  br i1 %v9_2998f, label %dec_label_pc_299b0, label %dec_label_pc_29991

dec_label_pc_29991:                               ; preds = %dec_label_pc_2998f
  %v6_29994 = icmp slt i32 %v1_299b0, 5
  br i1 %v6_29994, label %dec_label_pc_29996, label %dec_label_pc_299b5

dec_label_pc_29996:                               ; preds = %dec_label_pc_29991, %dec_label_pc_299b0
  %v0_29996 = load i64, i64* @rbx, align 8
  %v1_29996 = load i64, i64* %rbp.global-to-local, align 8
  %v2_29996 = add i64 %v1_29996, 16
  %v3_29996 = inttoptr i64 %v2_29996 to i64*
  store i64 %v0_29996, i64* %v3_29996, align 8
  %v0_2999a = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_2999a, i64* @rax, align 8
  store i64 %v0_29967, i64* @rbx, align 8
  store i64 %v0_29966, i64* %rbp.global-to-local, align 8
  store i64 %v0_29962, i64* %r12.global-to-local, align 8
  store i64 %v0_29960, i64* %r13.global-to-local, align 8
  ret i64 %v0_2999a

dec_label_pc_299b0:                               ; preds = %dec_label_pc_2998f
  %v11_299b0 = icmp eq i32 %v1_299b0, 8
  %v1_299b3 = icmp eq i1 %v11_299b0, false
  br i1 %v1_299b3, label %dec_label_pc_29996, label %dec_label_pc_299b5

dec_label_pc_299b5:                               ; preds = %dec_label_pc_29991, %dec_label_pc_299b0
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* %r12.global-to-local, align 8
  ret i64 0
}

define i64 @function_299f8() local_unnamed_addr {
dec_label_pc_299f8:
  store i64 170495, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm223WeakTable$WeakValueSlot3setEJPNS1_13LuaTable$SlotEPNS1_8LuaValueE"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29a80:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 170642, i64* @rdi, align 8
  %v0_29a92 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_29a92, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_29b18() local_unnamed_addr {
dec_label_pc_29b18:
  store i64 170783, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$168onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29ba0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_29ba0 = load i64, i64* %r12.global-to-local, align 8
  %v0_29ba2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_29ba3 = load i64, i64* @rdi, align 8
  store i64 %v0_29ba3, i64* %rbp.global-to-local, align 8
  %v0_29ba6 = load i64, i64* @rbx, align 8
  store i64 %v0_29ba6, i64* %stack_var_-24, align 8
  %v2_29ba7 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_29ba7, i64* @rax, align 8
  store i64 %v2_29ba7, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_29bb8 = add i64 %v0_29ba3, 24
  %v2_29bb8 = inttoptr i64 %v1_29bb8 to i64*
  %v3_29bb8 = load i64, i64* %v2_29bb8, align 8
  store i64 %v3_29bb8, i64* @rax, align 8
  %v1_29bbc = add i64 %v3_29bb8, 8
  %v2_29bbc = inttoptr i64 %v1_29bbc to i32*
  %v3_29bbc = load i32, i32* %v2_29bbc, align 4
  %v4_29bbc = zext i32 %v3_29bbc to i64
  store i64 %v4_29bbc, i64* @rdx, align 8
  %v5_29bbf = icmp eq i32 %v3_29bbc, 0
  br i1 %v5_29bbf, label %bb, label %dec_label_pc_29bc7

bb:                                               ; preds = %dec_label_pc_29ba0
  %v2_29bc1 = call i64 @function_29c5c(i64 %v2_29ba7)
  store i64 %v2_29bc1, i64* @rax, align 8
  br label %dec_label_pc_29bc7

dec_label_pc_29bc7:                               ; preds = %bb, %dec_label_pc_29ba0
  %v0_29bc7 = phi i64 [ %v2_29bc1, %bb ], [ %v3_29bb8, %dec_label_pc_29ba0 ]
  %v1_29bc7 = add i64 %v0_29bc7, 16
  %v2_29bc7 = inttoptr i64 %v1_29bc7 to i64*
  %v3_29bc7 = load i64, i64* %v2_29bc7, align 8
  store i64 %v3_29bc7, i64* @rdi, align 8
  %v1_29bcb = inttoptr i64 %v3_29bc7 to i64*
  %v2_29bcb = load i64, i64* %v1_29bcb, align 8
  store i64 %v2_29bcb, i64* @rax, align 8
  store i64 %v2_29bcb, i64* @rbx, align 8
  %v1_29bd7 = inttoptr i64 %v2_29bcb to i64*
  %v2_29bd7 = load i64, i64* %v1_29bd7, align 8
  store i64 %v2_29bd7, i64* @rax, align 8
  %v0_29bda = load i64, i64* inttoptr (i64 170977 to i64*), align 8
  store i64 %v0_29bda, i64* %rsi.global-to-local, align 8
  store i64 %v2_29bcb, i64* @rdi, align 8
  %v4_29bea = trunc i64 %v2_29bd7 to i8
  %v5_29bea = icmp eq i8 %v4_29bea, 0
  br i1 %v5_29bea, label %dec_label_pc_29c00, label %dec_label_pc_29bee

dec_label_pc_29bee:                               ; preds = %dec_label_pc_29bc7
  %v0_29bee = load i64, i64* inttoptr (i64 170997 to i64*), align 8
  store i64 %v0_29bee, i64* @rbx, align 8
  br label %dec_label_pc_29bf5

dec_label_pc_29bf5:                               ; preds = %dec_label_pc_29c00, %dec_label_pc_29bee
  %v0_29bf5 = phi i64 [ %v2_29bcb, %dec_label_pc_29c00 ], [ %v0_29bee, %dec_label_pc_29bee ]
  store i64 %v0_29bf5, i64* @rax, align 8
  %v2_29bf8 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_29bf8, i64* @rbx, align 8
  store i64 %v0_29ba2, i64* %rbp.global-to-local, align 8
  store i64 %v0_29ba0, i64* %r12.global-to-local, align 8
  ret i64 %v0_29bf5

dec_label_pc_29c00:                               ; preds = %dec_label_pc_29bc7
  %v0_29c00 = load i64, i64* %rbp.global-to-local, align 8
  %v1_29c00 = add i64 %v0_29c00, 32
  %v2_29c00 = inttoptr i64 %v1_29c00 to i64*
  %v3_29c00 = load i64, i64* %v2_29c00, align 8
  store i64 %v3_29c00, i64* @rdi, align 8
  store i64 %v2_29bcb, i64* %rsi.global-to-local, align 8
  %v1_29c07 = inttoptr i64 %v3_29c00 to i64*
  %v2_29c07 = load i64, i64* %v1_29c07, align 8
  store i64 %v2_29c07, i64* @rax, align 8
  %v1_29c10 = inttoptr i64 %v2_29c07 to i64*
  %v2_29c10 = load i64, i64* %v1_29c10, align 8
  store i64 %v2_29c10, i64* @rdx, align 8
  store i64 %v2_29c07, i64* @rdi, align 8
  %v4_29c1c = trunc i64 %v2_29c07 to i8
  %v5_29c1c = icmp eq i8 %v4_29c1c, 0
  %v1_29c1e = icmp eq i1 %v5_29c1c, false
  br i1 %v1_29c1e, label %dec_label_pc_29bf5, label %dec_label_pc_29c20

dec_label_pc_29c20:                               ; preds = %dec_label_pc_29c00
  store i64 171047, i64* @rdi, align 8
  %v1_29c27 = add i64 %v0_29c00, 40
  %v2_29c27 = inttoptr i64 %v1_29c27 to i64*
  %v3_29c27 = load i64, i64* %v2_29c27, align 8
  store i64 %v3_29c27, i64* %r12.global-to-local, align 8
  ret i64 %v2_29c07
}

define i64 @function_29c5c(i64 %arg1) local_unnamed_addr {
dec_label_pc_29c5c:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm223WeakTable$WeakValueSlotC1EPNS1_8LuaValueES4_PNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_29c70:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 171145, i64* @rdi, align 8
  %v0_29c89 = load i64, i64* @rdx, align 8
  store i64 %v0_29c89, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_29cd8() local_unnamed_addr {
dec_label_pc_29cd8:
  %v0_29cd8 = load i64, i64* @rax, align 8
  ret i64 %v0_29cd8
}

define i64 @function_29cdd() local_unnamed_addr {
dec_label_pc_29cdd:
  store i64 171236, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_29d20() local_unnamed_addr {
dec_label_pc_29d20:
  store i64 171303, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString11checknumberEJPNS1_9LuaNumberEPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29da0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v2_29da9 = load i64, i64* @rdi, align 8
  store i64 %v2_29da9, i64* @rax, align 8
  %v0_29db2 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_29db2 = call i64 @__asm_movsd.7465(i128 %v0_29db2)
  %v5_29db2 = load i64, i64* @rax, align 8
  ret i64 %v5_29db2
}

define i64 @function_29e50() local_unnamed_addr {
dec_label_pc_29e50:
  %cf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_29e50 = load i64, i64* inttoptr (i64 171608 to i64*), align 8
  %v1_29e50 = call i128 @__asm_movsd(i64 %v0_29e50)
  %v1_29e58 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_29e50, i128 %v1_29e58)
  %v0_29e5c = load i1, i1* %cf.global-to-local, align 1
  %v1_29e5c = icmp eq i1 %v0_29e5c, false
  br i1 %v1_29e5c, label %bb, label %dec_label_pc_29e50.dec_label_pc_29e5e_crit_edge

dec_label_pc_29e50.dec_label_pc_29e5e_crit_edge:  ; preds = %dec_label_pc_29e50
  %v3_29e5c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_29e5e

bb:                                               ; preds = %dec_label_pc_29e50
  %v2_29e5c = call i64 @function_29ec0()
  store i64 %v2_29e5c, i64* @rax, align 8
  br label %dec_label_pc_29e5e

dec_label_pc_29e5e:                               ; preds = %dec_label_pc_29e50.dec_label_pc_29e5e_crit_edge, %bb
  %v3_29e5c = phi i64 [ %v3_29e5c.pre, %dec_label_pc_29e50.dec_label_pc_29e5e_crit_edge ], [ %v2_29e5c, %bb ]
  ret i64 %v3_29e5c
}

define i64 @function_29e6b() local_unnamed_addr {
dec_label_pc_29e6b:
  %v0_29e6b = call i64 @function_ffffffffc0f1add6()
  store i64 %v0_29e6b, i64* @rax, align 8
  ret i64 %v0_29e6b
}

define i64 @function_29ec0() local_unnamed_addr {
dec_label_pc_29ec0:
  %v0_29ec5 = load i64, i64* @rax, align 8
  ret i64 %v0_29ec5
}

define i64 @function_29ed0() local_unnamed_addr {
dec_label_pc_29ed0:
  store i64 171735, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_29ede() local_unnamed_addr {
dec_label_pc_29ede:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_29f35() local_unnamed_addr {
dec_label_pc_29f35:
  %v0_29f35 = load i64, i64* @rbx, align 8
  store i64 %v0_29f35, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$76$118onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_29f50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 171910, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2a1b0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2a1b0:
  %r13.global-to-local = alloca i64, align 8
  %v0_2a1b0 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_2a1b0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v0_2a1b0
}

define i64 @function_2a1c2(i64 %arg1) local_unnamed_addr {
dec_label_pc_2a1c2:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib15MathLib$UnaryOp4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2a1d0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2a1d2 = load i64, i64* @rdi, align 8
  store i64 %v0_2a1d2, i64* @rbx, align 8
  store i64 172536, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2a1fa = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2a1fa = call i64 @__asm_movsd.7465(i128 %v0_2a1fa)
  %v5_2a1fa = load i64, i64* @rax, align 8
  ret i64 %v5_2a1fa
}

define i64 @function_2a2a0() local_unnamed_addr {
dec_label_pc_2a2a0:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_2a2a5 = load i128, i128* @xmm0, align 8
  %v1_2a2a5 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_2a2a5, i128 %v1_2a2a5)
  %v0_2a2a9 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2a2a9, label %bb, label %dec_label_pc_2a2a0.dec_label_pc_2a2ab_crit_edge

dec_label_pc_2a2a0.dec_label_pc_2a2ab_crit_edge:  ; preds = %dec_label_pc_2a2a0
  %v0_2a2ab.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2a2ab

bb:                                               ; preds = %dec_label_pc_2a2a0
  %v1_2a2a9 = call i64 @function_2a2ad()
  store i64 %v1_2a2a9, i64* @rax, align 8
  br label %dec_label_pc_2a2ab

dec_label_pc_2a2ab:                               ; preds = %dec_label_pc_2a2a0.dec_label_pc_2a2ab_crit_edge, %bb
  %v0_2a2ab = phi i64 [ %v0_2a2ab.pre, %dec_label_pc_2a2a0.dec_label_pc_2a2ab_crit_edge ], [ %v1_2a2a9, %bb ]
  ret i64 %v0_2a2ab
}

define i64 @function_2a2ad() local_unnamed_addr {
dec_label_pc_2a2ad:
  store i64 172724, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2a2b6 = load i128, i128* @xmm0, align 8
  %v1_2a2b6 = call i64 @__asm_movsd.7465(i128 %v0_2a2b6)
  %v5_2a2b6 = load i64, i64* @rax, align 8
  ret i64 %v5_2a2b6
}

define i64 @function_2a2e8() local_unnamed_addr {
dec_label_pc_2a2e8:
  %v0_2a2ed = load i64, i64* @rax, align 8
  ret i64 %v0_2a2ed
}

define i64 @function_2a2f0() local_unnamed_addr {
dec_label_pc_2a2f0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2a2fe() local_unnamed_addr {
dec_label_pc_2a2fe:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2a324() local_unnamed_addr {
dec_label_pc_2a324:
  %pf.global-to-local = alloca i1, align 1
  %v0_2a324 = load i128, i128* @xmm0, align 8
  %v1_2a324 = load i64, i64* inttoptr (i64 172844 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2a324, i64 %v1_2a324)
  %v0_2a32c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2a32c, label %bb, label %dec_label_pc_2a324.dec_label_pc_2a332_crit_edge

dec_label_pc_2a324.dec_label_pc_2a332_crit_edge:  ; preds = %dec_label_pc_2a324
  %v2_2a32c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2a332

bb:                                               ; preds = %dec_label_pc_2a324
  %v1_2a32c = call i64 @function_2a2ad()
  store i64 %v1_2a32c, i64* @rax, align 8
  br label %dec_label_pc_2a332

dec_label_pc_2a332:                               ; preds = %dec_label_pc_2a324.dec_label_pc_2a332_crit_edge, %bb
  %v2_2a32c = phi i64 [ %v2_2a32c.pre, %dec_label_pc_2a324.dec_label_pc_2a332_crit_edge ], [ %v1_2a32c, %bb ]
  ret i64 %v2_2a32c
}

define i64 @function_2a355() local_unnamed_addr {
dec_label_pc_2a355:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$118onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2a360:
  store i64 %arg1, i64* @rdi, align 8
  store i64 172950, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2a5d8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2a5d8:
  %r13.global-to-local = alloca i64, align 8
  %v0_2a5d8 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_2a5d8, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v0_2a5d8
}

define i64 @function_2a5ea(i64 %arg1) local_unnamed_addr {
dec_label_pc_2a5ea:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib7MathLib4dpowEJPNS1_8LuaValueEdd() local_unnamed_addr {
dec_label_pc_2a600:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 173577, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2a60f = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2a60f = call i64 @__asm_movsd.7465(i128 %v0_2a60f)
  %v0_2a615 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_2a615 = call i64 @__asm_movsd.7465(i128 %v0_2a615)
  %v4_2a615 = load i64, i64* @rax, align 8
  ret i64 %v4_2a615
}

define i64 @function_2a6e0() local_unnamed_addr {
dec_label_pc_2a6e0:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_2a6e5 = load i128, i128* @xmm0, align 8
  %v1_2a6e5 = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_2a6e5, i128 %v1_2a6e5)
  %v0_2a6e9 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2a6e9, label %bb, label %dec_label_pc_2a6e0.dec_label_pc_2a6eb_crit_edge

dec_label_pc_2a6e0.dec_label_pc_2a6eb_crit_edge:  ; preds = %dec_label_pc_2a6e0
  %v0_2a6eb.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2a6eb

bb:                                               ; preds = %dec_label_pc_2a6e0
  %v1_2a6e9 = call i64 @function_2a6ed()
  store i64 %v1_2a6e9, i64* @rax, align 8
  br label %dec_label_pc_2a6eb

dec_label_pc_2a6eb:                               ; preds = %dec_label_pc_2a6e0.dec_label_pc_2a6eb_crit_edge, %bb
  %v0_2a6eb = phi i64 [ %v0_2a6eb.pre, %dec_label_pc_2a6e0.dec_label_pc_2a6eb_crit_edge ], [ %v1_2a6e9, %bb ]
  ret i64 %v0_2a6eb
}

define i64 @function_2a6ed() local_unnamed_addr {
dec_label_pc_2a6ed:
  store i64 173812, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2a6f6 = load i128, i128* @xmm0, align 8
  %v1_2a6f6 = call i64 @__asm_movsd.7465(i128 %v0_2a6f6)
  %v4_2a6f6 = load i64, i64* @rax, align 8
  ret i64 %v4_2a6f6
}

define i64 @function_2a720() local_unnamed_addr {
dec_label_pc_2a720:
  %v0_2a725 = load i64, i64* @rax, align 8
  ret i64 %v0_2a725
}

define i64 @function_2a730() local_unnamed_addr {
dec_label_pc_2a730:
  %v0_2a735 = load i64, i64* @rax, align 8
  ret i64 %v0_2a735
}

define i64 @function_2a740() local_unnamed_addr {
dec_label_pc_2a740:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2a74e() local_unnamed_addr {
dec_label_pc_2a74e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2a774() local_unnamed_addr {
dec_label_pc_2a774:
  %pf.global-to-local = alloca i1, align 1
  %v0_2a774 = load i128, i128* @xmm0, align 8
  %v1_2a774 = load i64, i64* inttoptr (i64 173948 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2a774, i64 %v1_2a774)
  %v0_2a77c = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2a77c, label %bb, label %dec_label_pc_2a774.dec_label_pc_2a782_crit_edge

dec_label_pc_2a774.dec_label_pc_2a782_crit_edge:  ; preds = %dec_label_pc_2a774
  %v2_2a77c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2a782

bb:                                               ; preds = %dec_label_pc_2a774
  %v1_2a77c = call i64 @function_2a6ed()
  store i64 %v1_2a77c, i64* @rax, align 8
  br label %dec_label_pc_2a782

dec_label_pc_2a782:                               ; preds = %dec_label_pc_2a774.dec_label_pc_2a782_crit_edge, %bb
  %v2_2a77c = phi i64 [ %v2_2a77c.pre, %dec_label_pc_2a774.dec_label_pc_2a782_crit_edge ], [ %v1_2a77c, %bb ]
  ret i64 %v2_2a77c
}

define i64 @function_2a7a5() local_unnamed_addr {
dec_label_pc_2a7a5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble7valueOfEJPNS1_9LuaNumberEd() local_unnamed_addr {
dec_label_pc_2a7b0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 174009, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2a7bf = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2a7bf = call i64 @__asm_movsd.7465(i128 %v0_2a7bf)
  %v5_2a7bf = load i64, i64* @rax, align 8
  ret i64 %v5_2a7bf
}

define i64 @function_2a8a0() local_unnamed_addr {
dec_label_pc_2a8a0:
  %v0_2a8a5 = load i64, i64* @rax, align 8
  ret i64 %v0_2a8a5
}

define i64 @function_2a8b0() local_unnamed_addr {
dec_label_pc_2a8b0:
  store i64 174263, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2a8be() local_unnamed_addr {
dec_label_pc_2a8be:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2a8e4() local_unnamed_addr {
dec_label_pc_2a8e4:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_2a8e4 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2a8e4 = load i64, i64* inttoptr (i64 174316 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2a8e4, i64 %v1_2a8e4)
  store i64 174335, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2a915() local_unnamed_addr {
dec_label_pc_2a915:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble4ddivEJPNS1_8LuaValueEdd() local_unnamed_addr {
dec_label_pc_2a920:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 174375, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2a92d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2a92d = call i64 @__asm_movsd.7465(i128 %v0_2a92d)
  %v0_2a933 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_2a933 = call i64 @__asm_movsd.7465(i128 %v0_2a933)
  %v4_2a933 = load i64, i64* @rax, align 8
  ret i64 %v4_2a933
}

define i64 @_ZN3org4luaj3vm210LuaInteger7valueOfEJPNS1_9LuaNumberEx(i64 %arg1) local_unnamed_addr {
dec_label_pc_2a9b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2a9b1 = load i64, i64* @rdi, align 8
  store i64 %v0_2a9b1, i64* @rbx, align 8
  store i64 174523, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2aa41() local_unnamed_addr {
dec_label_pc_2aa41:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble4dmodEJPNS1_8LuaValueEdd() local_unnamed_addr {
dec_label_pc_2aa50:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 174679, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2aa5d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2aa5d = call i64 @__asm_movsd.7465(i128 %v0_2aa5d)
  %v0_2aa63 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_2aa63 = call i64 @__asm_movsd.7465(i128 %v0_2aa63)
  %v4_2aa63 = load i64, i64* @rax, align 8
  ret i64 %v4_2aa63
}

define i64 @function_2aa93() local_unnamed_addr {
dec_label_pc_2aa93:
  %xmm0.global-to-local = alloca i128, align 8
  %v0_2aa93 = load i64, i64* @rax, align 8
  %v1_2aa93 = trunc i64 %v0_2aa93 to i32
  %v8_2aa93 = icmp eq i32 %v1_2aa93, 0
  br i1 %v8_2aa93, label %dec_label_pc_2aa9a, label %dec_label_pc_2aaa4

dec_label_pc_2aa9a:                               ; preds = %dec_label_pc_2aa93
  %v0_2aa9a = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2aa9a = load i64, i64* inttoptr (i64 174754 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2aa9a, i64 %v1_2aa9a)
  %v0_2aaa2.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2aaa4

dec_label_pc_2aaa4:                               ; preds = %dec_label_pc_2aa93, %dec_label_pc_2aa9a
  %v0_2aaa2 = phi i64 [ %v0_2aa93, %dec_label_pc_2aa93 ], [ %v0_2aaa2.pre, %dec_label_pc_2aa9a ]
  ret i64 %v0_2aaa2
}

define i64 @function_2aaaa() local_unnamed_addr {
dec_label_pc_2aaaa:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  %v2_2aaaa = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_2aaaa = load i64, i64* @rax, align 8
  %v4_2aaaa = trunc i64 %v3_2aaaa to i8
  %v5_2aaaa = add i8 %v4_2aaaa, %v2_2aaaa
  %v10_2aaaa = icmp ult i8 %v5_2aaaa, %v2_2aaaa
  store i1 %v10_2aaaa, i1* %cf.global-to-local, align 1
  %v15_2aaaa = icmp eq i8 %v5_2aaaa, 0
  store i1 %v15_2aaaa, i1* %zf.global-to-local, align 1
  %v21_2aaaa = inttoptr i64 %v3_2aaaa to i8*
  store i8 %v5_2aaaa, i8* %v21_2aaaa, align 1
  %v0_2aaac = load i1, i1* %cf.global-to-local, align 1
  %v1_2aaac = load i1, i1* %zf.global-to-local, align 1
  %v2_2aaac = or i1 %v0_2aaac, %v1_2aaac
  br i1 %v2_2aaac, label %dec_label_pc_2aaae, label %dec_label_pc_2aabc

dec_label_pc_2aaae:                               ; preds = %dec_label_pc_2aaaa
  %v0_2aaae = load i64, i64* inttoptr (i64 174774 to i64*), align 8
  %v1_2aaae = call i128 @__asm_movsd(i64 %v0_2aaae)
  %v1_2aab6 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_2aaae, i128 %v1_2aab6)
  br label %dec_label_pc_2aabc

dec_label_pc_2aabc:                               ; preds = %dec_label_pc_2aaaa, %dec_label_pc_2aaae
  %v0_2aaba = load i64, i64* @rax, align 8
  ret i64 %v0_2aaba
}

define i64 @function_2aabe(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2aabe:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %xmm2.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2aabe = load i64, i64* @rax, align 8
  %v1_2aabe = trunc i64 %v0_2aabe to i32
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_2aabe = icmp eq i32 %v1_2aabe, 0
  store i1 %v2_2aabe, i1* %zf.global-to-local, align 1
  br i1 %v2_2aabe, label %dec_label_pc_2aac6, label %dec_label_pc_2aaf0

dec_label_pc_2aac6:                               ; preds = %dec_label_pc_2aabe
  %v0_2aac6 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_2aac6 = load i64, i64* inttoptr (i64 174798 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2aac6, i64 %v1_2aac6)
  %v0_2aace = load i1, i1* %cf.global-to-local, align 1
  %v1_2aace = load i1, i1* %zf.global-to-local, align 1
  %v2_2aace = or i1 %v0_2aace, %v1_2aace
  br i1 %v2_2aace, label %dec_label_pc_2aaf0, label %dec_label_pc_2aad0

dec_label_pc_2aad0:                               ; preds = %dec_label_pc_2aac6
  %v3_2aace = load i64, i64* @rax, align 8
  ret i64 %v3_2aace

dec_label_pc_2aaf0:                               ; preds = %dec_label_pc_2aabe, %dec_label_pc_2aac6
  %v0_2aaf0 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_2aaf0 = load i64, i64* inttoptr (i64 174840 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2aaf0, i64 %v1_2aaf0)
  %v0_2aaf8 = load i1, i1* %cf.global-to-local, align 1
  %v1_2aaf8 = load i1, i1* %zf.global-to-local, align 1
  %v2_2aaf8 = or i1 %v0_2aaf8, %v1_2aaf8
  br i1 %v2_2aaf8, label %dec_label_pc_2aafa, label %dec_label_pc_2ab20

dec_label_pc_2aafa:                               ; preds = %dec_label_pc_2aaf0
  %v4_2aaf8 = load i64, i64* @rax, align 8
  ret i64 %v4_2aaf8

dec_label_pc_2ab20:                               ; preds = %dec_label_pc_2aaf0
  %v0_2ab20 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2ab20 = call i128 @__asm_movapd(i128 %v0_2ab20)
  %v0_2ab24 = load i64, i64* inttoptr (i64 174892 to i64*), align 8
  %v1_2ab24 = call i128 @__asm_movsd(i64 %v0_2ab24)
  %v1_2ab2c = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2ab2c = call i128 @__asm_divsd(i128 %v1_2ab20, i128 %v1_2ab2c)
  %v0_2ab30 = load i64, i64* inttoptr (i64 174904 to i64*), align 8
  %v1_2ab30 = call i128 @__asm_movsd(i64 %v0_2ab30)
  %v1_2ab38 = call i128 @__asm_movapd(i128 %v2_2ab2c)
  %v1_2ab3c = call i128 @__asm_movapd(i128 %v2_2ab2c)
  store i128 %v1_2ab3c, i128* %xmm2.global-to-local, align 8
  %v2_2ab40 = call i128 @__asm_andpd(i128 %v1_2ab38, i128 %v1_2ab24)
  call void @__asm_ucomisd(i128 %v1_2ab30, i128 %v2_2ab40)
  %v0_2ab48 = load i1, i1* %cf.global-to-local, align 1
  %v1_2ab48 = load i1, i1* %zf.global-to-local, align 1
  %v2_2ab48 = or i1 %v0_2ab48, %v1_2ab48
  br i1 %v2_2ab48, label %dec_label_pc_2ab20.dec_label_pc_2ab4a_crit_edge, label %dec_label_pc_2ab58

dec_label_pc_2ab20.dec_label_pc_2ab4a_crit_edge:  ; preds = %dec_label_pc_2ab20
  %v1_2ab4a.pre = load i128, i128* %xmm2.global-to-local, align 8
  br label %dec_label_pc_2ab4a

dec_label_pc_2ab4a:                               ; preds = %dec_label_pc_2ab20.dec_label_pc_2ab4a_crit_edge, %dec_label_pc_2ab58
  %v1_2ab4a = phi i128 [ %v1_2ab4a.pre, %dec_label_pc_2ab20.dec_label_pc_2ab4a_crit_edge ], [ %v2_2ab8b, %dec_label_pc_2ab58 ]
  %v0_2ab4a = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2ab4a = call i128 @__asm_mulsd(i128 %v0_2ab4a, i128 %v1_2ab4a)
  store i128 %v2_2ab4a, i128* %xmm1.global-to-local, align 8
  %v0_2ab4e = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2ab4e = call i128 @__asm_subsd(i128 %v0_2ab4e, i128 %v2_2ab4a)
  store i128 %v2_2ab4e, i128* %xmm0.global-to-local, align 8
  %v0_2aae2 = load i64, i64* @rsp, align 8
  %v5_2aae2 = icmp ugt i64 %v0_2aae2, -25
  store i1 %v5_2aae2, i1* %cf.global-to-local, align 1
  %v10_2aae2 = icmp eq i64 %v0_2aae2, -24
  store i1 %v10_2aae2, i1* %zf.global-to-local, align 1
  %v0_2aae6 = load i64, i64* @rax, align 8
  ret i64 %v0_2aae6

dec_label_pc_2ab58:                               ; preds = %dec_label_pc_2ab20
  %v1_2ab58 = call i64 @__asm_cvttsd2si.7470(i128 %v2_2ab2c)
  store i64 %v1_2ab58, i64* @rax, align 8
  %v2_2ab5d = call i128 @__asm_pxor(i128 %v2_2ab40, i128 %v2_2ab40)
  %v0_2ab61 = load i64, i64* inttoptr (i64 174953 to i64*), align 8
  %v1_2ab61 = call i128 @__asm_movsd(i64 %v0_2ab61)
  %v2_2ab69 = call i128 @__asm_andnpd(i128 %v1_2ab24, i128 %v2_2ab2c)
  %v0_2ab6d = load i64, i64* @rax, align 8
  %v1_2ab6d = call i128 @__asm_cvtsi2sd(i64 %v0_2ab6d)
  %v1_2ab72 = call i128 @__asm_movapd(i128 %v1_2ab6d)
  %v2_2ab76 = call i128 @__asm_cmpnlesd(i128 %v1_2ab72, i128 %v2_2ab2c)
  %v1_2ab7b = call i128 @__asm_movapd(i128 %v2_2ab76)
  store i128 %v1_2ab7b, i128* %xmm2.global-to-local, align 8
  %v2_2ab7f = call i128 @__asm_andpd(i128 %v1_2ab7b, i128 %v1_2ab61)
  store i128 %v2_2ab7f, i128* %xmm2.global-to-local, align 8
  %v2_2ab83 = call i128 @__asm_subsd(i128 %v1_2ab6d, i128 %v2_2ab7f)
  %v1_2ab87 = call i128 @__asm_movapd(i128 %v2_2ab83)
  store i128 %v1_2ab87, i128* %xmm2.global-to-local, align 8
  %v2_2ab8b = call i128 @__asm_orpd(i128 %v1_2ab87, i128 %v2_2ab69)
  store i128 %v2_2ab8b, i128* %xmm2.global-to-local, align 8
  br label %dec_label_pc_2ab4a
}

define i64 @_ZN3org4luaj3vm29LuaString3negEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2aba0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2aba1 = load i64, i64* @rdi, align 8
  store i64 %v0_2aba1, i64* @rbx, align 8
  store i64 %v0_2aba1, i64* @rax, align 8
  %v0_2abb1 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2abb1 = call i64 @__asm_movsd.7465(i128 %v0_2abb1)
  %v5_2abb1 = load i64, i64* @rax, align 8
  ret i64 %v5_2abb1
}

define i64 @_ZN3org4luaj3vm29LuaString8tonumberEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ac20:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_2ac24 = load i64, i64* @rdi, align 8
  store i64 %v2_2ac24, i64* @rax, align 8
  %v0_2ac2d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2ac2d = call i64 @__asm_movsd.7465(i128 %v0_2ac2d)
  %v5_2ac2d = load i64, i64* @rax, align 8
  ret i64 %v5_2ac2d
}

define i64 @_ZN3org4luaj3vm29LuaString8tonumberEJPNS1_8LuaValueEi(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ac70:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_2ac74 = load i64, i64* @rdi, align 8
  store i64 %v2_2ac74, i64* @rax, align 8
  %v0_2ac7d = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2ac7d = call i64 @__asm_movsd.7465(i128 %v0_2ac7d)
  %v5_2ac7d = load i64, i64* @rax, align 8
  ret i64 %v5_2ac7d
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib11freadnumberEJPNS1_8LuaValueEPNS2_10IoLib$FileE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_2acc0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2acc8 = load i64, i64* @rdi, align 8
  store i64 %v0_2acc8, i64* @rbx, align 8
  store i64 175314, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2ae89(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_2ae89:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2ae89 = load i64, i64* @rdx, align 8
  store i64 %v0_2ae89, i64* @rax, align 8
  store i64 %arg4, i64* @rbx, align 8
  ret i64 %v0_2ae89
}

define i64 @function_2ae97() local_unnamed_addr {
dec_label_pc_2ae97:
  %rbp.global-to-local = alloca i64, align 8
  %v2_2ae97 = load i64, i64* @rbx, align 8
  store i64 %v2_2ae97, i64* @rax, align 8
  %v0_2aea3 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_2aea3, i64* @rdi, align 8
  ret i64 %v2_2ae97
}

define i64 @function_2aed6() local_unnamed_addr {
dec_label_pc_2aed6:
  %rbp.global-to-local = alloca i64, align 8
  %v2_2aed6 = load i64, i64* @rbx, align 8
  store i64 %v2_2aed6, i64* @rax, align 8
  %v0_2aee2 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_2aee2, i64* @rdi, align 8
  ret i64 %v2_2aed6
}

define i64 @function_2af15() local_unnamed_addr {
dec_label_pc_2af15:
  %rbp.global-to-local = alloca i64, align 8
  %v2_2af15 = load i64, i64* @rbx, align 8
  store i64 %v2_2af15, i64* @rax, align 8
  %v0_2af21 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_2af21, i64* @rdi, align 8
  ret i64 %v2_2af15
}

define i64 @function_2af54() local_unnamed_addr {
dec_label_pc_2af54:
  %rbp.global-to-local = alloca i64, align 8
  %v2_2af54 = load i64, i64* @rbx, align 8
  store i64 %v2_2af54, i64* @rax, align 8
  %v0_2af60 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_2af60, i64* @rdi, align 8
  ret i64 %v2_2af54
}

define i64 @function_2af93() local_unnamed_addr {
dec_label_pc_2af93:
  %v2_2af93 = load i64, i64* @rbx, align 8
  store i64 %v2_2af93, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue11arithmtwithEJPS2_S3_d(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2afb0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2afb7 = load i64, i64* @rdi, align 8
  store i64 %v0_2afb7, i64* @rbx, align 8
  store i64 %v0_2afb7, i64* @rax, align 8
  %v0_2afc1 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2afc1 = call i64 @__asm_movsd.7465(i128 %v0_2afc1)
  store i64 176107, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2b098() local_unnamed_addr {
dec_label_pc_2b098:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger3mulEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2b0a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b0aa = load i64, i64* @rdi, align 8
  %v1_2b0aa = add i64 %v0_2b0aa, 8
  %v2_2b0aa = inttoptr i64 %v1_2b0aa to i32*
  %v3_2b0aa = load i32, i32* %v2_2b0aa, align 4
  %v4_2b0aa = sext i32 %v3_2b0aa to i64
  store i64 176309, i64* @rdi, align 8
  %v4_2b0b5 = mul i64 %v4_2b0aa, %arg2
  store i64 %v4_2b0b5, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_2b139() local_unnamed_addr {
dec_label_pc_2b139:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger3addEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2b140:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b14a = load i64, i64* @rdi, align 8
  %v1_2b14a = add i64 %v0_2b14a, 8
  %v2_2b14a = inttoptr i64 %v1_2b14a to i32*
  %v3_2b14a = load i32, i32* %v2_2b14a, align 4
  %v4_2b14a = sext i32 %v3_2b14a to i64
  store i64 176469, i64* @rdi, align 8
  %v2_2b155 = add i64 %v4_2b14a, %arg2
  store i64 %v2_2b155, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_2b1d1() local_unnamed_addr {
dec_label_pc_2b1d1:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger3negEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b1e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b1e7 = load i64, i64* @rdi, align 8
  %v1_2b1e7 = add i64 %v0_2b1e7, 8
  %v2_2b1e7 = inttoptr i64 %v1_2b1e7 to i32*
  %v3_2b1e7 = load i32, i32* %v2_2b1e7, align 4
  %v4_2b1e7 = sext i32 %v3_2b1e7 to i64
  store i64 %v4_2b1e7, i64* @rbx, align 8
  store i64 176626, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2b271() local_unnamed_addr {
dec_label_pc_2b271:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger7subFromEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2b280:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v0_2b288 = load i64, i64* @rdi, align 8
  %v1_2b288 = add i64 %v0_2b288, 8
  %v2_2b288 = inttoptr i64 %v1_2b288 to i32*
  %v3_2b288 = load i32, i32* %v2_2b288, align 4
  %v4_2b288 = sext i32 %v3_2b288 to i64
  store i64 176787, i64* @rdi, align 8
  %v2_2b293 = sub i64 %arg2, %v4_2b288
  store i64 %v2_2b293, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2b311() local_unnamed_addr {
dec_label_pc_2b311:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble3divEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b320:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b326 = load i64, i64* @rdi, align 8
  %v1_2b326 = add i64 %v0_2b326, 8
  %v2_2b326 = inttoptr i64 %v1_2b326 to i64*
  %v3_2b326 = load i64, i64* %v2_2b326, align 8
  %v4_2b326 = call i128 @__asm_movsd(i64 %v3_2b326)
  store i64 176946, i64* @rdi, align 8
  %v0_2b332 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b332 = call i64 @__asm_movsd.7465(i128 %v0_2b332)
  %v1_2b338 = call i64 @__asm_movsd.7465(i128 %v4_2b326)
  %v4_2b338 = load i64, i64* @rax, align 8
  ret i64 %v4_2b338
}

define i64 @_ZN3org4luaj3vm29LuaDouble7divIntoEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b3b0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b3b6 = load i64, i64* @rdi, align 8
  %v1_2b3b6 = add i64 %v0_2b3b6, 8
  %v2_2b3b6 = inttoptr i64 %v1_2b3b6 to i64*
  %v3_2b3b6 = load i64, i64* %v2_2b3b6, align 8
  %v4_2b3b6 = call i128 @__asm_movsd(i64 %v3_2b3b6)
  store i64 177090, i64* @rdi, align 8
  %v0_2b3c2 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b3c2 = call i64 @__asm_movsd.7465(i128 %v0_2b3c2)
  %v1_2b3c8 = call i64 @__asm_movsd.7465(i128 %v4_2b3b6)
  %v4_2b3c8 = load i64, i64* @rax, align 8
  ret i64 %v4_2b3c8
}

define i64 @_ZN3org4luaj3vm29LuaDouble3divEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2b440:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %xmm2.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2b440 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2b440 = call i128 @__asm_pxor(i128 %v0_2b440, i128 %v0_2b440)
  store i128 %v2_2b440, i128* %xmm1.global-to-local, align 8
  %v0_2b444 = load i64, i64* @rsp, align 8
  %v1_2b444 = add i64 %v0_2b444, -24
  %v5_2b444 = icmp ult i64 %v0_2b444, 24
  store i1 %v5_2b444, i1* %cf.global-to-local, align 1
  %v10_2b444 = icmp eq i64 %v1_2b444, 0
  store i1 %v10_2b444, i1* %zf.global-to-local, align 1
  %v12_2b444 = trunc i64 %v1_2b444 to i8
  %v13_2b444 = call i8 @llvm.ctpop.i8(i8 %v12_2b444)
  %v14_2b444 = urem i8 %v13_2b444, 2
  %v15_2b444 = icmp eq i8 %v14_2b444, 0
  store i1 %v15_2b444, i1* %pf.global-to-local, align 1
  %v0_2b448 = load i64, i64* @rdi, align 8
  %v1_2b448 = add i64 %v0_2b448, 8
  %v2_2b448 = inttoptr i64 %v1_2b448 to i64*
  %v3_2b448 = load i64, i64* %v2_2b448, align 8
  %v4_2b448 = call i128 @__asm_movsd(i64 %v3_2b448)
  store i64 177236, i64* @rdi, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  store i1 true, i1* %pf.global-to-local, align 1
  store i64 0, i64* @rax, align 8
  %v1_2b456 = trunc i64 %arg2 to i32
  %v2_2b456 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2b456)
  store i128 %v2_2b456, i128* %xmm1.global-to-local, align 8
  %v1_2b45a = call i64 @__asm_movsd.7465(i128 %v4_2b448)
  %v1_2b460 = call i64 @__asm_movsd.7465(i128 %v2_2b456)
  %v0_2b46a = load i128, i128* %xmm2.global-to-local, align 8
  %v2_2b46a = call i128 @__asm_pxor(i128 %v0_2b46a, i128 %v0_2b46a)
  store i128 %v2_2b46a, i128* %xmm2.global-to-local, align 8
  %v3_2b46e = call i128 @__asm_movsd(i64 %v1_2b460)
  store i128 %v3_2b46e, i128* %xmm1.global-to-local, align 8
  %v4_2b473 = call i128 @__asm_movsd(i64 %v1_2b45a)
  call void @__asm_ucomisd(i128 %v3_2b46e, i128 %v2_2b46a)
  %v0_2b47d = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2b47d, label %dec_label_pc_2b481, label %dec_label_pc_2b47f

dec_label_pc_2b47f:                               ; preds = %dec_label_pc_2b440
  %v0_2b47f = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_2b47f, label %dec_label_pc_2b490, label %dec_label_pc_2b481

dec_label_pc_2b481:                               ; preds = %dec_label_pc_2b47f, %dec_label_pc_2b440
  %v2_2b481 = call i128 @__asm_divsd(i128 %v4_2b473, i128 %v3_2b46e)
  %v0_2b48a = load i64, i64* @rsp, align 8
  %v1_2b48a = add i64 %v0_2b48a, 24
  %v5_2b48a = icmp ugt i64 %v0_2b48a, -25
  store i1 %v5_2b48a, i1* %cf.global-to-local, align 1
  %v10_2b48a = icmp eq i64 %v1_2b48a, 0
  store i1 %v10_2b48a, i1* %zf.global-to-local, align 1
  %v12_2b48a = trunc i64 %v1_2b48a to i8
  %v13_2b48a = call i8 @llvm.ctpop.i8(i8 %v12_2b48a)
  %v14_2b48a = urem i8 %v13_2b48a, 2
  %v15_2b48a = icmp eq i8 %v14_2b48a, 0
  store i1 %v15_2b48a, i1* %pf.global-to-local, align 1
  %v0_2b48e = load i64, i64* @rax, align 8
  ret i64 %v0_2b48e

dec_label_pc_2b490:                               ; preds = %dec_label_pc_2b47f
  call void @__asm_ucomisd(i128 %v4_2b473, i128 %v2_2b46a)
  %v0_2b494 = load i1, i1* %cf.global-to-local, align 1
  %v1_2b494 = load i1, i1* %zf.global-to-local, align 1
  %v2_2b494 = or i1 %v0_2b494, %v1_2b494
  br i1 %v2_2b494, label %dec_label_pc_2b496, label %dec_label_pc_2b4c0

dec_label_pc_2b496:                               ; preds = %dec_label_pc_2b490
  %v0_2b496 = load i1, i1* %pf.global-to-local, align 1
  %v1_2b496 = zext i1 %v0_2b496 to i64
  %v2_2b496 = load i64, i64* @rax, align 8
  %v3_2b496 = and i64 %v2_2b496, 4294967040
  store i64 1, i64* @rdx, align 8
  %v1_2b4a1 = icmp eq i1 %v1_2b494, false
  %tmp250 = or i64 %v3_2b496, %v1_2b496
  %v7_2b4a1 = select i1 %v1_2b4a1, i64 1, i64 %tmp250
  store i64 %v7_2b4a1, i64* @rax, align 8
  %v5_2b4a4 = icmp eq i64 %v7_2b4a1, 0
  %v0_2b4a6 = load i64, i64* inttoptr (i64 177325 to i64*), align 8
  store i64 %v0_2b4a6, i64* @rax, align 8
  %v1_2b4ad = icmp eq i1 %v5_2b4a4, false
  %v3_2b4ad = load i64, i64* inttoptr (i64 177333 to i64*), align 8
  %v4_2b4ad = select i1 %v1_2b4ad, i64 %v3_2b4ad, i64 %v0_2b4a6
  store i64 %v4_2b4ad, i64* @rax, align 8
  %v0_2b4b5 = load i64, i64* @rsp, align 8
  %v1_2b4b5 = add i64 %v0_2b4b5, 24
  %v5_2b4b5 = icmp ugt i64 %v0_2b4b5, -25
  store i1 %v5_2b4b5, i1* %cf.global-to-local, align 1
  %v10_2b4b5 = icmp eq i64 %v1_2b4b5, 0
  store i1 %v10_2b4b5, i1* %zf.global-to-local, align 1
  %v12_2b4b5 = trunc i64 %v1_2b4b5 to i8
  %v13_2b4b5 = call i8 @llvm.ctpop.i8(i8 %v12_2b4b5)
  %v14_2b4b5 = urem i8 %v13_2b4b5, 2
  %v15_2b4b5 = icmp eq i8 %v14_2b4b5, 0
  store i1 %v15_2b4b5, i1* %pf.global-to-local, align 1
  ret i64 %v4_2b4ad

dec_label_pc_2b4c0:                               ; preds = %dec_label_pc_2b490
  %v0_2b4c0 = load i64, i64* inttoptr (i64 177351 to i64*), align 8
  store i64 %v0_2b4c0, i64* @rax, align 8
  %v0_2b4c7 = load i64, i64* @rsp, align 8
  %v1_2b4c7 = add i64 %v0_2b4c7, 24
  %v5_2b4c7 = icmp ugt i64 %v0_2b4c7, -25
  store i1 %v5_2b4c7, i1* %cf.global-to-local, align 1
  %v10_2b4c7 = icmp eq i64 %v1_2b4c7, 0
  store i1 %v10_2b4c7, i1* %zf.global-to-local, align 1
  %v12_2b4c7 = trunc i64 %v1_2b4c7 to i8
  %v13_2b4c7 = call i8 @llvm.ctpop.i8(i8 %v12_2b4c7)
  %v14_2b4c7 = urem i8 %v13_2b4c7, 2
  %v15_2b4c7 = icmp eq i8 %v14_2b4c7, 0
  store i1 %v15_2b4c7, i1* %pf.global-to-local, align 1
  ret i64 %v0_2b4c0
}

define i64 @_ZN3org4luaj3vm210LuaInteger7divIntoEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b4d0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm2.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2b4d0 = load i128, i128* %xmm2.global-to-local, align 8
  %v2_2b4d0 = call i128 @__asm_pxor(i128 %v0_2b4d0, i128 %v0_2b4d0)
  store i128 %v2_2b4d0, i128* %xmm2.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b4da = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b4da = call i64 @__asm_movsd.7465(i128 %v0_2b4da)
  %v0_2b4e0 = load i64, i64* @rdi, align 8
  %v1_2b4e0 = add i64 %v0_2b4e0, 8
  %v2_2b4e0 = inttoptr i64 %v1_2b4e0 to i32*
  %v3_2b4e0 = load i32, i32* %v2_2b4e0, align 4
  %v4_2b4e0 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_2b4e0)
  store i128 %v4_2b4e0, i128* %xmm2.global-to-local, align 8
  store i64 177388, i64* @rdi, align 8
  %v1_2b4ec = call i64 @__asm_movsd.7465(i128 %v4_2b4e0)
  %v4_2b4ec = load i64, i64* @rax, align 8
  ret i64 %v4_2b4ec
}

define i64 @_ZN3org4luaj3vm210LuaInteger3divEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b560:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2b560 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2b560 = call i128 @__asm_pxor(i128 %v0_2b560, i128 %v0_2b560)
  store i128 %v2_2b560, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b56a = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b56a = call i64 @__asm_movsd.7465(i128 %v0_2b56a)
  %v0_2b570 = load i64, i64* @rdi, align 8
  %v1_2b570 = add i64 %v0_2b570, 8
  %v2_2b570 = inttoptr i64 %v1_2b570 to i32*
  %v3_2b570 = load i32, i32* %v2_2b570, align 4
  %v4_2b570 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_2b570)
  store i128 %v4_2b570, i128* %xmm1.global-to-local, align 8
  store i64 177532, i64* @rdi, align 8
  %v1_2b57c = call i64 @__asm_movsd.7465(i128 %v4_2b570)
  %v4_2b57c = load i64, i64* @rax, align 8
  ret i64 %v4_2b57c
}

define i64 @_ZN3org4luaj3vm210LuaInteger3divEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2b5f0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2b5f0 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2b5f0 = call i128 @__asm_pxor(i128 %v0_2b5f0, i128 %v0_2b5f0)
  store i128 %v2_2b5f0, i128* %xmm1.global-to-local, align 8
  %v0_2b5f8 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2b5f8 = call i128 @__asm_pxor(i128 %v0_2b5f8, i128 %v0_2b5f8)
  store i128 %v2_2b5f8, i128* %xmm0.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_2b5fe = trunc i64 %arg2 to i32
  %v2_2b5fe = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2b5fe)
  store i128 %v2_2b5fe, i128* %xmm1.global-to-local, align 8
  %v0_2b602 = load i64, i64* @rdi, align 8
  %v1_2b602 = add i64 %v0_2b602, 8
  %v2_2b602 = inttoptr i64 %v1_2b602 to i32*
  %v3_2b602 = load i32, i32* %v2_2b602, align 4
  %v4_2b602 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_2b602)
  store i128 %v4_2b602, i128* %xmm0.global-to-local, align 8
  store i64 177678, i64* @rdi, align 8
  %v1_2b60e = call i64 @__asm_movsd.7465(i128 %v4_2b602)
  %v1_2b614 = call i64 @__asm_movsd.7465(i128 %v2_2b5fe)
  %v4_2b614 = load i64, i64* @rax, align 8
  ret i64 %v4_2b614
}

define i64 @_ZN3org4luaj3vm29LuaString3divEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b690:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2b691 = load i64, i64* @rdi, align 8
  store i64 %v0_2b691, i64* @rbx, align 8
  store i64 %v0_2b691, i64* @rax, align 8
  %v0_2b69b = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b69b = call i64 @__asm_movsd.7465(i128 %v0_2b69b)
  %v1_2b6a6 = call i64 @__asm_movsd.7465(i128 %v0_2b69b)
  %v5_2b6a6 = load i64, i64* @rax, align 8
  ret i64 %v5_2b6a6
}

define i64 @_ZN3org4luaj3vm29LuaString7divIntoEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b750:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2b751 = load i64, i64* @rdi, align 8
  store i64 %v0_2b751, i64* @rbx, align 8
  store i64 %v0_2b751, i64* @rax, align 8
  %v0_2b75b = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b75b = call i64 @__asm_movsd.7465(i128 %v0_2b75b)
  %v1_2b767 = call i64 @__asm_movsd.7465(i128 %v0_2b75b)
  %v4_2b767 = load i64, i64* @rax, align 8
  ret i64 %v4_2b767
}

define i64 @_ZN3org4luaj3vm29LuaString3divEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2b810:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2b812 = load i64, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %v0_2b812, i64* @rax, align 8
  %v0_2b824 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b824 = call i64 @__asm_movsd.7465(i128 %v0_2b824)
  %v4_2b824 = load i64, i64* @rax, align 8
  ret i64 %v4_2b824
}

define i64 @_ZN3org4luaj3vm29LuaDouble7modFromEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2b8e0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2b8e6 = load i64, i64* @rdi, align 8
  %v1_2b8e6 = add i64 %v0_2b8e6, 8
  %v2_2b8e6 = inttoptr i64 %v1_2b8e6 to i64*
  %v3_2b8e6 = load i64, i64* %v2_2b8e6, align 8
  %v4_2b8e6 = call i128 @__asm_movsd(i64 %v3_2b8e6)
  store i64 178418, i64* @rdi, align 8
  %v0_2b8f2 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2b8f2 = call i64 @__asm_movsd.7465(i128 %v0_2b8f2)
  %v1_2b8f8 = call i64 @__asm_movsd.7465(i128 %v4_2b8e6)
  %v4_2b8f8 = load i64, i64* @rax, align 8
  ret i64 %v4_2b8f8
}

define i64 @_ZN3org4luaj3vm29LuaDouble3modEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2ba30:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2ba36 = load i64, i64* @rdi, align 8
  %v1_2ba36 = add i64 %v0_2ba36, 8
  %v2_2ba36 = inttoptr i64 %v1_2ba36 to i64*
  %v3_2ba36 = load i64, i64* %v2_2ba36, align 8
  %v4_2ba36 = call i128 @__asm_movsd(i64 %v3_2ba36)
  store i64 178754, i64* @rdi, align 8
  %v0_2ba42 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2ba42 = call i64 @__asm_movsd.7465(i128 %v0_2ba42)
  %v1_2ba48 = call i64 @__asm_movsd.7465(i128 %v4_2ba36)
  %v4_2ba48 = load i64, i64* @rax, align 8
  ret i64 %v4_2ba48
}

define i64 @_ZN3org4luaj3vm29LuaDouble3modEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2bb80:
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2bb80 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2bb80 = call i128 @__asm_pxor(i128 %v0_2bb80, i128 %v0_2bb80)
  store i128 %v2_2bb80, i128* %xmm1.global-to-local, align 8
  %v0_2bb88 = load i64, i64* @rdi, align 8
  %v1_2bb88 = add i64 %v0_2bb88, 8
  %v2_2bb88 = inttoptr i64 %v1_2bb88 to i64*
  %v3_2bb88 = load i64, i64* %v2_2bb88, align 8
  %v4_2bb88 = call i128 @__asm_movsd(i64 %v3_2bb88)
  store i64 179092, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2bb96 = trunc i64 %arg2 to i32
  %v2_2bb96 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2bb96)
  store i128 %v2_2bb96, i128* %xmm1.global-to-local, align 8
  %v1_2bb9a = call i64 @__asm_movsd.7465(i128 %v4_2bb88)
  %v1_2bba0 = call i64 @__asm_movsd.7465(i128 %v2_2bb96)
  %v4_2bba0 = load i64, i64* @rax, align 8
  ret i64 %v4_2bba0
}

define i64 @_ZN3org4luaj3vm210LuaInteger7modFromEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2bce0:
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2bce0 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2bce0 = call i128 @__asm_pxor(i128 %v0_2bce0, i128 %v0_2bce0)
  store i128 %v2_2bce0, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_2bcea = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2bcea = call i64 @__asm_movsd.7465(i128 %v0_2bcea)
  %v0_2bcf0 = load i64, i64* @rdi, align 8
  %v1_2bcf0 = add i64 %v0_2bcf0, 8
  %v2_2bcf0 = inttoptr i64 %v1_2bcf0 to i32*
  %v3_2bcf0 = load i32, i32* %v2_2bcf0, align 4
  %v4_2bcf0 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_2bcf0)
  store i128 %v4_2bcf0, i128* %xmm1.global-to-local, align 8
  store i64 179452, i64* @rdi, align 8
  %v1_2bcfc = call i64 @__asm_movsd.7465(i128 %v4_2bcf0)
  %v4_2bcfc = load i64, i64* @rax, align 8
  ret i64 %v4_2bcfc
}

define i64 @_ZN3org4luaj3vm210LuaInteger3modEJPNS1_8LuaValueEd(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2be40:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %xmm2.global-to-local = alloca i128, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_2be40 = load i64, i64* @rbx, align 8
  store i64 %v0_2be40, i64* %stack_var_-8, align 8
  %v4_2be40 = ptrtoint i64* %stack_var_-8 to i64
  store i64 0, i64* @rax, align 8
  %v1_2be43 = add i64 %v4_2be40, -16
  %v4_2be43 = icmp ult i64* %stack_var_-8, inttoptr (i64 16 to i64*)
  store i1 %v4_2be43, i1* %cf.global-to-local, align 1
  %v9_2be43 = icmp eq i64 %v1_2be43, 0
  store i1 %v9_2be43, i1* %zf.global-to-local, align 1
  %v11_2be43 = trunc i64 %v1_2be43 to i8
  %v12_2be43 = call i8 @llvm.ctpop.i8(i8 %v11_2be43)
  %v13_2be43 = urem i8 %v12_2be43, 2
  %v14_2be43 = icmp eq i8 %v13_2be43, 0
  store i1 %v14_2be43, i1* %pf.global-to-local, align 1
  %v0_2be47 = load i64, i64* @rdi, align 8
  %v1_2be47 = add i64 %v0_2be47, 8
  %v2_2be47 = inttoptr i64 %v1_2be47 to i32*
  %v3_2be47 = load i32, i32* %v2_2be47, align 4
  %v4_2be47 = zext i32 %v3_2be47 to i64
  store i64 %v4_2be47, i64* @rbx, align 8
  store i64 179793, i64* @rdi, align 8
  %v0_2be51 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2be51 = call i64 @__asm_movsd.7465(i128 %v0_2be51)
  %v0_2be5c = load i128, i128* %xmm2.global-to-local, align 8
  %v2_2be5c = call i128 @__asm_pxor(i128 %v0_2be5c, i128 %v0_2be5c)
  store i128 %v2_2be5c, i128* %xmm2.global-to-local, align 8
  %v4_2be60 = call i128 @__asm_movsd(i64 %v1_2be51)
  store i128 %v4_2be60, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v4_2be60, i128 %v2_2be5c)
  %v0_2be6a = load i1, i1* %pf.global-to-local, align 1
  %v0_2be6c = load i1, i1* %zf.global-to-local, align 1
  %v1_2be6c = icmp eq i1 %v0_2be6c, false
  %or.cond = or i1 %v0_2be6a, %v1_2be6c
  br i1 %or.cond, label %dec_label_pc_2be80, label %dec_label_pc_2be6e

dec_label_pc_2be6e:                               ; preds = %dec_label_pc_2be40
  %v0_2be6e = load i64, i64* inttoptr (i64 179829 to i64*), align 8
  store i64 %v0_2be6e, i64* @rax, align 8
  br label %dec_label_pc_2be75

dec_label_pc_2be75:                               ; preds = %dec_label_pc_2bf3a, %dec_label_pc_2be6e
  %v0_2be7a = phi i64 [ %v0_2be7a.pre, %dec_label_pc_2bf3a ], [ %v0_2be6e, %dec_label_pc_2be6e ]
  %v0_2be75 = load i64, i64* @rsp, align 8
  %v1_2be75 = add i64 %v0_2be75, 16
  %v4_2be75 = icmp ugt i64 %v0_2be75, -17
  store i1 %v4_2be75, i1* %cf.global-to-local, align 1
  %v9_2be75 = icmp eq i64 %v1_2be75, 0
  store i1 %v9_2be75, i1* %zf.global-to-local, align 1
  %v11_2be75 = trunc i64 %v1_2be75 to i8
  %v12_2be75 = call i8 @llvm.ctpop.i8(i8 %v11_2be75)
  %v13_2be75 = urem i8 %v12_2be75, 2
  %v14_2be75 = icmp eq i8 %v13_2be75, 0
  store i1 %v14_2be75, i1* %pf.global-to-local, align 1
  %v2_2be79 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_2be79, i64* @rbx, align 8
  ret i64 %v0_2be7a

dec_label_pc_2be80:                               ; preds = %dec_label_pc_2be40
  %v0_2be80 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2be80 = call i128 @__asm_pxor(i128 %v0_2be80, i128 %v0_2be80)
  store i128 %v2_2be80, i128* %xmm1.global-to-local, align 8
  %v3_2be84 = call i128 @__asm_cvtsi2sd.7468(i32 %v3_2be47)
  store i128 %v3_2be84, i128* %xmm1.global-to-local, align 8
  %v1_2be88 = load i64, i64* inttoptr (i64 179856 to i64*), align 16
  call void @__asm_ucomisd.7467(i128 %v3_2be84, i64 %v1_2be88)
  %v0_2be90 = load i1, i1* %cf.global-to-local, align 1
  %v1_2be90 = load i1, i1* %zf.global-to-local, align 1
  %v2_2be90 = or i1 %v0_2be90, %v1_2be90
  br i1 %v2_2be90, label %dec_label_pc_2be92, label %dec_label_pc_2be9c

dec_label_pc_2be92:                               ; preds = %dec_label_pc_2be80
  %v4_2be90 = load i64, i64* @rax, align 8
  ret i64 %v4_2be90

dec_label_pc_2be9c:                               ; preds = %dec_label_pc_2be80
  %v1_2be9c = load i64, i64* inttoptr (i64 179876 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v3_2be84, i64 %v1_2be9c)
  %v0_2bea4 = load i1, i1* %cf.global-to-local, align 1
  %v1_2bea4 = load i1, i1* %zf.global-to-local, align 1
  %v2_2bea4 = or i1 %v0_2bea4, %v1_2bea4
  br i1 %v2_2bea4, label %dec_label_pc_2bea6, label %dec_label_pc_2beb4

dec_label_pc_2bea6:                               ; preds = %dec_label_pc_2be9c
  %v4_2bea4 = load i64, i64* @rax, align 8
  ret i64 %v4_2bea4

dec_label_pc_2beb4:                               ; preds = %dec_label_pc_2be9c
  %v1_2beb4 = load i64, i64* inttoptr (i64 179900 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_2be60, i64 %v1_2beb4)
  %v0_2bebc = load i1, i1* %cf.global-to-local, align 1
  %v1_2bebc = load i1, i1* %zf.global-to-local, align 1
  %v2_2bebc = or i1 %v0_2bebc, %v1_2bebc
  br i1 %v2_2bebc, label %dec_label_pc_2bebe, label %dec_label_pc_2bee0

dec_label_pc_2bebe:                               ; preds = %dec_label_pc_2beb4
  %v4_2bebc = load i64, i64* @rax, align 8
  ret i64 %v4_2bebc

dec_label_pc_2bee0:                               ; preds = %dec_label_pc_2beb4
  %v1_2bee0 = load i64, i64* inttoptr (i64 179944 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v4_2be60, i64 %v1_2bee0)
  %v0_2bee8 = load i1, i1* %cf.global-to-local, align 1
  %v1_2bee8 = load i1, i1* %zf.global-to-local, align 1
  %v2_2bee8 = or i1 %v0_2bee8, %v1_2bee8
  br i1 %v2_2bee8, label %dec_label_pc_2beea, label %dec_label_pc_2bf10

dec_label_pc_2beea:                               ; preds = %dec_label_pc_2bee0
  %v4_2bee8 = load i64, i64* @rax, align 8
  ret i64 %v4_2bee8

dec_label_pc_2bf10:                               ; preds = %dec_label_pc_2bee0
  %v1_2bf10 = call i128 @__asm_movapd(i128 %v3_2be84)
  %v0_2bf14 = load i64, i64* inttoptr (i64 179996 to i64*), align 8
  %v1_2bf14 = call i128 @__asm_movsd(i64 %v0_2bf14)
  %v2_2bf1c = call i128 @__asm_divsd(i128 %v1_2bf10, i128 %v4_2be60)
  %v0_2bf20 = load i64, i64* inttoptr (i64 180008 to i64*), align 8
  %v1_2bf20 = call i128 @__asm_movsd(i64 %v0_2bf20)
  %v1_2bf28 = call i128 @__asm_movapd(i128 %v2_2bf1c)
  %v1_2bf2c = call i128 @__asm_movapd(i128 %v2_2bf1c)
  store i128 %v1_2bf2c, i128* %xmm2.global-to-local, align 8
  %v2_2bf30 = call i128 @__asm_andpd(i128 %v1_2bf28, i128 %v1_2bf14)
  call void @__asm_ucomisd(i128 %v1_2bf20, i128 %v2_2bf30)
  %v0_2bf38 = load i1, i1* %cf.global-to-local, align 1
  %v1_2bf38 = load i1, i1* %zf.global-to-local, align 1
  %v2_2bf38 = or i1 %v0_2bf38, %v1_2bf38
  br i1 %v2_2bf38, label %dec_label_pc_2bf10.dec_label_pc_2bf3a_crit_edge, label %dec_label_pc_2bf50

dec_label_pc_2bf10.dec_label_pc_2bf3a_crit_edge:  ; preds = %dec_label_pc_2bf10
  %v1_2bf3a.pre = load i128, i128* %xmm2.global-to-local, align 8
  br label %dec_label_pc_2bf3a

dec_label_pc_2bf3a:                               ; preds = %dec_label_pc_2bf10.dec_label_pc_2bf3a_crit_edge, %dec_label_pc_2bf50
  %v1_2bf3a = phi i128 [ %v1_2bf3a.pre, %dec_label_pc_2bf10.dec_label_pc_2bf3a_crit_edge ], [ %v2_2bf83, %dec_label_pc_2bf50 ]
  %v2_2bf3a = call i128 @__asm_mulsd(i128 %v4_2be60, i128 %v1_2bf3a)
  store i128 %v2_2bf3a, i128* %xmm0.global-to-local, align 8
  %v2_2bf3e = call i128 @__asm_subsd(i128 %v3_2be84, i128 %v2_2bf3a)
  store i128 %v2_2bf3e, i128* %xmm1.global-to-local, align 8
  %v1_2bf42 = call i128 @__asm_movapd(i128 %v2_2bf3e)
  store i128 %v1_2bf42, i128* %xmm0.global-to-local, align 8
  %v0_2be7a.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2be75

dec_label_pc_2bf50:                               ; preds = %dec_label_pc_2bf10
  %v1_2bf50 = call i64 @__asm_cvttsd2si.7470(i128 %v2_2bf1c)
  store i64 %v1_2bf50, i64* @rax, align 8
  %v2_2bf55 = call i128 @__asm_pxor(i128 %v2_2bf30, i128 %v2_2bf30)
  %v0_2bf59 = load i64, i64* inttoptr (i64 180065 to i64*), align 8
  %v1_2bf59 = call i128 @__asm_movsd(i64 %v0_2bf59)
  %v2_2bf61 = call i128 @__asm_andnpd(i128 %v1_2bf14, i128 %v2_2bf1c)
  %v0_2bf65 = load i64, i64* @rax, align 8
  %v1_2bf65 = call i128 @__asm_cvtsi2sd(i64 %v0_2bf65)
  %v1_2bf6a = call i128 @__asm_movapd(i128 %v1_2bf65)
  %v2_2bf6e = call i128 @__asm_cmpnlesd(i128 %v1_2bf6a, i128 %v2_2bf1c)
  %v1_2bf73 = call i128 @__asm_movapd(i128 %v2_2bf6e)
  store i128 %v1_2bf73, i128* %xmm2.global-to-local, align 8
  %v2_2bf77 = call i128 @__asm_andpd(i128 %v1_2bf73, i128 %v1_2bf59)
  store i128 %v2_2bf77, i128* %xmm2.global-to-local, align 8
  %v2_2bf7b = call i128 @__asm_subsd(i128 %v1_2bf65, i128 %v2_2bf77)
  %v1_2bf7f = call i128 @__asm_movapd(i128 %v2_2bf7b)
  store i128 %v1_2bf7f, i128* %xmm2.global-to-local, align 8
  %v2_2bf83 = call i128 @__asm_orpd(i128 %v1_2bf7f, i128 %v2_2bf61)
  store i128 %v2_2bf83, i128* %xmm2.global-to-local, align 8
  br label %dec_label_pc_2bf3a
}

define i64 @_ZN3org4luaj3vm210LuaInteger3modEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2bf90:
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2bf90 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_2bf90 = call i128 @__asm_pxor(i128 %v0_2bf90, i128 %v0_2bf90)
  store i128 %v2_2bf90, i128* %xmm1.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_2bf9b = load i64, i64* @rdi, align 8
  %v1_2bf9b = add i64 %v0_2bf9b, 8
  %v2_2bf9b = inttoptr i64 %v1_2bf9b to i32*
  %v3_2bf9b = load i32, i32* %v2_2bf9b, align 4
  %v4_2bf9b = zext i32 %v3_2bf9b to i64
  store i64 %v4_2bf9b, i64* @rbx, align 8
  store i64 180133, i64* @rdi, align 8
  %v1_2bfa5 = trunc i64 %arg2 to i32
  %v2_2bfa5 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_2bfa5)
  store i128 %v2_2bfa5, i128* %xmm1.global-to-local, align 8
  %v1_2bfa9 = call i64 @__asm_movsd.7465(i128 %v2_2bfa5)
  %v5_2bfa9 = load i64, i64* @rax, align 8
  ret i64 %v5_2bfa9
}

define i64 @_ZN3org4luaj3vm29LuaString7modFromEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2c0f0:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2c0f1 = load i64, i64* @rdi, align 8
  store i64 %v0_2c0f1, i64* @rbx, align 8
  store i64 %v0_2c0f1, i64* @rax, align 8
  %v0_2c0fb = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2c0fb = call i64 @__asm_movsd.7465(i128 %v0_2c0fb)
  %v1_2c107 = call i64 @__asm_movsd.7465(i128 %v0_2c0fb)
  %v4_2c107 = load i64, i64* @rax, align 8
  ret i64 %v4_2c107
}

define i64 @_ZN3org4luaj3vm29LuaString3modEJPNS1_8LuaValueEd(i64 %arg1) local_unnamed_addr {
dec_label_pc_2c290:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2c291 = load i64, i64* @rdi, align 8
  store i64 %v0_2c291, i64* @rbx, align 8
  store i64 %v0_2c291, i64* @rax, align 8
  %v0_2c29b = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2c29b = call i64 @__asm_movsd.7465(i128 %v0_2c29b)
  %v1_2c2a6 = call i64 @__asm_movsd.7465(i128 %v0_2c29b)
  %v5_2c2a6 = load i64, i64* @rax, align 8
  ret i64 %v5_2c2a6
}

define i64 @_ZN3org4luaj3vm29LuaString3modEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2c440:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2c442 = load i64, i64* @rdi, align 8
  %v0_2c445 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2c445, i64* @rbx, align 8
  store i64 %v0_2c442, i64* @rax, align 8
  %v0_2c454 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2c454 = call i64 @__asm_movsd.7465(i128 %v0_2c454)
  %v5_2c454 = load i64, i64* @rax, align 8
  ret i64 %v5_2c454
}

define i64 @_ZN3org4luaj3vm26Buffer8concatToEJPS2_PNS1_9LuaStringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2c5f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @r12, align 8
  %v0_2c5fb = load i64, i64* @rdi, align 8
  store i64 %v0_2c5fb, i64* @rbx, align 8
  %v1_2c5fe = add i64 %v0_2c5fb, 24
  %v2_2c5fe = inttoptr i64 %v1_2c5fe to i64*
  %v3_2c5fe = load i64, i64* %v2_2c5fe, align 8
  store i64 %v3_2c5fe, i64* @rdi, align 8
  %v1_2c602 = icmp eq i64 %v3_2c5fe, 0
  br i1 %v1_2c602, label %bb, label %dec_label_pc_2c60b

bb:                                               ; preds = %dec_label_pc_2c5f0
  %v3_2c605 = call i64 @function_2c6f0(i64 0, i64 %arg2)
  store i64 %v3_2c605, i64* @rax, align 8
  br label %dec_label_pc_2c60b

dec_label_pc_2c60b:                               ; preds = %bb, %dec_label_pc_2c5f0
  %v1_2c60b = inttoptr i64 %v3_2c5fe to i64*
  %v2_2c60b = load i64, i64* %v1_2c60b, align 8
  store i64 %v2_2c60b, i64* @rax, align 8
  %v4_2c614 = trunc i64 %v2_2c60b to i8
  %v5_2c614 = icmp eq i8 %v4_2c614, 0
  br i1 %v5_2c614, label %bb244, label %dec_label_pc_2c61c

bb244:                                            ; preds = %dec_label_pc_2c60b
  %v6_2c616 = call i64 @function_2c6b0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_2c616, i64* @rax, align 8
  br label %dec_label_pc_2c61c

dec_label_pc_2c61c:                               ; preds = %bb244, %dec_label_pc_2c60b
  %v0_2c61c = load i64, i64* @rbx, align 8
  %v1_2c61c = add i64 %v0_2c61c, 24
  %v2_2c61c = inttoptr i64 %v1_2c61c to i64*
  %v3_2c61c = load i64, i64* %v2_2c61c, align 8
  store i64 %v3_2c61c, i64* @rdi, align 8
  %v0_2c620 = load i64, i64* @r12, align 8
  %v1_2c620 = add i64 %v0_2c620, 20
  %v2_2c620 = inttoptr i64 %v1_2c620 to i32*
  %v3_2c620 = load i32, i32* %v2_2c620, align 4
  %v4_2c620 = zext i32 %v3_2c620 to i64
  store i64 %v4_2c620, i64* @rbp, align 8
  %v1_2c625 = icmp eq i64 %v3_2c61c, 0
  br i1 %v1_2c625, label %bb245, label %dec_label_pc_2c62e

bb245:                                            ; preds = %dec_label_pc_2c61c
  %v1_2c628 = call i64 @function_2c6f3()
  store i64 %v1_2c628, i64* @rax, align 8
  br label %dec_label_pc_2c62e

dec_label_pc_2c62e:                               ; preds = %bb245, %dec_label_pc_2c61c
  %v1_2c62e = inttoptr i64 %v3_2c61c to i64*
  %v2_2c62e = load i64, i64* %v1_2c62e, align 8
  store i64 %v2_2c62e, i64* @rax, align 8
  ret i64 %v2_2c62e
}

define i64 @function_2c6b0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2c6b0:
  %v2_2c6b0 = load i64, i64* @r12, align 8
  store i64 %v2_2c6b0, i64* @rax, align 8
  %v0_2c6b4 = load i64, i64* @rbx, align 8
  store i64 %v2_2c6b0, i64* @rdi, align 8
  %v0_2c6c1 = load i64, i64* inttoptr (i64 181960 to i64*), align 8
  store i64 %v0_2c6c1, i64* @rdx, align 8
  %v1_2c6c8 = add i64 %v0_2c6b4, 16
  %v2_2c6c8 = inttoptr i64 %v1_2c6c8 to i32*
  store i32 0, i32* %v2_2c6c8, align 4
  %v0_2c6cf = load i64, i64* @rbx, align 8
  %v1_2c6cf = add i64 %v0_2c6cf, 20
  %v2_2c6cf = inttoptr i64 %v1_2c6cf to i32*
  store i32 0, i32* %v2_2c6cf, align 4
  %v0_2c6d6 = load i64, i64* @rax, align 8
  %v1_2c6d6 = load i64, i64* @rbx, align 8
  %v2_2c6d6 = add i64 %v1_2c6d6, 24
  %v3_2c6d6 = inttoptr i64 %v2_2c6d6 to i64*
  store i64 %v0_2c6d6, i64* %v3_2c6d6, align 8
  %v0_2c6da = load i64, i64* @rdx, align 8
  %v1_2c6da = load i64, i64* @rbx, align 8
  %v2_2c6da = add i64 %v1_2c6da, 8
  %v3_2c6da = inttoptr i64 %v2_2c6da to i64*
  store i64 %v0_2c6da, i64* %v3_2c6da, align 8
  %v0_2c6de = load i64, i64* @rbx, align 8
  store i64 %v0_2c6de, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* @r12, align 8
  ret i64 %v0_2c6de
}

define i64 @function_2c6f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2c6f0:
  store i64 %arg1, i64* @rdi, align 8
  %v5_2c6f0 = load i64, i64* @rax, align 8
  ret i64 %v5_2c6f0
}

define i64 @function_2c6f3() local_unnamed_addr {
dec_label_pc_2c6f3:
  %v0_2c6f3 = load i64, i64* @rbx, align 8
  %v1_2c6f3 = add i64 %v0_2c6f3, 8
  %v2_2c6f3 = inttoptr i64 %v1_2c6f3 to i64*
  %v3_2c6f3 = load i64, i64* %v2_2c6f3, align 8
  store i64 %v3_2c6f3, i64* @rdx, align 8
  %v1_2c6f7 = add i64 %v0_2c6f3, 20
  %v2_2c6f7 = inttoptr i64 %v1_2c6f7 to i32*
  %v3_2c6f7 = load i32, i32* %v2_2c6f7, align 4
  %v4_2c6f7 = zext i32 %v3_2c6f7 to i64
  store i64 %v4_2c6f7, i64* @rcx, align 8
  %v1_2c6fa = add i64 %v0_2c6f3, 16
  %v2_2c6fa = inttoptr i64 %v1_2c6fa to i32*
  %v3_2c6fa = load i32, i32* %v2_2c6fa, align 4
  %v4_2c6fa = zext i32 %v3_2c6fa to i64
  store i64 %v4_2c6fa, i64* @rax, align 8
  %v1_2c6fd = add i64 %v3_2c6f3, 8
  %v2_2c6fd = inttoptr i64 %v1_2c6fd to i32*
  %v3_2c6fd = load i32, i32* %v2_2c6fd, align 4
  %v4_2c6fd = zext i32 %v3_2c6fd to i64
  store i64 %v4_2c6fd, i64* @rdi, align 8
  %v3_2c700 = add nuw nsw i64 %v4_2c6fa, %v4_2c6f7
  %v8_2c705 = icmp ugt i64 %v3_2c700, %v4_2c6fd
  %v0_2c70f.pre = load i64, i64* @rbp, align 8
  br i1 %v8_2c705, label %dec_label_pc_2c70f, label %dec_label_pc_2c707

dec_label_pc_2c707:                               ; preds = %dec_label_pc_2c6f3
  br label %dec_label_pc_2c70f

dec_label_pc_2c70f:                               ; preds = %dec_label_pc_2c6f3, %dec_label_pc_2c707
  %v3_2c70f = add i64 %v0_2c70f.pre, %v4_2c6fa
  %v1_2c719 = trunc i64 %v3_2c70f to i32
  %v9_2c71d = icmp sgt i32 %v1_2c719, 31
  br i1 %v9_2c71d, label %dec_label_pc_2c71f, label %dec_label_pc_2c729

dec_label_pc_2c71f:                               ; preds = %dec_label_pc_2c70f
  br label %dec_label_pc_2c729

dec_label_pc_2c729:                               ; preds = %dec_label_pc_2c70f, %dec_label_pc_2c71f
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm221WeakTable$WeakKeySlotC1EPNS1_8LuaValueES4_PNS1_13LuaTable$SlotE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2c780:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 182169, i64* @rdi, align 8
  %v0_2c799 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2c799, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_2c7fe() local_unnamed_addr {
dec_label_pc_2c7fe:
  %v0_2c7fe = load i64, i64* @rbp, align 8
  store i64 %v0_2c7fe, i64* @rdi, align 8
  %v1_2c7fe = load i64, i64* @rax, align 8
  ret i64 %v1_2c7fe
}

define i64 @function_2c830() local_unnamed_addr {
dec_label_pc_2c830:
  %v0_2c830 = load i64, i64* @rax, align 8
  ret i64 %v0_2c830
}

define i64 @function_2c835() local_unnamed_addr {
dec_label_pc_2c835:
  %v0_2c838 = call i64 @function_2c7fe()
  store i64 %v0_2c838, i64* @rax, align 8
  ret i64 %v0_2c838
}

define i64 @function_2c840() local_unnamed_addr {
dec_label_pc_2c840:
  store i64 182343, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12invokemethodEJPNS1_7VarargsEPN4java4lang6StringEP6JArrayIPS2_E(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2c8c0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_2c8cb = load i64, i64* @rdi, align 8
  store i64 %v2_2c8cb, i64* @rbx, align 8
  store i64 182494, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2c932() local_unnamed_addr {
dec_label_pc_2c932:
  store i64 182585, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2c974(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2c974:
  %r13.global-to-local = alloca i64, align 8
  %v2_2c974 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_2c974, i64* @rax, align 8
  store i64 %v2_2c974, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v2_2c974
}

define i64 @function_2c990() local_unnamed_addr {
dec_label_pc_2c990:
  store i64 182679, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2c9d0() local_unnamed_addr {
dec_label_pc_2c9d0:
  %v0_2c9d5 = call i64 @function_2c932()
  store i64 %v0_2c9d5, i64* @rax, align 8
  ret i64 %v0_2c9d5
}

define i64 @function_2c9da(i64 %arg1) local_unnamed_addr {
dec_label_pc_2c9da:
  store i64 0, i64* @rdi, align 8
  %v12_2c9da = load i64, i64* @rax, align 8
  ret i64 %v12_2c9da
}

define i64 @function_2c9e1() local_unnamed_addr {
dec_label_pc_2c9e1:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue12invokemethodEJPNS1_7VarargsEPS2_P6JArrayIS5_E(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2c9f0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_2c9fb = load i64, i64* @rdi, align 8
  store i64 %v2_2c9fb, i64* @rbx, align 8
  store i64 182798, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2ca62() local_unnamed_addr {
dec_label_pc_2ca62:
  store i64 182889, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2caa4(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2caa4:
  %r13.global-to-local = alloca i64, align 8
  %v2_2caa4 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_2caa4, i64* @rax, align 8
  store i64 %v2_2caa4, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v2_2caa4
}

define i64 @function_2cac0() local_unnamed_addr {
dec_label_pc_2cac0:
  store i64 182983, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2cb00() local_unnamed_addr {
dec_label_pc_2cb00:
  %v0_2cb05 = call i64 @function_2ca62()
  store i64 %v0_2cb05, i64* @rax, align 8
  ret i64 %v0_2cb05
}

define i64 @function_2cb0a(i64 %arg1) local_unnamed_addr {
dec_label_pc_2cb0a:
  store i64 0, i64* @rdi, align 8
  %v12_2cb0a = load i64, i64* @rax, align 8
  ret i64 %v12_2cb0a
}

define i64 @function_2cb11() local_unnamed_addr {
dec_label_pc_2cb11:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable6rawgetEJPNS1_8LuaValueEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2cb20:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_2cb20 = load i64, i64* %rsi.global-to-local, align 8
  %v4_2cb20 = trunc i64 %v0_2cb20 to i32
  %v0_2cb22 = load i64, i64* %r12.global-to-local, align 8
  %v0_2cb24 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2cb25 = load i64, i64* @rdi, align 8
  store i64 %v0_2cb25, i64* %rbp.global-to-local, align 8
  %v0_2cb28 = load i64, i64* @rbx, align 8
  store i64 %v0_2cb28, i64* %stack_var_-24, align 8
  store i64 %v0_2cb20, i64* @rbx, align 8
  %tmp251 = icmp slt i32 %v4_2cb20, 1
  br i1 %tmp251, label %bb, label %dec_label_pc_2cb31

bb:                                               ; preds = %dec_label_pc_2cb20
  %v5_2cb2b = call i64 @function_2cbd0()
  store i64 %v5_2cb2b, i64* @rax, align 8
  %v0_2cb31.pre = load i64, i64* @rdi, align 8
  %v0_2cb3a.pre = load i64, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_2cb31

dec_label_pc_2cb31:                               ; preds = %bb, %dec_label_pc_2cb20
  %v0_2cb3a = phi i64 [ %v0_2cb3a.pre, %bb ], [ %v0_2cb20, %dec_label_pc_2cb20 ]
  %v0_2cb90 = phi i64 [ %v0_2cb31.pre, %bb ], [ %v0_2cb25, %dec_label_pc_2cb20 ]
  %v1_2cb31 = add i64 %v0_2cb90, 8
  %v2_2cb31 = inttoptr i64 %v1_2cb31 to i64*
  %v3_2cb31 = load i64, i64* %v2_2cb31, align 8
  store i64 %v3_2cb31, i64* @r12, align 8
  %v1_2cb35 = add i64 %v3_2cb31, 8
  %v2_2cb35 = inttoptr i64 %v1_2cb35 to i32*
  %v3_2cb35 = load i32, i32* %v2_2cb35, align 4
  %v4_2cb35 = zext i32 %v3_2cb35 to i64
  store i64 %v4_2cb35, i64* @rax, align 8
  %v7_2cb3c = icmp sgt i64 %v0_2cb3a, %v4_2cb35
  br i1 %v7_2cb3c, label %dec_label_pc_2cb3e, label %dec_label_pc_2cb90

dec_label_pc_2cb3e:                               ; preds = %dec_label_pc_2cb31
  store i64 183109, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2cb4c = load i64, i64* @rbx, align 8
  %v1_2cb4c = trunc i64 %v0_2cb4c to i32
  %v9_2cb52 = icmp sgt i32 %v1_2cb4c, 255
  br i1 %v9_2cb52, label %bb253, label %dec_label_pc_2cb58

bb253:                                            ; preds = %dec_label_pc_2cb3e
  %v10_2cb52 = call i64 @function_2cbea()
  store i64 %v10_2cb52, i64* @rax, align 8
  %v0_2cb5f.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2cb58

dec_label_pc_2cb58:                               ; preds = %bb253, %dec_label_pc_2cb3e
  %v0_2cb5f = phi i64 [ %v0_2cb5f.pre, %bb253 ], [ %v0_2cb4c, %dec_label_pc_2cb3e ]
  %v0_2cb58 = load i64, i64* inttoptr (i64 183135 to i64*), align 8
  store i64 %v0_2cb58, i64* @rax, align 8
  %v1_2cb5f = trunc i64 %v0_2cb5f to i32
  %v2_2cb5f = add i32 %v1_2cb5f, 256
  %v16_2cb5f = zext i32 %v2_2cb5f to i64
  store i64 %v16_2cb5f, i64* @rbx, align 8
  %v3_2cb65 = add i64 %v0_2cb58, 8
  %v4_2cb65 = inttoptr i64 %v3_2cb65 to i32*
  %v5_2cb65 = load i32, i32* %v4_2cb65, align 4
  %v11_2cb65 = icmp ult i32 %v2_2cb5f, %v5_2cb65
  %v1_2cb68 = add i64 %v0_2cb58, 16
  store i64 %v1_2cb68, i64* @rdx, align 8
  %v1_2cb6c = icmp eq i1 %v11_2cb65, false
  br i1 %v1_2cb6c, label %bb254, label %dec_label_pc_2cb72

bb254:                                            ; preds = %dec_label_pc_2cb58
  %v2_2cb6c = call i64 @function_2cc24()
  store i64 %v2_2cb6c, i64* @rax, align 8
  %v0_2cb75.pre = load i64, i64* @rdx, align 8
  %v1_2cb75.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2cb72

dec_label_pc_2cb72:                               ; preds = %bb254, %dec_label_pc_2cb58
  %v1_2cb75 = phi i64 [ %v1_2cb75.pre, %bb254 ], [ %v16_2cb5f, %dec_label_pc_2cb58 ]
  %v0_2cb75 = phi i64 [ %v0_2cb75.pre, %bb254 ], [ %v1_2cb68, %dec_label_pc_2cb58 ]
  %v2_2cb75 = mul i64 %v1_2cb75, 8
  %v3_2cb75 = add i64 %v2_2cb75, %v0_2cb75
  %v4_2cb75 = inttoptr i64 %v3_2cb75 to i64*
  %v5_2cb75 = load i64, i64* %v4_2cb75, align 8
  %v2_2cb79 = load i64, i64* @rdi, align 8
  store i64 %v2_2cb79, i64* @rax, align 8
  store i64 %v5_2cb75, i64* %rsi.global-to-local, align 8
  %v0_2cb80 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_2cb80, i64* @rdi, align 8
  %v2_2cb89 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_2cb89, i64* @rbx, align 8
  store i64 %v0_2cb24, i64* %rbp.global-to-local, align 8
  store i64 %v0_2cb22, i64* %r12.global-to-local, align 8
  ret i64 %v2_2cb79

dec_label_pc_2cb90:                               ; preds = %dec_label_pc_2cb31
  %v1_2cb90 = add i64 %v0_2cb90, 32
  %v2_2cb90 = inttoptr i64 %v1_2cb90 to i64*
  %v3_2cb90 = load i64, i64* %v2_2cb90, align 8
  store i64 %v3_2cb90, i64* %rbp.global-to-local, align 8
  %v1_2cb94 = icmp eq i64 %v3_2cb90, 0
  br i1 %v1_2cb94, label %bb255, label %dec_label_pc_2cb99

bb255:                                            ; preds = %dec_label_pc_2cb90
  %v1_2cb97 = call i64 @function_2cc10()
  store i64 %v1_2cb97, i64* @rax, align 8
  br label %dec_label_pc_2cb99

dec_label_pc_2cb99:                               ; preds = %bb255, %dec_label_pc_2cb90
  %v1_2cb99 = inttoptr i64 %v3_2cb90 to i64*
  %v2_2cb99 = load i64, i64* %v1_2cb99, align 8
  store i64 %v2_2cb99, i64* @rax, align 8
  store i64 183204, i64* %rsi.global-to-local, align 8
  store i64 6, i64* @rdx, align 8
  %v1_2cba9 = inttoptr i64 %v2_2cb99 to i64*
  %v2_2cba9 = load i64, i64* %v1_2cba9, align 8
  store i64 %v2_2cba9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2cbd0() local_unnamed_addr {
dec_label_pc_2cbd0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_2cbea() local_unnamed_addr {
dec_label_pc_2cbea:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_2cc10() local_unnamed_addr {
dec_label_pc_2cc10:
  %r12.global-to-local = alloca i64, align 8
  %v0_2cc10 = load i64, i64* @rbx, align 8
  %v1_2cc10 = trunc i64 %v0_2cc10 to i32
  %v2_2cc10 = add i32 %v1_2cc10, -1
  %v17_2cc10 = zext i32 %v2_2cc10 to i64
  store i64 %v17_2cc10, i64* @rbx, align 8
  %v0_2cc13 = load i64, i64* @r12, align 8
  %v1_2cc13 = add i64 %v0_2cc13, 16
  store i64 %v1_2cc13, i64* %r12.global-to-local, align 8
  %v2_2cc17 = load i64, i64* @rax, align 8
  %v3_2cc17 = trunc i64 %v2_2cc17 to i32
  %v9_2cc17 = icmp ult i32 %v2_2cc10, %v3_2cc17
  %v1_2cc19 = icmp eq i1 %v9_2cc17, false
  br i1 %v1_2cc19, label %bb, label %dec_label_pc_2cc1b

bb:                                               ; preds = %dec_label_pc_2cc10
  %v2_2cc19 = call i64 @function_2cc24()
  store i64 %v2_2cc19, i64* @rax, align 8
  %v0_2cc1e.pre = load i64, i64* %r12.global-to-local, align 8
  %v1_2cc1e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2cc1b

dec_label_pc_2cc1b:                               ; preds = %bb, %dec_label_pc_2cc10
  %v1_2cc1e = phi i64 [ %v1_2cc1e.pre, %bb ], [ %v17_2cc10, %dec_label_pc_2cc10 ]
  %v0_2cc1e = phi i64 [ %v0_2cc1e.pre, %bb ], [ %v1_2cc13, %dec_label_pc_2cc10 ]
  %v2_2cc1e = mul i64 %v1_2cc1e, 8
  %v3_2cc1e = add i64 %v2_2cc1e, %v0_2cc1e
  %v4_2cc1e = inttoptr i64 %v3_2cc1e to i64*
  %v5_2cc1e = load i64, i64* %v4_2cc1e, align 8
  store i64 %v5_2cc1e, i64* @rax, align 8
  ret i64 %v5_2cc1e
}

define i64 @function_2cc24() local_unnamed_addr {
dec_label_pc_2cc24:
  %v0_2cc24 = load i64, i64* @rbx, align 8
  store i64 %v0_2cc24, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame8getLocalEJPNS1_7VarargsEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2cc30:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2cc34 = load i64, i64* @rdi, align 8
  store i64 %v0_2cc34, i64* %r12.global-to-local, align 8
  %v0_2cc39 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2cc39, i64* @rbx, align 8
  store i64 %v0_2cc34, i64* @rax, align 8
  %v4_2cc48 = trunc i64 %v0_2cc39 to i32
  %tmp255 = icmp slt i32 %v4_2cc48, 1
  br i1 %tmp255, label %bb, label %dec_label_pc_2cc50

bb:                                               ; preds = %dec_label_pc_2cc30
  %v5_2cc4a = call i64 @function_2cce8()
  store i64 %v5_2cc4a, i64* @rax, align 8
  %v0_2cc53.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_2cc5b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2cc50

dec_label_pc_2cc50:                               ; preds = %bb, %dec_label_pc_2cc30
  %v0_2cc5b = phi i64 [ %v0_2cc5b.pre, %bb ], [ %v0_2cc39, %dec_label_pc_2cc30 ]
  %v0_2cc53 = phi i64 [ %v0_2cc53.pre, %bb ], [ %v0_2cc34, %dec_label_pc_2cc30 ]
  %v0_2cc50 = phi i64 [ %v5_2cc4a, %bb ], [ %v0_2cc34, %dec_label_pc_2cc30 ]
  %v1_2cc53 = add i64 %v0_2cc53, 32
  %v2_2cc53 = inttoptr i64 %v1_2cc53 to i64*
  %v3_2cc53 = load i64, i64* %v2_2cc53, align 8
  store i64 %v3_2cc53, i64* @rax, align 8
  %v1_2cc58 = add i64 %v3_2cc53, 8
  %v2_2cc58 = inttoptr i64 %v1_2cc58 to i32*
  %v3_2cc58 = load i32, i32* %v2_2cc58, align 4
  %v4_2cc58 = zext i32 %v3_2cc58 to i64
  store i64 %v4_2cc58, i64* @rdx, align 8
  %v8_2cc5d = icmp sgt i64 %v0_2cc5b, %v4_2cc58
  br i1 %v8_2cc5d, label %bb256, label %dec_label_pc_2cc63

bb256:                                            ; preds = %dec_label_pc_2cc50
  %v9_2cc5d = call i64 @function_2cce8()
  store i64 %v9_2cc5d, i64* @rax, align 8
  %v0_2cc63.pre = load i64, i64* @rbx, align 8
  %v2_2cc66.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_2cc63

dec_label_pc_2cc63:                               ; preds = %bb256, %dec_label_pc_2cc50
  %v0_2cc7110 = phi i64 [ %v9_2cc5d, %bb256 ], [ %v3_2cc53, %dec_label_pc_2cc50 ]
  %v2_2cc66 = phi i64 [ %v2_2cc66.pre, %bb256 ], [ %v4_2cc58, %dec_label_pc_2cc50 ]
  %v0_2cc63 = phi i64 [ %v0_2cc63.pre, %bb256 ], [ %v0_2cc5b, %dec_label_pc_2cc50 ]
  %v1_2cc63 = trunc i64 %v0_2cc63 to i32
  %v2_2cc63 = add i32 %v1_2cc63, -1
  %v17_2cc63 = zext i32 %v2_2cc63 to i64
  store i64 %v17_2cc63, i64* @rbx, align 8
  %v3_2cc66 = trunc i64 %v2_2cc66 to i32
  %v9_2cc66 = icmp ult i32 %v2_2cc63, %v3_2cc66
  %v1_2cc68 = icmp eq i1 %v9_2cc66, false
  br i1 %v1_2cc68, label %bb257, label %dec_label_pc_2cc6e

bb257:                                            ; preds = %dec_label_pc_2cc63
  %v2_2cc68 = call i64 @function_2cd2f()
  store i64 %v2_2cc68, i64* @rax, align 8
  %v0_2cc6e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2cc6e

dec_label_pc_2cc6e:                               ; preds = %bb257, %dec_label_pc_2cc63
  %v0_2cc71 = phi i64 [ %v2_2cc68, %bb257 ], [ %v0_2cc7110, %dec_label_pc_2cc63 ]
  %v0_2cc6e = phi i64 [ %v0_2cc6e.pre, %bb257 ], [ %v17_2cc63, %dec_label_pc_2cc63 ]
  store i64 %v0_2cc6e, i64* %r13.global-to-local, align 8
  %v2_2cc71 = mul i64 %v0_2cc6e, 8
  %v3_2cc71 = add i64 %v0_2cc71, 16
  %v4_2cc71 = add i64 %v3_2cc71, %v2_2cc71
  %v5_2cc71 = inttoptr i64 %v4_2cc71 to i64*
  %v6_2cc71 = load i64, i64* %v5_2cc71, align 8
  %v13_2cc71 = icmp eq i64 %v6_2cc71, 0
  br i1 %v13_2cc71, label %bb258, label %dec_label_pc_2cc79

bb258:                                            ; preds = %dec_label_pc_2cc6e
  %v1_2cc77 = call i64 @function_2cce8()
  store i64 %v1_2cc77, i64* @rax, align 8
  br label %dec_label_pc_2cc79

dec_label_pc_2cc79:                               ; preds = %bb258, %dec_label_pc_2cc6e
  %v2_2cc8212 = phi i64 [ %v1_2cc77, %bb258 ], [ %v0_2cc71, %dec_label_pc_2cc6e ]
  %v1_2cc79 = icmp eq i64 %v0_2cc50, 0
  br i1 %v1_2cc79, label %bb259, label %dec_label_pc_2cc82

bb259:                                            ; preds = %dec_label_pc_2cc79
  %v1_2cc7c = call i64 @function_2cd10()
  store i64 %v1_2cc7c, i64* @rax, align 8
  br label %dec_label_pc_2cc82

dec_label_pc_2cc82:                               ; preds = %bb259, %dec_label_pc_2cc79
  %v0_2cc85 = phi i64 [ %v1_2cc7c, %bb259 ], [ %v2_2cc8212, %dec_label_pc_2cc79 ]
  %v0_2cc82 = load i64, i64* @rbx, align 8
  %v1_2cc82 = trunc i64 %v0_2cc82 to i32
  %v3_2cc82 = add i64 %v0_2cc85, 8
  %v4_2cc82 = inttoptr i64 %v3_2cc82 to i32*
  %v5_2cc82 = load i32, i32* %v4_2cc82, align 4
  %v11_2cc82 = icmp ult i32 %v1_2cc82, %v5_2cc82
  %v1_2cc85 = add i64 %v0_2cc85, 16
  store i64 %v1_2cc85, i64* @rdx, align 8
  %v1_2cc89 = icmp eq i1 %v11_2cc82, false
  br i1 %v1_2cc89, label %bb260, label %dec_label_pc_2cc8f

bb260:                                            ; preds = %dec_label_pc_2cc82
  %v2_2cc89 = call i64 @function_2cd2f()
  store i64 %v2_2cc89, i64* @rax, align 8
  %v0_2cc8f.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_2cc8f

dec_label_pc_2cc8f:                               ; preds = %bb260, %dec_label_pc_2cc82
  %v0_2cc8f = phi i64 [ %v0_2cc8f.pre, %bb260 ], [ %v1_2cc85, %dec_label_pc_2cc82 ]
  %v1_2cc8f = load i64, i64* %r13.global-to-local, align 8
  %v2_2cc8f = mul i64 %v1_2cc8f, 8
  %v3_2cc8f = add i64 %v2_2cc8f, %v0_2cc8f
  %v4_2cc8f = inttoptr i64 %v3_2cc8f to i64*
  %v5_2cc8f = load i64, i64* %v4_2cc8f, align 8
  store i64 %v5_2cc8f, i64* %r12.global-to-local, align 8
  store i64 183450, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_2cc50, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_2cce8() local_unnamed_addr {
dec_label_pc_2cce8:
  store i64 183535, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2ccfd(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2ccfd:
  %v0_2ccfd = load i64, i64* @rbx, align 8
  store i64 %v0_2ccfd, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_2ccfd
}

define i64 @function_2cd10() local_unnamed_addr {
dec_label_pc_2cd10:
  store i64 183575, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2cd2f() local_unnamed_addr {
dec_label_pc_2cd2f:
  %v0_2cd2f = load i64, i64* @rbx, align 8
  store i64 %v0_2cd2f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$768onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2cd40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2cd4d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2cd4d, i64* @rbx, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 183682, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2cd84 = load i64, i64* inttoptr (i64 183691 to i64*), align 8
  store i64 %v0_2cd84, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_2d478(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2d478:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2d478 = load i64, i64* @rax, align 8
  ret i64 %v0_2d478
}

define i64 @function_2d656(i64 %arg1) local_unnamed_addr {
dec_label_pc_2d656:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib16MathLib$BinaryOp4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2d660:
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2d662 = load i64, i64* @rdx, align 8
  %v0_2d665 = load i64, i64* @rdi, align 8
  store i64 %v0_2d665, i64* @rbx, align 8
  store i64 %v0_2d662, i64* @rax, align 8
  store i64 %v0_2d662, i64* @rdi, align 8
  %v0_2d67f = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2d67f = call i64 @__asm_movsd.7465(i128 %v0_2d67f)
  %v2_2d68b = load i64, i64* @rdi, align 8
  store i64 %v2_2d68b, i64* @rax, align 8
  %v4_2d68e = call i128 @__asm_movsd(i64 %v1_2d67f)
  %v1_2d694 = call i128 @__asm_movapd(i128 %v0_2d67f)
  %v0_2d698 = load i64, i64* @rbx, align 8
  store i64 %v0_2d698, i64* @rdi, align 8
  %v1_2d69b = call i128 @__asm_movapd(i128 %v4_2d68e)
  store i128 %v1_2d69b, i128* %xmm0.global-to-local, align 8
  store i64 186028, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2d6ae = call i64 @__asm_movsd.7465(i128 %v1_2d69b)
  store i64 186048, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2d758() local_unnamed_addr {
dec_label_pc_2d758:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_2d75d = load i128, i128* @xmm0, align 8
  %v1_2d75d = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_2d75d, i128 %v1_2d75d)
  %v0_2d761 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2d761, label %bb, label %dec_label_pc_2d758.dec_label_pc_2d763_crit_edge

dec_label_pc_2d758.dec_label_pc_2d763_crit_edge:  ; preds = %dec_label_pc_2d758
  %v0_2d763.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2d763

bb:                                               ; preds = %dec_label_pc_2d758
  %v3_2d761 = call i64 @function_2d765(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_2d761, i64* @rax, align 8
  br label %dec_label_pc_2d763

dec_label_pc_2d763:                               ; preds = %dec_label_pc_2d758.dec_label_pc_2d763_crit_edge, %bb
  %v0_2d763 = phi i64 [ %v0_2d763.pre, %dec_label_pc_2d758.dec_label_pc_2d763_crit_edge ], [ %v3_2d761, %bb ]
  ret i64 %v0_2d763
}

define i64 @function_2d765(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2d765:
  store i64 186220, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2d76e = load i128, i128* @xmm0, align 8
  %v1_2d76e = call i64 @__asm_movsd.7465(i128 %v0_2d76e)
  %v0_2d779 = load i64, i64* @rax, align 8
  store i64 %v0_2d779, i64* @rdi, align 8
  store i64 %v0_2d779, i64* @rbx, align 8
  %v4_2d784 = call i128 @__asm_movsd(i64 %v1_2d76e)
  %v1_2d78a = call i64 @__asm_movsd.7465(i128 %v4_2d784)
  %v2_2d78a = load i64, i64* @rbx, align 8
  %v3_2d78a = add i64 %v2_2d78a, 8
  %v4_2d78a = inttoptr i64 %v3_2d78a to i64*
  store i64 %v1_2d78a, i64* %v4_2d78a, align 8
  %v0_2d78f = load i64, i64* @rbx, align 8
  store i64 %v0_2d78f, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_2d78f
}

define i64 @function_2d7a0() local_unnamed_addr {
dec_label_pc_2d7a0:
  %v0_2d7a5 = load i64, i64* @rax, align 8
  ret i64 %v0_2d7a5
}

define i64 @function_2d7b0() local_unnamed_addr {
dec_label_pc_2d7b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_2d7be(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2d7be:
  %rbp.global-to-local = alloca i64, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_2d7d7 = load i64, i64* %rbp.global-to-local, align 8
  %v1_2d7d7 = trunc i64 %v0_2d7d7 to i32
  store i32 %v1_2d7d7, i32* inttoptr (i64 8 to i32*), align 8
  %v0_2d7da = load i64, i64* @rbx, align 8
  store i64 %v0_2d7da, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v0_2d7da
}

define i64 @function_2d7e4() local_unnamed_addr {
dec_label_pc_2d7e4:
  %pf.global-to-local = alloca i1, align 1
  %v0_2d7e4 = load i128, i128* @xmm0, align 8
  %v1_2d7e4 = load i64, i64* inttoptr (i64 186348 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2d7e4, i64 %v1_2d7e4)
  %v0_2d7ec = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_2d7ec, label %bb, label %dec_label_pc_2d7e4.dec_label_pc_2d7f2_crit_edge

dec_label_pc_2d7e4.dec_label_pc_2d7f2_crit_edge:  ; preds = %dec_label_pc_2d7e4
  %v4_2d7ec.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_2d7f2

bb:                                               ; preds = %dec_label_pc_2d7e4
  %v3_2d7ec = call i64 @function_2d765(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_2d7ec, i64* @rax, align 8
  br label %dec_label_pc_2d7f2

dec_label_pc_2d7f2:                               ; preds = %dec_label_pc_2d7e4.dec_label_pc_2d7f2_crit_edge, %bb
  %v4_2d7ec = phi i64 [ %v4_2d7ec.pre, %dec_label_pc_2d7e4.dec_label_pc_2d7f2_crit_edge ], [ %v3_2d7ec, %bb ]
  ret i64 %v4_2d7ec
}

define i64 @function_2d7f7() local_unnamed_addr {
dec_label_pc_2d7f7:
  %v0_2d7f7 = load i64, i64* @rax, align 8
  %v1_2d7f7 = add i64 %v0_2d7f7, -115
  %v2_2d7f7 = inttoptr i64 %v1_2d7f7 to i32*
  %v3_2d7f7 = load i32, i32* %v2_2d7f7, align 4
  %v4_2d7f7 = add i32 %v3_2d7f7, -1
  store i32 %v4_2d7f7, i32* %v2_2d7f7, align 4
  store i64 0, i64* @rax, align 8
  store i64 256, i64* @rdx, align 8
  store i64 256, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2d815() local_unnamed_addr {
dec_label_pc_2d815:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7valueOfEJPNS1_9LuaStringEP6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2d820:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2d836 = load i64, i64* @rdx, align 8
  store i64 %v0_2d836, i64* @rbx, align 8
  store i64 186443, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2da2a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2da2a:
  store i64 %arg1, i64* @rbx, align 8
  %v0_2da38 = load i64, i64* @rax, align 8
  ret i64 %v0_2da38
}

define i64 @function_2da40() local_unnamed_addr {
dec_label_pc_2da40:
  store i64 186951, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2db20(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2db20:
  %r10.global-to-local = alloca i64, align 8
  %r12.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2db20 = load i64, i64* @rbx, align 8
  %v2_2db20 = load i64, i64* @rdx, align 8
  %v1_2db29 = add i64 %v2_2db20, 16
  %v2_2db29 = inttoptr i64 %v1_2db29 to i32*
  %v3_2db29 = load i32, i32* %v2_2db29, align 4
  %v4_2db29 = zext i32 %v3_2db29 to i64
  store i64 %v4_2db29, i64* @rcx, align 8
  store i64 187187, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2db35 = add i64 %v2_2db20, 8
  %v2_2db35 = inttoptr i64 %v1_2db35 to i64*
  %v3_2db35 = load i64, i64* %v2_2db35, align 8
  store i64 %v4_2db29, i64* @rcx, align 8
  %v1_2db4b = add i64 %v3_2db35, 8
  %v2_2db4b = inttoptr i64 %v1_2db4b to i32*
  %v3_2db4b = load i32, i32* %v2_2db4b, align 4
  %v4_2db4b = zext i32 %v3_2db4b to i64
  store i64 %v4_2db4b, i64* %r10.global-to-local, align 8
  %v3_2db4f = add i64 %v4_2db29, %v0_2db20
  store i64 %v3_2db4f, i64* @rax, align 8
  %v0_2db5b = load i64, i64* %r12.global-to-local, align 8
  %v1_2db5b = add i64 %v0_2db5b, 8
  %v2_2db5b = inttoptr i64 %v1_2db5b to i32*
  %v3_2db5b = load i32, i32* %v2_2db5b, align 4
  %v4_2db5b = zext i32 %v3_2db5b to i64
  store i64 %v4_2db5b, i64* @r11, align 8
  %v0_2db60 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v4_2db29, i64* @rax, align 8
  store i64 %v0_2db60, i64* @rdi, align 8
  store i64 %v0_2db20, i64* @rcx, align 8
  br label %dec_label_pc_2dba7

dec_label_pc_2db80:                               ; preds = %dec_label_pc_2dba7
  %v0_2db80 = load i64, i64* %r10.global-to-local, align 8
  %v1_2db80 = trunc i64 %v0_2db80 to i32
  %v3_2db80 = trunc i64 %v2_2db80 to i32
  %tmp250 = icmp ugt i32 %v1_2db80, %v3_2db80
  br i1 %tmp250, label %dec_label_pc_2db85, label %bb

bb:                                               ; preds = %dec_label_pc_2db80
  %v3_2db83 = call i64 @function_2dbc4()
  store i64 %v3_2db83, i64* @rax, align 8
  %v2_2db88.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_2db85

dec_label_pc_2db85:                               ; preds = %dec_label_pc_2db80, %bb
  %v2_2db88 = phi i64 [ %v2_2db88.pre, %bb ], [ %v2_2db888, %dec_label_pc_2db80 ]
  %v0_2db85 = phi i64 [ %v3_2db83, %bb ], [ %v2_2db80, %dec_label_pc_2db80 ]
  %v0_2db88 = load i64, i64* @r11, align 8
  %v1_2db88 = trunc i64 %v0_2db88 to i32
  %v3_2db88 = trunc i64 %v2_2db88 to i32
  %tmp251 = icmp ugt i32 %v1_2db88, %v3_2db88
  br i1 %tmp251, label %dec_label_pc_2db93, label %bb247

bb247:                                            ; preds = %dec_label_pc_2db85
  %v3_2db91 = call i64 @function_2dbbd()
  store i64 %v3_2db91, i64* @rax, align 8
  %v0_2db93.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_2db93

dec_label_pc_2db93:                               ; preds = %dec_label_pc_2db85, %bb247
  %v0_2db96 = phi i64 [ %v3_2db91, %bb247 ], [ %v0_2db85, %dec_label_pc_2db85 ]
  %v0_2db99 = phi i64 [ %v0_2db93.pre, %bb247 ], [ %v2_2db88, %dec_label_pc_2db85 ]
  %v2_2db96 = add i64 %v0_2db96, 1
  %v17_2db96 = and i64 %v2_2db96, 4294967295
  store i64 %v17_2db96, i64* @rax, align 8
  %v2_2db99 = add i64 %v0_2db99, 1
  %v17_2db99 = and i64 %v2_2db99, 4294967295
  store i64 %v17_2db99, i64* @rdi, align 8
  %v0_2dba7.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_2dba7

dec_label_pc_2dba7:                               ; preds = %dec_label_pc_2db93, %dec_label_pc_2db20
  %v2_2db888 = phi i64 [ %v17_2db99, %dec_label_pc_2db93 ], [ %v0_2db60, %dec_label_pc_2db20 ]
  %v2_2db80 = phi i64 [ %v17_2db96, %dec_label_pc_2db93 ], [ %v4_2db29, %dec_label_pc_2db20 ]
  %v0_2dba7 = phi i64 [ %v0_2dba7.pre, %dec_label_pc_2db93 ], [ %v0_2db20, %dec_label_pc_2db20 ]
  %v1_2dba7 = trunc i64 %v0_2dba7 to i32
  %v2_2dba7 = add i32 %v1_2dba7, -1
  %v12_2dba7 = icmp slt i32 %v2_2dba7, 0
  %v17_2dba7 = zext i32 %v2_2dba7 to i64
  store i64 %v17_2dba7, i64* @rcx, align 8
  %v1_2dbaa = icmp eq i1 %v12_2dba7, false
  br i1 %v1_2dbaa, label %dec_label_pc_2db80, label %dec_label_pc_2dbac

dec_label_pc_2dbac:                               ; preds = %dec_label_pc_2dba7
  %v0_2dbac = load i64, i64* @rdx, align 8
  store i64 %v0_2dbac, i64* @rax, align 8
  %v6_2dbaf = call i64 @function_2da2a(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_2dbaf, i64* @rax, align 8
  ret i64 %v6_2dbaf
}

define i64 @function_2dbb4() local_unnamed_addr {
dec_label_pc_2dbb4:
  %v0_2dbb6 = load i64, i64* @rax, align 8
  ret i64 %v0_2dbb6
}

define i64 @function_2dbbb(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2dbbb:
  store i64 %arg2, i64* @rdi, align 8
  %v1_2dbbb = load i64, i64* @rax, align 8
  ret i64 %v1_2dbbb
}

define i64 @function_2dbbd() local_unnamed_addr {
dec_label_pc_2dbbd:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2dbc4() local_unnamed_addr {
dec_label_pc_2dbc4:
  %v0_2dbc4 = load i64, i64* @rax, align 8
  store i64 %v0_2dbc4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2dbcd(i32 %arg1) local_unnamed_addr {
dec_label_pc_2dbcd:
  %v3_2dbcd = zext i32 %arg1 to i64
  store i64 %v3_2dbcd, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib13MathLib$frexp6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2dbe0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_2dbe0 = load i64, i64* %r12.global-to-local, align 8
  %v0_2dbe2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2dbe3 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2dbe3, i64* @rdi, align 8
  %v0_2dbe6 = load i64, i64* @rbx, align 8
  store i64 %v0_2dbe6, i64* %stack_var_-24, align 8
  %v4_2dbe6 = ptrtoint i64* %stack_var_-24 to i64
  %v1_2dbe7 = add i64 %v4_2dbe6, 240
  %v11_2dbe7 = trunc i64 %v1_2dbe7 to i8
  %v12_2dbe7 = call i8 @llvm.ctpop.i8(i8 %v11_2dbe7)
  %v13_2dbe7 = urem i8 %v12_2dbe7, 2
  %v14_2dbe7 = icmp eq i8 %v13_2dbe7, 0
  store i64 %v0_2dbe3, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v0_2dbf9 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_2dbf9 = load i64, i64* inttoptr (i64 187393 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_2dbf9, i64 %v1_2dbf9)
  br i1 %v14_2dbe7, label %dec_label_pc_2dc09, label %dec_label_pc_2dc03

dec_label_pc_2dc03:                               ; preds = %dec_label_pc_2dbe0
  %v1_2dc01 = load i64, i64* @rax, align 8
  ret i64 %v1_2dc01

dec_label_pc_2dc09:                               ; preds = %dec_label_pc_2dbe0
  %v0_2dc0e = load i128, i128* %xmm0.global-to-local, align 8
  %v2_2dc0e = call i128 @__asm_pxor(i128 %v0_2dc0e, i128 %v0_2dc0e)
  store i128 %v2_2dc0e, i128* %xmm0.global-to-local, align 8
  %v0_2dc12 = load i64, i64* @rax, align 8
  store i64 %v0_2dc12, i64* @rbx, align 8
  store i64 4503599627370496, i64* @rdx, align 8
  %v2_2dc29 = and i64 %v0_2dc12, 4503599627370495
  store i64 %v2_2dc29, i64* @rax, align 8
  %v0_2dc2c = load i64, i64* inttoptr (i64 187444 to i64*), align 8
  %v1_2dc2c = call i128 @__asm_movsd(i64 %v0_2dc2c)
  %v0_2dc34 = load i64, i64* @rax, align 8
  %v1_2dc34 = load i64, i64* @rdx, align 8
  %v2_2dc34 = add i64 %v1_2dc34, %v0_2dc34
  store i64 %v2_2dc34, i64* @rax, align 8
  %v2_2dc37 = icmp slt i64 %v0_2dc12, 0
  %v1_2dc3a = call i128 @__asm_cvtsi2sd(i64 %v2_2dc34)
  store i128 %v1_2dc3a, i128* %xmm0.global-to-local, align 8
  br i1 %v2_2dc37, label %bb, label %dec_label_pc_2dc45

bb:                                               ; preds = %dec_label_pc_2dc09
  %v1_2dc3f = call i64 @function_2dd50()
  store i64 %v1_2dc3f, i64* @rax, align 8
  br label %dec_label_pc_2dc45

dec_label_pc_2dc45:                               ; preds = %bb, %dec_label_pc_2dc09
  %v2_2dc45 = call i128 @__asm_mulsd(i128 %v1_2dc3a, i128 %v1_2dc2c)
  store i128 %v2_2dc45, i128* %xmm0.global-to-local, align 8
  store i64 187472, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v2_2dc526 = udiv i64 %v0_2dc12, 4503599627370496
  %v1_2dc56 = trunc i64 %v2_2dc526 to i32
  %v2_2dc56 = urem i32 %v1_2dc56, 2048
  %v2_2dc5c = add nsw i32 %v2_2dc56, -1022
  %v17_2dc5c = zext i32 %v2_2dc5c to i64
  store i64 %v17_2dc5c, i64* @rbx, align 8
  %v1_2dc62 = call i64 @__asm_movsd.7465(i128 %v2_2dc45)
  %v4_2dc6d = call i128 @__asm_movsd(i64 %v1_2dc62)
  store i128 %v4_2dc6d, i128* %xmm0.global-to-local, align 8
  store i64 187519, i64* @rdi, align 8
  %v0_2dc7f = load i64, i64* @rax, align 8
  store i64 %v0_2dc7f, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v2_2dc89 = call i128 @__asm_pxor(i128 %v4_2dc6d, i128 %v4_2dc6d)
  store i128 %v2_2dc89, i128* %xmm0.global-to-local, align 8
  %v3_2dc8d = call i128 @__asm_cvtsi2sd.7468(i32 %v2_2dc5c)
  store i128 %v3_2dc8d, i128* %xmm0.global-to-local, align 8
  store i64 %v0_2dc7f, i64* @rbx, align 8
  store i64 187552, i64* @rdi, align 8
  %v0_2dca0 = load i64, i64* @rax, align 8
  store i64 %v0_2dca0, i64* %r12.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_2dcaa = inttoptr i64 %v0_2dca0 to i64*
  %v2_2dcaa = load i64, i64* %v1_2dcaa, align 8
  store i64 %v2_2dcaa, i64* @rax, align 8
  store i64 %v0_2dca0, i64* @rdi, align 8
  %v4_2dcb4 = trunc i64 %v2_2dcaa to i32
  %v5_2dcb4 = icmp eq i32 %v4_2dcb4, 0
  %v1_2dcb6 = icmp eq i1 %v5_2dcb4, false
  br i1 %v1_2dcb6, label %bb255, label %dec_label_pc_2dcb8

bb255:                                            ; preds = %dec_label_pc_2dc45
  %v2_2dcb6 = call i64 @function_2dd20()
  store i64 %v2_2dcb6, i64* @rax, align 8
  %v0_2dcb8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2dcb8

dec_label_pc_2dcb8:                               ; preds = %bb255, %dec_label_pc_2dc45
  %v0_2dcb8 = phi i64 [ %v0_2dcb8.pre, %bb255 ], [ %v0_2dc7f, %dec_label_pc_2dc45 ]
  store i64 %v0_2dcb8, i64* @rax, align 8
  %v2_2dcbf = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_2dcbf, i64* @rbx, align 8
  store i64 %v0_2dbe2, i64* %rbp.global-to-local, align 8
  store i64 %v0_2dbe0, i64* %r12.global-to-local, align 8
  ret i64 %v0_2dcb8
}

define i64 @function_2dd20() local_unnamed_addr {
dec_label_pc_2dd20:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2dd50() local_unnamed_addr {
dec_label_pc_2dd50:
  %v0_2dd50 = load i64, i64* inttoptr (i64 187736 to i64*), align 8
  %v1_2dd50 = call i128 @__asm_movsd(i64 %v0_2dd50)
  %v0_2dd58 = load i64, i64* @rax, align 8
  ret i64 %v0_2dd58
}

define i64 @_ZN3org4luaj3vm29LuaString7valueOfEJPS2_P6JArrayIcE(i64 %arg1) local_unnamed_addr {
dec_label_pc_2dd60:
  %r12.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %r8.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2dd6a = load i64, i64* @rdi, align 8
  store i64 %v0_2dd6a, i64* %r12.global-to-local, align 8
  store i64 187766, i64* @rdi, align 8
  %v1_2dd7f = add i64 %v0_2dd6a, 8
  %v2_2dd7f = inttoptr i64 %v1_2dd7f to i32*
  %v3_2dd7f = load i32, i32* %v2_2dd7f, align 4
  %v4_2dd7f = zext i32 %v3_2dd7f to i64
  store i64 %v4_2dd7f, i64* @rbx, align 8
  store i64 187787, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v10_2dd95 = icmp sgt i32 %v3_2dd7f, 32
  br i1 %v10_2dd95, label %bb, label %dec_label_pc_2dd9b

bb:                                               ; preds = %dec_label_pc_2dd60
  %v11_2dd95 = call i64 @function_2df70()
  store i64 %v11_2dd95, i64* @rax, align 8
  %v0_2dd9b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2dd9b

dec_label_pc_2dd9b:                               ; preds = %bb, %dec_label_pc_2dd60
  %v0_2ddb4 = phi i64 [ %v0_2dd9b.pre, %bb ], [ %v4_2dd7f, %dec_label_pc_2dd60 ]
  store i64 187813, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2dda7 = trunc i64 %v0_2ddb4 to i32
  %v3_2dda7 = sdiv i32 %v1_2dda7, 32
  %v2_2ddab = add nsw i32 %v3_2dda7, 1
  %v17_2ddab = zext i32 %v2_2ddab to i64
  store i64 %v17_2ddab, i64* %r15.global-to-local, align 8
  %v5_2ddb7 = icmp slt i64 %v0_2ddb4, %v17_2ddab
  br i1 %v5_2ddb7, label %bb278, label %dec_label_pc_2ddbd

bb278:                                            ; preds = %dec_label_pc_2dd9b
  %v6_2ddb7 = call i64 @function_2e0dc()
  store i64 %v6_2ddb7, i64* @rax, align 8
  %v0_2ddc2.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2ddbd

dec_label_pc_2ddbd:                               ; preds = %bb278, %dec_label_pc_2dd9b
  %v0_2ddc2 = phi i64 [ %v0_2ddc2.pre, %bb278 ], [ %v0_2ddb4, %dec_label_pc_2dd9b ]
  %v0_2ddbd = load i64, i64* %r12.global-to-local, align 8
  %v1_2ddbd = add i64 %v0_2ddbd, 8
  %v2_2ddbd = inttoptr i64 %v1_2ddbd to i32*
  %v3_2ddbd = load i32, i32* %v2_2ddbd, align 4
  %v4_2ddbd = zext i32 %v3_2ddbd to i64
  store i64 %v4_2ddbd, i64* %r8.global-to-local, align 8
  %v1_2ddc6 = add i64 %v0_2ddc2, -1
  store i64 %v1_2ddc6, i64* @rdi, align 8
  %v1_2ddc9 = trunc i64 %v0_2ddc2 to i32
  %v3_2ddc9 = mul i32 %v1_2ddc9, 32
  %v3_2ddcc = sdiv i32 %v1_2ddc9, 4
  %v10_2ddcc = zext i32 %v3_2ddcc to i64
  store i64 %v10_2ddcc, i64* @rdx, align 8
  %v4_2ddcf = add i32 %v3_2ddcc, %v3_2ddc9
  %v20_2ddcf = zext i32 %v4_2ddcf to i64
  store i64 %v20_2ddcf, i64* @rax, align 8
  %v1_2ddd1 = add i64 %v0_2ddbd, 12
  %v3_2ddd6 = trunc i64 %v1_2ddc6 to i32
  %tmp286 = icmp ugt i32 %v3_2ddbd, %v3_2ddd6
  br i1 %tmp286, label %dec_label_pc_2dddf, label %bb279

bb279:                                            ; preds = %dec_label_pc_2ddbd
  %v3_2ddd9 = call i64 @function_2e0e6()
  store i64 %v3_2ddd9, i64* @rax, align 8
  %v0_2dde4.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2dddf

dec_label_pc_2dddf:                               ; preds = %dec_label_pc_2ddbd, %bb279
  %v0_2de0f18 = phi i64 [ %v3_2ddd9, %bb279 ], [ %v20_2ddcf, %dec_label_pc_2ddbd ]
  %v0_2dde4 = phi i64 [ %v0_2dde4.pre, %bb279 ], [ %v0_2ddc2, %dec_label_pc_2ddbd ]
  %v2_2dde6 = load i64, i64* %r15.global-to-local, align 8
  %v4_2dde6 = sub i64 1, %v2_2dde6
  %v20_2dde6 = and i64 %v4_2dde6, 4294967295
  store i64 %v20_2dde6, i64* @rcx, align 8
  br label %dec_label_pc_2de08

dec_label_pc_2ddf0:                               ; preds = %dec_label_pc_2de08
  %v3_2de16 = trunc i64 %v2_2ddf4 to i32
  %v1_2ddf4 = trunc i64 %v0_2de08 to i32
  %v4_2ddf4 = sub i32 %v1_2ddf4, %v3_2de16
  %v20_2ddf4 = zext i32 %v4_2ddf4 to i64
  store i64 %v20_2ddf4, i64* @rdi, align 8
  %v3_2ddf7 = mul i32 %v4_2de11, 32
  %v3_2ddfa = sdiv i32 %v4_2de11, 4
  %v10_2ddfa = zext i32 %v3_2ddfa to i64
  store i64 %v10_2ddfa, i64* @rdx, align 8
  %v4_2ddfd = add i32 %v3_2ddfa, %v3_2ddf7
  %v20_2ddfd = zext i32 %v4_2ddfd to i64
  store i64 %v20_2ddfd, i64* @rax, align 8
  %v2_2ddff = load i64, i64* %r8.global-to-local, align 8
  %v3_2ddff = trunc i64 %v2_2ddff to i32
  %v9_2ddff = icmp ult i32 %v4_2ddf4, %v3_2ddff
  %v1_2de02 = icmp eq i1 %v9_2ddff, false
  br i1 %v1_2de02, label %bb280, label %dec_label_pc_2de08

bb280:                                            ; preds = %dec_label_pc_2ddf0
  %v2_2de02 = call i64 @function_2e0e6()
  store i64 %v2_2de02, i64* @rax, align 8
  %v0_2de11.pre.pre = load i64, i64* @rbp, align 8
  %v0_2de13.pre.pre = load i64, i64* @rcx, align 8
  %v2_2de16.pre.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_2de08

dec_label_pc_2de08:                               ; preds = %bb280, %dec_label_pc_2ddf0, %dec_label_pc_2dddf
  %v2_2ddf4 = phi i64 [ %v2_2dde6, %dec_label_pc_2dddf ], [ %v2_2ddf4, %dec_label_pc_2ddf0 ], [ %v2_2de16.pre.pre, %bb280 ]
  %v0_2de13 = phi i64 [ %v20_2dde6, %dec_label_pc_2dddf ], [ %v0_2de13, %dec_label_pc_2ddf0 ], [ %v0_2de13.pre.pre, %bb280 ]
  %v0_2de11 = phi i64 [ %v0_2dde4, %dec_label_pc_2dddf ], [ %v11_2de11, %dec_label_pc_2ddf0 ], [ %v0_2de11.pre.pre, %bb280 ]
  %v0_2de0f = phi i64 [ %v0_2de0f18, %dec_label_pc_2dddf ], [ %v20_2ddfd, %dec_label_pc_2ddf0 ], [ %v2_2de02, %bb280 ]
  %v0_2de08 = load i64, i64* @rdi, align 8
  store i64 %v0_2de08, i64* @rdx, align 8
  %v3_2de0b = add i64 %v0_2de08, %v1_2ddd1
  %v4_2de0b = inttoptr i64 %v3_2de0b to i8*
  %v5_2de0b = load i8, i8* %v4_2de0b, align 1
  %v6_2de0b = zext i8 %v5_2de0b to i64
  store i64 %v6_2de0b, i64* @rdx, align 8
  %v1_2de0f = trunc i64 %v0_2de0f to i32
  %v3_2de0f = zext i8 %v5_2de0b to i32
  %v4_2de0f = add i32 %v3_2de0f, %v1_2de0f
  %v1_2de11 = trunc i64 %v0_2de11 to i32
  %v4_2de11 = xor i32 %v4_2de0f, %v1_2de11
  %v11_2de11 = zext i32 %v4_2de11 to i64
  store i64 %v11_2de11, i64* @rbp, align 8
  %v3_2de13 = add i64 %v0_2de08, %v0_2de13
  store i64 %v3_2de13, i64* @rax, align 8
  %v5_2de19 = icmp slt i64 %v3_2de13, %v2_2ddf4
  br i1 %v5_2de19, label %dec_label_pc_2de1b, label %dec_label_pc_2ddf0

dec_label_pc_2de1b:                               ; preds = %dec_label_pc_2de08
  store i64 187938, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v2_2de27 = urem i32 %v4_2de11, 128
  %v9_2de27 = zext i32 %v2_2de27 to i64
  store i64 %v9_2de27, i64* @r14, align 8
  %v0_2de30 = load i64, i64* inttoptr (i64 187959 to i64*), align 8
  store i64 %v0_2de30, i64* @rax, align 8
  %v3_2de37 = add i64 %v0_2de30, 8
  %v4_2de37 = inttoptr i64 %v3_2de37 to i32*
  %v5_2de37 = load i32, i32* %v4_2de37, align 4
  %v11_2de37 = icmp ult i32 %v2_2de27, %v5_2de37
  %v1_2de3b = icmp eq i1 %v11_2de37, false
  br i1 %v1_2de3b, label %bb281, label %dec_label_pc_2de41

bb281:                                            ; preds = %dec_label_pc_2de1b
  %v2_2de3b = call i64 @function_2e0e3()
  store i64 %v2_2de3b, i64* @rax, align 8
  %v0_2de41.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_2de41

dec_label_pc_2de41:                               ; preds = %bb281, %dec_label_pc_2de1b
  %v0_2de48 = phi i64 [ %v2_2de3b, %bb281 ], [ %v0_2de30, %dec_label_pc_2de1b ]
  %v0_2de41 = phi i64 [ %v0_2de41.pre, %bb281 ], [ %v9_2de27, %dec_label_pc_2de1b ]
  %v2_2de44 = mul i64 %v0_2de41, 8
  %v3_2de48 = add i64 %v0_2de48, 16
  %v4_2de48 = add i64 %v3_2de48, %v2_2de44
  %v5_2de48 = inttoptr i64 %v4_2de48 to i64*
  %v6_2de48 = load i64, i64* %v5_2de48, align 8
  store i64 %v6_2de48, i64* @rdx, align 8
  %v1_2de4d = icmp eq i64 %v6_2de48, 0
  br i1 %v1_2de4d, label %dec_label_pc_2de5b, label %dec_label_pc_2de52

dec_label_pc_2de52:                               ; preds = %dec_label_pc_2de41
  %v1_2de52 = add i64 %v6_2de48, 24
  %v2_2de52 = inttoptr i64 %v1_2de52 to i32*
  %v3_2de52 = load i32, i32* %v2_2de52, align 4
  %v4_2de52 = load i64, i64* @rbp, align 8
  %v5_2de52 = trunc i64 %v4_2de52 to i32
  %v16_2de52 = icmp eq i32 %v3_2de52, %v5_2de52
  br i1 %v16_2de52, label %bb282, label %dec_label_pc_2de5b

bb282:                                            ; preds = %dec_label_pc_2de52
  %v4_2de55 = call i64 @function_2e050(i64 187938, i64 %v1_2ddd1, i64 %v6_2de48)
  store i64 %v4_2de55, i64* @rax, align 8
  br label %dec_label_pc_2de5b

dec_label_pc_2de5b:                               ; preds = %bb282, %dec_label_pc_2de52, %dec_label_pc_2de41
  %v0_2de62 = load i64, i64* @rbx, align 8
  store i64 0, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v0_2de62, i64* %r8.global-to-local, align 8
  store i64 188039, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2df70() local_unnamed_addr {
dec_label_pc_2df70:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_2e050(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2e050:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 188516, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2e0dc() local_unnamed_addr {
dec_label_pc_2e0dc:
  %v0_2e0dc = load i64, i64* @rbx, align 8
  store i64 %v0_2e0dc, i64* @rbp, align 8
  %v0_2e0de = load i64, i64* @rax, align 8
  ret i64 %v0_2e0de
}

define i64 @function_2e0e3() local_unnamed_addr {
dec_label_pc_2e0e3:
  %v0_2e0e3 = load i64, i64* @r14, align 8
  store i64 %v0_2e0e3, i64* @rdi, align 8
  %v1_2e0e3 = load i64, i64* @rax, align 8
  ret i64 %v1_2e0e3
}

define i64 @function_2e0e6() local_unnamed_addr {
dec_label_pc_2e0e6:
  %v0_2e0ed = load i64, i64* @rbp, align 8
  store i64 %v0_2e0ed, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer8concatToEJPS2_PNS1_9LuaNumberE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2e100:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2e107 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2e107, i64* @rbp, align 8
  %v0_2e10b = load i64, i64* @rdi, align 8
  store i64 %v0_2e10b, i64* @rbx, align 8
  %v1_2e10e = add i64 %v0_2e10b, 24
  %v2_2e10e = inttoptr i64 %v1_2e10e to i64*
  %v3_2e10e = load i64, i64* %v2_2e10e, align 8
  store i64 %v3_2e10e, i64* @rdi, align 8
  %v1_2e112 = icmp eq i64 %v3_2e10e, 0
  br i1 %v1_2e112, label %dec_label_pc_2e128, label %dec_label_pc_2e117

dec_label_pc_2e117:                               ; preds = %dec_label_pc_2e100
  %v1_2e117 = inttoptr i64 %v3_2e10e to i64*
  %v2_2e117 = load i64, i64* %v1_2e117, align 8
  store i64 %v2_2e117, i64* @rax, align 8
  %v4_2e120 = trunc i64 %v2_2e117 to i8
  %v5_2e120 = icmp eq i8 %v4_2e120, 0
  br i1 %v5_2e120, label %bb, label %dec_label_pc_2e128

bb:                                               ; preds = %dec_label_pc_2e117
  %v6_2e122 = call i64 @function_2e250(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_2e122, i64* @rax, align 8
  %v2_2e128.pre = load i64, i64* @rsi, align 8
  %v0_2e12c.pre = load i64, i64* @rbp, align 8
  %v0_2e135.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2e128

dec_label_pc_2e128:                               ; preds = %bb, %dec_label_pc_2e117, %dec_label_pc_2e100
  %v0_2e135 = phi i64 [ %v0_2e135.pre, %bb ], [ %v0_2e10b, %dec_label_pc_2e117 ], [ %v0_2e10b, %dec_label_pc_2e100 ]
  %v0_2e12c = phi i64 [ %v0_2e12c.pre, %bb ], [ %v0_2e107, %dec_label_pc_2e117 ], [ %v0_2e107, %dec_label_pc_2e100 ]
  %v2_2e128 = phi i64 [ %v2_2e128.pre, %bb ], [ %v0_2e107, %dec_label_pc_2e117 ], [ %v0_2e107, %dec_label_pc_2e100 ]
  store i64 %v2_2e128, i64* @rax, align 8
  store i64 %v0_2e12c, i64* @rdi, align 8
  %v1_2e135 = add i64 %v0_2e135, 24
  %v2_2e135 = inttoptr i64 %v1_2e135 to i64*
  %v3_2e135 = load i64, i64* %v2_2e135, align 8
  store i64 %v3_2e135, i64* @rdi, align 8
  %v1_2e13c = add i64 %v2_2e128, 20
  %v2_2e13c = inttoptr i64 %v1_2e13c to i32*
  %v3_2e13c = load i32, i32* %v2_2e13c, align 4
  %v4_2e13c = zext i32 %v3_2e13c to i64
  store i64 %v4_2e13c, i64* @rbp, align 8
  %v1_2e13f = icmp eq i64 %v3_2e135, 0
  br i1 %v1_2e13f, label %bb247, label %dec_label_pc_2e148

bb247:                                            ; preds = %dec_label_pc_2e128
  %v1_2e142 = call i64 @function_2e1c8()
  store i64 %v1_2e142, i64* @rax, align 8
  %v0_2e15e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2e148

dec_label_pc_2e148:                               ; preds = %bb247, %dec_label_pc_2e128
  %v0_2e15e = phi i64 [ %v0_2e15e.pre, %bb247 ], [ %v0_2e135, %dec_label_pc_2e128 ]
  %v1_2e148 = inttoptr i64 %v3_2e135 to i64*
  %v2_2e148 = load i64, i64* %v1_2e148, align 8
  store i64 %v2_2e148, i64* @rax, align 8
  %v1_2e151 = add i64 %v2_2e148, 20
  %v2_2e151 = inttoptr i64 %v1_2e151 to i32*
  %v3_2e151 = load i32, i32* %v2_2e151, align 4
  %v4_2e151 = zext i32 %v3_2e151 to i64
  store i64 %v4_2e151, i64* %rsi.global-to-local, align 8
  store i64 188763, i64* @rdi, align 8
  %v1_2e15e = add i64 %v0_2e15e, 24
  %v2_2e15e = inttoptr i64 %v1_2e15e to i64*
  store i64 0, i64* %v2_2e15e, align 8
  %v0_2e166 = load i64, i64* @rbp, align 8
  %v1_2e166 = trunc i64 %v0_2e166 to i32
  %v2_2e166 = load i64, i64* @rbx, align 8
  %v3_2e166 = add i64 %v2_2e166, 20
  %v4_2e166 = inttoptr i64 %v3_2e166 to i32*
  store i32 %v1_2e166, i32* %v4_2e166, align 4
  store i64 0, i64* @rax, align 8
  %v0_2e16b = load i64, i64* %rsi.global-to-local, align 8
  %v1_2e16b = trunc i64 %v0_2e16b to i32
  %v2_2e16b = load i64, i64* @rbx, align 8
  %v3_2e16b = add i64 %v2_2e16b, 16
  %v4_2e16b = inttoptr i64 %v3_2e16b to i32*
  store i32 %v1_2e16b, i32* %v4_2e16b, align 4
  %v0_2e16e = load i64, i64* %rsi.global-to-local, align 8
  %v2_2e16e = load i64, i64* @rbp, align 8
  %v4_2e16e = add i64 %v2_2e16e, %v0_2e16e
  %v20_2e16e = and i64 %v4_2e16e, 4294967295
  store i64 %v20_2e16e, i64* %rsi.global-to-local, align 8
  %v21_2e16e = load i64, i64* @rax, align 8
  ret i64 %v21_2e16e
}

define i64 @function_2e1c8() local_unnamed_addr {
dec_label_pc_2e1c8:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %v0_2e1c8 = load i64, i64* @rbx, align 8
  %v1_2e1c8 = add i64 %v0_2e1c8, 8
  %v2_2e1c8 = inttoptr i64 %v1_2e1c8 to i64*
  %v3_2e1c8 = load i64, i64* %v2_2e1c8, align 8
  store i64 %v3_2e1c8, i64* @rdx, align 8
  %v1_2e1cc = add i64 %v0_2e1c8, 20
  %v2_2e1cc = inttoptr i64 %v1_2e1cc to i32*
  %v3_2e1cc = load i32, i32* %v2_2e1cc, align 4
  %v4_2e1cc = zext i32 %v3_2e1cc to i64
  store i64 %v4_2e1cc, i64* @rcx, align 8
  %v1_2e1cf = add i64 %v0_2e1c8, 16
  %v2_2e1cf = inttoptr i64 %v1_2e1cf to i32*
  %v3_2e1cf = load i32, i32* %v2_2e1cf, align 4
  %v4_2e1cf = zext i32 %v3_2e1cf to i64
  store i64 %v4_2e1cf, i64* @rax, align 8
  %v1_2e1d2 = add i64 %v3_2e1c8, 8
  %v2_2e1d2 = inttoptr i64 %v1_2e1d2 to i32*
  %v3_2e1d2 = load i32, i32* %v2_2e1d2, align 4
  %v4_2e1d2 = zext i32 %v3_2e1d2 to i64
  store i64 %v4_2e1d2, i64* @rdi, align 8
  %v3_2e1d5 = add nuw nsw i64 %v4_2e1cf, %v4_2e1cc
  %v8_2e1da = icmp ugt i64 %v3_2e1d5, %v4_2e1d2
  %v0_2e1e0.pre = load i64, i64* @rbp, align 8
  br i1 %v8_2e1da, label %dec_label_pc_2e1e0, label %dec_label_pc_2e1dc

dec_label_pc_2e1dc:                               ; preds = %dec_label_pc_2e1c8
  br label %dec_label_pc_2e1e0

dec_label_pc_2e1e0:                               ; preds = %dec_label_pc_2e1c8, %dec_label_pc_2e1dc
  %v3_2e1e0 = add i64 %v0_2e1e0.pre, %v4_2e1cf
  %v1_2e1ea = trunc i64 %v3_2e1e0 to i32
  %v9_2e1ee = icmp sgt i32 %v1_2e1ea, 31
  br i1 %v9_2e1ee, label %dec_label_pc_2e1f0, label %dec_label_pc_2e1fa

dec_label_pc_2e1f0:                               ; preds = %dec_label_pc_2e1e0
  %v3_2e1f0 = mul nuw nsw i64 %v4_2e1cf, 2
  %v1_2e1f3 = trunc i64 %v3_2e1f0 to i32
  %v4_2e1f3 = sub i32 %v1_2e1f3, %v1_2e1ea
  %v10_2e1f32 = xor i64 %v3_2e1e0, %v3_2e1f0
  %v10_2e1f3 = trunc i64 %v10_2e1f32 to i32
  %v11_2e1f3 = xor i32 %v4_2e1f3, %v1_2e1f3
  %v12_2e1f3 = and i32 %v11_2e1f3, %v10_2e1f3
  %v13_2e1f3 = icmp slt i32 %v12_2e1f3, 0
  %v15_2e1f3 = icmp slt i32 %v4_2e1f3, 0
  %v2_2e1f6 = icmp ne i1 %v15_2e1f3, %v13_2e1f3
  %v7_2e1f6.v = select i1 %v2_2e1f6, i64 %v3_2e1e0, i64 %v3_2e1f0
  %phitmp = trunc i64 %v7_2e1f6.v to i32
  br label %dec_label_pc_2e1fa

dec_label_pc_2e1fa:                               ; preds = %dec_label_pc_2e1e0, %dec_label_pc_2e1f0
  %v2_2e20b = phi i32 [ 32, %dec_label_pc_2e1e0 ], [ %phitmp, %dec_label_pc_2e1f0 ]
  %v4_2e1fd = sub i32 %v2_2e20b, %v3_2e1cf
  %v20_2e1fd = zext i32 %v4_2e1fd to i64
  %v4_2e200 = trunc i64 %v0_2e1e0.pre to i32
  %v5_2e200 = icmp eq i32 %v4_2e200, 0
  store i64 0, i64* @rax, align 8
  %v6_2e207 = select i1 %v5_2e200, i64 0, i64 %v20_2e1fd
  store i64 %v6_2e207, i64* %r13.global-to-local, align 8
  store i64 188950, i64* @rdi, align 8
  %v3_2e21b = load i64, i64* %v2_2e1c8, align 8
  store i64 %v3_2e21b, i64* @rdi, align 8
  store i64 0, i64* %r14.global-to-local, align 8
  store i64 0, i64* %v2_2e1c8, align 8
  %v0_2e238 = load i64, i64* %r13.global-to-local, align 8
  %v1_2e238 = trunc i64 %v0_2e238 to i32
  %v2_2e238 = load i64, i64* @rbx, align 8
  %v3_2e238 = add i64 %v2_2e238, 20
  %v4_2e238 = inttoptr i64 %v3_2e238 to i32*
  store i32 %v1_2e238, i32* %v4_2e238, align 4
  %v0_2e23c = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_2e23c, i64* @rcx, align 8
  %v0_2e23f = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_2e23f, i64* @rdx, align 8
  %v0_2e242 = load i64, i64* @rax, align 8
  ret i64 %v0_2e242
}

define i64 @function_2e250(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2e250:
  %v2_2e250 = load i64, i64* @rbp, align 8
  store i64 %v2_2e250, i64* @rax, align 8
  %v0_2e254 = load i64, i64* @rbx, align 8
  %v1_2e254 = add i64 %v0_2e254, 24
  %v2_2e254 = inttoptr i64 %v1_2e254 to i64*
  %v3_2e254 = load i64, i64* %v2_2e254, align 8
  store i64 %v3_2e254, i64* @rsi, align 8
  store i64 %v2_2e250, i64* @rdi, align 8
  %v0_2e261 = load i64, i64* inttoptr (i64 189032 to i64*), align 8
  store i64 %v0_2e261, i64* @rdx, align 8
  %v1_2e268 = add i64 %v0_2e254, 16
  %v2_2e268 = inttoptr i64 %v1_2e268 to i32*
  store i32 0, i32* %v2_2e268, align 4
  %v0_2e26f = load i64, i64* @rbx, align 8
  %v1_2e26f = add i64 %v0_2e26f, 20
  %v2_2e26f = inttoptr i64 %v1_2e26f to i32*
  store i32 0, i32* %v2_2e26f, align 4
  %v0_2e276 = load i64, i64* @rax, align 8
  %v1_2e276 = load i64, i64* @rbx, align 8
  %v2_2e276 = add i64 %v1_2e276, 24
  %v3_2e276 = inttoptr i64 %v2_2e276 to i64*
  store i64 %v0_2e276, i64* %v3_2e276, align 8
  %v0_2e27a = load i64, i64* @rdx, align 8
  %v1_2e27a = load i64, i64* @rbx, align 8
  %v2_2e27a = add i64 %v1_2e27a, 8
  %v3_2e27a = inttoptr i64 %v2_2e27a to i64*
  store i64 %v0_2e27a, i64* %v3_2e27a, align 8
  %v0_2e27e = load i64, i64* @rbx, align 8
  store i64 %v0_2e27e, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  ret i64 %v0_2e27e
}

define i64 @_ZN3org4luaj3vm28LuaValue6invokeEJPNS1_7VarargsEPS2_S5_S4_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2e290:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2e290 = load i64, i64* %r15.global-to-local, align 8
  %v0_2e292 = load i64, i64* %r14.global-to-local, align 8
  %v0_2e294 = load i64, i64* @rcx, align 8
  store i64 %v0_2e294, i64* %r15.global-to-local, align 8
  %v0_2e297 = load i64, i64* %r13.global-to-local, align 8
  %v0_2e299 = load i64, i64* %r12.global-to-local, align 8
  %v0_2e29b = load i64, i64* @rdi, align 8
  store i64 %v0_2e29b, i64* %r12.global-to-local, align 8
  %v0_2e29e = load i64, i64* %rbp.global-to-local, align 8
  %v0_2e29f = load i64, i64* @rbx, align 8
  %v0_2e2a9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2e2a9, i64* %r14.global-to-local, align 8
  %v0_2e2ac = load i64, i64* @rdx, align 8
  store i64 %v0_2e2ac, i64* %r13.global-to-local, align 8
  store i64 %v0_2e294, i64* @rax, align 8
  store i64 %v0_2e294, i64* @rdi, align 8
  %v4_2e2c1 = trunc i64 %v0_2e294 to i32
  %v5_2e2c1 = icmp eq i32 %v4_2e2c1, 0
  br i1 %v5_2e2c1, label %dec_label_pc_2e368, label %dec_label_pc_2e2c9

dec_label_pc_2e2c9:                               ; preds = %dec_label_pc_2e290
  store i64 189150, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rbx, align 8
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  %v3_2e2f2 = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_2e2f2 = zext i32 %v3_2e2f2 to i64
  store i64 %v4_2e2f2, i64* @rax, align 8
  %v5_2e2f5 = icmp eq i32 %v3_2e2f2, 0
  br i1 %v5_2e2f5, label %bb, label %dec_label_pc_2e2fd

bb:                                               ; preds = %dec_label_pc_2e2c9
  %v2_2e2f7 = call i64 @function_2e398(i64 2)
  store i64 %v2_2e2f7, i64* @rax, align 8
  %v0_2e2ff.pre = load i64, i64* %r14.global-to-local, align 8
  %v0_2e302.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_2e2fd

dec_label_pc_2e2fd:                               ; preds = %bb, %dec_label_pc_2e2c9
  %v1_2e30e = phi i64 [ %v0_2e302.pre, %bb ], [ 0, %dec_label_pc_2e2c9 ]
  %v0_2e30e = phi i64 [ %v0_2e2ff.pre, %bb ], [ %v0_2e2a9, %dec_label_pc_2e2c9 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_2e30e, i64* %rsi.global-to-local, align 8
  store i64 %v1_2e30e, i64* @rdi, align 8
  %v1_2e30a = add i64 %v1_2e30e, 8
  %v2_2e30a = inttoptr i64 %v1_2e30a to i32*
  %v3_2e30a = load i32, i32* %v2_2e30a, align 4
  %v2_2e30e = add i64 %v1_2e30e, 16
  %v3_2e30e = inttoptr i64 %v2_2e30e to i64*
  store i64 %v0_2e30e, i64* %v3_2e30e, align 8
  %tmp255 = or i32 %v3_2e30a, 1
  %tmp256 = icmp eq i32 %tmp255, 1
  br i1 %tmp256, label %bb253, label %dec_label_pc_2e314

bb253:                                            ; preds = %dec_label_pc_2e2fd
  %v3_2e312 = call i64 @function_2e38c()
  store i64 %v3_2e312, i64* @rax, align 8
  br label %dec_label_pc_2e314

dec_label_pc_2e314:                               ; preds = %bb253, %dec_label_pc_2e2fd
  %v0_2e314 = load i64, i64* %r13.global-to-local, align 8
  %v0_2e317 = load i64, i64* %rbp.global-to-local, align 8
  %v2_2e321 = add i64 %v0_2e317, 24
  %v3_2e321 = inttoptr i64 %v2_2e321 to i64*
  store i64 %v0_2e314, i64* %v3_2e321, align 8
  %v0_2e325 = load i64, i64* @rbx, align 8
  store i64 %v0_2e325, i64* @rdi, align 8
  %v0_2e32d = load i64, i64* %rbp.global-to-local, align 8
  %v2_2e32d = add i64 %v0_2e325, 16
  %v3_2e32d = inttoptr i64 %v2_2e32d to i64*
  store i64 %v0_2e32d, i64* %v3_2e32d, align 8
  %v0_2e331 = load i64, i64* @rbx, align 8
  %v1_2e331 = add i64 %v0_2e331, 8
  %v2_2e331 = inttoptr i64 %v1_2e331 to i32*
  store i32 0, i32* %v2_2e331, align 4
  %v0_2e338 = load i64, i64* @rbx, align 8
  store i64 %v0_2e338, i64* %rsi.global-to-local, align 8
  %v1_2e33b = add i64 %v0_2e338, 24
  %v2_2e33b = inttoptr i64 %v1_2e33b to i32*
  store i32 2, i32* %v2_2e33b, align 4
  %v0_2e342 = load i64, i64* %r15.global-to-local, align 8
  %v1_2e342 = load i64, i64* @rbx, align 8
  %v2_2e342 = add i64 %v1_2e342, 32
  %v3_2e342 = inttoptr i64 %v2_2e342 to i64*
  store i64 %v0_2e342, i64* %v3_2e342, align 8
  %v2_2e346 = load i64, i64* @rdi, align 8
  store i64 %v2_2e346, i64* @rax, align 8
  %v0_2e34a = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_2e34a, i64* @rdi, align 8
  store i64 %v0_2e29f, i64* @rbx, align 8
  store i64 %v0_2e29e, i64* %rbp.global-to-local, align 8
  store i64 %v0_2e299, i64* %r12.global-to-local, align 8
  store i64 %v0_2e297, i64* %r13.global-to-local, align 8
  store i64 %v0_2e292, i64* %r14.global-to-local, align 8
  store i64 %v0_2e290, i64* %r15.global-to-local, align 8
  ret i64 %v2_2e346

dec_label_pc_2e368:                               ; preds = %dec_label_pc_2e290
  store i64 %v0_2e294, i64* @rbx, align 8
  store i64 %v0_2e294, i64* @rdi, align 8
  ret i64 %v0_2e294
}

define i64 @function_2e38c() local_unnamed_addr {
dec_label_pc_2e38c:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2e398(i64 %arg1) local_unnamed_addr {
dec_label_pc_2e398:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$ipairs6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2e3b0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2e3b4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2e3b4, i64* @rax, align 8
  store i64 %v0_2e3b4, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v0_2e3c3 = load i64, i64* @rdi, align 8
  %v1_2e3c3 = add i64 %v0_2e3c3, 24
  %v2_2e3c3 = inttoptr i64 %v1_2e3c3 to i64*
  %v3_2e3c3 = load i64, i64* %v2_2e3c3, align 8
  store i64 %v3_2e3c3, i64* @r13, align 8
  store i64 %v0_2e3b4, i64* @rdi, align 8
  %v0_2e3d0 = load i64, i64* inttoptr (i64 189399 to i64*), align 8
  store i64 189406, i64* @rdi, align 8
  store i64 %v0_2e3b4, i64* @r14, align 8
  store i64 0, i64* @rax, align 8
  %v1_2e3e8 = inttoptr i64 %v0_2e3d0 to i64*
  %v2_2e3e8 = load i64, i64* %v1_2e3e8, align 8
  store i64 %v2_2e3e8, i64* @rax, align 8
  store i64 %v0_2e3d0, i64* @rdi, align 8
  %v4_2e3f2 = trunc i64 %v2_2e3e8 to i32
  %v5_2e3f2 = icmp eq i32 %v4_2e3f2, 0
  br i1 %v5_2e3f2, label %bb, label %dec_label_pc_2e3fa

bb:                                               ; preds = %dec_label_pc_2e3b0
  %v6_2e3f4 = call i64 @function_2e480(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_2e3f4, i64* @rax, align 8
  br label %dec_label_pc_2e3fa

dec_label_pc_2e3fa:                               ; preds = %bb, %dec_label_pc_2e3b0
  store i64 189455, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rbx, align 8
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  %v3_2e423 = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_2e423 = zext i32 %v3_2e423 to i64
  store i64 %v4_2e423, i64* @rax, align 8
  %v5_2e426 = icmp eq i32 %v3_2e423, 0
  br i1 %v5_2e426, label %bb248, label %dec_label_pc_2e42e

bb248:                                            ; preds = %dec_label_pc_2e3fa
  %v2_2e428 = call i64 @function_2e4b7(i64 2)
  store i64 %v2_2e428, i64* @rax, align 8
  %v0_2e433.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_2e42e

dec_label_pc_2e42e:                               ; preds = %bb248, %dec_label_pc_2e3fa
  %v1_2e43f = phi i64 [ %v0_2e433.pre, %bb248 ], [ 0, %dec_label_pc_2e3fa ]
  store i64 0, i64* @rax, align 8
  %v0_2e430 = load i64, i64* @r13, align 8
  store i64 %v0_2e430, i64* %rsi.global-to-local, align 8
  store i64 %v1_2e43f, i64* @rdi, align 8
  %v1_2e43b = add i64 %v1_2e43f, 8
  %v2_2e43b = inttoptr i64 %v1_2e43b to i32*
  %v3_2e43b = load i32, i32* %v2_2e43b, align 4
  %v2_2e43f = add i64 %v1_2e43f, 16
  %v3_2e43f = inttoptr i64 %v2_2e43f to i64*
  store i64 %v0_2e430, i64* %v3_2e43f, align 8
  %tmp251 = or i32 %v3_2e43b, 1
  %tmp252 = icmp eq i32 %tmp251, 1
  br i1 %tmp252, label %bb250, label %dec_label_pc_2e445

bb250:                                            ; preds = %dec_label_pc_2e42e
  %v3_2e443 = call i64 @function_2e4ab()
  store i64 %v3_2e443, i64* @rax, align 8
  br label %dec_label_pc_2e445

dec_label_pc_2e445:                               ; preds = %bb250, %dec_label_pc_2e42e
  store i64 0, i64* @rax, align 8
  %v0_2e447 = load i64, i64* @r14, align 8
  store i64 %v0_2e447, i64* %rsi.global-to-local, align 8
  %v0_2e44a = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_2e44a, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_2e480(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_2e480:
  %v0_2e48c = load i64, i64* @rax, align 8
  store i64 %v0_2e48c, i64* @rbx, align 8
  store i64 %v0_2e48c, i64* @rdi, align 8
  %v0_2e49a = load i64, i64* @r13, align 8
  %v2_2e49a = add i64 %v0_2e48c, 8
  %v3_2e49a = inttoptr i64 %v2_2e49a to i64*
  store i64 %v0_2e49a, i64* %v3_2e49a, align 8
  %v0_2e49e = load i64, i64* @r14, align 8
  %v1_2e49e = load i64, i64* @rbx, align 8
  %v2_2e49e = add i64 %v1_2e49e, 16
  %v3_2e49e = inttoptr i64 %v2_2e49e to i64*
  store i64 %v0_2e49e, i64* %v3_2e49e, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* @r13, align 8
  store i64 %arg5, i64* @r14, align 8
  %v0_2e4aa = load i64, i64* @rax, align 8
  ret i64 %v0_2e4aa
}

define i64 @function_2e4ab() local_unnamed_addr {
dec_label_pc_2e4ab:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2e4b7(i64 %arg1) local_unnamed_addr {
dec_label_pc_2e4b7:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$pairs6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2e4c0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2e4c4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2e4c4, i64* @rax, align 8
  store i64 %v0_2e4c4, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 189713, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2e5c7(i64 %arg1) local_unnamed_addr {
dec_label_pc_2e5c7:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable5inextEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2e5d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_2e5d7 = load i64, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %v0_2e5d7, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v4_2e607 = trunc i64 %v0_2e5d7 to i8
  %v5_2e607 = icmp eq i8 %v4_2e607, 0
  br i1 %v5_2e607, label %dec_label_pc_2e620, label %dec_label_pc_2e60b

dec_label_pc_2e60b:                               ; preds = %dec_label_pc_2e5d0
  ret i64 %v0_2e5d7

dec_label_pc_2e620:                               ; preds = %dec_label_pc_2e5d0
  store i64 189991, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2e659(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2e659:
  store i64 0, i64* @rdi, align 8
  %v0_2e68d = load i64, i64* @rbp, align 8
  store i64 %v0_2e68d, i64* inttoptr (i64 8 to i64*), align 8
  %v0_2e695 = load i64, i64* @rbx, align 8
  store i64 %v0_2e695, i64* inttoptr (i64 16 to i64*), align 16
  store i64 0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_2e6a8() local_unnamed_addr {
dec_label_pc_2e6a8:
  %rbp.global-to-local = alloca i64, align 8
  %v0_2e6a8 = load i64, i64* inttoptr (i64 190127 to i64*), align 8
  store i64 %v0_2e6a8, i64* @rax, align 8
  %v1_2e6af = add i64 %v0_2e6a8, 8
  %v2_2e6af = inttoptr i64 %v1_2e6af to i32*
  %v3_2e6af = load i32, i32* %v2_2e6af, align 4
  %v4_2e6af = load i64, i64* %rbp.global-to-local, align 8
  %v5_2e6af = trunc i64 %v4_2e6af to i32
  %v1_2e6b2 = add i64 %v0_2e6a8, 16
  store i64 %v1_2e6b2, i64* @rdx, align 8
  %tmp235 = icmp ugt i32 %v3_2e6af, %v5_2e6af
  br i1 %tmp235, label %dec_label_pc_2e6b8, label %dec_label_pc_2e6c1

dec_label_pc_2e6b8:                               ; preds = %dec_label_pc_2e6a8
  %v2_2e6bb = mul i64 %v4_2e6af, 8
  %v3_2e6bb = add i64 %v2_2e6bb, %v1_2e6b2
  %v4_2e6bb = inttoptr i64 %v3_2e6bb to i64*
  %v5_2e6bb = load i64, i64* %v4_2e6bb, align 8
  store i64 %v5_2e6bb, i64* @rbp, align 8
  %v3_2e6bf = call i64 @function_2e659(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_2e6bf, i64* @rax, align 8
  ret i64 %v3_2e6bf

dec_label_pc_2e6c1:                               ; preds = %dec_label_pc_2e6a8
  store i64 %v4_2e6af, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$718onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2e6d0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2e6d0 = load i64, i64* %r14.global-to-local, align 8
  %v0_2e6d2 = load i64, i64* %r13.global-to-local, align 8
  %v0_2e6d4 = load i64, i64* @rdi, align 8
  store i64 %v0_2e6d4, i64* %r13.global-to-local, align 8
  %v0_2e6d7 = load i64, i64* %r12.global-to-local, align 8
  %v0_2e6d9 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2e6da = load i64, i64* @rbx, align 8
  %v2_2e6db = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_2e6db, i64* @rbx, align 8
  store i64 %v2_2e6db, i64* %r14.global-to-local, align 8
  store i64 1, i64* %r12.global-to-local, align 8
  store i64 2, i64* %rbp.global-to-local, align 8
  store i64 3, i64* @rax, align 8
  store i64 %v2_2e6db, i64* @rdi, align 8
  store i64 4, i64* %rsi.global-to-local, align 8
  %v1_2e722 = add i64 %v0_2e6d4, 24
  %v2_2e722 = inttoptr i64 %v1_2e722 to i64*
  %v3_2e722 = load i64, i64* %v2_2e722, align 8
  store i64 %v3_2e722, i64* @rdi, align 8
  store i64 %v2_2e6db, i64* %rsi.global-to-local, align 8
  %v1_2e729 = inttoptr i64 %v3_2e722 to i64*
  %v2_2e729 = load i64, i64* %v1_2e729, align 8
  store i64 %v2_2e729, i64* @rax, align 8
  store i64 %v2_2e729, i64* @rbx, align 8
  %v1_2e735 = inttoptr i64 %v2_2e729 to i64*
  %v2_2e735 = load i64, i64* %v1_2e735, align 8
  store i64 %v2_2e735, i64* @rax, align 8
  %v0_2e738 = load i64, i64* inttoptr (i64 190271 to i64*), align 8
  store i64 %v0_2e738, i64* %rsi.global-to-local, align 8
  store i64 %v2_2e729, i64* @rdi, align 8
  %v4_2e748 = trunc i64 %v2_2e735 to i8
  %v5_2e748 = icmp eq i8 %v4_2e748, 0
  br i1 %v5_2e748, label %dec_label_pc_2e760, label %dec_label_pc_2e74c

dec_label_pc_2e74c:                               ; preds = %dec_label_pc_2e6d0
  store i64 2, i64* @rax, align 8
  store i64 %v0_2e6da, i64* @rbx, align 8
  store i64 %v0_2e6d9, i64* %rbp.global-to-local, align 8
  store i64 %v0_2e6d7, i64* %r12.global-to-local, align 8
  store i64 %v0_2e6d2, i64* %r13.global-to-local, align 8
  store i64 %v0_2e6d0, i64* %r14.global-to-local, align 8
  ret i64 2

dec_label_pc_2e760:                               ; preds = %dec_label_pc_2e6d0
  store i64 190311, i64* @rdi, align 8
  %v1_2e767 = add i64 %v0_2e6d4, 32
  %v2_2e767 = inttoptr i64 %v1_2e767 to i64*
  %v3_2e767 = load i64, i64* %v2_2e767, align 8
  store i64 %v3_2e767, i64* %r13.global-to-local, align 8
  store i64 %v2_2e729, i64* %rbp.global-to-local, align 8
  store i64 %v0_2e738, i64* @rax, align 8
  store i64 1, i64* @rdi, align 8
  %v4_2e77d = trunc i64 %v0_2e738 to i32
  %v5_2e77d = icmp eq i32 %v4_2e77d, 0
  br i1 %v5_2e77d, label %dec_label_pc_2e7a5, label %dec_label_pc_2e781

dec_label_pc_2e781:                               ; preds = %dec_label_pc_2e760
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  store i64 %v2_2e729, i64* inttoptr (i64 8 to i64*), align 8
  %v0_2e79e = load i64, i64* %r12.global-to-local, align 8
  %v1_2e79e = load i64, i64* @rbx, align 8
  %v2_2e79e = add i64 %v1_2e79e, 16
  %v3_2e79e = inttoptr i64 %v2_2e79e to i64*
  store i64 %v0_2e79e, i64* %v3_2e79e, align 8
  %v0_2e7a2 = load i64, i64* @rbx, align 8
  store i64 %v0_2e7a2, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_2e7a5

dec_label_pc_2e7a5:                               ; preds = %dec_label_pc_2e781, %dec_label_pc_2e760
  store i64 190380, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib14VarArgFunction4callEJPNS1_8LuaValueES5_S5_S5_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2e7f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 190471, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2e8aa(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2e8aa:
  %v2_2e8aa = load i64, i64* @r12, align 8
  store i64 %v2_2e8aa, i64* @rax, align 8
  store i64 %v2_2e8aa, i64* @rdx, align 8
  store i64 %v2_2e8aa, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_2e8aa
}

define i64 @function_2e8d0() local_unnamed_addr {
dec_label_pc_2e8d0:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %v0_2e8dc = load i64, i64* @rax, align 8
  store i64 %v0_2e8dc, i64* @rbx, align 8
  store i64 %v0_2e8dc, i64* @rdi, align 8
  %v0_2e8e7 = load i64, i64* %r14.global-to-local, align 8
  %v2_2e8e7 = add i64 %v0_2e8dc, 8
  %v3_2e8e7 = inttoptr i64 %v2_2e8e7 to i64*
  store i64 %v0_2e8e7, i64* %v3_2e8e7, align 8
  %v0_2e8eb = load i64, i64* %r13.global-to-local, align 8
  %v1_2e8eb = load i64, i64* @rbx, align 8
  %v2_2e8eb = add i64 %v1_2e8eb, 16
  %v3_2e8eb = inttoptr i64 %v2_2e8eb to i64*
  store i64 %v0_2e8eb, i64* %v3_2e8eb, align 8
  %v6_2e8f2 = call i64 @function_2e8aa(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_2e8f2, i64* @rax, align 8
  ret i64 %v6_2e8f2
}

define i64 @function_2e8f4() local_unnamed_addr {
dec_label_pc_2e8f4:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2e900(i64 %arg1) local_unnamed_addr {
dec_label_pc_2e900:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7valueOfEJPS2_P6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2e910:
  %r12.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2e91a = load i64, i64* @rdi, align 8
  store i64 %v0_2e91a, i64* %r12.global-to-local, align 8
  store i64 190758, i64* @rdi, align 8
  %v0_2e926 = load i64, i64* @rdx, align 8
  store i64 %v0_2e926, i64* @rbx, align 8
  %v0_2e928 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2e928, i64* %r15.global-to-local, align 8
  %v1_2e934 = trunc i64 %v0_2e926 to i32
  %v9_2e937 = icmp sgt i32 %v1_2e934, 32
  br i1 %v9_2e937, label %bb, label %dec_label_pc_2e93d

bb:                                               ; preds = %dec_label_pc_2e910
  %v10_2e937 = call i64 @function_2eb28()
  store i64 %v10_2e937, i64* @rax, align 8
  %v0_2e94b.pre = load i64, i64* @rbx, align 8
  %v0_2e95d.pre = load i64, i64* %r15.global-to-local, align 8
  %v0_2e961.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_2e93d

dec_label_pc_2e93d:                               ; preds = %bb, %dec_label_pc_2e910
  %v0_2e96d = phi i64 [ %v0_2e961.pre, %bb ], [ %v0_2e91a, %dec_label_pc_2e910 ]
  %v0_2e95d = phi i64 [ %v0_2e95d.pre, %bb ], [ %v0_2e928, %dec_label_pc_2e910 ]
  %v0_2e984 = phi i64 [ %v0_2e94b.pre, %bb ], [ %v0_2e926, %dec_label_pc_2e910 ]
  store i64 190788, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2e94d = trunc i64 %v0_2e984 to i32
  %v3_2e94d = sdiv i32 %v1_2e94d, 32
  %v10_2e94d = zext i32 %v3_2e94d to i64
  store i64 %v10_2e94d, i64* %rsi.global-to-local, align 8
  %v1_2e950 = add nuw nsw i64 %v10_2e94d, 1
  %v1_2e95d = add i64 %v0_2e95d, -1
  %v1_2e961 = add i64 %v0_2e96d, 8
  %v2_2e961 = inttoptr i64 %v1_2e961 to i32*
  %v3_2e961 = load i32, i32* %v2_2e961, align 4
  %v4_2e961 = zext i32 %v3_2e961 to i64
  store i64 %v4_2e961, i64* @r11, align 8
  %v3_2e96a = mul i32 %v1_2e94d, 32
  %v10_2e96a = zext i32 %v3_2e96a to i64
  store i64 %v10_2e96a, i64* @rdx, align 8
  %v1_2e96d = add i64 %v0_2e96d, 12
  %v3_2e972 = add i64 %v0_2e984, %v1_2e95d
  store i64 %v3_2e972, i64* @rdi, align 8
  %v3_2e976 = sdiv i32 %v1_2e94d, 4
  %v4_2e979 = add i32 %v3_2e96a, %v3_2e976
  %v20_2e979 = zext i32 %v4_2e979 to i64
  store i64 %v20_2e979, i64* @rax, align 8
  %v3_2e989 = xor i64 %v10_2e94d, 4294967295
  store i64 %v3_2e989, i64* %rsi.global-to-local, align 8
  %v4_2e98b = sub i64 %v0_2e984, %v1_2e950
  %v20_2e98b = and i64 %v4_2e98b, 4294967295
  store i64 %v20_2e98b, i64* @rcx, align 8
  %v4_2e993 = add i64 %v0_2e95d, %v10_2e94d
  %v20_2e993 = and i64 %v4_2e993, 4294967295
  br label %dec_label_pc_2e9be

dec_label_pc_2e9a0:                               ; preds = %dec_label_pc_2e9be
  %v11_2e9c8 = zext i32 %v4_2e9c8 to i64
  %v4_2e9a4 = add nuw nsw i64 %v3_2e989, %v0_2e9a4
  %v20_2e9a4 = and i64 %v4_2e9a4, 4294967295
  store i64 %v20_2e9a4, i64* @rcx, align 8
  %v3_2e9a6 = mul i32 %v4_2e9c8, 32
  %v3_2e9a9 = sdiv i32 %v4_2e9c8, 4
  %v4_2e9ac = sub i64 %v0_2e9ac, %v1_2e950
  %v20_2e9ac = and i64 %v4_2e9ac, 4294967295
  store i64 %v20_2e9ac, i64* @rdi, align 8
  %v4_2e9af = add i32 %v3_2e9a6, %v3_2e9a9
  %v20_2e9af = zext i32 %v4_2e9af to i64
  store i64 %v20_2e9af, i64* @rax, align 8
  %v3_2e9b1 = add nuw nsw i64 %v20_2e9a4, %v20_2e993
  store i64 %v3_2e9b1, i64* @rdx, align 8
  br label %dec_label_pc_2e9be

dec_label_pc_2e9be:                               ; preds = %dec_label_pc_2e9a0, %dec_label_pc_2e93d
  %v0_2e9a4 = phi i64 [ %v20_2e9a4, %dec_label_pc_2e9a0 ], [ %v20_2e98b, %dec_label_pc_2e93d ]
  %v0_2e9c8 = phi i64 [ %v11_2e9c8, %dec_label_pc_2e9a0 ], [ %v0_2e984, %dec_label_pc_2e93d ]
  %v0_2e9c6 = phi i32 [ %v4_2e9af, %dec_label_pc_2e9a0 ], [ %v4_2e979, %dec_label_pc_2e93d ]
  %v0_2e9ac = phi i64 [ %v20_2e9ac, %dec_label_pc_2e9a0 ], [ %v3_2e972, %dec_label_pc_2e93d ]
  store i64 %v0_2e9ac, i64* @rdx, align 8
  %v3_2e9c1 = add i64 %v1_2e96d, %v0_2e9ac
  %v4_2e9c1 = inttoptr i64 %v3_2e9c1 to i8*
  %v5_2e9c1 = load i8, i8* %v4_2e9c1, align 1
  %v6_2e9c1 = zext i8 %v5_2e9c1 to i64
  store i64 %v6_2e9c1, i64* @rdx, align 8
  %v3_2e9c6 = zext i8 %v5_2e9c1 to i32
  %v4_2e9c6 = add i32 %v3_2e9c6, %v0_2e9c6
  %v20_2e9c6 = zext i32 %v4_2e9c6 to i64
  store i64 %v20_2e9c6, i64* @rax, align 8
  %v1_2e9c8 = trunc i64 %v0_2e9c8 to i32
  %v4_2e9c8 = xor i32 %v4_2e9c6, %v1_2e9c8
  %v7_2e9cd = icmp ugt i64 %v1_2e950, %v0_2e9a4
  br i1 %v7_2e9cd, label %dec_label_pc_2e9cf, label %dec_label_pc_2e9a0

dec_label_pc_2e9cf:                               ; preds = %dec_label_pc_2e9be
  store i64 190936, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2eb12(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2eb12:
  store i64 %arg1, i64* @rbx, align 8
  %v0_2eb20 = load i64, i64* @rax, align 8
  ret i64 %v0_2eb20
}

define i64 @function_2eb28() local_unnamed_addr {
dec_label_pc_2eb28:
  store i64 191279, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2ec08(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2ec08:
  %r12.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2ec08 = load i64, i64* @rbx, align 8
  %v2_2ec08 = load i64, i64* @rdx, align 8
  %v1_2ec11 = add i64 %v2_2ec08, 16
  %v2_2ec11 = inttoptr i64 %v1_2ec11 to i32*
  %v3_2ec11 = load i32, i32* %v2_2ec11, align 4
  %v4_2ec11 = zext i32 %v3_2ec11 to i64
  store i64 %v4_2ec11, i64* @rcx, align 8
  store i64 191515, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_2ec1d = add i64 %v2_2ec08, 8
  %v2_2ec1d = inttoptr i64 %v1_2ec1d to i64*
  %v3_2ec1d = load i64, i64* %v2_2ec1d, align 8
  store i64 %v4_2ec11, i64* @rcx, align 8
  %v1_2ec33 = add i64 %v3_2ec1d, 8
  %v2_2ec33 = inttoptr i64 %v1_2ec33 to i32*
  %v3_2ec33 = load i32, i32* %v2_2ec33, align 4
  %v3_2ec37 = add i64 %v4_2ec11, %v0_2ec08
  store i64 %v3_2ec37, i64* @rax, align 8
  %v0_2ec43 = load i64, i64* %r12.global-to-local, align 8
  %v1_2ec43 = add i64 %v0_2ec43, 8
  %v2_2ec43 = inttoptr i64 %v1_2ec43 to i32*
  %v3_2ec43 = load i32, i32* %v2_2ec43, align 4
  %v4_2ec43 = zext i32 %v3_2ec43 to i64
  store i64 %v4_2ec43, i64* @r11, align 8
  %v1_2ec48 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v4_2ec11, i64* @rax, align 8
  store i64 %v1_2ec48, i64* @rdi, align 8
  store i64 %v0_2ec08, i64* @rcx, align 8
  br label %dec_label_pc_2ec8f

dec_label_pc_2ec68:                               ; preds = %dec_label_pc_2ec8f
  %v3_2ec68 = trunc i64 %v0_2ec7e to i32
  %tmp256 = icmp ugt i32 %v3_2ec33, %v3_2ec68
  br i1 %tmp256, label %dec_label_pc_2ec6d, label %dec_label_pc_2ecac

dec_label_pc_2ec6d:                               ; preds = %dec_label_pc_2ec68
  %v3_2ec70 = trunc i64 %v0_2ec81 to i32
  %tmp257 = icmp ugt i32 %v3_2ec43, %v3_2ec70
  br i1 %tmp257, label %dec_label_pc_2ec7b, label %dec_label_pc_2eca5

dec_label_pc_2ec7b:                               ; preds = %dec_label_pc_2ec6d
  %v2_2ec7e = add nuw nsw i64 %v0_2ec7e, 1
  %v17_2ec7e = and i64 %v2_2ec7e, 4294967295
  store i64 %v17_2ec7e, i64* @rax, align 8
  %v2_2ec81 = add i64 %v0_2ec81, 1
  %v17_2ec81 = and i64 %v2_2ec81, 4294967295
  store i64 %v17_2ec81, i64* @rdi, align 8
  br label %dec_label_pc_2ec8f

dec_label_pc_2ec8f:                               ; preds = %dec_label_pc_2ec7b, %dec_label_pc_2ec08
  %v0_2ec81 = phi i64 [ %v17_2ec81, %dec_label_pc_2ec7b ], [ %v1_2ec48, %dec_label_pc_2ec08 ]
  %v0_2ec7e = phi i64 [ %v17_2ec7e, %dec_label_pc_2ec7b ], [ %v4_2ec11, %dec_label_pc_2ec08 ]
  %v0_2ec8f = phi i64 [ %v17_2ec8f, %dec_label_pc_2ec7b ], [ %v0_2ec08, %dec_label_pc_2ec08 ]
  %v1_2ec8f = trunc i64 %v0_2ec8f to i32
  %v2_2ec8f = add i32 %v1_2ec8f, -1
  %v12_2ec8f = icmp slt i32 %v2_2ec8f, 0
  %v17_2ec8f = zext i32 %v2_2ec8f to i64
  store i64 %v17_2ec8f, i64* @rcx, align 8
  %v1_2ec92 = icmp eq i1 %v12_2ec8f, false
  br i1 %v1_2ec92, label %dec_label_pc_2ec68, label %dec_label_pc_2ec94

dec_label_pc_2ec94:                               ; preds = %dec_label_pc_2ec8f
  store i64 %v2_2ec08, i64* @rax, align 8
  %v6_2ec97 = call i64 @function_2eb12(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_2ec97, i64* @rax, align 8
  ret i64 %v6_2ec97

dec_label_pc_2eca5:                               ; preds = %dec_label_pc_2ec6d
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_2ecac

dec_label_pc_2ecac:                               ; preds = %dec_label_pc_2ec68, %dec_label_pc_2eca5
  %v0_2ecac = phi i64 [ 0, %dec_label_pc_2eca5 ], [ %v0_2ec7e, %dec_label_pc_2ec68 ]
  store i64 %v0_2ecac, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2ecb5(i32 %arg1) local_unnamed_addr {
dec_label_pc_2ecb5:
  %v3_2ecb5 = zext i32 %arg1 to i64
  store i64 %v3_2ecb5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib10_io_outputEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2ecc0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2ecc0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2ecc1 = load i64, i64* @rbx, align 8
  %v0_2ecc2 = load i64, i64* @rdi, align 8
  store i64 %v0_2ecc2, i64* %rbp.global-to-local, align 8
  %v0_2ecc5 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2ecc5, i64* @rbx, align 8
  store i64 %v0_2ecc5, i64* @rdi, align 8
  store i64 %v0_2ecc5, i64* @rax, align 8
  %v4_2ecd8 = trunc i64 %v0_2ecc5 to i8
  %v5_2ecd8 = icmp eq i8 %v4_2ecd8, 0
  br i1 %v5_2ecd8, label %dec_label_pc_2ed00, label %dec_label_pc_2ecdc

dec_label_pc_2ecdc:                               ; preds = %dec_label_pc_2ecc0
  %v1_2ecdc = add i64 %v0_2ecc2, 32
  %v2_2ecdc = inttoptr i64 %v1_2ecdc to i64*
  %v3_2ecdc = load i64, i64* %v2_2ecdc, align 8
  store i64 %v3_2ecdc, i64* @rax, align 8
  store i64 %v0_2ecc1, i64* @rbx, align 8
  store i64 %v0_2ecc0, i64* %rbp.global-to-local, align 8
  ret i64 %v3_2ecdc

dec_label_pc_2ed00:                               ; preds = %dec_label_pc_2ecc0
  store i64 191792, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib9_io_inputEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2ede0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2ede0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2ede1 = load i64, i64* @rbx, align 8
  %v0_2ede2 = load i64, i64* @rdi, align 8
  store i64 %v0_2ede2, i64* %rbp.global-to-local, align 8
  %v0_2ede5 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2ede5, i64* @rbx, align 8
  store i64 %v0_2ede5, i64* @rdi, align 8
  store i64 %v0_2ede5, i64* @rax, align 8
  %v4_2edf8 = trunc i64 %v0_2ede5 to i8
  %v5_2edf8 = icmp eq i8 %v4_2edf8, 0
  br i1 %v5_2edf8, label %dec_label_pc_2ee30, label %dec_label_pc_2edfc

dec_label_pc_2edfc:                               ; preds = %dec_label_pc_2ede0
  %v1_2edfc = add i64 %v0_2ede2, 24
  %v2_2edfc = inttoptr i64 %v1_2edfc to i64*
  %v3_2edfc = load i64, i64* %v2_2edfc, align 8
  store i64 %v3_2edfc, i64* @rbx, align 8
  %v1_2ee00 = icmp eq i64 %v3_2edfc, 0
  br i1 %v1_2ee00, label %dec_label_pc_2eeb8, label %dec_label_pc_2ee09

dec_label_pc_2ee09:                               ; preds = %dec_label_pc_2eeb8, %dec_label_pc_2edfc
  %v0_2ee09 = phi i64 [ %v0_2ede5, %dec_label_pc_2eeb8 ], [ %v3_2edfc, %dec_label_pc_2edfc ]
  store i64 %v0_2ee09, i64* %v2_2edfc, align 8
  %v0_2ee0d = load i64, i64* @rbx, align 8
  store i64 %v0_2ee0d, i64* @rax, align 8
  store i64 %v0_2ede1, i64* @rbx, align 8
  store i64 %v0_2ede0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_2ee0d

dec_label_pc_2ee30:                               ; preds = %dec_label_pc_2ede0
  store i64 192055, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_2ede5, i64* @rdi, align 8
  %v0_2eee0 = load i64, i64* inttoptr (i64 192231 to i64*), align 8
  store i64 %v0_2eee0, i64* %rsi.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  ret i64 0

dec_label_pc_2eeb8:                               ; preds = %dec_label_pc_2edfc
  %v0_2eeb8 = load i64, i64* inttoptr (i64 192191 to i64*), align 8
  store i64 %v0_2eeb8, i64* @rcx, align 8
  %v0_2eebf = load i64, i64* inttoptr (i64 192198 to i64*), align 8
  store i64 %v0_2eebf, i64* @rdx, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  store i64 %v0_2ede2, i64* @rdi, align 8
  store i64 %v0_2ede5, i64* @rbx, align 8
  br label %dec_label_pc_2ee09
}

define i64 @"_ZN4lang12lang_luaj$778onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2ef00:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2ef0d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2ef0d, i64* @rbx, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 192322, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_2ef44 = load i64, i64* inttoptr (i64 192331 to i64*), align 8
  store i64 %v0_2ef44, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_2fa28() local_unnamed_addr {
dec_label_pc_2fa28:
  %v0_2fa28 = load i64, i64* @rax, align 8
  ret i64 %v0_2fa28
}

define i64 @function_2fa61() local_unnamed_addr {
dec_label_pc_2fa61:
  %v0_2fa61 = load i64, i64* @rax, align 8
  ret i64 %v0_2fa61
}

define i64 @function_2fad6(i64 %arg1) local_unnamed_addr {
dec_label_pc_2fad6:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$98onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2fae0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2fae0 = load i64, i64* %r13.global-to-local, align 8
  %v0_2fae2 = load i64, i64* %r12.global-to-local, align 8
  %v0_2fae4 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2fae5 = load i64, i64* @rbx, align 8
  %v0_2fae6 = load i64, i64* @rdi, align 8
  store i64 %v0_2fae6, i64* @rbx, align 8
  %v0_2fae9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2fae9, i64* @rdi, align 8
  store i64 %v0_2fae9, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_2fafe = add i64 %v0_2fae6, 24
  %v2_2fafe = inttoptr i64 %v1_2fafe to i64*
  %v3_2fafe = load i64, i64* %v2_2fafe, align 8
  store i64 %v3_2fafe, i64* @rdi, align 8
  %v1_2fb02 = inttoptr i64 %v3_2fafe to i64*
  %v2_2fb02 = load i64, i64* %v1_2fb02, align 8
  store i64 %v2_2fb02, i64* @rax, align 8
  %v1_2fb0b = inttoptr i64 %v2_2fb02 to i64*
  %v2_2fb0b = load i64, i64* %v1_2fb0b, align 8
  store i64 %v2_2fb0b, i64* @rdx, align 8
  store i64 %v2_2fb02, i64* @rdi, align 8
  %v4_2fb17 = trunc i64 %v2_2fb02 to i8
  %v5_2fb17 = icmp eq i8 %v4_2fb17, 0
  br i1 %v5_2fb17, label %dec_label_pc_2fb30, label %dec_label_pc_2fb22

dec_label_pc_2fb22:                               ; preds = %dec_label_pc_2fae0, %dec_label_pc_2fbf7
  %storemerge.in = phi i64* [ @rbx, %dec_label_pc_2fbf7 ], [ inttoptr (i64 195362 to i64*), %dec_label_pc_2fae0 ]
  %storemerge = load i64, i64* %storemerge.in, align 8
  store i64 %storemerge, i64* @rax, align 8
  store i64 %v0_2fae5, i64* @rbx, align 8
  store i64 %v0_2fae4, i64* %rbp.global-to-local, align 8
  store i64 %v0_2fae2, i64* %r12.global-to-local, align 8
  store i64 %v0_2fae0, i64* %r13.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_2fb30:                               ; preds = %dec_label_pc_2fae0
  %v1_2fb30 = add i64 %v0_2fae6, 32
  %v2_2fb30 = inttoptr i64 %v1_2fb30 to i64*
  %v3_2fb30 = load i64, i64* %v2_2fb30, align 8
  store i64 %v3_2fb30, i64* @rdi, align 8
  %v1_2fb34 = inttoptr i64 %v3_2fb30 to i64*
  %v2_2fb34 = load i64, i64* %v1_2fb34, align 8
  store i64 %v2_2fb34, i64* @rax, align 8
  store i64 %v2_2fb34, i64* @rbp, align 8
  %v1_2fb40 = inttoptr i64 %v2_2fb34 to i64*
  %v2_2fb40 = load i64, i64* %v1_2fb40, align 8
  store i64 %v2_2fb40, i64* @rax, align 8
  %v0_2fb43 = load i64, i64* inttoptr (i64 195402 to i64*), align 8
  store i64 %v0_2fb43, i64* %rsi.global-to-local, align 8
  store i64 %v2_2fb34, i64* @rdi, align 8
  %v4_2fb53 = trunc i64 %v2_2fb40 to i8
  %v5_2fb53 = icmp eq i8 %v4_2fb53, 0
  br i1 %v5_2fb53, label %bb, label %dec_label_pc_2fb5b

bb:                                               ; preds = %dec_label_pc_2fb30
  %v1_2fb55 = call i64 @function_2fca0()
  store i64 %v1_2fb55, i64* @rax, align 8
  %v0_2fb5b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2fb5b

dec_label_pc_2fb5b:                               ; preds = %bb, %dec_label_pc_2fb30
  %v0_2fc50 = phi i64 [ %v0_2fb5b.pre, %bb ], [ %v0_2fae6, %dec_label_pc_2fb30 ]
  %v1_2fb5b = add i64 %v0_2fc50, 48
  %v2_2fb5b = inttoptr i64 %v1_2fb5b to i64*
  %v3_2fb5b = load i64, i64* %v2_2fb5b, align 8
  store i64 %v3_2fb5b, i64* @rdi, align 8
  %v1_2fb5f = inttoptr i64 %v3_2fb5b to i64*
  %v2_2fb5f = load i64, i64* %v1_2fb5f, align 8
  store i64 %v2_2fb5f, i64* @rax, align 8
  store i64 %v2_2fb5f, i64* %rbp.global-to-local, align 8
  %v1_2fb6b = inttoptr i64 %v2_2fb5f to i64*
  %v2_2fb6b = load i64, i64* %v1_2fb6b, align 8
  store i64 %v2_2fb6b, i64* @rax, align 8
  %v0_2fb6e = load i64, i64* inttoptr (i64 195445 to i64*), align 8
  store i64 %v0_2fb6e, i64* %rsi.global-to-local, align 8
  store i64 %v2_2fb5f, i64* @rdi, align 8
  %v4_2fb7e = trunc i64 %v2_2fb6b to i8
  %v5_2fb7e = icmp eq i8 %v4_2fb7e, 0
  %v1_2fb80 = icmp eq i1 %v5_2fb7e, false
  br i1 %v1_2fb80, label %dec_label_pc_2fc50, label %dec_label_pc_2fb86

dec_label_pc_2fb86:                               ; preds = %dec_label_pc_2fb5b
  %v1_2fb86 = add i64 %v0_2fc50, 64
  %v2_2fb86 = inttoptr i64 %v1_2fb86 to i64*
  %v3_2fb86 = load i64, i64* %v2_2fb86, align 8
  store i64 %v3_2fb86, i64* @rdi, align 8
  store i64 %v2_2fb5f, i64* %rsi.global-to-local, align 8
  %v1_2fb8d = inttoptr i64 %v3_2fb86 to i64*
  %v2_2fb8d = load i64, i64* %v1_2fb8d, align 8
  store i64 %v2_2fb8d, i64* @rax, align 8
  %v1_2fb96 = inttoptr i64 %v2_2fb8d to i64*
  %v2_2fb96 = load i64, i64* %v1_2fb96, align 8
  store i64 %v2_2fb96, i64* @rdx, align 8
  store i64 %v2_2fb8d, i64* @rdi, align 8
  %v4_2fba2 = trunc i64 %v2_2fb8d to i8
  %v5_2fba2 = icmp eq i8 %v4_2fba2, 0
  br i1 %v5_2fba2, label %bb263, label %dec_label_pc_2fbaa

bb263:                                            ; preds = %dec_label_pc_2fb86
  %v1_2fba4 = call i64 @function_2fcb8()
  store i64 %v1_2fba4, i64* @rax, align 8
  %v0_2fbaa.pre = load i64, i64* @rbx, align 8
  %v0_2fbae.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_2fbaa

dec_label_pc_2fbaa:                               ; preds = %bb263, %dec_label_pc_2fb86
  %v0_2fbc5 = phi i64 [ %v0_2fbae.pre, %bb263 ], [ %v2_2fb5f, %dec_label_pc_2fb86 ]
  %v0_2fbbe = phi i64 [ %v0_2fbaa.pre, %bb263 ], [ %v0_2fc50, %dec_label_pc_2fb86 ]
  %v1_2fbaa = add i64 %v0_2fbbe, 80
  %v2_2fbaa = inttoptr i64 %v1_2fbaa to i64*
  %v3_2fbaa = load i64, i64* %v2_2fbaa, align 8
  store i64 %v3_2fbaa, i64* @rdi, align 8
  store i64 %v0_2fbc5, i64* %rsi.global-to-local, align 8
  %v1_2fbb1 = add i64 %v0_2fbbe, 72
  %v2_2fbb1 = inttoptr i64 %v1_2fbb1 to i64*
  %v3_2fbb1 = load i64, i64* %v2_2fbb1, align 8
  store i64 %v3_2fbb1, i64* %r13.global-to-local, align 8
  %v1_2fbb5 = inttoptr i64 %v3_2fbaa to i64*
  %v2_2fbb5 = load i64, i64* %v1_2fbb5, align 8
  store i64 %v2_2fbb5, i64* @rax, align 8
  %v1_2fbbe = add i64 %v0_2fbbe, 88
  %v2_2fbbe = inttoptr i64 %v1_2fbbe to i64*
  %v3_2fbbe = load i64, i64* %v2_2fbbe, align 8
  store i64 %v3_2fbbe, i64* @rdi, align 8
  store i64 %v2_2fbb5, i64* %r12.global-to-local, align 8
  store i64 %v0_2fbc5, i64* %rsi.global-to-local, align 8
  %v1_2fbc8 = inttoptr i64 %v3_2fbbe to i64*
  %v2_2fbc8 = load i64, i64* %v1_2fbc8, align 8
  store i64 195544, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_2fbc8, i64* %rbp.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  %v3_2fbec = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_2fbec = zext i32 %v3_2fbec to i64
  store i64 %v4_2fbec, i64* @rax, align 8
  %v5_2fbef = icmp eq i32 %v3_2fbec, 0
  br i1 %v5_2fbef, label %bb264, label %dec_label_pc_2fbf7

bb264:                                            ; preds = %dec_label_pc_2fbaa
  %v2_2fbf1 = call i64 @function_2fccc(i64 1)
  store i64 %v2_2fbf1, i64* @rax, align 8
  %v0_2fbf7.pre = load i64, i64* @rbx, align 8
  %v0_2fbfa.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_2fc04.pre = load i64, i64* %rbp.global-to-local, align 8
  %phitmp = add i64 %v0_2fbf7.pre, 16
  %phitmp21 = inttoptr i64 %phitmp to i64*
  br label %dec_label_pc_2fbf7

dec_label_pc_2fbf7:                               ; preds = %bb264, %dec_label_pc_2fbaa
  %v0_2fc04 = phi i64 [ %v0_2fc04.pre, %bb264 ], [ %v2_2fbc8, %dec_label_pc_2fbaa ]
  %v0_2fc0a = phi i64 [ %v0_2fbfa.pre, %bb264 ], [ %v2_2fbb5, %dec_label_pc_2fbaa ]
  %v0_2fc07 = phi i64* [ %phitmp21, %bb264 ], [ inttoptr (i64 16 to i64*), %dec_label_pc_2fbaa ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_2fc04, i64* %rsi.global-to-local, align 8
  store i64 %v0_2fc0a, i64* %v0_2fc07, align 8
  %v0_2fc1a = load i64, i64* @rax, align 8
  store i64 %v0_2fc1a, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_2fc3d = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_2fc3d, i64* inttoptr (i64 8 to i64*), align 8
  %v1_2fc41 = load i64, i64* @rbx, align 8
  %v2_2fc41 = add i64 %v1_2fc41, 16
  %v3_2fc41 = inttoptr i64 %v2_2fc41 to i64*
  store i64 %v0_2fc1a, i64* %v3_2fc41, align 8
  br label %dec_label_pc_2fb22

dec_label_pc_2fc50:                               ; preds = %dec_label_pc_2fb5b
  %v1_2fc50 = add i64 %v0_2fc50, 56
  %v2_2fc50 = inttoptr i64 %v1_2fc50 to i64*
  %v3_2fc50 = load i64, i64* %v2_2fc50, align 8
  store i64 %v3_2fc50, i64* %r12.global-to-local, align 8
  %v0_2fc54 = load i64, i64* inttoptr (i64 195675 to i64*), align 8
  store i64 %v0_2fc54, i64* %rbp.global-to-local, align 8
  store i64 195696, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_2fca0() local_unnamed_addr {
dec_label_pc_2fca0:
  %v0_2fca0 = load i64, i64* @rbx, align 8
  %v1_2fca0 = add i64 %v0_2fca0, 40
  %v2_2fca0 = inttoptr i64 %v1_2fca0 to i64*
  %v3_2fca0 = load i64, i64* %v2_2fca0, align 8
  store i64 %v3_2fca0, i64* @rdi, align 8
  %v1_2fca7 = inttoptr i64 %v3_2fca0 to i64*
  %v2_2fca7 = load i64, i64* %v1_2fca7, align 8
  store i64 %v2_2fca7, i64* @rax, align 8
  ret i64 %v2_2fca7
}

define i64 @function_2fcb8() local_unnamed_addr {
dec_label_pc_2fcb8:
  %v0_2fcbc = load i64, i64* inttoptr (i64 195779 to i64*), align 8
  store i64 %v0_2fcbc, i64* @rbp, align 8
  store i64 195786, i64* @rdi, align 8
  %v0_2fcca = load i64, i64* @rax, align 8
  ret i64 %v0_2fcca
}

define i64 @function_2fccc(i64 %arg1) local_unnamed_addr {
dec_label_pc_2fccc:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$98onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2fce0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2fce0 = load i64, i64* %r13.global-to-local, align 8
  %v0_2fce2 = load i64, i64* %r12.global-to-local, align 8
  %v0_2fce4 = load i64, i64* %rbp.global-to-local, align 8
  %v0_2fce5 = load i64, i64* @rbx, align 8
  %v0_2fce6 = load i64, i64* @rdi, align 8
  store i64 %v0_2fce6, i64* @rbx, align 8
  %v0_2fce9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2fce9, i64* @rdi, align 8
  store i64 %v0_2fce9, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_2fcfe = add i64 %v0_2fce6, 24
  %v2_2fcfe = inttoptr i64 %v1_2fcfe to i64*
  %v3_2fcfe = load i64, i64* %v2_2fcfe, align 8
  store i64 %v3_2fcfe, i64* @rdi, align 8
  %v1_2fd02 = inttoptr i64 %v3_2fcfe to i64*
  %v2_2fd02 = load i64, i64* %v1_2fd02, align 8
  store i64 %v2_2fd02, i64* @rax, align 8
  %v1_2fd0b = inttoptr i64 %v2_2fd02 to i64*
  %v2_2fd0b = load i64, i64* %v1_2fd0b, align 8
  store i64 %v2_2fd0b, i64* @rdx, align 8
  store i64 %v2_2fd02, i64* @rdi, align 8
  %v4_2fd17 = trunc i64 %v2_2fd02 to i8
  %v5_2fd17 = icmp eq i8 %v4_2fd17, 0
  br i1 %v5_2fd17, label %dec_label_pc_2fd30, label %dec_label_pc_2fd22

dec_label_pc_2fd22:                               ; preds = %dec_label_pc_2fce0, %dec_label_pc_2fea0, %dec_label_pc_2fdf7
  %storemerge.in = phi i64* [ @rbx, %dec_label_pc_2fdf7 ], [ inttoptr (i64 195874 to i64*), %dec_label_pc_2fea0 ], [ inttoptr (i64 195874 to i64*), %dec_label_pc_2fce0 ]
  %storemerge = load i64, i64* %storemerge.in, align 8
  store i64 %storemerge, i64* @rax, align 8
  store i64 %v0_2fce5, i64* @rbx, align 8
  store i64 %v0_2fce4, i64* %rbp.global-to-local, align 8
  store i64 %v0_2fce2, i64* %r12.global-to-local, align 8
  store i64 %v0_2fce0, i64* %r13.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_2fd30:                               ; preds = %dec_label_pc_2fce0
  %v1_2fd30 = add i64 %v0_2fce6, 32
  %v2_2fd30 = inttoptr i64 %v1_2fd30 to i64*
  %v3_2fd30 = load i64, i64* %v2_2fd30, align 8
  store i64 %v3_2fd30, i64* @rdi, align 8
  %v1_2fd34 = inttoptr i64 %v3_2fd30 to i64*
  %v2_2fd34 = load i64, i64* %v1_2fd34, align 8
  store i64 %v2_2fd34, i64* @rax, align 8
  store i64 %v2_2fd34, i64* %rbp.global-to-local, align 8
  %v1_2fd40 = inttoptr i64 %v2_2fd34 to i64*
  %v2_2fd40 = load i64, i64* %v1_2fd40, align 8
  store i64 %v2_2fd40, i64* @rax, align 8
  %v0_2fd43 = load i64, i64* inttoptr (i64 195914 to i64*), align 8
  store i64 %v0_2fd43, i64* %rsi.global-to-local, align 8
  store i64 %v2_2fd34, i64* @rdi, align 8
  %v4_2fd53 = trunc i64 %v2_2fd40 to i8
  %v5_2fd53 = icmp eq i8 %v4_2fd53, 0
  br i1 %v5_2fd53, label %dec_label_pc_2fea0, label %dec_label_pc_2fd5b

dec_label_pc_2fd5b:                               ; preds = %dec_label_pc_2fd30
  %v1_2fd5b = add i64 %v0_2fce6, 48
  %v2_2fd5b = inttoptr i64 %v1_2fd5b to i64*
  %v3_2fd5b = load i64, i64* %v2_2fd5b, align 8
  store i64 %v3_2fd5b, i64* @rdi, align 8
  %v1_2fd5f = inttoptr i64 %v3_2fd5b to i64*
  %v2_2fd5f = load i64, i64* %v1_2fd5f, align 8
  store i64 %v2_2fd5f, i64* @rax, align 8
  store i64 %v2_2fd5f, i64* %rbp.global-to-local, align 8
  %v1_2fd6b = inttoptr i64 %v2_2fd5f to i64*
  %v2_2fd6b = load i64, i64* %v1_2fd6b, align 8
  store i64 %v2_2fd6b, i64* @rax, align 8
  %v0_2fd6e = load i64, i64* inttoptr (i64 195957 to i64*), align 8
  store i64 %v0_2fd6e, i64* %rsi.global-to-local, align 8
  store i64 %v2_2fd5f, i64* @rdi, align 8
  %v4_2fd7e = trunc i64 %v2_2fd6b to i8
  %v5_2fd7e = icmp eq i8 %v4_2fd7e, 0
  %v1_2fd80 = icmp eq i1 %v5_2fd7e, false
  br i1 %v1_2fd80, label %dec_label_pc_2fe50, label %dec_label_pc_2fd86

dec_label_pc_2fd86:                               ; preds = %dec_label_pc_2fd5b
  %v1_2fd86 = add i64 %v0_2fce6, 64
  %v2_2fd86 = inttoptr i64 %v1_2fd86 to i64*
  %v3_2fd86 = load i64, i64* %v2_2fd86, align 8
  store i64 %v3_2fd86, i64* @rdi, align 8
  store i64 %v2_2fd5f, i64* %rsi.global-to-local, align 8
  %v1_2fd8d = inttoptr i64 %v3_2fd86 to i64*
  %v2_2fd8d = load i64, i64* %v1_2fd8d, align 8
  store i64 %v2_2fd8d, i64* @rax, align 8
  %v1_2fd96 = inttoptr i64 %v2_2fd8d to i64*
  %v2_2fd96 = load i64, i64* %v1_2fd96, align 8
  store i64 %v2_2fd96, i64* @rdx, align 8
  store i64 %v2_2fd8d, i64* @rdi, align 8
  %v4_2fda2 = trunc i64 %v2_2fd8d to i8
  %v5_2fda2 = icmp eq i8 %v4_2fda2, 0
  br i1 %v5_2fda2, label %dec_label_pc_2feb8, label %dec_label_pc_2fdaa

dec_label_pc_2fdaa:                               ; preds = %dec_label_pc_2fd86
  %v1_2fdaa = add i64 %v0_2fce6, 80
  %v2_2fdaa = inttoptr i64 %v1_2fdaa to i64*
  %v3_2fdaa = load i64, i64* %v2_2fdaa, align 8
  store i64 %v3_2fdaa, i64* @rdi, align 8
  store i64 %v2_2fd5f, i64* %rsi.global-to-local, align 8
  %v1_2fdb1 = add i64 %v0_2fce6, 72
  %v2_2fdb1 = inttoptr i64 %v1_2fdb1 to i64*
  %v3_2fdb1 = load i64, i64* %v2_2fdb1, align 8
  store i64 %v3_2fdb1, i64* %r13.global-to-local, align 8
  %v1_2fdb5 = inttoptr i64 %v3_2fdaa to i64*
  %v2_2fdb5 = load i64, i64* %v1_2fdb5, align 8
  store i64 %v2_2fdb5, i64* @rax, align 8
  %v1_2fdbe = add i64 %v0_2fce6, 88
  %v2_2fdbe = inttoptr i64 %v1_2fdbe to i64*
  %v3_2fdbe = load i64, i64* %v2_2fdbe, align 8
  store i64 %v3_2fdbe, i64* @rdi, align 8
  store i64 %v2_2fdb5, i64* %r12.global-to-local, align 8
  store i64 %v2_2fd5f, i64* %rsi.global-to-local, align 8
  %v1_2fdc8 = inttoptr i64 %v3_2fdbe to i64*
  %v2_2fdc8 = load i64, i64* %v1_2fdc8, align 8
  store i64 196056, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_2fdc8, i64* %rbp.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  %v3_2fdec = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_2fdec = zext i32 %v3_2fdec to i64
  store i64 %v4_2fdec, i64* @rax, align 8
  %v5_2fdef = icmp eq i32 %v3_2fdec, 0
  br i1 %v5_2fdef, label %dec_label_pc_2fecc, label %dec_label_pc_2fdf7

dec_label_pc_2fdf7:                               ; preds = %dec_label_pc_2fdaa
  store i64 0, i64* @rax, align 8
  store i64 %v2_2fdc8, i64* %rsi.global-to-local, align 8
  store i64 %v2_2fdb5, i64* inttoptr (i64 16 to i64*), align 16
  %v0_2fe1a = load i64, i64* @rax, align 8
  store i64 %v0_2fe1a, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_2fe3d = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_2fe3d, i64* inttoptr (i64 8 to i64*), align 8
  %v1_2fe41 = load i64, i64* @rbx, align 8
  %v2_2fe41 = add i64 %v1_2fe41, 16
  %v3_2fe41 = inttoptr i64 %v2_2fe41 to i64*
  store i64 %v0_2fe1a, i64* %v3_2fe41, align 8
  br label %dec_label_pc_2fd22

dec_label_pc_2fe50:                               ; preds = %dec_label_pc_2fd5b
  %v1_2fe50 = add i64 %v0_2fce6, 56
  %v2_2fe50 = inttoptr i64 %v1_2fe50 to i64*
  %v3_2fe50 = load i64, i64* %v2_2fe50, align 8
  store i64 %v3_2fe50, i64* %r12.global-to-local, align 8
  %v0_2fe54 = load i64, i64* inttoptr (i64 196187 to i64*), align 8
  store i64 %v0_2fe54, i64* %rbp.global-to-local, align 8
  store i64 196194, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_2fe64

dec_label_pc_2fe64:                               ; preds = %dec_label_pc_2feb8, %dec_label_pc_2fe50
  %v0_2fe85 = phi i64 [ %v3_2feb8, %dec_label_pc_2feb8 ], [ %v3_2fe50, %dec_label_pc_2fe50 ]
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_2fe85, i64* inttoptr (i64 8 to i64*), align 8
  %v0_2fe89 = load i64, i64* %rbp.global-to-local, align 8
  %v1_2fe89 = load i64, i64* @rbx, align 8
  %v2_2fe89 = add i64 %v1_2fe89, 16
  %v3_2fe89 = inttoptr i64 %v2_2fe89 to i64*
  store i64 %v0_2fe89, i64* %v3_2fe89, align 8
  store i64 %v0_2fce5, i64* @rbx, align 8
  store i64 %v0_2fce4, i64* %rbp.global-to-local, align 8
  store i64 %v0_2fce2, i64* %r12.global-to-local, align 8
  store i64 %v0_2fce0, i64* %r13.global-to-local, align 8
  %v0_2fe97 = load i64, i64* @rax, align 8
  ret i64 %v0_2fe97

dec_label_pc_2fea0:                               ; preds = %dec_label_pc_2fd30
  %v1_2fea0 = add i64 %v0_2fce6, 40
  %v2_2fea0 = inttoptr i64 %v1_2fea0 to i64*
  %v3_2fea0 = load i64, i64* %v2_2fea0, align 8
  store i64 %v3_2fea0, i64* @rdi, align 8
  store i64 %v2_2fd34, i64* %rsi.global-to-local, align 8
  %v1_2fea7 = inttoptr i64 %v3_2fea0 to i64*
  %v2_2fea7 = load i64, i64* %v1_2fea7, align 8
  store i64 %v2_2fea7, i64* @rax, align 8
  br label %dec_label_pc_2fd22

dec_label_pc_2feb8:                               ; preds = %dec_label_pc_2fd86
  %v1_2feb8 = add i64 %v0_2fce6, 56
  %v2_2feb8 = inttoptr i64 %v1_2feb8 to i64*
  %v3_2feb8 = load i64, i64* %v2_2feb8, align 8
  store i64 %v3_2feb8, i64* %r12.global-to-local, align 8
  %v0_2febc = load i64, i64* inttoptr (i64 196291 to i64*), align 8
  store i64 %v0_2febc, i64* %rbp.global-to-local, align 8
  store i64 196298, i64* @rdi, align 8
  br label %dec_label_pc_2fe64

dec_label_pc_2fecc:                               ; preds = %dec_label_pc_2fdaa
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$88onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2fee0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_2fee5 = load i64, i64* @rbx, align 8
  %v0_2fee6 = load i64, i64* @rdi, align 8
  store i64 %v0_2fee6, i64* @rbx, align 8
  %v0_2fee9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_2fee9, i64* @rdi, align 8
  store i64 %v0_2fee9, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_2fefe = add i64 %v0_2fee6, 24
  %v2_2fefe = inttoptr i64 %v1_2fefe to i64*
  %v3_2fefe = load i64, i64* %v2_2fefe, align 8
  store i64 %v3_2fefe, i64* @rdi, align 8
  %v1_2ff02 = inttoptr i64 %v3_2fefe to i64*
  %v2_2ff02 = load i64, i64* %v1_2ff02, align 8
  store i64 %v2_2ff02, i64* @rax, align 8
  %v1_2ff0b = inttoptr i64 %v2_2ff02 to i64*
  %v2_2ff0b = load i64, i64* %v1_2ff0b, align 8
  store i64 %v2_2ff0b, i64* @rdx, align 8
  store i64 %v2_2ff02, i64* @rdi, align 8
  %v4_2ff17 = trunc i64 %v2_2ff02 to i8
  %v5_2ff17 = icmp eq i8 %v4_2ff17, 0
  br i1 %v5_2ff17, label %dec_label_pc_2ff30, label %dec_label_pc_2ff1b

dec_label_pc_2ff1b:                               ; preds = %dec_label_pc_2fee0
  %v0_2ff1b = load i64, i64* inttoptr (i64 196386 to i64*), align 8
  store i64 %v0_2ff1b, i64* @rax, align 8
  store i64 %v0_2fee5, i64* @rbx, align 8
  ret i64 %v0_2ff1b

dec_label_pc_2ff30:                               ; preds = %dec_label_pc_2fee0
  %v1_2ff30 = add i64 %v0_2fee6, 32
  %v2_2ff30 = inttoptr i64 %v1_2ff30 to i64*
  %v3_2ff30 = load i64, i64* %v2_2ff30, align 8
  store i64 %v3_2ff30, i64* @rdi, align 8
  %v1_2ff34 = inttoptr i64 %v3_2ff30 to i64*
  %v2_2ff34 = load i64, i64* %v1_2ff34, align 8
  store i64 %v2_2ff34, i64* @rax, align 8
  store i64 %v2_2ff34, i64* @rbp, align 8
  %v1_2ff40 = inttoptr i64 %v2_2ff34 to i64*
  %v2_2ff40 = load i64, i64* %v1_2ff40, align 8
  store i64 %v2_2ff40, i64* @rax, align 8
  %v0_2ff43 = load i64, i64* inttoptr (i64 196426 to i64*), align 8
  store i64 %v0_2ff43, i64* %rsi.global-to-local, align 8
  store i64 %v2_2ff34, i64* @rdi, align 8
  %v4_2ff53 = trunc i64 %v2_2ff40 to i8
  %v5_2ff53 = icmp eq i8 %v4_2ff53, 0
  br i1 %v5_2ff53, label %bb, label %dec_label_pc_2ff5b

bb:                                               ; preds = %dec_label_pc_2ff30
  %v1_2ff55 = call i64 @function_300a0()
  store i64 %v1_2ff55, i64* @rax, align 8
  %v0_2ff5b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_2ff5b

dec_label_pc_2ff5b:                               ; preds = %bb, %dec_label_pc_2ff30
  %v0_2ff5b = phi i64 [ %v0_2ff5b.pre, %bb ], [ %v0_2fee6, %dec_label_pc_2ff30 ]
  %v1_2ff5b = add i64 %v0_2ff5b, 48
  %v2_2ff5b = inttoptr i64 %v1_2ff5b to i64*
  %v3_2ff5b = load i64, i64* %v2_2ff5b, align 8
  store i64 %v3_2ff5b, i64* @rdi, align 8
  %v1_2ff5f = inttoptr i64 %v3_2ff5b to i64*
  %v2_2ff5f = load i64, i64* %v1_2ff5f, align 8
  store i64 %v2_2ff5f, i64* @rax, align 8
  store i64 %v2_2ff5f, i64* %rbp.global-to-local, align 8
  %v1_2ff6b = inttoptr i64 %v2_2ff5f to i64*
  %v2_2ff6b = load i64, i64* %v1_2ff6b, align 8
  store i64 %v2_2ff6b, i64* @rax, align 8
  %v0_2ff6e = load i64, i64* inttoptr (i64 196469 to i64*), align 8
  store i64 %v0_2ff6e, i64* %rsi.global-to-local, align 8
  store i64 %v2_2ff5f, i64* @rdi, align 8
  %v4_2ff7e = trunc i64 %v2_2ff6b to i8
  %v5_2ff7e = icmp eq i8 %v4_2ff7e, 0
  %v1_2ff80 = icmp eq i1 %v5_2ff7e, false
  br i1 %v1_2ff80, label %bb259, label %dec_label_pc_2ff86

bb259:                                            ; preds = %dec_label_pc_2ff5b
  %v2_2ff80 = call i64 @function_30050()
  store i64 %v2_2ff80, i64* @rax, align 8
  %v0_2ff86.pre = load i64, i64* @rbx, align 8
  %v0_2ff8a.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_2ff86

dec_label_pc_2ff86:                               ; preds = %bb259, %dec_label_pc_2ff5b
  %v0_2ff8a = phi i64 [ %v0_2ff8a.pre, %bb259 ], [ %v2_2ff5f, %dec_label_pc_2ff5b ]
  %v0_2ff86 = phi i64 [ %v0_2ff86.pre, %bb259 ], [ %v0_2ff5b, %dec_label_pc_2ff5b ]
  %v1_2ff86 = add i64 %v0_2ff86, 64
  %v2_2ff86 = inttoptr i64 %v1_2ff86 to i64*
  %v3_2ff86 = load i64, i64* %v2_2ff86, align 8
  store i64 %v3_2ff86, i64* @rdi, align 8
  store i64 %v0_2ff8a, i64* %rsi.global-to-local, align 8
  %v1_2ff8d = inttoptr i64 %v3_2ff86 to i64*
  %v2_2ff8d = load i64, i64* %v1_2ff8d, align 8
  store i64 %v2_2ff8d, i64* @rax, align 8
  %v1_2ff96 = inttoptr i64 %v2_2ff8d to i64*
  %v2_2ff96 = load i64, i64* %v1_2ff96, align 8
  store i64 %v2_2ff96, i64* @rdx, align 8
  store i64 %v2_2ff8d, i64* @rdi, align 8
  %v4_2ffa2 = trunc i64 %v2_2ff8d to i8
  %v5_2ffa2 = icmp eq i8 %v4_2ffa2, 0
  br i1 %v5_2ffa2, label %bb260, label %dec_label_pc_2ffaa

bb260:                                            ; preds = %dec_label_pc_2ff86
  %v1_2ffa4 = call i64 @function_300b8()
  store i64 %v1_2ffa4, i64* @rax, align 8
  %v0_2ffaa.pre = load i64, i64* @rbx, align 8
  %v0_2ffae.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_2ffaa

dec_label_pc_2ffaa:                               ; preds = %bb260, %dec_label_pc_2ff86
  %v0_2ffc5 = phi i64 [ %v0_2ffae.pre, %bb260 ], [ %v0_2ff8a, %dec_label_pc_2ff86 ]
  %v0_2ffbe = phi i64 [ %v0_2ffaa.pre, %bb260 ], [ %v0_2ff86, %dec_label_pc_2ff86 ]
  %v1_2ffaa = add i64 %v0_2ffbe, 80
  %v2_2ffaa = inttoptr i64 %v1_2ffaa to i64*
  %v3_2ffaa = load i64, i64* %v2_2ffaa, align 8
  store i64 %v3_2ffaa, i64* @rdi, align 8
  store i64 %v0_2ffc5, i64* %rsi.global-to-local, align 8
  %v1_2ffb5 = inttoptr i64 %v3_2ffaa to i64*
  %v2_2ffb5 = load i64, i64* %v1_2ffb5, align 8
  store i64 %v2_2ffb5, i64* @rax, align 8
  %v1_2ffbe = add i64 %v0_2ffbe, 88
  %v2_2ffbe = inttoptr i64 %v1_2ffbe to i64*
  %v3_2ffbe = load i64, i64* %v2_2ffbe, align 8
  store i64 %v3_2ffbe, i64* @rdi, align 8
  store i64 %v2_2ffb5, i64* %r12.global-to-local, align 8
  store i64 %v0_2ffc5, i64* %rsi.global-to-local, align 8
  %v1_2ffc8 = inttoptr i64 %v3_2ffbe to i64*
  %v2_2ffc8 = load i64, i64* %v1_2ffc8, align 8
  store i64 196568, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_2ffc8, i64* %rbp.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  %v3_2ffec = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_2ffec = zext i32 %v3_2ffec to i64
  store i64 %v4_2ffec, i64* @rax, align 8
  %v5_2ffef = icmp eq i32 %v3_2ffec, 0
  br i1 %v5_2ffef, label %bb261, label %dec_label_pc_2fff7

bb261:                                            ; preds = %dec_label_pc_2ffaa
  %v2_2fff1 = call i64 @function_300cc(i64 1)
  store i64 %v2_2fff1, i64* @rax, align 8
  %v0_2fff7.pre = load i64, i64* @rbx, align 8
  %v0_2fffa.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_30004.pre = load i64, i64* %rbp.global-to-local, align 8
  %phitmp = add i64 %v0_2fff7.pre, 16
  %phitmp17 = inttoptr i64 %phitmp to i64*
  br label %dec_label_pc_2fff7

dec_label_pc_2fff7:                               ; preds = %bb261, %dec_label_pc_2ffaa
  %v0_30004 = phi i64 [ %v0_30004.pre, %bb261 ], [ %v2_2ffc8, %dec_label_pc_2ffaa ]
  %v0_3000a = phi i64 [ %v0_2fffa.pre, %bb261 ], [ %v2_2ffb5, %dec_label_pc_2ffaa ]
  %v0_30007 = phi i64* [ %phitmp17, %bb261 ], [ inttoptr (i64 16 to i64*), %dec_label_pc_2ffaa ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_30004, i64* %rsi.global-to-local, align 8
  store i64 %v0_3000a, i64* %v0_30007, align 8
  %v0_3001a = load i64, i64* @rax, align 8
  store i64 %v0_3001a, i64* %rbp.global-to-local, align 8
  store i64 196651, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_30050() local_unnamed_addr {
dec_label_pc_30050:
  %v0_30054 = load i64, i64* inttoptr (i64 196699 to i64*), align 8
  store i64 %v0_30054, i64* @rbp, align 8
  store i64 196720, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_300a0() local_unnamed_addr {
dec_label_pc_300a0:
  %v0_300a0 = load i64, i64* @rbx, align 8
  %v1_300a0 = add i64 %v0_300a0, 40
  %v2_300a0 = inttoptr i64 %v1_300a0 to i64*
  %v3_300a0 = load i64, i64* %v2_300a0, align 8
  store i64 %v3_300a0, i64* @rdi, align 8
  %v1_300a7 = inttoptr i64 %v3_300a0 to i64*
  %v2_300a7 = load i64, i64* %v1_300a7, align 8
  store i64 %v2_300a7, i64* @rax, align 8
  ret i64 %v2_300a7
}

define i64 @function_300b8() local_unnamed_addr {
dec_label_pc_300b8:
  %v0_300bc = load i64, i64* inttoptr (i64 196803 to i64*), align 8
  store i64 %v0_300bc, i64* @rbp, align 8
  store i64 196810, i64* @rdi, align 8
  %v0_300ca = load i64, i64* @rax, align 8
  ret i64 %v0_300ca
}

define i64 @function_300cc(i64 %arg1) local_unnamed_addr {
dec_label_pc_300cc:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$88onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_300e0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_300e5 = load i64, i64* @rbx, align 8
  %v0_300e6 = load i64, i64* @rdi, align 8
  store i64 %v0_300e6, i64* @rbx, align 8
  %v0_300e9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_300e9, i64* @rdi, align 8
  store i64 %v0_300e9, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_300fe = add i64 %v0_300e6, 24
  %v2_300fe = inttoptr i64 %v1_300fe to i64*
  %v3_300fe = load i64, i64* %v2_300fe, align 8
  store i64 %v3_300fe, i64* @rdi, align 8
  %v1_30102 = inttoptr i64 %v3_300fe to i64*
  %v2_30102 = load i64, i64* %v1_30102, align 8
  store i64 %v2_30102, i64* @rax, align 8
  %v1_3010b = inttoptr i64 %v2_30102 to i64*
  %v2_3010b = load i64, i64* %v1_3010b, align 8
  store i64 %v2_3010b, i64* @rdx, align 8
  store i64 %v2_30102, i64* @rdi, align 8
  %v4_30117 = trunc i64 %v2_30102 to i8
  %v5_30117 = icmp eq i8 %v4_30117, 0
  br i1 %v5_30117, label %dec_label_pc_30130, label %dec_label_pc_3011b

dec_label_pc_3011b:                               ; preds = %dec_label_pc_300e0
  %v0_3011b = load i64, i64* inttoptr (i64 196898 to i64*), align 8
  store i64 %v0_3011b, i64* @rax, align 8
  store i64 %v0_300e5, i64* @rbx, align 8
  ret i64 %v0_3011b

dec_label_pc_30130:                               ; preds = %dec_label_pc_300e0
  %v1_30130 = add i64 %v0_300e6, 32
  %v2_30130 = inttoptr i64 %v1_30130 to i64*
  %v3_30130 = load i64, i64* %v2_30130, align 8
  store i64 %v3_30130, i64* @rdi, align 8
  %v1_30134 = inttoptr i64 %v3_30130 to i64*
  %v2_30134 = load i64, i64* %v1_30134, align 8
  store i64 %v2_30134, i64* @rax, align 8
  store i64 %v2_30134, i64* @rbp, align 8
  %v1_30140 = inttoptr i64 %v2_30134 to i64*
  %v2_30140 = load i64, i64* %v1_30140, align 8
  store i64 %v2_30140, i64* @rax, align 8
  %v0_30143 = load i64, i64* inttoptr (i64 196938 to i64*), align 8
  store i64 %v0_30143, i64* %rsi.global-to-local, align 8
  store i64 %v2_30134, i64* @rdi, align 8
  %v4_30153 = trunc i64 %v2_30140 to i8
  %v5_30153 = icmp eq i8 %v4_30153, 0
  br i1 %v5_30153, label %bb, label %dec_label_pc_3015b

bb:                                               ; preds = %dec_label_pc_30130
  %v1_30155 = call i64 @function_302a0()
  store i64 %v1_30155, i64* @rax, align 8
  %v0_3015b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3015b

dec_label_pc_3015b:                               ; preds = %bb, %dec_label_pc_30130
  %v0_3015b = phi i64 [ %v0_3015b.pre, %bb ], [ %v0_300e6, %dec_label_pc_30130 ]
  %v1_3015b = add i64 %v0_3015b, 48
  %v2_3015b = inttoptr i64 %v1_3015b to i64*
  %v3_3015b = load i64, i64* %v2_3015b, align 8
  store i64 %v3_3015b, i64* @rdi, align 8
  %v1_3015f = inttoptr i64 %v3_3015b to i64*
  %v2_3015f = load i64, i64* %v1_3015f, align 8
  store i64 %v2_3015f, i64* @rax, align 8
  store i64 %v2_3015f, i64* %rbp.global-to-local, align 8
  %v1_3016b = inttoptr i64 %v2_3015f to i64*
  %v2_3016b = load i64, i64* %v1_3016b, align 8
  store i64 %v2_3016b, i64* @rax, align 8
  %v0_3016e = load i64, i64* inttoptr (i64 196981 to i64*), align 8
  store i64 %v0_3016e, i64* %rsi.global-to-local, align 8
  store i64 %v2_3015f, i64* @rdi, align 8
  %v4_3017e = trunc i64 %v2_3016b to i8
  %v5_3017e = icmp eq i8 %v4_3017e, 0
  %v1_30180 = icmp eq i1 %v5_3017e, false
  br i1 %v1_30180, label %bb259, label %dec_label_pc_30186

bb259:                                            ; preds = %dec_label_pc_3015b
  %v2_30180 = call i64 @function_30250()
  store i64 %v2_30180, i64* @rax, align 8
  %v0_30186.pre = load i64, i64* @rbx, align 8
  %v0_3018a.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_30186

dec_label_pc_30186:                               ; preds = %bb259, %dec_label_pc_3015b
  %v0_3018a = phi i64 [ %v0_3018a.pre, %bb259 ], [ %v2_3015f, %dec_label_pc_3015b ]
  %v0_30186 = phi i64 [ %v0_30186.pre, %bb259 ], [ %v0_3015b, %dec_label_pc_3015b ]
  %v1_30186 = add i64 %v0_30186, 64
  %v2_30186 = inttoptr i64 %v1_30186 to i64*
  %v3_30186 = load i64, i64* %v2_30186, align 8
  store i64 %v3_30186, i64* @rdi, align 8
  store i64 %v0_3018a, i64* %rsi.global-to-local, align 8
  %v1_3018d = inttoptr i64 %v3_30186 to i64*
  %v2_3018d = load i64, i64* %v1_3018d, align 8
  store i64 %v2_3018d, i64* @rax, align 8
  %v1_30196 = inttoptr i64 %v2_3018d to i64*
  %v2_30196 = load i64, i64* %v1_30196, align 8
  store i64 %v2_30196, i64* @rdx, align 8
  store i64 %v2_3018d, i64* @rdi, align 8
  %v4_301a2 = trunc i64 %v2_3018d to i8
  %v5_301a2 = icmp eq i8 %v4_301a2, 0
  br i1 %v5_301a2, label %bb260, label %dec_label_pc_301aa

bb260:                                            ; preds = %dec_label_pc_30186
  %v1_301a4 = call i64 @function_302b8()
  store i64 %v1_301a4, i64* @rax, align 8
  %v0_301aa.pre = load i64, i64* @rbx, align 8
  %v0_301ae.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_301aa

dec_label_pc_301aa:                               ; preds = %bb260, %dec_label_pc_30186
  %v0_301c5 = phi i64 [ %v0_301ae.pre, %bb260 ], [ %v0_3018a, %dec_label_pc_30186 ]
  %v0_301be = phi i64 [ %v0_301aa.pre, %bb260 ], [ %v0_30186, %dec_label_pc_30186 ]
  %v1_301aa = add i64 %v0_301be, 80
  %v2_301aa = inttoptr i64 %v1_301aa to i64*
  %v3_301aa = load i64, i64* %v2_301aa, align 8
  store i64 %v3_301aa, i64* @rdi, align 8
  store i64 %v0_301c5, i64* %rsi.global-to-local, align 8
  %v1_301b5 = inttoptr i64 %v3_301aa to i64*
  %v2_301b5 = load i64, i64* %v1_301b5, align 8
  store i64 %v2_301b5, i64* @rax, align 8
  %v1_301be = add i64 %v0_301be, 88
  %v2_301be = inttoptr i64 %v1_301be to i64*
  %v3_301be = load i64, i64* %v2_301be, align 8
  store i64 %v3_301be, i64* @rdi, align 8
  store i64 %v2_301b5, i64* %r12.global-to-local, align 8
  store i64 %v0_301c5, i64* %rsi.global-to-local, align 8
  %v1_301c8 = inttoptr i64 %v3_301be to i64*
  %v2_301c8 = load i64, i64* %v1_301c8, align 8
  store i64 197080, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_301c8, i64* %rbp.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  %v3_301ec = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_301ec = zext i32 %v3_301ec to i64
  store i64 %v4_301ec, i64* @rax, align 8
  %v5_301ef = icmp eq i32 %v3_301ec, 0
  br i1 %v5_301ef, label %bb261, label %dec_label_pc_301f7

bb261:                                            ; preds = %dec_label_pc_301aa
  %v2_301f1 = call i64 @function_302cc(i64 1)
  store i64 %v2_301f1, i64* @rax, align 8
  %v0_301f7.pre = load i64, i64* @rbx, align 8
  %v0_301fa.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_30204.pre = load i64, i64* %rbp.global-to-local, align 8
  %phitmp = add i64 %v0_301f7.pre, 16
  %phitmp17 = inttoptr i64 %phitmp to i64*
  br label %dec_label_pc_301f7

dec_label_pc_301f7:                               ; preds = %bb261, %dec_label_pc_301aa
  %v0_30204 = phi i64 [ %v0_30204.pre, %bb261 ], [ %v2_301c8, %dec_label_pc_301aa ]
  %v0_3020a = phi i64 [ %v0_301fa.pre, %bb261 ], [ %v2_301b5, %dec_label_pc_301aa ]
  %v0_30207 = phi i64* [ %phitmp17, %bb261 ], [ inttoptr (i64 16 to i64*), %dec_label_pc_301aa ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_30204, i64* %rsi.global-to-local, align 8
  store i64 %v0_3020a, i64* %v0_30207, align 8
  %v0_3021a = load i64, i64* @rax, align 8
  store i64 %v0_3021a, i64* %rbp.global-to-local, align 8
  store i64 197163, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_30250() local_unnamed_addr {
dec_label_pc_30250:
  %v0_30254 = load i64, i64* inttoptr (i64 197211 to i64*), align 8
  store i64 %v0_30254, i64* @rbp, align 8
  store i64 197232, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_302a0() local_unnamed_addr {
dec_label_pc_302a0:
  %v0_302a0 = load i64, i64* @rbx, align 8
  %v1_302a0 = add i64 %v0_302a0, 40
  %v2_302a0 = inttoptr i64 %v1_302a0 to i64*
  %v3_302a0 = load i64, i64* %v2_302a0, align 8
  store i64 %v3_302a0, i64* @rdi, align 8
  %v1_302a7 = inttoptr i64 %v3_302a0 to i64*
  %v2_302a7 = load i64, i64* %v1_302a7, align 8
  store i64 %v2_302a7, i64* @rax, align 8
  ret i64 %v2_302a7
}

define i64 @function_302b8() local_unnamed_addr {
dec_label_pc_302b8:
  %v0_302bc = load i64, i64* inttoptr (i64 197315 to i64*), align 8
  store i64 %v0_302bc, i64* @rbp, align 8
  store i64 197322, i64* @rdi, align 8
  %v0_302ca = load i64, i64* @rax, align 8
  ret i64 %v0_302ca
}

define i64 @function_302cc(i64 %arg1) local_unnamed_addr {
dec_label_pc_302cc:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable7hashgetEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_302e0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_302e0 = load i64, i64* @rdi, align 8
  %v1_302e0 = add i64 %v0_302e0, 24
  %v2_302e0 = inttoptr i64 %v1_302e0 to i32*
  %v3_302e0 = load i32, i32* %v2_302e0, align 4
  %v4_302e0 = zext i32 %v3_302e0 to i64
  store i64 %v4_302e0, i64* @rax, align 8
  %tmp240 = icmp slt i32 %v3_302e0, 1
  br i1 %tmp240, label %bb, label %dec_label_pc_302eb

bb:                                               ; preds = %dec_label_pc_302e0
  %v5_302e5 = call i64 @function_30448()
  store i64 %v5_302e5, i64* @rax, align 8
  br label %dec_label_pc_302eb

dec_label_pc_302eb:                               ; preds = %bb, %dec_label_pc_302e0
  store i64 197379, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_30370() local_unnamed_addr {
dec_label_pc_30370:
  %v2_30370 = load i64, i64* @rbx, align 8
  store i64 5, i64* @rdx, align 8
  store i64 %v2_30370, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_30396(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_30396:
  %v2_30396 = load i64, i64* @rbx, align 8
  store i64 3, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v2_30396, i64* @rdi, align 8
  %v1_303b9 = call i64 @function_30370()
  store i64 2, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_303e8() local_unnamed_addr {
dec_label_pc_303e8:
  %of.global-to-local = alloca i1, align 1
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 1, i64* @rdx, align 8
  %v0_303ed = load i64, i64* @rax, align 8
  store i64 %v0_303ed, i64* @rcx, align 8
  %v2_303ef = urem i64 %v0_303ed, 64
  %v4_303ef = icmp eq i64 %v2_303ef, 0
  br i1 %v4_303ef, label %bb237, label %bb

bb:                                               ; preds = %dec_label_pc_303e8
  %v3_303ef = load i1, i1* %of.global-to-local, align 1
  %v5_303ef = shl i64 1, %v2_303ef
  store i64 %v5_303ef, i64* @rdx, align 8
  %v12_303ef = add nsw i64 %v2_303ef, -1
  %v13_303ef = shl i64 1, %v12_303ef
  %v17_303ef.unshifted = xor i64 %v5_303ef, %v13_303ef
  %v17_303ef = icmp slt i64 %v17_303ef.unshifted, 0
  %v18_303ef = icmp eq i64 %v2_303ef, 1
  %v19_303ef = select i1 %v18_303ef, i1 %v17_303ef, i1 %v3_303ef
  store i1 %v19_303ef, i1* %of.global-to-local, align 1
  br label %bb237

bb237:                                            ; preds = %dec_label_pc_303e8, %bb
  %v2_303fe = load i64, i64* %r13.global-to-local, align 8
  store i64 197647, i64* @rdi, align 8
  %v1_3041a = trunc i64 %v2_303fe to i32
  %v2_3041a = urem i32 %v1_3041a, -2147483648
  store i1 false, i1* %of.global-to-local, align 1
  %v9_3041a = zext i32 %v2_3041a to i64
  %v0_30420 = load i64, i64* %rbp.global-to-local, align 8
  %v5_30420 = sdiv i64 %v9_3041a, %v0_30420
  store i64 %v5_30420, i64* @rax, align 8
  %v6_30420 = srem i64 %v9_3041a, %v0_30420
  store i64 %v6_30420, i64* @rdx, align 8
  store i64 %v6_30420, i64* @rbx, align 8
  ret i64 %v5_30420
}

define i64 @function_30430(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_30430:
  %v0_30430 = load i64, i64* inttoptr (i64 197687 to i64*), align 8
  store i64 %v0_30430, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_30430
}

define i64 @function_30448() local_unnamed_addr {
dec_label_pc_30448:
  %v0_30448 = load i64, i64* inttoptr (i64 197711 to i64*), align 8
  store i64 %v0_30448, i64* @rax, align 8
  ret i64 %v0_30448
}

define i64 @function_30450() local_unnamed_addr {
dec_label_pc_30450:
  %v0_30450 = load i64, i64* @rbx, align 8
  store i64 %v0_30450, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$648onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_30460:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_30468 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_30468, i64* @rbx, align 8
  store i64 4, i64* %rsi.global-to-local, align 8
  store i64 197843, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_30650() local_unnamed_addr {
dec_label_pc_30650:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3068d(i64 %arg1) local_unnamed_addr {
dec_label_pc_3068d:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$FormatDesc6formatEJvPNS1_6BufferEx"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_306a0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @r12, align 8
  %v0_306ad = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_306ad, i64* @rbx, align 8
  %v1_306b4 = icmp eq i64 %arg3, 0
  br i1 %v1_306b4, label %bb, label %dec_label_pc_306c9

bb:                                               ; preds = %dec_label_pc_306a0
  %v2_306c3 = call i64 @function_30a0f(i64 %arg1)
  store i64 %v2_306c3, i64* @rax, align 8
  %v0_306c9.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_306c9

dec_label_pc_306c9:                               ; preds = %bb, %dec_label_pc_306a0
  %v0_306c9 = phi i64 [ %v0_306c9.pre, %bb ], [ %arg1, %dec_label_pc_306a0 ]
  %v1_306c9 = add i64 %v0_306c9, 24
  %v2_306c9 = inttoptr i64 %v1_306c9 to i32*
  %v3_306c9 = load i32, i32* %v2_306c9, align 4
  %v4_306c9 = zext i32 %v3_306c9 to i64
  store i64 %v4_306c9, i64* @rax, align 8
  store i64 8, i64* %rsi.global-to-local, align 8
  %v11_306d3 = icmp eq i32 %v3_306c9, 111
  br i1 %v11_306d3, label %dec_label_pc_306ef, label %dec_label_pc_306d8

dec_label_pc_306d8:                               ; preds = %dec_label_pc_306c9
  %v11_306d8 = icmp eq i32 %v3_306c9, 120
  br i1 %v11_306d8, label %bb248, label %dec_label_pc_306e1

bb248:                                            ; preds = %dec_label_pc_306d8
  %v1_306db = call i64 @function_30ca0()
  store i64 %v1_306db, i64* @rax, align 8
  br label %dec_label_pc_306e1

dec_label_pc_306e1:                               ; preds = %bb248, %dec_label_pc_306d8
  %v0_306e1 = phi i64 [ %v1_306db, %bb248 ], [ %v4_306c9, %dec_label_pc_306d8 ]
  %v1_306e1 = trunc i64 %v0_306e1 to i32
  %v11_306e1 = icmp eq i32 %v1_306e1, 88
  store i64 10, i64* %rsi.global-to-local, align 8
  br i1 %v11_306e1, label %bb250, label %dec_label_pc_306ef

bb250:                                            ; preds = %dec_label_pc_306e1
  %v1_306e9 = call i64 @function_30ca0()
  store i64 %v1_306e9, i64* @rax, align 8
  br label %dec_label_pc_306ef

dec_label_pc_306ef:                               ; preds = %bb250, %dec_label_pc_306e1, %dec_label_pc_306c9
  %v1_306ef = phi i64 [ %v1_306e9, %bb250 ], [ %v0_306e1, %dec_label_pc_306e1 ], [ %v4_306c9, %dec_label_pc_306c9 ]
  store i64 %arg3, i64* @rdi, align 8
  ret i64 %v1_306ef
}

define i64 @function_30790(i64 %arg1) local_unnamed_addr {
dec_label_pc_30790:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_30799 = add i64 %arg1, 20
  %v2_30799 = inttoptr i64 %v1_30799 to i32*
  %v3_30799 = load i32, i32* %v2_30799, align 4
  %v4_30799 = zext i32 %v3_30799 to i64
  store i64 %v4_30799, i64* %rsi.global-to-local, align 8
  store i64 198563, i64* @rdi, align 8
  store i64 %arg1, i64* %rbp.global-to-local, align 8
  %v0_307a6 = load i64, i64* @rbx, align 8
  %v1_307a6 = add i64 %v0_307a6, 24
  %v2_307a6 = inttoptr i64 %v1_307a6 to i64*
  store i64 0, i64* %v2_307a6, align 8
  %v0_307ae = load i64, i64* @rbx, align 8
  %v1_307ae = add i64 %v0_307ae, 20
  %v2_307ae = inttoptr i64 %v1_307ae to i32*
  store i32 0, i32* %v2_307ae, align 4
  store i64 0, i64* @rax, align 8
  %v0_307b7 = load i64, i64* %rsi.global-to-local, align 8
  %v1_307b7 = trunc i64 %v0_307b7 to i32
  %v2_307b7 = load i64, i64* @rbx, align 8
  %v3_307b7 = add i64 %v2_307b7, 16
  %v4_307b7 = inttoptr i64 %v3_307b7 to i32*
  store i32 %v1_307b7, i32* %v4_307b7, align 4
  %v0_307ba = load i64, i64* %rsi.global-to-local, align 8
  %v2_307ba = add i64 %v0_307ba, 1
  %v17_307ba = and i64 %v2_307ba, 4294967295
  store i64 %v17_307ba, i64* %rsi.global-to-local, align 8
  %v0_307c2 = load i64, i64* %rbp.global-to-local, align 8
  %v1_307c2 = add i64 %v0_307c2, 8
  %v2_307c2 = inttoptr i64 %v1_307c2 to i64*
  %v3_307c2 = load i64, i64* %v2_307c2, align 8
  store i64 %v3_307c2, i64* @rdi, align 8
  %v1_307c6 = add i64 %v0_307c2, 16
  %v2_307c6 = inttoptr i64 %v1_307c6 to i32*
  %v3_307c6 = load i32, i32* %v2_307c6, align 4
  %v4_307c6 = zext i32 %v3_307c6 to i64
  store i64 %v4_307c6, i64* %rsi.global-to-local, align 8
  %v0_307c9 = load i64, i64* @rax, align 8
  store i64 %v0_307c9, i64* @rdx, align 8
  %v0_307cc = load i64, i64* @rbx, align 8
  %v1_307cc = add i64 %v0_307cc, 20
  %v2_307cc = inttoptr i64 %v1_307cc to i32*
  %v3_307cc = load i32, i32* %v2_307cc, align 4
  %v4_307cc = zext i32 %v3_307cc to i64
  store i64 %v4_307cc, i64* @rcx, align 8
  %v2_307d3 = add i64 %v0_307cc, 8
  %v3_307d3 = inttoptr i64 %v2_307d3 to i64*
  store i64 %v0_307c9, i64* %v3_307d3, align 8
  %v4_307d3 = load i64, i64* @rax, align 8
  ret i64 %v4_307d3
}

define i64 @function_307e6(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_307e6:
  store i64 %arg3, i64* @rdx, align 8
  %v1_307e6 = trunc i64 %arg1 to i32
  %v3_307e6 = trunc i64 %arg3 to i32
  %v4_307e6 = add i32 %v3_307e6, %v1_307e6
  %v20_307e6 = zext i32 %v4_307e6 to i64
  store i64 %v20_307e6, i64* @rdi, align 8
  %v2_307e8 = load i64, i64* @rax, align 8
  %v3_307e8 = add i64 %v2_307e8, 8
  %v4_307e8 = inttoptr i64 %v3_307e8 to i32*
  %v5_307e8 = load i32, i32* %v4_307e8, align 4
  %v11_307e8 = icmp ult i32 %v4_307e6, %v5_307e8
  %v1_307eb = add i64 %arg3, 1
  store i64 %v1_307eb, i64* @rcx, align 8
  %v1_307ee = trunc i64 %v1_307eb to i32
  %v2_307ee = load i64, i64* @rbx, align 8
  %v3_307ee = add i64 %v2_307ee, 16
  %v4_307ee = inttoptr i64 %v3_307ee to i32*
  store i32 %v1_307ee, i32* %v4_307ee, align 4
  %v1_307f1 = icmp eq i1 %v11_307e8, false
  br i1 %v1_307f1, label %bb, label %dec_label_pc_307e6.dec_label_pc_307f7_crit_edge

dec_label_pc_307e6.dec_label_pc_307f7_crit_edge:  ; preds = %dec_label_pc_307e6
  %v0_30802.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_307f7

bb:                                               ; preds = %dec_label_pc_307e6
  %v2_307f1 = call i64 @function_30d66()
  store i64 %v2_307f1, i64* @rax, align 8
  br label %dec_label_pc_307f7

dec_label_pc_307f7:                               ; preds = %dec_label_pc_307e6.dec_label_pc_307f7_crit_edge, %bb
  %v0_30802 = phi i64 [ %v0_30802.pre, %dec_label_pc_307e6.dec_label_pc_307f7_crit_edge ], [ %v2_307f1, %bb ]
  %v0_307f7 = load i64, i64* @r13, align 8
  %v2_307f7 = add i64 %v0_307f7, 4294967295
  %v17_307f7 = and i64 %v2_307f7, 4294967295
  store i64 %v17_307f7, i64* @r13, align 8
  %v1_30802 = load i64, i64* @rdi, align 8
  %v3_30802 = add i64 %v0_30802, 12
  %v4_30802 = add i64 %v3_30802, %v1_30802
  %v5_30802 = inttoptr i64 %v4_30802 to i8*
  store i8 32, i8* %v5_30802, align 1
  %v0_30807 = load i64, i64* @rax, align 8
  ret i64 %v0_30807
}

define i64 @function_3080d() local_unnamed_addr {
dec_label_pc_3080d:
  %v0_3080d = load i64, i64* @rbx, align 8
  %v1_3080d = add i64 %v0_3080d, 24
  %v2_3080d = inttoptr i64 %v1_3080d to i64*
  %v3_3080d = load i64, i64* %v2_3080d, align 8
  store i64 %v3_3080d, i64* @rdi, align 8
  %v1_30811 = icmp eq i64 %v3_3080d, 0
  %v1_30814 = icmp eq i1 %v1_30811, false
  br i1 %v1_30814, label %bb, label %dec_label_pc_3081a

bb:                                               ; preds = %dec_label_pc_3080d
  %v3_30814 = call i64 @function_30790(i64 %v3_3080d)
  store i64 %v3_30814, i64* @rax, align 8
  %v0_3081a.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3081a

dec_label_pc_3081a:                               ; preds = %bb, %dec_label_pc_3080d
  %v0_30821 = phi i64 [ %v0_3081a.pre, %bb ], [ %v0_3080d, %dec_label_pc_3080d ]
  %v1_3081a = add i64 %v0_30821, 8
  %v2_3081a = inttoptr i64 %v1_3081a to i64*
  %v3_3081a = load i64, i64* %v2_3081a, align 8
  store i64 %v3_3081a, i64* @rax, align 8
  %v1_3081e = add i64 %v0_30821, 20
  %v2_3081e = inttoptr i64 %v1_3081e to i32*
  %v3_3081e = load i32, i32* %v2_3081e, align 4
  %v4_3081e = zext i32 %v3_3081e to i64
  store i64 %v4_3081e, i64* @rdi, align 8
  %v1_30821 = add i64 %v0_30821, 16
  %v2_30821 = inttoptr i64 %v1_30821 to i32*
  %v3_30821 = load i32, i32* %v2_30821, align 4
  %v4_30821 = zext i32 %v3_30821 to i64
  store i64 %v4_30821, i64* @rdx, align 8
  %v1_30824 = add i64 %v3_3081a, 8
  %v2_30824 = inttoptr i64 %v1_30824 to i32*
  %v3_30824 = load i32, i32* %v2_30824, align 4
  %v4_30824 = zext i32 %v3_30824 to i64
  store i64 %v4_30824, i64* @rcx, align 8
  %v2_30827 = sext i32 %v3_3081e to i64
  %v4_30827 = add nuw nsw i64 %v4_30821, 1
  %v5_30827 = add nsw i64 %v4_30827, %v2_30827
  %sext = mul i64 %v5_30827, 4294967296
  %v7_3082d = sdiv i64 %sext, 4294967296
  %v9_3082d = icmp sgt i64 %v7_3082d, %v4_30824
  br i1 %v9_3082d, label %dec_label_pc_30833, label %dec_label_pc_3082f

dec_label_pc_3082f:                               ; preds = %dec_label_pc_3081a
  %v8_3082f = icmp slt i32 %v3_3081e, 0
  %v1_30831 = icmp eq i1 %v8_3082f, false
  br i1 %v1_30831, label %bb262, label %dec_label_pc_30833

bb262:                                            ; preds = %dec_label_pc_3082f
  %v7_30831 = call i64 @function_307e6(i64 %v2_30827, i64 %v7_3082d, i64 %v4_30821)
  store i64 %v7_30831, i64* @rax, align 8
  br label %dec_label_pc_30833

dec_label_pc_30833:                               ; preds = %bb262, %dec_label_pc_3082f, %dec_label_pc_3081a
  %v1_3083c = trunc i64 %v4_30827 to i32
  %v9_30840 = icmp sgt i32 %v1_3083c, 31
  br i1 %v9_30840, label %dec_label_pc_30842, label %dec_label_pc_3084c

dec_label_pc_30842:                               ; preds = %dec_label_pc_30833
  %v3_30842 = mul nuw nsw i64 %v4_30821, 2
  %v1_30845 = trunc i64 %v3_30842 to i32
  %v4_30845 = sub i32 %v1_30845, %v1_3083c
  %v10_308452 = xor i64 %v4_30827, %v3_30842
  %v10_30845 = trunc i64 %v10_308452 to i32
  %v11_30845 = xor i32 %v4_30845, %v1_30845
  %v12_30845 = and i32 %v11_30845, %v10_30845
  %v13_30845 = icmp slt i32 %v12_30845, 0
  %v15_30845 = icmp slt i32 %v4_30845, 0
  %v2_30848 = icmp ne i1 %v15_30845, %v13_30845
  %v7_30848.v = select i1 %v2_30848, i64 %v4_30827, i64 %v3_30842
  %v8_30848 = and i64 %v7_30848.v, 4294967295
  br label %dec_label_pc_3084c

dec_label_pc_3084c:                               ; preds = %dec_label_pc_30833, %dec_label_pc_30842
  %v3_3084e = phi i64 [ 32, %dec_label_pc_30833 ], [ %v8_30848, %dec_label_pc_30842 ]
  %v0_3084c = load i64, i64* @rcx, align 8
  %v1_3084c = trunc i64 %v0_3084c to i32
  %v3_3084c = trunc i64 %v3_3084e to i32
  %v14_3084c = icmp eq i32 %v1_3084c, %v3_3084c
  br i1 %v14_3084c, label %bb264, label %dec_label_pc_30850

bb264:                                            ; preds = %dec_label_pc_3084c
  %v5_3084e = call i64 @function_307e6(i64 %v2_30827, i64 %v3_3084e, i64 %v4_30821)
  store i64 %v5_3084e, i64* @rax, align 8
  br label %dec_label_pc_30850

dec_label_pc_30850:                               ; preds = %bb264, %dec_label_pc_3084c
  store i64 198743, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3085e = load i64, i64* @rbx, align 8
  %v1_3085e = add i64 %v0_3085e, 8
  %v2_3085e = inttoptr i64 %v1_3085e to i64*
  %v3_3085e = load i64, i64* %v2_3085e, align 8
  store i64 %v3_3085e, i64* @rdi, align 8
  %v1_30862 = add i64 %v0_3085e, 20
  %v2_30862 = inttoptr i64 %v1_30862 to i32*
  %v3_30862 = load i32, i32* %v2_30862, align 4
  %v4_30862 = zext i32 %v3_30862 to i64
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rcx, align 8
  store i32 0, i32* %v2_30862, align 4
  store i64 0, i64* @rdi, align 8
  %v0_30884 = load i64, i64* @rbx, align 8
  %v1_30884 = add i64 %v0_30884, 16
  %v2_30884 = inttoptr i64 %v1_30884 to i32*
  %v3_30884 = load i32, i32* %v2_30884, align 4
  %v4_30884 = zext i32 %v3_30884 to i64
  store i64 %v4_30884, i64* @rdx, align 8
  %v0_30887 = load i64, i64* @rax, align 8
  %v2_30887 = add i64 %v0_30884, 8
  %v3_30887 = inttoptr i64 %v2_30887 to i64*
  store i64 %v0_30887, i64* %v3_30887, align 8
  %v3_3088b = call i64 @function_307e6(i64 0, i64 %v4_30862, i64 %v4_30884)
  store i64 %v3_3088b, i64* @rax, align 8
  ret i64 %v3_3088b
}

define i64 @function_30890(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_30890:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_30890 = load i64, i64* %rbp.global-to-local, align 8
  %v1_30890 = trunc i64 %v0_30890 to i32
  %v11_30890 = icmp eq i32 %v1_30890, -1
  %v1_30893 = icmp eq i1 %v11_30890, false
  br i1 %v1_30893, label %bb, label %dec_label_pc_30899

bb:                                               ; preds = %dec_label_pc_30890
  %v2_30893 = call i64 @function_30c60()
  store i64 %v2_30893, i64* @rax, align 8
  br label %dec_label_pc_30899

dec_label_pc_30899:                               ; preds = %bb, %dec_label_pc_30890
  %v0_30899 = load i64, i64* @r12, align 8
  %v1_30899 = add i64 %v0_30899, 9
  %v2_30899 = inttoptr i64 %v1_30899 to i8*
  %v3_30899 = load i8, i8* %v2_30899, align 1
  %v10_30899 = icmp eq i8 %v3_30899, 0
  br i1 %v10_30899, label %bb242, label %dec_label_pc_308a5

bb242:                                            ; preds = %dec_label_pc_30899
  %v1_3089f = call i64 @function_30c60()
  store i64 %v1_3089f, i64* @rax, align 8
  %v0_308a5.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_308a5

dec_label_pc_308a5:                               ; preds = %bb242, %dec_label_pc_30899
  %v0_308a5 = phi i64 [ %v0_308a5.pre, %bb242 ], [ %v0_30899, %dec_label_pc_30899 ]
  %v1_308a5 = add i64 %v0_308a5, 16
  %v2_308a5 = inttoptr i64 %v1_308a5 to i32*
  %v3_308a5 = load i32, i32* %v2_308a5, align 4
  %v4_308a5 = zext i32 %v3_308a5 to i64
  store i64 %v4_308a5, i64* @r13, align 8
  %v5_308ad = icmp sgt i64 %v4_308a5, %arg3
  br i1 %v5_308ad, label %bb243, label %dec_label_pc_308a5.dec_label_pc_308b3_crit_edge

dec_label_pc_308a5.dec_label_pc_308b3_crit_edge:  ; preds = %dec_label_pc_308a5
  %v0_308bb.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_308b3

bb243:                                            ; preds = %dec_label_pc_308a5
  %v9_308ad = call i64 @function_30d58(i64 %arg1, i64 %arg2, i64 %arg3)
  store i64 %v9_308ad, i64* @rax, align 8
  br label %dec_label_pc_308b3

dec_label_pc_308b3:                               ; preds = %dec_label_pc_308a5.dec_label_pc_308b3_crit_edge, %bb243
  %v0_308bb = phi i64 [ %v0_308bb.pre, %dec_label_pc_308a5.dec_label_pc_308b3_crit_edge ], [ %v9_308ad, %bb243 ]
  ret i64 %v0_308bb
}

define i64 @function_308c0() local_unnamed_addr {
dec_label_pc_308c0:
  %r12.global-to-local = alloca i64, align 8
  %v0_308c0 = load i64, i64* %r12.global-to-local, align 8
  %v1_308c0 = add i64 %v0_308c0, 8
  %v2_308c0 = inttoptr i64 %v1_308c0 to i8*
  %v3_308c0 = load i8, i8* %v2_308c0, align 1
  %v4_308c0 = zext i8 %v3_308c0 to i64
  store i64 %v4_308c0, i64* @rax, align 8
  ret i64 %v4_308c0
}

define i64 @function_308ce(i32 %arg1) local_unnamed_addr {
dec_label_pc_308ce:
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %v0_308ce = load i64, i64* %r15.global-to-local, align 8
  %v1_308ce = trunc i64 %v0_308ce to i32
  %v11_308ce = icmp eq i32 %v1_308ce, -1
  br i1 %v11_308ce, label %bb, label %dec_label_pc_308d8

bb:                                               ; preds = %dec_label_pc_308ce
  %v2_308d2 = call i64 @function_30ce0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_308d2, i64* @rax, align 8
  br label %dec_label_pc_308d8

dec_label_pc_308d8:                               ; preds = %bb, %dec_label_pc_308ce
  %v0_308d8 = load i64, i64* @r12, align 8
  %v1_308d8 = add i64 %v0_308d8, 10
  %v2_308d8 = inttoptr i64 %v1_308d8 to i8*
  %v3_308d8 = load i8, i8* %v2_308d8, align 1
  %v10_308d8 = icmp eq i8 %v3_308d8, 0
  br i1 %v10_308d8, label %bb254, label %dec_label_pc_308e4

bb254:                                            ; preds = %dec_label_pc_308d8
  %v1_308de = load i64, i64* @rdi, align 8
  %v2_308de = load i64, i64* @rsi, align 8
  %v4_308de = call i64 @function_30a58(i64 %v1_308de, i64 %v2_308de, i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_308de, i64* @rax, align 8
  br label %dec_label_pc_308e4

dec_label_pc_308e4:                               ; preds = %bb254, %dec_label_pc_308d8
  %v0_308e4 = load i64, i64* @rbx, align 8
  %v1_308e4 = icmp eq i64 %v0_308e4, 0
  br i1 %v1_308e4, label %bb255, label %dec_label_pc_308ed

bb255:                                            ; preds = %dec_label_pc_308e4
  %v1_308e7 = call i64 @function_30cc9()
  store i64 %v1_308e7, i64* @rax, align 8
  %v0_308f2.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_308ed

dec_label_pc_308ed:                               ; preds = %bb255, %dec_label_pc_308e4
  %v0_308f2 = phi i64 [ %v0_308f2.pre, %bb255 ], [ %v0_308e4, %dec_label_pc_308e4 ]
  store i64 43, i64* %rsi.global-to-local, align 8
  store i64 %v0_308f2, i64* @rdi, align 8
  %v4_308fa = zext i32 %arg1 to i64
  store i64 %v4_308fa, i64* @rcx, align 8
  %tmp256 = icmp slt i32 %arg1, 1
  br i1 %tmp256, label %bb257, label %dec_label_pc_30906

bb257:                                            ; preds = %dec_label_pc_308ed
  %v5_30900 = call i64 @function_30ab0()
  store i64 %v5_30900, i64* @rax, align 8
  br label %dec_label_pc_30906

dec_label_pc_30906:                               ; preds = %bb257, %dec_label_pc_308ed
  %v2_3090a = add i32 %arg1, -1
  %v17_3090a = zext i32 %v2_3090a to i64
  store i64 %v17_3090a, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_3098e

dec_label_pc_30910:                               ; preds = %dec_label_pc_3098e
  %v1_30910 = inttoptr i64 %v3_3098e to i64*
  %v2_30910 = load i64, i64* %v1_30910, align 8
  store i64 %v2_30910, i64* @rax, align 8
  %v1_30919 = add i64 %v2_30910, 20
  %v2_30919 = inttoptr i64 %v1_30919 to i32*
  %v3_30919 = load i32, i32* %v2_30919, align 4
  %v4_30919 = zext i32 %v3_30919 to i64
  store i64 %v4_30919, i64* %rsi.global-to-local, align 8
  store i64 198947, i64* @rdi, align 8
  store i64 %v2_30910, i64* %r15.global-to-local, align 8
  store i64 0, i64* %v2_3098e, align 8
  %v0_3092e = load i64, i64* @rbx, align 8
  %v1_3092e = add i64 %v0_3092e, 20
  %v2_3092e = inttoptr i64 %v1_3092e to i32*
  store i32 0, i32* %v2_3092e, align 4
  store i64 0, i64* @rax, align 8
  %v0_30937 = load i64, i64* %rsi.global-to-local, align 8
  %v1_30937 = trunc i64 %v0_30937 to i32
  %v2_30937 = load i64, i64* @rbx, align 8
  %v3_30937 = add i64 %v2_30937, 16
  %v4_30937 = inttoptr i64 %v3_30937 to i32*
  store i32 %v1_30937, i32* %v4_30937, align 4
  %v0_3093a = load i64, i64* %rsi.global-to-local, align 8
  %v2_3093a = add i64 %v0_3093a, 1
  %v17_3093a = and i64 %v2_3093a, 4294967295
  store i64 %v17_3093a, i64* %rsi.global-to-local, align 8
  %v0_30942 = load i64, i64* %r15.global-to-local, align 8
  %v1_30942 = add i64 %v0_30942, 8
  %v2_30942 = inttoptr i64 %v1_30942 to i64*
  %v3_30942 = load i64, i64* %v2_30942, align 8
  store i64 %v3_30942, i64* @rdi, align 8
  %v1_30946 = add i64 %v0_30942, 16
  %v2_30946 = inttoptr i64 %v1_30946 to i32*
  %v3_30946 = load i32, i32* %v2_30946, align 4
  %v4_30946 = zext i32 %v3_30946 to i64
  store i64 %v4_30946, i64* %rsi.global-to-local, align 8
  %v0_3094a = load i64, i64* @rax, align 8
  store i64 %v0_3094a, i64* @rdx, align 8
  %v0_3094d = load i64, i64* @rbx, align 8
  %v1_3094d = add i64 %v0_3094d, 20
  %v2_3094d = inttoptr i64 %v1_3094d to i32*
  %v3_3094d = load i32, i32* %v2_3094d, align 4
  %v4_3094d = zext i32 %v3_3094d to i64
  store i64 %v4_3094d, i64* @rcx, align 8
  %v2_30954 = add i64 %v0_3094d, 8
  %v3_30954 = inttoptr i64 %v2_30954 to i64*
  store i64 %v0_3094a, i64* %v3_30954, align 8
  %v0_3095d = load i64, i64* @rbx, align 8
  %v1_3095d = add i64 %v0_3095d, 20
  %v2_3095d = inttoptr i64 %v1_3095d to i32*
  %v3_3095d = load i32, i32* %v2_3095d, align 4
  %v4_3095d = zext i32 %v3_3095d to i64
  store i64 %v4_3095d, i64* @rdi, align 8
  %v1_30960 = add i64 %v0_3095d, 16
  %v2_30960 = inttoptr i64 %v1_30960 to i32*
  %v3_30960 = load i32, i32* %v2_30960, align 4
  %v4_30960 = zext i32 %v3_30960 to i64
  store i64 %v4_30960, i64* @rdx, align 8
  %v1_30963 = add i64 %v0_3095d, 8
  %v2_30963 = inttoptr i64 %v1_30963 to i64*
  %v3_30963 = load i64, i64* %v2_30963, align 8
  store i64 %v3_30963, i64* @rax, align 8
  br label %dec_label_pc_30967

dec_label_pc_30967:                               ; preds = %dec_label_pc_309cd, %dec_label_pc_30910, %dec_label_pc_309b0
  %v2_3096f = phi i64 [ %v0_3098e, %dec_label_pc_309cd ], [ %v0_3095d, %dec_label_pc_30910 ], [ %v0_3098e, %dec_label_pc_309b0 ]
  %v2_30969 = phi i64 [ %v3_3099b, %dec_label_pc_309cd ], [ %v3_30963, %dec_label_pc_30910 ], [ %v3_3099b, %dec_label_pc_309b0 ]
  %v0_3096c = phi i64 [ %v4_309a2, %dec_label_pc_309cd ], [ %v4_30960, %dec_label_pc_30910 ], [ %v4_309a2, %dec_label_pc_309b0 ]
  %v0_30967 = phi i32 [ %v3_3099f, %dec_label_pc_309cd ], [ %v3_3095d, %dec_label_pc_30910 ], [ %v3_3099f, %dec_label_pc_309b0 ]
  %v3_30967 = trunc i64 %v0_3096c to i32
  %v4_30967 = add i32 %v3_30967, %v0_30967
  %v20_30967 = zext i32 %v4_30967 to i64
  store i64 %v20_30967, i64* @rdi, align 8
  %v3_30969 = add i64 %v2_30969, 8
  %v4_30969 = inttoptr i64 %v3_30969 to i32*
  %v5_30969 = load i32, i32* %v4_30969, align 4
  %v11_30969 = icmp ult i32 %v4_30967, %v5_30969
  %v1_3096c = add nuw nsw i64 %v0_3096c, 1
  store i64 %v1_3096c, i64* @rcx, align 8
  %v1_3096f = trunc i64 %v1_3096c to i32
  %v3_3096f = add i64 %v2_3096f, 16
  %v4_3096f = inttoptr i64 %v3_3096f to i32*
  store i32 %v1_3096f, i32* %v4_3096f, align 4
  %v1_30972 = icmp eq i1 %v11_30969, false
  br i1 %v1_30972, label %bb260, label %dec_label_pc_30967.dec_label_pc_30978_crit_edge

dec_label_pc_30967.dec_label_pc_30978_crit_edge:  ; preds = %dec_label_pc_30967
  %v0_3097e.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_30978

bb260:                                            ; preds = %dec_label_pc_30967
  %v2_30972 = call i64 @function_30d66()
  store i64 %v2_30972, i64* @rax, align 8
  br label %dec_label_pc_30978

dec_label_pc_30978:                               ; preds = %dec_label_pc_30967.dec_label_pc_30978_crit_edge, %bb260
  %v0_3097e = phi i64 [ %v0_3097e.pre, %dec_label_pc_30967.dec_label_pc_30978_crit_edge ], [ %v2_30972, %bb260 ]
  %v0_30978 = load i64, i64* %rbp.global-to-local, align 8
  %v2_30978 = add i64 %v0_30978, 4294967295
  %v17_30978 = and i64 %v2_30978, 4294967295
  store i64 %v17_30978, i64* %rbp.global-to-local, align 8
  %v1_3097e = load i64, i64* @rdi, align 8
  %v3_3097e = add i64 %v0_3097e, 12
  %v4_3097e = add i64 %v3_3097e, %v1_3097e
  %v5_3097e = inttoptr i64 %v4_3097e to i8*
  store i8 48, i8* %v5_3097e, align 1
  %v0_30983 = load i64, i64* %rbp.global-to-local, align 8
  %v1_30983 = add i64 %v0_30983, 1
  store i64 %v1_30983, i64* @rax, align 8
  %v4_30986 = trunc i64 %v1_30983 to i32
  %tmp261 = icmp slt i32 %v4_30986, 1
  br i1 %tmp261, label %bb262, label %dec_label_pc_3098e

bb262:                                            ; preds = %dec_label_pc_30978
  %v5_30988 = call i64 @function_30cc0()
  store i64 %v5_30988, i64* @rax, align 8
  br label %dec_label_pc_3098e

dec_label_pc_3098e:                               ; preds = %bb262, %dec_label_pc_30978, %dec_label_pc_30906
  %v0_3098e = load i64, i64* @rbx, align 8
  %v1_3098e = add i64 %v0_3098e, 24
  %v2_3098e = inttoptr i64 %v1_3098e to i64*
  %v3_3098e = load i64, i64* %v2_3098e, align 8
  store i64 %v3_3098e, i64* @rdi, align 8
  %v1_30992 = icmp eq i64 %v3_3098e, 0
  %v1_30995 = icmp eq i1 %v1_30992, false
  br i1 %v1_30995, label %dec_label_pc_30910, label %dec_label_pc_3099b

dec_label_pc_3099b:                               ; preds = %dec_label_pc_3098e
  %v1_3099b = add i64 %v0_3098e, 8
  %v2_3099b = inttoptr i64 %v1_3099b to i64*
  %v3_3099b = load i64, i64* %v2_3099b, align 8
  store i64 %v3_3099b, i64* @rax, align 8
  %v1_3099f = add i64 %v0_3098e, 20
  %v2_3099f = inttoptr i64 %v1_3099f to i32*
  %v3_3099f = load i32, i32* %v2_3099f, align 4
  %v4_3099f = zext i32 %v3_3099f to i64
  store i64 %v4_3099f, i64* @rdi, align 8
  %v1_309a2 = add i64 %v0_3098e, 16
  %v2_309a2 = inttoptr i64 %v1_309a2 to i32*
  %v3_309a2 = load i32, i32* %v2_309a2, align 4
  %v4_309a2 = zext i32 %v3_309a2 to i64
  store i64 %v4_309a2, i64* @rdx, align 8
  %v1_309a5 = add i64 %v3_3099b, 8
  %v2_309a5 = inttoptr i64 %v1_309a5 to i32*
  %v3_309a5 = load i32, i32* %v2_309a5, align 4
  %v4_309a5 = zext i32 %v3_309a5 to i64
  store i64 %v4_309a5, i64* @rcx, align 8
  %v3_309a8 = add nuw nsw i64 %v4_309a2, 1
  %v4_309a8 = add nuw nsw i64 %v3_309a8, %v4_3099f
  store i64 %v4_309a8, i64* %rsi.global-to-local, align 8
  %v8_309ae = icmp ugt i64 %v4_309a8, %v4_309a5
  br i1 %v8_309ae, label %dec_label_pc_309b4, label %dec_label_pc_309b0

dec_label_pc_309b0:                               ; preds = %dec_label_pc_3099b
  %v6_309b0 = icmp slt i32 %v3_3099f, 0
  %v1_309b2 = icmp eq i1 %v6_309b0, false
  br i1 %v1_309b2, label %dec_label_pc_30967, label %dec_label_pc_309b4

dec_label_pc_309b4:                               ; preds = %dec_label_pc_309b0, %dec_label_pc_3099b
  %v1_309bd = trunc i64 %v3_309a8 to i32
  %v9_309c1 = icmp sgt i32 %v1_309bd, 31
  br i1 %v9_309c1, label %dec_label_pc_309c3, label %dec_label_pc_309cd

dec_label_pc_309c3:                               ; preds = %dec_label_pc_309b4
  %v3_309c3 = mul nuw nsw i64 %v4_309a2, 2
  %v1_309c6 = trunc i64 %v3_309c3 to i32
  %v4_309c6 = sub i32 %v1_309c6, %v1_309bd
  %v10_309c63 = xor i64 %v3_309a8, %v3_309c3
  %v10_309c6 = trunc i64 %v10_309c63 to i32
  %v11_309c6 = xor i32 %v4_309c6, %v1_309c6
  %v12_309c6 = and i32 %v11_309c6, %v10_309c6
  %v13_309c6 = icmp slt i32 %v12_309c6, 0
  %v15_309c6 = icmp slt i32 %v4_309c6, 0
  %v2_309c9 = icmp ne i1 %v15_309c6, %v13_309c6
  %v7_309c9.v = select i1 %v2_309c9, i64 %v3_309a8, i64 %v3_309c3
  %v8_309c9 = and i64 %v7_309c9.v, 4294967295
  br label %dec_label_pc_309cd

dec_label_pc_309cd:                               ; preds = %dec_label_pc_309b4, %dec_label_pc_309c3
  %storemerge = phi i64 [ %v8_309c9, %dec_label_pc_309c3 ], [ 32, %dec_label_pc_309b4 ]
  %v2_309cd = phi i64 [ %v8_309c9, %dec_label_pc_309c3 ], [ 32, %dec_label_pc_309b4 ]
  store i64 %storemerge, i64* %rsi.global-to-local, align 8
  %v3_309cd = trunc i64 %v2_309cd to i32
  %v14_309cd = icmp eq i32 %v3_309a5, %v3_309cd
  br i1 %v14_309cd, label %dec_label_pc_30967, label %dec_label_pc_309d1

dec_label_pc_309d1:                               ; preds = %dec_label_pc_309cd
  ret i64 %v3_3099b
}

define i64 @function_30a0f(i64 %arg1) local_unnamed_addr {
dec_label_pc_30a0f:
  store i64 %arg1, i64* @rdi, align 8
  %v1_30a0f = add i64 %arg1, 20
  %v2_30a0f = inttoptr i64 %v1_30a0f to i32*
  %v3_30a0f = load i32, i32* %v2_30a0f, align 4
  %v5_30a13 = icmp eq i32 %v3_30a0f, 0
  %v1_30a16 = icmp eq i1 %v5_30a13, false
  br i1 %v1_30a16, label %bb, label %dec_label_pc_30a1c

bb:                                               ; preds = %dec_label_pc_30a0f
  %v2_30a16 = call i64 @function_30c90()
  store i64 %v2_30a16, i64* @rax, align 8
  br label %dec_label_pc_30a1c

dec_label_pc_30a1c:                               ; preds = %bb, %dec_label_pc_30a0f
  %v0_30a1c = load i64, i64* inttoptr (i64 199203 to i64*), align 8
  %v1_30a23 = icmp eq i64 %v0_30a1c, 0
  br i1 %v1_30a23, label %bb2, label %dec_label_pc_30a1c.dec_label_pc_30a2c_crit_edge

dec_label_pc_30a1c.dec_label_pc_30a2c_crit_edge:  ; preds = %dec_label_pc_30a1c
  %v0_30a3a.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_30a2c

bb2:                                              ; preds = %dec_label_pc_30a1c
  %v1_30a26 = call i64 @function_30cc9()
  store i64 %v1_30a26, i64* @rax, align 8
  br label %dec_label_pc_30a2c

dec_label_pc_30a2c:                               ; preds = %dec_label_pc_30a1c.dec_label_pc_30a2c_crit_edge, %bb2
  %v0_30a3a = phi i64 [ %v0_30a3a.pre, %dec_label_pc_30a1c.dec_label_pc_30a2c_crit_edge ], [ %v1_30a26, %bb2 ]
  store i64 %v0_30a1c, i64* @rdi, align 8
  ret i64 %v0_30a3a
}

define i64 @function_30a40() local_unnamed_addr {
dec_label_pc_30a40:
  %v0_30a46 = load i64, i64* @rax, align 8
  store i64 %v0_30a46, i64* @rdx, align 8
  ret i64 %v0_30a46
}

define i64 @function_30a58(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_30a58:
  store i64 %arg1, i64* @rdi, align 8
  %v0_30a58 = load i64, i64* @r12, align 8
  %v1_30a58 = add i64 %v0_30a58, 11
  %v2_30a58 = inttoptr i64 %v1_30a58 to i8*
  %v3_30a58 = load i8, i8* %v2_30a58, align 1
  %v10_30a58 = icmp eq i8 %v3_30a58, 0
  br i1 %v10_30a58, label %bb, label %dec_label_pc_30a64

bb:                                               ; preds = %dec_label_pc_30a58
  %v2_30a5e = call i64 @function_30d27(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_30a5e, i64* @rax, align 8
  br label %dec_label_pc_30a64

dec_label_pc_30a64:                               ; preds = %bb, %dec_label_pc_30a58
  %v0_30a64 = load i64, i64* @rbx, align 8
  %v1_30a64 = icmp eq i64 %v0_30a64, 0
  br i1 %v1_30a64, label %bb7, label %dec_label_pc_30a6d

bb7:                                              ; preds = %dec_label_pc_30a64
  %v1_30a67 = call i64 @function_30cc9()
  store i64 %v1_30a67, i64* @rax, align 8
  %v0_30a74.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_30a6d

dec_label_pc_30a6d:                               ; preds = %bb7, %dec_label_pc_30a64
  %v2_30a8c = phi i64 [ %v0_30a74.pre, %bb7 ], [ %v0_30a64, %dec_label_pc_30a64 ]
  store i64 1, i64* @rdx, align 8
  store i64 %v2_30a8c, i64* @rdi, align 8
  %v1_30a7c = add i64 %v2_30a8c, 16
  %v2_30a7c = inttoptr i64 %v1_30a7c to i32*
  %v3_30a7c = load i32, i32* %v2_30a7c, align 4
  %v4_30a7c = zext i32 %v3_30a7c to i64
  store i64 %v4_30a7c, i64* @rdi, align 8
  %v1_30a7f = add i64 %v2_30a8c, 8
  %v2_30a7f = inttoptr i64 %v1_30a7f to i64*
  %v3_30a7f = load i64, i64* %v2_30a7f, align 8
  store i64 %v3_30a7f, i64* @rax, align 8
  %v1_30a83 = add nuw nsw i64 %v4_30a7c, 1
  store i64 %v1_30a83, i64* @rdx, align 8
  %v3_30a86 = add i64 %v2_30a8c, 20
  %v4_30a86 = inttoptr i64 %v3_30a86 to i32*
  %v5_30a86 = load i32, i32* %v4_30a86, align 4
  %v6_30a86 = add i32 %v5_30a86, %v3_30a7c
  %v22_30a86 = zext i32 %v6_30a86 to i64
  store i64 %v22_30a86, i64* @rdi, align 8
  %v3_30a89 = add i64 %v3_30a7f, 8
  %v4_30a89 = inttoptr i64 %v3_30a89 to i32*
  %v5_30a89 = load i32, i32* %v4_30a89, align 4
  %v11_30a89 = icmp ult i32 %v6_30a86, %v5_30a89
  %v1_30a8c = trunc i64 %v1_30a83 to i32
  store i32 %v1_30a8c, i32* %v2_30a7c, align 4
  %v1_30a8f = icmp eq i1 %v11_30a89, false
  br i1 %v1_30a8f, label %bb8, label %dec_label_pc_30a6d.dec_label_pc_30a95_crit_edge

dec_label_pc_30a6d.dec_label_pc_30a95_crit_edge:  ; preds = %dec_label_pc_30a6d
  %v0_30a9c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_30a95

bb8:                                              ; preds = %dec_label_pc_30a6d
  %v2_30a8f = call i64 @function_30d66()
  store i64 %v2_30a8f, i64* @rax, align 8
  br label %dec_label_pc_30a95

dec_label_pc_30a95:                               ; preds = %dec_label_pc_30a6d.dec_label_pc_30a95_crit_edge, %bb8
  %v0_30a9c = phi i64 [ %v0_30a9c.pre, %dec_label_pc_30a6d.dec_label_pc_30a95_crit_edge ], [ %v2_30a8f, %bb8 ]
  store i64 %arg3, i64* @rdx, align 8
  %v1_30a9c = load i64, i64* @rdi, align 8
  %v3_30a9c = add i64 %v0_30a9c, 12
  %v4_30a9c = add i64 %v3_30a9c, %v1_30a9c
  %v5_30a9c = inttoptr i64 %v4_30a9c to i8*
  store i8 32, i8* %v5_30a9c, align 1
  %v0_30aa9 = load i64, i64* @rax, align 8
  ret i64 %v0_30aa9
}

define i64 @function_30ab0() local_unnamed_addr {
dec_label_pc_30ab0:
  %v0_30ab0 = load i64, i64* @r14, align 8
  store i64 %v0_30ab0, i64* @rdi, align 8
  %v1_30ab0 = load i64, i64* @rax, align 8
  ret i64 %v1_30ab0
}

define i64 @function_30b58(i64 %arg1) local_unnamed_addr {
dec_label_pc_30b58:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_30bae(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_30bae:
  store i64 %arg3, i64* @rdx, align 8
  %v1_30bae = trunc i64 %arg1 to i32
  %v3_30bae = trunc i64 %arg3 to i32
  %v4_30bae = add i32 %v3_30bae, %v1_30bae
  %v20_30bae = zext i32 %v4_30bae to i64
  store i64 %v20_30bae, i64* @rdi, align 8
  %v2_30bb0 = load i64, i64* @rax, align 8
  %v3_30bb0 = add i64 %v2_30bb0, 8
  %v4_30bb0 = inttoptr i64 %v3_30bb0 to i32*
  %v5_30bb0 = load i32, i32* %v4_30bb0, align 4
  %v11_30bb0 = icmp ult i32 %v4_30bae, %v5_30bb0
  %v1_30bb3 = add i64 %arg3, 1
  store i64 %v1_30bb3, i64* @rcx, align 8
  %v1_30bb6 = trunc i64 %v1_30bb3 to i32
  %v2_30bb6 = load i64, i64* @rbx, align 8
  %v3_30bb6 = add i64 %v2_30bb6, 16
  %v4_30bb6 = inttoptr i64 %v3_30bb6 to i32*
  store i32 %v1_30bb6, i32* %v4_30bb6, align 4
  %v1_30bb9 = icmp eq i1 %v11_30bb0, false
  br i1 %v1_30bb9, label %bb, label %dec_label_pc_30bae.dec_label_pc_30bbf_crit_edge

dec_label_pc_30bae.dec_label_pc_30bbf_crit_edge:  ; preds = %dec_label_pc_30bae
  %v0_30bca.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_30bbf

bb:                                               ; preds = %dec_label_pc_30bae
  %v2_30bb9 = call i64 @function_30d66()
  store i64 %v2_30bb9, i64* @rax, align 8
  br label %dec_label_pc_30bbf

dec_label_pc_30bbf:                               ; preds = %dec_label_pc_30bae.dec_label_pc_30bbf_crit_edge, %bb
  %v0_30bca = phi i64 [ %v0_30bca.pre, %dec_label_pc_30bae.dec_label_pc_30bbf_crit_edge ], [ %v2_30bb9, %bb ]
  %v0_30bbf = load i64, i64* @r12, align 8
  %v2_30bbf = add i64 %v0_30bbf, 4294967295
  %v17_30bbf = and i64 %v2_30bbf, 4294967295
  store i64 %v17_30bbf, i64* @r12, align 8
  %v1_30bca = load i64, i64* @rdi, align 8
  %v3_30bca = add i64 %v0_30bca, 12
  %v4_30bca = add i64 %v3_30bca, %v1_30bca
  %v5_30bca = inttoptr i64 %v4_30bca to i8*
  store i8 32, i8* %v5_30bca, align 1
  %v0_30bcf = load i64, i64* @rax, align 8
  ret i64 %v0_30bcf
}

define i64 @function_30bd5() local_unnamed_addr {
dec_label_pc_30bd5:
  %rbp.global-to-local = alloca i64, align 8
  %v0_30bd5 = load i64, i64* @rbx, align 8
  %v1_30bd5 = add i64 %v0_30bd5, 24
  %v2_30bd5 = inttoptr i64 %v1_30bd5 to i64*
  %v3_30bd5 = load i64, i64* %v2_30bd5, align 8
  store i64 %v3_30bd5, i64* @rdi, align 8
  %v1_30bd9 = icmp eq i64 %v3_30bd5, 0
  %v1_30bdc = icmp eq i1 %v1_30bd9, false
  br i1 %v1_30bdc, label %bb, label %dec_label_pc_30be2

bb:                                               ; preds = %dec_label_pc_30bd5
  %v3_30bdc = call i64 @function_30b58(i64 %v3_30bd5)
  store i64 %v3_30bdc, i64* @rax, align 8
  %v0_30be2.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_30be2

dec_label_pc_30be2:                               ; preds = %bb, %dec_label_pc_30bd5
  %v0_30be9 = phi i64 [ %v0_30be2.pre, %bb ], [ %v0_30bd5, %dec_label_pc_30bd5 ]
  %v1_30be2 = add i64 %v0_30be9, 8
  %v2_30be2 = inttoptr i64 %v1_30be2 to i64*
  %v3_30be2 = load i64, i64* %v2_30be2, align 8
  store i64 %v3_30be2, i64* @rax, align 8
  %v1_30be6 = add i64 %v0_30be9, 20
  %v2_30be6 = inttoptr i64 %v1_30be6 to i32*
  %v3_30be6 = load i32, i32* %v2_30be6, align 4
  %v4_30be6 = zext i32 %v3_30be6 to i64
  store i64 %v4_30be6, i64* @rdi, align 8
  %v1_30be9 = add i64 %v0_30be9, 16
  %v2_30be9 = inttoptr i64 %v1_30be9 to i32*
  %v3_30be9 = load i32, i32* %v2_30be9, align 4
  %v4_30be9 = zext i32 %v3_30be9 to i64
  store i64 %v4_30be9, i64* @rdx, align 8
  %v1_30bec = add i64 %v3_30be2, 8
  %v2_30bec = inttoptr i64 %v1_30bec to i32*
  %v3_30bec = load i32, i32* %v2_30bec, align 4
  %v4_30bec = zext i32 %v3_30bec to i64
  store i64 %v4_30bec, i64* @rcx, align 8
  %v2_30bef = sext i32 %v3_30be6 to i64
  %v4_30bef = add nuw nsw i64 %v4_30be9, 1
  %v5_30bef = add nsw i64 %v4_30bef, %v2_30bef
  %sext = mul i64 %v5_30bef, 4294967296
  %v7_30bf5 = sdiv i64 %sext, 4294967296
  %v9_30bf5 = icmp sgt i64 %v7_30bf5, %v4_30bec
  br i1 %v9_30bf5, label %dec_label_pc_30bfb, label %dec_label_pc_30bf7

dec_label_pc_30bf7:                               ; preds = %dec_label_pc_30be2
  %v8_30bf7 = icmp slt i32 %v3_30be6, 0
  %v1_30bf9 = icmp eq i1 %v8_30bf7, false
  br i1 %v1_30bf9, label %bb261, label %dec_label_pc_30bfb

bb261:                                            ; preds = %dec_label_pc_30bf7
  %v7_30bf9 = call i64 @function_30bae(i64 %v2_30bef, i64 %v7_30bf5, i64 %v4_30be9)
  store i64 %v7_30bf9, i64* @rax, align 8
  br label %dec_label_pc_30bfb

dec_label_pc_30bfb:                               ; preds = %bb261, %dec_label_pc_30bf7, %dec_label_pc_30be2
  %v1_30c04 = trunc i64 %v4_30bef to i32
  %v9_30c08 = icmp sgt i32 %v1_30c04, 31
  br i1 %v9_30c08, label %dec_label_pc_30c0a, label %dec_label_pc_30c14

dec_label_pc_30c0a:                               ; preds = %dec_label_pc_30bfb
  %v3_30c0a = mul nuw nsw i64 %v4_30be9, 2
  %v1_30c0d = trunc i64 %v3_30c0a to i32
  %v4_30c0d = sub i32 %v1_30c0d, %v1_30c04
  %v10_30c0d2 = xor i64 %v4_30bef, %v3_30c0a
  %v10_30c0d = trunc i64 %v10_30c0d2 to i32
  %v11_30c0d = xor i32 %v4_30c0d, %v1_30c0d
  %v12_30c0d = and i32 %v11_30c0d, %v10_30c0d
  %v13_30c0d = icmp slt i32 %v12_30c0d, 0
  %v15_30c0d = icmp slt i32 %v4_30c0d, 0
  %v2_30c10 = icmp ne i1 %v15_30c0d, %v13_30c0d
  %v7_30c10.v = select i1 %v2_30c10, i64 %v4_30bef, i64 %v3_30c0a
  %v8_30c10 = and i64 %v7_30c10.v, 4294967295
  br label %dec_label_pc_30c14

dec_label_pc_30c14:                               ; preds = %dec_label_pc_30bfb, %dec_label_pc_30c0a
  %v3_30c16 = phi i64 [ 32, %dec_label_pc_30bfb ], [ %v8_30c10, %dec_label_pc_30c0a ]
  %v0_30c14 = load i64, i64* @rcx, align 8
  %v1_30c14 = trunc i64 %v0_30c14 to i32
  %v3_30c14 = trunc i64 %v3_30c16 to i32
  %v14_30c14 = icmp eq i32 %v1_30c14, %v3_30c14
  br i1 %v14_30c14, label %bb263, label %dec_label_pc_30c18

bb263:                                            ; preds = %dec_label_pc_30c14
  %v5_30c16 = call i64 @function_30bae(i64 %v2_30bef, i64 %v3_30c16, i64 %v4_30be9)
  store i64 %v5_30c16, i64* @rax, align 8
  br label %dec_label_pc_30c18

dec_label_pc_30c18:                               ; preds = %bb263, %dec_label_pc_30c14
  store i64 199711, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_30c26 = load i64, i64* @rbx, align 8
  %v1_30c26 = add i64 %v0_30c26, 8
  %v2_30c26 = inttoptr i64 %v1_30c26 to i64*
  %v3_30c26 = load i64, i64* %v2_30c26, align 8
  store i64 %v3_30c26, i64* @rdi, align 8
  %v1_30c2a = add i64 %v0_30c26, 20
  %v2_30c2a = inttoptr i64 %v1_30c2a to i32*
  %v3_30c2a = load i32, i32* %v2_30c2a, align 4
  %v4_30c2a = zext i32 %v3_30c2a to i64
  store i64 0, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rcx, align 8
  store i64 0, i64* %v2_30c26, align 8
  %v0_30c42 = load i64, i64* @rbx, align 8
  %v1_30c42 = add i64 %v0_30c42, 20
  %v2_30c42 = inttoptr i64 %v1_30c42 to i32*
  store i32 0, i32* %v2_30c42, align 4
  store i64 0, i64* @rdi, align 8
  %v0_30c4b = load i64, i64* @rbx, align 8
  %v1_30c4b = add i64 %v0_30c4b, 16
  %v2_30c4b = inttoptr i64 %v1_30c4b to i32*
  %v3_30c4b = load i32, i32* %v2_30c4b, align 4
  %v4_30c4b = zext i32 %v3_30c4b to i64
  store i64 %v4_30c4b, i64* @rdx, align 8
  %v0_30c4e = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_30c4e, i64* @rax, align 8
  %v3_30c51 = call i64 @function_30bae(i64 0, i64 %v4_30c2a, i64 %v4_30c4b)
  store i64 %v3_30c51, i64* @rax, align 8
  ret i64 %v3_30c51
}

define i64 @function_30c60() local_unnamed_addr {
dec_label_pc_30c60:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_30c80() local_unnamed_addr {
dec_label_pc_30c80:
  %v0_30c80 = load i64, i64* @rax, align 8
  store i64 %v0_30c80, i64* @rdx, align 8
  %v2_30c82 = add i64 %v0_30c80, 4294967295
  %v17_30c82 = and i64 %v2_30c82, 4294967295
  store i64 %v17_30c82, i64* @rax, align 8
  ret i64 %v17_30c82
}

define i64 @function_30c90() local_unnamed_addr {
dec_label_pc_30c90:
  %v0_30c93 = load i64, i64* @rax, align 8
  ret i64 %v0_30c93
}

define i64 @function_30ca0() local_unnamed_addr {
dec_label_pc_30ca0:
  %v0_30ca5 = load i64, i64* @rax, align 8
  ret i64 %v0_30ca5
}

define i64 @function_30cb0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_30cb0:
  store i64 %arg1, i64* @rbx, align 8
  %v0_30cbe = load i64, i64* @rax, align 8
  ret i64 %v0_30cbe
}

define i64 @function_30cc0() local_unnamed_addr {
dec_label_pc_30cc0:
  %v0_30cc3 = load i64, i64* @rax, align 8
  ret i64 %v0_30cc3
}

define i64 @function_30cc9() local_unnamed_addr {
dec_label_pc_30cc9:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_30ce0(i64 %arg1) local_unnamed_addr {
dec_label_pc_30ce0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* %rbp.global-to-local, align 8
  %v4_30ce4 = trunc i64 %arg1 to i32
  %tmp6 = icmp slt i32 %v4_30ce4, 1
  br i1 %tmp6, label %bb, label %dec_label_pc_30ce8

bb:                                               ; preds = %dec_label_pc_30ce0
  %v5_30ce6 = call i64 @function_30d2f()
  store i64 %v5_30ce6, i64* @rax, align 8
  br label %dec_label_pc_30ce8

dec_label_pc_30ce8:                               ; preds = %bb, %dec_label_pc_30ce0
  %v0_30ce8 = load i64, i64* @rbx, align 8
  %v1_30ce8 = icmp eq i64 %v0_30ce8, 0
  br i1 %v1_30ce8, label %bb7, label %dec_label_pc_30ce8.dec_label_pc_30ced_crit_edge

dec_label_pc_30ce8.dec_label_pc_30ced_crit_edge:  ; preds = %dec_label_pc_30ce8
  %v0_30d0a.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_30ced

bb7:                                              ; preds = %dec_label_pc_30ce8
  %v1_30ceb = call i64 @function_30cc9()
  store i64 %v1_30ceb, i64* @rax, align 8
  br label %dec_label_pc_30ced

dec_label_pc_30ced:                               ; preds = %dec_label_pc_30ce8.dec_label_pc_30ced_crit_edge, %bb7
  %v0_30d0a = phi i64 [ %v1_30ceb, %bb7 ], [ %v0_30d0a.pre, %dec_label_pc_30ce8.dec_label_pc_30ced_crit_edge ]
  %v0_30cf5 = load i64, i64* %rbp.global-to-local, align 8
  %v2_30cf5 = add i64 %v0_30cf5, 4294967295
  %v17_30cf5 = and i64 %v2_30cf5, 4294967295
  store i64 %v17_30cf5, i64* %rbp.global-to-local, align 8
  %v0_30cfd = load i64, i64* @r14, align 8
  store i64 %v0_30cfd, i64* @rdi, align 8
  store i64 1, i64* @rsi, align 8
  store i64 %v0_30d0a, i64* @r14, align 8
  ret i64 %v0_30d0a
}

define i64 @function_30d12() local_unnamed_addr {
dec_label_pc_30d12:
  %v0_30d12 = load i64, i64* @rax, align 8
  %v1_30d12 = icmp eq i64 %v0_30d12, 0
  br i1 %v1_30d12, label %bb, label %dec_label_pc_30d17

bb:                                               ; preds = %dec_label_pc_30d12
  %v1_30d15 = call i64 @function_30cc9()
  store i64 %v1_30d15, i64* @rax, align 8
  br label %dec_label_pc_30d17

dec_label_pc_30d17:                               ; preds = %bb, %dec_label_pc_30d12
  %v0_30d17 = phi i64 [ %v1_30d15, %bb ], [ %v0_30d12, %dec_label_pc_30d12 ]
  store i64 %v0_30d17, i64* @rdi, align 8
  ret i64 %v0_30d17
}

define i64 @function_30d27(i64 %arg1) local_unnamed_addr {
dec_label_pc_30d27:
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_30d2f() local_unnamed_addr {
dec_label_pc_30d2f:
  %v0_30d2f = load i64, i64* @rbx, align 8
  %v1_30d2f = icmp eq i64 %v0_30d2f, 0
  %v1_30d32 = icmp eq i1 %v1_30d2f, false
  br i1 %v1_30d32, label %bb, label %dec_label_pc_30d38

bb:                                               ; preds = %dec_label_pc_30d2f
  %v2_30d32 = call i64 @function_30ab0()
  store i64 %v2_30d32, i64* @rax, align 8
  br label %dec_label_pc_30d38

dec_label_pc_30d38:                               ; preds = %bb, %dec_label_pc_30d2f
  %v0_30d38 = call i64 @function_30cc9()
  store i64 %v0_30d38, i64* @rax, align 8
  ret i64 %v0_30d38
}

define i64 @function_30d40(i32 %arg1) local_unnamed_addr {
dec_label_pc_30d40:
  %v0_30d50 = call i64 @function_30cc9()
  store i64 %v0_30d50, i64* @rax, align 8
  ret i64 %v0_30d50
}

define i64 @function_30d58(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_30d58:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_30d58 = load i64, i64* @r13, align 8
  %v2_30d5b = load i64, i64* @rdx, align 8
  %v4_30d5b = sub i64 %v0_30d58, %v2_30d5b
  %v20_30d5b = and i64 %v4_30d5b, 4294967295
  store i64 %v20_30d5b, i64* @rax, align 8
  ret i64 %v20_30d5b
}

define i64 @function_30d66() local_unnamed_addr {
dec_label_pc_30d66:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable10hashRemoveEJvPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_30d70:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_30d70 = load i64, i64* @rdi, align 8
  %v1_30d70 = add i64 %v0_30d70, 16
  %v2_30d70 = inttoptr i64 %v1_30d70 to i64*
  %v3_30d70 = load i64, i64* %v2_30d70, align 8
  store i64 %v3_30d70, i64* @rax, align 8
  %v1_30d74 = add i64 %v3_30d70, 8
  %v2_30d74 = inttoptr i64 %v1_30d74 to i32*
  %v3_30d74 = load i32, i32* %v2_30d74, align 4
  %v4_30d74 = zext i32 %v3_30d74 to i64
  store i64 %v4_30d74, i64* @rax, align 8
  %tmp258 = icmp slt i32 %v3_30d74, 1
  br i1 %tmp258, label %dec_label_pc_30f18, label %dec_label_pc_30d7f

dec_label_pc_30d7f:                               ; preds = %dec_label_pc_30d70
  %v0_30d7f = load i64, i64* %r15.global-to-local, align 8
  %v0_30d81 = load i64, i64* %r14.global-to-local, align 8
  %v0_30d83 = load i64, i64* %r13.global-to-local, align 8
  %v0_30d85 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_30d70, i64* %r13.global-to-local, align 8
  %v0_30d8a = load i64, i64* %rbp.global-to-local, align 8
  %v0_30d8b = load i64, i64* @rbx, align 8
  %v0_30d93 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_30d93, i64* %r12.global-to-local, align 8
  %v1_30d96 = add nsw i64 %v4_30d74, -1
  store i64 %v1_30d96, i64* @rbx, align 8
  store i64 %v0_30d93, i64* @rax, align 8
  store i64 %v0_30d93, i64* @rdi, align 8
  %v1_30db1 = trunc i64 %v0_30d93 to i32
  %tmp263 = icmp ult i32 %v1_30db1, 9
  br i1 %tmp263, label %dec_label_pc_30ed0, label %dec_label_pc_30dba

dec_label_pc_30dba:                               ; preds = %bb261, %dec_label_pc_30d7f
  store i64 200139, i64* @rdi, align 8
  store i64 %v0_30d93, i64* %r14.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v4_30dd03 = and i64 %v0_30d93, %v1_30d96
  %v11_30dd0 = and i64 %v4_30dd03, 4294967295
  br label %dec_label_pc_30dd8

dec_label_pc_30dd8:                               ; preds = %dec_label_pc_30ee6, %dec_label_pc_30dba
  %v0_30f2d = phi i64 [ %v6_30f0a, %dec_label_pc_30ee6 ], [ %v11_30dd0, %dec_label_pc_30dba ]
  store i64 %v0_30f2d, i64* %r14.global-to-local, align 8
  %v3_30dd8 = load i64, i64* %v2_30d70, align 8
  store i64 %v3_30dd8, i64* @rax, align 8
  %v1_30ddc = trunc i64 %v0_30f2d to i32
  %v3_30ddc = add i64 %v3_30dd8, 8
  %v4_30ddc = inttoptr i64 %v3_30ddc to i32*
  %v5_30ddc = load i32, i32* %v4_30ddc, align 4
  %v11_30ddc = icmp ult i32 %v1_30ddc, %v5_30ddc
  %v1_30de0 = icmp eq i1 %v11_30ddc, false
  br i1 %v1_30de0, label %dec_label_pc_30f19, label %dec_label_pc_30de6

dec_label_pc_30de6:                               ; preds = %dec_label_pc_30dd8
  %v2_30de9 = mul i64 %v0_30f2d, 8
  store i64 %v2_30de9, i64* %r15.global-to-local, align 8
  %v3_30ded = add i64 %v2_30de9, 16
  %v4_30ded = add i64 %v3_30ded, %v3_30dd8
  %v5_30ded = inttoptr i64 %v4_30ded to i64*
  %v6_30ded = load i64, i64* %v5_30ded, align 8
  store i64 %v6_30ded, i64* @rbx, align 8
  %v1_30df2 = icmp eq i64 %v6_30ded, 0
  br i1 %v1_30df2, label %dec_label_pc_30eb9, label %dec_label_pc_30dfb

dec_label_pc_30dfb:                               ; preds = %dec_label_pc_30de6
  store i64 200194, i64* %rbp.global-to-local, align 8
  store i64 3, i64* @rdx, align 8
  store i64 %v0_30d93, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rcx, align 8
  store i64 5, i64* @rdx, align 8
  store i64 200194, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v6_30ded, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_30eb9

dec_label_pc_30eb9:                               ; preds = %dec_label_pc_30dfb, %dec_label_pc_30de6
  %v0_30ec7 = phi i64 [ 0, %dec_label_pc_30dfb ], [ %v3_30dd8, %dec_label_pc_30de6 ]
  store i64 %v0_30d8b, i64* @rbx, align 8
  store i64 %v0_30d8a, i64* %rbp.global-to-local, align 8
  store i64 %v0_30d85, i64* %r12.global-to-local, align 8
  store i64 %v0_30d83, i64* %r13.global-to-local, align 8
  store i64 %v0_30d81, i64* %r14.global-to-local, align 8
  store i64 %v0_30d7f, i64* %r15.global-to-local, align 8
  ret i64 %v0_30ec7

dec_label_pc_30ed0:                               ; preds = %dec_label_pc_30d7f
  store i64 1, i64* @rdx, align 8
  store i64 %v0_30d93, i64* @rcx, align 8
  %v2_30ed7 = urem i64 %v0_30d93, 64
  %v4_30ed7 = icmp eq i64 %v2_30ed7, 0
  br i1 %v4_30ed7, label %bb261, label %bb

bb:                                               ; preds = %dec_label_pc_30ed0
  %v5_30ed7 = shl i64 1, %v2_30ed7
  store i64 %v5_30ed7, i64* @rdx, align 8
  %phitmp14 = and i64 %v5_30ed7, 428
  %phitmp262 = icmp eq i64 %phitmp14, 0
  br label %bb261

bb261:                                            ; preds = %dec_label_pc_30ed0, %bb
  %v0_30eda = phi i1 [ true, %dec_label_pc_30ed0 ], [ %phitmp262, %bb ]
  br i1 %v0_30eda, label %dec_label_pc_30dba, label %dec_label_pc_30ee6

dec_label_pc_30ee6:                               ; preds = %bb261
  store i64 200439, i64* @rdi, align 8
  store i64 %v0_30d93, i64* %r14.global-to-local, align 8
  %v2_30f04 = urem i32 %v1_30db1, -2147483648
  %v9_30f04 = zext i32 %v2_30f04 to i64
  %v5_30f0a = sdiv i64 %v9_30f04, %v1_30d96
  store i64 %v5_30f0a, i64* @rax, align 8
  %v6_30f0a = srem i64 %v9_30f04, %v1_30d96
  store i64 %v6_30f0a, i64* @rdx, align 8
  br label %dec_label_pc_30dd8

dec_label_pc_30f18:                               ; preds = %dec_label_pc_30d70
  ret i64 %v4_30d74

dec_label_pc_30f19:                               ; preds = %dec_label_pc_30dd8
  store i64 %v0_30f2d, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7valueOfEJPS2_P6JArrayIcEii.part.117(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_30f40:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_30f4a = load i64, i64* @rdi, align 8
  store i64 200534, i64* @rdi, align 8
  %v0_30f56 = load i64, i64* @rdx, align 8
  store i64 %v0_30f56, i64* @rbx, align 8
  %v0_30f58 = load i64, i64* %rsi.global-to-local, align 8
  %v1_30f66 = trunc i64 %v0_30f56 to i32
  %v3_30f66 = sdiv i32 %v1_30f66, 32
  %v10_30f66 = zext i32 %v3_30f66 to i64
  store i64 %v10_30f66, i64* %rsi.global-to-local, align 8
  %v1_30f69 = add nuw nsw i64 %v10_30f66, 1
  %v3_30f7e = add i64 %v0_30f56, -1
  %v4_30f7e = add i64 %v3_30f7e, %v0_30f58
  store i64 %v4_30f7e, i64* @rdi, align 8
  %v3_30f83 = sdiv i32 %v1_30f66, 4
  %v10_30f83 = zext i32 %v3_30f83 to i64
  store i64 %v10_30f83, i64* @rdx, align 8
  %v3_30f86 = mul i32 %v1_30f66, 32
  %v4_30f89 = add i32 %v3_30f83, %v3_30f86
  %v20_30f89 = zext i32 %v4_30f89 to i64
  store i64 %v20_30f89, i64* @rax, align 8
  %v1_30f8b = add i64 %v0_30f4a, 12
  %v3_30f9d = xor i64 %v10_30f66, 4294967295
  store i64 %v3_30f9d, i64* %rsi.global-to-local, align 8
  %v4_30f9f = sub i64 %v0_30f56, %v1_30f69
  %v20_30f9f = and i64 %v4_30f9f, 4294967295
  store i64 %v20_30f9f, i64* @rcx, align 8
  %v4_30fa7 = add i64 %v10_30f66, %v0_30f58
  store i64 %v4_30fa7, i64* @r11, align 8
  br label %dec_label_pc_30fce

dec_label_pc_30fb0:                               ; preds = %dec_label_pc_30fce
  %v11_30fd8 = zext i32 %v4_30fd8 to i64
  %v4_30fb4 = add nuw nsw i64 %v3_30f9d, %v0_30fb4
  %v20_30fb4 = and i64 %v4_30fb4, 4294967295
  store i64 %v20_30fb4, i64* @rcx, align 8
  %v3_30fb6 = mul i32 %v4_30fd8, 32
  %v3_30fb9 = sdiv i32 %v4_30fd8, 4
  %v4_30fbc = sub i64 %v0_30fbc, %v1_30f69
  %v20_30fbc = and i64 %v4_30fbc, 4294967295
  store i64 %v20_30fbc, i64* @rdi, align 8
  %v4_30fbf = add i32 %v3_30fb6, %v3_30fb9
  %v20_30fbf = zext i32 %v4_30fbf to i64
  store i64 %v20_30fbf, i64* @rax, align 8
  %v3_30fc1 = add i64 %v20_30fb4, %v4_30fa7
  store i64 %v3_30fc1, i64* @rdx, align 8
  br label %dec_label_pc_30fce

dec_label_pc_30fce:                               ; preds = %dec_label_pc_30fb0, %dec_label_pc_30f40
  %v0_30fb4 = phi i64 [ %v20_30fb4, %dec_label_pc_30fb0 ], [ %v20_30f9f, %dec_label_pc_30f40 ]
  %v0_30fd8 = phi i64 [ %v11_30fd8, %dec_label_pc_30fb0 ], [ %v0_30f56, %dec_label_pc_30f40 ]
  %v0_30fd6 = phi i32 [ %v4_30fbf, %dec_label_pc_30fb0 ], [ %v4_30f89, %dec_label_pc_30f40 ]
  %v0_30fbc = phi i64 [ %v20_30fbc, %dec_label_pc_30fb0 ], [ %v4_30f7e, %dec_label_pc_30f40 ]
  store i64 %v0_30fbc, i64* @rdx, align 8
  %v3_30fd1 = add i64 %v0_30fbc, %v1_30f8b
  %v4_30fd1 = inttoptr i64 %v3_30fd1 to i8*
  %v5_30fd1 = load i8, i8* %v4_30fd1, align 1
  %v6_30fd1 = zext i8 %v5_30fd1 to i64
  store i64 %v6_30fd1, i64* @rdx, align 8
  %v3_30fd6 = zext i8 %v5_30fd1 to i32
  %v4_30fd6 = add i32 %v3_30fd6, %v0_30fd6
  %v20_30fd6 = zext i32 %v4_30fd6 to i64
  store i64 %v20_30fd6, i64* @rax, align 8
  %v1_30fd8 = trunc i64 %v0_30fd8 to i32
  %v4_30fd8 = xor i32 %v4_30fd6, %v1_30fd8
  %v7_30fdd = icmp ugt i64 %v1_30f69, %v0_30fb4
  br i1 %v7_30fdd, label %dec_label_pc_30fdf, label %dec_label_pc_30fb0

dec_label_pc_30fdf:                               ; preds = %dec_label_pc_30fce
  store i64 200680, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_31119(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_31119:
  store i64 %arg1, i64* @rbx, align 8
  %v0_31127 = load i64, i64* @rax, align 8
  ret i64 %v0_31127
}

define i64 @function_31130(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_31130:
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_31130 = load i64, i64* @rbx, align 8
  %v2_31130 = load i64, i64* @rdx, align 8
  %v1_31139 = add i64 %v2_31130, 16
  %v2_31139 = inttoptr i64 %v1_31139 to i32*
  %v3_31139 = load i32, i32* %v2_31139, align 4
  %v4_31139 = zext i32 %v3_31139 to i64
  store i64 %v4_31139, i64* @rcx, align 8
  store i64 201027, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_31145 = add i64 %v2_31130, 8
  %v2_31145 = inttoptr i64 %v1_31145 to i64*
  %v3_31145 = load i64, i64* %v2_31145, align 8
  store i64 %v4_31139, i64* @rcx, align 8
  %v1_3115b = add i64 %v3_31145, 8
  %v2_3115b = inttoptr i64 %v1_3115b to i32*
  %v3_3115b = load i32, i32* %v2_3115b, align 4
  %v3_3115f = add i64 %v4_31139, %v0_31130
  store i64 %v3_3115f, i64* @rax, align 8
  %v0_3116b = load i64, i64* %r13.global-to-local, align 8
  %v1_3116b = add i64 %v0_3116b, 8
  %v2_3116b = inttoptr i64 %v1_3116b to i32*
  %v3_3116b = load i32, i32* %v2_3116b, align 4
  %v4_3116b = zext i32 %v3_3116b to i64
  store i64 %v4_3116b, i64* @r11, align 8
  %v0_3116f = load i64, i64* %r15.global-to-local, align 8
  store i64 %v4_31139, i64* @rax, align 8
  store i64 %v0_3116f, i64* @rdi, align 8
  store i64 %v0_31130, i64* @rcx, align 8
  br label %dec_label_pc_311b7

dec_label_pc_31190:                               ; preds = %dec_label_pc_311b7
  %v3_31190 = trunc i64 %v0_311a6 to i32
  %tmp255 = icmp ugt i32 %v3_3115b, %v3_31190
  br i1 %tmp255, label %dec_label_pc_31195, label %dec_label_pc_311d4

dec_label_pc_31195:                               ; preds = %dec_label_pc_31190
  %v3_31198 = trunc i64 %v0_311a9 to i32
  %tmp256 = icmp ugt i32 %v3_3116b, %v3_31198
  br i1 %tmp256, label %dec_label_pc_311a3, label %dec_label_pc_311cd

dec_label_pc_311a3:                               ; preds = %dec_label_pc_31195
  %v2_311a6 = add nuw nsw i64 %v0_311a6, 1
  %v17_311a6 = and i64 %v2_311a6, 4294967295
  store i64 %v17_311a6, i64* @rax, align 8
  %v2_311a9 = add i64 %v0_311a9, 1
  %v17_311a9 = and i64 %v2_311a9, 4294967295
  store i64 %v17_311a9, i64* @rdi, align 8
  br label %dec_label_pc_311b7

dec_label_pc_311b7:                               ; preds = %dec_label_pc_311a3, %dec_label_pc_31130
  %v0_311a9 = phi i64 [ %v17_311a9, %dec_label_pc_311a3 ], [ %v0_3116f, %dec_label_pc_31130 ]
  %v0_311a6 = phi i64 [ %v17_311a6, %dec_label_pc_311a3 ], [ %v4_31139, %dec_label_pc_31130 ]
  %v0_311b7 = phi i64 [ %v17_311b7, %dec_label_pc_311a3 ], [ %v0_31130, %dec_label_pc_31130 ]
  %v1_311b7 = trunc i64 %v0_311b7 to i32
  %v2_311b7 = add i32 %v1_311b7, -1
  %v12_311b7 = icmp slt i32 %v2_311b7, 0
  %v17_311b7 = zext i32 %v2_311b7 to i64
  store i64 %v17_311b7, i64* @rcx, align 8
  %v1_311ba = icmp eq i1 %v12_311b7, false
  br i1 %v1_311ba, label %dec_label_pc_31190, label %dec_label_pc_311bc

dec_label_pc_311bc:                               ; preds = %dec_label_pc_311b7
  store i64 %v2_31130, i64* @rax, align 8
  %v6_311bf = call i64 @function_31119(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_311bf, i64* @rax, align 8
  ret i64 %v6_311bf

dec_label_pc_311cd:                               ; preds = %dec_label_pc_31195
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_311d4

dec_label_pc_311d4:                               ; preds = %dec_label_pc_31190, %dec_label_pc_311cd
  %v0_311d4 = phi i64 [ 0, %dec_label_pc_311cd ], [ %v0_311a6, %dec_label_pc_31190 ]
  store i64 %v0_311d4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_311dd(i32 %arg1) local_unnamed_addr {
dec_label_pc_311dd:
  %v3_311dd = zext i32 %arg1 to i64
  store i64 %v3_311dd, i64* @rdi, align 8
  %v0_311e0 = load i64, i64* @rax, align 8
  ret i64 %v0_311e0
}

define i64 @_ZN3org4luaj3vm28LuaValue7valueOfEJPNS1_9LuaStringEP6JArrayIcE(i64 %arg1) local_unnamed_addr {
dec_label_pc_311f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 201228, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer8tostringEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_31310:
  store i64 %arg1, i64* @rdi, align 8
  %v0_31316 = load i64, i64* @rdi, align 8
  store i64 %v0_31316, i64* @rbx, align 8
  %v0_31329 = load i64, i64* @rax, align 8
  ret i64 %v0_31329
}

define i64 @"_ZN3org4luaj3vm23lib14StringLib$gsub6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_31470:
  store i64 %arg1, i64* @rdi, align 8
  store i64 1, i64* @rbx, align 8
  store i64 2, i64* @rdx, align 8
  store i64 202023, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_315e0(i64 %arg1) local_unnamed_addr {
dec_label_pc_315e0:
  %rsi.global-to-local = alloca i64, align 8
  %v5_315e0 = load i64, i64* @rbp, align 8
  %v2_315ea = load i64, i64* @r14, align 8
  store i64 %v2_315ea, i64* @rax, align 8
  store i64 %v5_315e0, i64* %rsi.global-to-local, align 8
  store i64 %v2_315ea, i64* @rdi, align 8
  %v1_315f2 = add i64 %v5_315e0, 1
  store i64 %v1_315f2, i64* @r13, align 8
  %v0_315fc = load i64, i64* @r15, align 8
  %v1_315fc = icmp eq i64 %v0_315fc, 0
  store i64 %v2_315ea, i64* @rbp, align 8
  br i1 %v1_315fc, label %bb, label %dec_label_pc_31607

bb:                                               ; preds = %dec_label_pc_315e0
  %v1_31601 = call i64 @function_318ab()
  store i64 %v1_31601, i64* @rax, align 8
  %v0_31607.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_31607

dec_label_pc_31607:                               ; preds = %bb, %dec_label_pc_315e0
  %v0_31607 = phi i64 [ %v0_31607.pre, %bb ], [ %v0_315fc, %dec_label_pc_315e0 ]
  %v1_31607 = add i64 %v0_31607, 24
  %v2_31607 = inttoptr i64 %v1_31607 to i64*
  %v3_31607 = load i64, i64* %v2_31607, align 8
  store i64 %v3_31607, i64* @rdi, align 8
  %v1_3160b = icmp eq i64 %v3_31607, 0
  br i1 %v1_3160b, label %bb9, label %dec_label_pc_31614

bb9:                                              ; preds = %dec_label_pc_31607
  %v1_3160e = call i64 @function_31800()
  store i64 %v1_3160e, i64* @rax, align 8
  %v0_3162c.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_31614

dec_label_pc_31614:                               ; preds = %bb9, %dec_label_pc_31607
  %v0_3162c = phi i64 [ %v0_3162c.pre, %bb9 ], [ %v0_31607, %dec_label_pc_31607 ]
  %v1_31614 = inttoptr i64 %v3_31607 to i64*
  %v2_31614 = load i64, i64* %v1_31614, align 8
  store i64 %v2_31614, i64* @rax, align 8
  %v1_3161d = add i64 %v2_31614, 20
  %v2_3161d = inttoptr i64 %v1_3161d to i32*
  %v3_3161d = load i32, i32* %v2_3161d, align 4
  %v4_3161d = zext i32 %v3_3161d to i64
  store i64 %v4_3161d, i64* %rsi.global-to-local, align 8
  store i64 202279, i64* @rdi, align 8
  %v1_3162c = add i64 %v0_3162c, 24
  %v2_3162c = inttoptr i64 %v1_3162c to i64*
  store i64 0, i64* %v2_3162c, align 8
  %v0_31634 = load i64, i64* @r15, align 8
  %v1_31634 = add i64 %v0_31634, 20
  %v2_31634 = inttoptr i64 %v1_31634 to i32*
  store i32 0, i32* %v2_31634, align 4
  store i64 0, i64* @rax, align 8
  %v0_3163e = load i64, i64* %rsi.global-to-local, align 8
  %v1_3163e = trunc i64 %v0_3163e to i32
  %v2_3163e = load i64, i64* @r15, align 8
  %v3_3163e = add i64 %v2_3163e, 16
  %v4_3163e = inttoptr i64 %v3_3163e to i32*
  store i32 %v1_3163e, i32* %v4_3163e, align 4
  %v0_31642 = load i64, i64* %rsi.global-to-local, align 8
  %v2_31642 = add i64 %v0_31642, 1
  %v17_31642 = and i64 %v2_31642, 4294967295
  store i64 %v17_31642, i64* %rsi.global-to-local, align 8
  %v18_31642 = load i64, i64* @rax, align 8
  ret i64 %v18_31642
}

define i64 @function_31676(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_31676:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_31676 = load i64, i64* @rdi, align 8
  %v1_31676 = trunc i64 %v0_31676 to i32
  %v2_31676 = load i64, i64* @rdx, align 8
  %v3_31676 = trunc i64 %v2_31676 to i32
  %v4_31676 = add i32 %v3_31676, %v1_31676
  %v20_31676 = zext i32 %v4_31676 to i64
  store i64 %v20_31676, i64* @rdi, align 8
  %v2_31678 = load i64, i64* @rax, align 8
  %v3_31678 = add i64 %v2_31678, 8
  %v4_31678 = inttoptr i64 %v3_31678 to i32*
  %v5_31678 = load i32, i32* %v4_31678, align 4
  %v11_31678 = icmp ult i32 %v4_31676, %v5_31678
  %v1_3167b = add i64 %v2_31676, 1
  store i64 %v1_3167b, i64* @rcx, align 8
  %v1_3167e = trunc i64 %v1_3167b to i32
  %v2_3167e = load i64, i64* @r15, align 8
  %v3_3167e = add i64 %v2_3167e, 16
  %v4_3167e = inttoptr i64 %v3_3167e to i32*
  store i32 %v1_3167e, i32* %v4_3167e, align 4
  %v1_31682 = icmp eq i1 %v11_31678, false
  br i1 %v1_31682, label %bb, label %dec_label_pc_31676.dec_label_pc_31688_crit_edge

dec_label_pc_31676.dec_label_pc_31688_crit_edge:  ; preds = %dec_label_pc_31676
  %v2_3168b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_31688

bb:                                               ; preds = %dec_label_pc_31676
  %v2_31682 = call i64 @function_318a4()
  store i64 %v2_31682, i64* @rax, align 8
  br label %dec_label_pc_31688

dec_label_pc_31688:                               ; preds = %dec_label_pc_31676.dec_label_pc_31688_crit_edge, %bb
  %v2_3168b = phi i64 [ %v2_3168b.pre, %dec_label_pc_31676.dec_label_pc_31688_crit_edge ], [ %v2_31682, %bb ]
  %v0_3168b = load i64, i64* @rbp, align 8
  %v1_3168b = trunc i64 %v0_3168b to i8
  %v3_3168b = load i64, i64* @rdi, align 8
  %v5_3168b = add i64 %v2_3168b, 12
  %v6_3168b = add i64 %v5_3168b, %v3_3168b
  %v7_3168b = inttoptr i64 %v6_3168b to i8*
  store i8 %v1_3168b, i8* %v7_3168b, align 1
  store i64 %arg4, i64* @rax, align 8
  %v0_31694 = load i64, i64* @r13, align 8
  store i64 %v0_31694, i64* @rbp, align 8
  ret i64 %arg4
}

define i64 @function_3169b(i64 %arg1) local_unnamed_addr {
dec_label_pc_3169b:
  %v0_316a0 = load i64, i64* @rax, align 8
  ret i64 %v0_316a0
}

define i64 @function_316a2(i32 %arg1) local_unnamed_addr {
dec_label_pc_316a2:
  %r12.global-to-local = alloca i64, align 8
  %v2_316a2 = load i64, i64* @rbx, align 8
  store i64 %v2_316a2, i64* @rax, align 8
  %v4_316ae = zext i32 %arg1 to i64
  store i64 %v4_316ae, i64* @rdx, align 8
  %v0_316b2 = load i64, i64* @rbp, align 8
  store i64 %v2_316a2, i64* @rdi, align 8
  %v1_316ba = trunc i64 %v2_316a2 to i32
  %v11_316ba = icmp eq i32 %v1_316ba, -1
  br i1 %v11_316ba, label %bb, label %dec_label_pc_316c6

bb:                                               ; preds = %dec_label_pc_316a2
  %v2_316c0 = call i64 @function_315e0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_316c0, i64* @rax, align 8
  %v2_316c6.pre = load i64, i64* @rbx, align 8
  %v0_316d2.pre = load i64, i64* @r13, align 8
  %v0_316d5.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_316c6

dec_label_pc_316c6:                               ; preds = %bb, %dec_label_pc_316a2
  %v2_316e0 = phi i64 [ %v0_316d5.pre, %bb ], [ %v0_316b2, %dec_label_pc_316a2 ]
  %v0_316e0 = phi i64 [ %v0_316d2.pre, %bb ], [ %v2_316a2, %dec_label_pc_316a2 ]
  %v0_316da = phi i64 [ %v2_316c6.pre, %bb ], [ %v2_316a2, %dec_label_pc_316a2 ]
  store i64 %v0_316da, i64* @rax, align 8
  %v0_316c9 = load i64, i64* %r12.global-to-local, align 8
  %v2_316c9 = add i64 %v0_316c9, 1
  %v17_316c9 = and i64 %v2_316c9, 4294967295
  store i64 %v17_316c9, i64* @r12, align 8
  store i64 %v0_316e0, i64* @rcx, align 8
  store i64 %v2_316e0, i64* @rdx, align 8
  store i64 %v0_316da, i64* @rdi, align 8
  %v7_316e3 = icmp sgt i64 %v0_316e0, %v2_316e0
  br i1 %v7_316e3, label %dec_label_pc_316e9, label %bb244

bb244:                                            ; preds = %dec_label_pc_316c6
  %v9_316e3 = call i64 @function_315e0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v9_316e3, i64* @rax, align 8
  br label %dec_label_pc_316e9

dec_label_pc_316e9:                               ; preds = %dec_label_pc_316c6, %bb244
  store i64 %v4_316ae, i64* @rax, align 8
  %v5_316f0 = icmp eq i32 %arg1, 0
  br i1 %v5_316f0, label %bb245, label %dec_label_pc_316f4

bb245:                                            ; preds = %dec_label_pc_316e9
  %v2_316f2 = call i64 @function_3169b(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_316f2, i64* @rax, align 8
  br label %dec_label_pc_316f4

dec_label_pc_316f4:                               ; preds = %bb245, %dec_label_pc_316e9
  %v1_316f8 = phi i64 [ %v2_316f2, %bb245 ], [ %v4_316ae, %dec_label_pc_316e9 ]
  ret i64 %v1_316f8
}

define i64 @function_316fb(i32 %arg1) local_unnamed_addr {
dec_label_pc_316fb:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v2_316fb = load i64, i64* %r14.global-to-local, align 8
  store i64 %v2_316fb, i64* @rax, align 8
  %v4_31700 = zext i32 %arg1 to i64
  store i64 %v4_31700, i64* @rdx, align 8
  store i64 %v2_316fb, i64* @rdi, align 8
  %v0_3170d = load i64, i64* %r13.global-to-local, align 8
  %v1_3170d = icmp eq i64 %v0_3170d, 0
  store i64 %v2_316fb, i64* %rbp.global-to-local, align 8
  br i1 %v1_3170d, label %bb, label %dec_label_pc_31719

bb:                                               ; preds = %dec_label_pc_316fb
  %v1_31713 = call i64 @function_318ab()
  store i64 %v1_31713, i64* @rax, align 8
  %v0_3171e.pre = load i64, i64* %r13.global-to-local, align 8
  %v2_31728.pre = load i64, i64* %r14.global-to-local, align 8
  %v0_3173d.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_31719

dec_label_pc_31719:                               ; preds = %bb, %dec_label_pc_316fb
  %v0_3173d = phi i64 [ %v0_3173d.pre, %bb ], [ %v2_316fb, %dec_label_pc_316fb ]
  %v0_31719 = phi i64 [ %v1_31713, %bb ], [ %v2_316fb, %dec_label_pc_316fb ]
  %v2_31728 = phi i64 [ %v2_31728.pre, %bb ], [ %v2_316fb, %dec_label_pc_316fb ]
  %v22_31746 = phi i64 [ %v0_3171e.pre, %bb ], [ %v0_3170d, %dec_label_pc_316fb ]
  %v1_31719 = add i64 %v0_31719, 20
  %v2_31719 = inttoptr i64 %v1_31719 to i32*
  %v3_31719 = load i32, i32* %v2_31719, align 4
  %v4_31719 = zext i32 %v3_31719 to i64
  store i64 %v4_31719, i64* @rbx, align 8
  store i64 %v22_31746, i64* @rdi, align 8
  store i64 %v4_31719, i64* @rdx, align 8
  store i64 %v2_31728, i64* @rax, align 8
  %v1_3172c = add i64 %v22_31746, 16
  %v2_3172c = inttoptr i64 %v1_3172c to i32*
  %v3_3172c = load i32, i32* %v2_3172c, align 4
  %v4_3172c = zext i32 %v3_3172c to i64
  store i64 %v4_3172c, i64* @rcx, align 8
  %v3_31733 = add i64 %v22_31746, 20
  %v4_31733 = inttoptr i64 %v3_31733 to i32*
  %v5_31733 = load i32, i32* %v4_31733, align 4
  %v6_31733 = add i32 %v5_31733, %v3_3172c
  %v22_31733 = zext i32 %v6_31733 to i64
  store i64 %v22_31733, i64* @rcx, align 8
  %v1_31739 = add i64 %v22_31746, 8
  %v2_31739 = inttoptr i64 %v1_31739 to i64*
  %v3_31739 = load i64, i64* %v2_31739, align 8
  store i64 %v3_31739, i64* @rdx, align 8
  store i64 %v0_3173d, i64* @rdi, align 8
  %v3_31746 = load i32, i32* %v2_3172c, align 4
  %v6_31746 = add i32 %v3_31746, %v3_31719
  store i32 %v6_31746, i32* %v2_3172c, align 4
  %v0_31759 = load i64, i64* @rax, align 8
  store i64 %v0_31759, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  %v0_31771 = load i64, i64* %r12.global-to-local, align 8
  %v1_31771 = add i64 %v0_31771, 256
  %v2_31771 = trunc i64 %v1_31771 to i32
  store i64 %v1_31771, i64* @rdi, align 8
  %tmp249 = icmp ult i32 %v2_31771, 512
  br i1 %tmp249, label %bb248, label %dec_label_pc_31785

bb248:                                            ; preds = %dec_label_pc_31719
  %sext = mul i64 %v1_31771, 4294967296
  %v4_3177f = sdiv i64 %sext, 4294967296
  %v5_3177f = call i64 @function_31888(i64 %v4_3177f)
  store i64 %v5_3177f, i64* @rax, align 8
  %v0_3179e.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_31785

dec_label_pc_31785:                               ; preds = %bb248, %dec_label_pc_31719
  %v0_3179e = phi i64 [ %v0_3179e.pre, %bb248 ], [ %v0_31771, %dec_label_pc_31719 ]
  store i64 0, i64* %rbp.global-to-local, align 8
  %v1_3179e = trunc i64 %v0_3179e to i32
  store i32 %v1_3179e, i32* inttoptr (i64 8 to i32*), align 8
  store i64 202665, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_31800() local_unnamed_addr {
dec_label_pc_31800:
  %v0_31800 = load i64, i64* @r15, align 8
  %v1_31800 = add i64 %v0_31800, 8
  %v2_31800 = inttoptr i64 %v1_31800 to i64*
  %v3_31800 = load i64, i64* %v2_31800, align 8
  store i64 %v3_31800, i64* @rax, align 8
  %v1_31804 = add i64 %v0_31800, 20
  %v2_31804 = inttoptr i64 %v1_31804 to i32*
  %v3_31804 = load i32, i32* %v2_31804, align 4
  %v4_31804 = zext i32 %v3_31804 to i64
  store i64 %v4_31804, i64* @rdi, align 8
  %v1_31808 = add i64 %v0_31800, 16
  %v2_31808 = inttoptr i64 %v1_31808 to i32*
  %v3_31808 = load i32, i32* %v2_31808, align 4
  %v4_31808 = zext i32 %v3_31808 to i64
  store i64 %v4_31808, i64* @rdx, align 8
  %v1_3180c = add i64 %v3_31800, 8
  %v2_3180c = inttoptr i64 %v1_3180c to i32*
  %v3_3180c = load i32, i32* %v2_3180c, align 4
  %v4_3180c = zext i32 %v3_3180c to i64
  store i64 %v4_3180c, i64* @rcx, align 8
  %v2_3180f = sext i32 %v3_31804 to i64
  %v4_3180f = add nuw nsw i64 %v4_31808, 1
  %v5_3180f = add nsw i64 %v4_3180f, %v2_3180f
  %sext = mul i64 %v5_3180f, 4294967296
  %v7_31815 = sdiv i64 %sext, 4294967296
  %v9_31815 = icmp sgt i64 %v7_31815, %v4_3180c
  br i1 %v9_31815, label %dec_label_pc_3181f, label %dec_label_pc_31817

dec_label_pc_31817:                               ; preds = %dec_label_pc_31800
  %v8_31817 = icmp slt i32 %v3_31804, 0
  %v1_31819 = icmp eq i1 %v8_31817, false
  br i1 %v1_31819, label %bb, label %dec_label_pc_3181f

bb:                                               ; preds = %dec_label_pc_31817
  %v8_31819 = call i64 @function_31676(i64 %v2_3180f, i64 %v7_31815, i64 %v4_31808, i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_31819, i64* @rax, align 8
  br label %dec_label_pc_3181f

dec_label_pc_3181f:                               ; preds = %bb, %dec_label_pc_31817, %dec_label_pc_31800
  %v1_31828 = trunc i64 %v4_3180f to i32
  %v9_3182c = icmp sgt i32 %v1_31828, 31
  br i1 %v9_3182c, label %dec_label_pc_3182e, label %dec_label_pc_31838

dec_label_pc_3182e:                               ; preds = %dec_label_pc_3181f
  %v3_3182e = mul nuw nsw i64 %v4_31808, 2
  %v1_31831 = trunc i64 %v3_3182e to i32
  %v4_31831 = sub i32 %v1_31831, %v1_31828
  %v10_318312 = xor i64 %v4_3180f, %v3_3182e
  %v10_31831 = trunc i64 %v10_318312 to i32
  %v11_31831 = xor i32 %v4_31831, %v1_31831
  %v12_31831 = and i32 %v11_31831, %v10_31831
  %v13_31831 = icmp slt i32 %v12_31831, 0
  %v15_31831 = icmp slt i32 %v4_31831, 0
  %v2_31834 = icmp ne i1 %v15_31831, %v13_31831
  %v7_31834.v = select i1 %v2_31834, i64 %v4_3180f, i64 %v3_3182e
  %v8_31834 = and i64 %v7_31834.v, 4294967295
  br label %dec_label_pc_31838

dec_label_pc_31838:                               ; preds = %dec_label_pc_3181f, %dec_label_pc_3182e
  %v3_3183a = phi i64 [ 32, %dec_label_pc_3181f ], [ %v8_31834, %dec_label_pc_3182e ]
  %v0_31838 = load i64, i64* @rcx, align 8
  %v1_31838 = trunc i64 %v0_31838 to i32
  %v3_31838 = trunc i64 %v3_3183a to i32
  %v14_31838 = icmp eq i32 %v1_31838, %v3_31838
  br i1 %v14_31838, label %bb26, label %dec_label_pc_31840

bb26:                                             ; preds = %dec_label_pc_31838
  %v6_3183a = call i64 @function_31676(i64 %v2_3180f, i64 %v3_3183a, i64 %v4_31808, i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_3183a, i64* @rax, align 8
  br label %dec_label_pc_31840

dec_label_pc_31840:                               ; preds = %bb26, %dec_label_pc_31838
  store i64 202823, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3184e = load i64, i64* @r15, align 8
  %v1_3184e = add i64 %v0_3184e, 8
  %v2_3184e = inttoptr i64 %v1_3184e to i64*
  %v3_3184e = load i64, i64* %v2_3184e, align 8
  store i64 %v3_3184e, i64* @rdi, align 8
  %v1_31852 = add i64 %v0_3184e, 20
  %v2_31852 = inttoptr i64 %v1_31852 to i32*
  %v3_31852 = load i32, i32* %v2_31852, align 4
  %v4_31852 = zext i32 %v3_31852 to i64
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rcx, align 8
  store i32 0, i32* %v2_31852, align 4
  store i64 0, i64* @rdi, align 8
  %v0_31878 = load i64, i64* @r15, align 8
  %v1_31878 = add i64 %v0_31878, 16
  %v2_31878 = inttoptr i64 %v1_31878 to i32*
  %v3_31878 = load i32, i32* %v2_31878, align 4
  %v4_31878 = zext i32 %v3_31878 to i64
  store i64 %v4_31878, i64* @rdx, align 8
  %v0_3187c = load i64, i64* @rax, align 8
  %v2_3187c = add i64 %v0_31878, 8
  %v3_3187c = inttoptr i64 %v2_3187c to i64*
  store i64 %v0_3187c, i64* %v3_3187c, align 8
  %v4_31880 = call i64 @function_31676(i64 0, i64 %v4_31852, i64 %v4_31878, i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_31880, i64* @rax, align 8
  ret i64 %v4_31880
}

define i64 @function_31888(i64 %arg1) local_unnamed_addr {
dec_label_pc_31888:
  store i64 %arg1, i64* @rdi, align 8
  %v0_31888 = load i64, i64* inttoptr (i64 202895 to i64*), align 8
  store i64 %v0_31888, i64* @rax, align 8
  %v1_3188f = add i64 %v0_31888, 8
  %v2_3188f = inttoptr i64 %v1_3188f to i32*
  %v3_3188f = load i32, i32* %v2_3188f, align 4
  %v5_3188f = trunc i64 %arg1 to i32
  %v1_31892 = add i64 %v0_31888, 16
  store i64 %v1_31892, i64* @rdx, align 8
  %tmp = icmp ugt i32 %v3_3188f, %v5_3188f
  br i1 %tmp, label %dec_label_pc_31898, label %bb

bb:                                               ; preds = %dec_label_pc_31888
  %v3_31896 = call i64 @function_318a4()
  store i64 %v3_31896, i64* @rax, align 8
  br label %dec_label_pc_31898

dec_label_pc_31898:                               ; preds = %dec_label_pc_31888, %bb
  %v0_3189f = phi i64 [ %v3_31896, %bb ], [ %v0_31888, %dec_label_pc_31888 ]
  ret i64 %v0_3189f
}

define i64 @function_318a4() local_unnamed_addr {
dec_label_pc_318a4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_318ab() local_unnamed_addr {
dec_label_pc_318ab:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable6concatEJPNS1_8LuaValueEPNS1_9LuaStringEii(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_318c0:
  %r14.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_318c4 = load i64, i64* @rdi, align 8
  store i64 %v0_318c4, i64* %r14.global-to-local, align 8
  %v0_318d6 = load i64, i64* @rdx, align 8
  %v0_318d8 = load i64, i64* @rcx, align 8
  store i64 0, i64* @rbx, align 8
  store i64 203005, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* inttoptr (i64 8 to i64*), align 8
  store i32 0, i32* inttoptr (i64 16 to i32*), align 16
  store i32 0, i32* inttoptr (i64 20 to i32*), align 4
  store i64 0, i64* inttoptr (i64 24 to i64*), align 8
  %v7_31926 = icmp sgt i64 %v0_318d6, %v0_318d8
  br i1 %v7_31926, label %dec_label_pc_31bc5, label %dec_label_pc_31950

dec_label_pc_31950:                               ; preds = %dec_label_pc_318c0
  %v2_31950 = load i64, i64* @rdi, align 8
  store i64 %v2_31950, i64* @rax, align 8
  %v0_31955 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_31955, i64* @rdx, align 8
  br label %dec_label_pc_31bc5

dec_label_pc_31bc5:                               ; preds = %dec_label_pc_318c0, %dec_label_pc_31950
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib16StringLib$format6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_31c56:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_31bd0 = load i64, i64* %r15.global-to-local, align 8
  %v0_31bd2 = load i64, i64* %r14.global-to-local, align 8
  %v0_31bd4 = load i64, i64* %r13.global-to-local, align 8
  %v0_31bd6 = load i64, i64* %r12.global-to-local, align 8
  %v0_31bd8 = load i64, i64* %rbp.global-to-local, align 8
  %v0_31bd9 = load i64, i64* @rbx, align 8
  %v2_31bde = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_31bde, i64* @rbx, align 8
  store i64 1, i64* %r12.global-to-local, align 8
  store i64 0, i64* %r15.global-to-local, align 8
  store i64 203819, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 1, i64* @rsi, align 8
  store i64 0, i64* inttoptr (i64 8 to i64*), align 8
  store i32 0, i32* inttoptr (i64 16 to i32*), align 16
  store i32 0, i32* inttoptr (i64 20 to i32*), align 4
  %v0_31c4c = load i64, i64* %r15.global-to-local, align 8
  %v1_31c4c = add i64 %v0_31c4c, 24
  %v2_31c4c = inttoptr i64 %v1_31c4c to i64*
  store i64 0, i64* %v2_31c4c, align 8
  store i64 0, i64* %r13.global-to-local, align 8
  %v0_31c59 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_31c59, i64* @r14, align 8
  store i64 0, i64* @r15, align 8
  %v1_31cc0 = icmp eq i64 %v0_31c59, 0
  %v1_31cc9 = add i64 %v0_31c59, 24
  %v2_31cc9 = inttoptr i64 %v1_31cc9 to i64*
  %v1_31cf4 = add i64 %v0_31c59, 20
  %v2_31cf4 = inttoptr i64 %v1_31cf4 to i32*
  %v3_31cfe = add i64 %v0_31c59, 16
  %v4_31cfe = inttoptr i64 %v3_31cfe to i32*
  %v2_31d1d = add i64 %v0_31c59, 8
  %v3_31d1d = inttoptr i64 %v2_31d1d to i64*
  br label %dec_label_pc_31c70

dec_label_pc_31c70:                               ; preds = %dec_label_pc_31c56, %dec_label_pc_31d44
  %v0_31c73 = phi i64 [ 0, %dec_label_pc_31c56 ], [ %v2_31d4f, %dec_label_pc_31d44 ]
  %v2_31c70 = load i64, i64* @rsi, align 8
  store i64 %v2_31c70, i64* @rax, align 8
  store i64 %v0_31c73, i64* %rsi.global-to-local, align 8
  %v0_31c76 = load i64, i64* @rbx, align 8
  store i64 %v0_31c76, i64* @rdi, align 8
  %v1_31c79 = add i64 %v0_31c73, 1
  store i64 %v1_31c79, i64* @rbp, align 8
  %v1_31c83 = trunc i64 %v2_31c70 to i32
  %v11_31c83 = icmp eq i32 %v1_31c83, 10
  store i64 %v2_31c70, i64* %r13.global-to-local, align 8
  br i1 %v11_31c83, label %dec_label_pc_31d60, label %dec_label_pc_31c8f

dec_label_pc_31c8f:                               ; preds = %dec_label_pc_31c70
  %v11_31c8f = icmp eq i32 %v1_31c83, 37
  %v1_31c92 = icmp eq i1 %v11_31c8f, false
  br i1 %v1_31c92, label %dec_label_pc_31cc0, label %dec_label_pc_31c94

dec_label_pc_31c94:                               ; preds = %dec_label_pc_31c8f
  %v0_31c94 = load i64, i64* %r12.global-to-local, align 8
  %v8_31c97 = icmp sgt i64 %v0_31c94, %v1_31c79
  br i1 %v8_31c97, label %bb, label %dec_label_pc_31ca0

bb:                                               ; preds = %dec_label_pc_31c94
  %v10_31c97 = call i64 @function_31f70(i64 ptrtoint (i32* @0 to i64))
  store i64 %v10_31c97, i64* @rax, align 8
  br label %dec_label_pc_31ca0

dec_label_pc_31ca0:                               ; preds = %dec_label_pc_31d44, %dec_label_pc_31c94, %bb
  store i64 %v0_31c59, i64* %r15.global-to-local, align 8
  br i1 %v1_31cc0, label %bb270, label %dec_label_pc_31ca0.dec_label_pc_31ca9_crit_edge

dec_label_pc_31ca0.dec_label_pc_31ca9_crit_edge:  ; preds = %dec_label_pc_31ca0
  %v0_31cbf.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_31ca9

bb270:                                            ; preds = %dec_label_pc_31ca0
  %v1_31ca3 = call i64 @function_32152()
  store i64 %v1_31ca3, i64* @rax, align 8
  %v0_31ca9.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_31ca9

dec_label_pc_31ca9:                               ; preds = %dec_label_pc_31ca0.dec_label_pc_31ca9_crit_edge, %bb270
  %v0_31cbf = phi i64 [ %v1_31ca3, %bb270 ], [ %v0_31cbf.pre, %dec_label_pc_31ca0.dec_label_pc_31ca9_crit_edge ]
  %v0_31ca9 = phi i64 [ %v0_31ca9.pre, %bb270 ], [ %v0_31c59, %dec_label_pc_31ca0.dec_label_pc_31ca9_crit_edge ]
  store i64 %v0_31ca9, i64* @rdi, align 8
  store i64 %v0_31bd9, i64* @rbx, align 8
  store i64 %v0_31bd8, i64* %rbp.global-to-local, align 8
  store i64 %v0_31bd6, i64* %r12.global-to-local, align 8
  store i64 %v0_31bd4, i64* %r13.global-to-local, align 8
  store i64 %v0_31bd2, i64* %r14.global-to-local, align 8
  store i64 %v0_31bd0, i64* %r15.global-to-local, align 8
  ret i64 %v0_31cbf

dec_label_pc_31cc0:                               ; preds = %dec_label_pc_31c8f
  br i1 %v1_31cc0, label %bb272, label %dec_label_pc_31cc9

bb272:                                            ; preds = %dec_label_pc_31cc0
  %v1_31cc3 = call i64 @function_32152()
  store i64 %v1_31cc3, i64* @rax, align 8
  br label %dec_label_pc_31cc9

dec_label_pc_31cc9:                               ; preds = %bb272, %dec_label_pc_31cc0
  %v3_31cc9 = load i64, i64* %v2_31cc9, align 8
  store i64 %v3_31cc9, i64* @rdi, align 8
  %v1_31ccd = icmp eq i64 %v3_31cc9, 0
  br i1 %v1_31ccd, label %bb273, label %dec_label_pc_31cd6

bb273:                                            ; preds = %dec_label_pc_31cc9
  %v1_31cd0 = call i64 @function_31e60()
  store i64 %v1_31cd0, i64* @rax, align 8
  br label %dec_label_pc_31cd6

dec_label_pc_31cd6:                               ; preds = %bb273, %dec_label_pc_31cc9
  %v1_31cd6 = inttoptr i64 %v3_31cc9 to i64*
  %v2_31cd6 = load i64, i64* %v1_31cd6, align 8
  store i64 %v2_31cd6, i64* @rax, align 8
  %v1_31cdf = add i64 %v2_31cd6, 20
  %v2_31cdf = inttoptr i64 %v1_31cdf to i32*
  %v3_31cdf = load i32, i32* %v2_31cdf, align 4
  %v4_31cdf = zext i32 %v3_31cdf to i64
  store i64 %v4_31cdf, i64* %rsi.global-to-local, align 8
  store i64 204009, i64* @rdi, align 8
  store i64 %v2_31cd6, i64* %r15.global-to-local, align 8
  store i64 0, i64* %v2_31cc9, align 8
  store i32 0, i32* %v2_31cf4, align 4
  store i64 0, i64* @rax, align 8
  %v0_31cfe = load i64, i64* %rsi.global-to-local, align 8
  %v1_31cfe = trunc i64 %v0_31cfe to i32
  store i32 %v1_31cfe, i32* %v4_31cfe, align 4
  %v0_31d02 = load i64, i64* %rsi.global-to-local, align 8
  %v2_31d02 = add i64 %v0_31d02, 1
  %v17_31d02 = and i64 %v2_31d02, 4294967295
  store i64 %v17_31d02, i64* %rsi.global-to-local, align 8
  %v0_31d0a = load i64, i64* %r15.global-to-local, align 8
  %v1_31d0a = add i64 %v0_31d0a, 8
  %v2_31d0a = inttoptr i64 %v1_31d0a to i64*
  %v3_31d0a = load i64, i64* %v2_31d0a, align 8
  store i64 %v3_31d0a, i64* @rdi, align 8
  %v3_31d0e = load i32, i32* %v2_31cf4, align 4
  %v4_31d0e = zext i32 %v3_31d0e to i64
  store i64 %v4_31d0e, i64* @rcx, align 8
  %v0_31d12 = load i64, i64* @rax, align 8
  store i64 %v0_31d12, i64* @rdx, align 8
  %v1_31d15 = add i64 %v0_31d0a, 16
  %v2_31d15 = inttoptr i64 %v1_31d15 to i32*
  %v3_31d15 = load i32, i32* %v2_31d15, align 4
  %v4_31d15 = zext i32 %v3_31d15 to i64
  store i64 %v4_31d15, i64* @rsi, align 8
  store i64 %v0_31d12, i64* %v3_31d1d, align 8
  %v3_31d26 = load i32, i32* %v2_31cf4, align 4
  %v4_31d26 = zext i32 %v3_31d26 to i64
  store i64 %v4_31d26, i64* @rcx, align 8
  %v3_31d2a = load i32, i32* %v4_31cfe, align 4
  %v4_31d2a = zext i32 %v3_31d2a to i64
  store i64 %v4_31d2a, i64* @rdi, align 8
  %v3_31d2e = load i64, i64* %v3_31d1d, align 8
  store i64 %v3_31d2e, i64* @rdx, align 8
  %v5_31d32 = add i32 %v3_31d2a, %v3_31d26
  %v21_31d32 = zext i32 %v5_31d32 to i64
  store i64 %v21_31d32, i64* @rcx, align 8
  %v4_31d34 = add i64 %v3_31d2e, 8
  %v5_31d34 = inttoptr i64 %v4_31d34 to i32*
  %v6_31d34 = load i32, i32* %v5_31d34, align 4
  %v12_31d34 = icmp ult i32 %v5_31d32, %v6_31d34
  %v1_31d37 = sext i32 %v3_31d2a to i64
  %v2_31d37 = add nsw i64 %v1_31d37, 1
  store i64 %v2_31d37, i64* @rax, align 8
  %v1_31d3a = trunc i64 %v2_31d37 to i32
  store i32 %v1_31d3a, i32* %v4_31cfe, align 4
  %v1_31d3e = icmp eq i1 %v12_31d34, false
  br i1 %v1_31d3e, label %bb274, label %dec_label_pc_31cd6.dec_label_pc_31d44_crit_edge

dec_label_pc_31cd6.dec_label_pc_31d44_crit_edge:  ; preds = %dec_label_pc_31cd6
  %.pre = sext i32 %v5_31d32 to i64
  br label %dec_label_pc_31d44

bb274:                                            ; preds = %dec_label_pc_31cd6
  %v4_31d3e = load i64, i64* @rsi, align 8
  %v7_31d3e = sext i32 %v5_31d32 to i64
  %v8_31d3e = call i64 @function_32149(i64 %v1_31d37, i64 %v4_31d3e, i64 %v3_31d2e, i64 %v7_31d3e)
  store i64 %v8_31d3e, i64* @rax, align 8
  br label %dec_label_pc_31d44

dec_label_pc_31d44:                               ; preds = %dec_label_pc_31cd6.dec_label_pc_31d44_crit_edge, %bb274
  %v1_31d44.pre-phi = phi i64 [ %.pre, %dec_label_pc_31cd6.dec_label_pc_31d44_crit_edge ], [ %v7_31d3e, %bb274 ]
  store i64 %v1_31d44.pre-phi, i64* @rcx, align 8
  %v0_31d47 = load i64, i64* @rbp, align 8
  store i64 %v0_31d47, i64* @r15, align 8
  %v0_31d4a = load i64, i64* %r13.global-to-local, align 8
  %v1_31d4a = trunc i64 %v0_31d4a to i8
  %v5_31d4a = add i64 %v3_31d2e, 12
  %v6_31d4a = add i64 %v5_31d4a, %v1_31d44.pre-phi
  %v7_31d4a = inttoptr i64 %v6_31d4a to i8*
  store i8 %v1_31d4a, i8* %v7_31d4a, align 1
  %v0_31d4f = load i64, i64* %r12.global-to-local, align 8
  %v2_31d4f = load i64, i64* @r15, align 8
  %v8_31d52 = icmp sgt i64 %v0_31d4f, %v2_31d4f
  br i1 %v8_31d52, label %dec_label_pc_31c70, label %dec_label_pc_31ca0

dec_label_pc_31d60:                               ; preds = %dec_label_pc_31c70
  %v0_31d63 = load i64, i64* inttoptr (i64 204138 to i64*), align 8
  store i64 %v0_31d63, i64* @rdi, align 8
  br i1 %v1_31cc0, label %bb275, label %dec_label_pc_31d70

bb275:                                            ; preds = %dec_label_pc_31d60
  %v1_31d6a = call i64 @function_32152()
  store i64 %v1_31d6a, i64* @rax, align 8
  br label %dec_label_pc_31d70

dec_label_pc_31d70:                               ; preds = %bb275, %dec_label_pc_31d60
  %v2_31d6a = phi i64 [ %v1_31d6a, %bb275 ], [ %v2_31c70, %dec_label_pc_31d60 ]
  ret i64 %v2_31d6a
}

define i64 @function_31e41(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_31e41:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_31e41 = load i64, i64* @r13, align 8
  %v4_31e45 = add i64 %arg4, %arg1
  %v20_31e45 = and i64 %v4_31e45, 4294967295
  store i64 %v20_31e45, i64* @rcx, align 8
  store i64 %v0_31e41, i64* @rdi, align 8
  %v0_31e4f = load i64, i64* @r14, align 8
  %v1_31e4f = add i64 %v0_31e4f, 16
  %v2_31e4f = inttoptr i64 %v1_31e4f to i32*
  %v3_31e4f = load i32, i32* %v2_31e4f, align 4
  %v4_31e4f = load i64, i64* @r15, align 8
  %v5_31e4f = trunc i64 %v4_31e4f to i32
  %v6_31e4f = add i32 %v5_31e4f, %v3_31e4f
  store i32 %v6_31e4f, i32* %v2_31e4f, align 4
  %v0_31e53 = load i64, i64* @rbp, align 8
  store i64 %v0_31e53, i64* @r15, align 8
  %v0_31e56 = load i64, i64* @rax, align 8
  ret i64 %v0_31e56
}

define i64 @function_31e60() local_unnamed_addr {
dec_label_pc_31e60:
  %v0_31e60 = load i64, i64* @r14, align 8
  %v1_31e60 = add i64 %v0_31e60, 8
  %v2_31e60 = inttoptr i64 %v1_31e60 to i64*
  %v3_31e60 = load i64, i64* %v2_31e60, align 8
  store i64 %v3_31e60, i64* @rdx, align 8
  %v1_31e64 = add i64 %v0_31e60, 20
  %v2_31e64 = inttoptr i64 %v1_31e64 to i32*
  %v3_31e64 = load i32, i32* %v2_31e64, align 4
  %v4_31e64 = zext i32 %v3_31e64 to i64
  store i64 %v4_31e64, i64* @rcx, align 8
  %v1_31e68 = add i64 %v0_31e60, 16
  %v2_31e68 = inttoptr i64 %v1_31e68 to i32*
  %v3_31e68 = load i32, i32* %v2_31e68, align 4
  %v4_31e68 = zext i32 %v3_31e68 to i64
  store i64 %v4_31e68, i64* @rdi, align 8
  %v1_31e6c = add i64 %v3_31e60, 8
  %v2_31e6c = inttoptr i64 %v1_31e6c to i32*
  %v3_31e6c = load i32, i32* %v2_31e6c, align 4
  %v4_31e6c = zext i32 %v3_31e6c to i64
  store i64 %v4_31e6c, i64* @rax, align 8
  %v3_31e6f = add nuw nsw i64 %v4_31e68, 1
  %v4_31e6f = add nuw nsw i64 %v3_31e6f, %v4_31e64
  %v8_31e75 = icmp ugt i64 %v4_31e6f, %v4_31e6c
  br i1 %v8_31e75, label %dec_label_pc_31e7f, label %dec_label_pc_31e77

dec_label_pc_31e77:                               ; preds = %dec_label_pc_31e60
  br label %dec_label_pc_31e7f

dec_label_pc_31e7f:                               ; preds = %dec_label_pc_31e77, %dec_label_pc_31e60
  %v1_31e88 = trunc i64 %v3_31e6f to i32
  %v9_31e8c = icmp sgt i32 %v1_31e88, 31
  br i1 %v9_31e8c, label %dec_label_pc_31e8e, label %dec_label_pc_31e98

dec_label_pc_31e8e:                               ; preds = %dec_label_pc_31e7f
  br label %dec_label_pc_31e98

dec_label_pc_31e98:                               ; preds = %dec_label_pc_31e7f, %dec_label_pc_31e8e
  store i64 204455, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_31ee8() local_unnamed_addr {
dec_label_pc_31ee8:
  %r8.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %v0_31ee8 = load i64, i64* @r14, align 8
  %v1_31ee8 = add i64 %v0_31ee8, 20
  %v2_31ee8 = inttoptr i64 %v1_31ee8 to i32*
  %v3_31ee8 = load i32, i32* %v2_31ee8, align 4
  %v4_31ee8 = zext i32 %v3_31ee8 to i64
  store i64 %v4_31ee8, i64* @rcx, align 8
  %v1_31eec = add i64 %v0_31ee8, 16
  %v2_31eec = inttoptr i64 %v1_31eec to i32*
  %v3_31eec = load i32, i32* %v2_31eec, align 4
  %v4_31eec = zext i32 %v3_31eec to i64
  store i64 %v4_31eec, i64* @rdi, align 8
  %v1_31ef0 = add i64 %v0_31ee8, 8
  %v2_31ef0 = inttoptr i64 %v1_31ef0 to i64*
  %v3_31ef0 = load i64, i64* %v2_31ef0, align 8
  store i64 %v3_31ef0, i64* @rdx, align 8
  %v1_31ef4 = sext i32 %v3_31ee8 to i64
  %v4_31ef4 = add nsw i64 %v4_31eec, %v1_31ef4
  store i64 %v4_31ef4, i64* @rax, align 8
  %v1_31ef7 = add i64 %v3_31ef0, 8
  %v2_31ef7 = inttoptr i64 %v1_31ef7 to i32*
  %v3_31ef7 = load i32, i32* %v2_31ef7, align 4
  %v4_31ef7 = zext i32 %v3_31ef7 to i64
  store i64 %v4_31ef7, i64* %r8.global-to-local, align 8
  %v1_31efb = trunc i64 %v4_31ef4 to i32
  %v2_31efb = load i64, i64* @r15, align 8
  %v3_31efb = trunc i64 %v2_31efb to i32
  %v4_31efb = add i32 %v3_31efb, %v1_31efb
  %v20_31efb = zext i32 %v4_31efb to i64
  store i64 %v20_31efb, i64* @rax, align 8
  %v8_31f01 = icmp ugt i32 %v4_31efb, %v3_31ef7
  br i1 %v8_31f01, label %dec_label_pc_31f0b, label %dec_label_pc_31f03

dec_label_pc_31f03:                               ; preds = %dec_label_pc_31ee8
  %v8_31f03 = icmp slt i32 %v3_31ee8, 0
  %v1_31f05 = icmp eq i1 %v8_31f03, false
  br i1 %v1_31f05, label %bb, label %dec_label_pc_31f0b

bb:                                               ; preds = %dec_label_pc_31f03
  %v3_31f05 = load i64, i64* %rsi.global-to-local, align 8
  %v7_31f05 = call i64 @function_31e41(i64 %v4_31eec, i64 %v3_31f05, i64 %v3_31ef0, i64 %v1_31ef4)
  store i64 %v7_31f05, i64* @rax, align 8
  %v0_31f0b.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_31f0b

dec_label_pc_31f0b:                               ; preds = %bb, %dec_label_pc_31f03, %dec_label_pc_31ee8
  %v0_31f0b = phi i64 [ %v0_31f0b.pre, %bb ], [ %v2_31efb, %dec_label_pc_31f03 ], [ %v2_31efb, %dec_label_pc_31ee8 ]
  %v3_31f0b = add i64 %v0_31f0b, %v4_31eec
  store i64 %v3_31f0b, i64* @rax, align 8
  %v1_31f14 = trunc i64 %v3_31f0b to i32
  %v9_31f17 = icmp sgt i32 %v1_31f14, 31
  br i1 %v9_31f17, label %dec_label_pc_31f19, label %dec_label_pc_31f21

dec_label_pc_31f19:                               ; preds = %dec_label_pc_31f0b
  %v3_31f19 = mul nuw nsw i64 %v4_31eec, 2
  %v1_31f1c = trunc i64 %v3_31f19 to i32
  %v4_31f1c = sub i32 %v1_31f1c, %v1_31f14
  %v10_31f1c1 = xor i64 %v3_31f0b, %v3_31f19
  %v10_31f1c = trunc i64 %v10_31f1c1 to i32
  %v11_31f1c = xor i32 %v4_31f1c, %v1_31f1c
  %v12_31f1c = and i32 %v11_31f1c, %v10_31f1c
  %v13_31f1c = icmp slt i32 %v12_31f1c, 0
  %v15_31f1c = icmp slt i32 %v4_31f1c, 0
  %v2_31f1e = icmp ne i1 %v15_31f1c, %v13_31f1c
  %v7_31f1e.v = select i1 %v2_31f1e, i64 %v3_31f0b, i64 %v3_31f19
  %v8_31f1e = and i64 %v7_31f1e.v, 4294967295
  br label %dec_label_pc_31f21

dec_label_pc_31f21:                               ; preds = %dec_label_pc_31f0b, %dec_label_pc_31f19
  %storemerge = phi i64 [ %v8_31f1e, %dec_label_pc_31f19 ], [ 32, %dec_label_pc_31f0b ]
  %v2_31f24 = phi i64 [ %v8_31f1e, %dec_label_pc_31f19 ], [ 32, %dec_label_pc_31f0b ]
  store i64 %storemerge, i64* %rsi.global-to-local, align 8
  %v0_31f21 = load i64, i64* %r8.global-to-local, align 8
  %v1_31f21 = trunc i64 %v0_31f21 to i32
  %v3_31f21 = trunc i64 %v2_31f24 to i32
  %v14_31f21 = icmp eq i32 %v1_31f21, %v3_31f21
  br i1 %v14_31f21, label %bb252, label %dec_label_pc_31f2a

bb252:                                            ; preds = %dec_label_pc_31f21
  %v6_31f24 = call i64 @function_31e41(i64 %v4_31eec, i64 %v2_31f24, i64 %v3_31ef0, i64 %v1_31ef4)
  store i64 %v6_31f24, i64* @rax, align 8
  br label %dec_label_pc_31f2a

dec_label_pc_31f2a:                               ; preds = %bb252, %dec_label_pc_31f21
  %v7_31f24 = phi i64 [ %v6_31f24, %bb252 ], [ %v3_31f0b, %dec_label_pc_31f21 ]
  ret i64 %v7_31f24
}

define i64 @function_31f70(i64 %arg1) local_unnamed_addr {
dec_label_pc_31f70:
  %v2_31f70 = load i64, i64* @rbx, align 8
  store i64 %v2_31f70, i64* @rax, align 8
  store i64 %v2_31f70, i64* @rdi, align 8
  %v1_31f7e = trunc i64 %v2_31f70 to i32
  %v11_31f7e = icmp eq i32 %v1_31f7e, 37
  %v1_31f81 = icmp eq i1 %v11_31f7e, false
  br i1 %v1_31f81, label %dec_label_pc_31fa2, label %dec_label_pc_31f83

dec_label_pc_31f83:                               ; preds = %dec_label_pc_31f70
  %v0_31f87 = load i64, i64* @r14, align 8
  %v1_31f87 = icmp eq i64 %v0_31f87, 0
  br i1 %v1_31f87, label %bb, label %dec_label_pc_31f90

bb:                                               ; preds = %dec_label_pc_31f83
  %v1_31f8a = call i64 @function_32152()
  store i64 %v1_31f8a, i64* @rax, align 8
  %v0_31f95.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_31f90

dec_label_pc_31f90:                               ; preds = %bb, %dec_label_pc_31f83
  %v0_31f9d = phi i64 [ %v1_31f8a, %bb ], [ %v2_31f70, %dec_label_pc_31f83 ]
  %v0_31f95 = phi i64 [ %v0_31f95.pre, %bb ], [ %v0_31f87, %dec_label_pc_31f83 ]
  store i64 %v0_31f95, i64* @rdi, align 8
  ret i64 %v0_31f9d

dec_label_pc_31fa2:                               ; preds = %dec_label_pc_31f70
  store i64 204713, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_32149(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_32149:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg4, i64* @rdi, align 8
  %v1_32149 = load i64, i64* @rax, align 8
  ret i64 %v1_32149
}

define i64 @function_3214b() local_unnamed_addr {
dec_label_pc_3214b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_32152() local_unnamed_addr {
dec_label_pc_32152:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer5valueEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_32160:
  store i64 %arg1, i64* @rdi, align 8
  %v0_32160 = load i64, i64* @rdi, align 8
  %v1_32160 = add i64 %v0_32160, 24
  %v2_32160 = inttoptr i64 %v1_32160 to i64*
  %v3_32160 = load i64, i64* %v2_32160, align 8
  store i64 %v3_32160, i64* @rax, align 8
  %v1_32164 = icmp eq i64 %v3_32160, 0
  br i1 %v1_32164, label %dec_label_pc_32170, label %dec_label_pc_32169

dec_label_pc_32169:                               ; preds = %dec_label_pc_32160
  ret i64 %v3_32160

dec_label_pc_32170:                               ; preds = %dec_label_pc_32160
  ret i64 0
}

define i64 @_ZN3org4luaj3vm26Buffer8toStringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_32180:
  store i64 %arg1, i64* @rdi, align 8
  %v0_32184 = load i64, i64* @rdi, align 8
  %v1_32184 = add i64 %v0_32184, 24
  %v2_32184 = inttoptr i64 %v1_32184 to i64*
  %v3_32184 = load i64, i64* %v2_32184, align 8
  store i64 %v3_32184, i64* @rax, align 8
  %v1_3218d = inttoptr i64 %v3_32184 to i64*
  %v2_3218d = load i64, i64* %v1_3218d, align 8
  store i64 %v2_3218d, i64* @rdx, align 8
  store i64 %v3_32184, i64* @rdi, align 8
  ret i64 %v3_32184
}

define i64 @_ZN3org4luaj3vm26Buffer9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_321b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_321b4 = load i64, i64* @rdi, align 8
  %v1_321b4 = add i64 %v0_321b4, 24
  %v2_321b4 = inttoptr i64 %v1_321b4 to i64*
  %v3_321b4 = load i64, i64* %v2_321b4, align 8
  store i64 %v3_321b4, i64* @rax, align 8
  %v1_321bd = inttoptr i64 %v3_321b4 to i64*
  %v2_321bd = load i64, i64* %v1_321bd, align 8
  store i64 %v2_321bd, i64* @rdx, align 8
  store i64 %v3_321b4, i64* @rdi, align 8
  ret i64 %v3_321b4
}

define i64 @_ZN3org4luaj3vm26Buffer8concatToEJPS2_PNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_321e0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_321e0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_321e1 = load i64, i64* @rbx, align 8
  %v0_321e2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_321e2, i64* %rbp.global-to-local, align 8
  %v0_321e5 = load i64, i64* @rdi, align 8
  store i64 %v0_321e5, i64* @rbx, align 8
  %v1_321ec = add i64 %v0_321e5, 24
  %v2_321ec = inttoptr i64 %v1_321ec to i64*
  %v3_321ec = load i64, i64* %v2_321ec, align 8
  store i64 %v3_321ec, i64* %rsi.global-to-local, align 8
  %v1_321f0 = icmp eq i64 %v3_321ec, 0
  br i1 %v1_321f0, label %dec_label_pc_32230, label %dec_label_pc_321f5

dec_label_pc_321f5:                               ; preds = %dec_label_pc_32230, %dec_label_pc_321e0
  %v2_321f5 = phi i64 [ %v0_32235, %dec_label_pc_32230 ], [ %v3_321ec, %dec_label_pc_321e0 ]
  store i64 %v2_321f5, i64* @rax, align 8
  store i64 %v0_321e2, i64* @rdi, align 8
  %v0_32202 = load i64, i64* inttoptr (i64 205321 to i64*), align 8
  store i64 %v0_32202, i64* @rdx, align 8
  %v1_32209 = add i64 %v0_321e5, 16
  %v2_32209 = inttoptr i64 %v1_32209 to i32*
  store i32 0, i32* %v2_32209, align 4
  %v0_32210 = load i64, i64* @rbx, align 8
  %v1_32210 = add i64 %v0_32210, 20
  %v2_32210 = inttoptr i64 %v1_32210 to i32*
  store i32 0, i32* %v2_32210, align 4
  %v0_32217 = load i64, i64* @rax, align 8
  %v1_32217 = load i64, i64* @rbx, align 8
  %v2_32217 = add i64 %v1_32217, 24
  %v3_32217 = inttoptr i64 %v2_32217 to i64*
  store i64 %v0_32217, i64* %v3_32217, align 8
  %v0_3221b = load i64, i64* @rdx, align 8
  %v1_3221b = load i64, i64* @rbx, align 8
  %v2_3221b = add i64 %v1_3221b, 8
  %v3_3221b = inttoptr i64 %v2_3221b to i64*
  store i64 %v0_3221b, i64* %v3_3221b, align 8
  %v0_3221f = load i64, i64* @rbx, align 8
  store i64 %v0_3221f, i64* @rax, align 8
  store i64 %v0_321e1, i64* @rbx, align 8
  store i64 %v0_321e0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_3221f

dec_label_pc_32230:                               ; preds = %dec_label_pc_321e0
  %v0_32235 = load i64, i64* @rax, align 8
  store i64 %v0_32235, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_321f5
}

define i64 @_ZN3org4luaj3vm28LuaValue6concatEJPNS1_6BufferES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_32240:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_32240 = load i64, i64* %rbp.global-to-local, align 8
  %v0_32241 = load i64, i64* @rbx, align 8
  %v1_32246 = icmp eq i64 %arg2, 0
  br i1 %v1_32246, label %dec_label_pc_3229d, label %dec_label_pc_3224b

dec_label_pc_3224b:                               ; preds = %dec_label_pc_32240
  store i64 %arg2, i64* @rbx, align 8
  %v1_3224e = add i64 %arg2, 24
  %v2_3224e = inttoptr i64 %v1_3224e to i64*
  %v3_3224e = load i64, i64* %v2_3224e, align 8
  %v0_32252 = load i64, i64* @rdi, align 8
  store i64 %v0_32252, i64* %rbp.global-to-local, align 8
  %v1_32255 = icmp eq i64 %v3_3224e, 0
  br i1 %v1_32255, label %dec_label_pc_32290, label %dec_label_pc_3225a

dec_label_pc_3225a:                               ; preds = %dec_label_pc_32290, %dec_label_pc_3224b
  %v2_3225a = phi i64 [ %arg2, %dec_label_pc_32290 ], [ %v0_32252, %dec_label_pc_3224b ]
  store i64 %v2_3225a, i64* @rax, align 8
  store i64 %v0_32252, i64* @rdi, align 8
  %v0_32267 = load i64, i64* inttoptr (i64 205422 to i64*), align 8
  store i64 %v0_32267, i64* @rdx, align 8
  %v1_3226e = add i64 %arg2, 16
  %v2_3226e = inttoptr i64 %v1_3226e to i32*
  store i32 0, i32* %v2_3226e, align 4
  %v0_32275 = load i64, i64* @rbx, align 8
  %v1_32275 = add i64 %v0_32275, 20
  %v2_32275 = inttoptr i64 %v1_32275 to i32*
  store i32 0, i32* %v2_32275, align 4
  %v0_3227c = load i64, i64* @rax, align 8
  %v1_3227c = load i64, i64* @rbx, align 8
  %v2_3227c = add i64 %v1_3227c, 24
  %v3_3227c = inttoptr i64 %v2_3227c to i64*
  store i64 %v0_3227c, i64* %v3_3227c, align 8
  %v0_32280 = load i64, i64* @rdx, align 8
  %v1_32280 = load i64, i64* @rbx, align 8
  %v2_32280 = add i64 %v1_32280, 8
  %v3_32280 = inttoptr i64 %v2_32280 to i64*
  store i64 %v0_32280, i64* %v3_32280, align 8
  %v0_32284 = load i64, i64* @rbx, align 8
  store i64 %v0_32284, i64* @rax, align 8
  store i64 %v0_32241, i64* @rbx, align 8
  store i64 %v0_32240, i64* %rbp.global-to-local, align 8
  ret i64 %v0_32284

dec_label_pc_32290:                               ; preds = %dec_label_pc_3224b
  store i64 %arg2, i64* @rdi, align 8
  br label %dec_label_pc_3225a

dec_label_pc_3229d:                               ; preds = %dec_label_pc_32240
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm27Varargs9tojstringEJPN4java4lang6StringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_322b0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 205537, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3231b(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3231b:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3231b = load i32, i32* bitcast (i64* @rdi to i32*), align 8
  %v3_3231b = add i32 %v2_3231b, -1
  %v17_3231b = load i64, i64* @rdi, align 8
  %v18_3231b = inttoptr i64 %v17_3231b to i32*
  store i32 %v3_3231b, i32* %v18_3231b, align 4
  %v2_32320 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_32320 = load i64, i64* @rax, align 8
  %v4_32320 = trunc i64 %v3_32320 to i8
  %v5_32320 = add i8 %v4_32320, %v2_32320
  %v21_32320 = inttoptr i64 %v3_32320 to i8*
  store i8 %v5_32320, i8* %v21_32320, align 1
  store i64 205614, i64* @rdi, align 8
  %v0_3232e = load i64, i64* @rax, align 8
  store i64 %v0_3232e, i64* @r12, align 8
  store i64 0, i64* @rax, align 8
  %v1_32338 = add i64 %v0_3232e, 8
  %v2_32338 = inttoptr i64 %v1_32338 to i32*
  %v3_32338 = load i32, i32* %v2_32338, align 4
  %v4_32338 = zext i32 %v3_32338 to i64
  store i64 %v4_32338, i64* @rcx, align 8
  %v1_3233d = add nsw i64 %v4_32338, -1
  store i64 %v1_3233d, i64* @rdi, align 8
  store i64 %v4_32338, i64* @rbx, align 8
  %v2_32345 = mul nsw i64 %v1_3233d, 2
  %v3_32345 = add i64 %v0_3232e, 12
  %v4_32345 = add i64 %v3_32345, %v2_32345
  store i64 %v4_32345, i64* @rax, align 8
  %v4_323777 = trunc i64 %v1_3233d to i32
  %v6_323779 = icmp slt i32 %v4_323777, 0
  %v1_3237914 = icmp eq i1 %v6_323779, false
  br i1 %v1_3237914, label %dec_label_pc_32350, label %dec_label_pc_3237b

dec_label_pc_32350:                               ; preds = %dec_label_pc_3231b, %dec_label_pc_32370.dec_label_pc_32350_crit_edge
  %v0_3235818 = phi i64 [ %v1_32373, %dec_label_pc_32370.dec_label_pc_32350_crit_edge ], [ %v4_32345, %dec_label_pc_3231b ]
  %v2_32350 = phi i64 [ %v17_32370, %dec_label_pc_32370.dec_label_pc_32350_crit_edge ], [ %v1_3233d, %dec_label_pc_3231b ]
  %v0_32350 = phi i64 [ %v0_32350.pre, %dec_label_pc_32370.dec_label_pc_32350_crit_edge ], [ %v4_32338, %dec_label_pc_3231b ]
  %v1_32350 = trunc i64 %v0_32350 to i32
  %v3_32350 = trunc i64 %v2_32350 to i32
  %tmp261 = icmp ugt i32 %v1_32350, %v3_32350
  br i1 %tmp261, label %dec_label_pc_32358, label %bb

bb:                                               ; preds = %dec_label_pc_32350
  %v3_32352 = call i64 @function_32777()
  store i64 %v3_32352, i64* @rax, align 8
  br label %dec_label_pc_32358

dec_label_pc_32358:                               ; preds = %dec_label_pc_32350, %bb
  %v0_32373 = phi i64 [ %v3_32352, %bb ], [ %v0_3235818, %dec_label_pc_32350 ]
  %v1_32358 = inttoptr i64 %v0_32373 to i16*
  %v2_32358 = load i16, i16* %v1_32358, align 2
  %v3_32358 = zext i16 %v2_32358 to i64
  store i64 %v3_32358, i64* @rdx, align 8
  %v9_3235e = icmp ugt i16 %v2_32358, 127
  br i1 %v9_3235e, label %dec_label_pc_32360, label %dec_label_pc_32370

dec_label_pc_32360:                               ; preds = %dec_label_pc_32358
  %v6_32360 = icmp ult i16 %v2_32358, 2047
  %v11_32360 = icmp eq i16 %v2_32358, 2047
  %v3_32366 = icmp eq i1 %v6_32360, false
  %v4_32366 = icmp eq i1 %v11_32360, false
  %v5_32366 = icmp eq i1 %v3_32366, %v4_32366
  %v6_32366 = zext i1 %v5_32366 to i64
  %v8_32366 = and i64 %v3_32358, 65280
  %v9_32366 = or i64 %v6_32366, %v8_32366
  store i64 %v9_32366, i64* @rdx, align 8
  %v0_3236c = load i64, i64* @rbx, align 8
  %v3_3236c = add nuw nsw i64 %v9_32366, 1
  %v4_3236c = add i64 %v3_3236c, %v0_3236c
  store i64 %v4_3236c, i64* @rbx, align 8
  br label %dec_label_pc_32370

dec_label_pc_32370:                               ; preds = %dec_label_pc_32358, %dec_label_pc_32360
  %v0_32370 = load i64, i64* @rdi, align 8
  %v1_32370 = trunc i64 %v0_32370 to i32
  %v2_32370 = add i32 %v1_32370, -1
  %v17_32370 = zext i32 %v2_32370 to i64
  store i64 %v17_32370, i64* @rdi, align 8
  %v1_32373 = add i64 %v0_32373, -2
  store i64 %v1_32373, i64* @rax, align 8
  %v6_32377 = icmp slt i32 %v2_32370, 0
  %v1_32379 = icmp eq i1 %v6_32377, false
  br i1 %v1_32379, label %dec_label_pc_32370.dec_label_pc_32350_crit_edge, label %dec_label_pc_32377.dec_label_pc_3237b_crit_edge

dec_label_pc_32370.dec_label_pc_32350_crit_edge:  ; preds = %dec_label_pc_32370
  %v0_32350.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_32350

dec_label_pc_32377.dec_label_pc_3237b_crit_edge:  ; preds = %dec_label_pc_32370
  %v0_3237d.pre = load i64, i64* @rbx, align 8
  %v0_3238f.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_3237b

dec_label_pc_3237b:                               ; preds = %dec_label_pc_32377.dec_label_pc_3237b_crit_edge, %dec_label_pc_3231b
  %v0_3238f = phi i64 [ %v0_3238f.pre, %dec_label_pc_32377.dec_label_pc_3237b_crit_edge ], [ %v0_3232e, %dec_label_pc_3231b ]
  %v4_323a4 = phi i64 [ %v0_3237d.pre, %dec_label_pc_32377.dec_label_pc_3237b_crit_edge ], [ %v4_32338, %dec_label_pc_3231b ]
  store i64 %v4_323a4, i64* @rdx, align 8
  %v0_3237f = load i64, i64* @r13, align 8
  store i64 %v0_3237f, i64* @rdi, align 8
  %v1_32387 = add i64 %v0_3237f, 16
  %v2_32387 = inttoptr i64 %v1_32387 to i32*
  %v3_32387 = load i32, i32* %v2_32387, align 4
  %v4_32387 = zext i32 %v3_32387 to i64
  store i64 %v4_32387, i64* @rcx, align 8
  %v3_3238b = add i64 %v0_3237f, 20
  %v4_3238b = inttoptr i64 %v3_3238b to i32*
  %v5_3238b = load i32, i32* %v4_3238b, align 4
  %v6_3238b = add i32 %v5_3238b, %v3_32387
  %v22_3238b = zext i32 %v6_3238b to i64
  store i64 %v22_3238b, i64* @rcx, align 8
  store i64 %v0_3238f, i64* @rdi, align 8
  %v1_32397 = add i64 %v0_3237f, 8
  %v2_32397 = inttoptr i64 %v1_32397 to i64*
  %v3_32397 = load i64, i64* %v2_32397, align 8
  store i64 %v3_32397, i64* @rdx, align 8
  %v2_323a0 = load i64, i64* @rbp, align 8
  store i64 %v2_323a0, i64* @rax, align 8
  %v3_323a4 = load i32, i32* %v2_32387, align 4
  %v5_323a4 = trunc i64 %v4_323a4 to i32
  %v6_323a4 = add i32 %v3_323a4, %v5_323a4
  store i32 %v6_323a4, i32* %v2_32387, align 4
  %v0_323a8 = load i64, i64* @rbp, align 8
  store i64 %v0_323a8, i64* @rdi, align 8
  %v0_323ae = load i64, i64* @rax, align 8
  %v4_323ae = trunc i64 %v0_323ae to i32
  %tmp259 = icmp slt i32 %v4_323ae, 1
  br i1 %tmp259, label %bb260, label %dec_label_pc_323ba

bb260:                                            ; preds = %dec_label_pc_3237b
  %v5_323b4 = call i64 @function_326ca()
  store i64 %v5_323b4, i64* @rax, align 8
  br label %dec_label_pc_323ba

dec_label_pc_323ba:                               ; preds = %bb260, %dec_label_pc_3237b
  %v0_323bf = phi i64 [ %v5_323b4, %bb260 ], [ %v0_323ae, %dec_label_pc_3237b ]
  store i64 1, i64* @rbx, align 8
  ret i64 %v0_323bf
}

define i64 @function_323c0(i64 %arg1) local_unnamed_addr {
dec_label_pc_323c0:
  %r12.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %v2_323c0 = load i64, i64* @rbp, align 8
  store i64 %v2_323c0, i64* @rax, align 8
  %v0_323c4 = load i64, i64* @rbx, align 8
  store i64 %v0_323c4, i64* %rsi.global-to-local, align 8
  store i64 %v2_323c0, i64* @rdx, align 8
  store i64 %v2_323c0, i64* @rdi, align 8
  %v1_323d8 = icmp eq i64 %v2_323c0, 0
  br i1 %v1_323d8, label %bb, label %dec_label_pc_323e1

bb:                                               ; preds = %dec_label_pc_323c0
  %v1_323db = call i64 @function_3278b()
  store i64 %v1_323db, i64* @rax, align 8
  br label %dec_label_pc_323e1

dec_label_pc_323e1:                               ; preds = %bb, %dec_label_pc_323c0
  %v0_323f0 = phi i64 [ %v1_323db, %bb ], [ %v2_323c0, %dec_label_pc_323c0 ]
  store i64 205808, i64* @rdi, align 8
  store i64 %v0_323f0, i64* @r15, align 8
  store i64 0, i64* @rax, align 8
  %v1_323fa = add i64 %v0_323f0, 8
  %v2_323fa = inttoptr i64 %v1_323fa to i32*
  %v3_323fa = load i32, i32* %v2_323fa, align 4
  %v4_323fa = zext i32 %v3_323fa to i64
  store i64 %v4_323fa, i64* @rcx, align 8
  %v1_323fe = add nsw i64 %v4_323fa, -1
  store i64 %v1_323fe, i64* @rdi, align 8
  store i64 %v4_323fa, i64* @r14, align 8
  %v2_32407 = mul nsw i64 %v1_323fe, 2
  %v3_32407 = add i64 %v0_323f0, 12
  %v4_32407 = add i64 %v3_32407, %v2_32407
  store i64 %v4_32407, i64* @rax, align 8
  %v4_324389 = trunc i64 %v1_323fe to i32
  %v6_3243811 = icmp slt i32 %v4_324389, 0
  %v1_3243a16 = icmp eq i1 %v6_3243811, false
  br i1 %v1_3243a16, label %dec_label_pc_32410, label %dec_label_pc_3243c

dec_label_pc_32410:                               ; preds = %dec_label_pc_323e1, %dec_label_pc_32431.dec_label_pc_32410_crit_edge
  %v0_3241821 = phi i64 [ %v1_32434, %dec_label_pc_32431.dec_label_pc_32410_crit_edge ], [ %v4_32407, %dec_label_pc_323e1 ]
  %v2_32410 = phi i64 [ %v17_32431, %dec_label_pc_32431.dec_label_pc_32410_crit_edge ], [ %v1_323fe, %dec_label_pc_323e1 ]
  %v0_32410 = phi i64 [ %v0_32410.pre, %dec_label_pc_32431.dec_label_pc_32410_crit_edge ], [ %v4_323fa, %dec_label_pc_323e1 ]
  %v1_32410 = trunc i64 %v0_32410 to i32
  %v3_32410 = trunc i64 %v2_32410 to i32
  %tmp43 = icmp ugt i32 %v1_32410, %v3_32410
  br i1 %tmp43, label %dec_label_pc_32418, label %bb37

bb37:                                             ; preds = %dec_label_pc_32410
  %v3_32412 = call i64 @function_32777()
  store i64 %v3_32412, i64* @rax, align 8
  br label %dec_label_pc_32418

dec_label_pc_32418:                               ; preds = %dec_label_pc_32410, %bb37
  %v0_32434 = phi i64 [ %v3_32412, %bb37 ], [ %v0_3241821, %dec_label_pc_32410 ]
  %v1_32418 = inttoptr i64 %v0_32434 to i16*
  %v2_32418 = load i16, i16* %v1_32418, align 2
  %v3_32418 = zext i16 %v2_32418 to i64
  store i64 %v3_32418, i64* @rdx, align 8
  %v9_3241e = icmp ugt i16 %v2_32418, 127
  br i1 %v9_3241e, label %dec_label_pc_32420, label %dec_label_pc_32431

dec_label_pc_32420:                               ; preds = %dec_label_pc_32418
  %v6_32420 = icmp ult i16 %v2_32418, 2047
  %v11_32420 = icmp eq i16 %v2_32418, 2047
  %v3_32426 = icmp eq i1 %v6_32420, false
  %v4_32426 = icmp eq i1 %v11_32420, false
  %v5_32426 = icmp eq i1 %v3_32426, %v4_32426
  %v6_32426 = zext i1 %v5_32426 to i64
  %v8_32426 = and i64 %v3_32418, 65280
  %v9_32426 = or i64 %v6_32426, %v8_32426
  store i64 %v9_32426, i64* @rdx, align 8
  %v1_3242c = load i64, i64* @r14, align 8
  %v3_3242c = add nuw nsw i64 %v9_32426, 1
  %v4_3242c = add i64 %v3_3242c, %v1_3242c
  store i64 %v4_3242c, i64* @r14, align 8
  br label %dec_label_pc_32431

dec_label_pc_32431:                               ; preds = %dec_label_pc_32418, %dec_label_pc_32420
  %v0_32431 = load i64, i64* @rdi, align 8
  %v1_32431 = trunc i64 %v0_32431 to i32
  %v2_32431 = add i32 %v1_32431, -1
  %v17_32431 = zext i32 %v2_32431 to i64
  store i64 %v17_32431, i64* @rdi, align 8
  %v1_32434 = add i64 %v0_32434, -2
  store i64 %v1_32434, i64* @rax, align 8
  %v6_32438 = icmp slt i32 %v2_32431, 0
  %v1_3243a = icmp eq i1 %v6_32438, false
  br i1 %v1_3243a, label %dec_label_pc_32431.dec_label_pc_32410_crit_edge, label %dec_label_pc_3243c

dec_label_pc_32431.dec_label_pc_32410_crit_edge:  ; preds = %dec_label_pc_32431
  %v0_32410.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_32410

dec_label_pc_3243c:                               ; preds = %dec_label_pc_32431, %dec_label_pc_323e1
  %v0_3243c = load i64, i64* @r13, align 8
  %v1_3243c = add i64 %v0_3243c, 24
  %v2_3243c = inttoptr i64 %v1_3243c to i64*
  %v3_3243c = load i64, i64* %v2_3243c, align 8
  store i64 %v3_3243c, i64* @rdi, align 8
  %v1_32440 = icmp eq i64 %v3_3243c, 0
  br i1 %v1_32440, label %bb38, label %dec_label_pc_32449

bb38:                                             ; preds = %dec_label_pc_3243c
  %v1_32443 = call i64 @function_32640()
  store i64 %v1_32443, i64* @rax, align 8
  %v0_32461.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_32449

dec_label_pc_32449:                               ; preds = %bb38, %dec_label_pc_3243c
  %v0_32461 = phi i64 [ %v0_32461.pre, %bb38 ], [ %v0_3243c, %dec_label_pc_3243c ]
  %v1_32449 = inttoptr i64 %v3_3243c to i64*
  %v2_32449 = load i64, i64* %v1_32449, align 8
  store i64 %v2_32449, i64* @rax, align 8
  %v1_32452 = add i64 %v2_32449, 20
  %v2_32452 = inttoptr i64 %v1_32452 to i32*
  %v3_32452 = load i32, i32* %v2_32452, align 4
  %v4_32452 = zext i32 %v3_32452 to i64
  store i64 %v4_32452, i64* %rsi.global-to-local, align 8
  store i64 205916, i64* @rdi, align 8
  store i64 %v2_32449, i64* %r12.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v1_32461 = add i64 %v0_32461, 24
  %v2_32461 = inttoptr i64 %v1_32461 to i64*
  store i64 0, i64* %v2_32461, align 8
  %v0_32469 = load i64, i64* @r13, align 8
  %v1_32469 = add i64 %v0_32469, 20
  %v2_32469 = inttoptr i64 %v1_32469 to i32*
  store i32 0, i32* %v2_32469, align 4
  %v0_32471 = load i64, i64* %rsi.global-to-local, align 8
  %v1_32471 = trunc i64 %v0_32471 to i32
  %v2_32471 = load i64, i64* @r13, align 8
  %v3_32471 = add i64 %v2_32471, 16
  %v4_32471 = inttoptr i64 %v3_32471 to i32*
  store i32 %v1_32471, i32* %v4_32471, align 4
  %v0_32475 = load i64, i64* %rsi.global-to-local, align 8
  %v2_32475 = load i64, i64* @r14, align 8
  %v4_32475 = add i64 %v2_32475, %v0_32475
  %v20_32475 = and i64 %v4_32475, 4294967295
  store i64 %v20_32475, i64* %rsi.global-to-local, align 8
  %v0_3247d = load i64, i64* %r12.global-to-local, align 8
  %v1_3247d = add i64 %v0_3247d, 8
  %v2_3247d = inttoptr i64 %v1_3247d to i64*
  %v3_3247d = load i64, i64* %v2_3247d, align 8
  store i64 %v3_3247d, i64* @rdi, align 8
  %v0_32482 = load i64, i64* @r13, align 8
  %v1_32482 = add i64 %v0_32482, 20
  %v2_32482 = inttoptr i64 %v1_32482 to i32*
  %v3_32482 = load i32, i32* %v2_32482, align 4
  %v4_32482 = zext i32 %v3_32482 to i64
  store i64 %v4_32482, i64* @rcx, align 8
  %v0_32486 = load i64, i64* @rax, align 8
  store i64 %v0_32486, i64* @rdx, align 8
  %v1_32489 = add i64 %v0_3247d, 16
  %v2_32489 = inttoptr i64 %v1_32489 to i32*
  %v3_32489 = load i32, i32* %v2_32489, align 4
  %v4_32489 = zext i32 %v3_32489 to i64
  store i64 %v4_32489, i64* %rsi.global-to-local, align 8
  %v1_3248e = add i64 %v0_32482, 16
  %v2_3248e = inttoptr i64 %v1_3248e to i32*
  %v3_3248e = load i32, i32* %v2_3248e, align 4
  %v4_3248e = zext i32 %v3_3248e to i64
  store i64 %v4_3248e, i64* @r8, align 8
  %v2_32492 = add i64 %v0_32482, 8
  %v3_32492 = inttoptr i64 %v2_32492 to i64*
  store i64 %v0_32486, i64* %v3_32492, align 8
  %v0_3249b = load i64, i64* @r13, align 8
  %v1_3249b = add i64 %v0_3249b, 8
  %v2_3249b = inttoptr i64 %v1_3249b to i64*
  %v3_3249b = load i64, i64* %v2_3249b, align 8
  store i64 %v3_3249b, i64* @rdx, align 8
  %v1_3249f = add i64 %v0_3249b, 20
  %v2_3249f = inttoptr i64 %v1_3249f to i32*
  %v3_3249f = load i32, i32* %v2_3249f, align 4
  %v4_3249f = zext i32 %v3_3249f to i64
  store i64 %v4_3249f, i64* @rdi, align 8
  %v1_324a3 = add i64 %v0_3249b, 16
  %v2_324a3 = inttoptr i64 %v1_324a3 to i32*
  %v3_324a3 = load i32, i32* %v2_324a3, align 4
  %v4_324a3 = zext i32 %v3_324a3 to i64
  store i64 %v4_324a3, i64* @rcx, align 8
  %v0_324a7 = load i64, i64* @r15, align 8
  %v1_324a7 = add i64 %v0_324a7, 8
  %v2_324a7 = inttoptr i64 %v1_324a7 to i32*
  %v3_324a7 = load i32, i32* %v2_324a7, align 4
  %v4_324a7 = zext i32 %v3_324a7 to i64
  store i64 %v4_324a7, i64* %rsi.global-to-local, align 8
  %v4_324ab = add i32 %v3_324a3, %v3_3249f
  %v20_324ab = zext i32 %v4_324ab to i64
  store i64 %v20_324ab, i64* @rcx, align 8
  store i64 %v0_324a7, i64* @rdi, align 8
  %v0_324b0 = load i64, i64* @rbx, align 8
  %v2_324b0 = add i64 %v0_324b0, 1
  %v17_324b0 = and i64 %v2_324b0, 4294967295
  store i64 %v17_324b0, i64* @rbx, align 8
  %v3_324b8 = load i32, i32* %v2_324a3, align 4
  %v4_324b8 = load i64, i64* @r14, align 8
  %v5_324b8 = trunc i64 %v4_324b8 to i32
  %v6_324b8 = add i32 %v5_324b8, %v3_324b8
  store i32 %v6_324b8, i32* %v2_324a3, align 4
  %v5_324bc = load i64, i64* @rbx, align 8
  %v7_324c0 = icmp sgt i64 %v5_324bc, %arg1
  br i1 %v7_324c0, label %bb39, label %dec_label_pc_324c6

bb39:                                             ; preds = %dec_label_pc_32449
  %v8_324c0 = call i64 @function_326ca()
  store i64 %v8_324c0, i64* @rax, align 8
  %v0_324c6.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_324c6

dec_label_pc_324c6:                               ; preds = %bb39, %dec_label_pc_32449
  %v0_324c6 = phi i64 [ %v0_324c6.pre, %bb39 ], [ %v5_324bc, %dec_label_pc_32449 ]
  %v1_324c6 = trunc i64 %v0_324c6 to i32
  %v9_324c9 = icmp sgt i32 %v1_324c6, 1
  br i1 %v9_324c9, label %dec_label_pc_324cf, label %bb41

bb41:                                             ; preds = %dec_label_pc_324c6
  %v11_324c9 = call i64 @function_323c0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_324c9, i64* @rax, align 8
  br label %dec_label_pc_324cf

dec_label_pc_324cf:                               ; preds = %dec_label_pc_324c6, %bb41
  %v0_324cf = load i64, i64* inttoptr (i64 206038 to i64*), align 8
  store i64 %v0_324cf, i64* @rdi, align 8
  %v1_324d6 = icmp eq i64 %v0_324cf, 0
  br i1 %v1_324d6, label %bb42, label %dec_label_pc_324cf.dec_label_pc_324df_crit_edge

dec_label_pc_324cf.dec_label_pc_324df_crit_edge:  ; preds = %dec_label_pc_324cf
  %v0_324eb.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_324df

bb42:                                             ; preds = %dec_label_pc_324cf
  %v1_324d9 = call i64 @function_3278b()
  store i64 %v1_324d9, i64* @rax, align 8
  br label %dec_label_pc_324df

dec_label_pc_324df:                               ; preds = %dec_label_pc_324cf.dec_label_pc_324df_crit_edge, %bb42
  %v0_324eb = phi i64 [ %v0_324eb.pre, %dec_label_pc_324cf.dec_label_pc_324df_crit_edge ], [ %v1_324d9, %bb42 ]
  store i64 206059, i64* @rdi, align 8
  store i64 %v0_324eb, i64* @r15, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_325a3(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_325a3:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_325a3 = load i64, i64* @r15, align 8
  %v4_325a7 = add i64 %arg4, %arg1
  %v20_325a7 = and i64 %v4_325a7, 4294967295
  store i64 %v20_325a7, i64* @rcx, align 8
  store i64 %v0_325a3, i64* @rdi, align 8
  %v0_325b1 = load i64, i64* @r13, align 8
  %v1_325b1 = add i64 %v0_325b1, 16
  %v2_325b1 = inttoptr i64 %v1_325b1 to i32*
  %v3_325b1 = load i32, i32* %v2_325b1, align 4
  %v4_325b1 = load i64, i64* @r14, align 8
  %v5_325b1 = trunc i64 %v4_325b1 to i32
  %v6_325b1 = add i32 %v5_325b1, %v3_325b1
  store i32 %v6_325b1, i32* %v2_325b1, align 4
  %v1_325b5 = call i64 @function_323c0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v1_325b5, i64* @rax, align 8
  ret i64 %v1_325b5
}

define i64 @function_325c0() local_unnamed_addr {
dec_label_pc_325c0:
  %rsi.global-to-local = alloca i64, align 8
  %v0_325c0 = load i64, i64* @r13, align 8
  %v1_325c0 = add i64 %v0_325c0, 20
  %v2_325c0 = inttoptr i64 %v1_325c0 to i32*
  %v3_325c0 = load i32, i32* %v2_325c0, align 4
  %v4_325c0 = zext i32 %v3_325c0 to i64
  store i64 %v4_325c0, i64* @rdi, align 8
  %v1_325c4 = add i64 %v0_325c0, 16
  %v2_325c4 = inttoptr i64 %v1_325c4 to i32*
  %v3_325c4 = load i32, i32* %v2_325c4, align 4
  %v4_325c4 = zext i32 %v3_325c4 to i64
  store i64 %v4_325c4, i64* @rcx, align 8
  %v1_325c8 = add i64 %v0_325c0, 8
  %v2_325c8 = inttoptr i64 %v1_325c8 to i64*
  %v3_325c8 = load i64, i64* %v2_325c8, align 8
  store i64 %v3_325c8, i64* @rdx, align 8
  %v1_325cc = sext i32 %v3_325c0 to i64
  %v4_325cc = add nsw i64 %v4_325c4, %v1_325cc
  store i64 %v4_325cc, i64* @rax, align 8
  %v1_325cf = add i64 %v3_325c8, 8
  %v2_325cf = inttoptr i64 %v1_325cf to i32*
  %v3_325cf = load i32, i32* %v2_325cf, align 4
  %v4_325cf = zext i32 %v3_325cf to i64
  store i64 %v4_325cf, i64* @r8, align 8
  %v1_325d3 = trunc i64 %v4_325cc to i32
  %v2_325d3 = load i64, i64* @r14, align 8
  %v3_325d3 = trunc i64 %v2_325d3 to i32
  %v4_325d3 = add i32 %v3_325d3, %v1_325d3
  %v20_325d3 = zext i32 %v4_325d3 to i64
  store i64 %v20_325d3, i64* @rax, align 8
  %v8_325d9 = icmp ugt i32 %v4_325d3, %v3_325cf
  br i1 %v8_325d9, label %dec_label_pc_325df, label %dec_label_pc_325db

dec_label_pc_325db:                               ; preds = %dec_label_pc_325c0
  %v8_325db = icmp slt i32 %v3_325c0, 0
  %v1_325dd = icmp eq i1 %v8_325db, false
  br i1 %v1_325dd, label %bb, label %dec_label_pc_325df

bb:                                               ; preds = %dec_label_pc_325db
  %v4_325dd = load i64, i64* %rsi.global-to-local, align 8
  %v7_325dd = call i64 @function_325a3(i64 %v1_325cc, i64 %v4_325dd, i64 %v3_325c8, i64 %v4_325c4)
  store i64 %v7_325dd, i64* @rax, align 8
  %v0_325df.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_325df

dec_label_pc_325df:                               ; preds = %bb, %dec_label_pc_325db, %dec_label_pc_325c0
  %v0_325df = phi i64 [ %v0_325df.pre, %bb ], [ %v2_325d3, %dec_label_pc_325db ], [ %v2_325d3, %dec_label_pc_325c0 ]
  %v3_325df = add i64 %v0_325df, %v4_325c4
  store i64 %v3_325df, i64* @rax, align 8
  %v1_325e8 = trunc i64 %v3_325df to i32
  %v9_325eb = icmp sgt i32 %v1_325e8, 31
  br i1 %v9_325eb, label %dec_label_pc_325ed, label %dec_label_pc_325f5

dec_label_pc_325ed:                               ; preds = %dec_label_pc_325df
  %v3_325ed = mul nuw nsw i64 %v4_325c4, 2
  %v1_325f0 = trunc i64 %v3_325ed to i32
  %v4_325f0 = sub i32 %v1_325f0, %v1_325e8
  %v10_325f01 = xor i64 %v3_325df, %v3_325ed
  %v10_325f0 = trunc i64 %v10_325f01 to i32
  %v11_325f0 = xor i32 %v4_325f0, %v1_325f0
  %v12_325f0 = and i32 %v11_325f0, %v10_325f0
  %v13_325f0 = icmp slt i32 %v12_325f0, 0
  %v15_325f0 = icmp slt i32 %v4_325f0, 0
  %v2_325f2 = icmp ne i1 %v15_325f0, %v13_325f0
  %v7_325f2.v = select i1 %v2_325f2, i64 %v3_325df, i64 %v3_325ed
  %v8_325f2 = and i64 %v7_325f2.v, 4294967295
  br label %dec_label_pc_325f5

dec_label_pc_325f5:                               ; preds = %dec_label_pc_325df, %dec_label_pc_325ed
  %storemerge = phi i64 [ %v8_325f2, %dec_label_pc_325ed ], [ 32, %dec_label_pc_325df ]
  %v3_325f8 = phi i64 [ %v8_325f2, %dec_label_pc_325ed ], [ 32, %dec_label_pc_325df ]
  store i64 %storemerge, i64* %rsi.global-to-local, align 8
  %v0_325f5 = load i64, i64* @r8, align 8
  %v1_325f5 = trunc i64 %v0_325f5 to i32
  %v3_325f5 = trunc i64 %v3_325f8 to i32
  %v14_325f5 = icmp eq i32 %v1_325f5, %v3_325f5
  br i1 %v14_325f5, label %bb252, label %dec_label_pc_325fa

bb252:                                            ; preds = %dec_label_pc_325f5
  %v6_325f8 = call i64 @function_325a3(i64 %v1_325cc, i64 %v3_325f8, i64 %v3_325c8, i64 %v4_325c4)
  store i64 %v6_325f8, i64* @rax, align 8
  br label %dec_label_pc_325fa

dec_label_pc_325fa:                               ; preds = %bb252, %dec_label_pc_325f5
  store i64 206337, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_32640() local_unnamed_addr {
dec_label_pc_32640:
  %v0_32640 = load i64, i64* @r13, align 8
  %v1_32640 = add i64 %v0_32640, 20
  %v2_32640 = inttoptr i64 %v1_32640 to i32*
  %v3_32640 = load i32, i32* %v2_32640, align 4
  %v4_32640 = zext i32 %v3_32640 to i64
  store i64 %v4_32640, i64* @rdi, align 8
  %v1_32644 = add i64 %v0_32640, 16
  %v2_32644 = inttoptr i64 %v1_32644 to i32*
  %v3_32644 = load i32, i32* %v2_32644, align 4
  %v4_32644 = zext i32 %v3_32644 to i64
  store i64 %v4_32644, i64* @rcx, align 8
  %v1_32648 = add i64 %v0_32640, 8
  %v2_32648 = inttoptr i64 %v1_32648 to i64*
  %v3_32648 = load i64, i64* %v2_32648, align 8
  store i64 %v3_32648, i64* @rdx, align 8
  %v3_3264c = add nuw nsw i64 %v4_32644, %v4_32640
  store i64 %v3_3264c, i64* @rax, align 8
  %v1_3264f = add i64 %v3_32648, 8
  %v2_3264f = inttoptr i64 %v1_3264f to i32*
  %v3_3264f = load i32, i32* %v2_3264f, align 4
  %v1_32653 = trunc i64 %v3_3264c to i32
  %v2_32653 = load i64, i64* @r14, align 8
  %v3_32653 = trunc i64 %v2_32653 to i32
  %v4_32653 = add i32 %v3_32653, %v1_32653
  %v20_32653 = zext i32 %v4_32653 to i64
  store i64 %v20_32653, i64* @rax, align 8
  %v8_32659 = icmp ugt i32 %v4_32653, %v3_3264f
  br i1 %v8_32659, label %dec_label_pc_32663, label %dec_label_pc_3265b

dec_label_pc_3265b:                               ; preds = %dec_label_pc_32640
  br label %dec_label_pc_32663

dec_label_pc_32663:                               ; preds = %dec_label_pc_3265b, %dec_label_pc_32640
  %v3_32663 = add i64 %v2_32653, %v4_32644
  store i64 %v3_32663, i64* @rax, align 8
  %v1_3266c = trunc i64 %v3_32663 to i32
  %v9_3266f = icmp sgt i32 %v1_3266c, 31
  br i1 %v9_3266f, label %dec_label_pc_32671, label %dec_label_pc_32679

dec_label_pc_32671:                               ; preds = %dec_label_pc_32663
  br label %dec_label_pc_32679

dec_label_pc_32679:                               ; preds = %dec_label_pc_32663, %dec_label_pc_32671
  store i64 206473, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v3_32690 = load i64, i64* %v2_32648, align 8
  store i64 %v3_32690, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rcx, align 8
  store i32 0, i32* %v2_32640, align 4
  store i64 0, i64* @rdi, align 8
  %v0_326ba = load i64, i64* @r13, align 8
  %v1_326ba = add i64 %v0_326ba, 16
  %v2_326ba = inttoptr i64 %v1_326ba to i32*
  %v3_326ba = load i32, i32* %v2_326ba, align 4
  %v4_326ba = zext i32 %v3_326ba to i64
  store i64 %v4_326ba, i64* @rcx, align 8
  %v0_326be = load i64, i64* @rax, align 8
  %v2_326be = add i64 %v0_326ba, 8
  %v3_326be = inttoptr i64 %v2_326be to i64*
  store i64 %v0_326be, i64* %v3_326be, align 8
  %v0_326c2 = load i64, i64* @rax, align 8
  store i64 %v0_326c2, i64* @rdx, align 8
  ret i64 %v0_326c2
}

define i64 @function_326ca() local_unnamed_addr {
dec_label_pc_326ca:
  %v0_326ca = load i64, i64* inttoptr (i64 206545 to i64*), align 8
  store i64 %v0_326ca, i64* @rdi, align 8
  %v1_326d1 = icmp eq i64 %v0_326ca, 0
  br i1 %v1_326d1, label %bb, label %dec_label_pc_326ca.dec_label_pc_326da_crit_edge

dec_label_pc_326ca.dec_label_pc_326da_crit_edge:  ; preds = %dec_label_pc_326ca
  %v0_326e6.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_326da

bb:                                               ; preds = %dec_label_pc_326ca
  %v1_326d4 = call i64 @function_3278b()
  store i64 %v1_326d4, i64* @rax, align 8
  br label %dec_label_pc_326da

dec_label_pc_326da:                               ; preds = %dec_label_pc_326ca.dec_label_pc_326da_crit_edge, %bb
  %v0_326e6 = phi i64 [ %v0_326e6.pre, %dec_label_pc_326ca.dec_label_pc_326da_crit_edge ], [ %v1_326d4, %bb ]
  store i64 206566, i64* @rdi, align 8
  store i64 %v0_326e6, i64* @rbp, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3275f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_3275f:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3275f = load i64, i64* @rdi, align 8
  store i64 %v2_3275f, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg3, i64* @rbp, align 8
  store i64 %arg4, i64* @r12, align 8
  store i64 %arg5, i64* @r13, align 8
  store i64 %arg6, i64* @r14, align 8
  store i64 %arg7, i64* @r15, align 8
  ret i64 %v2_3275f
}

define i64 @function_32777() local_unnamed_addr {
dec_label_pc_32777:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  %v7_32789 = call i64 @function_3275f(i64 0, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_32789, i64* @rax, align 8
  ret i64 %v7_32789
}

define i64 @function_3278b() local_unnamed_addr {
dec_label_pc_3278b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$588onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_327a0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_327a0 = load i64, i64* %r15.global-to-local, align 8
  %v0_327a2 = load i64, i64* %r14.global-to-local, align 8
  %v0_327a4 = load i64, i64* %r13.global-to-local, align 8
  %v0_327a6 = load i64, i64* %r12.global-to-local, align 8
  %v0_327a8 = load i64, i64* %rbp.global-to-local, align 8
  %v0_327a9 = load i64, i64* @rbx, align 8
  %v0_327aa = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_327aa, i64* %rbp.global-to-local, align 8
  %v0_327ad = load i64, i64* @rdi, align 8
  store i64 %v0_327ad, i64* @rbx, align 8
  store i64 %v0_327aa, i64* %r12.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_327aa, i64* @rdi, align 8
  %v1_327d7 = add i64 %v0_327ad, 24
  %v2_327d7 = inttoptr i64 %v1_327d7 to i64*
  %v3_327d7 = load i64, i64* %v2_327d7, align 8
  store i64 %v3_327d7, i64* @rdi, align 8
  store i64 %v0_327aa, i64* %rsi.global-to-local, align 8
  %v1_327de = inttoptr i64 %v3_327d7 to i64*
  %v2_327de = load i64, i64* %v1_327de, align 8
  store i64 %v2_327de, i64* @rax, align 8
  %v1_327e7 = add i64 %v0_327ad, 32
  %v2_327e7 = inttoptr i64 %v1_327e7 to i64*
  %v3_327e7 = load i64, i64* %v2_327e7, align 8
  store i64 %v3_327e7, i64* @rdi, align 8
  store i64 %v2_327de, i64* %r12.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_327f1 = inttoptr i64 %v3_327e7 to i64*
  %v2_327f1 = load i64, i64* %v1_327f1, align 8
  store i64 %v2_327f1, i64* @rax, align 8
  %v1_327fa = inttoptr i64 %v2_327f1 to i64*
  %v2_327fa = load i64, i64* %v1_327fa, align 8
  store i64 %v2_327fa, i64* @rdx, align 8
  store i64 %v2_327f1, i64* @rdi, align 8
  %v4_32806 = trunc i64 %v2_327f1 to i8
  %v5_32806 = icmp eq i8 %v4_32806, 0
  br i1 %v5_32806, label %dec_label_pc_32820, label %dec_label_pc_3280a

dec_label_pc_3280a:                               ; preds = %dec_label_pc_327a0
  %v0_3280a = load i64, i64* inttoptr (i64 206865 to i64*), align 8
  store i64 %v0_3280a, i64* @rax, align 8
  br label %dec_label_pc_32811

dec_label_pc_32811:                               ; preds = %dec_label_pc_32a02, %dec_label_pc_33040, %dec_label_pc_32d0e, %dec_label_pc_32cac, %dec_label_pc_32b23, %dec_label_pc_3280a
  %v0_3281f = phi i64 [ %v3_32a02, %dec_label_pc_32a02 ], [ %v2_32f82, %dec_label_pc_33040 ], [ %v0_3281f32, %dec_label_pc_32d0e ], [ %v0_32cf0, %dec_label_pc_32cac ], [ %v2_32b23, %dec_label_pc_32b23 ], [ %v0_3280a, %dec_label_pc_3280a ]
  store i64 %v0_327a9, i64* @rbx, align 8
  store i64 %v0_327a8, i64* %rbp.global-to-local, align 8
  store i64 %v0_327a6, i64* %r12.global-to-local, align 8
  store i64 %v0_327a4, i64* %r13.global-to-local, align 8
  store i64 %v0_327a2, i64* %r14.global-to-local, align 8
  store i64 %v0_327a0, i64* %r15.global-to-local, align 8
  ret i64 %v0_3281f

dec_label_pc_32820:                               ; preds = %dec_label_pc_327a0
  %v1_32820 = add i64 %v0_327ad, 40
  %v2_32820 = inttoptr i64 %v1_32820 to i64*
  %v3_32820 = load i64, i64* %v2_32820, align 8
  store i64 %v3_32820, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32827 = inttoptr i64 %v3_32820 to i64*
  %v2_32827 = load i64, i64* %v1_32827, align 8
  store i64 %v2_32827, i64* @rax, align 8
  %v1_32830 = inttoptr i64 %v2_32827 to i64*
  %v2_32830 = load i64, i64* %v1_32830, align 8
  store i64 %v2_32830, i64* @rdx, align 8
  store i64 %v2_32827, i64* @rdi, align 8
  %v4_3283c = trunc i64 %v2_32827 to i8
  %v5_3283c = icmp eq i8 %v4_3283c, 0
  br i1 %v5_3283c, label %dec_label_pc_32a20, label %dec_label_pc_32844

dec_label_pc_32844:                               ; preds = %dec_label_pc_32820
  %v0_32844 = load i64, i64* inttoptr (i64 206923 to i64*), align 8
  store i64 %v0_32844, i64* %rbp.global-to-local, align 8
  %v0_3284b = load i64, i64* inttoptr (i64 206930 to i64*), align 8
  store i64 %v0_3284b, i64* %r13.global-to-local, align 8
  %v3_3289f = load i64, i64* %v2_32820, align 8
  store i64 %v3_3289f, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_328a6 = inttoptr i64 %v3_3289f to i64*
  %v2_328a6 = load i64, i64* %v1_328a6, align 8
  store i64 %v2_328a6, i64* @rax, align 8
  %v1_328af = inttoptr i64 %v2_328a6 to i64*
  %v2_328af = load i64, i64* %v1_328af, align 8
  store i64 %v2_328af, i64* @rdx, align 8
  store i64 %v2_328a6, i64* @rdi, align 8
  %v4_328bb = trunc i64 %v2_328a6 to i8
  %v5_328bb = icmp eq i8 %v4_328bb, 0
  br i1 %v5_328bb, label %dec_label_pc_32968, label %dec_label_pc_328c3

dec_label_pc_32858:                               ; preds = %dec_label_pc_32d49, %dec_label_pc_32953, %dec_label_pc_32946
  %merge = phi i64 [ %v2_328df, %dec_label_pc_32953 ], [ %v2_328df, %dec_label_pc_32946 ], [ %v3_32d49, %dec_label_pc_32d49 ]
  ret i64 %merge

dec_label_pc_328c3:                               ; preds = %dec_label_pc_32844
  %v1_328c3 = add i64 %v0_327ad, 48
  %v2_328c3 = inttoptr i64 %v1_328c3 to i64*
  %v3_328c3 = load i64, i64* %v2_328c3, align 8
  store i64 %v3_328c3, i64* @rax, align 8
  %v1_328c7 = add i64 %v3_328c3, 8
  %v2_328c7 = inttoptr i64 %v1_328c7 to i32*
  %v3_328c7 = load i32, i32* %v2_328c7, align 4
  %v4_328c7 = zext i32 %v3_328c7 to i64
  store i64 %v4_328c7, i64* %r14.global-to-local, align 8
  %v5_328cb = icmp eq i32 %v3_328c7, 0
  br i1 %v5_328cb, label %dec_label_pc_32d05, label %dec_label_pc_328d4

dec_label_pc_328d4:                               ; preds = %dec_label_pc_328c3
  %v1_328d4 = add i64 %v0_327ad, 56
  %v2_328d4 = inttoptr i64 %v1_328d4 to i64*
  %v3_328d4 = load i64, i64* %v2_328d4, align 8
  store i64 %v3_328d4, i64* @rdi, align 8
  %v1_328d8 = add i64 %v3_328c3, 16
  %v2_328d8 = inttoptr i64 %v1_328d8 to i64*
  %v3_328d8 = load i64, i64* %v2_328d8, align 8
  store i64 %v3_328d8, i64* %r14.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_328df = inttoptr i64 %v3_328d4 to i64*
  %v2_328df = load i64, i64* %v1_328df, align 8
  store i64 %v2_328df, i64* @rax, align 8
  %v1_328e8 = inttoptr i64 %v2_328df to i64*
  %v2_328e8 = load i64, i64* %v1_328e8, align 8
  store i64 %v2_328e8, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_328df, i64* @rdi, align 8
  %v1_328f9 = inttoptr i64 %v3_328d8 to i64*
  %v2_328f9 = load i64, i64* %v1_328f9, align 8
  store i64 %v2_328f9, i64* @rdx, align 8
  store i64 %v2_328df, i64* %rsi.global-to-local, align 8
  store i64 %v3_328d8, i64* @rdi, align 8
  %v2_32908 = load i64, i64* %v1_328e8, align 8
  store i64 %v2_32908, i64* @rdx, align 8
  store i64 %v2_328df, i64* @rdi, align 8
  %v2_32911 = load i64, i64* %v1_328e8, align 8
  store i64 %v2_32911, i64* @rdx, align 8
  store i64 %v2_328df, i64* @rdi, align 8
  %v1_3291d = inttoptr i64 %v0_32844 to i64*
  %v2_3291d = load i64, i64* %v1_3291d, align 8
  store i64 %v2_3291d, i64* @rdx, align 8
  store i64 %v2_328df, i64* %rsi.global-to-local, align 8
  store i64 %v0_32844, i64* @rdi, align 8
  %v1_3292d = inttoptr i64 %v0_3284b to i64*
  %v2_3292d = load i64, i64* %v1_3292d, align 8
  store i64 %v2_3292d, i64* @rdx, align 8
  store i64 %v2_328df, i64* %rsi.global-to-local, align 8
  store i64 %v0_3284b, i64* @rdi, align 8
  %v1_3293d = icmp eq i64 %v2_328df, 0
  br i1 %v1_3293d, label %dec_label_pc_32cfe, label %dec_label_pc_32946

dec_label_pc_32946:                               ; preds = %dec_label_pc_328d4
  %v1_32946 = add i64 %v2_328df, 24
  %v2_32946 = inttoptr i64 %v1_32946 to i64*
  %v3_32946 = load i64, i64* %v2_32946, align 8
  store i64 %v3_32946, i64* %r13.global-to-local, align 8
  %v1_3294a = icmp eq i64 %v3_32946, 0
  %v1_3294d = icmp eq i1 %v1_3294a, false
  br i1 %v1_3294d, label %dec_label_pc_32858, label %dec_label_pc_32953

dec_label_pc_32953:                               ; preds = %dec_label_pc_32946
  store i64 %v2_328df, i64* @rdi, align 8
  store i64 %v2_328df, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_32858

dec_label_pc_32968:                               ; preds = %dec_label_pc_32844
  %v3_32968 = load i64, i64* %v2_327e7, align 8
  store i64 %v3_32968, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_3296f = inttoptr i64 %v3_32968 to i64*
  %v2_3296f = load i64, i64* %v1_3296f, align 8
  store i64 %v2_3296f, i64* @rax, align 8
  %v1_32978 = inttoptr i64 %v2_3296f to i64*
  %v2_32978 = load i64, i64* %v1_32978, align 8
  store i64 %v2_32978, i64* @rdx, align 8
  store i64 %v2_3296f, i64* @rdi, align 8
  %v4_32984 = trunc i64 %v2_3296f to i8
  %v5_32984 = icmp eq i8 %v4_32984, 0
  %v1_32986 = icmp eq i1 %v5_32984, false
  br i1 %v1_32986, label %dec_label_pc_32b23, label %dec_label_pc_3298c

dec_label_pc_3298c:                               ; preds = %dec_label_pc_32968
  %v1_3298c = add i64 %v0_327ad, 48
  %v2_3298c = inttoptr i64 %v1_3298c to i64*
  %v3_3298c = load i64, i64* %v2_3298c, align 8
  store i64 %v3_3298c, i64* @rax, align 8
  %v0_32990 = load i64, i64* inttoptr (i64 207255 to i64*), align 8
  store i64 %v0_32990, i64* %rbp.global-to-local, align 8
  %v1_32997 = add i64 %v3_3298c, 8
  %v2_32997 = inttoptr i64 %v1_32997 to i32*
  %v3_32997 = load i32, i32* %v2_32997, align 4
  %v4_32997 = zext i32 %v3_32997 to i64
  store i64 %v4_32997, i64* @r11, align 8
  %v5_3299b = icmp eq i32 %v3_32997, 0
  br i1 %v5_3299b, label %dec_label_pc_32d05, label %dec_label_pc_329a4

dec_label_pc_329a4:                               ; preds = %dec_label_pc_3298c
  %v1_329a4 = add i64 %v3_3298c, 16
  %v2_329a4 = inttoptr i64 %v1_329a4 to i64*
  %v3_329a4 = load i64, i64* %v2_329a4, align 8
  store i64 %v3_329a4, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_329ab = inttoptr i64 %v3_329a4 to i64*
  %v2_329ab = load i64, i64* %v1_329ab, align 8
  store i64 %v2_329ab, i64* @rax, align 8
  %v1_329b4 = inttoptr i64 %v0_32990 to i64*
  %v2_329b4 = load i64, i64* %v1_329b4, align 8
  store i64 %v2_329b4, i64* @rdx, align 8
  store i64 %v2_329ab, i64* %rsi.global-to-local, align 8
  store i64 %v0_32990, i64* @rdi, align 8
  %v0_329c4 = load i64, i64* inttoptr (i64 207307 to i64*), align 8
  store i64 %v0_329c4, i64* @rdi, align 8
  store i64 %v2_329ab, i64* @rbx, align 8
  %v1_329ce = inttoptr i64 %v0_329c4 to i64*
  %v2_329ce = load i64, i64* %v1_329ce, align 8
  store i64 %v2_329ce, i64* @rax, align 8
  %v1_329d7 = inttoptr i64 %v2_329ab to i64*
  %v2_329d7 = load i64, i64* %v1_329d7, align 8
  store i64 %v2_329d7, i64* @rdx, align 8
  store i64 %v2_329ce, i64* %rsi.global-to-local, align 8
  store i64 %v2_329ab, i64* @rdi, align 8
  %v1_329e6 = inttoptr i64 %v0_3284b to i64*
  %v2_329e6 = load i64, i64* %v1_329e6, align 8
  store i64 %v2_329e6, i64* @rdx, align 8
  store i64 %v2_329ce, i64* %rsi.global-to-local, align 8
  %v1_329f6 = icmp eq i64 %v2_329ce, 0
  store i64 %v2_329ce, i64* @rdi, align 8
  br i1 %v1_329f6, label %dec_label_pc_32cfe, label %dec_label_pc_32a02

dec_label_pc_32a02:                               ; preds = %dec_label_pc_329a4
  %v1_32a02 = add i64 %v2_329ce, 24
  %v2_32a02 = inttoptr i64 %v1_32a02 to i64*
  %v3_32a02 = load i64, i64* %v2_32a02, align 8
  store i64 %v3_32a02, i64* @rax, align 8
  br label %dec_label_pc_32811

dec_label_pc_32a20:                               ; preds = %dec_label_pc_32820
  %v1_32a20 = add i64 %v0_327ad, 72
  %v2_32a20 = inttoptr i64 %v1_32a20 to i64*
  %v3_32a20 = load i64, i64* %v2_32a20, align 8
  store i64 %v3_32a20, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32a27 = inttoptr i64 %v3_32a20 to i64*
  %v2_32a27 = load i64, i64* %v1_32a27, align 8
  store i64 %v2_32a27, i64* @rax, align 8
  %v1_32a30 = inttoptr i64 %v2_32a27 to i64*
  %v2_32a30 = load i64, i64* %v1_32a30, align 8
  store i64 %v2_32a30, i64* @rdx, align 8
  store i64 %v2_32a27, i64* @rdi, align 8
  %v4_32a3c = trunc i64 %v2_32a27 to i8
  %v5_32a3c = icmp eq i8 %v4_32a3c, 0
  br i1 %v5_32a3c, label %dec_label_pc_32b3c, label %dec_label_pc_32a44

dec_label_pc_32a44:                               ; preds = %dec_label_pc_32a20
  %v1_32a44 = add i64 %v0_327ad, 48
  %v2_32a44 = inttoptr i64 %v1_32a44 to i64*
  %v3_32a44 = load i64, i64* %v2_32a44, align 8
  store i64 %v3_32a44, i64* @rax, align 8
  %v0_32a48 = load i64, i64* inttoptr (i64 207439 to i64*), align 8
  store i64 %v0_32a48, i64* %rbp.global-to-local, align 8
  %v1_32a4f = add i64 %v3_32a44, 8
  %v2_32a4f = inttoptr i64 %v1_32a4f to i32*
  %v3_32a4f = load i32, i32* %v2_32a4f, align 4
  %v5_32a53 = icmp eq i32 %v3_32a4f, 0
  br i1 %v5_32a53, label %dec_label_pc_32d05, label %dec_label_pc_32a5c

dec_label_pc_32a5c:                               ; preds = %dec_label_pc_32a44
  %v1_32a5c = add i64 %v0_327ad, 88
  %v2_32a5c = inttoptr i64 %v1_32a5c to i64*
  %v3_32a5c = load i64, i64* %v2_32a5c, align 8
  store i64 %v3_32a5c, i64* @rdi, align 8
  %v1_32a60 = add i64 %v3_32a44, 16
  %v2_32a60 = inttoptr i64 %v1_32a60 to i64*
  %v3_32a60 = load i64, i64* %v2_32a60, align 8
  store i64 %v3_32a60, i64* %r13.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32a67 = add i64 %v0_327ad, 80
  %v2_32a67 = inttoptr i64 %v1_32a67 to i64*
  %v3_32a67 = load i64, i64* %v2_32a67, align 8
  store i64 %v3_32a67, i64* %r14.global-to-local, align 8
  %v1_32a6b = inttoptr i64 %v3_32a5c to i64*
  %v2_32a6b = load i64, i64* %v1_32a6b, align 8
  store i64 %v2_32a6b, i64* @rax, align 8
  %v1_32a74 = add i64 %v0_327ad, 96
  br label %dec_label_pc_32a7b

dec_label_pc_32a7b:                               ; preds = %dec_label_pc_32b74, %dec_label_pc_32a5c
  %storemerge18.in.in = phi i64 [ %v1_32a74, %dec_label_pc_32a5c ], [ %v1_32b8c, %dec_label_pc_32b74 ]
  %v0_32ac2 = phi i64 [ %v2_32a6b, %dec_label_pc_32a5c ], [ %v2_32b83, %dec_label_pc_32b74 ]
  %storemerge18.in = inttoptr i64 %storemerge18.in.in to i64*
  %storemerge18 = load i64, i64* %storemerge18.in, align 8
  store i64 %storemerge18, i64* @rdi, align 8
  store i64 %v0_32ac2, i64* %r15.global-to-local, align 8
  %v1_32a7b = inttoptr i64 %storemerge18 to i64*
  %v2_32a7b = load i64, i64* %v1_32a7b, align 8
  store i64 207502, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_32a7b, i64* %r12.global-to-local, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v3_32a9f = load i32, i32* inttoptr (i64 8 to i32*), align 8
  store i64 0, i64* @rbx, align 8
  %v5_32aa6 = icmp eq i32 %v3_32a9f, 0
  br i1 %v5_32aa6, label %dec_label_pc_32d05, label %dec_label_pc_32aaf

dec_label_pc_32aaf:                               ; preds = %dec_label_pc_32a7b
  store i64 0, i64* @rax, align 8
  store i64 %v2_32a7b, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  store i64 %v0_32ac2, i64* inttoptr (i64 16 to i64*), align 16
  %v0_32acb = load i64, i64* %r14.global-to-local, align 8
  %v1_32acb = inttoptr i64 %v0_32acb to i64*
  %v2_32acb = load i64, i64* %v1_32acb, align 8
  store i64 %v2_32acb, i64* @rdx, align 8
  store i64 %v0_32acb, i64* @rdi, align 8
  %v0_32ad1 = load i64, i64* @rax, align 8
  store i64 %v0_32ad1, i64* %rsi.global-to-local, align 8
  %v1_32ada = inttoptr i64 %v0_32ad1 to i64*
  %v2_32ada = load i64, i64* %v1_32ada, align 8
  store i64 %v2_32ada, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_32ad1, i64* @rdi, align 8
  %v0_32aeb = load i64, i64* %r13.global-to-local, align 8
  %v1_32aeb = inttoptr i64 %v0_32aeb to i64*
  %v2_32aeb = load i64, i64* %v1_32aeb, align 8
  store i64 %v2_32aeb, i64* @rdx, align 8
  store i64 %v0_32ad1, i64* %rsi.global-to-local, align 8
  store i64 %v0_32aeb, i64* @rdi, align 8
  %v2_32afb = load i64, i64* %v1_32ada, align 8
  store i64 %v2_32afb, i64* @rdx, align 8
  store i64 %v0_32ad1, i64* @rdi, align 8
  %v0_32b04 = load i64, i64* %rbp.global-to-local, align 8
  %v1_32b04 = inttoptr i64 %v0_32b04 to i64*
  %v2_32b04 = load i64, i64* %v1_32b04, align 8
  store i64 %v2_32b04, i64* @rdx, align 8
  store i64 %v0_32ad1, i64* %rsi.global-to-local, align 8
  store i64 %v0_32b04, i64* @rdi, align 8
  store i64 %v0_327a9, i64* @rbx, align 8
  store i64 %v0_327a8, i64* %rbp.global-to-local, align 8
  store i64 %v0_327a6, i64* %r12.global-to-local, align 8
  store i64 %v0_327a4, i64* %r13.global-to-local, align 8
  store i64 %v0_327a2, i64* %r14.global-to-local, align 8
  store i64 %v0_327a0, i64* %r15.global-to-local, align 8
  ret i64 %v0_32ad1

dec_label_pc_32b23:                               ; preds = %dec_label_pc_32968
  %v1_32b23 = inttoptr i64 %v0_3284b to i64*
  %v2_32b23 = load i64, i64* %v1_32b23, align 8
  store i64 %v2_32b23, i64* @rax, align 8
  %v0_32b27 = load i64, i64* inttoptr (i64 207662 to i64*), align 8
  store i64 %v0_32b27, i64* %rsi.global-to-local, align 8
  store i64 %v0_3284b, i64* @rdi, align 8
  br label %dec_label_pc_32811

dec_label_pc_32b3c:                               ; preds = %dec_label_pc_32a20
  %v1_32b3c = add i64 %v0_327ad, 104
  %v2_32b3c = inttoptr i64 %v1_32b3c to i64*
  %v3_32b3c = load i64, i64* %v2_32b3c, align 8
  store i64 %v3_32b3c, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32b43 = inttoptr i64 %v3_32b3c to i64*
  %v2_32b43 = load i64, i64* %v1_32b43, align 8
  store i64 %v2_32b43, i64* @rax, align 8
  %v1_32b4c = inttoptr i64 %v2_32b43 to i64*
  %v2_32b4c = load i64, i64* %v1_32b4c, align 8
  store i64 %v2_32b4c, i64* @rdx, align 8
  store i64 %v2_32b43, i64* @rdi, align 8
  %v4_32b58 = trunc i64 %v2_32b43 to i8
  %v5_32b58 = icmp eq i8 %v4_32b58, 0
  br i1 %v5_32b58, label %dec_label_pc_32b98, label %dec_label_pc_32b5c

dec_label_pc_32b5c:                               ; preds = %dec_label_pc_32b3c
  %v1_32b5c = add i64 %v0_327ad, 48
  %v2_32b5c = inttoptr i64 %v1_32b5c to i64*
  %v3_32b5c = load i64, i64* %v2_32b5c, align 8
  store i64 %v3_32b5c, i64* @rax, align 8
  %v0_32b60 = load i64, i64* inttoptr (i64 207719 to i64*), align 8
  store i64 %v0_32b60, i64* %rbp.global-to-local, align 8
  %v1_32b67 = add i64 %v3_32b5c, 8
  %v2_32b67 = inttoptr i64 %v1_32b67 to i32*
  %v3_32b67 = load i32, i32* %v2_32b67, align 4
  %v5_32b6b = icmp eq i32 %v3_32b67, 0
  br i1 %v5_32b6b, label %dec_label_pc_32d05, label %dec_label_pc_32b74

dec_label_pc_32b74:                               ; preds = %dec_label_pc_32b5c
  %v1_32b74 = add i64 %v0_327ad, 112
  %v2_32b74 = inttoptr i64 %v1_32b74 to i64*
  %v3_32b74 = load i64, i64* %v2_32b74, align 8
  store i64 %v3_32b74, i64* @rdi, align 8
  %v1_32b78 = add i64 %v3_32b5c, 16
  %v2_32b78 = inttoptr i64 %v1_32b78 to i64*
  %v3_32b78 = load i64, i64* %v2_32b78, align 8
  store i64 %v3_32b78, i64* %r13.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32b7f = add i64 %v0_327ad, 80
  %v2_32b7f = inttoptr i64 %v1_32b7f to i64*
  %v3_32b7f = load i64, i64* %v2_32b7f, align 8
  store i64 %v3_32b7f, i64* %r14.global-to-local, align 8
  %v1_32b83 = inttoptr i64 %v3_32b74 to i64*
  %v2_32b83 = load i64, i64* %v1_32b83, align 8
  store i64 %v2_32b83, i64* @rax, align 8
  %v1_32b8c = add i64 %v0_327ad, 120
  br label %dec_label_pc_32a7b

dec_label_pc_32b98:                               ; preds = %dec_label_pc_32b3c
  %v1_32b98 = add i64 %v0_327ad, 128
  %v2_32b98 = inttoptr i64 %v1_32b98 to i64*
  %v3_32b98 = load i64, i64* %v2_32b98, align 8
  store i64 %v3_32b98, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32ba2 = inttoptr i64 %v3_32b98 to i64*
  %v2_32ba2 = load i64, i64* %v1_32ba2, align 8
  store i64 %v2_32ba2, i64* @rax, align 8
  %v1_32bab = inttoptr i64 %v2_32ba2 to i64*
  %v2_32bab = load i64, i64* %v1_32bab, align 8
  store i64 %v2_32bab, i64* @rdx, align 8
  store i64 %v2_32ba2, i64* @rdi, align 8
  %v4_32bb7 = trunc i64 %v2_32ba2 to i8
  %v5_32bb7 = icmp eq i8 %v4_32bb7, 0
  %v1_32bb9 = icmp eq i1 %v5_32bb7, false
  br i1 %v1_32bb9, label %dec_label_pc_32d0e, label %dec_label_pc_32bbf

dec_label_pc_32bbf:                               ; preds = %dec_label_pc_32b98
  %v1_32bbf = add i64 %v0_327ad, 144
  %v2_32bbf = inttoptr i64 %v1_32bbf to i64*
  %v3_32bbf = load i64, i64* %v2_32bbf, align 8
  store i64 %v3_32bbf, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32bc9 = inttoptr i64 %v3_32bbf to i64*
  %v2_32bc9 = load i64, i64* %v1_32bc9, align 8
  store i64 %v2_32bc9, i64* @rax, align 8
  %v1_32bd2 = inttoptr i64 %v2_32bc9 to i64*
  %v2_32bd2 = load i64, i64* %v1_32bd2, align 8
  store i64 %v2_32bd2, i64* @rdx, align 8
  store i64 %v2_32bc9, i64* @rdi, align 8
  %v4_32bde = trunc i64 %v2_32bc9 to i8
  %v5_32bde = icmp eq i8 %v4_32bde, 0
  br i1 %v5_32bde, label %dec_label_pc_32d22, label %dec_label_pc_32be6

dec_label_pc_32be6:                               ; preds = %dec_label_pc_32bbf
  %v1_32be6 = add i64 %v0_327ad, 48
  %v2_32be6 = inttoptr i64 %v1_32be6 to i64*
  %v3_32be6 = load i64, i64* %v2_32be6, align 8
  store i64 %v3_32be6, i64* @rax, align 8
  %v0_32bea = load i64, i64* inttoptr (i64 207857 to i64*), align 8
  store i64 %v0_32bea, i64* %rbp.global-to-local, align 8
  %v1_32bf1 = add i64 %v3_32be6, 8
  %v2_32bf1 = inttoptr i64 %v1_32bf1 to i32*
  %v3_32bf1 = load i32, i32* %v2_32bf1, align 4
  %v4_32bf1 = zext i32 %v3_32bf1 to i64
  store i64 %v4_32bf1, i64* @rdi, align 8
  %v5_32bf4 = icmp eq i32 %v3_32bf1, 0
  br i1 %v5_32bf4, label %dec_label_pc_32d05, label %dec_label_pc_32bfc

dec_label_pc_32bfc:                               ; preds = %dec_label_pc_32be6
  %v1_32bfc = add i64 %v0_327ad, 160
  %v2_32bfc = inttoptr i64 %v1_32bfc to i64*
  %v3_32bfc = load i64, i64* %v2_32bfc, align 8
  store i64 %v3_32bfc, i64* @rdi, align 8
  %v1_32c03 = add i64 %v3_32be6, 16
  %v2_32c03 = inttoptr i64 %v1_32c03 to i64*
  %v3_32c03 = load i64, i64* %v2_32c03, align 8
  store i64 %v3_32c03, i64* %r13.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32c0a = add i64 %v0_327ad, 152
  %v2_32c0a = inttoptr i64 %v1_32c0a to i64*
  %v3_32c0a = load i64, i64* %v2_32c0a, align 8
  store i64 %v3_32c0a, i64* %r14.global-to-local, align 8
  %v1_32c11 = inttoptr i64 %v3_32bfc to i64*
  %v2_32c11 = load i64, i64* %v1_32c11, align 8
  store i64 %v2_32c11, i64* @rax, align 8
  %v1_32c1a = inttoptr i64 %v2_32c11 to i64*
  %v2_32c1a = load i64, i64* %v1_32c1a, align 8
  store i64 %v2_32c1a, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_32c11, i64* @rdi, align 8
  %v1_32c2b = inttoptr i64 %v3_32c0a to i64*
  %v2_32c2b = load i64, i64* %v1_32c2b, align 8
  store i64 %v2_32c2b, i64* @rdx, align 8
  store i64 %v2_32c11, i64* %rsi.global-to-local, align 8
  store i64 %v3_32c0a, i64* @rdi, align 8
  %v2_32c3a = load i64, i64* %v1_32c1a, align 8
  store i64 %v2_32c3a, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_32c11, i64* @rdi, align 8
  %v1_32c4b = inttoptr i64 %v3_32c03 to i64*
  %v2_32c4b = load i64, i64* %v1_32c4b, align 8
  store i64 %v2_32c4b, i64* @rdx, align 8
  store i64 %v2_32c11, i64* %rsi.global-to-local, align 8
  store i64 %v3_32c03, i64* @rdi, align 8
  %v2_32c5b = load i64, i64* %v1_32c1a, align 8
  store i64 %v2_32c5b, i64* @rdx, align 8
  store i64 %v2_32c11, i64* @rdi, align 8
  %v1_32c64 = inttoptr i64 %v0_32bea to i64*
  %v2_32c64 = load i64, i64* %v1_32c64, align 8
  store i64 %v2_32c64, i64* @rdx, align 8
  store i64 %v0_32bea, i64* @rdi, align 8
  store i64 %v2_32c11, i64* %rsi.global-to-local, align 8
  %v2_32c74 = load i64, i64* %v1_32c1a, align 8
  store i64 %v2_32c74, i64* @rdx, align 8
  %v0_32c77 = load i64, i64* inttoptr (i64 207998 to i64*), align 8
  store i64 %v0_32c77, i64* %rsi.global-to-local, align 8
  store i64 %v2_32c11, i64* @rdi, align 8
  store i64 %v2_32c11, i64* %rbp.global-to-local, align 8
  %v3_32c8a = load i64, i64* %v2_32be6, align 8
  store i64 %v3_32c8a, i64* @rax, align 8
  %v1_32c8e = add i64 %v3_32c8a, 8
  %v2_32c8e = inttoptr i64 %v1_32c8e to i32*
  %v3_32c8e = load i32, i32* %v2_32c8e, align 4
  %v4_32c8e = zext i32 %v3_32c8e to i64
  store i64 %v4_32c8e, i64* %rsi.global-to-local, align 8
  %v5_32c91 = icmp eq i32 %v3_32c8e, 0
  br i1 %v5_32c91, label %dec_label_pc_32d05, label %dec_label_pc_32c95

dec_label_pc_32c95:                               ; preds = %dec_label_pc_32bfc
  %v1_32c95 = add i64 %v0_327ad, 168
  %v2_32c95 = inttoptr i64 %v1_32c95 to i64*
  %v3_32c95 = load i64, i64* %v2_32c95, align 8
  store i64 %v3_32c95, i64* @rdi, align 8
  %v1_32c9c = add i64 %v3_32c8a, 16
  %v2_32c9c = inttoptr i64 %v1_32c9c to i64*
  %v3_32c9c = load i64, i64* %v2_32c9c, align 8
  store i64 %v3_32c9c, i64* %r13.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32ca3 = inttoptr i64 %v3_32c95 to i64*
  %v2_32ca3 = load i64, i64* %v1_32ca3, align 8
  store i64 %v2_32ca3, i64* @rax, align 8
  br label %dec_label_pc_32cac

dec_label_pc_32cac:                               ; preds = %dec_label_pc_32de3, %dec_label_pc_32c95
  %v0_32cd6 = phi i64 [ %v0_32cd625, %dec_label_pc_32de3 ], [ %v2_32c11, %dec_label_pc_32c95 ]
  %v0_32cbd = phi i64 [ %v0_32cbd23, %dec_label_pc_32de3 ], [ %v3_32c9c, %dec_label_pc_32c95 ]
  %v0_32cf0 = phi i64 [ %v2_32de3, %dec_label_pc_32de3 ], [ %v2_32ca3, %dec_label_pc_32c95 ]
  %v1_32cac = inttoptr i64 %v0_32cf0 to i64*
  %v2_32cac = load i64, i64* %v1_32cac, align 8
  store i64 %v2_32cac, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_32cf0, i64* @rdi, align 8
  %v1_32cbd = inttoptr i64 %v0_32cbd to i64*
  %v2_32cbd = load i64, i64* %v1_32cbd, align 8
  store i64 %v2_32cbd, i64* @rdx, align 8
  store i64 %v0_32cf0, i64* %rsi.global-to-local, align 8
  store i64 %v0_32cbd, i64* @rdi, align 8
  %v2_32ccd = load i64, i64* %v1_32cac, align 8
  store i64 %v2_32ccd, i64* @rdx, align 8
  store i64 %v0_32cf0, i64* @rdi, align 8
  %v1_32cd6 = inttoptr i64 %v0_32cd6 to i64*
  %v2_32cd6 = load i64, i64* %v1_32cd6, align 8
  store i64 %v2_32cd6, i64* @rdx, align 8
  store i64 %v0_32cd6, i64* @rdi, align 8
  store i64 %v0_32cf0, i64* %rsi.global-to-local, align 8
  %v2_32ce6 = load i64, i64* %v1_32cac, align 8
  store i64 %v2_32ce6, i64* @rdx, align 8
  %v0_32ce9 = load i64, i64* inttoptr (i64 208112 to i64*), align 16
  store i64 %v0_32ce9, i64* %rsi.global-to-local, align 8
  store i64 %v0_32cf0, i64* @rdi, align 8
  br label %dec_label_pc_32811

dec_label_pc_32cfe:                               ; preds = %dec_label_pc_329a4, %dec_label_pc_328d4
  %v0_32d0e26 = phi i64 [ %v2_329ab, %dec_label_pc_329a4 ], [ %v0_327ad, %dec_label_pc_328d4 ]
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_32d05

dec_label_pc_32d05:                               ; preds = %dec_label_pc_32fb4, %dec_label_pc_32f9f, %dec_label_pc_32eec, %dec_label_pc_32e50, %dec_label_pc_32e3b, %dec_label_pc_32d49, %dec_label_pc_32cfe, %dec_label_pc_32bfc, %dec_label_pc_32be6, %dec_label_pc_32b5c, %dec_label_pc_32a7b, %dec_label_pc_32a44, %dec_label_pc_3298c, %dec_label_pc_328c3
  %v0_32d1530 = phi i64 [ %v2_327de, %dec_label_pc_32fb4 ], [ %v2_327de, %dec_label_pc_32f9f ], [ %v2_327de, %dec_label_pc_32eec ], [ %v2_327de, %dec_label_pc_32e50 ], [ %v2_327de, %dec_label_pc_32e3b ], [ %v2_327de, %dec_label_pc_32d49 ], [ %v2_327de, %dec_label_pc_32cfe ], [ %v2_327de, %dec_label_pc_32bfc ], [ %v2_327de, %dec_label_pc_32be6 ], [ %v2_327de, %dec_label_pc_32b5c ], [ %v2_32a7b, %dec_label_pc_32a7b ], [ %v2_327de, %dec_label_pc_32a44 ], [ %v2_327de, %dec_label_pc_3298c ], [ %v2_327de, %dec_label_pc_328c3 ]
  %v0_32d0e28 = phi i64 [ %v0_327ad, %dec_label_pc_32fb4 ], [ %v0_327ad, %dec_label_pc_32f9f ], [ %v0_327ad, %dec_label_pc_32eec ], [ %v0_327ad, %dec_label_pc_32e50 ], [ %v0_327ad, %dec_label_pc_32e3b ], [ %v0_327ad, %dec_label_pc_32d49 ], [ %v0_32d0e26, %dec_label_pc_32cfe ], [ %v0_327ad, %dec_label_pc_32bfc ], [ %v0_327ad, %dec_label_pc_32be6 ], [ %v0_327ad, %dec_label_pc_32b5c ], [ 0, %dec_label_pc_32a7b ], [ %v0_327ad, %dec_label_pc_32a44 ], [ %v0_327ad, %dec_label_pc_3298c ], [ %v0_327ad, %dec_label_pc_328c3 ]
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_32d0e

dec_label_pc_32d0e:                               ; preds = %dec_label_pc_32d05, %dec_label_pc_32b98
  %v0_3281f32 = phi i64 [ 0, %dec_label_pc_32d05 ], [ %v2_32ba2, %dec_label_pc_32b98 ]
  %v0_32d15 = phi i64 [ %v0_32d1530, %dec_label_pc_32d05 ], [ %v2_327de, %dec_label_pc_32b98 ]
  %v0_32d0e = phi i64 [ %v0_32d0e28, %dec_label_pc_32d05 ], [ %v0_327ad, %dec_label_pc_32b98 ]
  %v1_32d0e = add i64 %v0_32d0e, 136
  %v2_32d0e = inttoptr i64 %v1_32d0e to i64*
  %v3_32d0e = load i64, i64* %v2_32d0e, align 8
  store i64 %v3_32d0e, i64* @rdi, align 8
  store i64 %v0_32d15, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_32811

dec_label_pc_32d22:                               ; preds = %dec_label_pc_32bbf
  %v1_32d22 = add i64 %v0_327ad, 176
  %v2_32d22 = inttoptr i64 %v1_32d22 to i64*
  %v3_32d22 = load i64, i64* %v2_32d22, align 8
  store i64 %v3_32d22, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32d2c = inttoptr i64 %v3_32d22 to i64*
  %v2_32d2c = load i64, i64* %v1_32d2c, align 8
  store i64 %v2_32d2c, i64* @rax, align 8
  %v1_32d35 = inttoptr i64 %v2_32d2c to i64*
  %v2_32d35 = load i64, i64* %v1_32d35, align 8
  store i64 %v2_32d35, i64* @rdx, align 8
  store i64 %v2_32d2c, i64* @rdi, align 8
  %v4_32d41 = trunc i64 %v2_32d2c to i8
  %v5_32d41 = icmp eq i8 %v4_32d41, 0
  br i1 %v5_32d41, label %dec_label_pc_32e14, label %dec_label_pc_32d49

dec_label_pc_32d49:                               ; preds = %dec_label_pc_32d22
  %v1_32d49 = add i64 %v0_327ad, 48
  %v2_32d49 = inttoptr i64 %v1_32d49 to i64*
  %v3_32d49 = load i64, i64* %v2_32d49, align 8
  store i64 %v3_32d49, i64* @rax, align 8
  %v0_32d4d = load i64, i64* inttoptr (i64 208212 to i64*), align 8
  store i64 %v0_32d4d, i64* %rbp.global-to-local, align 8
  %v1_32d54 = add i64 %v3_32d49, 8
  %v2_32d54 = inttoptr i64 %v1_32d54 to i32*
  %v3_32d54 = load i32, i32* %v2_32d54, align 4
  %v4_32d54 = zext i32 %v3_32d54 to i64
  store i64 %v4_32d54, i64* @rcx, align 8
  %v5_32d57 = icmp eq i32 %v3_32d54, 0
  br i1 %v5_32d57, label %dec_label_pc_32d05, label %dec_label_pc_32858

dec_label_pc_32de3:                               ; preds = %dec_label_pc_33029, %dec_label_pc_32f61
  %v0_32cd625 = phi i64 [ %v2_32efa, %dec_label_pc_32f61 ], [ %v2_32fc2, %dec_label_pc_33029 ]
  %v0_32cbd23 = phi i64 [ %v3_32f61, %dec_label_pc_32f61 ], [ %v3_33029, %dec_label_pc_33029 ]
  %v0_32e00 = phi i64 [ %v3_32f65, %dec_label_pc_32f61 ], [ %v3_3302d, %dec_label_pc_33029 ]
  %storemerge19.in.in = phi i64 [ %v1_32f6c, %dec_label_pc_32f61 ], [ %v1_33034, %dec_label_pc_33029 ]
  %storemerge19.in = inttoptr i64 %storemerge19.in.in to i64*
  %storemerge19 = load i64, i64* %storemerge19.in, align 8
  store i64 %storemerge19, i64* @rdi, align 8
  %v1_32de3 = inttoptr i64 %storemerge19 to i64*
  %v2_32de3 = load i64, i64* %v1_32de3, align 8
  store i64 %v2_32de3, i64* @rax, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32def = inttoptr i64 %v2_32de3 to i64*
  %v2_32def = load i64, i64* %v1_32def, align 8
  store i64 %v2_32def, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_32de3, i64* @rdi, align 8
  %v1_32e00 = inttoptr i64 %v0_32e00 to i64*
  %v2_32e00 = load i64, i64* %v1_32e00, align 8
  store i64 %v2_32e00, i64* @rdx, align 8
  store i64 %v2_32de3, i64* %rsi.global-to-local, align 8
  store i64 %v0_32e00, i64* @rdi, align 8
  br label %dec_label_pc_32cac

dec_label_pc_32e14:                               ; preds = %dec_label_pc_32d22
  %v1_32e14 = add i64 %v0_327ad, 208
  %v2_32e14 = inttoptr i64 %v1_32e14 to i64*
  %v3_32e14 = load i64, i64* %v2_32e14, align 8
  store i64 %v3_32e14, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32e1e = inttoptr i64 %v3_32e14 to i64*
  %v2_32e1e = load i64, i64* %v1_32e1e, align 8
  store i64 %v2_32e1e, i64* @rax, align 8
  %v1_32e27 = inttoptr i64 %v2_32e1e to i64*
  %v2_32e27 = load i64, i64* %v1_32e27, align 8
  store i64 %v2_32e27, i64* @rdx, align 8
  store i64 %v2_32e1e, i64* @rdi, align 8
  %v4_32e33 = trunc i64 %v2_32e1e to i8
  %v5_32e33 = icmp eq i8 %v4_32e33, 0
  br i1 %v5_32e33, label %dec_label_pc_32f78, label %dec_label_pc_32e3b

dec_label_pc_32e3b:                               ; preds = %dec_label_pc_32e14
  %v1_32e3b = add i64 %v0_327ad, 48
  %v2_32e3b = inttoptr i64 %v1_32e3b to i64*
  %v3_32e3b = load i64, i64* %v2_32e3b, align 8
  store i64 %v3_32e3b, i64* @rax, align 8
  %v0_32e3f = load i64, i64* inttoptr (i64 208454 to i64*), align 8
  store i64 %v0_32e3f, i64* %rbp.global-to-local, align 8
  %v1_32e46 = add i64 %v3_32e3b, 8
  %v2_32e46 = inttoptr i64 %v1_32e46 to i32*
  %v3_32e46 = load i32, i32* %v2_32e46, align 4
  %v10_32e46 = icmp eq i32 %v3_32e46, 0
  br i1 %v10_32e46, label %dec_label_pc_32d05, label %dec_label_pc_32e50

dec_label_pc_32e50:                               ; preds = %dec_label_pc_32e3b
  %v1_32e50 = add i64 %v0_327ad, 216
  %v2_32e50 = inttoptr i64 %v1_32e50 to i64*
  %v3_32e50 = load i64, i64* %v2_32e50, align 8
  store i64 %v3_32e50, i64* @rdi, align 8
  %v1_32e57 = add i64 %v3_32e3b, 16
  %v2_32e57 = inttoptr i64 %v1_32e57 to i64*
  %v3_32e57 = load i64, i64* %v2_32e57, align 8
  store i64 %v3_32e57, i64* %r13.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32e5e = add i64 %v0_327ad, 152
  %v2_32e5e = inttoptr i64 %v1_32e5e to i64*
  %v3_32e5e = load i64, i64* %v2_32e5e, align 8
  store i64 %v3_32e5e, i64* %r14.global-to-local, align 8
  %v1_32e65 = inttoptr i64 %v3_32e50 to i64*
  %v2_32e65 = load i64, i64* %v1_32e65, align 8
  store i64 %v2_32e65, i64* @rax, align 8
  %v1_32e6e = inttoptr i64 %v2_32e65 to i64*
  %v2_32e6e = load i64, i64* %v1_32e6e, align 8
  store i64 %v2_32e6e, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_32e65, i64* @rdi, align 8
  %v1_32e7f = inttoptr i64 %v3_32e5e to i64*
  %v2_32e7f = load i64, i64* %v1_32e7f, align 8
  store i64 %v2_32e7f, i64* @rdx, align 8
  store i64 %v2_32e65, i64* %rsi.global-to-local, align 8
  store i64 %v3_32e5e, i64* @rdi, align 8
  %v2_32e8e = load i64, i64* %v1_32e6e, align 8
  store i64 %v2_32e8e, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_32e65, i64* @rdi, align 8
  %v1_32e9f = inttoptr i64 %v3_32e57 to i64*
  %v2_32e9f = load i64, i64* %v1_32e9f, align 8
  store i64 %v2_32e9f, i64* @rdx, align 8
  store i64 %v2_32e65, i64* %rsi.global-to-local, align 8
  store i64 %v3_32e57, i64* @rdi, align 8
  %v2_32eaf = load i64, i64* %v1_32e6e, align 8
  store i64 %v2_32eaf, i64* @rdx, align 8
  store i64 %v2_32e65, i64* @rdi, align 8
  %v1_32eb8 = inttoptr i64 %v0_32e3f to i64*
  %v2_32eb8 = load i64, i64* %v1_32eb8, align 8
  store i64 %v2_32eb8, i64* @rdx, align 8
  store i64 %v0_32e3f, i64* @rdi, align 8
  store i64 %v2_32e65, i64* %rsi.global-to-local, align 8
  %v2_32ec8 = load i64, i64* %v1_32e6e, align 8
  store i64 %v2_32ec8, i64* @rdx, align 8
  %v0_32ecb = load i64, i64* inttoptr (i64 208594 to i64*), align 8
  store i64 %v0_32ecb, i64* %rsi.global-to-local, align 8
  store i64 %v2_32e65, i64* @rdi, align 8
  store i64 %v2_32e65, i64* %rbp.global-to-local, align 8
  %v3_32ede = load i64, i64* %v2_32e3b, align 8
  store i64 %v3_32ede, i64* @rax, align 8
  %v1_32ee2 = add i64 %v3_32ede, 8
  %v2_32ee2 = inttoptr i64 %v1_32ee2 to i32*
  %v3_32ee2 = load i32, i32* %v2_32ee2, align 4
  %v10_32ee2 = icmp eq i32 %v3_32ee2, 0
  br i1 %v10_32ee2, label %dec_label_pc_32d05, label %dec_label_pc_32eec

dec_label_pc_32eec:                               ; preds = %dec_label_pc_32e50
  %v1_32eec = add i64 %v0_327ad, 224
  %v2_32eec = inttoptr i64 %v1_32eec to i64*
  %v3_32eec = load i64, i64* %v2_32eec, align 8
  store i64 %v3_32eec, i64* @rdi, align 8
  %v1_32ef3 = add i64 %v3_32ede, 16
  %v2_32ef3 = inttoptr i64 %v1_32ef3 to i64*
  %v3_32ef3 = load i64, i64* %v2_32ef3, align 8
  store i64 %v3_32ef3, i64* %r13.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32efa = inttoptr i64 %v3_32eec to i64*
  %v2_32efa = load i64, i64* %v1_32efa, align 8
  store i64 %v2_32efa, i64* @rax, align 8
  %v1_32f03 = inttoptr i64 %v2_32efa to i64*
  %v2_32f03 = load i64, i64* %v1_32f03, align 8
  store i64 %v2_32f03, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_32efa, i64* @rdi, align 8
  %v1_32f14 = inttoptr i64 %v3_32ef3 to i64*
  %v2_32f14 = load i64, i64* %v1_32f14, align 8
  store i64 %v2_32f14, i64* @rdx, align 8
  store i64 %v2_32efa, i64* %rsi.global-to-local, align 8
  store i64 %v3_32ef3, i64* @rdi, align 8
  %v2_32f24 = load i64, i64* %v1_32f03, align 8
  store i64 %v2_32f24, i64* @rdx, align 8
  store i64 %v2_32efa, i64* @rdi, align 8
  %v2_32f2d = load i64, i64* %v1_32e6e, align 8
  store i64 %v2_32f2d, i64* @rdx, align 8
  store i64 %v2_32e65, i64* @rdi, align 8
  store i64 %v2_32efa, i64* %rsi.global-to-local, align 8
  %v2_32f3d = load i64, i64* %v1_32f03, align 8
  store i64 %v2_32f3d, i64* @rdx, align 8
  %v0_32f40 = load i64, i64* inttoptr (i64 208711 to i64*), align 8
  store i64 %v0_32f40, i64* %rsi.global-to-local, align 8
  store i64 %v2_32efa, i64* @rdi, align 8
  store i64 %v2_32efa, i64* %rbp.global-to-local, align 8
  %v3_32f53 = load i64, i64* %v2_32e3b, align 8
  store i64 %v3_32f53, i64* @rax, align 8
  %v1_32f57 = add i64 %v3_32f53, 8
  %v2_32f57 = inttoptr i64 %v1_32f57 to i32*
  %v3_32f57 = load i32, i32* %v2_32f57, align 4
  %v10_32f57 = icmp eq i32 %v3_32f57, 0
  br i1 %v10_32f57, label %dec_label_pc_32d05, label %dec_label_pc_32f61

dec_label_pc_32f61:                               ; preds = %dec_label_pc_32eec
  %v1_32f61 = add i64 %v3_32f53, 16
  %v2_32f61 = inttoptr i64 %v1_32f61 to i64*
  %v3_32f61 = load i64, i64* %v2_32f61, align 8
  store i64 %v3_32f61, i64* %r13.global-to-local, align 8
  %v1_32f65 = add i64 %v0_327ad, 192
  %v2_32f65 = inttoptr i64 %v1_32f65 to i64*
  %v3_32f65 = load i64, i64* %v2_32f65, align 8
  store i64 %v3_32f65, i64* %r14.global-to-local, align 8
  %v1_32f6c = add i64 %v0_327ad, 232
  br label %dec_label_pc_32de3

dec_label_pc_32f78:                               ; preds = %dec_label_pc_32e14
  %v1_32f78 = add i64 %v0_327ad, 240
  %v2_32f78 = inttoptr i64 %v1_32f78 to i64*
  %v3_32f78 = load i64, i64* %v2_32f78, align 8
  store i64 %v3_32f78, i64* @rdi, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32f82 = inttoptr i64 %v3_32f78 to i64*
  %v2_32f82 = load i64, i64* %v1_32f82, align 8
  store i64 %v2_32f82, i64* @rax, align 8
  %v1_32f8b = inttoptr i64 %v2_32f82 to i64*
  %v2_32f8b = load i64, i64* %v1_32f8b, align 8
  store i64 %v2_32f8b, i64* @rdx, align 8
  store i64 %v2_32f82, i64* @rdi, align 8
  %v4_32f97 = trunc i64 %v2_32f82 to i8
  %v5_32f97 = icmp eq i8 %v4_32f97, 0
  br i1 %v5_32f97, label %dec_label_pc_33040, label %dec_label_pc_32f9f

dec_label_pc_32f9f:                               ; preds = %dec_label_pc_32f78
  %v1_32f9f = add i64 %v0_327ad, 48
  %v2_32f9f = inttoptr i64 %v1_32f9f to i64*
  %v3_32f9f = load i64, i64* %v2_32f9f, align 8
  store i64 %v3_32f9f, i64* @rax, align 8
  %v0_32fa3 = load i64, i64* inttoptr (i64 208810 to i64*), align 8
  store i64 %v0_32fa3, i64* %rbp.global-to-local, align 8
  %v1_32faa = add i64 %v3_32f9f, 8
  %v2_32faa = inttoptr i64 %v1_32faa to i32*
  %v3_32faa = load i32, i32* %v2_32faa, align 4
  %v10_32faa = icmp eq i32 %v3_32faa, 0
  br i1 %v10_32faa, label %dec_label_pc_32d05, label %dec_label_pc_32fb4

dec_label_pc_32fb4:                               ; preds = %dec_label_pc_32f9f
  %v1_32fb4 = add i64 %v0_327ad, 248
  %v2_32fb4 = inttoptr i64 %v1_32fb4 to i64*
  %v3_32fb4 = load i64, i64* %v2_32fb4, align 8
  store i64 %v3_32fb4, i64* @rdi, align 8
  %v1_32fbb = add i64 %v3_32f9f, 16
  %v2_32fbb = inttoptr i64 %v1_32fbb to i64*
  %v3_32fbb = load i64, i64* %v2_32fbb, align 8
  store i64 %v3_32fbb, i64* %r13.global-to-local, align 8
  store i64 %v2_327de, i64* %rsi.global-to-local, align 8
  %v1_32fc2 = inttoptr i64 %v3_32fb4 to i64*
  %v2_32fc2 = load i64, i64* %v1_32fc2, align 8
  store i64 %v2_32fc2, i64* @rax, align 8
  %v1_32fcb = inttoptr i64 %v2_32fc2 to i64*
  %v2_32fcb = load i64, i64* %v1_32fcb, align 8
  store i64 %v2_32fcb, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_32fc2, i64* @rdi, align 8
  %v1_32fdc = inttoptr i64 %v3_32fbb to i64*
  %v2_32fdc = load i64, i64* %v1_32fdc, align 8
  store i64 %v2_32fdc, i64* @rdx, align 8
  store i64 %v2_32fc2, i64* %rsi.global-to-local, align 8
  store i64 %v3_32fbb, i64* @rdi, align 8
  %v2_32fec = load i64, i64* %v1_32fcb, align 8
  store i64 %v2_32fec, i64* @rdx, align 8
  store i64 %v2_32fc2, i64* @rdi, align 8
  %v1_32ff5 = inttoptr i64 %v0_32fa3 to i64*
  %v2_32ff5 = load i64, i64* %v1_32ff5, align 8
  store i64 %v2_32ff5, i64* @rdx, align 8
  store i64 %v0_32fa3, i64* @rdi, align 8
  store i64 %v2_32fc2, i64* %rsi.global-to-local, align 8
  %v2_33005 = load i64, i64* %v1_32fcb, align 8
  store i64 %v2_33005, i64* @rdx, align 8
  %v0_33008 = load i64, i64* inttoptr (i64 208911 to i64*), align 8
  store i64 %v0_33008, i64* %rsi.global-to-local, align 8
  store i64 %v2_32fc2, i64* @rdi, align 8
  store i64 %v2_32fc2, i64* %rbp.global-to-local, align 8
  %v3_3301b = load i64, i64* %v2_32f9f, align 8
  store i64 %v3_3301b, i64* @rax, align 8
  %v1_3301f = add i64 %v3_3301b, 8
  %v2_3301f = inttoptr i64 %v1_3301f to i32*
  %v3_3301f = load i32, i32* %v2_3301f, align 4
  %v10_3301f = icmp eq i32 %v3_3301f, 0
  br i1 %v10_3301f, label %dec_label_pc_32d05, label %dec_label_pc_33029

dec_label_pc_33029:                               ; preds = %dec_label_pc_32fb4
  %v1_33029 = add i64 %v3_3301b, 16
  %v2_33029 = inttoptr i64 %v1_33029 to i64*
  %v3_33029 = load i64, i64* %v2_33029, align 8
  store i64 %v3_33029, i64* %r13.global-to-local, align 8
  %v1_3302d = add i64 %v0_327ad, 192
  %v2_3302d = inttoptr i64 %v1_3302d to i64*
  %v3_3302d = load i64, i64* %v2_3302d, align 8
  store i64 %v3_3302d, i64* %r14.global-to-local, align 8
  %v1_33034 = add i64 %v0_327ad, 256
  br label %dec_label_pc_32de3

dec_label_pc_33040:                               ; preds = %dec_label_pc_32f78
  %v1_33040 = add i64 %v0_327ad, ptrtoint (i64* @global_var_108.7479 to i64)
  %v2_33040 = inttoptr i64 %v1_33040 to i64*
  %v3_33040 = load i64, i64* %v2_33040, align 8
  store i64 %v3_33040, i64* @rdi, align 8
  %v0_33047 = load i64, i64* inttoptr (i64 208974 to i64*), align 8
  store i64 %v0_33047, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_32811
}

define i64 @_ZN3org4luaj3vm28LuaTable6rehashEJvi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_33060:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3306a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3306a, i64* @rbx, align 8
  %v0_33070 = load i64, i64* @rdi, align 8
  %v1_33070 = add i64 %v0_33070, 32
  %v2_33070 = inttoptr i64 %v1_33070 to i64*
  %v3_33070 = load i64, i64* %v2_33070, align 8
  store i64 %v3_33070, i64* %rbp.global-to-local, align 8
  %v1_33079 = icmp eq i64 %v3_33070, 0
  br i1 %v1_33079, label %dec_label_pc_33060.dec_label_pc_3318c_crit_edge, label %dec_label_pc_33082

dec_label_pc_33060.dec_label_pc_3318c_crit_edge:  ; preds = %dec_label_pc_33060
  %v4_33186.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3318c

dec_label_pc_33082:                               ; preds = %dec_label_pc_33060
  store i64 209037, i64* %rsi.global-to-local, align 8
  store i64 1, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_33070, i64* @rdi, align 8
  %v2_330a3 = call i64 @function_33822(i64 ptrtoint (i32* @0 to i64))
  store i64 %v0_33070, i64* @rax, align 8
  %v1_330c0 = add i64 %v0_33070, 16
  %v2_330c0 = inttoptr i64 %v1_330c0 to i64*
  %v3_330c0 = load i64, i64* %v2_330c0, align 8
  store i64 %v3_330c0, i64* @rax, align 8
  %v1_330c4 = add i64 %v3_330c0, 8
  %v2_330c4 = inttoptr i64 %v1_330c4 to i32*
  %v3_330c4 = load i32, i32* %v2_330c4, align 4
  %v4_330c4 = zext i32 %v3_330c4 to i64
  store i64 %v4_330c4, i64* @rdi, align 8
  %v1_330c7 = add i64 %v3_330c0, 16
  store i64 %v1_330c7, i64* @rcx, align 8
  %tmp271 = icmp slt i32 %v3_330c4, 1
  br i1 %tmp271, label %dec_label_pc_33158, label %dec_label_pc_330d8

dec_label_pc_330d8:                               ; preds = %dec_label_pc_33082, %dec_label_pc_3313e
  %v0_3313222 = phi i64 [ %v0_33141, %dec_label_pc_3313e ], [ %v3_330c0, %dec_label_pc_33082 ]
  %v0_330db = phi i64 [ %v1_33141, %dec_label_pc_3313e ], [ %v1_330c7, %dec_label_pc_33082 ]
  %v0_33135 = phi i64 [ %v17_33135, %dec_label_pc_3313e ], [ 0, %dec_label_pc_33082 ]
  store i64 %v0_33135, i64* @rdx, align 8
  %v2_330db = mul nuw nsw i64 %v0_33135, 8
  %v3_330db = add i64 %v2_330db, %v0_330db
  %v4_330db = inttoptr i64 %v3_330db to i64*
  %v5_330db = load i64, i64* %v4_330db, align 8
  store i64 %v5_330db, i64* %rbp.global-to-local, align 8
  %v1_330df = icmp eq i64 %v5_330db, 0
  br i1 %v1_330df, label %dec_label_pc_33132, label %dec_label_pc_330e8

dec_label_pc_330e8:                               ; preds = %dec_label_pc_330d8
  store i64 2, i64* @rdx, align 8
  store i64 209083, i64* %rsi.global-to-local, align 8
  store i64 5, i64* @rdx, align 8
  store i64 209083, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v5_330db, i64* @rdi, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  %v3_3312e = load i64, i64* %v2_330c0, align 8
  store i64 %v3_3312e, i64* @rax, align 8
  br label %dec_label_pc_33132

dec_label_pc_33132:                               ; preds = %dec_label_pc_330e8, %dec_label_pc_330d8
  %v0_33141 = phi i64 [ %v3_3312e, %dec_label_pc_330e8 ], [ %v0_3313222, %dec_label_pc_330d8 ]
  %v1_33132 = add i64 %v0_33141, 8
  %v2_33132 = inttoptr i64 %v1_33132 to i32*
  %v3_33132 = load i32, i32* %v2_33132, align 4
  %v4_33132 = zext i32 %v3_33132 to i64
  store i64 %v4_33132, i64* @rdx, align 8
  %v1_33135 = trunc i64 %v0_33135 to i32
  %v2_33135 = add i32 %v1_33135, 1
  %v7_3313c = icmp ugt i32 %v3_33132, %v2_33135
  br i1 %v7_3313c, label %dec_label_pc_3313e, label %dec_label_pc_33158.loopexit

dec_label_pc_3313e:                               ; preds = %dec_label_pc_33132
  %v17_33135 = zext i32 %v2_33135 to i64
  %v1_33141 = add i64 %v0_33141, 16
  store i64 %v1_33141, i64* @rcx, align 8
  br label %dec_label_pc_330d8

dec_label_pc_33158.loopexit:                      ; preds = %dec_label_pc_33132
  br label %dec_label_pc_33158

dec_label_pc_33158:                               ; preds = %dec_label_pc_33158.loopexit, %dec_label_pc_33082
  store i64 %v0_33070, i64* @rax, align 8
  store i64 209252, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rdx, align 8
  %v3_33169 = load i64, i64* %v2_33070, align 8
  store i64 %v3_33169, i64* %rbp.global-to-local, align 8
  %v3_3316d = add i64 %v0_33070, 24
  %v4_3316d = inttoptr i64 %v3_3316d to i32*
  store i32 0, i32* %v4_3316d, align 4
  %v0_33171 = load i64, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_33171, i64* @rdi, align 8
  br label %dec_label_pc_3318c

dec_label_pc_3318c:                               ; preds = %dec_label_pc_33060.dec_label_pc_3318c_crit_edge, %dec_label_pc_33158
  %v4_33186 = phi i64 [ %v4_33186.pre, %dec_label_pc_33060.dec_label_pc_3318c_crit_edge ], [ 0, %dec_label_pc_33158 ]
  ret i64 %v4_33186
}

define i64 @function_33305(i64 %arg1) local_unnamed_addr {
dec_label_pc_33305:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %tmp32 = call i32 @__decompiler_undefined_function_2()
  %tmp36 = call i32 @__decompiler_undefined_function_2()
  %v0_33305 = load i64, i64* @rax, align 8
  %v1_33326 = add i64 %arg1, 16
  store i64 %v1_33326, i64* @rax, align 8
  %v4_3341c = zext i32 %tmp36 to i64
  %v4_3342b = add i64 %arg1, 8
  %v5_3342b = inttoptr i64 %v4_3342b to i32*
  %v1_3344f = inttoptr i64 %v1_33326 to i64*
  %v4_334a1 = sext i32 %tmp32 to i64
  %v3_334ac = add nsw i64 %v4_334a1, 8
  %v4_334ac = inttoptr i64 %v3_334ac to i32*
  br label %dec_label_pc_33330

dec_label_pc_33330:                               ; preds = %dec_label_pc_33490, %dec_label_pc_33305
  %stack_var_36.0 = phi i32 [ 0, %dec_label_pc_33305 ], [ %v4_33490, %dec_label_pc_33490 ]
  %stack_var_40.0 = phi i64 [ %v0_33305, %dec_label_pc_33305 ], [ %v4_334a6, %dec_label_pc_33490 ]
  store i64 %stack_var_40.0, i64* @rax, align 8
  %v1_33335 = inttoptr i64 %stack_var_40.0 to i64*
  %v2_33335 = load i64, i64* %v1_33335, align 8
  store i64 %v2_33335, i64* @rbx, align 8
  %v1_33338 = icmp eq i64 %v2_33335, 0
  %v1_3333b = icmp eq i1 %v1_33338, false
  br i1 %v1_3333b, label %dec_label_pc_3340d, label %dec_label_pc_33490

dec_label_pc_333b8:                               ; preds = %dec_label_pc_33434, %bb44
  %v1_33486 = phi i64 [ %v1_33486.pre, %bb44 ], [ %v1_33326, %dec_label_pc_33434 ]
  %v0_33486 = phi i64 [ %v0_3347c.pre, %bb44 ], [ 0, %dec_label_pc_33434 ]
  %v2_33486 = inttoptr i64 %v1_33486 to i64*
  store i64 %v0_33486, i64* %v2_33486, align 8
  %v0_333b8.pre = load i64, i64* @rbx, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_333b8.pre, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_33490

dec_label_pc_3340d:                               ; preds = %dec_label_pc_33330
  store i64 0, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rdx, align 8
  store i64 %v2_33335, i64* @rdi, align 8
  store i64 0, i64* @rcx, align 8
  store i64 %arg1, i64* @rax, align 8
  %v6_3342b = load i32, i32* %v5_3342b, align 4
  %v12_3342b = icmp ne i32 %v6_3342b, 0
  %v1_3342e = icmp eq i1 %v12_3342b, false
  br i1 %v1_3342e, label %bb, label %dec_label_pc_33434

bb:                                               ; preds = %dec_label_pc_3340d
  %v7_3342e = call i64 @function_33857(i64 %v2_33335, i64 %v4_3341c, i64 1, i64 0)
  store i64 %v7_3342e, i64* @rax, align 8
  %v0_3344c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_33434

dec_label_pc_33434:                               ; preds = %bb, %dec_label_pc_3340d
  %v0_33460 = phi i64 [ %v0_3344c.pre, %bb ], [ %v2_33335, %dec_label_pc_3340d ]
  store i64 0, i64* @rax, align 8
  store i64 %v1_33326, i64* @rcx, align 8
  store i64 10, i64* @rdx, align 8
  store i64 %v1_33326, i64* %r13.global-to-local, align 8
  %v1_3344c = inttoptr i64 %v0_33460 to i64*
  %v2_3344c = load i64, i64* %v1_3344c, align 8
  store i64 %v2_3344c, i64* @rax, align 8
  %v2_3344f = load i64, i64* %v1_3344f, align 8
  store i64 %v0_33460, i64* @rdi, align 8
  store i64 0, i64* %r14.global-to-local, align 8
  store i64 %arg1, i64* @rax, align 8
  store i64 0, i64* @rcx, align 8
  %v6_33470 = load i32, i32* %v5_3342b, align 4
  %v12_33470 = icmp ne i32 %v6_33470, 0
  %v1_33473 = icmp eq i1 %v12_33470, false
  br i1 %v1_33473, label %bb44, label %dec_label_pc_333b8

bb44:                                             ; preds = %dec_label_pc_33434
  %v7_33473 = call i64 @function_33857(i64 %v0_33460, i64 %v2_3344f, i64 10, i64 0)
  store i64 %v7_33473, i64* @rax, align 8
  %v0_3347c.pre = load i64, i64* %r14.global-to-local, align 8
  %v1_33486.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_333b8

dec_label_pc_33490:                               ; preds = %dec_label_pc_33330, %dec_label_pc_333b8
  %v4_33490 = add i32 %stack_var_36.0, 1
  %v4_33495 = zext i32 %v4_33490 to i64
  store i64 %v4_33495, i64* @rcx, align 8
  store i64 %v4_334a1, i64* @rax, align 8
  %v4_334a6 = add i64 %stack_var_40.0, 8
  %v5_334ac = load i32, i32* %v4_334ac, align 4
  %v11_334ac = icmp ult i32 %v4_33490, %v5_334ac
  br i1 %v11_334ac, label %dec_label_pc_33330, label %dec_label_pc_334b5

dec_label_pc_334b5:                               ; preds = %dec_label_pc_33490
  store i64 %v4_33495, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_334c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_334c0:
  %r8.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %tmp250 = call i32 @__decompiler_undefined_function_2()
  %tmp254 = call i32 @__decompiler_undefined_function_2()
  %tmp255 = call i64 @__decompiler_undefined_function_0()
  %v4_334c5 = zext i32 %tmp254 to i64
  store i64 %v4_334c5, i64* @rdx, align 8
  %v0_334c9 = load i64, i64* inttoptr (i64 210128 to i64*), align 16
  store i64 %v0_334c9, i64* @rcx, align 8
  %v1_334d8 = add i64 %tmp255, 16
  store i64 %v1_334d8, i64* @rax, align 8
  %v5_334dc = icmp eq i32 %tmp254, 0
  %v6_334dc = icmp slt i32 %tmp254, 0
  %v3_334e2 = icmp eq i1 %v6_334dc, false
  %v4_334e2 = icmp eq i1 %v5_334dc, false
  %v5_334e2 = icmp eq i1 %v3_334e2, %v4_334e2
  br i1 %v5_334e2, label %bb, label %dec_label_pc_334e8

bb:                                               ; preds = %dec_label_pc_334c0
  %v7_334e2 = call i64 @function_33305(i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_334e2, i64* @rax, align 8
  br label %dec_label_pc_334e8

dec_label_pc_334e8:                               ; preds = %bb, %dec_label_pc_334c0
  %v4_334e8 = sext i32 %tmp250 to i64
  store i64 %v4_334e8, i64* @rax, align 8
  %v0_334ed = load i64, i64* @r12, align 8
  %v1_334ed = add i64 %v0_334ed, 257
  store i64 %v1_334ed, i64* @rbx, align 8
  %v1_334fa = add nsw i64 %v4_334e8, 8
  %v2_334fa = inttoptr i64 %v1_334fa to i32*
  %v3_334fa = load i32, i32* %v2_334fa, align 4
  %v4_334fa = zext i32 %v3_334fa to i64
  store i64 %v4_334fa, i64* %r8.global-to-local, align 8
  %v1_33502 = add i64 %v0_334c9, 16
  store i64 %v1_33502, i64* @rax, align 8
  %v1_335e1 = add nsw i64 %v4_334e8, 16
  br label %dec_label_pc_335ce

dec_label_pc_335c8:                               ; preds = %dec_label_pc_335ee
  %v0_335c8 = load i64, i64* @rbx, align 8
  %v2_335c8 = add i64 %v0_335c8, 1
  %v17_335c8 = and i64 %v2_335c8, 4294967295
  store i64 %v17_335c8, i64* @rbx, align 8
  %v0_335cb = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_335cb, i64* @r12, align 8
  %v2_335ce.pre = load i64, i64* %r8.global-to-local, align 8
  br label %dec_label_pc_335ce

dec_label_pc_335ce:                               ; preds = %dec_label_pc_335c8, %dec_label_pc_334e8
  %v2_335ce = phi i64 [ %v2_335ce.pre, %dec_label_pc_335c8 ], [ %v4_334fa, %dec_label_pc_334e8 ]
  %v0_335ce = phi i64 [ %v0_335cb, %dec_label_pc_335c8 ], [ %v0_334ed, %dec_label_pc_334e8 ]
  %v5_335d1 = icmp slt i64 %v0_335ce, %v2_335ce
  br i1 %v5_335d1, label %dec_label_pc_335d7, label %bb260

bb260:                                            ; preds = %dec_label_pc_335ce
  %v7_335d1 = call i64 @function_33730(i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_335d1, i64* @rax, align 8
  %v0_335dc.pre = load i64, i64* @r12, align 8
  %v0_335e5.pre = load i64, i64* %r8.global-to-local, align 8
  br label %dec_label_pc_335d7

dec_label_pc_335d7:                               ; preds = %dec_label_pc_335ce, %bb260
  %v0_335e5 = phi i64 [ %v2_335ce, %dec_label_pc_335ce ], [ %v0_335e5.pre, %bb260 ]
  %v2_335e5 = phi i64 [ %v0_335ce, %dec_label_pc_335ce ], [ %v0_335dc.pre, %bb260 ]
  %v1_335dc = add i64 %v2_335e5, 1
  store i64 %v1_335dc, i64* %rbp.global-to-local, align 8
  store i64 %v1_335e1, i64* @rax, align 8
  %v1_335e5 = trunc i64 %v0_335e5 to i32
  %v3_335e5 = trunc i64 %v2_335e5 to i32
  %tmp262 = icmp ugt i32 %v1_335e5, %v3_335e5
  br i1 %tmp262, label %dec_label_pc_335ee, label %bb261

bb261:                                            ; preds = %dec_label_pc_335d7
  %v3_335e8 = call i64 @function_338cf()
  store i64 %v3_335e8, i64* @rax, align 8
  %v1_335f1.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_335ee

dec_label_pc_335ee:                               ; preds = %dec_label_pc_335d7, %bb261
  %v1_335f1 = phi i64 [ %v1_335f1.pre, %bb261 ], [ %v2_335e5, %dec_label_pc_335d7 ]
  %v0_335f1 = phi i64 [ %v3_335e8, %bb261 ], [ %v1_335e1, %dec_label_pc_335d7 ]
  %v2_335f1 = mul i64 %v1_335f1, 8
  %v3_335f1 = add i64 %v2_335f1, %v0_335f1
  %v4_335f1 = inttoptr i64 %v3_335f1 to i64*
  %v5_335f1 = load i64, i64* %v4_335f1, align 8
  %v1_335f5 = icmp eq i64 %v5_335f1, 0
  br i1 %v1_335f5, label %dec_label_pc_335c8, label %dec_label_pc_335fa

dec_label_pc_335fa:                               ; preds = %dec_label_pc_335ee
  store i64 210447, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_336e5(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_336e5:
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  %v0_336f0 = load i64, i64* @r12, align 8
  store i64 %v0_336f0, i64* @rdi, align 8
  %v0_336f8 = load i64, i64* %r14.global-to-local, align 8
  %v1_336f8 = add i64 %v0_336f8, 8
  %v2_336f8 = inttoptr i64 %v1_336f8 to i32*
  %v3_336f8 = load i32, i32* %v2_336f8, align 4
  store i64 0, i64* %r15.global-to-local, align 8
  %v4_33702 = sext i32 %v3_336f8 to i64
  %v6_33702 = icmp slt i64 %v4_33702, %v0_336f0
  br i1 %v6_33702, label %bb, label %dec_label_pc_33708

bb:                                               ; preds = %dec_label_pc_336e5
  %v15_33702 = call i64 @function_3386a(i64 %v0_336f0, i64 210668, i64 0, i64 %arg4, i64 %v4_33702, i64 ptrtoint (i32* @0 to i64))
  store i64 %v15_33702, i64* @rax, align 8
  br label %dec_label_pc_33708

dec_label_pc_33708:                               ; preds = %bb, %dec_label_pc_336e5
  %v0_3372b5 = phi i64 [ %v15_33702, %bb ], [ 0, %dec_label_pc_336e5 ]
  %v9_33708 = icmp sgt i64 %v4_33702, %v0_336f0
  br i1 %v9_33708, label %bb254, label %dec_label_pc_3370e

bb254:                                            ; preds = %dec_label_pc_33708
  %v11_33708 = call i64 @function_337b5(i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_33708, i64* @rax, align 8
  br label %dec_label_pc_3370e

dec_label_pc_3370e:                               ; preds = %bb254, %dec_label_pc_33708
  %v0_3372b = phi i64 [ %v11_33708, %bb254 ], [ %v0_3372b5, %dec_label_pc_33708 ]
  store i64 %arg5, i64* @rdi, align 8
  %v0_33716 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_33716, i64* @rdx, align 8
  ret i64 %v0_3372b
}

define i64 @function_33730(i64 %arg1) local_unnamed_addr {
dec_label_pc_33730:
  %r15.global-to-local = alloca i64, align 8
  %tmp7 = call i32 @__decompiler_undefined_function_2()
  %tmp10 = call i64 @__decompiler_undefined_function_0()
  %v2_3373e = add i64 %tmp10, 16
  %v3_3373e = inttoptr i64 %v2_3373e to i64*
  store i64 %arg1, i64* %v3_3373e, align 8
  %v4_33742 = zext i32 %tmp7 to i64
  store i64 %v4_33742, i64* @rcx, align 8
  %v0_33746 = load i64, i64* @rax, align 8
  %v1_33746 = add i64 %v0_33746, 24
  %v2_33746 = inttoptr i64 %v1_33746 to i32*
  %v3_33746 = load i32, i32* %v2_33746, align 4
  %v6_33746 = sub i32 %v3_33746, %tmp7
  store i32 %v6_33746, i32* %v2_33746, align 4
  %v0_33749 = load i64, i64* %r15.global-to-local, align 8
  %v1_33749 = load i64, i64* @rax, align 8
  %v2_33749 = add i64 %v1_33749, 8
  %v3_33749 = inttoptr i64 %v2_33749 to i64*
  store i64 %v0_33749, i64* %v3_33749, align 8
  %v0_3375b = load i64, i64* @rax, align 8
  ret i64 %v0_3375b
}

define i64 @function_3375c(i64 %arg1) local_unnamed_addr {
dec_label_pc_3375c:
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_3377e() local_unnamed_addr {
dec_label_pc_3377e:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v1_3377e = add i64 %tmp232, 32
  %v2_3377e = inttoptr i64 %v1_3377e to i64*
  %v3_3377e = load i64, i64* %v2_3377e, align 8
  store i64 6, i64* @rdx, align 8
  %v1_3378a = inttoptr i64 %v3_3377e to i64*
  %v2_3378a = load i64, i64* %v1_3378a, align 8
  store i64 %v2_3378a, i64* @rax, align 8
  %v1_3378e = inttoptr i64 %v2_3378a to i64*
  %v2_3378e = load i64, i64* %v1_3378e, align 8
  store i64 %v2_3378e, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_337b5(i64 %arg1) local_unnamed_addr {
dec_label_pc_337b5:
  %v0_337b5 = load i64, i64* @r12, align 8
  %v1_337b5 = add i64 %v0_337b5, 1
  store i64 %v1_337b5, i64* @rdi, align 8
  %v0_337bf = load i64, i64* @rax, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_337c7 = add i64 %arg1, 8
  %v2_337c7 = inttoptr i64 %v1_337c7 to i32*
  %v3_337c7 = load i32, i32* %v2_337c7, align 4
  %v4_337c7 = zext i32 %v3_337c7 to i64
  store i64 %v4_337c7, i64* @rdi, align 8
  %v2_337cf = add i64 %arg1, 1
  %v17_337cf = and i64 %v2_337cf, 4294967295
  store i64 %v17_337cf, i64* @rax, align 8
  %v5_337d5 = icmp slt i64 %v0_337bf, %v17_337cf
  br i1 %v5_337d5, label %dec_label_pc_337d7, label %dec_label_pc_33814

dec_label_pc_337d7:                               ; preds = %dec_label_pc_337b5
  %v0_337d7 = load i64, i64* @rbp, align 8
  %v1_337d7 = add i64 %v0_337d7, 8
  %v2_337d7 = inttoptr i64 %v1_337d7 to i32*
  %v3_337d7 = load i32, i32* %v2_337d7, align 4
  %v4_337d7 = zext i32 %v3_337d7 to i64
  store i64 %v4_337d7, i64* @rcx, align 8
  store i64 %v0_337bf, i64* @rdx, align 8
  %v0_337ea = load i64, i64* @r13, align 8
  %v2_337ea = mul i64 %v0_337bf, 4
  %v3_337ea = add i64 %v0_337ea, %v2_337ea
  br label %dec_label_pc_33805

dec_label_pc_33805:                               ; preds = %dec_label_pc_33805, %dec_label_pc_337d7
  %v0_33805 = phi i64 [ %v0_337bf, %dec_label_pc_337d7 ], [ %v17_33805, %dec_label_pc_33805 ]
  %v0_337f8 = phi i64 [ %v3_337ea, %dec_label_pc_337d7 ], [ %v1_337f8, %dec_label_pc_33805 ]
  store i64 %v0_337f8, i64* @rdx, align 8
  %v2_33805 = add i64 %v0_33805, 1
  %v17_33805 = and i64 %v2_33805, 4294967295
  %v8_3380e = icmp ugt i64 %v17_337cf, %v17_33805
  %v1_337f8 = add i64 %v0_337f8, 4
  br i1 %v8_3380e, label %dec_label_pc_33805, label %dec_label_pc_33814.loopexit

dec_label_pc_33814.loopexit:                      ; preds = %dec_label_pc_33805
  br label %dec_label_pc_33814

dec_label_pc_33814:                               ; preds = %dec_label_pc_33814.loopexit, %dec_label_pc_337b5
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_33822(i64 %arg1) local_unnamed_addr {
dec_label_pc_33822:
  store i64 %arg1, i64* @rax, align 8
  store i64 2, i64* @rdx, align 8
  %v1_33833 = add i64 %arg1, 32
  %v2_33833 = inttoptr i64 %v1_33833 to i64*
  %v3_33833 = load i64, i64* %v2_33833, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_33833, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_33857(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_33857:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_33860() local_unnamed_addr {
dec_label_pc_33860:
  %v0_33860 = load i64, i64* @r13, align 8
  store i64 %v0_33860, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3386a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_3386a:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_33873 = load i64, i64* @r12, align 8
  store i64 %v0_33873, i64* @rdi, align 8
  %v0_33876 = load i64, i64* @rax, align 8
  %v1_3387e = add i64 %v0_33876, 1
  store i64 %v1_3387e, i64* @rdx, align 8
  %v0_33886 = load i64, i64* @rbp, align 8
  %v1_33886 = add i64 %v0_33886, 8
  %v2_33886 = inttoptr i64 %v1_33886 to i32*
  %v3_33886 = load i32, i32* %v2_33886, align 4
  %v4_33886 = zext i32 %v3_33886 to i64
  store i64 %v4_33886, i64* @rcx, align 8
  %v0_33899 = load i64, i64* @r13, align 8
  %v2_33899 = mul i64 %v0_33876, 4
  %v3_33899 = add i64 %v0_33899, %v2_33899
  br label %dec_label_pc_338ad

dec_label_pc_338ad:                               ; preds = %dec_label_pc_338ad, %dec_label_pc_3386a
  %v0_338b1 = phi i64 [ %arg6, %dec_label_pc_3386a ], [ %v21_338b1, %dec_label_pc_338ad ]
  %v0_338ad = phi i64 [ %v0_33876, %dec_label_pc_3386a ], [ %v17_338ad, %dec_label_pc_338ad ]
  %storemerge = phi i64 [ %v3_33899, %dec_label_pc_3386a ], [ %v1_338a0, %dec_label_pc_338ad ]
  store i64 %storemerge, i64* @rax, align 8
  %v2_338ad = add i64 %v0_338ad, 1
  %v17_338ad = and i64 %v2_338ad, 4294967295
  %v1_338b1 = trunc i64 %v0_338b1 to i32
  %v3_338b1 = inttoptr i64 %storemerge to i32*
  %v4_338b1 = load i32, i32* %v3_338b1, align 4
  %v5_338b1 = add i32 %v4_338b1, %v1_338b1
  %v21_338b1 = zext i32 %v5_338b1 to i64
  %v8_338b6 = icmp sgt i64 %v1_3387e, %v17_338ad
  %v1_338a0 = add i64 %storemerge, 4
  br i1 %v8_338b6, label %dec_label_pc_338ad, label %dec_label_pc_338b8

dec_label_pc_338b8:                               ; preds = %dec_label_pc_338ad
  ret i64 %storemerge
}

define i64 @function_338bd() local_unnamed_addr {
dec_label_pc_338bd:
  %v0_338bd = load i64, i64* @rax, align 8
  store i64 %v0_338bd, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_338c6(i64 %arg1) local_unnamed_addr {
dec_label_pc_338c6:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_338cf() local_unnamed_addr {
dec_label_pc_338cf:
  %v0_338d9 = load i64, i64* @rbx, align 8
  store i64 %v0_338d9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable12setmetatableEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_338f0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_338f0 = load i64, i64* %r15.global-to-local, align 8
  %v0_338f2 = load i64, i64* %r14.global-to-local, align 8
  %v0_338f4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_338f4, i64* %r14.global-to-local, align 8
  %v0_338f7 = load i64, i64* %r13.global-to-local, align 8
  %v0_338f9 = load i64, i64* %r12.global-to-local, align 8
  %v0_338fb = load i64, i64* %rbp.global-to-local, align 8
  %v0_338fc = load i64, i64* @rbx, align 8
  %v0_338fd = load i64, i64* @rdi, align 8
  store i64 %v0_338fd, i64* @rbx, align 8
  %v1_33904 = add i64 %v0_338fd, 32
  %v2_33904 = inttoptr i64 %v1_33904 to i64*
  %v3_33904 = load i64, i64* %v2_33904, align 8
  store i64 %v3_33904, i64* %rbp.global-to-local, align 8
  %v1_33908 = icmp eq i64 %v3_33904, 0
  br i1 %v1_33908, label %dec_label_pc_339d0, label %dec_label_pc_33911

dec_label_pc_33911:                               ; preds = %dec_label_pc_338f0
  store i64 211228, i64* %rsi.global-to-local, align 8
  store i64 1, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_33904, i64* @rdi, align 8
  %v3_33930 = load i64, i64* %v2_33904, align 8
  store i64 %v3_33930, i64* %rbp.global-to-local, align 8
  store i64 0, i64* %r13.global-to-local, align 8
  store i64 0, i64* %r15.global-to-local, align 8
  %v1_3393b = icmp eq i64 %v3_33930, 0
  br i1 %v1_3393b, label %dec_label_pc_33a29, label %dec_label_pc_33944

dec_label_pc_33944:                               ; preds = %dec_label_pc_33911
  store i64 211279, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_33930, i64* @rdi, align 8
  br label %dec_label_pc_339c0

dec_label_pc_339a2:                               ; preds = %dec_label_pc_33a1b, %dec_label_pc_339c0
  store i64 0, i64* %rsi.global-to-local, align 8
  %v0_339a4 = load i64, i64* @rbx, align 8
  store i64 %v0_339a4, i64* @rdi, align 8
  br label %dec_label_pc_339ac

dec_label_pc_339ac:                               ; preds = %dec_label_pc_33a1b, %dec_label_pc_339d0, %dec_label_pc_339a2
  %v0_339ac = load i64, i64* @rbx, align 8
  store i64 %v0_339ac, i64* @rax, align 8
  store i64 %v0_338fc, i64* @rbx, align 8
  store i64 %v0_338fb, i64* %rbp.global-to-local, align 8
  store i64 %v0_338f9, i64* %r12.global-to-local, align 8
  store i64 %v0_338f7, i64* %r13.global-to-local, align 8
  store i64 %v0_338f2, i64* %r14.global-to-local, align 8
  store i64 %v0_338f0, i64* %r15.global-to-local, align 8
  ret i64 %v0_339ac

dec_label_pc_339c0:                               ; preds = %dec_label_pc_33944, %dec_label_pc_33a29
  store i64 0, i64* %r12.global-to-local, align 8
  store i64 %v0_338f4, i64* @rdi, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  store i64 0, i64* %v2_33904, align 8
  %v0_339c0 = load i64, i64* %r15.global-to-local, align 8
  %v4_339c0 = trunc i64 %v0_339c0 to i8
  %v5_339c0 = icmp eq i8 %v4_339c0, 0
  %v1_339c3 = icmp eq i1 %v5_339c0, false
  br i1 %v1_339c3, label %dec_label_pc_339a2, label %dec_label_pc_339c0.dec_label_pc_339c5_crit_edge

dec_label_pc_339c0.dec_label_pc_339c5_crit_edge:  ; preds = %dec_label_pc_339c0
  %v0_33a1b.pre.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_339c5

dec_label_pc_339c5:                               ; preds = %dec_label_pc_339c0.dec_label_pc_339c5_crit_edge, %dec_label_pc_339f0
  %v0_33a1b.pre = phi i64 [ %v0_33a1b.pre.pre, %dec_label_pc_339c0.dec_label_pc_339c5_crit_edge ], [ 0, %dec_label_pc_339f0 ]
  br label %dec_label_pc_33a1b

dec_label_pc_339d0:                               ; preds = %dec_label_pc_338f0
  store i64 %v0_338f4, i64* @rdi, align 8
  %v0_339d8 = load i64, i64* @rax, align 8
  %v1_339d8 = icmp eq i64 %v0_339d8, 0
  store i64 %v0_339d8, i64* %rbp.global-to-local, align 8
  store i64 %v0_339d8, i64* %v2_33904, align 8
  br i1 %v1_339d8, label %dec_label_pc_339ac, label %dec_label_pc_339f0

dec_label_pc_339f0:                               ; preds = %dec_label_pc_339d0
  store i64 0, i64* %r13.global-to-local, align 8
  store i64 0, i64* %r12.global-to-local, align 8
  %v0_3397b = load i64, i64* %rbp.global-to-local, align 8
  store i64 211334, i64* %rsi.global-to-local, align 8
  store i64 1, i64* @rdx, align 8
  store i64 %v0_3397b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_339f0 = load i64, i64* @rbx, align 8
  %v1_339f0 = add i64 %v0_339f0, 32
  %v2_339f0 = inttoptr i64 %v1_339f0 to i64*
  %v3_339f0 = load i64, i64* %v2_339f0, align 8
  store i64 %v3_339f0, i64* %rbp.global-to-local, align 8
  %v1_339f4 = icmp eq i64 %v3_339f0, 0
  br i1 %v1_339f4, label %dec_label_pc_339c5, label %dec_label_pc_339f9

dec_label_pc_339f9:                               ; preds = %dec_label_pc_339f0
  store i64 211460, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v3_339f0, i64* @rdi, align 8
  br label %dec_label_pc_33a1b

dec_label_pc_33a1b:                               ; preds = %dec_label_pc_339f9, %dec_label_pc_339c5
  %v0_33a1b = phi i64 [ 0, %dec_label_pc_339f9 ], [ %v0_33a1b.pre, %dec_label_pc_339c5 ]
  store i64 0, i64* @rax, align 8
  %v1_33a1b = trunc i64 %v0_33a1b to i32
  %v14_33a1b = icmp eq i32 %v1_33a1b, 0
  %v1_33a1e = icmp eq i1 %v14_33a1b, false
  br i1 %v1_33a1e, label %dec_label_pc_339a2, label %dec_label_pc_339ac

dec_label_pc_33a29:                               ; preds = %dec_label_pc_33911
  br label %dec_label_pc_339c0
}

define i64 @"_ZN4lang14lang_luaj$67$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_33a40:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_33a40 = load i64, i64* %r13.global-to-local, align 8
  %v0_33a42 = load i64, i64* %r12.global-to-local, align 8
  %v0_33a44 = load i64, i64* %rbp.global-to-local, align 8
  %v0_33a45 = load i64, i64* @rbx, align 8
  %v0_33a46 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_33a46, i64* @rbx, align 8
  %v0_33a49 = load i64, i64* @rdi, align 8
  store i64 %v0_33a49, i64* %rbp.global-to-local, align 8
  store i64 %v0_33a46, i64* %r12.global-to-local, align 8
  store i64 1, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v0_33a46, i64* @rdi, align 8
  %v1_33a72 = add i64 %v0_33a49, 24
  %v2_33a72 = inttoptr i64 %v1_33a72 to i64*
  %v3_33a72 = load i64, i64* %v2_33a72, align 8
  store i64 %v3_33a72, i64* @rax, align 8
  %v1_33a76 = add i64 %v3_33a72, 8
  %v2_33a76 = inttoptr i64 %v1_33a76 to i32*
  %v3_33a76 = load i32, i32* %v2_33a76, align 4
  %v4_33a76 = zext i32 %v3_33a76 to i64
  store i64 %v4_33a76, i64* @rdx, align 8
  %v5_33a79 = icmp eq i32 %v3_33a76, 0
  br i1 %v5_33a79, label %bb, label %dec_label_pc_33a81

bb:                                               ; preds = %dec_label_pc_33a40
  %v2_33a7b = call i64 @function_33bd4(i64 %v0_33a46)
  store i64 %v2_33a7b, i64* @rax, align 8
  %v0_33a85.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_33a91.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_33a81

dec_label_pc_33a81:                               ; preds = %bb, %dec_label_pc_33a40
  %v0_33b09 = phi i64 [ %v0_33a91.pre, %bb ], [ %v0_33a49, %dec_label_pc_33a40 ]
  %v0_33a85 = phi i64 [ %v0_33a85.pre, %bb ], [ %v0_33a46, %dec_label_pc_33a40 ]
  %v0_33a81 = phi i64 [ %v2_33a7b, %bb ], [ %v3_33a72, %dec_label_pc_33a40 ]
  %v1_33a81 = add i64 %v0_33a81, 16
  %v2_33a81 = inttoptr i64 %v1_33a81 to i64*
  %v3_33a81 = load i64, i64* %v2_33a81, align 8
  store i64 %v3_33a81, i64* @rdi, align 8
  store i64 %v0_33a85, i64* %rsi.global-to-local, align 8
  %v1_33a88 = inttoptr i64 %v3_33a81 to i64*
  %v2_33a88 = load i64, i64* %v1_33a88, align 8
  store i64 %v2_33a88, i64* @rax, align 8
  %v1_33a91 = add i64 %v0_33b09, 32
  %v2_33a91 = inttoptr i64 %v1_33a91 to i64*
  %v3_33a91 = load i64, i64* %v2_33a91, align 8
  store i64 %v3_33a91, i64* @rdi, align 8
  store i64 %v2_33a88, i64* %r12.global-to-local, align 8
  store i64 %v2_33a88, i64* %rsi.global-to-local, align 8
  %v1_33a9b = inttoptr i64 %v3_33a91 to i64*
  %v2_33a9b = load i64, i64* %v1_33a9b, align 8
  store i64 %v2_33a9b, i64* @rax, align 8
  %v1_33aa4 = inttoptr i64 %v2_33a9b to i64*
  %v2_33aa4 = load i64, i64* %v1_33aa4, align 8
  store i64 %v2_33aa4, i64* @rdx, align 8
  store i64 %v2_33a9b, i64* @rdi, align 8
  %v4_33ab0 = trunc i64 %v2_33a9b to i8
  %v5_33ab0 = icmp eq i8 %v4_33ab0, 0
  %v1_33ab2 = icmp eq i1 %v5_33ab0, false
  br i1 %v1_33ab2, label %dec_label_pc_33b00, label %dec_label_pc_33ab4

dec_label_pc_33ab4:                               ; preds = %dec_label_pc_33a81
  %v1_33ab4 = add i64 %v0_33b09, 56
  %v2_33ab4 = inttoptr i64 %v1_33ab4 to i64*
  %v3_33ab4 = load i64, i64* %v2_33ab4, align 8
  store i64 %v3_33ab4, i64* @rdi, align 8
  store i64 %v2_33a88, i64* %rsi.global-to-local, align 8
  %v1_33abb = inttoptr i64 %v3_33ab4 to i64*
  %v2_33abb = load i64, i64* %v1_33abb, align 8
  store i64 %v2_33abb, i64* @rax, align 8
  %v1_33ac4 = inttoptr i64 %v2_33abb to i64*
  %v2_33ac4 = load i64, i64* %v1_33ac4, align 8
  store i64 %v2_33ac4, i64* @rdx, align 8
  store i64 %v2_33abb, i64* @rdi, align 8
  %v4_33ad0 = trunc i64 %v2_33abb to i8
  %v5_33ad0 = icmp eq i8 %v4_33ad0, 0
  %v1_33ad2 = icmp eq i1 %v5_33ad0, false
  br i1 %v1_33ad2, label %dec_label_pc_33ae8, label %dec_label_pc_33ad4

dec_label_pc_33ad4:                               ; preds = %dec_label_pc_33ab4
  %v1_33ad4 = add i64 %v0_33b09, 72
  %v2_33ad4 = inttoptr i64 %v1_33ad4 to i64*
  %v3_33ad4 = load i64, i64* %v2_33ad4, align 8
  store i64 %v3_33ad4, i64* @rax, align 8
  store i64 %v0_33a45, i64* @rbx, align 8
  store i64 %v0_33a44, i64* %rbp.global-to-local, align 8
  store i64 %v0_33a42, i64* %r12.global-to-local, align 8
  store i64 %v0_33a40, i64* %r13.global-to-local, align 8
  ret i64 %v3_33ad4

dec_label_pc_33ae8:                               ; preds = %dec_label_pc_33ab4
  %v1_33ae8 = add i64 %v0_33b09, 64
  %v2_33ae8 = inttoptr i64 %v1_33ae8 to i64*
  %v3_33ae8 = load i64, i64* %v2_33ae8, align 8
  store i64 %v3_33ae8, i64* @rax, align 8
  store i64 %v0_33a45, i64* @rbx, align 8
  store i64 %v0_33a44, i64* %rbp.global-to-local, align 8
  store i64 %v0_33a42, i64* %r12.global-to-local, align 8
  store i64 %v0_33a40, i64* %r13.global-to-local, align 8
  ret i64 %v3_33ae8

dec_label_pc_33b00:                               ; preds = %dec_label_pc_33a81
  store i64 211719, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_33b09 = add i64 %v0_33b09, 40
  %v2_33b09 = inttoptr i64 %v1_33b09 to i64*
  %v3_33b09 = load i64, i64* %v2_33b09, align 8
  store i64 %v3_33b09, i64* %r13.global-to-local, align 8
  %v1_33b0d = add i64 %v0_33b09, 48
  %v2_33b0d = inttoptr i64 %v1_33b0d to i64*
  %v3_33b0d = load i64, i64* %v2_33b0d, align 8
  store i64 %v3_33b0d, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_33b97() local_unnamed_addr {
dec_label_pc_33b97:
  store i64 211884, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_33bd4(i64 %arg1) local_unnamed_addr {
dec_label_pc_33bd4:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString10valueUsingEJPS2_P6JArrayIcEii.part.57(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_33be0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_33be0 = load i64, i64* @r15, align 8
  %v0_33be2 = load i64, i64* @r14, align 8
  store i64 0, i64* @rax, align 8
  %v0_33be6 = load i64, i64* @r13, align 8
  %v0_33be8 = load i64, i64* @r12, align 8
  %v0_33bea = load i64, i64* @rdi, align 8
  store i64 %v0_33bea, i64* %r12.global-to-local, align 8
  %v0_33bed = load i64, i64* @rbp, align 8
  %v0_33bee = load i64, i64* @rbx, align 8
  %v0_33bef = load i64, i64* @rdx, align 8
  store i64 %v0_33bef, i64* @rbx, align 8
  store i64 211960, i64* @rdi, align 8
  %v0_33bfa = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_33bfa, i64* %r13.global-to-local, align 8
  %v1_33c01 = trunc i64 %v0_33bef to i32
  %v3_33c01 = sdiv i32 %v1_33c01, 32
  %v10_33c01 = zext i32 %v3_33c01 to i64
  store i64 %v10_33c01, i64* %rbp.global-to-local, align 8
  %v1_33c09 = add nuw nsw i64 %v10_33c01, 1
  store i64 %v1_33c09, i64* @rcx, align 8
  %v4_33c0c = sub i64 %v0_33bef, %v1_33c09
  %v5_33c0e = icmp sgt i64 %v0_33bef, %v10_33c01
  br i1 %v5_33c0e, label %dec_label_pc_33c14, label %dec_label_pc_33e80

dec_label_pc_33c14:                               ; preds = %dec_label_pc_33be0
  %v1_33c14 = add i64 %v0_33bea, 8
  %v2_33c14 = inttoptr i64 %v1_33c14 to i32*
  %v3_33c14 = load i32, i32* %v2_33c14, align 4
  %v3_33c1d = add i64 %v0_33bef, -1
  %v4_33c1d = add i64 %v3_33c1d, %v0_33bfa
  store i64 %v4_33c1d, i64* @rdi, align 8
  %v3_33c22 = mul i32 %v1_33c01, 32
  %v10_33c22 = zext i32 %v3_33c22 to i64
  store i64 %v10_33c22, i64* @rdx, align 8
  %v3_33c25 = sdiv i32 %v1_33c01, 4
  %v4_33c28 = add i32 %v3_33c22, %v3_33c25
  %v20_33c28 = zext i32 %v4_33c28 to i64
  store i64 %v20_33c28, i64* @rax, align 8
  %v1_33c2a = add i64 %v0_33bea, 12
  %v3_33c2f = trunc i64 %v4_33c1d to i32
  %tmp109 = icmp ugt i32 %v3_33c14, %v3_33c2f
  br i1 %tmp109, label %dec_label_pc_33c38, label %dec_label_pc_33e89

dec_label_pc_33c38:                               ; preds = %dec_label_pc_33c14
  %v3_33c40 = xor i64 %v10_33c01, 4294967295
  store i64 %v3_33c40, i64* %r14.global-to-local, align 8
  %v20_33c43 = and i64 %v4_33c0c, 4294967295
  store i64 %v20_33c43, i64* @rdx, align 8
  store i64 %v0_33bef, i64* %rsi.global-to-local, align 8
  %v2_33c47 = sub nuw nsw i64 -1, %v10_33c01
  %v13_33c47 = and i64 %v2_33c47, 4294967295
  store i64 %v13_33c47, i64* @r11, align 8
  %v4_33c4a = add i64 %v10_33c01, %v0_33bfa
  store i64 %v20_33c28, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_33c7a

dec_label_pc_33c58:                               ; preds = %dec_label_pc_33c7a
  %v4_33c5d = add nuw nsw i64 %v3_33c40, %v0_33c5d
  %v20_33c5d = and i64 %v4_33c5d, 4294967295
  store i64 %v20_33c5d, i64* @rdx, align 8
  %v3_33c60 = sdiv i32 %v4_33c85, 4
  %v3_33c63 = mul i32 %v4_33c85, 32
  %v4_33c67 = sub i64 %v0_33c67, %v1_33c09
  %v20_33c67 = and i64 %v4_33c67, 4294967295
  store i64 %v20_33c67, i64* @rdi, align 8
  %v4_33c6a = add i32 %v3_33c60, %v3_33c63
  %v20_33c6a = zext i32 %v4_33c6a to i64
  store i64 %v20_33c6a, i64* %r15.global-to-local, align 8
  %v3_33c6d = add i64 %v20_33c5d, %v4_33c4a
  store i64 %v3_33c6d, i64* @rax, align 8
  %v3_33c71 = trunc i64 %v3_33c6d to i32
  %tmp110 = icmp ugt i32 %v3_33c14, %v3_33c71
  br i1 %tmp110, label %dec_label_pc_33c7a, label %dec_label_pc_33e89

dec_label_pc_33c7a:                               ; preds = %dec_label_pc_33c58, %dec_label_pc_33c38
  %v0_33c5d = phi i64 [ %v20_33c43, %dec_label_pc_33c38 ], [ %v20_33c5d, %dec_label_pc_33c58 ]
  %v0_33c85 = phi i64 [ %v0_33bef, %dec_label_pc_33c38 ], [ %v11_33c85, %dec_label_pc_33c58 ]
  %v2_33c82 = phi i32 [ %v4_33c28, %dec_label_pc_33c38 ], [ %v4_33c6a, %dec_label_pc_33c58 ]
  %v0_33c67 = phi i64 [ %v4_33c1d, %dec_label_pc_33c38 ], [ %v20_33c67, %dec_label_pc_33c58 ]
  store i64 %v0_33c67, i64* @rax, align 8
  %v3_33c7d = add i64 %v0_33c67, %v1_33c2a
  %v4_33c7d = inttoptr i64 %v3_33c7d to i8*
  %v5_33c7d = load i8, i8* %v4_33c7d, align 1
  %v1_33c82 = zext i8 %v5_33c7d to i32
  %v4_33c82 = add i32 %v1_33c82, %v2_33c82
  %v20_33c82 = zext i32 %v4_33c82 to i64
  store i64 %v20_33c82, i64* @rax, align 8
  %v1_33c85 = trunc i64 %v0_33c85 to i32
  %v4_33c85 = xor i32 %v4_33c82, %v1_33c85
  %v11_33c85 = zext i32 %v4_33c85 to i64
  store i64 %v11_33c85, i64* %rsi.global-to-local, align 8
  %v7_33c89 = icmp ugt i64 %v1_33c09, %v0_33c5d
  br i1 %v7_33c89, label %dec_label_pc_33c8b, label %dec_label_pc_33c58

dec_label_pc_33c8b:                               ; preds = %dec_label_pc_33c7a, %dec_label_pc_33e80
  %v0_33c94 = phi i64 [ %v0_33c9438, %dec_label_pc_33e80 ], [ %v1_33c09, %dec_label_pc_33c7a ]
  %v4_33cd9 = phi i64 [ %v0_33bef, %dec_label_pc_33e80 ], [ %v11_33c85, %dec_label_pc_33c7a ]
  store i64 212116, i64* @rdi, align 8
  %v1_33c98 = trunc i64 %v4_33cd9 to i32
  %v2_33c98 = urem i32 %v1_33c98, 128
  %v9_33c98 = zext i32 %v2_33c98 to i64
  store i64 %v9_33c98, i64* %r14.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v0_33cad = load i64, i64* inttoptr (i64 212148 to i64*), align 8
  store i64 %v0_33cad, i64* @rax, align 8
  store i64 %v4_33cd9, i64* %rsi.global-to-local, align 8
  %v4_33cb8 = and i64 %v0_33c94, 4294967295
  store i64 %v4_33cb8, i64* @rcx, align 8
  %v2_33ccb = mul nuw nsw i64 %v9_33c98, 8
  store i64 %v2_33ccb, i64* %r14.global-to-local, align 8
  %v3_33ccf = add nuw nsw i64 %v2_33ccb, 16
  %v4_33ccf = add i64 %v3_33ccf, %v0_33cad
  %v5_33ccf = inttoptr i64 %v4_33ccf to i64*
  %v6_33ccf = load i64, i64* %v5_33ccf, align 8
  store i64 %v6_33ccf, i64* %r15.global-to-local, align 8
  %v1_33cd4 = icmp eq i64 %v6_33ccf, 0
  br i1 %v1_33cd4, label %dec_label_pc_33ce3, label %dec_label_pc_33cd9

dec_label_pc_33cd9:                               ; preds = %dec_label_pc_33c8b
  %v1_33cd9 = add i64 %v6_33ccf, 24
  %v2_33cd9 = inttoptr i64 %v1_33cd9 to i32*
  %v3_33cd9 = load i32, i32* %v2_33cd9, align 4
  %v16_33cd9 = icmp eq i32 %v3_33cd9, %v1_33c98
  br i1 %v16_33cd9, label %dec_label_pc_33de0, label %dec_label_pc_33ce3

dec_label_pc_33ce3:                               ; preds = %dec_label_pc_33e56, %dec_label_pc_33e29, %dec_label_pc_33dea, %dec_label_pc_33de0, %dec_label_pc_33cd9, %dec_label_pc_33c8b
  store i64 0, i64* %r15.global-to-local, align 8
  store i64 212231, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_33bea, i64* inttoptr (i64 8 to i64*), align 8
  %v0_33d0d = load i64, i64* %r13.global-to-local, align 8
  %v1_33d0d = trunc i64 %v0_33d0d to i32
  store i32 %v1_33d0d, i32* inttoptr (i64 16 to i32*), align 16
  %v0_33d11 = load i64, i64* @rbx, align 8
  %v1_33d11 = trunc i64 %v0_33d11 to i32
  %v2_33d11 = load i64, i64* %r15.global-to-local, align 8
  %v3_33d11 = add i64 %v2_33d11, 20
  %v4_33d11 = inttoptr i64 %v3_33d11 to i32*
  store i32 %v1_33d11, i32* %v4_33d11, align 4
  store i64 %v4_33cb8, i64* @rcx, align 8
  %v0_33d1e = load i64, i64* @rbx, align 8
  %v4_33d1e = sub i64 %v0_33d1e, %v0_33c94
  %v5_33d20 = icmp slt i64 %v0_33d1e, %v4_33cb8
  br i1 %v5_33d20, label %dec_label_pc_33d93, label %dec_label_pc_33d22

dec_label_pc_33d22:                               ; preds = %dec_label_pc_33ce3
  %v1_33d1e = trunc i64 %v0_33d1e to i32
  %v0_33d22 = load i64, i64* %r12.global-to-local, align 8
  %v1_33d22 = add i64 %v0_33d22, 8
  %v2_33d22 = inttoptr i64 %v1_33d22 to i32*
  %v3_33d22 = load i32, i32* %v2_33d22, align 4
  %v0_33d27 = load i64, i64* %r13.global-to-local, align 8
  %v3_33d27 = add i64 %v0_33d1e, -1
  %v4_33d27 = add i64 %v3_33d27, %v0_33d27
  store i64 %v4_33d27, i64* @rdi, align 8
  %v3_33d30 = mul i64 %v0_33d1e, 32
  %v10_33d30 = and i64 %v3_33d30, 4294967264
  store i64 %v10_33d30, i64* %rsi.global-to-local, align 8
  %v1_33d33 = add i64 %v0_33d22, 12
  %v3_33d38 = sdiv i32 %v1_33d1e, 4
  %v10_33d38 = zext i32 %v3_33d38 to i64
  store i64 %v10_33d38, i64* @rax, align 8
  %v3_33d3b = trunc i64 %v4_33d27 to i32
  %v3_33d3e = add nuw nsw i64 %v10_33d38, %v10_33d30
  %tmp111 = icmp ugt i32 %v3_33d22, %v3_33d3b
  br i1 %tmp111, label %dec_label_pc_33d48, label %dec_label_pc_33e89

dec_label_pc_33d48:                               ; preds = %dec_label_pc_33d22
  %v0_33d4d = load i64, i64* %rbp.global-to-local, align 8
  %v2_33d4d = and i64 %v0_33d4d, 4294967295
  %v3_33d4d = xor i64 %v2_33d4d, 4294967295
  store i64 %v3_33d4d, i64* %rbp.global-to-local, align 8
  %v20_33d4f = and i64 %v4_33d1e, 4294967295
  store i64 %v20_33d4f, i64* @rax, align 8
  %v2_33d51 = sub nsw i64 0, %v0_33c94
  %v13_33d51 = and i64 %v2_33d51, 4294967295
  store i64 %v13_33d51, i64* @r11, align 8
  %v3_33d54 = add nsw i64 %v4_33cb8, -1
  %v4_33d54 = add i64 %v3_33d54, %v0_33d27
  store i64 %v4_33d54, i64* %r12.global-to-local, align 8
  store i64 %v3_33d3e, i64* @rdx, align 8
  br label %dec_label_pc_33d81

dec_label_pc_33d60:                               ; preds = %dec_label_pc_33d81
  %v4_33d60 = add nuw nsw i64 %v3_33d4d, %v0_33d60
  %v20_33d60 = and i64 %v4_33d60, 4294967295
  store i64 %v20_33d60, i64* @rax, align 8
  %v3_33d67 = add i64 %v4_33d54, %v20_33d60
  store i64 %v3_33d67, i64* %rsi.global-to-local, align 8
  %v3_33d6b = mul i32 %v4_33d8c, 32
  %v3_33d6f = sdiv i32 %v4_33d8c, 4
  %v4_33d72 = add i32 %v3_33d6b, %v3_33d6f
  %v20_33d72 = zext i32 %v4_33d72 to i64
  store i64 %v20_33d72, i64* @rdx, align 8
  %v4_33d75 = sub i64 %v0_33d75, %v0_33c94
  %v20_33d75 = and i64 %v4_33d75, 4294967295
  store i64 %v20_33d75, i64* @rdi, align 8
  %v3_33d78 = trunc i64 %v3_33d67 to i32
  %tmp112 = icmp ugt i32 %v3_33d22, %v3_33d78
  br i1 %tmp112, label %dec_label_pc_33d81, label %dec_label_pc_33e89

dec_label_pc_33d81:                               ; preds = %dec_label_pc_33d60, %dec_label_pc_33d48
  %v0_33d60 = phi i64 [ %v20_33d4f, %dec_label_pc_33d48 ], [ %v20_33d60, %dec_label_pc_33d60 ]
  %v0_33d8c = phi i64 [ %v0_33d1e, %dec_label_pc_33d48 ], [ %v11_33d8c, %dec_label_pc_33d60 ]
  %v2_33d89 = phi i64 [ %v3_33d3e, %dec_label_pc_33d48 ], [ %v20_33d72, %dec_label_pc_33d60 ]
  %v0_33d75 = phi i64 [ %v4_33d27, %dec_label_pc_33d48 ], [ %v20_33d75, %dec_label_pc_33d60 ]
  store i64 %v0_33d75, i64* %rsi.global-to-local, align 8
  %v3_33d84 = add i64 %v0_33d75, %v1_33d33
  %v4_33d84 = inttoptr i64 %v3_33d84 to i8*
  %v5_33d84 = load i8, i8* %v4_33d84, align 1
  %v1_33d89 = zext i8 %v5_33d84 to i32
  %v3_33d89 = trunc i64 %v2_33d89 to i32
  %v4_33d89 = add i32 %v1_33d89, %v3_33d89
  %v1_33d8c = trunc i64 %v0_33d8c to i32
  %v4_33d8c = xor i32 %v4_33d89, %v1_33d8c
  %v11_33d8c = zext i32 %v4_33d8c to i64
  store i64 %v11_33d8c, i64* @rbx, align 8
  %v7_33d91 = icmp ugt i64 %v4_33cb8, %v0_33d60
  br i1 %v7_33d91, label %dec_label_pc_33d93, label %dec_label_pc_33d60

dec_label_pc_33d93:                               ; preds = %dec_label_pc_33d81, %dec_label_pc_33ce3
  %v0_33d9c = phi i64 [ %v0_33d1e, %dec_label_pc_33ce3 ], [ %v11_33d8c, %dec_label_pc_33d81 ]
  store i64 212378, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_33d9c = trunc i64 %v0_33d9c to i32
  %v2_33d9c = load i64, i64* %r15.global-to-local, align 8
  %v3_33d9c = add i64 %v2_33d9c, 24
  %v4_33d9c = inttoptr i64 %v3_33d9c to i32*
  store i32 %v1_33d9c, i32* %v4_33d9c, align 4
  %v0_33da5 = load i64, i64* inttoptr (i64 212396 to i64*), align 8
  store i64 %v0_33da5, i64* @rdi, align 8
  store i64 %v9_33c98, i64* @rcx, align 8
  %v3_33db0 = add i64 %v0_33da5, 8
  %v4_33db0 = inttoptr i64 %v3_33db0 to i32*
  %v5_33db0 = load i32, i32* %v4_33db0, align 4
  %v11_33db0 = icmp ult i32 %v2_33c98, %v5_33db0
  %v1_33db3 = add i64 %v0_33da5, 16
  store i64 %v1_33db3, i64* @rax, align 8
  %v1_33db7 = icmp eq i1 %v11_33db0, false
  br i1 %v1_33db7, label %dec_label_pc_33e87, label %dec_label_pc_33dbd

dec_label_pc_33dbd:                               ; preds = %dec_label_pc_33d93
  %v0_33dbd = load i64, i64* %r14.global-to-local, align 8
  %v2_33dbd = add i64 %v0_33dbd, %v1_33db3
  store i64 %v2_33dbd, i64* %r14.global-to-local, align 8
  %v0_33dc0 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_33dc0, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v2_33dca = inttoptr i64 %v2_33dbd to i64*
  store i64 %v0_33dc0, i64* %v2_33dca, align 8
  %v0_33dcd.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_33dcd

dec_label_pc_33dcd:                               ; preds = %dec_label_pc_33e6a, %dec_label_pc_33dbd
  %v0_33dcd = phi i64 [ %v0_33dcd.pre, %dec_label_pc_33dbd ], [ %v6_33ccf, %dec_label_pc_33e6a ]
  store i64 %v0_33dcd, i64* @rax, align 8
  store i64 %v0_33bee, i64* @rbx, align 8
  store i64 %v0_33bed, i64* %rbp.global-to-local, align 8
  store i64 %v0_33be8, i64* %r12.global-to-local, align 8
  store i64 %v0_33be6, i64* %r13.global-to-local, align 8
  store i64 %v0_33be2, i64* %r14.global-to-local, align 8
  store i64 %v0_33be0, i64* %r15.global-to-local, align 8
  ret i64 %v0_33dcd

dec_label_pc_33de0:                               ; preds = %dec_label_pc_33cd9
  %v1_33de0 = trunc i64 %v0_33bef to i32
  %v3_33de0 = add i64 %v6_33ccf, 20
  %v4_33de0 = inttoptr i64 %v3_33de0 to i32*
  %v5_33de0 = load i32, i32* %v4_33de0, align 4
  %v16_33de0 = icmp eq i32 %v1_33de0, %v5_33de0
  %v1_33de4 = icmp eq i1 %v16_33de0, false
  br i1 %v1_33de4, label %dec_label_pc_33ce3, label %dec_label_pc_33dea

dec_label_pc_33dea:                               ; preds = %dec_label_pc_33de0
  %v1_33dea = add i64 %v6_33ccf, 8
  %v2_33dea = inttoptr i64 %v1_33dea to i64*
  %v3_33dea = load i64, i64* %v2_33dea, align 8
  %v1_33dee = add i64 %v6_33ccf, 16
  %v2_33dee = inttoptr i64 %v1_33dee to i32*
  %v3_33dee = load i32, i32* %v2_33dee, align 4
  %v4_33dee = zext i32 %v3_33dee to i64
  store i64 212473, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %sext = mul i64 %v3_33dea, 4294967296
  %v4_33e0d = sdiv i64 %sext, 4294967296
  store i64 %v4_33dee, i64* %rsi.global-to-local, align 8
  store i64 %v4_33cb8, i64* @rcx, align 8
  %v1_33e1a = add nsw i64 %v4_33e0d, 8
  %v2_33e1a = inttoptr i64 %v1_33e1a to i32*
  %v3_33e1a = load i32, i32* %v2_33e1a, align 4
  %v4_33e1a = zext i32 %v3_33e1a to i64
  store i64 %v4_33e1a, i64* @rdx, align 8
  %v3_33e1e = add i64 %v4_33dee, %v0_33bef
  store i64 %v3_33e1e, i64* @rax, align 8
  %v5_33e23 = icmp slt i64 %v4_33e1a, %v3_33e1e
  br i1 %v5_33e23, label %dec_label_pc_33ce3, label %dec_label_pc_33e29

dec_label_pc_33e29:                               ; preds = %dec_label_pc_33dea
  %v1_33e29 = add i64 %v0_33bea, 8
  %v2_33e29 = inttoptr i64 %v1_33e29 to i32*
  %v3_33e29 = load i32, i32* %v2_33e29, align 4
  %v4_33e29 = zext i32 %v3_33e29 to i64
  store i64 %v4_33e29, i64* @r11, align 8
  %v3_33e2e = add i64 %v0_33bfa, %v0_33bef
  store i64 %v3_33e2e, i64* @rax, align 8
  %v5_33e36 = icmp slt i64 %v4_33e29, %v3_33e2e
  br i1 %v5_33e36, label %dec_label_pc_33ce3, label %dec_label_pc_33e3c

dec_label_pc_33e3c:                               ; preds = %dec_label_pc_33e29
  store i64 %v4_33dee, i64* @rax, align 8
  store i64 %v0_33bfa, i64* @rdi, align 8
  store i64 %v0_33bef, i64* %rsi.global-to-local, align 8
  %v3_33e4e = add nsw i64 %v4_33e0d, 12
  %v5_33e5f = add i64 %v0_33bea, 12
  br label %dec_label_pc_33e6a

dec_label_pc_33e48:                               ; preds = %dec_label_pc_33e73
  %v3_33e4b = trunc i64 %v0_33e5c to i32
  %tmp113 = icmp ugt i32 %v3_33e29, %v3_33e4b
  br i1 %tmp113, label %dec_label_pc_33e56, label %dec_label_pc_33e89

dec_label_pc_33e56:                               ; preds = %dec_label_pc_33e48
  %v4_33e4e = add nsw i64 %v3_33e4e, %v0_33e59
  %v5_33e4e = inttoptr i64 %v4_33e4e to i8*
  %v6_33e4e = load i8, i8* %v5_33e4e, align 1
  %v2_33e59 = add nuw nsw i64 %v0_33e59, 1
  %v17_33e59 = and i64 %v2_33e59, 4294967295
  store i64 %v17_33e59, i64* @rax, align 8
  %v2_33e5c = add i64 %v0_33e5c, 1
  %v17_33e5c = and i64 %v2_33e5c, 4294967295
  store i64 %v17_33e5c, i64* @rdi, align 8
  %v6_33e5f = add i64 %v5_33e5f, %v0_33e5c
  %v7_33e5f = inttoptr i64 %v6_33e5f to i8*
  %v8_33e5f = load i8, i8* %v7_33e5f, align 1
  %v19_33e5f = icmp eq i8 %v6_33e4e, %v8_33e5f
  %v1_33e64 = icmp eq i1 %v19_33e5f, false
  br i1 %v1_33e64, label %dec_label_pc_33ce3, label %dec_label_pc_33e6a

dec_label_pc_33e6a:                               ; preds = %dec_label_pc_33e56, %dec_label_pc_33e3c
  %v0_33e5c = phi i64 [ %v17_33e5c, %dec_label_pc_33e56 ], [ %v0_33bfa, %dec_label_pc_33e3c ]
  %v0_33e59 = phi i64 [ %v17_33e59, %dec_label_pc_33e56 ], [ %v4_33dee, %dec_label_pc_33e3c ]
  %v0_33e6a = phi i64 [ %v17_33e6a, %dec_label_pc_33e56 ], [ %v0_33bef, %dec_label_pc_33e3c ]
  %v1_33e6a = trunc i64 %v0_33e6a to i32
  %v2_33e6a = add i32 %v1_33e6a, -1
  %v12_33e6a = icmp slt i32 %v2_33e6a, 0
  %v17_33e6a = zext i32 %v2_33e6a to i64
  store i64 %v17_33e6a, i64* %rsi.global-to-local, align 8
  br i1 %v12_33e6a, label %dec_label_pc_33dcd, label %dec_label_pc_33e73

dec_label_pc_33e73:                               ; preds = %dec_label_pc_33e6a
  %v3_33e73 = trunc i64 %v0_33e59 to i32
  %tmp114 = icmp ugt i32 %v3_33e1a, %v3_33e73
  br i1 %tmp114, label %dec_label_pc_33e48, label %dec_label_pc_33e77

dec_label_pc_33e77:                               ; preds = %dec_label_pc_33e73
  store i64 %v0_33e59, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  br label %dec_label_pc_33e80

dec_label_pc_33e80:                               ; preds = %dec_label_pc_33be0, %dec_label_pc_33e77
  %v0_33c9438 = phi i64 [ %v1_33c09, %dec_label_pc_33be0 ], [ %v4_33cb8, %dec_label_pc_33e77 ]
  store i64 %v0_33bef, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_33c8b

dec_label_pc_33e87:                               ; preds = %dec_label_pc_33d93
  store i64 %v9_33c98, i64* @rdi, align 8
  br label %dec_label_pc_33e89

dec_label_pc_33e89:                               ; preds = %dec_label_pc_33c58, %dec_label_pc_33c14, %dec_label_pc_33e48, %dec_label_pc_33d60, %dec_label_pc_33d22, %dec_label_pc_33e87
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString10valueUsingEJPS2_P6JArrayIcEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_33ea0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_33ea0 = load i64, i64* %r13.global-to-local, align 8
  %v0_33ea2 = load i64, i64* %r12.global-to-local, align 8
  %v0_33ea4 = load i64, i64* @rdi, align 8
  store i64 %v0_33ea4, i64* @r13, align 8
  %v0_33ea7 = load i64, i64* @rbp, align 8
  %v0_33ea8 = load i64, i64* @rbx, align 8
  store i64 212656, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_33eb2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_33eb2, i64* @rbx, align 8
  %v0_33eb4 = load i64, i64* @rdx, align 8
  store i64 %v0_33eb4, i64* @r12, align 8
  %v1_33ec0 = add i64 %v0_33ea4, 8
  %v2_33ec0 = inttoptr i64 %v1_33ec0 to i32*
  %v3_33ec0 = load i32, i32* %v2_33ec0, align 4
  %v8_33ec5 = icmp sgt i32 %v3_33ec0, 32
  br i1 %v8_33ec5, label %dec_label_pc_33ee0, label %dec_label_pc_33ec7

dec_label_pc_33ec7:                               ; preds = %dec_label_pc_33ea0
  store i64 %v0_33ea4, i64* @rdi, align 8
  %v3_33ecf = call i64 @_ZN3org4luaj3vm29LuaString10valueUsingEJPS2_P6JArrayIcEii.part.57(i64 %v0_33ea4, i64 %v0_33eb2, i64 %v0_33eb4)
  store i64 %v3_33ecf, i64* @rax, align 8
  store i64 %v0_33ea8, i64* @rbx, align 8
  store i64 %v0_33ea7, i64* %rbp.global-to-local, align 8
  store i64 %v0_33ea2, i64* %r12.global-to-local, align 8
  store i64 %v0_33ea0, i64* %r13.global-to-local, align 8
  ret i64 %v3_33ecf

dec_label_pc_33ee0:                               ; preds = %dec_label_pc_33ea0
  store i64 0, i64* %rbp.global-to-local, align 8
  store i64 212736, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_33ea4, i64* inttoptr (i64 8 to i64*), align 8
  %v0_33f06 = load i64, i64* @rbx, align 8
  %v1_33f06 = trunc i64 %v0_33f06 to i32
  store i32 %v1_33f06, i32* inttoptr (i64 16 to i32*), align 16
  %v0_33f09 = load i64, i64* @r12, align 8
  %v1_33f09 = trunc i64 %v0_33f09 to i32
  %v2_33f09 = load i64, i64* %rbp.global-to-local, align 8
  %v3_33f09 = add i64 %v2_33f09, 20
  %v4_33f09 = inttoptr i64 %v3_33f09 to i32*
  store i32 %v1_33f09, i32* %v4_33f09, align 4
  %v5_33f09 = load i64, i64* @rax, align 8
  ret i64 %v5_33f09
}

define i64 @_ZN3org4luaj3vm29LuaString10valueUsingEJPS2_P6JArrayIcE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_33fb0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_33fb0 = load i64, i64* @r12, align 8
  %v0_33fb2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_33fb3 = load i64, i64* @rdi, align 8
  store i64 %v0_33fb3, i64* @rbp, align 8
  %v0_33fb6 = load i64, i64* @rbx, align 8
  store i64 %v0_33fb6, i64* %stack_var_-24, align 8
  store i64 212940, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_33fce = add i64 %v0_33fb3, 8
  %v2_33fce = inttoptr i64 %v1_33fce to i32*
  %v3_33fce = load i32, i32* %v2_33fce, align 4
  %v4_33fce = zext i32 %v3_33fce to i64
  store i64 %v4_33fce, i64* @rbx, align 8
  %v3_33fd6 = load i32, i32* %v2_33fce, align 4
  %v8_33fda = icmp sgt i32 %v3_33fd6, 32
  br i1 %v8_33fda, label %dec_label_pc_33ff0, label %dec_label_pc_33fdc

dec_label_pc_33fdc:                               ; preds = %dec_label_pc_33fb0
  store i64 %v4_33fce, i64* @rdx, align 8
  store i64 %v0_33fb3, i64* @rdi, align 8
  %v3_33fe3 = call i64 @_ZN3org4luaj3vm29LuaString10valueUsingEJPS2_P6JArrayIcEii.part.57(i64 %v0_33fb3, i64 0, i64 %v4_33fce)
  store i64 %v3_33fe3, i64* @rax, align 8
  %v2_33fe8 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_33fe8, i64* @rbx, align 8
  store i64 %v0_33fb2, i64* %rbp.global-to-local, align 8
  store i64 %v0_33fb0, i64* %r12.global-to-local, align 8
  ret i64 %v3_33fe3

dec_label_pc_33ff0:                               ; preds = %dec_label_pc_33fb0
  store i64 0, i64* %r12.global-to-local, align 8
  store i64 213008, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %v0_33fb3, i64* inttoptr (i64 8 to i64*), align 8
  store i32 0, i32* inttoptr (i64 16 to i32*), align 16
  %v0_34020 = load i64, i64* @rbx, align 8
  %v1_34020 = trunc i64 %v0_34020 to i32
  %v2_34020 = load i64, i64* %r12.global-to-local, align 8
  %v3_34020 = add i64 %v2_34020, 20
  %v4_34020 = inttoptr i64 %v3_34020 to i32*
  store i32 %v1_34020, i32* %v4_34020, align 4
  %v5_34020 = load i64, i64* @rax, align 8
  ret i64 %v5_34020
}

define i64 @_ZN3org4luaj3vm29LuaString7valueOfEJPS2_P6JArrayIwE(i64 %arg1) local_unnamed_addr {
dec_label_pc_340a0:
  %r12.global-to-local = alloca i64, align 8
  %r8.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_340a0 = load i64, i64* %r12.global-to-local, align 8
  %v0_340a2 = load i64, i64* @rdi, align 8
  store i64 %v0_340a2, i64* @r12, align 8
  %v0_340a5 = load i64, i64* %rbp.global-to-local, align 8
  store i64 213165, i64* @rdi, align 8
  %v0_340ad = load i64, i64* @rbx, align 8
  store i64 %v0_340ad, i64* %stack_var_-24, align 8
  store i64 0, i64* @rax, align 8
  %v1_340b5 = add i64 %v0_340a2, 8
  %v2_340b5 = inttoptr i64 %v1_340b5 to i32*
  %v3_340b5 = load i32, i32* %v2_340b5, align 4
  %v4_340b5 = zext i32 %v3_340b5 to i64
  store i64 %v4_340b5, i64* @rbx, align 8
  store i64 213199, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbp, align 8
  %tmp259 = icmp slt i32 %v3_340b5, 1
  br i1 %tmp259, label %dec_label_pc_3413d, label %dec_label_pc_340df

dec_label_pc_340df:                               ; preds = %dec_label_pc_340a0
  %v1_340e4 = add i64 %v0_340a2, 12
  store i64 %v1_340e4, i64* %r9.global-to-local, align 8
  store i64 12, i64* %r8.global-to-local, align 8
  %v3_340f5 = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_340f5 = zext i32 %v3_340f5 to i64
  store i64 %v4_340f5, i64* @rax, align 8
  %v2_340f8 = inttoptr i64 %v1_340e4 to i8*
  %v3_340f8 = load i8, i8* %v2_340f8, align 1
  %v4_340f8 = zext i8 %v3_340f8 to i64
  store i64 %v4_340f8, i64* @rdx, align 8
  store i64 1, i64* @rax, align 8
  %v1_3410e = add nuw nsw i64 %v4_340f5, 1
  store i64 %v1_3410e, i64* @rcx, align 8
  br label %dec_label_pc_34132

dec_label_pc_34118:                               ; preds = %dec_label_pc_34132
  %v0_34120 = load i64, i64* %r9.global-to-local, align 8
  %v2_34120 = mul i64 %v0_34139, 2
  %v3_34120 = add i64 %v0_34120, %v2_34120
  %v4_34120 = inttoptr i64 %v3_34120 to i8*
  %v5_34120 = load i8, i8* %v4_34120, align 1
  %v6_34120 = zext i8 %v5_34120 to i64
  store i64 %v6_34120, i64* @rdx, align 8
  %v1_34125 = add i64 %v0_34139, 1
  store i64 %v1_34125, i64* @rax, align 8
  %v0_34132.pre = load i64, i64* @rbx, align 8
  %v2_34134.pre = load i64, i64* %r8.global-to-local, align 8
  br label %dec_label_pc_34132

dec_label_pc_34132:                               ; preds = %dec_label_pc_34118, %dec_label_pc_340df
  %v2_34134 = phi i64 [ %v2_34134.pre, %dec_label_pc_34118 ], [ 12, %dec_label_pc_340df ]
  %v0_34134 = phi i8 [ %v5_34120, %dec_label_pc_34118 ], [ %v3_340f8, %dec_label_pc_340df ]
  %v3_34134 = phi i64 [ %v1_34125, %dec_label_pc_34118 ], [ 1, %dec_label_pc_340df ]
  %v0_34132 = phi i64 [ %v0_34132.pre, %dec_label_pc_34118 ], [ %v4_340b5, %dec_label_pc_340df ]
  %v5_34134 = add i64 %v2_34134, -1
  %v6_34134 = add i64 %v5_34134, %v3_34134
  %v7_34134 = inttoptr i64 %v6_34134 to i8*
  store i8 %v0_34134, i8* %v7_34134, align 1
  %v0_34139 = load i64, i64* @rax, align 8
  store i64 %v0_34139, i64* @rdi, align 8
  %v8_3413b = icmp sgt i64 %v0_34132, %v3_34134
  br i1 %v8_3413b, label %dec_label_pc_34118, label %dec_label_pc_3413d.loopexit

dec_label_pc_3413d.loopexit:                      ; preds = %dec_label_pc_34132
  %v0_3414b.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_3413d

dec_label_pc_3413d:                               ; preds = %dec_label_pc_3413d.loopexit, %dec_label_pc_340a0
  %v0_34155 = phi i64 [ %v0_3414b.pre, %dec_label_pc_3413d.loopexit ], [ 0, %dec_label_pc_340a0 ]
  store i64 213316, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_3414b = add i64 %v0_34155, 8
  %v2_3414b = inttoptr i64 %v1_3414b to i32*
  %v3_3414b = load i32, i32* %v2_3414b, align 4
  %v8_3414f = icmp sgt i32 %v3_3414b, 32
  br i1 %v8_3414f, label %dec_label_pc_34168, label %dec_label_pc_34151

dec_label_pc_34151:                               ; preds = %dec_label_pc_3413d
  %v0_34151 = load i64, i64* @rbx, align 8
  store i64 %v0_34151, i64* @rdx, align 8
  store i64 %v0_34155, i64* @rdi, align 8
  %v3_34158 = call i64 @_ZN3org4luaj3vm29LuaString10valueUsingEJPS2_P6JArrayIcEii.part.57(i64 %v0_34155, i64 0, i64 %v0_34151)
  store i64 %v3_34158, i64* @rax, align 8
  %v2_3415d = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_3415d, i64* @rbx, align 8
  store i64 %v0_340a5, i64* %rbp.global-to-local, align 8
  store i64 %v0_340a0, i64* %r12.global-to-local, align 8
  ret i64 %v3_34158

dec_label_pc_34168:                               ; preds = %dec_label_pc_3413d
  store i64 213359, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7valueOfEJPS2_PN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_34220:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_34226 = load i64, i64* @rdi, align 8
  store i64 %v0_34226, i64* @rbx, align 8
  store i64 213552, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3438b() local_unnamed_addr {
dec_label_pc_3438b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_34392() local_unnamed_addr {
dec_label_pc_34392:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_343a0:
  %v0_343a4 = load i64, i64* inttoptr (i64 213931 to i64*), align 8
  store i64 %v0_343a4, i64* @rdi, align 8
  %v0_343b0 = load i64, i64* @rax, align 8
  store i64 %v0_343b0, i64* inttoptr (i64 213943 to i64*), align 8
  %v0_343bb = load i64, i64* @rax, align 8
  ret i64 %v0_343bb
}

define i64 @"_ZN4lang12lang_luaj$7718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_343c0:
  store i64 213977, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_343e0 = load i64, i64* inttoptr (i64 213991 to i64*), align 8
  store i64 %v0_343e0, i64* @rax, align 8
  %v1_343e7 = add i64 %v0_343e0, 8
  %v2_343e7 = inttoptr i64 %v1_343e7 to i32*
  %v3_343e7 = load i32, i32* %v2_343e7, align 4
  %tmp240 = icmp ult i32 %v3_343e7, 257
  br i1 %tmp240, label %dec_label_pc_3444f, label %dec_label_pc_343f0

dec_label_pc_343f0:                               ; preds = %dec_label_pc_343c0
  %v1_343f0 = add i64 %v0_343e0, 2064
  %v2_343f0 = inttoptr i64 %v1_343f0 to i64*
  %v3_343f0 = load i64, i64* %v2_343f0, align 8
  store i64 %v3_343f0, i64* @rax, align 8
  %v0_343f7 = load i64, i64* inttoptr (i64 214014 to i64*), align 8
  store i64 %v0_343f7, i64* @rdi, align 8
  store i64 %v3_343f0, i64* inttoptr (i64 214021 to i64*), align 8
  %v0_3440a = load i64, i64* inttoptr (i64 214033 to i64*), align 8
  store i64 %v0_3440a, i64* @rdi, align 8
  %v0_34411 = load i64, i64* @rax, align 8
  store i64 %v0_34411, i64* inttoptr (i64 214040 to i64*), align 8
  %v0_3441d = load i64, i64* inttoptr (i64 214052 to i64*), align 8
  store i64 %v0_3441d, i64* @rdi, align 8
  %v0_34424 = load i64, i64* @rax, align 8
  store i64 %v0_34424, i64* inttoptr (i64 214059 to i64*), align 8
  %v0_34430 = load i64, i64* inttoptr (i64 214071 to i64*), align 8
  store i64 %v0_34430, i64* @rdi, align 8
  %v0_34437 = load i64, i64* @rax, align 8
  store i64 %v0_34437, i64* inttoptr (i64 214078 to i64*), align 8
  %v0_34443 = load i64, i64* @rax, align 8
  store i64 %v0_34443, i64* inttoptr (i64 214090 to i64*), align 8
  %v0_3444e = load i64, i64* @rax, align 8
  ret i64 %v0_3444e

dec_label_pc_3444f:                               ; preds = %dec_label_pc_343c0
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_34460:
  %v0_34464 = load i64, i64* inttoptr (i64 214123 to i64*), align 8
  store i64 %v0_34464, i64* @rdi, align 8
  %v0_34470 = load i64, i64* @rax, align 8
  store i64 %v0_34470, i64* inttoptr (i64 214135 to i64*), align 8
  %v0_3447b = load i64, i64* @rax, align 8
  ret i64 %v0_3447b
}

define i64 @"_ZN4lang12lang_luaj$7618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_34480:
  store i64 214151, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$1518__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_34520:
  %v0_34524 = load i64, i64* inttoptr (i64 214315 to i64*), align 8
  store i64 %v0_34524, i64* @rdi, align 8
  %v0_34530 = load i64, i64* inttoptr (i64 214327 to i64*), align 8
  store i64 %v0_34530, i64* @rdi, align 8
  %v0_34537 = load i64, i64* @rax, align 8
  store i64 %v0_34537, i64* inttoptr (i64 214334 to i64*), align 8
  %v0_34543 = load i64, i64* inttoptr (i64 214346 to i64*), align 8
  store i64 %v0_34543, i64* @rdi, align 8
  %v0_3454a = load i64, i64* @rax, align 8
  store i64 %v0_3454a, i64* inttoptr (i64 214353 to i64*), align 8
  %v0_34556 = load i64, i64* inttoptr (i64 214365 to i64*), align 8
  store i64 %v0_34556, i64* @rdi, align 8
  %v0_3455d = load i64, i64* @rax, align 8
  store i64 %v0_3455d, i64* inttoptr (i64 214372 to i64*), align 8
  %v0_34569 = load i64, i64* inttoptr (i64 214384 to i64*), align 16
  store i64 %v0_34569, i64* @rdi, align 8
  %v0_34570 = load i64, i64* @rax, align 8
  store i64 %v0_34570, i64* inttoptr (i64 214391 to i64*), align 8
  %v0_3457c = load i64, i64* inttoptr (i64 214403 to i64*), align 8
  store i64 %v0_3457c, i64* @rdi, align 8
  %v0_34583 = load i64, i64* @rax, align 8
  store i64 %v0_34583, i64* inttoptr (i64 214410 to i64*), align 8
  %v0_3458f = load i64, i64* inttoptr (i64 214422 to i64*), align 8
  store i64 %v0_3458f, i64* @rdi, align 8
  %v0_34596 = load i64, i64* @rax, align 8
  store i64 %v0_34596, i64* inttoptr (i64 214429 to i64*), align 8
  %v0_345a2 = load i64, i64* @rax, align 8
  store i64 %v0_345a2, i64* inttoptr (i64 214441 to i64*), align 8
  %v0_345ad = load i64, i64* @rax, align 8
  ret i64 %v0_345ad
}

define i64 @"_ZN4lang14lang_luaj$77$418__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_345b0:
  %v0_345b4 = load i64, i64* inttoptr (i64 214459 to i64*), align 8
  store i64 %v0_345b4, i64* @rdi, align 8
  %v0_345c0 = load i64, i64* inttoptr (i64 214471 to i64*), align 8
  store i64 %v0_345c0, i64* @rdi, align 8
  %v0_345c7 = load i64, i64* @rax, align 8
  store i64 %v0_345c7, i64* inttoptr (i64 214478 to i64*), align 8
  %v0_345d3 = load i64, i64* inttoptr (i64 214490 to i64*), align 8
  store i64 %v0_345d3, i64* @rdi, align 8
  %v0_345da = load i64, i64* @rax, align 8
  store i64 %v0_345da, i64* inttoptr (i64 214497 to i64*), align 8
  %v0_345e6 = load i64, i64* inttoptr (i64 214509 to i64*), align 8
  store i64 %v0_345e6, i64* @rdi, align 8
  %v0_345ed = load i64, i64* @rax, align 8
  store i64 %v0_345ed, i64* inttoptr (i64 214516 to i64*), align 8
  %v0_345f9 = load i64, i64* @rax, align 8
  store i64 %v0_345f9, i64* inttoptr (i64 214528 to i64*), align 512
  %v0_34604 = load i64, i64* @rax, align 8
  ret i64 %v0_34604
}

define i64 @"_ZN4lang14lang_luaj$76$618__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_34610:
  %v0_34614 = load i64, i64* inttoptr (i64 214555 to i64*), align 8
  store i64 %v0_34614, i64* @rdi, align 8
  %v0_34620 = load i64, i64* @rax, align 8
  store i64 %v0_34620, i64* inttoptr (i64 214567 to i64*), align 8
  %v0_3462b = load i64, i64* @rax, align 8
  ret i64 %v0_3462b
}

define i64 @"_ZN4lang17lang_luaj$77$15$118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_34630:
  %v0_34634 = load i64, i64* inttoptr (i64 214587 to i64*), align 8
  store i64 %v0_34634, i64* @rdi, align 8
  %v0_34640 = load i64, i64* inttoptr (i64 214599 to i64*), align 8
  store i64 %v0_34640, i64* @rdi, align 8
  %v0_34647 = load i64, i64* @rax, align 8
  store i64 %v0_34647, i64* inttoptr (i64 214606 to i64*), align 8
  %v0_34653 = load i64, i64* inttoptr (i64 214618 to i64*), align 8
  store i64 %v0_34653, i64* @rdi, align 8
  %v0_3465a = load i64, i64* @rax, align 8
  store i64 %v0_3465a, i64* inttoptr (i64 214625 to i64*), align 8
  %v0_34666 = load i64, i64* inttoptr (i64 214637 to i64*), align 8
  store i64 %v0_34666, i64* @rdi, align 8
  %v0_3466d = load i64, i64* @rax, align 8
  store i64 %v0_3466d, i64* inttoptr (i64 214644 to i64*), align 8
  %v0_34679 = load i64, i64* inttoptr (i64 214656 to i64*), align 128
  store i64 %v0_34679, i64* @rdi, align 8
  %v0_34680 = load i64, i64* @rax, align 8
  store i64 %v0_34680, i64* inttoptr (i64 214663 to i64*), align 8
  %v0_3468c = load i64, i64* inttoptr (i64 214675 to i64*), align 8
  store i64 %v0_3468c, i64* @rdi, align 8
  %v0_34693 = load i64, i64* @rax, align 8
  store i64 %v0_34693, i64* inttoptr (i64 214682 to i64*), align 8
  %v0_3469f = load i64, i64* @rax, align 8
  store i64 %v0_3469f, i64* inttoptr (i64 214694 to i64*), align 8
  %v0_346aa = load i64, i64* @rax, align 8
  ret i64 %v0_346aa
}

define i64 @"_ZN4lang14lang_luaj$76$718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_346b0:
  %v0_346b4 = load i64, i64* inttoptr (i64 214715 to i64*), align 8
  store i64 %v0_346b4, i64* @rdi, align 8
  %v0_346c0 = load i64, i64* inttoptr (i64 214727 to i64*), align 8
  store i64 %v0_346c0, i64* @rdi, align 8
  %v0_346c7 = load i64, i64* @rax, align 8
  store i64 %v0_346c7, i64* inttoptr (i64 214734 to i64*), align 8
  %v0_346d3 = load i64, i64* inttoptr (i64 214746 to i64*), align 8
  store i64 %v0_346d3, i64* @rdi, align 8
  %v0_346da = load i64, i64* @rax, align 8
  store i64 %v0_346da, i64* inttoptr (i64 214753 to i64*), align 8
  %v0_346e6 = load i64, i64* inttoptr (i64 214765 to i64*), align 8
  store i64 %v0_346e6, i64* @rdi, align 8
  %v0_346ed = load i64, i64* @rax, align 8
  store i64 %v0_346ed, i64* inttoptr (i64 214772 to i64*), align 8
  %v0_346f9 = load i64, i64* @rax, align 8
  store i64 %v0_346f9, i64* inttoptr (i64 214784 to i64*), align 256
  %v0_34704 = load i64, i64* @rax, align 8
  ret i64 %v0_34704
}

define i64 @_ZN4lang4Lang13complex_parseEJPNS_9LangValueEPN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_34710:
  store i64 %arg1, i64* @rdi, align 8
  %v0_34712 = load i64, i64* @rdi, align 8
  store i64 214828, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_34733 = load i64, i64* inttoptr (i64 214842 to i64*), align 8
  store i64 %v0_34712, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  %v1_34748 = inttoptr i64 %v0_34733 to i64*
  %v2_34748 = load i64, i64* %v1_34748, align 8
  store i64 %v2_34748, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN4lang4Lang12simple_parseEJPNS_9LangValueEPN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_34770:
  store i64 %arg1, i64* @rdi, align 8
  store i64 214924, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_347d0:
  %v0_347d4 = load i64, i64* inttoptr (i64 215003 to i64*), align 8
  store i64 %v0_347d4, i64* @rdi, align 8
  %v0_347e0 = load i64, i64* @rax, align 8
  store i64 %v0_347e0, i64* inttoptr (i64 215015 to i64*), align 8
  %v0_347eb = load i64, i64* @rax, align 8
  ret i64 %v0_347eb
}

define i64 @_ZN4lang9lang_luaj18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_347f0:
  store i64 215049, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_34810 = load i64, i64* inttoptr (i64 215063 to i64*), align 8
  store i64 %v0_34810, i64* @rax, align 8
  %v1_34817 = add i64 %v0_34810, 8
  %v2_34817 = inttoptr i64 %v1_34817 to i32*
  %v3_34817 = load i32, i32* %v2_34817, align 4
  %tmp244 = icmp ult i32 %v3_34817, 257
  br i1 %tmp244, label %bb, label %dec_label_pc_34824

bb:                                               ; preds = %dec_label_pc_347f0
  %v3_3481e = call i64 @function_35373()
  store i64 %v3_3481e, i64* @rax, align 8
  br label %dec_label_pc_34824

dec_label_pc_34824:                               ; preds = %bb, %dec_label_pc_347f0
  %v0_34824 = phi i64 [ %v3_3481e, %bb ], [ %v0_34810, %dec_label_pc_347f0 ]
  %v1_34824 = add i64 %v0_34824, 2064
  %v2_34824 = inttoptr i64 %v1_34824 to i64*
  %v3_34824 = load i64, i64* %v2_34824, align 8
  store i64 %v3_34824, i64* inttoptr (i64 215097 to i64*), align 8
  store i64 215111, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3484e = load i64, i64* inttoptr (i64 215125 to i64*), align 8
  store i64 %v0_3484e, i64* @rax, align 8
  %v1_34862 = add i64 %v0_3484e, 2072
  %v2_34862 = inttoptr i64 %v1_34862 to i64*
  %v3_34862 = load i64, i64* %v2_34862, align 8
  store i64 %v3_34862, i64* inttoptr (i64 215159 to i64*), align 8
  store i64 215173, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3488c = load i64, i64* inttoptr (i64 215187 to i64*), align 8
  store i64 %v0_3488c, i64* @rax, align 8
  %v1_348a0 = add i64 %v0_3488c, 2080
  %v2_348a0 = inttoptr i64 %v1_348a0 to i64*
  %v3_348a0 = load i64, i64* %v2_348a0, align 8
  store i64 %v3_348a0, i64* inttoptr (i64 215221 to i64*), align 8
  store i64 215235, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_348ca = load i64, i64* inttoptr (i64 215249 to i64*), align 8
  store i64 %v0_348ca, i64* @rax, align 8
  %v1_348de = add i64 %v0_348ca, 2088
  %v2_348de = inttoptr i64 %v1_348de to i64*
  %v3_348de = load i64, i64* %v2_348de, align 8
  store i64 %v3_348de, i64* inttoptr (i64 215283 to i64*), align 8
  store i64 215297, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_34908 = load i64, i64* inttoptr (i64 215311 to i64*), align 8
  store i64 %v0_34908, i64* @rax, align 8
  %v1_3491c = add i64 %v0_34908, 2096
  %v2_3491c = inttoptr i64 %v1_3491c to i64*
  %v3_3491c = load i64, i64* %v2_3491c, align 8
  store i64 %v3_3491c, i64* inttoptr (i64 215345 to i64*), align 8
  store i64 215359, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_34946 = load i64, i64* inttoptr (i64 215373 to i64*), align 8
  store i64 %v0_34946, i64* @rax, align 8
  %v1_3495a = add i64 %v0_34946, 2104
  %v2_3495a = inttoptr i64 %v1_3495a to i64*
  %v3_3495a = load i64, i64* %v2_3495a, align 8
  store i64 215400, i64* @rdi, align 8
  store i64 %v3_3495a, i64* inttoptr (i64 215407 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_35373() local_unnamed_addr {
dec_label_pc_35373:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3537f() local_unnamed_addr {
dec_label_pc_3537f:
  store i64 265, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3538b() local_unnamed_addr {
dec_label_pc_3538b:
  store i64 ptrtoint (i64* @global_var_108.7479 to i64), i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_35397() local_unnamed_addr {
dec_label_pc_35397:
  store i64 ptrtoint ([3 x i8]* @global_var_107.7480 to i64), i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_353a3() local_unnamed_addr {
dec_label_pc_353a3:
  store i64 262, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$418__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_353f0:
  %v0_353f4 = load i64, i64* inttoptr (i64 218107 to i64*), align 8
  store i64 %v0_353f4, i64* @rdi, align 8
  %v0_35400 = load i64, i64* inttoptr (i64 218119 to i64*), align 8
  store i64 %v0_35400, i64* @rdi, align 8
  %v0_35407 = load i64, i64* @rax, align 8
  store i64 %v0_35407, i64* inttoptr (i64 218126 to i64*), align 8
  %v0_35413 = load i64, i64* inttoptr (i64 218138 to i64*), align 8
  store i64 %v0_35413, i64* @rdi, align 8
  %v0_3541a = load i64, i64* @rax, align 8
  store i64 %v0_3541a, i64* inttoptr (i64 218145 to i64*), align 8
  %v0_35426 = load i64, i64* inttoptr (i64 218157 to i64*), align 8
  store i64 %v0_35426, i64* @rdi, align 8
  %v0_3542d = load i64, i64* @rax, align 8
  store i64 %v0_3542d, i64* inttoptr (i64 218164 to i64*), align 8
  %v0_35439 = load i64, i64* @rax, align 8
  store i64 %v0_35439, i64* inttoptr (i64 218176 to i64*), align 64
  %v0_35444 = load i64, i64* @rax, align 8
  ret i64 %v0_35444
}

define i64 @"_ZN4lang19lang_luaj$77$15$0$018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35450:
  %v0_35454 = load i64, i64* inttoptr (i64 218203 to i64*), align 8
  store i64 %v0_35454, i64* @rdi, align 8
  %v0_35460 = load i64, i64* inttoptr (i64 218215 to i64*), align 8
  store i64 %v0_35460, i64* @rdi, align 8
  %v0_35467 = load i64, i64* @rax, align 8
  store i64 %v0_35467, i64* inttoptr (i64 218222 to i64*), align 8
  %v0_35473 = load i64, i64* @rax, align 8
  store i64 %v0_35473, i64* inttoptr (i64 218234 to i64*), align 8
  %v0_3547e = load i64, i64* @rax, align 8
  ret i64 %v0_3547e
}

define i64 @"_ZN4lang14lang_luaj$77$318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35480:
  %v0_35484 = load i64, i64* inttoptr (i64 218251 to i64*), align 8
  store i64 %v0_35484, i64* @rdi, align 8
  %v0_35490 = load i64, i64* inttoptr (i64 218263 to i64*), align 8
  store i64 %v0_35490, i64* @rdi, align 8
  %v0_35497 = load i64, i64* @rax, align 8
  store i64 %v0_35497, i64* inttoptr (i64 218270 to i64*), align 8
  %v0_354a3 = load i64, i64* @rax, align 8
  store i64 %v0_354a3, i64* inttoptr (i64 218282 to i64*), align 8
  %v0_354ae = load i64, i64* @rax, align 8
  ret i64 %v0_354ae
}

define i64 @"_ZN4lang15lang_luaj$76$1018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_354b0:
  %v0_354c7 = load i64, i64* @rax, align 8
  store i64 %v0_354c7, i64* inttoptr (i64 218318 to i64*), align 8
  %v0_354da = load i64, i64* @rax, align 8
  store i64 %v0_354da, i64* inttoptr (i64 218337 to i64*), align 8
  %v0_354ed = load i64, i64* @rax, align 8
  store i64 %v0_354ed, i64* inttoptr (i64 218356 to i64*), align 8
  %v0_35500 = load i64, i64* @rax, align 8
  store i64 %v0_35500, i64* inttoptr (i64 218375 to i64*), align 8
  %v0_35513 = load i64, i64* @rax, align 8
  store i64 %v0_35513, i64* inttoptr (i64 218394 to i64*), align 8
  %v0_35526 = load i64, i64* @rax, align 8
  store i64 %v0_35526, i64* inttoptr (i64 218413 to i64*), align 8
  %v0_35539 = load i64, i64* @rax, align 8
  store i64 %v0_35539, i64* inttoptr (i64 218432 to i64*), align 64
  %v0_3554c = load i64, i64* @rax, align 8
  store i64 %v0_3554c, i64* inttoptr (i64 218451 to i64*), align 8
  %v0_3555f = load i64, i64* @rax, align 8
  store i64 %v0_3555f, i64* inttoptr (i64 218470 to i64*), align 8
  %v0_35572 = load i64, i64* @rax, align 8
  store i64 %v0_35572, i64* inttoptr (i64 218489 to i64*), align 8
  %v0_35585 = load i64, i64* @rax, align 8
  store i64 %v0_35585, i64* inttoptr (i64 218508 to i64*), align 8
  %v0_35598 = load i64, i64* @rax, align 8
  store i64 %v0_35598, i64* inttoptr (i64 218527 to i64*), align 8
  %v0_355ab = load i64, i64* @rax, align 8
  store i64 %v0_355ab, i64* inttoptr (i64 218546 to i64*), align 8
  %v0_355be = load i64, i64* @rax, align 8
  store i64 %v0_355be, i64* inttoptr (i64 218565 to i64*), align 8
  %v0_355d1 = load i64, i64* @rax, align 8
  store i64 %v0_355d1, i64* inttoptr (i64 218584 to i64*), align 8
  %v0_355e4 = load i64, i64* @rax, align 8
  store i64 %v0_355e4, i64* inttoptr (i64 218603 to i64*), align 8
  %v0_355f7 = load i64, i64* @rax, align 8
  store i64 %v0_355f7, i64* inttoptr (i64 218622 to i64*), align 8
  %v0_3560a = load i64, i64* @rax, align 8
  store i64 %v0_3560a, i64* inttoptr (i64 218641 to i64*), align 8
  store i64 218653, i64* @rdi, align 8
  %v0_3561d = load i64, i64* @rax, align 8
  store i64 %v0_3561d, i64* inttoptr (i64 218660 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_35696() local_unnamed_addr {
dec_label_pc_35696:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_356a2() local_unnamed_addr {
dec_label_pc_356a2:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_356b0:
  store i64 218823, i64* @rdi, align 8
  %v0_356c7 = load i64, i64* @rax, align 8
  store i64 %v0_356c7, i64* inttoptr (i64 218830 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35720:
  store i64 218935, i64* @rdi, align 8
  %v0_35737 = load i64, i64* @rax, align 8
  store i64 %v0_35737, i64* inttoptr (i64 218942 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35790:
  store i64 219047, i64* @rdi, align 8
  %v0_357a7 = load i64, i64* @rax, align 8
  store i64 %v0_357a7, i64* inttoptr (i64 219054 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$1018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35800:
  %v0_35817 = load i64, i64* @rax, align 8
  store i64 %v0_35817, i64* inttoptr (i64 219166 to i64*), align 8
  %v0_3582a = load i64, i64* @rax, align 8
  store i64 %v0_3582a, i64* inttoptr (i64 219185 to i64*), align 8
  %v0_3583d = load i64, i64* @rax, align 8
  store i64 %v0_3583d, i64* inttoptr (i64 219204 to i64*), align 8
  %v0_35850 = load i64, i64* @rax, align 8
  store i64 %v0_35850, i64* inttoptr (i64 219223 to i64*), align 8
  %v0_35863 = load i64, i64* @rax, align 8
  store i64 %v0_35863, i64* inttoptr (i64 219242 to i64*), align 8
  %v0_35876 = load i64, i64* @rax, align 8
  store i64 %v0_35876, i64* inttoptr (i64 219261 to i64*), align 8
  %v0_35889 = load i64, i64* @rax, align 8
  store i64 %v0_35889, i64* inttoptr (i64 219280 to i64*), align 16
  %v0_3589c = load i64, i64* @rax, align 8
  store i64 %v0_3589c, i64* inttoptr (i64 219299 to i64*), align 8
  %v0_358af = load i64, i64* @rax, align 8
  store i64 %v0_358af, i64* inttoptr (i64 219318 to i64*), align 8
  %v0_358c2 = load i64, i64* @rax, align 8
  store i64 %v0_358c2, i64* inttoptr (i64 219337 to i64*), align 8
  %v0_358d5 = load i64, i64* @rax, align 8
  store i64 %v0_358d5, i64* inttoptr (i64 219356 to i64*), align 8
  %v0_358e8 = load i64, i64* @rax, align 8
  store i64 %v0_358e8, i64* inttoptr (i64 219375 to i64*), align 8
  %v0_358fb = load i64, i64* @rax, align 8
  store i64 %v0_358fb, i64* inttoptr (i64 219394 to i64*), align 8
  %v0_3590e = load i64, i64* @rax, align 8
  store i64 %v0_3590e, i64* inttoptr (i64 219413 to i64*), align 8
  %v0_35921 = load i64, i64* @rax, align 8
  store i64 %v0_35921, i64* inttoptr (i64 219432 to i64*), align 8
  %v0_35934 = load i64, i64* @rax, align 8
  store i64 %v0_35934, i64* inttoptr (i64 219451 to i64*), align 8
  %v0_35947 = load i64, i64* @rax, align 8
  store i64 %v0_35947, i64* inttoptr (i64 219470 to i64*), align 8
  %v0_3595a = load i64, i64* @rax, align 8
  store i64 %v0_3595a, i64* inttoptr (i64 219489 to i64*), align 8
  store i64 219501, i64* @rdi, align 8
  %v0_3596d = load i64, i64* @rax, align 8
  store i64 %v0_3596d, i64* inttoptr (i64 219508 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_359e6() local_unnamed_addr {
dec_label_pc_359e6:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_359f2() local_unnamed_addr {
dec_label_pc_359f2:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$77$718__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35a00:
  %v0_35a04 = load i64, i64* inttoptr (i64 219659 to i64*), align 8
  store i64 %v0_35a04, i64* @rdi, align 8
  %v0_35a10 = load i64, i64* inttoptr (i64 219671 to i64*), align 8
  store i64 %v0_35a10, i64* @rdi, align 8
  %v0_35a17 = load i64, i64* @rax, align 8
  store i64 %v0_35a17, i64* inttoptr (i64 219678 to i64*), align 8
  %v0_35a23 = load i64, i64* inttoptr (i64 219690 to i64*), align 8
  store i64 %v0_35a23, i64* @rdi, align 8
  %v0_35a2a = load i64, i64* @rax, align 8
  store i64 %v0_35a2a, i64* inttoptr (i64 219697 to i64*), align 8
  %v0_35a36 = load i64, i64* inttoptr (i64 219709 to i64*), align 8
  store i64 %v0_35a36, i64* @rdi, align 8
  %v0_35a3d = load i64, i64* @rax, align 8
  store i64 %v0_35a3d, i64* inttoptr (i64 219716 to i64*), align 8
  %v0_35a49 = load i64, i64* @rax, align 8
  store i64 %v0_35a49, i64* inttoptr (i64 219728 to i64*), align 16
  %v0_35a54 = load i64, i64* @rax, align 8
  ret i64 %v0_35a54
}

define i64 @"_ZN4lang12lang_luaj$5818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35a60:
  %v0_35a64 = load i64, i64* inttoptr (i64 219755 to i64*), align 8
  store i64 %v0_35a64, i64* @rdi, align 8
  %v0_35a70 = load i64, i64* inttoptr (i64 219767 to i64*), align 8
  store i64 %v0_35a70, i64* @rdi, align 8
  %v0_35a77 = load i64, i64* @rax, align 8
  store i64 %v0_35a77, i64* inttoptr (i64 219774 to i64*), align 8
  %v0_35a83 = load i64, i64* inttoptr (i64 219786 to i64*), align 8
  store i64 %v0_35a83, i64* @rdi, align 8
  %v0_35a8a = load i64, i64* @rax, align 8
  store i64 %v0_35a8a, i64* inttoptr (i64 219793 to i64*), align 8
  %v0_35a96 = load i64, i64* inttoptr (i64 219805 to i64*), align 8
  store i64 %v0_35a96, i64* @rdi, align 8
  %v0_35a9d = load i64, i64* @rax, align 8
  store i64 %v0_35a9d, i64* inttoptr (i64 219812 to i64*), align 8
  %v0_35aa9 = load i64, i64* inttoptr (i64 219824 to i64*), align 16
  store i64 %v0_35aa9, i64* @rdi, align 8
  %v0_35ab0 = load i64, i64* @rax, align 8
  store i64 %v0_35ab0, i64* inttoptr (i64 219831 to i64*), align 8
  %v0_35abc = load i64, i64* inttoptr (i64 219843 to i64*), align 8
  store i64 %v0_35abc, i64* @rdi, align 8
  %v0_35ac3 = load i64, i64* @rax, align 8
  store i64 %v0_35ac3, i64* inttoptr (i64 219850 to i64*), align 8
  %v0_35acf = load i64, i64* inttoptr (i64 219862 to i64*), align 8
  store i64 %v0_35acf, i64* @rdi, align 8
  %v0_35ad6 = load i64, i64* @rax, align 8
  store i64 %v0_35ad6, i64* inttoptr (i64 219869 to i64*), align 8
  %v0_35ae2 = load i64, i64* inttoptr (i64 219881 to i64*), align 8
  store i64 %v0_35ae2, i64* @rdi, align 8
  %v0_35ae9 = load i64, i64* @rax, align 8
  store i64 %v0_35ae9, i64* inttoptr (i64 219888 to i64*), align 16
  %v0_35af5 = load i64, i64* inttoptr (i64 219900 to i64*), align 8
  store i64 %v0_35af5, i64* @rdi, align 8
  %v0_35afc = load i64, i64* @rax, align 8
  store i64 %v0_35afc, i64* inttoptr (i64 219907 to i64*), align 8
  %v0_35b08 = load i64, i64* inttoptr (i64 219919 to i64*), align 8
  store i64 %v0_35b08, i64* @rdi, align 8
  %v0_35b0f = load i64, i64* @rax, align 8
  store i64 %v0_35b0f, i64* inttoptr (i64 219926 to i64*), align 8
  %v0_35b1b = load i64, i64* inttoptr (i64 219938 to i64*), align 8
  store i64 %v0_35b1b, i64* @rdi, align 8
  %v0_35b22 = load i64, i64* @rax, align 8
  store i64 %v0_35b22, i64* inttoptr (i64 219945 to i64*), align 8
  %v0_35b2e = load i64, i64* inttoptr (i64 219957 to i64*), align 8
  store i64 %v0_35b2e, i64* @rdi, align 8
  %v0_35b35 = load i64, i64* @rax, align 8
  store i64 %v0_35b35, i64* inttoptr (i64 219964 to i64*), align 8
  %v0_35b41 = load i64, i64* @rax, align 8
  store i64 %v0_35b41, i64* inttoptr (i64 219976 to i64*), align 8
  %v0_35b4c = load i64, i64* @rax, align 8
  ret i64 %v0_35b4c
}

define i64 @"_ZN4lang14lang_luaj$77$918__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35b50:
  %v0_35b54 = load i64, i64* inttoptr (i64 219995 to i64*), align 8
  store i64 %v0_35b54, i64* @rdi, align 8
  %v0_35b60 = load i64, i64* @rax, align 8
  store i64 %v0_35b60, i64* inttoptr (i64 220007 to i64*), align 8
  %v0_35b6b = load i64, i64* @rax, align 8
  ret i64 %v0_35b6b
}

define i64 @"_ZN4lang14lang_luaj$76$318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35b70:
  %v0_35b74 = load i64, i64* inttoptr (i64 220027 to i64*), align 8
  store i64 %v0_35b74, i64* @rdi, align 8
  %v0_35b80 = load i64, i64* inttoptr (i64 220039 to i64*), align 8
  store i64 %v0_35b80, i64* @rdi, align 8
  %v0_35b87 = load i64, i64* @rax, align 8
  store i64 %v0_35b87, i64* inttoptr (i64 220046 to i64*), align 8
  %v0_35b93 = load i64, i64* @rax, align 8
  store i64 %v0_35b93, i64* inttoptr (i64 220058 to i64*), align 8
  %v0_35b9e = load i64, i64* @rax, align 8
  ret i64 %v0_35b9e
}

define i64 @"_ZN4lang14lang_luaj$76$918__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35ba0:
  %v0_35ba4 = load i64, i64* inttoptr (i64 220075 to i64*), align 8
  store i64 %v0_35ba4, i64* @rdi, align 8
  %v0_35bb0 = load i64, i64* @rax, align 8
  store i64 %v0_35bb0, i64* inttoptr (i64 220087 to i64*), align 8
  %v0_35bbb = load i64, i64* @rax, align 8
  ret i64 %v0_35bbb
}

define i64 @"_ZN4lang11lang_luaj$118__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35bc0:
  %v0_35bc4 = load i64, i64* inttoptr (i64 220107 to i64*), align 8
  store i64 %v0_35bc4, i64* @rdi, align 8
  %v0_35bd0 = load i64, i64* inttoptr (i64 220119 to i64*), align 8
  store i64 %v0_35bd0, i64* @rdi, align 8
  %v0_35bd7 = load i64, i64* @rax, align 8
  store i64 %v0_35bd7, i64* inttoptr (i64 220126 to i64*), align 8
  %v0_35be3 = load i64, i64* @rax, align 8
  store i64 %v0_35be3, i64* inttoptr (i64 220138 to i64*), align 8
  %v0_35bee = load i64, i64* @rax, align 8
  ret i64 %v0_35bee
}

define i64 @"_ZN4lang16lang_luaj$78$0$018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35bf0:
  %v0_35bf4 = load i64, i64* inttoptr (i64 220155 to i64*), align 8
  store i64 %v0_35bf4, i64* @rdi, align 8
  %v0_35c00 = load i64, i64* inttoptr (i64 220167 to i64*), align 8
  store i64 %v0_35c00, i64* @rdi, align 8
  %v0_35c07 = load i64, i64* @rax, align 8
  store i64 %v0_35c07, i64* inttoptr (i64 220174 to i64*), align 8
  %v0_35c13 = load i64, i64* inttoptr (i64 220186 to i64*), align 8
  store i64 %v0_35c13, i64* @rdi, align 8
  %v0_35c1a = load i64, i64* @rax, align 8
  store i64 %v0_35c1a, i64* inttoptr (i64 220193 to i64*), align 8
  %v0_35c26 = load i64, i64* inttoptr (i64 220205 to i64*), align 8
  store i64 %v0_35c26, i64* @rdi, align 8
  %v0_35c2d = load i64, i64* @rax, align 8
  store i64 %v0_35c2d, i64* inttoptr (i64 220212 to i64*), align 8
  %v0_35c39 = load i64, i64* @rax, align 8
  store i64 %v0_35c39, i64* inttoptr (i64 220224 to i64*), align 64
  %v0_35c44 = load i64, i64* @rax, align 8
  ret i64 %v0_35c44
}

define i64 @"_ZN4lang14lang_luaj$44$318__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35c50:
  %v0_35c54 = load i64, i64* inttoptr (i64 220251 to i64*), align 8
  store i64 %v0_35c54, i64* @rdi, align 8
  %v0_35c60 = load i64, i64* @rax, align 8
  store i64 %v0_35c60, i64* inttoptr (i64 220263 to i64*), align 8
  %v0_35c6b = load i64, i64* @rax, align 8
  ret i64 %v0_35c6b
}

define i64 @"_ZN4lang14lang_luaj$76$218__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35c70:
  store i64 220295, i64* @rdi, align 8
  %v0_35c87 = load i64, i64* @rax, align 8
  store i64 %v0_35c87, i64* inttoptr (i64 220302 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$78$018__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35ce0:
  store i64 220391, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_35ec0() local_unnamed_addr {
dec_label_pc_35ec0:
  store i64 259, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_35ecc() local_unnamed_addr {
dec_label_pc_35ecc:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_35ed8() local_unnamed_addr {
dec_label_pc_35ed8:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$7818__U3c_clinit__U3e_EJvv"() local_unnamed_addr {
dec_label_pc_35ef0:
  %v0_35f07 = load i64, i64* @rax, align 8
  store i64 %v0_35f07, i64* inttoptr (i64 220942 to i64*), align 8
  %v0_35f1a = load i64, i64* @rax, align 8
  store i64 %v0_35f1a, i64* inttoptr (i64 220961 to i64*), align 8
  %v0_35f2d = load i64, i64* @rax, align 8
  store i64 %v0_35f2d, i64* inttoptr (i64 220980 to i64*), align 8
  %v0_35f40 = load i64, i64* @rax, align 8
  store i64 %v0_35f40, i64* inttoptr (i64 220999 to i64*), align 8
  %v0_35f53 = load i64, i64* @rax, align 8
  store i64 %v0_35f53, i64* inttoptr (i64 221018 to i64*), align 8
  store i64 221030, i64* @rdi, align 8
  %v0_35f66 = load i64, i64* @rax, align 8
  store i64 %v0_35f66, i64* inttoptr (i64 221037 to i64*), align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3606c() local_unnamed_addr {
dec_label_pc_3606c:
  store i64 258, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_36078() local_unnamed_addr {
dec_label_pc_36078:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble9optstringEJPNS1_9LuaStringES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_36090:
  store i64 %arg1, i64* @rdi, align 8
  %v2_36094 = load i64, i64* @rdi, align 8
  store i64 %v2_36094, i64* @rax, align 8
  ret i64 %v2_36094
}

define i64 @_ZN3org4luaj3vm29LuaDouble8tostringEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_360b0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_360b4 = load i64, i64* @rdi, align 8
  store i64 %v2_360b4, i64* @rax, align 8
  ret i64 %v2_360b4
}

define i64 @_ZN3org4luaj3vm29LuaDouble11checkstringEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_360d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_360d4 = load i64, i64* @rdi, align 8
  store i64 %v2_360d4, i64* @rax, align 8
  ret i64 %v2_360d4
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib11findupvalueEJPNS1_9LuaStringEPNS1_10LuaClosureEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_360f0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 221436, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_360fe = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_360fe, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_36190(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_36190:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_36190 = load i64, i64* @rbx, align 8
  %v1_36190 = trunc i64 %v0_36190 to i32
  %v2_36190 = add i32 %v1_36190, -1
  %v17_36190 = zext i32 %v2_36190 to i64
  store i64 %v17_36190, i64* @rbx, align 8
  %v0_36193 = load i64, i64* @rax, align 8
  %v1_36193 = add i64 %v0_36193, 16
  store i64 %v1_36193, i64* @rax, align 8
  %v2_36197 = load i64, i64* @rdx, align 8
  %v3_36197 = trunc i64 %v2_36197 to i32
  %v9_36197 = icmp ult i32 %v2_36190, %v3_36197
  %v1_36199 = icmp eq i1 %v9_36197, false
  br i1 %v1_36199, label %bb, label %dec_label_pc_3619b

bb:                                               ; preds = %dec_label_pc_36190
  %v2_36199 = call i64 @function_361c0()
  store i64 %v2_36199, i64* @rax, align 8
  %v1_3619e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3619b

dec_label_pc_3619b:                               ; preds = %bb, %dec_label_pc_36190
  %v1_3619e = phi i64 [ %v1_3619e.pre, %bb ], [ %v17_36190, %dec_label_pc_36190 ]
  %v0_3619e = phi i64 [ %v2_36199, %bb ], [ %v1_36193, %dec_label_pc_36190 ]
  %v2_3619e = mul i64 %v1_3619e, 8
  %v3_3619e = add i64 %v2_3619e, %v0_3619e
  %v4_3619e = inttoptr i64 %v3_3619e to i64*
  %v5_3619e = load i64, i64* %v4_3619e, align 8
  store i64 %v5_3619e, i64* @rax, align 8
  %v1_361a2 = add i64 %v5_3619e, 8
  %v2_361a2 = inttoptr i64 %v1_361a2 to i64*
  %v3_361a2 = load i64, i64* %v2_361a2, align 8
  store i64 %v3_361a2, i64* @rax, align 8
  store i64 %arg4, i64* @rbx, align 8
  ret i64 %v3_361a2
}

define i64 @function_361b0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_361b0:
  store i64 0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_361b9() local_unnamed_addr {
dec_label_pc_361b9:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_361c0() local_unnamed_addr {
dec_label_pc_361c0:
  %v0_361c0 = load i64, i64* @rbx, align 8
  store i64 %v0_361c0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib19DebugLib$setupvalue6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_361d0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_361d6 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_361d6, i64* @rbx, align 8
  store i64 221721, i64* %rsi.global-to-local, align 8
  store i64 %v0_361d6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_362b4() local_unnamed_addr {
dec_label_pc_362b4:
  %rbp.global-to-local = alloca i64, align 8
  %v0_362b4 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_362b4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_362bd() local_unnamed_addr {
dec_label_pc_362bd:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_362c2() local_unnamed_addr {
dec_label_pc_362c2:
  %v0_362c2 = load i64, i64* @rax, align 8
  store i64 %v0_362c2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue7valueOfEJPNS1_9LuaStringEPN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_362d0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_362d1 = load i64, i64* @rdi, align 8
  store i64 %v0_362d1, i64* @rbx, align 8
  store i64 221915, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_362f0:
  store i64 221945, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_362ff = load i64, i64* inttoptr (i64 221958 to i64*), align 8
  store i64 %v0_362ff, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_36649(i64 %arg1) local_unnamed_addr {
dec_label_pc_36649:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_36652() local_unnamed_addr {
dec_label_pc_36652:
  store i64 6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3665e() local_unnamed_addr {
dec_label_pc_3665e:
  store i64 5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3666a() local_unnamed_addr {
dec_label_pc_3666a:
  store i64 4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_36676() local_unnamed_addr {
dec_label_pc_36676:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_36682() local_unnamed_addr {
dec_label_pc_36682:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3668e() local_unnamed_addr {
dec_label_pc_3668e:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3669a() local_unnamed_addr {
dec_label_pc_3669a:
  store i64 10, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_366a6() local_unnamed_addr {
dec_label_pc_366a6:
  store i64 9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_366b2() local_unnamed_addr {
dec_label_pc_366b2:
  store i64 8, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_366be() local_unnamed_addr {
dec_label_pc_366be:
  store i64 7, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11errorresultEJPNS1_7VarargsEPN4java4lang6StringE(i64 %arg1) local_unnamed_addr {
dec_label_pc_366d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 222942, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_366e0 = load i64, i64* inttoptr (i64 222951 to i64*), align 8
  store i64 %v0_366e0, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_36739(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_36739:
  %v0_36739 = load i64, i64* @rbx, align 8
  store i64 %v0_36739, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_36739
}

define i64 @"_ZN3org4luaj3vm23lib27PackageLib$preload_searcher6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_36750:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_36752 = load i64, i64* @rdi, align 8
  store i64 %v0_36752, i64* @rbx, align 8
  %v0_36755 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_36755, i64* @rdi, align 8
  store i64 %v0_36755, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_3676d = add i64 %v0_36752, 24
  %v2_3676d = inttoptr i64 %v1_3676d to i64*
  %v3_3676d = load i64, i64* %v2_3676d, align 8
  store i64 %v3_3676d, i64* @rax, align 8
  store i64 223096, i64* @rdi, align 8
  %v1_36778 = add i64 %v3_3676d, 32
  %v2_36778 = inttoptr i64 %v1_36778 to i64*
  %v3_36778 = load i64, i64* %v2_36778, align 8
  store i64 %v3_36778, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3683f() local_unnamed_addr {
dec_label_pc_3683f:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib24PackageLib$java_searcher6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_36850:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_36859 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_36859, i64* @rax, align 8
  store i64 223357, i64* %rsi.global-to-local, align 8
  store i64 %v0_36859, i64* @rdi, align 8
  ret i64 %v0_36859
}

define i64 @function_36930() local_unnamed_addr {
dec_label_pc_36930:
  store i64 223543, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3695d() local_unnamed_addr {
dec_label_pc_3695d:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_36a08() local_unnamed_addr {
dec_label_pc_36a08:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_36a55() local_unnamed_addr {
dec_label_pc_36a55:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_36a5c() local_unnamed_addr {
dec_label_pc_36a5c:
  %v0_36a5c = load i64, i64* @rax, align 8
  store i64 %v0_36a5c, i64* @rdi, align 8
  ret i64 %v0_36a5c
}

define i64 @_ZN3org4luaj3vm23lib10PackageLib18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_36a70:
  %v0_36a76 = load i64, i64* inttoptr (i64 223869 to i64*), align 8
  store i64 %v0_36a76, i64* @rdi, align 8
  %v1_36a76 = load i64, i64* @rax, align 8
  ret i64 %v1_36a76
}

define i64 @function_36be0() local_unnamed_addr {
dec_label_pc_36be0:
  %v0_36be0 = load i64, i64* inttoptr (i64 224231 to i64*), align 8
  store i64 %v0_36be0, i64* @rax, align 8
  ret i64 %v0_36be0
}

define i64 @_ZN3org4luaj3vm23lib10PackageLib4callEJPNS1_8LuaValueES5_S5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_36c00:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_36c07 = load i64, i64* @rdx, align 8
  %v0_36c0e = load i64, i64* @rdi, align 8
  store i64 %v0_36c0e, i64* @rbx, align 8
  store i64 224289, i64* @rdi, align 8
  %v2_36c24 = add i64 %v0_36c0e, 24
  %v3_36c24 = inttoptr i64 %v2_36c24 to i64*
  store i64 %v0_36c07, i64* %v3_36c24, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_36d46(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_36d46:
  %r8.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* %r9.global-to-local, align 8
  store i64 %arg5, i64* %r8.global-to-local, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_36d46 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_36d46 = load i64, i64* @rax, align 8
  %v4_36d46 = trunc i64 %v3_36d46 to i8
  %v5_36d46 = add i8 %v4_36d46, %v2_36d46
  %v21_36d46 = inttoptr i64 %v3_36d46 to i8*
  store i8 %v5_36d46, i8* %v21_36d46, align 1
  %v0_36d48 = load i64, i64* @rax, align 8
  %v1_36d48 = add i64 %v0_36d48, -117
  %v2_36d48 = inttoptr i64 %v1_36d48 to i8*
  %v3_36d48 = load i8, i8* %v2_36d48, align 1
  %v4_36d48 = load i64, i64* @rcx, align 8
  %v5_36d48 = trunc i64 %v4_36d48 to i8
  %v6_36d48 = add i8 %v5_36d48, %v3_36d48
  store i8 %v6_36d48, i8* %v2_36d48, align 1
  %v0_36d4b = load i64, i64* %r8.global-to-local, align 8
  %v1_36d4b = add i64 %v0_36d4b, -119
  %v2_36d4b = inttoptr i64 %v1_36d4b to i8*
  %v3_36d4b = load i8, i8* %v2_36d4b, align 1
  %v4_36d4b = load i64, i64* %r9.global-to-local, align 8
  %v5_36d4b = trunc i64 %v4_36d4b to i8
  %v6_36d4b = add i8 %v5_36d4b, %v3_36d4b
  store i8 %v6_36d4b, i8* %v2_36d4b, align 1
  %v0_36d4f = load i64, i64* @rax, align 8
  ret i64 %v0_36d4f
}

define i64 @_ZN3org4luaj3vm23lib10PackageLib10setLuaPathEJvPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_36f10:
  store i64 %arg1, i64* @rdi, align 8
  %v0_36f17 = load i64, i64* @rdi, align 8
  %v1_36f17 = add i64 %v0_36f17, 32
  %v2_36f17 = inttoptr i64 %v1_36f17 to i64*
  %v3_36f17 = load i64, i64* %v2_36f17, align 8
  store i64 %v3_36f17, i64* @rbx, align 8
  store i64 225058, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18PackageLib$loadlib6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_36f50:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 225139, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_36f75 = load i64, i64* inttoptr (i64 225148 to i64*), align 8
  store i64 %v0_36f75, i64* @rbx, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_36fc0:
  %v0_36fc0 = load i64, i64* inttoptr (i64 225223 to i64*), align 8
  store i64 %v0_36fc0, i64* @rdi, align 8
  %v5_36fc7 = load i64, i64* @rax, align 8
  ret i64 %v5_36fc7
}

define i64 @function_36fed() local_unnamed_addr {
dec_label_pc_36fed:
  %v0_36fed = load i64, i64* inttoptr (i64 225268 to i64*), align 8
  store i64 %v0_36fed, i64* @rbx, align 8
  store i64 225275, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_372bf(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_372bf:
  store i64 %arg1, i64* @rdi, align 8
  %v1_372bf = add i64 %arg3, -1
  %v10_372bf = icmp eq i64 %v1_372bf, 0
  store i64 %v1_372bf, i64* @rdx, align 8
  %v1_372c3 = icmp eq i1 %v10_372bf, false
  %v0_372d4 = load i64, i64* @rax, align 8
  br i1 %v1_372c3, label %dec_label_pc_372d4, label %dec_label_pc_372c5

dec_label_pc_372c5:                               ; preds = %dec_label_pc_372bf
  %v1_372c5 = add i64 %v0_372d4, -8
  %v2_372c5 = inttoptr i64 %v1_372c5 to i64*
  %v3_372c5 = load i64, i64* %v2_372c5, align 8
  store i64 %v3_372c5, i64* @rax, align 8
  ret i64 %v3_372c5

dec_label_pc_372d4:                               ; preds = %dec_label_pc_372bf
  store i64 %v0_372d4, i64* @rdi, align 8
  ret i64 %v0_372d4
}

define i64 @"_ZN3org4luaj3vm23lib16DebugLib$gethook6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_372f0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_372f6 = load i64, i64* @rdi, align 8
  store i64 %v0_372f6, i64* @rbp, align 8
  %v0_372f9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_372f9, i64* @rbx, align 8
  store i64 %v0_372f9, i64* @rdi, align 8
  store i64 %v0_372f9, i64* @rax, align 8
  %v4_37309 = trunc i64 %v0_372f9 to i32
  %tmp242 = icmp slt i32 %v4_37309, 1
  br i1 %tmp242, label %bb, label %dec_label_pc_37311

bb:                                               ; preds = %dec_label_pc_372f0
  %v5_3730b = call i64 @function_37468()
  store i64 %v5_3730b, i64* @rax, align 8
  %v2_37311.pre = load i64, i64* %rsi.global-to-local, align 8
  %v0_37319.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_37311

dec_label_pc_37311:                               ; preds = %bb, %dec_label_pc_372f0
  %v0_37319 = phi i64 [ %v0_37319.pre, %bb ], [ %v0_372f9, %dec_label_pc_372f0 ]
  %v2_37311 = phi i64 [ %v2_37311.pre, %bb ], [ %v0_372f9, %dec_label_pc_372f0 ]
  store i64 %v2_37311, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_37319, i64* @rdi, align 8
  %v1_37322 = add i64 %v2_37311, 8
  %v2_37322 = inttoptr i64 %v1_37322 to i64*
  %v3_37322 = load i64, i64* %v2_37322, align 8
  store i64 %v3_37322, i64* @rbx, align 8
  ret i64 %v2_37311
}

define i64 @function_3742a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3742a:
  %v0_3742a = load i64, i64* @rbx, align 8
  store i64 %v0_3742a, i64* @rdx, align 8
  %v0_37430 = load i64, i64* @rbp, align 8
  store i64 %v0_37430, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v0_37442 = load i64, i64* @rax, align 8
  ret i64 %v0_37442
}

define i64 @function_37448(i64 %arg1) local_unnamed_addr {
dec_label_pc_37448:
  store i64 %arg1, i64* @rdi, align 8
  %v0_37448 = load i64, i64* inttoptr (i64 226383 to i64*), align 8
  store i64 %v0_37448, i64* @rax, align 8
  %v1_3744f = add i64 %v0_37448, 8
  %v2_3744f = inttoptr i64 %v1_3744f to i32*
  %v3_3744f = load i32, i32* %v2_3744f, align 4
  %v5_3744f = trunc i64 %arg1 to i32
  %v1_37452 = add i64 %v0_37448, 16
  store i64 %v1_37452, i64* @rdx, align 8
  %tmp236 = icmp ugt i32 %v3_3744f, %v5_3744f
  br i1 %tmp236, label %dec_label_pc_37458, label %bb

bb:                                               ; preds = %dec_label_pc_37448
  %v3_37456 = call i64 @function_37480()
  store i64 %v3_37456, i64* @rax, align 8
  %v0_3745b.pre = load i64, i64* @rdx, align 8
  %v1_3745b.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_37458

dec_label_pc_37458:                               ; preds = %dec_label_pc_37448, %bb
  %v1_3745b = phi i64 [ %v1_3745b.pre, %bb ], [ %arg1, %dec_label_pc_37448 ]
  %v0_3745b = phi i64 [ %v0_3745b.pre, %bb ], [ %v1_37452, %dec_label_pc_37448 ]
  %v2_3745b = mul i64 %v1_3745b, 8
  %v3_3745b = add i64 %v2_3745b, %v0_3745b
  %v4_3745b = inttoptr i64 %v3_3745b to i64*
  %v5_3745b = load i64, i64* %v4_3745b, align 8
  store i64 %v5_3745b, i64* @rbx, align 8
  %v4_3745f = call i64 @function_3742a(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_3745f, i64* @rax, align 8
  ret i64 %v4_3745f
}

define i64 @function_37468() local_unnamed_addr {
dec_label_pc_37468:
  %v0_37468 = load i64, i64* @rbp, align 8
  %v1_37468 = add i64 %v0_37468, 24
  %v2_37468 = inttoptr i64 %v1_37468 to i64*
  %v3_37468 = load i64, i64* %v2_37468, align 8
  store i64 %v3_37468, i64* @rax, align 8
  %v1_3746c = add i64 %v3_37468, 24
  %v2_3746c = inttoptr i64 %v1_3746c to i64*
  %v3_3746c = load i64, i64* %v2_3746c, align 8
  store i64 %v3_3746c, i64* @rax, align 8
  %v1_37470 = add i64 %v3_3746c, 72
  %v2_37470 = inttoptr i64 %v1_37470 to i64*
  %v3_37470 = load i64, i64* %v2_37470, align 8
  store i64 %v3_37470, i64* @rax, align 8
  ret i64 %v3_37470
}

define i64 @function_37479() local_unnamed_addr {
dec_label_pc_37479:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_37480() local_unnamed_addr {
dec_label_pc_37480:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$traceback6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_37490:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_37497 = load i64, i64* @rdi, align 8
  store i64 %v0_37497, i64* %rbp.global-to-local, align 8
  %v2_3749b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_3749b, i64* @rax, align 8
  store i64 %v2_3749b, i64* @rbx, align 8
  store i64 %v2_3749b, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v4_374af = trunc i64 %v2_3749b to i8
  %v5_374af = icmp eq i8 %v4_374af, 0
  %v1_374b1 = icmp eq i1 %v5_374af, false
  br i1 %v1_374b1, label %bb, label %dec_label_pc_374b7

bb:                                               ; preds = %dec_label_pc_37490
  %v2_374b1 = call i64 @function_37590()
  store i64 %v2_374b1, i64* @rax, align 8
  %v0_374b7.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_374d3.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_374b7

dec_label_pc_374b7:                               ; preds = %bb, %dec_label_pc_37490
  %v0_374e7 = phi i64 [ %v0_374d3.pre, %bb ], [ %v2_3749b, %dec_label_pc_37490 ]
  %v0_374f3 = phi i64 [ %v0_374b7.pre, %bb ], [ %v0_37497, %dec_label_pc_37490 ]
  %v1_374b7 = add i64 %v0_374f3, 24
  %v2_374b7 = inttoptr i64 %v1_374b7 to i64*
  %v3_374b7 = load i64, i64* %v2_374b7, align 8
  store i64 %v3_374b7, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_374c6 = add i64 %v3_374b7, 24
  %v2_374c6 = inttoptr i64 %v1_374c6 to i64*
  %v3_374c6 = load i64, i64* %v2_374c6, align 8
  store i64 %v3_374c6, i64* @rax, align 8
  %v1_374ca = add i64 %v3_374c6, 72
  %v2_374ca = inttoptr i64 %v1_374ca to i64*
  %v3_374ca = load i64, i64* %v2_374ca, align 8
  store i64 1, i64* @rax, align 8
  store i64 1, i64* @rdx, align 8
  store i64 %v0_374e7, i64* @rdi, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  %v3_374f3 = load i64, i64* %v2_374b7, align 8
  store i64 %v3_374f3, i64* @rdi, align 8
  store i64 1, i64* @rbx, align 8
  store i64 %v3_374ca, i64* %rsi.global-to-local, align 8
  %v1_374fc = inttoptr i64 %v3_374f3 to i64*
  %v2_374fc = load i64, i64* %v1_374fc, align 8
  store i64 %v2_374fc, i64* @rax, align 8
  %v1_37505 = inttoptr i64 %v2_374fc to i64*
  %v2_37505 = load i64, i64* %v1_37505, align 8
  store i64 %v2_37505, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_374fc, i64* @rdi, align 8
  store i64 %v2_374fc, i64* @rbx, align 8
  ret i64 %v2_374fc
}

define i64 @function_37590() local_unnamed_addr {
dec_label_pc_37590:
  %v2_37590 = load i64, i64* @rbx, align 8
  store i64 %v2_37590, i64* @rax, align 8
  store i64 %v2_37590, i64* @rdi, align 8
  ret i64 %v2_37590
}

define i64 @function_375b4() local_unnamed_addr {
dec_label_pc_375b4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib9StringLib18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_375c0:
  store i64 226763, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_375d7 = load i64, i64* inttoptr (i64 226782 to i64*), align 8
  store i64 %v0_375d7, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_37620() local_unnamed_addr {
dec_label_pc_37620:
  %v0_37624 = load i64, i64* @rax, align 8
  ret i64 %v0_37624
}

define i64 @function_3762a(i32 %arg1) local_unnamed_addr {
dec_label_pc_3762a:
  %v0_37644 = load i64, i64* @rax, align 8
  ret i64 %v0_37644
}

define i64 @function_37634() local_unnamed_addr {
dec_label_pc_37634:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3763f() local_unnamed_addr {
dec_label_pc_3763f:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3764a(i64 %arg1) local_unnamed_addr {
dec_label_pc_3764a:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rdi, align 8
  %v1_37656 = load i64, i64* @rbx, align 8
  %v3_37656 = add i64 %v1_37656, %tmp229
  store i64 %v3_37656, i64* @rdx, align 8
  %v0_3765b = load i64, i64* @rax, align 8
  ret i64 %v0_3765b
}

define i64 @function_37660(i64 %arg1, i64 %arg2, i64 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_37660:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_37660 = load i8, i8* bitcast (i64* @rdx to i8*), align 8
  %v3_37660 = zext i8 %v2_37660 to i64
  store i64 %v3_37660, i64* @rax, align 8
  %v2_37663 = and i8 %v2_37660, 6
  %v3_37663 = icmp eq i8 %v2_37663, 0
  br i1 %v3_37663, label %dec_label_pc_3766c, label %dec_label_pc_37667

dec_label_pc_37667:                               ; preds = %dec_label_pc_37660
  %v1_37667 = zext i8 %v2_37660 to i32
  %v2_37667 = or i32 %v1_37667, 1
  %v5_37667 = trunc i32 %v2_37667 to i8
  %v9_37667 = zext i32 %v2_37667 to i64
  store i64 %v9_37667, i64* @rax, align 8
  %v2_3766a = load i64, i64* @rdx, align 8
  %v3_3766a = inttoptr i64 %v2_3766a to i8*
  store i8 %v5_37667, i8* %v3_3766a, align 1
  %v0_3767c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3766c

dec_label_pc_3766c:                               ; preds = %dec_label_pc_37667, %dec_label_pc_37660
  %v0_3767c = phi i64 [ %v0_3767c.pre, %dec_label_pc_37667 ], [ %v3_37660, %dec_label_pc_37660 ]
  %v0_3766c = load i64, i64* @rbx, align 8
  %v1_3766c = add i64 %v0_3766c, 1
  store i64 %v1_3766c, i64* @rbx, align 8
  ret i64 %v0_3767c
}

define i64 @function_37682() local_unnamed_addr {
dec_label_pc_37682:
  %v0_37682 = load i64, i64* @rbx, align 8
  store i64 %v0_37682, i64* @rdi, align 8
  %v1_37684 = load i64, i64* @rax, align 8
  ret i64 %v1_37684
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$lower4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_377e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_377ed = icmp eq i64 %arg2, 0
  br i1 %v1_377ed, label %bb, label %dec_label_pc_377f2

bb:                                               ; preds = %dec_label_pc_377e0
  %v1_377f0 = call i64 @function_37815()
  store i64 %v1_377f0, i64* @rax, align 8
  br label %dec_label_pc_377f2

dec_label_pc_377f2:                               ; preds = %bb, %dec_label_pc_377e0
  %v0_377f2 = phi i64 [ %v1_377f0, %bb ], [ %arg2, %dec_label_pc_377e0 ]
  store i64 %v0_377f2, i64* @rdi, align 8
  ret i64 %v0_377f2
}

define i64 @function_37815() local_unnamed_addr {
dec_label_pc_37815:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$upper4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_37820:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_3782d = icmp eq i64 %arg2, 0
  br i1 %v1_3782d, label %bb, label %dec_label_pc_37832

bb:                                               ; preds = %dec_label_pc_37820
  %v1_37830 = call i64 @function_37855()
  store i64 %v1_37830, i64* @rax, align 8
  br label %dec_label_pc_37832

dec_label_pc_37832:                               ; preds = %bb, %dec_label_pc_37820
  %v0_37832 = phi i64 [ %v1_37830, %bb ], [ %arg2, %dec_label_pc_37820 ]
  store i64 %v0_37832, i64* @rdi, align 8
  ret i64 %v0_37832
}

define i64 @function_37855() local_unnamed_addr {
dec_label_pc_37855:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN3org4luaj3vm23lib16BaseLib$tostring4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_37860:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_37860 = load i64, i64* %rbp.global-to-local, align 8
  %v0_37861 = load i64, i64* @rbx, align 8
  %v0_37862 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_37862, i64* @rbx, align 8
  store i64 %v0_37862, i64* @rdi, align 8
  store i64 %v0_37862, i64* @rax, align 8
  %v0_3786f = load i64, i64* inttoptr (i64 227446 to i64*), align 8
  store i64 %v0_3786f, i64* %rsi.global-to-local, align 8
  store i64 %v0_37862, i64* @rbp, align 8
  store i64 %v0_3786f, i64* @rax, align 8
  store i64 %v0_37862, i64* @rdi, align 8
  %v4_3788b = trunc i64 %v0_3786f to i8
  %v5_3788b = icmp eq i8 %v4_3788b, 0
  br i1 %v5_3788b, label %bb, label %dec_label_pc_3788f

bb:                                               ; preds = %dec_label_pc_37860
  %v3_3788d = call i64 @function_378f0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_3788d, i64* @rax, align 8
  %v2_3788f.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_3788f

dec_label_pc_3788f:                               ; preds = %bb, %dec_label_pc_37860
  %v2_378c0 = phi i64 [ %v2_3788f.pre, %bb ], [ %v0_3786f, %dec_label_pc_37860 ]
  store i64 %v2_378c0, i64* %rbp.global-to-local, align 8
  store i64 %v2_378c0, i64* @rdi, align 8
  store i64 %v2_378c0, i64* @rdx, align 8
  store i64 %v2_378c0, i64* @rax, align 8
  %v4_378af = trunc i64 %v2_378c0 to i8
  %v5_378af = icmp eq i8 %v4_378af, 0
  %v1_378b1 = icmp eq i1 %v5_378af, false
  br i1 %v1_378b1, label %dec_label_pc_378c0, label %dec_label_pc_378b3

dec_label_pc_378b3:                               ; preds = %dec_label_pc_3788f
  store i64 %v0_37861, i64* @rbx, align 8
  store i64 %v0_37860, i64* %rbp.global-to-local, align 8
  ret i64 %v2_378c0

dec_label_pc_378c0:                               ; preds = %dec_label_pc_3788f
  store i64 227539, i64* @rdi, align 8
  store i64 %v2_378c0, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_378f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_378f0:
  %v2_378f0 = load i64, i64* @rbp, align 8
  store i64 %v2_378f0, i64* @rax, align 8
  %v0_378f4 = load i64, i64* @rbx, align 8
  store i64 %v0_378f4, i64* @rsi, align 8
  store i64 %v2_378f0, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_378f0
}

define i64 @"_ZN3org4luaj3vm23lib12BaseLib$type4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_37910:
  store i64 %arg1, i64* @rdi, align 8
  store i64 227620, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib13BaseLib$pcall6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_37940:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_37946 = load i64, i64* @rdi, align 8
  %v0_37949 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_37949, i64* @rbx, align 8
  store i64 %v0_37949, i64* @rax, align 8
  store i64 %v0_37949, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_37964 = add i64 %v0_37946, 24
  %v2_37964 = inttoptr i64 %v1_37964 to i64*
  %v3_37964 = load i64, i64* %v2_37964, align 8
  store i64 %v3_37964, i64* @rax, align 8
  %v1_37968 = add i64 %v3_37964, 24
  %v2_37968 = inttoptr i64 %v1_37968 to i64*
  %v3_37968 = load i64, i64* %v2_37968, align 8
  store i64 %v3_37968, i64* @rax, align 8
  %v1_3796c = icmp eq i64 %v3_37968, 0
  br i1 %v1_3796c, label %dec_label_pc_37986, label %dec_label_pc_37971

dec_label_pc_37971:                               ; preds = %dec_label_pc_37940
  %v1_37971 = add i64 %v3_37968, 96
  %v2_37971 = inttoptr i64 %v1_37971 to i64*
  %v3_37971 = load i64, i64* %v2_37971, align 8
  store i64 %v3_37971, i64* @rdi, align 8
  %v1_37975 = icmp eq i64 %v3_37971, 0
  br i1 %v1_37975, label %dec_label_pc_37986, label %dec_label_pc_3797a

dec_label_pc_3797a:                               ; preds = %dec_label_pc_37971
  %v1_3797a = inttoptr i64 %v3_37971 to i64*
  %v2_3797a = load i64, i64* %v1_3797a, align 8
  store i64 %v2_3797a, i64* @rax, align 8
  store i64 %v0_37946, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_37986

dec_label_pc_37986:                               ; preds = %dec_label_pc_3797a, %dec_label_pc_37971, %dec_label_pc_37940
  %v2_3798d = phi i64 [ %v0_37946, %dec_label_pc_3797a ], [ 1, %dec_label_pc_37971 ], [ 1, %dec_label_pc_37940 ]
  store i64 %v2_3798d, i64* @rax, align 8
  %v1_37990 = add i64 %v2_3798d, 536
  %v2_37990 = inttoptr i64 %v1_37990 to i64*
  %v3_37990 = load i64, i64* %v2_37990, align 8
  store i64 %v3_37990, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_37949, i64* @rdi, align 8
  store i64 2, i64* @rdx, align 8
  %v3_379a5 = load i64, i64* inttoptr (i64 1426 to i64*), align 8
  store i64 %v3_379a5, i64* @rdx, align 8
  store i64 %v3_37990, i64* %rsi.global-to-local, align 8
  store i64 227771, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_37a62(i64 %arg1) local_unnamed_addr {
dec_label_pc_37a62:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_37a8b() local_unnamed_addr {
dec_label_pc_37a8b:
  %v0_37a8b = load i64, i64* @rax, align 8
  %v1_37a8b = add i64 %v0_37a8b, -8
  %v2_37a8b = inttoptr i64 %v1_37a8b to i64*
  %v3_37a8b = load i64, i64* %v2_37a8b, align 8
  store i64 %v3_37a8b, i64* @rdi, align 8
  %v1_37a8f = inttoptr i64 %v3_37a8b to i64*
  %v2_37a8f = load i64, i64* %v1_37a8f, align 8
  store i64 %v2_37a8f, i64* @rax, align 8
  %v1_37a92 = add i64 %v2_37a8f, 144
  %v2_37a92 = inttoptr i64 %v1_37a92 to i64*
  %v3_37a92 = load i64, i64* %v2_37a92, align 8
  store i64 %v3_37a92, i64* @rax, align 8
  %v1_37a9b = icmp eq i64 %v3_37a92, 0
  %v2_37a9e = load i64, i64* inttoptr (i64 228006 to i64*), align 8
  %v3_37a9e = select i1 %v1_37a9b, i64 %v2_37a9e, i64 %v3_37a92
  store i64 %v3_37a9e, i64* @rax, align 8
  %v0_37aa6 = load i64, i64* inttoptr (i64 228013 to i64*), align 8
  store i64 %v0_37aa6, i64* @rdi, align 8
  ret i64 %v3_37a9e
}

define i64 @function_37ab7() local_unnamed_addr {
dec_label_pc_37ab7:
  %v2_37ab7 = load i64, i64* @rbx, align 8
  store i64 %v2_37ab7, i64* @rax, align 8
  %v1_37aba = add i64 %v2_37ab7, 40
  %v2_37aba = inttoptr i64 %v1_37aba to i64*
  %v3_37aba = load i64, i64* %v2_37aba, align 8
  store i64 %v3_37aba, i64* @rax, align 8
  store i64 %v2_37ab7, i64* @rdi, align 8
  %v1_37ac6 = call i64 @function_37a62(i64 %v2_37ab7)
  store i64 %v1_37ac6, i64* @rax, align 8
  ret i64 %v1_37ac6
}

define i64 @function_37ace() local_unnamed_addr {
dec_label_pc_37ace:
  %rbp.global-to-local = alloca i64, align 8
  %v0_37ace = load i64, i64* @rax, align 8
  %v1_37ace = add i64 %v0_37ace, -8
  %v2_37ace = inttoptr i64 %v1_37ace to i64*
  %v3_37ace = load i64, i64* %v2_37ace, align 8
  store i64 %v3_37ace, i64* @rbx, align 8
  %v0_37ad2 = load i64, i64* %rbp.global-to-local, align 8
  %v1_37ad2 = add i64 %v0_37ad2, 24
  %v2_37ad2 = inttoptr i64 %v1_37ad2 to i64*
  %v3_37ad2 = load i64, i64* %v2_37ad2, align 8
  store i64 %v3_37ad2, i64* @rax, align 8
  %v1_37ad6 = add i64 %v3_37ad2, 24
  %v2_37ad6 = inttoptr i64 %v1_37ad6 to i64*
  %v3_37ad6 = load i64, i64* %v2_37ad6, align 8
  store i64 %v3_37ad6, i64* @rax, align 8
  %v1_37ada = icmp eq i64 %v3_37ad6, 0
  br i1 %v1_37ada, label %dec_label_pc_37af1, label %dec_label_pc_37adf

dec_label_pc_37adf:                               ; preds = %dec_label_pc_37ace
  %v1_37adf = add i64 %v3_37ad6, 96
  %v2_37adf = inttoptr i64 %v1_37adf to i64*
  %v3_37adf = load i64, i64* %v2_37adf, align 8
  store i64 %v3_37adf, i64* @rdi, align 8
  %v1_37ae3 = icmp eq i64 %v3_37adf, 0
  br i1 %v1_37ae3, label %dec_label_pc_37af1, label %dec_label_pc_37ae8

dec_label_pc_37ae8:                               ; preds = %dec_label_pc_37adf
  %v1_37ae8 = inttoptr i64 %v3_37adf to i64*
  %v2_37ae8 = load i64, i64* %v1_37ae8, align 8
  store i64 %v2_37ae8, i64* @rax, align 8
  br label %dec_label_pc_37af1

dec_label_pc_37af1:                               ; preds = %dec_label_pc_37ae8, %dec_label_pc_37adf, %dec_label_pc_37ace
  store i64 %v3_37ace, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_37b20:
  %v5_37b20 = load i64, i64* @rax, align 8
  ret i64 %v5_37b20
}

define i64 @function_380c0() local_unnamed_addr {
dec_label_pc_380c0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_380d7(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_380d7:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_380d7 = load i64, i64* @rbx, align 8
  %v2_380dd = add i64 %v0_380d7, 1
  %v17_380dd = and i64 %v2_380dd, 4294967295
  store i64 %v17_380dd, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_380f7(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_380f7:
  store i64 %arg1, i64* @rbx, align 8
  %v0_380fb = load i64, i64* @rax, align 8
  ret i64 %v0_380fb
}

define i64 @function_380fc() local_unnamed_addr {
dec_label_pc_380fc:
  %v0_380fc = load i64, i64* @rbx, align 8
  store i64 %v0_380fc, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38105() local_unnamed_addr {
dec_label_pc_38105:
  store i64 255, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38111() local_unnamed_addr {
dec_label_pc_38111:
  store i64 257, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3811d() local_unnamed_addr {
dec_label_pc_3811d:
  store i64 256, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38129() local_unnamed_addr {
dec_label_pc_38129:
  store i64 9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38135() local_unnamed_addr {
dec_label_pc_38135:
  store i64 8, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38141() local_unnamed_addr {
dec_label_pc_38141:
  store i64 7, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3814d() local_unnamed_addr {
dec_label_pc_3814d:
  store i64 6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38159() local_unnamed_addr {
dec_label_pc_38159:
  store i64 5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38165() local_unnamed_addr {
dec_label_pc_38165:
  store i64 4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38171() local_unnamed_addr {
dec_label_pc_38171:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3817d() local_unnamed_addr {
dec_label_pc_3817d:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38189() local_unnamed_addr {
dec_label_pc_38189:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38195(i64 %arg1) local_unnamed_addr {
dec_label_pc_38195:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3getEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_381a0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_381a2 = load i64, i64* @rdi, align 8
  store i64 %v0_381a2, i64* @rbx, align 8
  store i64 229804, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3setEJviPN4java4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_381e0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_381e7 = load i64, i64* @rdi, align 8
  store i64 %v0_381e7, i64* @rbx, align 8
  store i64 229873, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3setEJvPN4java4lang6StringEPS2_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_38220:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_38227 = load i64, i64* @rdi, align 8
  store i64 %v0_38227, i64* @rbx, align 8
  store i64 229937, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3setEJvPN4java4lang6StringEd(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_38260:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 230002, i64* @rdi, align 8
  %v0_38272 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_38272, i64* @rbx, align 8
  %v0_38279 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_38279 = call i64 @__asm_movsd.7465(i128 %v0_38279)
  %v5_38279 = load i64, i64* @rax, align 8
  ret i64 %v5_38279
}

define i64 @function_38338() local_unnamed_addr {
dec_label_pc_38338:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_3833e = load i128, i128* @xmm0, align 8
  %v1_3833e = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_3833e, i128 %v1_3833e)
  %v0_38342 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_38342, label %bb, label %dec_label_pc_38338.dec_label_pc_38344_crit_edge

dec_label_pc_38338.dec_label_pc_38344_crit_edge:  ; preds = %dec_label_pc_38338
  %v0_38344.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_38344

bb:                                               ; preds = %dec_label_pc_38338
  %v1_38342 = call i64 @function_38346()
  store i64 %v1_38342, i64* @rax, align 8
  br label %dec_label_pc_38344

dec_label_pc_38344:                               ; preds = %dec_label_pc_38338.dec_label_pc_38344_crit_edge, %bb
  %v0_38344 = phi i64 [ %v0_38344.pre, %dec_label_pc_38338.dec_label_pc_38344_crit_edge ], [ %v1_38342, %bb ]
  ret i64 %v0_38344
}

define i64 @function_38346() local_unnamed_addr {
dec_label_pc_38346:
  store i64 230221, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3834f = load i128, i128* @xmm0, align 8
  %v1_3834f = call i64 @__asm_movsd.7465(i128 %v0_3834f)
  %v5_3834f = load i64, i64* @rax, align 8
  ret i64 %v5_3834f
}

define i64 @function_38370(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_38370:
  %rbp.global-to-local = alloca i64, align 8
  %v2_38370 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_38370, i64* @rax, align 8
  %v0_38374 = load i64, i64* @rbx, align 8
  store i64 %v0_38374, i64* @rdx, align 8
  store i64 %v2_38370, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_38370
}

define i64 @function_38390() local_unnamed_addr {
dec_label_pc_38390:
  %v0_38396 = load i64, i64* @rax, align 8
  ret i64 %v0_38396
}

define i64 @function_383a0() local_unnamed_addr {
dec_label_pc_383a0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_383ae() local_unnamed_addr {
dec_label_pc_383ae:
  store i64 230325, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_383cd() local_unnamed_addr {
dec_label_pc_383cd:
  %pf.global-to-local = alloca i1, align 1
  %v0_383cd = load i128, i128* @xmm0, align 8
  %v1_383cd = load i64, i64* inttoptr (i64 230357 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_383cd, i64 %v1_383cd)
  %v0_383d5 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_383d5, label %bb, label %dec_label_pc_383cd.dec_label_pc_383db_crit_edge

dec_label_pc_383cd.dec_label_pc_383db_crit_edge:  ; preds = %dec_label_pc_383cd
  %v2_383d5.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_383db

bb:                                               ; preds = %dec_label_pc_383cd
  %v1_383d5 = call i64 @function_38346()
  store i64 %v1_383d5, i64* @rax, align 8
  br label %dec_label_pc_383db

dec_label_pc_383db:                               ; preds = %dec_label_pc_383cd.dec_label_pc_383db_crit_edge, %bb
  %v2_383d5 = phi i64 [ %v2_383d5.pre, %dec_label_pc_383cd.dec_label_pc_383db_crit_edge ], [ %v1_383d5, %bb ]
  ret i64 %v2_383d5
}

define i64 @function_383fe() local_unnamed_addr {
dec_label_pc_383fe:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3setEJvPN4java4lang6StringEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_38410:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 230434, i64* @rdi, align 8
  %v0_38422 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_38422, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_384a5(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_384a5:
  %rbp.global-to-local = alloca i64, align 8
  %v2_384a5 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_384a5, i64* @rax, align 8
  %v0_384a9 = load i64, i64* @rbx, align 8
  store i64 %v0_384a9, i64* @rdx, align 8
  store i64 %v2_384a5, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_384a5
}

define i64 @function_384c3() local_unnamed_addr {
dec_label_pc_384c3:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue3setEJvPN4java4lang6StringES6_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_384d0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_384d6 = load i64, i64* @rdi, align 8
  store i64 %v0_384d6, i64* @rbx, align 8
  store i64 230624, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawgetEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_38530:
  store i64 %arg1, i64* @rdi, align 8
  %v0_38532 = load i64, i64* @rdi, align 8
  store i64 %v0_38532, i64* @rbx, align 8
  store i64 230716, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawsetEJviPN4java4lang6StringE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_38570:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_38577 = load i64, i64* @rdi, align 8
  store i64 %v0_38577, i64* @rbx, align 8
  store i64 230785, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawsetEJvPN4java4lang6StringEPS2_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_385b0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_385b7 = load i64, i64* @rdi, align 8
  store i64 %v0_385b7, i64* @rbx, align 8
  store i64 230849, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawsetEJvPN4java4lang6StringEd(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_385f0:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 230914, i64* @rdi, align 8
  %v0_38602 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_38602, i64* @rbx, align 8
  %v0_38609 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_38609 = call i64 @__asm_movsd.7465(i128 %v0_38609)
  %v5_38609 = load i64, i64* @rax, align 8
  ret i64 %v5_38609
}

define i64 @function_386c8() local_unnamed_addr {
dec_label_pc_386c8:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_386ce = load i128, i128* @xmm0, align 8
  %v1_386ce = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_386ce, i128 %v1_386ce)
  %v0_386d2 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_386d2, label %bb, label %dec_label_pc_386c8.dec_label_pc_386d4_crit_edge

dec_label_pc_386c8.dec_label_pc_386d4_crit_edge:  ; preds = %dec_label_pc_386c8
  %v0_386d4.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_386d4

bb:                                               ; preds = %dec_label_pc_386c8
  %v1_386d2 = call i64 @function_386d6()
  store i64 %v1_386d2, i64* @rax, align 8
  br label %dec_label_pc_386d4

dec_label_pc_386d4:                               ; preds = %dec_label_pc_386c8.dec_label_pc_386d4_crit_edge, %bb
  %v0_386d4 = phi i64 [ %v0_386d4.pre, %dec_label_pc_386c8.dec_label_pc_386d4_crit_edge ], [ %v1_386d2, %bb ]
  ret i64 %v0_386d4
}

define i64 @function_386d6() local_unnamed_addr {
dec_label_pc_386d6:
  store i64 231133, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_386df = load i128, i128* @xmm0, align 8
  %v1_386df = call i64 @__asm_movsd.7465(i128 %v0_386df)
  %v5_386df = load i64, i64* @rax, align 8
  ret i64 %v5_386df
}

define i64 @function_38700(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_38700:
  %rbp.global-to-local = alloca i64, align 8
  %v2_38700 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_38700, i64* @rax, align 8
  %v0_38704 = load i64, i64* @rbx, align 8
  store i64 %v0_38704, i64* @rdx, align 8
  store i64 %v2_38700, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_38700
}

define i64 @function_38720() local_unnamed_addr {
dec_label_pc_38720:
  %v0_38726 = load i64, i64* @rax, align 8
  ret i64 %v0_38726
}

define i64 @function_38730() local_unnamed_addr {
dec_label_pc_38730:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3873e() local_unnamed_addr {
dec_label_pc_3873e:
  store i64 231237, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3875d() local_unnamed_addr {
dec_label_pc_3875d:
  %pf.global-to-local = alloca i1, align 1
  %v0_3875d = load i128, i128* @xmm0, align 8
  %v1_3875d = load i64, i64* inttoptr (i64 231269 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_3875d, i64 %v1_3875d)
  %v0_38765 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_38765, label %bb, label %dec_label_pc_3875d.dec_label_pc_3876b_crit_edge

dec_label_pc_3875d.dec_label_pc_3876b_crit_edge:  ; preds = %dec_label_pc_3875d
  %v2_38765.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3876b

bb:                                               ; preds = %dec_label_pc_3875d
  %v1_38765 = call i64 @function_386d6()
  store i64 %v1_38765, i64* @rax, align 8
  br label %dec_label_pc_3876b

dec_label_pc_3876b:                               ; preds = %dec_label_pc_3875d.dec_label_pc_3876b_crit_edge, %bb
  %v2_38765 = phi i64 [ %v2_38765.pre, %dec_label_pc_3875d.dec_label_pc_3876b_crit_edge ], [ %v1_38765, %bb ]
  ret i64 %v2_38765
}

define i64 @function_3878e() local_unnamed_addr {
dec_label_pc_3878e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawsetEJvPN4java4lang6StringEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_387a0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 231346, i64* @rdi, align 8
  %v0_387b2 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_387b2, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_38835(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_38835:
  %rbp.global-to-local = alloca i64, align 8
  %v2_38835 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_38835, i64* @rax, align 8
  %v0_38839 = load i64, i64* @rbx, align 8
  store i64 %v0_38839, i64* @rdx, align 8
  store i64 %v2_38835, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_38835
}

define i64 @function_38853() local_unnamed_addr {
dec_label_pc_38853:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6rawsetEJvPN4java4lang6StringES6_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_38860:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_38866 = load i64, i64* @rdi, align 8
  store i64 %v0_38866, i64* @rbx, align 8
  store i64 231536, i64* @rdi, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue4callEJPS2_PN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_388c0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_388c2 = load i64, i64* @rdi, align 8
  store i64 %v0_388c2, i64* @rbx, align 8
  store i64 231628, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaThread6resumeEJPNS1_7VarargsES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_38900:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_38904 = add i64 %arg1, 8
  %v2_38904 = inttoptr i64 %v1_38904 to i64*
  %v3_38904 = load i64, i64* %v2_38904, align 8
  store i64 %v3_38904, i64* @rbp, align 8
  %v1_38908 = add i64 %v3_38904, 84
  %v2_38908 = inttoptr i64 %v1_38908 to i32*
  %v3_38908 = load i32, i32* %v2_38908, align 4
  %v7_3890c = icmp sgt i32 %v3_38908, 1
  br i1 %v7_3890c, label %dec_label_pc_38900.dec_label_pc_38912_crit_edge, label %bb

dec_label_pc_38900.dec_label_pc_38912_crit_edge:  ; preds = %dec_label_pc_38900
  %v14_3890c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_38912

bb:                                               ; preds = %dec_label_pc_38900
  %v9_3890c = load i64, i64* %rsi.global-to-local, align 8
  %v13_3890c = call i64 @function_38a00(i64 %arg1, i64 %v9_3890c, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v13_3890c, i64* @rax, align 8
  br label %dec_label_pc_38912

dec_label_pc_38912:                               ; preds = %dec_label_pc_38900.dec_label_pc_38912_crit_edge, %bb
  %v14_3890c = phi i64 [ %v14_3890c.pre, %dec_label_pc_38900.dec_label_pc_38912_crit_edge ], [ %v13_3890c, %bb ]
  ret i64 %v14_3890c
}

define i64 @function_38a00(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_38a00:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_38a00 = load i64, i64* @rbp, align 8
  %v0_38a04 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_38a04, i64* @rdx, align 8
  %v0_38a07 = load i64, i64* @rdi, align 8
  store i64 %v0_38a07, i64* %rsi.global-to-local, align 8
  store i64 %v2_38a00, i64* @rdi, align 8
  store i64 %v2_38a00, i64* @rax, align 8
  store i64 %arg3, i64* @rbx, align 8
  ret i64 %v2_38a00
}

define i64 @function_38a1b() local_unnamed_addr {
dec_label_pc_38a1b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm211LuaFunction8strvalueEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_38a30:
  store i64 %arg1, i64* @rdi, align 8
  %v2_38a31 = load i64, i64* @rdi, align 8
  store i64 232001, i64* @rdi, align 8
  store i64 %v2_38a31, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print13printConstantEJvPN4java2io11PrintStreamEPNS1_9PrototypeEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_38a60:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 232046, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_38a73 = load i64, i64* @rdx, align 8
  store i64 %v0_38a73, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_38b10() local_unnamed_addr {
dec_label_pc_38b10:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_38b70(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_38b70:
  %rbp.global-to-local = alloca i64, align 8
  %v2_38b70 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_38b70, i64* @rax, align 8
  store i64 %v2_38b70, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  ret i64 %v2_38b70
}

define i64 @function_38b89() local_unnamed_addr {
dec_label_pc_38b89:
  %v0_38b89 = load i64, i64* @rbx, align 8
  store i64 %v0_38b89, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38b92() local_unnamed_addr {
dec_label_pc_38b92:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print11printOpCodeEJiPN4java2io11PrintStreamEPNS1_9PrototypeEi(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_38ba0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_38baf = load i64, i64* @rdi, align 8
  store i64 %v0_38baf, i64* @rbx, align 8
  store i64 232377, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_38c76() local_unnamed_addr {
dec_label_pc_38c76:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_38d6c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_38d6c:
  store i64 %arg1, i64* @rdi, align 8
  %v0_38d6c = load i64, i64* inttoptr (i64 232819 to i64*), align 8
  store i64 %v0_38d6c, i64* @rax, align 8
  ret i64 %v0_38d6c
}

define i64 @function_38f03(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_38f03:
  %v0_38f03 = load i64, i64* @rbp, align 8
  store i64 %v0_38f03, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_38f03
}

define i64 @function_38f18() local_unnamed_addr {
dec_label_pc_38f18:
  %v2_38f18 = load i64, i64* @rbx, align 8
  store i64 %v2_38f18, i64* @rax, align 8
  %v0_38f1b = load i64, i64* inttoptr (i64 233250 to i64*), align 8
  store i64 %v2_38f18, i64* @rdi, align 8
  %v2_38f2b = call i64 @function_38d6c(i64 %v2_38f18, i64 %v0_38f1b)
  store i64 %v2_38f2b, i64* @rax, align 8
  ret i64 %v2_38f2b
}

define i64 @function_38f30(i32 %arg1) local_unnamed_addr {
dec_label_pc_38f30:
  store i64 233287, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_38fab() local_unnamed_addr {
dec_label_pc_38fab:
  %r14.global-to-local = alloca i64, align 8
  %tmp233 = call i64 @__decompiler_undefined_function_0()
  %v1_38fab = icmp eq i64 %tmp233, 0
  br i1 %v1_38fab, label %bb, label %dec_label_pc_38fab.dec_label_pc_38fb4_crit_edge

dec_label_pc_38fab.dec_label_pc_38fb4_crit_edge:  ; preds = %dec_label_pc_38fab
  %v0_38fbc.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_38fb4

bb:                                               ; preds = %dec_label_pc_38fab
  %v1_38fae = load i64, i64* @rdi, align 8
  %v2_38fae = load i64, i64* @rsi, align 8
  %v3_38fae = load i64, i64* @rdx, align 8
  %v4_38fae = call i64 @function_393de(i64 %v1_38fae, i64 %v2_38fae, i64 %v3_38fae)
  store i64 %v4_38fae, i64* @rax, align 8
  %v0_38fb4.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_38fb4

dec_label_pc_38fb4:                               ; preds = %dec_label_pc_38fab.dec_label_pc_38fb4_crit_edge, %bb
  %v0_38fbc = phi i64 [ %v4_38fae, %bb ], [ %v0_38fbc.pre, %dec_label_pc_38fab.dec_label_pc_38fb4_crit_edge ]
  %v0_38fb4 = phi i64 [ %v0_38fb4.pre, %bb ], [ %tmp233, %dec_label_pc_38fab.dec_label_pc_38fb4_crit_edge ]
  store i64 %v0_38fb4, i64* @rdi, align 8
  %v1_38fbc = icmp eq i64 %v0_38fbc, 0
  br i1 %v1_38fbc, label %bb238, label %dec_label_pc_38fc5

bb238:                                            ; preds = %dec_label_pc_38fb4
  %v2_38fbf = load i64, i64* @rsi, align 8
  %v3_38fbf = load i64, i64* @rdx, align 8
  %v4_38fbf = call i64 @function_393de(i64 %v0_38fb4, i64 %v2_38fbf, i64 %v3_38fbf)
  store i64 %v4_38fbf, i64* @rax, align 8
  br label %dec_label_pc_38fc5

dec_label_pc_38fc5:                               ; preds = %bb238, %dec_label_pc_38fb4
  %v0_38fc5 = phi i64 [ %v4_38fbf, %bb238 ], [ %v0_38fbc, %dec_label_pc_38fb4 ]
  store i64 %v0_38fc5, i64* @rdi, align 8
  ret i64 %v0_38fc5
}

define i64 @function_38fdc() local_unnamed_addr {
dec_label_pc_38fdc:
  store i64 233443, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39070() local_unnamed_addr {
dec_label_pc_39070:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  %v1_39070 = trunc i64 %tmp229 to i32
  %v11_39070 = icmp eq i32 %v1_39070, 23
  br i1 %v11_39070, label %bb, label %dec_label_pc_39070.dec_label_pc_3907a_crit_edge

dec_label_pc_39070.dec_label_pc_3907a_crit_edge:  ; preds = %dec_label_pc_39070
  %v3_39074.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3907a

bb:                                               ; preds = %dec_label_pc_39070
  %v2_39074 = call i64 @function_395c0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_39074, i64* @rax, align 8
  br label %dec_label_pc_3907a

dec_label_pc_3907a:                               ; preds = %dec_label_pc_39070.dec_label_pc_3907a_crit_edge, %bb
  %v3_39074 = phi i64 [ %v3_39074.pre, %dec_label_pc_39070.dec_label_pc_3907a_crit_edge ], [ %v2_39074, %bb ]
  ret i64 %v3_39074
}

define i64 @function_390d8() local_unnamed_addr {
dec_label_pc_390d8:
  %v0_390d8 = load i64, i64* @rax, align 8
  store i64 %v0_390d8, i64* @rdi, align 8
  ret i64 %v0_390d8
}

define i64 @function_390f8() local_unnamed_addr {
dec_label_pc_390f8:
  store i64 233727, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39190() local_unnamed_addr {
dec_label_pc_39190:
  %v0_39196 = call i64 @function_38c76()
  store i64 %v0_39196, i64* @rax, align 8
  ret i64 %v0_39196
}

define i64 @function_39258(i64 %arg1) local_unnamed_addr {
dec_label_pc_39258:
  %v2_39258 = load i64, i64* @rbx, align 8
  store i64 %v2_39258, i64* @rax, align 8
  store i64 %v2_39258, i64* @rdi, align 8
  %v6_3927a = call i64 @function_38f03(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_3927a, i64* @rax, align 8
  ret i64 %v6_3927a
}

define i64 @function_39280(i64 %arg1) local_unnamed_addr {
dec_label_pc_39280:
  %tmp239 = call i32 @__decompiler_undefined_function_2()
  %v2_39280 = load i64, i64* @rbx, align 8
  store i64 %v2_39280, i64* @rax, align 8
  store i64 %v2_39280, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v4_39297 = zext i32 %tmp239 to i64
  store i64 %v4_39297, i64* @rcx, align 8
  %v1_3929b = add i64 %arg1, 48
  %v2_3929b = inttoptr i64 %v1_3929b to i64*
  %v3_3929b = load i64, i64* %v2_3929b, align 8
  store i64 %v3_3929b, i64* @rax, align 8
  %v1_3929f = add i64 %v3_3929b, 8
  %v2_3929f = inttoptr i64 %v1_3929f to i32*
  %v3_3929f = load i32, i32* %v2_3929f, align 4
  %v4_3929f = zext i32 %v3_3929f to i64
  store i64 %v4_3929f, i64* @rdx, align 8
  %v7_392a4 = sext i32 %tmp239 to i64
  %v8_392a4 = icmp sgt i64 %v4_3929f, %v7_392a4
  br i1 %v8_392a4, label %dec_label_pc_392aa, label %bb

bb:                                               ; preds = %dec_label_pc_39280
  %v9_392a4 = call i64 @function_397b0()
  store i64 %v9_392a4, i64* @rax, align 8
  %v0_392bb.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_392aa

dec_label_pc_392aa:                               ; preds = %dec_label_pc_39280, %bb
  %v0_392bb = phi i64 [ %v2_39280, %dec_label_pc_39280 ], [ %v0_392bb.pre, %bb ]
  %v0_392aa = phi i64 [ %v3_3929b, %dec_label_pc_39280 ], [ %v9_392a4, %bb ]
  %v1_392aa = add i64 %v0_392aa, 16
  store i64 %v1_392aa, i64* @rax, align 8
  store i64 %v7_392a4, i64* @rdx, align 8
  store i64 %v0_392bb, i64* @rdi, align 8
  %v6_392c7 = call i64 @function_38f03(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_392c7, i64* @rax, align 8
  ret i64 %v6_392c7
}

define i64 @function_392f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_392f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_392f1 = load i8, i8* bitcast (i64* @rcx to i8*), align 8
  %v3_392f1 = load i64, i64* @rbx, align 8
  %v4_392f1 = udiv i64 %v3_392f1, 256
  %v5_392f1 = trunc i64 %v4_392f1 to i8
  %v6_392f1 = or i8 %v5_392f1, %v2_392f1
  %v12_392f1 = load i64, i64* @rcx, align 8
  %v13_392f1 = inttoptr i64 %v12_392f1 to i8*
  store i8 %v6_392f1, i8* %v13_392f1, align 1
  %v5_392f3 = load i64, i64* @rax, align 8
  ret i64 %v5_392f3
}

define i64 @function_392f6(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_392f6:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_392f7 = load i64, i64* @rax, align 8
  %v1_392f9 = add i64 %v0_392f7, -125
  %v2_392f9 = inttoptr i64 %v1_392f9 to i8*
  %v3_392f9 = load i8, i8* %v2_392f9, align 1
  %v4_392f9 = load i64, i64* @rcx, align 8
  %v5_392f9 = trunc i64 %v4_392f9 to i8
  %v6_392f9 = add i8 %v5_392f9, %v3_392f9
  store i8 %v6_392f9, i8* %v2_392f9, align 1
  %v0_392fc = load i64, i64* @rax, align 8
  %v15_392fc = inttoptr i64 %v0_392fc to i8*
  store i8 0, i8* %v15_392fc, align 1
  %v5_392ff = load i64, i64* @rax, align 8
  ret i64 %v5_392ff
}

define i64 @function_39317() local_unnamed_addr {
dec_label_pc_39317:
  %v2_39317 = load i64, i64* @rbx, align 8
  store i64 %v2_39317, i64* @rax, align 8
  store i64 234289, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_393de(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_393de:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39440(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_39440:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_39441 = load i8, i8* bitcast (i64* @rcx to i8*), align 8
  %v3_39441 = load i64, i64* @rbx, align 8
  %v4_39441 = udiv i64 %v3_39441, 256
  %v5_39441 = trunc i64 %v4_39441 to i8
  %v6_39441 = or i8 %v5_39441, %v2_39441
  %v12_39441 = load i64, i64* @rcx, align 8
  %v13_39441 = inttoptr i64 %v12_39441 to i8*
  store i8 %v6_39441, i8* %v13_39441, align 1
  %v5_39443 = load i64, i64* @rax, align 8
  ret i64 %v5_39443
}

define i64 @function_39467() local_unnamed_addr {
dec_label_pc_39467:
  %v2_39467 = load i64, i64* @rbx, align 8
  store i64 %v2_39467, i64* @rax, align 8
  store i64 234625, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_394e0() local_unnamed_addr {
dec_label_pc_394e0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_395c0(i64 %arg1) local_unnamed_addr {
dec_label_pc_395c0:
  %v2_395c0 = load i64, i64* @rbx, align 8
  store i64 %v2_395c0, i64* @rax, align 8
  store i64 %v2_395c0, i64* @rdi, align 8
  ret i64 %v2_395c0
}

define i64 @function_395ed(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_395ed:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_395ed = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_395ed = load i64, i64* @rax, align 8
  %v4_395ed = trunc i64 %v3_395ed to i8
  %v5_395ed = add i8 %v4_395ed, %v2_395ed
  %v21_395ed = inttoptr i64 %v3_395ed to i8*
  store i8 %v5_395ed, i8* %v21_395ed, align 1
  %v0_395ef = load i64, i64* @rbx, align 8
  %v1_395ef = add i64 %v0_395ef, 1294738500
  %v2_395ef = inttoptr i64 %v1_395ef to i8*
  %v3_395ef = load i8, i8* %v2_395ef, align 1
  %v4_395ef = load i64, i64* @rcx, align 8
  %v5_395ef = trunc i64 %v4_395ef to i8
  %v6_395ef = add i8 %v5_395ef, %v3_395ef
  store i8 %v6_395ef, i8* %v2_395ef, align 1
  %v0_395f5 = load i64, i64* @rsp, align 8
  %v4_395f5 = trunc i64 %v0_395f5 to i32
  %v5_395f5 = icmp eq i32 %v4_395f5, 0
  %v0_395f7 = load i64, i64* @rax, align 8
  %v1_395f7 = load i64, i64* %rbp.global-to-local, align 8
  %v3_395f7 = add i64 %v0_395f7, 2
  %v4_395f7 = add i64 %v3_395f7, %v1_395f7
  %v1_395fb = icmp eq i1 %v5_395f5, false
  br i1 %v1_395fb, label %bb, label %dec_label_pc_39601

bb:                                               ; preds = %dec_label_pc_395ed
  %v2_395fb = call i64 @function_394e0()
  store i64 %v2_395fb, i64* @rax, align 8
  br label %dec_label_pc_39601

dec_label_pc_39601:                               ; preds = %bb, %dec_label_pc_395ed
  %v3_39601 = call i64 @function_393de(i64 %arg1, i64 %v4_395f7, i64 %arg3)
  store i64 %v3_39601, i64* @rax, align 8
  ret i64 %v3_39601
}

define i64 @function_39610() local_unnamed_addr {
dec_label_pc_39610:
  %v2_39610 = load i64, i64* @rbx, align 8
  store i64 %v2_39610, i64* @rax, align 8
  store i64 235050, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39631() local_unnamed_addr {
dec_label_pc_39631:
  store i64 235064, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39660() local_unnamed_addr {
dec_label_pc_39660:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3968e() local_unnamed_addr {
dec_label_pc_3968e:
  %r15.global-to-local = alloca i64, align 8
  %v0_3968e = load i64, i64* @rax, align 8
  %v2_3968e = mul i64 %v0_3968e, %v0_3968e
  %v3_3968e = udiv i64 %v2_3968e, 4294967296
  %v6_3968e = inttoptr i64 %v2_3968e to i8*
  store i64 %v2_3968e, i64* @rax, align 8
  store i64 %v3_3968e, i64* @rdx, align 8
  %v3_39690 = load i8, i8* %v6_3968e, align 1
  %v6_39690 = trunc i64 %v2_3968e to i8
  %factor = mul i8 %v6_39690, 2
  %v7_39692 = add i8 %v3_39690, %factor
  store i8 %v7_39692, i8* %v6_3968e, align 1
  %v0_39694 = load i64, i64* %r15.global-to-local, align 8
  %v2_3969a = and i64 %v0_39694, 4294967295
  %v3_3969a = xor i64 %v2_3969a, 4294967295
  %v0_396a2 = load i64, i64* @rdi, align 8
  %v3_396a2 = call i64 @function_393de(i64 %v0_396a2, i64 %v3_3969a, i64 %v3_3968e)
  store i64 %v3_396a2, i64* @rax, align 8
  ret i64 %v3_396a2
}

define i64 @function_396b0() local_unnamed_addr {
dec_label_pc_396b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_396f0() local_unnamed_addr {
dec_label_pc_396f0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_39705(i32 %arg1) local_unnamed_addr {
dec_label_pc_39705:
  %r12.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %v2_39705 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_39705 = load i64, i64* @rax, align 8
  %v4_39705 = trunc i64 %v3_39705 to i8
  %v5_39705 = add i8 %v4_39705, %v2_39705
  %v21_39705 = inttoptr i64 %v3_39705 to i8*
  store i8 %v5_39705, i8* %v21_39705, align 1
  %v0_39707 = load i64, i64* %r12.global-to-local, align 8
  %v1_39707 = icmp eq i64 %v0_39707, 0
  br i1 %v1_39707, label %bb, label %dec_label_pc_39710

bb:                                               ; preds = %dec_label_pc_39705
  %v1_3970a = load i64, i64* @rdi, align 8
  %v2_3970a = load i64, i64* %rsi.global-to-local, align 8
  %v3_3970a = load i64, i64* @rdx, align 8
  %v4_3970a = call i64 @function_393de(i64 %v1_3970a, i64 %v2_3970a, i64 %v3_3970a)
  store i64 %v4_3970a, i64* @rax, align 8
  %v0_39714.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_39710

dec_label_pc_39710:                               ; preds = %bb, %dec_label_pc_39705
  %v0_39714 = phi i64 [ %v0_39714.pre, %bb ], [ %v0_39707, %dec_label_pc_39705 ]
  %v4_39710 = zext i32 %arg1 to i64
  store i64 %v4_39710, i64* %rsi.global-to-local, align 8
  store i64 %v0_39714, i64* @rdi, align 8
  %v2_39725 = sext i32 %arg1 to i64
  %v3_39725 = load i64, i64* @rdx, align 8
  %v4_39725 = call i64 @function_393de(i64 %v0_39714, i64 %v2_39725, i64 %v3_39725)
  store i64 %v4_39725, i64* @rax, align 8
  ret i64 %v4_39725
}

define i64 @function_39730() local_unnamed_addr {
dec_label_pc_39730:
  store i64 235319, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_397b0() local_unnamed_addr {
dec_label_pc_397b0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_39852() local_unnamed_addr {
dec_label_pc_39852:
  %rbp.global-to-local = alloca i64, align 8
  %v0_39852 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_39852, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3985b() local_unnamed_addr {
dec_label_pc_3985b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39878() local_unnamed_addr {
dec_label_pc_39878:
  %v0_39878 = load i64, i64* @rax, align 8
  store i64 %v0_39878, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print11printOpCodeEJiPNS1_9PrototypeEi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_39890:
  store i64 %arg1, i64* @rdi, align 8
  %v0_39892 = load i64, i64* @rdi, align 8
  store i64 %v0_39892, i64* @rbx, align 8
  store i64 235676, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print9printCodeEJvPNS1_9PrototypeE(i64 %arg1) local_unnamed_addr {
dec_label_pc_398d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 235744, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39934(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_39934:
  store i64 %arg1, i64* @rbx, align 8
  %v0_3993e = load i64, i64* @rax, align 8
  ret i64 %v0_3993e
}

define i64 @_ZN3org4luaj3vm25Print10printStateEJvPNS1_10LuaClosureEiP6JArrayIPNS1_8LuaValueEEiPNS1_7VarargsE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_39940:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 235862, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_39987() local_unnamed_addr {
dec_label_pc_39987:
  %v0_39987 = load i64, i64* @rax, align 8
  ret i64 %v0_39987
}

define i64 @function_39ab7() local_unnamed_addr {
dec_label_pc_39ab7:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$CallFrame5instrEJviPNS1_7VarargsEi"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_39ac0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_39ac8 = load i64, i64* @rdi, align 8
  store i64 %v0_39ac8, i64* @rbx, align 8
  %v0_39acb = load i64, i64* %rsi.global-to-local, align 8
  %v1_39ad7 = trunc i64 %v0_39acb to i32
  %v3_39ad7 = add i64 %v0_39ac8, 16
  %v4_39ad7 = inttoptr i64 %v3_39ad7 to i32*
  store i32 %v1_39ad7, i32* %v4_39ad7, align 4
  %v0_39ada = load i64, i64* @rdx, align 8
  %v1_39ada = load i64, i64* @rdi, align 8
  %v2_39ada = add i64 %v1_39ada, 24
  %v3_39ada = inttoptr i64 %v2_39ada to i64*
  store i64 %v0_39ada, i64* %v3_39ada, align 8
  %v0_39ade = load i64, i64* @rcx, align 8
  %v1_39ade = trunc i64 %v0_39ade to i32
  %v2_39ade = load i64, i64* @rdi, align 8
  %v3_39ade = add i64 %v2_39ade, 20
  %v4_39ade = inttoptr i64 %v3_39ade to i32*
  store i32 %v1_39ade, i32* %v4_39ade, align 4
  store i64 236264, i64* @rdi, align 8
  %v0_39ae1 = load i64, i64* @rax, align 8
  ret i64 %v0_39ae1
}

define i64 @_ZN3org4luaj3vm25Print13printFunctionEJvPNS1_9PrototypeEb(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_39b30:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 236361, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_39bc8(i8 %arg1) local_unnamed_addr {
dec_label_pc_39bc8:
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v10_39bc8 = icmp eq i8 %arg1, 0
  %v1_39bcd = icmp eq i1 %v10_39bc8, false
  br i1 %v1_39bcd, label %dec_label_pc_39c28, label %dec_label_pc_39bcf

dec_label_pc_39bcf:                               ; preds = %dec_label_pc_39c28, %dec_label_pc_39bc8
  %v0_39bcf = load i64, i64* %r15.global-to-local, align 8
  %v4_39bcf = trunc i64 %v0_39bcf to i32
  %tmp256 = icmp slt i32 %v4_39bcf, 1
  br i1 %tmp256, label %dec_label_pc_39bcf.dec_label_pc_39c15_crit_edge, label %dec_label_pc_39bd4

dec_label_pc_39bcf.dec_label_pc_39c15_crit_edge:  ; preds = %dec_label_pc_39bcf
  %v0_39c23.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_39c15

dec_label_pc_39bd4:                               ; preds = %dec_label_pc_39bcf
  %v0_39bd4 = load i64, i64* %rbp.global-to-local, align 8
  %v1_39bd4 = add i64 %v0_39bd4, 24
  %v2_39bd4 = inttoptr i64 %v1_39bd4 to i64*
  %v3_39bd4 = load i64, i64* %v2_39bd4, align 8
  store i64 %v3_39bd4, i64* @rax, align 8
  %v1_39bd8 = add i64 %v3_39bd4, 8
  %v2_39bd8 = inttoptr i64 %v1_39bd8 to i32*
  %v3_39bd8 = load i32, i32* %v2_39bd8, align 4
  %v4_39bd8 = zext i32 %v3_39bd8 to i64
  store i64 %v4_39bd8, i64* @rdi, align 8
  %v1_39bdb = add i64 %v3_39bd4, 16
  store i64 %v1_39bdb, i64* @rdx, align 8
  %v5_39bdf = icmp eq i32 %v3_39bd8, 0
  br i1 %v5_39bdf, label %dec_label_pc_39c42, label %dec_label_pc_39be3

dec_label_pc_39be3:                               ; preds = %dec_label_pc_39bd4
  %v1_39be3 = add i64 %v0_39bcf, -1
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_39c01

dec_label_pc_39bf0:                               ; preds = %dec_label_pc_39c01
  %v3_39bf0 = load i64, i64* %v2_39bd4, align 8
  store i64 %v3_39bf0, i64* @rax, align 8
  store i64 %v1_39c10, i64* @rbx, align 8
  %v1_39bf8 = trunc i64 %v1_39c10 to i32
  %v3_39bf8 = add i64 %v3_39bf0, 8
  %v4_39bf8 = inttoptr i64 %v3_39bf8 to i32*
  %v5_39bf8 = load i32, i32* %v4_39bf8, align 4
  %v11_39bf8 = icmp ult i32 %v1_39bf8, %v5_39bf8
  %v1_39bfb = add i64 %v3_39bf0, 16
  store i64 %v1_39bfb, i64* @rdx, align 8
  %v1_39bff = icmp eq i1 %v11_39bf8, false
  br i1 %v1_39bff, label %dec_label_pc_39c42.loopexit, label %dec_label_pc_39c01

dec_label_pc_39c01:                               ; preds = %dec_label_pc_39bf0, %dec_label_pc_39be3
  %v0_39c2314 = phi i64 [ %v3_39bf0, %dec_label_pc_39bf0 ], [ %v3_39bd4, %dec_label_pc_39be3 ]
  %v0_39bf4 = phi i64 [ %v1_39c10, %dec_label_pc_39bf0 ], [ 0, %dec_label_pc_39be3 ]
  %v12_39c0d = icmp eq i64 %v1_39be3, %v0_39bf4
  %v1_39c10 = add i64 %v0_39bf4, 1
  store i64 %v1_39c10, i64* @rdi, align 8
  %v1_39c13 = icmp eq i1 %v12_39c0d, false
  br i1 %v1_39c13, label %dec_label_pc_39bf0, label %dec_label_pc_39c15.loopexit

dec_label_pc_39c15.loopexit:                      ; preds = %dec_label_pc_39c01
  br label %dec_label_pc_39c15

dec_label_pc_39c15:                               ; preds = %dec_label_pc_39bcf.dec_label_pc_39c15_crit_edge, %dec_label_pc_39c15.loopexit
  %v0_39c23 = phi i64 [ %v0_39c23.pre, %dec_label_pc_39bcf.dec_label_pc_39c15_crit_edge ], [ %v0_39c2314, %dec_label_pc_39c15.loopexit ]
  ret i64 %v0_39c23

dec_label_pc_39c28:                               ; preds = %dec_label_pc_39bc8
  %v0_39c28 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_39c28, i64* @rdi, align 8
  br label %dec_label_pc_39bcf

dec_label_pc_39c42.loopexit:                      ; preds = %dec_label_pc_39bf0
  br label %dec_label_pc_39c42

dec_label_pc_39c42:                               ; preds = %dec_label_pc_39c42.loopexit, %dec_label_pc_39bd4
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm25Print5printEJvPNS1_9PrototypeE(i64 %arg1) local_unnamed_addr {
dec_label_pc_39c50:
  store i64 %arg1, i64* @rdi, align 8
  %v0_39c51 = load i64, i64* @rdi, align 8
  store i64 %v0_39c51, i64* @rbx, align 8
  store i64 236635, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaError16getMessageObjectEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_39c80:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_39c80 = load i64, i64* %rbp.global-to-local, align 8
  %v0_39c81 = load i64, i64* @rbx, align 8
  %v0_39c86 = load i64, i64* @rdi, align 8
  %v1_39c86 = add i64 %v0_39c86, 72
  %v2_39c86 = inttoptr i64 %v1_39c86 to i64*
  %v3_39c86 = load i64, i64* %v2_39c86, align 8
  store i64 %v3_39c86, i64* @rbx, align 8
  %v1_39c8a = icmp eq i64 %v3_39c86, 0
  br i1 %v1_39c8a, label %dec_label_pc_39ca0, label %dec_label_pc_39c8f

dec_label_pc_39c8f:                               ; preds = %dec_label_pc_39cae, %dec_label_pc_39ca0, %dec_label_pc_39c80
  %v0_39c8f = phi i64 [ 0, %dec_label_pc_39cae ], [ 0, %dec_label_pc_39ca0 ], [ %v3_39c86, %dec_label_pc_39c80 ]
  store i64 %v0_39c8f, i64* @rax, align 8
  store i64 %v0_39c81, i64* @rbx, align 8
  store i64 %v0_39c80, i64* %rbp.global-to-local, align 8
  ret i64 %v0_39c8f

dec_label_pc_39ca0:                               ; preds = %dec_label_pc_39c80
  store i64 %v0_39c86, i64* @rax, align 8
  %v1_39ca6 = icmp eq i64 %v0_39c86, 0
  store i64 %v0_39c86, i64* %rbp.global-to-local, align 8
  br i1 %v1_39ca6, label %dec_label_pc_39c8f, label %dec_label_pc_39cae

dec_label_pc_39cae:                               ; preds = %dec_label_pc_39ca0
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_39c8f
}

define i64 @_ZN3org4luaj3vm210LuaInteger11checkstringEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_39cd0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_39cd1 = load i64, i64* @rdi, align 8
  %v1_39cd1 = add i64 %v0_39cd1, 8
  %v2_39cd1 = inttoptr i64 %v1_39cd1 to i32*
  %v3_39cd1 = load i32, i32* %v2_39cd1, align 4
  %v4_39cd1 = zext i32 %v3_39cd1 to i64
  store i64 %v4_39cd1, i64* @rdi, align 8
  %v5_39cd1 = load i64, i64* @rax, align 8
  ret i64 %v5_39cd1
}

define i64 @_ZN3org4luaj3vm28LuaTable18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_39d00:
  %v0_39d01 = load i64, i64* inttoptr (i64 236808 to i64*), align 8
  store i64 %v0_39d01, i64* @rbx, align 8
  store i64 236815, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure9errorHookEJPN4java4lang6StringES6_i(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_39d40:
  %r13.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_39d40 = add i64 %arg1, 24
  %v2_39d40 = inttoptr i64 %v1_39d40 to i64*
  %v3_39d40 = load i64, i64* %v2_39d40, align 8
  store i64 %v3_39d40, i64* @rax, align 8
  %v1_39d44 = icmp eq i64 %v3_39d40, 0
  br i1 %v1_39d44, label %bb, label %dec_label_pc_39d4d

bb:                                               ; preds = %dec_label_pc_39d40
  %v3_39d47 = call i64 @function_39e40(i64 %arg1, i64 %arg2)
  store i64 %v3_39d47, i64* @rax, align 8
  br label %dec_label_pc_39d4d

dec_label_pc_39d4d:                               ; preds = %bb, %dec_label_pc_39d40
  %v0_39d5b = phi i64 [ %v3_39d47, %bb ], [ %v3_39d40, %dec_label_pc_39d40 ]
  %v1_39d5b = add i64 %v0_39d5b, 72
  %v2_39d5b = inttoptr i64 %v1_39d5b to i64*
  %v3_39d5b = load i64, i64* %v2_39d5b, align 8
  store i64 %v3_39d5b, i64* %r13.global-to-local, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_39d62 = add i64 %v3_39d5b, 32
  %v2_39d62 = inttoptr i64 %v1_39d62 to i64*
  %v3_39d62 = load i64, i64* %v2_39d62, align 8
  %v1_39d66 = icmp eq i64 %v3_39d62, 0
  br i1 %v1_39d66, label %bb245, label %dec_label_pc_39d6b

bb245:                                            ; preds = %dec_label_pc_39d4d
  %v1_39d69 = call i64 @function_39dc0()
  store i64 %v1_39d69, i64* @rax, align 8
  %v0_39d72.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_39d6b

dec_label_pc_39d6b:                               ; preds = %bb245, %dec_label_pc_39d4d
  %v0_39d72 = phi i64 [ %v0_39d72.pre, %bb245 ], [ %v3_39d5b, %dec_label_pc_39d4d ]
  store i64 236914, i64* @rdi, align 8
  %v1_39d72 = add i64 %v0_39d72, 32
  %v2_39d72 = inttoptr i64 %v1_39d72 to i64*
  store i64 0, i64* %v2_39d72, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39dc0() local_unnamed_addr {
dec_label_pc_39dc0:
  %v0_39dc0 = load i64, i64* @rax, align 8
  %v1_39dc0 = add i64 %v0_39dc0, 96
  %v2_39dc0 = inttoptr i64 %v1_39dc0 to i64*
  %v3_39dc0 = load i64, i64* %v2_39dc0, align 8
  %v10_39dc0 = icmp eq i64 %v3_39dc0, 0
  br i1 %v10_39dc0, label %bb, label %dec_label_pc_39dcb

bb:                                               ; preds = %dec_label_pc_39dc0
  %v1_39dc5 = load i64, i64* @rdi, align 8
  %v2_39dc5 = load i64, i64* @rsi, align 8
  %v3_39dc5 = call i64 @function_39e48(i64 %v1_39dc5, i64 %v2_39dc5)
  store i64 %v3_39dc5, i64* @rax, align 8
  br label %dec_label_pc_39dcb

dec_label_pc_39dcb:                               ; preds = %bb, %dec_label_pc_39dc0
  %v4_39dc5 = phi i64 [ %v3_39dc5, %bb ], [ %v0_39dc0, %dec_label_pc_39dc0 ]
  ret i64 %v4_39dc5
}

define i64 @function_39e02(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_39e02:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_39e02 = load i64, i64* @rax, align 8
  %v1_39e02 = add i64 %v0_39e02, -119
  %v2_39e02 = inttoptr i64 %v1_39e02 to i8*
  %v3_39e02 = load i8, i8* %v2_39e02, align 1
  %v5_39e02 = trunc i64 %arg4 to i8
  %v6_39e02 = add i8 %v3_39e02, %v5_39e02
  store i8 %v6_39e02, i8* %v2_39e02, align 1
  %v0_39e05 = load i64, i64* @rax, align 8
  ret i64 %v0_39e05
}

define i64 @function_39e40(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_39e40:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_39e48(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_39e48:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_39e50() local_unnamed_addr {
dec_label_pc_39e50:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39e72() local_unnamed_addr {
dec_label_pc_39e72:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %v0_39e72 = load i64, i64* @rax, align 8
  %v1_39e72 = add i64 %v0_39e72, -8
  %v2_39e72 = inttoptr i64 %v1_39e72 to i64*
  %v3_39e72 = load i64, i64* %v2_39e72, align 8
  store i64 %v3_39e72, i64* @rax, align 8
  %v0_39e76 = load i64, i64* %r12.global-to-local, align 8
  %v1_39e76 = load i64, i64* %r13.global-to-local, align 8
  %v2_39e76 = add i64 %v1_39e76, 32
  %v3_39e76 = inttoptr i64 %v2_39e76 to i64*
  store i64 %v0_39e76, i64* %v3_39e76, align 8
  %v0_39e7a = load i64, i64* inttoptr (i64 237185 to i64*), align 8
  store i64 %v0_39e7a, i64* @rax, align 8
  ret i64 %v0_39e7a
}

define i64 @function_39e86() local_unnamed_addr {
dec_label_pc_39e86:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm29WeakTable4makeEJPNS1_8LuaTableEbb(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_39ea0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_39ea8 = load i64, i64* @rdi, align 8
  store i64 237233, i64* @rdi, align 8
  %v0_39eb1 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_39eb1, i64* @rbx, align 8
  %v4_39ebc = trunc i64 %v0_39ea8 to i8
  %v5_39ebc = icmp eq i8 %v4_39ebc, 0
  %v4_39ee0 = trunc i64 %v0_39eb1 to i8
  %v5_39ee0 = icmp eq i8 %v4_39ee0, 0
  br i1 %v5_39ebc, label %dec_label_pc_39ee0, label %dec_label_pc_39ec1

dec_label_pc_39ec1:                               ; preds = %dec_label_pc_39ea0
  %v1_39ec3 = icmp eq i1 %v5_39ee0, false
  br i1 %v1_39ec3, label %bb, label %dec_label_pc_39ef7

bb:                                               ; preds = %dec_label_pc_39ec1
  %v2_39ec3 = call i64 @function_3a038()
  store i64 %v2_39ec3, i64* @rax, align 8
  br label %dec_label_pc_39ef7

dec_label_pc_39ee0:                               ; preds = %dec_label_pc_39ea0
  br i1 %v5_39ee0, label %bb246, label %dec_label_pc_39ef7

bb246:                                            ; preds = %dec_label_pc_39ee0
  %v1_39ee2 = call i64 @function_39fe8()
  store i64 %v1_39ee2, i64* @rax, align 8
  br label %dec_label_pc_39ef7

dec_label_pc_39ef7:                               ; preds = %dec_label_pc_39ee0, %bb246, %dec_label_pc_39ec1, %bb
  store i64 237310, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_39fe8() local_unnamed_addr {
dec_label_pc_39fe8:
  store i64 237551, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3a038() local_unnamed_addr {
dec_label_pc_3a038:
  %v0_3a038 = load i64, i64* inttoptr (i64 237631 to i64*), align 8
  store i64 %v0_3a038, i64* @rdi, align 8
  %v0_3a044 = load i64, i64* @rax, align 8
  ret i64 %v0_3a044
}

define i64 @function_3a04c() local_unnamed_addr {
dec_label_pc_3a04c:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3a058(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a058:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaInteger8strvalueEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a070:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3a07c = load i64, i64* @rax, align 8
  store i64 %v0_3a07c, i64* @rdi, align 8
  ret i64 %v0_3a07c
}

define i64 @_ZN3org4luaj3vm210LuaInteger9optstringEJPNS1_9LuaStringES4_(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a090:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3a09c = load i64, i64* @rax, align 8
  store i64 %v0_3a09c, i64* @rdi, align 8
  ret i64 %v0_3a09c
}

define i64 @_ZN3org4luaj3vm210LuaInteger8tostringEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a0b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3a0b4 = load i64, i64* @rdi, align 8
  %v1_3a0b4 = add i64 %v0_3a0b4, 8
  %v2_3a0b4 = inttoptr i64 %v1_3a0b4 to i32*
  %v3_3a0b4 = load i32, i32* %v2_3a0b4, align 4
  %v4_3a0b4 = zext i32 %v3_3a0b4 to i64
  store i64 %v4_3a0b4, i64* @rdi, align 8
  %v5_3a0b4 = load i64, i64* @rax, align 8
  ret i64 %v5_3a0b4
}

define i64 @_ZN4lang4Lang18__U3c_clinit__U3e_EJvv() local_unnamed_addr {
dec_label_pc_3a0d0:
  store i64 237787, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LoadState6undumpEJPNS1_9PrototypeEPN4java2io11InputStreamEPNS5_4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3a370:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3a378 = load i64, i64* @rdi, align 8
  store i64 %v0_3a378, i64* @rbx, align 8
  store i64 238466, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3a468() local_unnamed_addr {
dec_label_pc_3a468:
  %v0_3a46b = load i64, i64* @rax, align 8
  ret i64 %v0_3a46b
}

define i64 @function_3a510(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3a510:
  store i64 0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_3a53e(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a53e:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3a547() local_unnamed_addr {
dec_label_pc_3a547:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3a553() local_unnamed_addr {
dec_label_pc_3a553:
  store i64 238938, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3a584() local_unnamed_addr {
dec_label_pc_3a584:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3a590() local_unnamed_addr {
dec_label_pc_3a590:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3a59c() local_unnamed_addr {
dec_label_pc_3a59c:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaDouble8strvalueEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a5b0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3a5b4 = load i64, i64* @rdi, align 8
  store i64 %v2_3a5b4, i64* @rax, align 8
  ret i64 %v2_3a5b4
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib7iocloseEJPNS1_7VarargsEPNS2_10IoLib$FileE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a5d0:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3a5d4 = load i64, i64* @rdi, align 8
  store i64 %v2_3a5d4, i64* @rax, align 8
  store i64 %v2_3a5d4, i64* @rbx, align 8
  %v4_3a5e0 = trunc i64 %v2_3a5d4 to i8
  %v5_3a5e0 = icmp eq i8 %v4_3a5e0, 0
  %v1_3a5e2 = icmp eq i1 %v5_3a5e0, false
  br i1 %v1_3a5e2, label %dec_label_pc_3a600, label %dec_label_pc_3a5e4

dec_label_pc_3a5e4:                               ; preds = %dec_label_pc_3a5d0
  store i64 %v2_3a5d4, i64* @rax, align 8
  %v0_3a5f0 = load i64, i64* inttoptr (i64 239095 to i64*), align 8
  store i64 %v0_3a5f0, i64* @rbx, align 8
  ret i64 %v2_3a5d4

dec_label_pc_3a600:                               ; preds = %dec_label_pc_3a5d0
  store i64 239118, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3a610 = load i64, i64* inttoptr (i64 239127 to i64*), align 8
  store i64 %v0_3a610, i64* @rbx, align 8
  store i64 239147, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11errorresultEJPNS1_7VarargsEPN4java4lang9ExceptionE(i64 %arg1) local_unnamed_addr {
dec_label_pc_3a680:
  store i64 %arg1, i64* @rdi, align 8
  store i64 239246, i64* @rax, align 8
  ret i64 239246
}

define i64 @function_3a755(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3a755:
  %v0_3a755 = load i64, i64* @rbx, align 8
  store i64 %v0_3a755, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_3a755
}

define i64 @function_3a760() local_unnamed_addr {
dec_label_pc_3a760:
  %rbp.global-to-local = alloca i64, align 8
  %v2_3a760 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_3a760, i64* @rax, align 8
  store i64 %v2_3a760, i64* @rdi, align 8
  ret i64 %v2_3a760
}

define i64 @function_3a772() local_unnamed_addr {
dec_label_pc_3a772:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib12IoLib$IoLibV6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3a780:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3a78a = load i64, i64* @rdi, align 8
  %v1_3a78a = add i64 %v0_3a78a, 8
  %v2_3a78a = inttoptr i64 %v1_3a78a to i32*
  %v3_3a78a = load i32, i32* %v2_3a78a, align 4
  %v4_3a78a = zext i32 %v3_3a78a to i64
  store i64 %v4_3a78a, i64* @rax, align 8
  %tmp243 = icmp ult i32 %v3_3a78a, 20
  br i1 %tmp243, label %dec_label_pc_3a796, label %dec_label_pc_3ac00

dec_label_pc_3a796:                               ; preds = %dec_label_pc_3a780
  store i64 239517, i64* @rdx, align 8
  %v0_3a79d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3a79d, i64* @rbx, align 8
  %v2_3a7a0 = mul nuw nsw i64 %v4_3a78a, 4
  %v3_3a7a0 = add nuw nsw i64 %v2_3a7a0, 239517
  %v4_3a7a0 = inttoptr i64 %v3_3a7a0 to i32*
  %v5_3a7a0 = load i32, i32* %v4_3a7a0, align 4
  %v6_3a7a0 = sext i32 %v5_3a7a0 to i64
  %v2_3a7a4 = add nsw i64 %v6_3a7a0, 239517
  store i64 %v2_3a7a4, i64* @rax, align 8
  ret i64 %v2_3a7a4

dec_label_pc_3ac00:                               ; preds = %dec_label_pc_3a780
  %v0_3ac00 = load i64, i64* inttoptr (i64 240647 to i64*), align 8
  store i64 %v0_3ac00, i64* @rax, align 8
  ret i64 %v0_3ac00
}

define i64 @function_3ac3e(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac3e:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac44 = load i64, i64* @rax, align 8
  ret i64 %v0_3ac44
}

define i64 @function_3ac46(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac46:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac4c = load i64, i64* @rax, align 8
  ret i64 %v0_3ac4c
}

define i64 @function_3ac4e(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac4e:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac54 = load i64, i64* @rax, align 8
  ret i64 %v0_3ac54
}

define i64 @function_3ac56(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac56:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac5c = load i64, i64* @rax, align 8
  ret i64 %v0_3ac5c
}

define i64 @function_3ac5e(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac5e:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac64 = load i64, i64* @rax, align 8
  ret i64 %v0_3ac64
}

define i64 @function_3ac66(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac66:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac6c = load i64, i64* @rax, align 8
  ret i64 %v0_3ac6c
}

define i64 @function_3ac6e(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac6e:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac74 = load i64, i64* @rax, align 8
  ret i64 %v0_3ac74
}

define i64 @function_3ac76(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac76:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac7c = load i64, i64* @rax, align 8
  ret i64 %v0_3ac7c
}

define i64 @function_3ac7e(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac7e:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac84 = load i64, i64* @rax, align 8
  ret i64 %v0_3ac84
}

define i64 @function_3ac86(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac86:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3ac86 = add i64 %arg3, -1
  store i64 %v1_3ac86, i64* @rdx, align 8
  %v0_3ac8c = load i64, i64* @rax, align 8
  ret i64 %v0_3ac8c
}

define i64 @function_3ac8e(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac8e:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ac94 = load i64, i64* @rax, align 8
  ret i64 %v0_3ac94
}

define i64 @function_3ac96(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3ac96:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3aca0 = load i64, i64* @rax, align 8
  ret i64 %v0_3aca0
}

define i64 @function_3aca2(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3aca2:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3acac = load i64, i64* @rax, align 8
  ret i64 %v0_3acac
}

define i64 @function_3acae(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3acae:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3acb8 = load i64, i64* @rax, align 8
  ret i64 %v0_3acb8
}

define i64 @function_3acbd(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3acbd:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3acc7 = load i64, i64* @rax, align 8
  ret i64 %v0_3acc7
}

define i64 @function_3accc(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3accc:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3acd6 = load i64, i64* @rax, align 8
  ret i64 %v0_3acd6
}

define i64 @function_3acdb(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3acdb:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ace5 = load i64, i64* @rax, align 8
  ret i64 %v0_3ace5
}

define i64 @_ZN8testmain4mainEJvP6JArrayIPN4java4lang6StringEE() local_unnamed_addr {
dec_label_pc_3acf0:
  store i64 240891, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11_file_closeEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3add0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3aec8() local_unnamed_addr {
dec_label_pc_3aec8:
  store i64 1, i64* @rdi, align 8
  %v0_3aede = load i64, i64* @rax, align 8
  ret i64 %v0_3aede
}

define i64 @_ZN3org4luaj3vm23lib5IoLib9_io_closeEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3aee0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3aee3 = load i64, i64* @rdi, align 8
  store i64 %v0_3aee3, i64* %rbp.global-to-local, align 8
  %v2_3aee7 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_3aee7, i64* @rax, align 8
  store i64 %v2_3aee7, i64* @rbx, align 8
  store i64 %v2_3aee7, i64* @rdi, align 8
  %v4_3aef6 = trunc i64 %v2_3aee7 to i8
  %v5_3aef6 = icmp eq i8 %v4_3aef6, 0
  br i1 %v5_3aef6, label %bb, label %dec_label_pc_3aefe

bb:                                               ; preds = %dec_label_pc_3aee0
  %v1_3aef8 = call i64 @function_3afc8()
  store i64 %v1_3aef8, i64* @rax, align 8
  %v0_3aefe.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_3aefe

dec_label_pc_3aefe:                               ; preds = %bb, %dec_label_pc_3aee0
  %v0_3aefe = phi i64 [ %v0_3aefe.pre, %bb ], [ %v0_3aee3, %dec_label_pc_3aee0 ]
  %v1_3aefe = add i64 %v0_3aefe, 32
  %v2_3aefe = inttoptr i64 %v1_3aefe to i64*
  %v3_3aefe = load i64, i64* %v2_3aefe, align 8
  store i64 %v3_3aefe, i64* @rbx, align 8
  %v1_3af0b = inttoptr i64 %v3_3aefe to i64*
  %v2_3af0b = load i64, i64* %v1_3af0b, align 8
  store i64 %v2_3af0b, i64* @rax, align 8
  store i64 %v3_3aefe, i64* @rdi, align 8
  %v2_3af1f = load i64, i64* %v1_3af0b, align 8
  store i64 %v2_3af1f, i64* @rax, align 8
  store i64 %v3_3aefe, i64* @rdi, align 8
  %v4_3af2b = trunc i64 %v2_3af1f to i8
  %v5_3af2b = icmp eq i8 %v4_3af2b, 0
  %v1_3af2d = icmp eq i1 %v5_3af2b, false
  br i1 %v1_3af2d, label %dec_label_pc_3af50, label %dec_label_pc_3af2f

dec_label_pc_3af2f:                               ; preds = %dec_label_pc_3aefe
  %v2_3af2f = load i64, i64* %v1_3af0b, align 8
  store i64 %v2_3af2f, i64* @rax, align 8
  store i64 %v3_3aefe, i64* @rdi, align 8
  %v0_3af3b = load i64, i64* inttoptr (i64 241474 to i64*), align 8
  store i64 %v0_3af3b, i64* @rbx, align 8
  ret i64 %v2_3af2f

dec_label_pc_3af50:                               ; preds = %dec_label_pc_3aefe
  %v0_3af50 = load i64, i64* inttoptr (i64 241495 to i64*), align 8
  store i64 %v0_3af50, i64* %rbp.global-to-local, align 8
  store i64 241502, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3af60 = load i64, i64* inttoptr (i64 241511 to i64*), align 8
  store i64 %v0_3af60, i64* @rbx, align 8
  store i64 241531, i64* @rdi, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3afc8() local_unnamed_addr {
dec_label_pc_3afc8:
  store i64 241636, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm225LoadState$GlobalsUndumper6undumpEJPNS1_9PrototypeEPN4java2io11InputStreamEPNS5_4lang6StringE"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3b050:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 241755, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3b05f = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3b05f, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_3b1f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3b1f0:
  store i64 0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_3b200() local_unnamed_addr {
dec_label_pc_3b200:
  %v1_3b207 = load i64, i64* @rax, align 8
  ret i64 %v1_3b207
}

define i64 @function_3b20f() local_unnamed_addr {
dec_label_pc_3b20f:
  %r12.global-to-local = alloca i64, align 8
  %v0_3b20f = load i64, i64* @rax, align 8
  %v4_3b20f = trunc i64 %v0_3b20f to i8
  %v5_3b20f = icmp eq i8 %v4_3b20f, 0
  %v1_3b211 = icmp eq i1 %v5_3b20f, false
  %v2_3b211 = load i64, i64* %r12.global-to-local, align 8
  %v3_3b211 = load i64, i64* inttoptr (i64 242201 to i64*), align 8
  %v4_3b211 = select i1 %v1_3b211, i64 %v3_3b211, i64 %v2_3b211
  store i64 %v4_3b211, i64* %r12.global-to-local, align 8
  ret i64 %v0_3b20f
}

define i64 @function_3b21e(i64 %arg1) local_unnamed_addr {
dec_label_pc_3b21e:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3b227() local_unnamed_addr {
dec_label_pc_3b227:
  store i64 242234, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3b264() local_unnamed_addr {
dec_label_pc_3b264:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3b270() local_unnamed_addr {
dec_label_pc_3b270:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString7valueOfEJPS2_P6JArrayIwEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3b290:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 242336, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3b2a2 = load i64, i64* @rdx, align 8
  store i64 %v0_3b2a2, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_3b407(i64 %arg1) local_unnamed_addr {
dec_label_pc_3b407:
  store i64 0, i64* @rdi, align 8
  %v12_3b407 = load i64, i64* @rax, align 8
  ret i64 %v12_3b407
}

define i64 @function_3b409() local_unnamed_addr {
dec_label_pc_3b409:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3b410() local_unnamed_addr {
dec_label_pc_3b410:
  %rbp.global-to-local = alloca i64, align 8
  %v0_3b410 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_3b410, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString8concatToEJPNS1_8LuaValueEPS2_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3b420:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v23_3b42d = load i64, i64* @rax, align 8
  ret i64 %v23_3b42d
}

define i64 @"_ZN3org4luaj3vm23lib17StringLib$reverse4callEJPNS1_8LuaValueES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3b550:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3b554 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3b554, i64* @rax, align 8
  store i64 %v0_3b554, i64* @rdi, align 8
  ret i64 %v0_3b554
}

define i64 @function_3b6bb() local_unnamed_addr {
dec_label_pc_3b6bb:
  %v0_3b6bb = load i64, i64* @rbx, align 8
  store i64 %v0_3b6bb, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3b6c4() local_unnamed_addr {
dec_label_pc_3b6c4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib13StringLib$rep6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3b6d0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3b6d6 = load i64, i64* %rsi.global-to-local, align 8
  store i64 1, i64* @rbx, align 8
  store i64 2, i64* @rax, align 8
  store i64 %v0_3b6d6, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  ret i64 2
}

define i64 @_ZN3org4luaj3vm29LoadState10loadStringEJPNS1_9LuaStringEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3b850:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3b856 = load i64, i64* @rdi, align 8
  store i64 %v0_3b856, i64* @rbx, align 8
  store i64 %v0_3b856, i64* @rax, align 8
  ret i64 %v0_3b856
}

define i64 @function_3b9b3() local_unnamed_addr {
dec_label_pc_3b9b3:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib10freadbytesEJPNS1_8LuaValueEPNS2_10IoLib$FileEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3b9c0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3b9c6 = load i64, i64* @rdi, align 8
  store i64 %v0_3b9c6, i64* @rbx, align 8
  store i64 244176, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3bad8(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3bad8:
  %v0_3bad8 = load i64, i64* inttoptr (i64 244447 to i64*), align 8
  store i64 %v0_3bad8, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_3bad8
}

define i64 @function_3bae4() local_unnamed_addr {
dec_label_pc_3bae4:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @"_ZN3org4luaj3vm23lib14StringLib$dump6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3baf0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3baf8 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_3baf8, i64* @rax, align 8
  store i64 %v2_3baf8, i64* @rbx, align 8
  store i64 %v2_3baf8, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  ret i64 %v2_3baf8
}

define i64 @function_3bcde() local_unnamed_addr {
dec_label_pc_3bcde:
  %v0_3bcde = load i64, i64* @rax, align 8
  %v1_3bcde = add i64 %v0_3bcde, -8
  %v2_3bcde = inttoptr i64 %v1_3bcde to i64*
  %v3_3bcde = load i64, i64* %v2_3bcde, align 8
  store i64 %v3_3bcde, i64* @rdi, align 8
  %v1_3bce2 = inttoptr i64 %v3_3bcde to i64*
  %v2_3bce2 = load i64, i64* %v1_3bce2, align 8
  store i64 %v2_3bce2, i64* @rax, align 8
  store i64 %v2_3bce2, i64* @rdi, align 8
  ret i64 %v2_3bce2
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib10freaduntilEJPNS1_8LuaValueEPNS2_10IoLib$FileEb"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3bcf0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 244990, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3bdd8(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3bdd8:
  %r12.global-to-local = alloca i64, align 8
  %v0_3bdd8 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_3bdd8, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  ret i64 %v0_3bdd8
}

define i64 @function_3bde0() local_unnamed_addr {
dec_label_pc_3bde0:
  store i64 245223, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3be98() local_unnamed_addr {
dec_label_pc_3be98:
  %v0_3be98 = load i64, i64* @rax, align 8
  %v1_3be98 = add i64 %v0_3be98, -8
  %v2_3be98 = inttoptr i64 %v1_3be98 to i64*
  %v3_3be98 = load i64, i64* %v2_3be98, align 8
  store i64 %v3_3be98, i64* @rax, align 8
  ret i64 %v3_3be98
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib9freadlineEJPNS1_8LuaValueEPNS2_10IoLib$FileE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3beb0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib11_lines_iterEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3bee0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3bf40() local_unnamed_addr {
dec_label_pc_3bf40:
  store i64 1, i64* @rdi, align 8
  %v0_3bf4c = load i64, i64* @rax, align 8
  ret i64 %v0_3bf4c
}

define i64 @function_3bf51() local_unnamed_addr {
dec_label_pc_3bf51:
  %v0_3bf56 = load i64, i64* @rax, align 8
  ret i64 %v0_3bf56
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib8freadallEJPNS1_8LuaValueEPNS2_10IoLib$FileE"(i64 %arg1) local_unnamed_addr {
dec_label_pc_3bf60:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3bf66 = load i64, i64* @rdi, align 8
  store i64 %v0_3bf66, i64* @rbx, align 8
  store i64 245616, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3bfeb(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3bfeb:
  store i64 %arg1, i64* @rbx, align 8
  %v0_3bfef = load i64, i64* @rax, align 8
  ret i64 %v0_3bfef
}

define i64 @function_3bff0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_3bff0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3bff2 = load i64, i64* @rbx, align 8
  store i64 %v0_3bff2, i64* @rdi, align 8
  store i64 %arg3, i64* @rbx, align 8
  %v0_3bffe = load i64, i64* @rax, align 8
  ret i64 %v0_3bffe
}

define i64 @function_3c000() local_unnamed_addr {
dec_label_pc_3c000:
  store i64 245767, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29LuaString9substringEJPS2_ii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3c0b0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3c0b0 = load i64, i64* %r13.global-to-local, align 8
  %v0_3c0b2 = load i64, i64* %r12.global-to-local, align 8
  %v0_3c0b4 = load i64, i64* %rbp.global-to-local, align 8
  %v0_3c0b5 = load i64, i64* @rbx, align 8
  %v0_3c0b6 = load i64, i64* @rdx, align 8
  %v1_3c0b8 = trunc i64 %v0_3c0b6 to i32
  %v2_3c0b8 = load i64, i64* %rsi.global-to-local, align 8
  %v3_3c0b8 = trunc i64 %v2_3c0b8 to i32
  %v4_3c0b8 = sub i32 %v1_3c0b8, %v3_3c0b8
  %v20_3c0b8 = zext i32 %v4_3c0b8 to i64
  store i64 %v20_3c0b8, i64* @rbx, align 8
  %v1_3c0be = add i64 %arg1, 20
  %v2_3c0be = inttoptr i64 %v1_3c0be to i32*
  %v3_3c0be = load i32, i32* %v2_3c0be, align 4
  %v4_3c0be = zext i32 %v3_3c0be to i64
  store i64 %v4_3c0be, i64* @rdx, align 8
  %v1_3c0c1 = add i64 %arg1, 16
  %v2_3c0c1 = inttoptr i64 %v1_3c0c1 to i32*
  %v3_3c0c1 = load i32, i32* %v2_3c0c1, align 4
  %v4_3c0c7 = add i32 %v3_3c0c1, %v3_3c0b8
  %v20_3c0c7 = zext i32 %v4_3c0c7 to i64
  store i64 %v20_3c0c7, i64* %r12.global-to-local, align 8
  %tmp255 = icmp slt i32 %v3_3c0be, 0
  %v3_3c0ca = zext i1 %tmp255 to i32
  %v4_3c0cd = add i32 %v3_3c0ca, %v3_3c0be
  %v3_3c0cf = sdiv i32 %v4_3c0cd, 2
  %v10_3c0cf = zext i32 %v3_3c0cf to i64
  store i64 %v10_3c0cf, i64* @rax, align 8
  %v9_3c0d1 = icmp ult i32 %v4_3c0b8, %v3_3c0cf
  br i1 %v9_3c0d1, label %dec_label_pc_3c0d9, label %bb

bb:                                               ; preds = %dec_label_pc_3c0b0
  %v7_3c0d3 = call i64 @function_3c1e0(i64 %arg1)
  store i64 %v7_3c0d3, i64* @rax, align 8
  %v0_3c0eb.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3c0d9

dec_label_pc_3c0d9:                               ; preds = %dec_label_pc_3c0b0, %bb
  %v0_3c0eb = phi i64 [ %v20_3c0b8, %dec_label_pc_3c0b0 ], [ %v0_3c0eb.pre, %bb ]
  %v1_3c0d9 = add i64 %arg1, 8
  %v2_3c0d9 = inttoptr i64 %v1_3c0d9 to i64*
  %v3_3c0d9 = load i64, i64* %v2_3c0d9, align 8
  store i64 %v3_3c0d9, i64* %rbp.global-to-local, align 8
  store i64 245988, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_3c0eb = trunc i64 %v0_3c0eb to i32
  %v9_3c0ee = icmp sgt i32 %v1_3c0eb, 32
  br i1 %v9_3c0ee, label %dec_label_pc_3c110, label %dec_label_pc_3c0f0

dec_label_pc_3c0f0:                               ; preds = %dec_label_pc_3c0d9
  store i64 %v3_3c0d9, i64* @rdi, align 8
  store i64 %v0_3c0eb, i64* @rdx, align 8
  %v0_3c0f5 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_3c0f5, i64* %rsi.global-to-local, align 8
  %v3_3c0f8 = call i64 @_ZN3org4luaj3vm29LuaString7valueOfEJPS2_P6JArrayIcEii.part.117(i64 %v3_3c0d9, i64 %v0_3c0f5, i64 %v0_3c0eb)
  store i64 %v3_3c0f8, i64* @rax, align 8
  store i64 %v0_3c0b5, i64* @rbx, align 8
  store i64 %v0_3c0b4, i64* %rbp.global-to-local, align 8
  store i64 %v0_3c0b2, i64* %r12.global-to-local, align 8
  store i64 %v0_3c0b0, i64* %r13.global-to-local, align 8
  ret i64 %v3_3c0f8

dec_label_pc_3c110:                               ; preds = %dec_label_pc_3c0d9
  ret i64 0
}

define i64 @function_3c1e0(i64 %arg1) local_unnamed_addr {
dec_label_pc_3c1e0:
  store i64 246251, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3c2d3() local_unnamed_addr {
dec_label_pc_3c2d3:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$char_6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3c2e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3c2e4 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3c2e4, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  store i64 %v0_3c2e4, i64* @rax, align 8
  ret i64 %v0_3c2e4
}

define i64 @function_3c3b0() local_unnamed_addr {
dec_label_pc_3c3b0:
  store i64 246711, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3c49b() local_unnamed_addr {
dec_label_pc_3c49b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3c4a2() local_unnamed_addr {
dec_label_pc_3c4a2:
  %v0_3c4a2 = load i64, i64* @rbx, align 8
  store i64 %v0_3c4a2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$xpcall6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3c4c0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3c4ca = load i64, i64* @rdi, align 8
  store i64 %v0_3c4ca, i64* %rbp.global-to-local, align 8
  %v0_3c4cd = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3c4cd, i64* @rbx, align 8
  %v1_3c4d4 = add i64 %v0_3c4ca, 24
  %v2_3c4d4 = inttoptr i64 %v1_3c4d4 to i64*
  %v3_3c4d4 = load i64, i64* %v2_3c4d4, align 8
  store i64 %v3_3c4d4, i64* @rax, align 8
  store i64 %v0_3c4cd, i64* @rdi, align 8
  %v1_3c4db = add i64 %v3_3c4d4, 24
  %v2_3c4db = inttoptr i64 %v1_3c4db to i64*
  %v3_3c4db = load i64, i64* %v2_3c4db, align 8
  store i64 %v3_3c4db, i64* @rax, align 8
  %v1_3c4df = add i64 %v3_3c4db, 72
  %v2_3c4df = inttoptr i64 %v1_3c4df to i64*
  %v3_3c4df = load i64, i64* %v2_3c4df, align 8
  store i64 %v0_3c4cd, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  %v1_3c4eb = add i64 %v3_3c4df, 32
  %v2_3c4eb = inttoptr i64 %v1_3c4eb to i64*
  store i64 %v0_3c4cd, i64* %v2_3c4eb, align 8
  %v0_3c4fb = load i64, i64* %rbp.global-to-local, align 8
  %v1_3c4fb = add i64 %v0_3c4fb, 24
  %v2_3c4fb = inttoptr i64 %v1_3c4fb to i64*
  %v3_3c4fb = load i64, i64* %v2_3c4fb, align 8
  store i64 %v3_3c4fb, i64* @rax, align 8
  %v1_3c4ff = add i64 %v3_3c4fb, 24
  %v2_3c4ff = inttoptr i64 %v1_3c4ff to i64*
  %v3_3c4ff = load i64, i64* %v2_3c4ff, align 8
  store i64 %v3_3c4ff, i64* @rax, align 8
  %v1_3c503 = icmp eq i64 %v3_3c4ff, 0
  br i1 %v1_3c503, label %dec_label_pc_3c520, label %dec_label_pc_3c508

dec_label_pc_3c508:                               ; preds = %dec_label_pc_3c4c0
  %v1_3c508 = add i64 %v3_3c4ff, 96
  %v2_3c508 = inttoptr i64 %v1_3c508 to i64*
  %v3_3c508 = load i64, i64* %v2_3c508, align 8
  store i64 %v3_3c508, i64* @rdi, align 8
  %v1_3c50c = icmp eq i64 %v3_3c508, 0
  br i1 %v1_3c50c, label %dec_label_pc_3c520, label %dec_label_pc_3c511

dec_label_pc_3c511:                               ; preds = %dec_label_pc_3c508
  %v1_3c511 = inttoptr i64 %v3_3c508 to i64*
  %v2_3c511 = load i64, i64* %v1_3c511, align 8
  store i64 %v2_3c511, i64* @rax, align 8
  %v1_3c514 = add i64 %v2_3c511, 2224
  %v2_3c514 = inttoptr i64 %v1_3c514 to i64*
  %v3_3c514 = load i64, i64* %v2_3c514, align 8
  store i64 %v3_3c514, i64* @rax, align 8
  store i64 %v0_3c4fb, i64* %rsi.global-to-local, align 8
  br label %dec_label_pc_3c520

dec_label_pc_3c520:                               ; preds = %dec_label_pc_3c511, %dec_label_pc_3c508, %dec_label_pc_3c4c0
  %v2_3c527 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_3c527, i64* @rax, align 8
  %v1_3c52a = add i64 %v2_3c527, 80
  %v2_3c52a = inttoptr i64 %v1_3c52a to i64*
  %v3_3c52a = load i64, i64* %v2_3c52a, align 8
  %v0_3c52e = load i64, i64* @rbx, align 8
  store i64 %v0_3c52e, i64* @rdi, align 8
  store i64 %v2_3c527, i64* @rax, align 8
  %v1_3c539 = add i64 %v2_3c527, 536
  %v2_3c539 = inttoptr i64 %v1_3c539 to i64*
  %v3_3c539 = load i64, i64* %v2_3c539, align 8
  store i64 %v3_3c539, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v0_3c52e, i64* @rdi, align 8
  %v1_3c54a = inttoptr i64 %v3_3c52a to i64*
  %v2_3c54a = load i64, i64* %v1_3c54a, align 8
  store i64 %v2_3c54a, i64* @rdx, align 8
  %v1_3c54d = add i64 %v2_3c54a, 1424
  %v2_3c54d = inttoptr i64 %v1_3c54d to i64*
  %v3_3c54d = load i64, i64* %v2_3c54d, align 8
  store i64 %v3_3c54d, i64* @rdx, align 8
  store i64 %v3_3c539, i64* %rsi.global-to-local, align 8
  store i64 247139, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3c616() local_unnamed_addr {
dec_label_pc_3c616:
  store i64 247325, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3c669() local_unnamed_addr {
dec_label_pc_3c669:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_3c66f() local_unnamed_addr {
dec_label_pc_3c66f:
  %v0_3c66f = load i64, i64* @rax, align 8
  %v1_3c66f = add i64 %v0_3c66f, -8
  %v2_3c66f = inttoptr i64 %v1_3c66f to i64*
  %v3_3c66f = load i64, i64* %v2_3c66f, align 8
  store i64 %v3_3c66f, i64* @rdi, align 8
  %v0_3c673 = load i64, i64* @r13, align 8
  %v1_3c673 = load i64, i64* @r12, align 8
  %v2_3c673 = add i64 %v1_3c673, 32
  %v3_3c673 = inttoptr i64 %v2_3c673 to i64*
  store i64 %v0_3c673, i64* %v3_3c673, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3c6a7() local_unnamed_addr {
dec_label_pc_3c6a7:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_3c6df(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3c6df:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v10_3c6df = icmp eq i64 %arg3, 2
  br i1 %v10_3c6df, label %bb, label %dec_label_pc_3c6e5

bb:                                               ; preds = %dec_label_pc_3c6df
  %v1_3c6e3 = call i64 @function_3c6a7()
  store i64 %v1_3c6e3, i64* @rax, align 8
  br label %dec_label_pc_3c6e5

dec_label_pc_3c6e5:                               ; preds = %bb, %dec_label_pc_3c6df
  %v0_3c6e5 = call i64 @function_3c669()
  store i64 %v0_3c6e5, i64* @rax, align 8
  ret i64 %v0_3c6e5
}

define i64 @function_3c6e7() local_unnamed_addr {
dec_label_pc_3c6e7:
  %rbp.global-to-local = alloca i64, align 8
  %v0_3c6e7 = load i64, i64* @rax, align 8
  %v1_3c6e7 = add i64 %v0_3c6e7, -8
  %v2_3c6e7 = inttoptr i64 %v1_3c6e7 to i64*
  %v3_3c6e7 = load i64, i64* %v2_3c6e7, align 8
  store i64 %v3_3c6e7, i64* @rdi, align 8
  %v1_3c6eb = inttoptr i64 %v3_3c6e7 to i64*
  %v2_3c6eb = load i64, i64* %v1_3c6eb, align 8
  store i64 %v2_3c6eb, i64* @rax, align 8
  %v1_3c6ee = add i64 %v2_3c6eb, 144
  %v2_3c6ee = inttoptr i64 %v1_3c6ee to i64*
  %v3_3c6ee = load i64, i64* %v2_3c6ee, align 8
  store i64 %v3_3c6ee, i64* @rax, align 8
  %v1_3c6f7 = icmp eq i64 %v3_3c6ee, 0
  %v2_3c6fa = load i64, i64* inttoptr (i64 247554 to i64*), align 8
  %v3_3c6fa = select i1 %v1_3c6f7, i64 %v2_3c6fa, i64 %v3_3c6ee
  store i64 %v3_3c6fa, i64* @rax, align 8
  %v0_3c702 = load i64, i64* inttoptr (i64 247561 to i64*), align 8
  store i64 %v0_3c702, i64* @rdi, align 8
  store i64 %v3_3c6fa, i64* @rbx, align 8
  %v0_3c714 = load i64, i64* %rbp.global-to-local, align 8
  %v1_3c714 = add i64 %v0_3c714, 24
  %v2_3c714 = inttoptr i64 %v1_3c714 to i64*
  %v3_3c714 = load i64, i64* %v2_3c714, align 8
  store i64 %v3_3c714, i64* @rax, align 8
  %v1_3c718 = add i64 %v3_3c714, 24
  %v2_3c718 = inttoptr i64 %v1_3c718 to i64*
  %v3_3c718 = load i64, i64* %v2_3c718, align 8
  store i64 %v3_3c718, i64* @rax, align 8
  %v1_3c725 = add i64 %v3_3c718, 96
  %v2_3c725 = inttoptr i64 %v1_3c725 to i64*
  %v3_3c725 = load i64, i64* %v2_3c725, align 8
  store i64 %v3_3c725, i64* @rdi, align 8
  %v1_3c732 = inttoptr i64 %v3_3c725 to i64*
  %v2_3c732 = load i64, i64* %v1_3c732, align 8
  store i64 %v2_3c732, i64* @rax, align 8
  %v1_3c735 = add i64 %v2_3c732, 2248
  %v2_3c735 = inttoptr i64 %v1_3c735 to i64*
  %v3_3c735 = load i64, i64* %v2_3c735, align 8
  store i64 %v3_3c735, i64* @rax, align 8
  ret i64 %v3_3c735
}

define i64 @function_3c743(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3c743:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v10_3c743 = icmp eq i64 %arg3, 6
  br i1 %v10_3c743, label %bb, label %dec_label_pc_3c74d

bb:                                               ; preds = %dec_label_pc_3c743
  %v1_3c747 = call i64 @function_3c6a7()
  store i64 %v1_3c747, i64* @rax, align 8
  %v0_3c74d.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_3c74d

dec_label_pc_3c74d:                               ; preds = %bb, %dec_label_pc_3c743
  %v0_3c74d = phi i64 [ %v0_3c74d.pre, %bb ], [ %arg3, %dec_label_pc_3c743 ]
  %v10_3c74d = icmp eq i64 %v0_3c74d, 5
  br i1 %v10_3c74d, label %bb238, label %dec_label_pc_3c74d.dec_label_pc_3c757_crit_edge

dec_label_pc_3c74d.dec_label_pc_3c757_crit_edge:  ; preds = %dec_label_pc_3c74d
  %v0_3c757.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3c757

bb238:                                            ; preds = %dec_label_pc_3c74d
  %v1_3c751 = call i64 @function_3c66f()
  store i64 %v1_3c751, i64* @rax, align 8
  br label %dec_label_pc_3c757

dec_label_pc_3c757:                               ; preds = %dec_label_pc_3c74d.dec_label_pc_3c757_crit_edge, %bb238
  %v0_3c757 = phi i64 [ %v0_3c757.pre, %dec_label_pc_3c74d.dec_label_pc_3c757_crit_edge ], [ %v1_3c751, %bb238 ]
  ret i64 %v0_3c757
}

define i64 @function_3c75c() local_unnamed_addr {
dec_label_pc_3c75c:
  %v0_3c75c = load i64, i64* @rax, align 8
  ret i64 %v0_3c75c
}

define i64 @_ZN3org4luaj3vm23lib5IoLib9_io_linesEJPNS1_7VarargsEPN4java4lang6StringE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3c760:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3c771 = icmp eq i64 %arg2, 0
  br i1 %v1_3c771, label %bb, label %dec_label_pc_3c760.dec_label_pc_3c77a_crit_edge

dec_label_pc_3c760.dec_label_pc_3c77a_crit_edge:  ; preds = %dec_label_pc_3c760
  %v1_3c790.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3c77a

bb:                                               ; preds = %dec_label_pc_3c760
  %v3_3c774 = call i64 @function_3c858(i64 %arg1, i64 0)
  store i64 %v3_3c774, i64* @rax, align 8
  br label %dec_label_pc_3c77a

dec_label_pc_3c77a:                               ; preds = %dec_label_pc_3c760.dec_label_pc_3c77a_crit_edge, %bb
  %v1_3c790 = phi i64 [ %v1_3c790.pre, %dec_label_pc_3c760.dec_label_pc_3c77a_crit_edge ], [ %v3_3c774, %bb ]
  %v0_3c77a = load i64, i64* inttoptr (i64 247681 to i64*), align 8
  store i64 %v0_3c77a, i64* @rbx, align 8
  store i64 %v0_3c77a, i64* @rdi, align 8
  ret i64 %v1_3c790
}

define i64 @function_3c858(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3c858:
  store i64 %arg1, i64* @rdi, align 8
  %v1_3c858 = add i64 %arg1, 24
  %v2_3c858 = inttoptr i64 %v1_3c858 to i64*
  %v3_3c858 = load i64, i64* %v2_3c858, align 8
  store i64 %v3_3c858, i64* @rdi, align 8
  %v0_3c861 = load i64, i64* inttoptr (i64 247912 to i64*), align 8
  store i64 %v0_3c861, i64* @rcx, align 8
  %v0_3c868 = load i64, i64* inttoptr (i64 247919 to i64*), align 8
  store i64 %v0_3c868, i64* @rdx, align 8
  %v0_3c879 = load i64, i64* @rax, align 8
  store i64 %v0_3c879, i64* @rdi, align 8
  ret i64 %v0_3c879
}

define i64 @function_3c881() local_unnamed_addr {
dec_label_pc_3c881:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3c8ec() local_unnamed_addr {
dec_label_pc_3c8ec:
  %v0_3c8ec = load i64, i64* @rax, align 8
  store i64 %v0_3c8ec, i64* @rdi, align 8
  ret i64 %v0_3c8ec
}

define i64 @function_3c8f4() local_unnamed_addr {
dec_label_pc_3c8f4:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3c92d() local_unnamed_addr {
dec_label_pc_3c92d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib14BaseLib$select6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3c940:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3c944 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3c944, i64* @rbx, align 8
  store i64 %v0_3c944, i64* @rax, align 8
  store i64 248175, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3ca5d() local_unnamed_addr {
dec_label_pc_3ca5d:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$68$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3ca80:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_3ca80 = load i64, i64* %r14.global-to-local, align 8
  %v0_3ca82 = load i64, i64* %r13.global-to-local, align 8
  %v0_3ca84 = load i64, i64* %r12.global-to-local, align 8
  %v0_3ca86 = load i64, i64* %rbp.global-to-local, align 8
  %v0_3ca87 = load i64, i64* @rdi, align 8
  store i64 %v0_3ca87, i64* @r12, align 8
  %v0_3ca8a = load i64, i64* @rbx, align 8
  store i64 %v0_3ca8a, i64* %stack_var_-40, align 8
  %v2_3ca8b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_3ca8b, i64* @rbx, align 8
  store i64 %v2_3ca8b, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rbp, align 8
  store i64 2, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v2_3ca8b, i64* @rdi, align 8
  %v1_3cac1 = add i64 %v0_3ca87, 24
  %v2_3cac1 = inttoptr i64 %v1_3cac1 to i64*
  %v3_3cac1 = load i64, i64* %v2_3cac1, align 8
  store i64 %v3_3cac1, i64* @rax, align 8
  %v1_3cac6 = add i64 %v3_3cac1, 8
  %v2_3cac6 = inttoptr i64 %v1_3cac6 to i32*
  %v3_3cac6 = load i32, i32* %v2_3cac6, align 4
  %v4_3cac6 = zext i32 %v3_3cac6 to i64
  store i64 %v4_3cac6, i64* @rdx, align 8
  %v5_3cac9 = icmp eq i32 %v3_3cac6, 0
  br i1 %v5_3cac9, label %bb, label %dec_label_pc_3cad1

bb:                                               ; preds = %dec_label_pc_3ca80
  %v2_3cacb = call i64 @function_3cc54(i64 %v2_3ca8b)
  store i64 %v2_3cacb, i64* @rax, align 8
  %v0_3cad5.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_3cae1.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_3cad1

dec_label_pc_3cad1:                               ; preds = %bb, %dec_label_pc_3ca80
  %v0_3cae1 = phi i64 [ %v0_3cae1.pre, %bb ], [ %v0_3ca87, %dec_label_pc_3ca80 ]
  %v0_3cad5 = phi i64 [ %v0_3cad5.pre, %bb ], [ %v2_3ca8b, %dec_label_pc_3ca80 ]
  %v0_3cad1 = phi i64 [ %v2_3cacb, %bb ], [ %v3_3cac1, %dec_label_pc_3ca80 ]
  %v1_3cad1 = add i64 %v0_3cad1, 16
  %v2_3cad1 = inttoptr i64 %v1_3cad1 to i64*
  %v3_3cad1 = load i64, i64* %v2_3cad1, align 8
  store i64 %v3_3cad1, i64* @rdi, align 8
  store i64 %v0_3cad5, i64* %rsi.global-to-local, align 8
  %v1_3cad8 = inttoptr i64 %v3_3cad1 to i64*
  %v2_3cad8 = load i64, i64* %v1_3cad8, align 8
  store i64 %v2_3cad8, i64* @rax, align 8
  %v1_3cae1 = add i64 %v0_3cae1, 32
  %v2_3cae1 = inttoptr i64 %v1_3cae1 to i64*
  %v3_3cae1 = load i64, i64* %v2_3cae1, align 8
  store i64 %v3_3cae1, i64* @rdi, align 8
  store i64 %v2_3cad8, i64* %r13.global-to-local, align 8
  store i64 %v2_3cad8, i64* %rsi.global-to-local, align 8
  %v1_3caec = inttoptr i64 %v3_3cae1 to i64*
  %v2_3caec = load i64, i64* %v1_3caec, align 8
  store i64 %v2_3caec, i64* @rax, align 8
  %v1_3caf5 = inttoptr i64 %v2_3caec to i64*
  %v2_3caf5 = load i64, i64* %v1_3caf5, align 8
  store i64 %v2_3caf5, i64* @rdx, align 8
  store i64 %v2_3caec, i64* @rdi, align 8
  %v4_3cb01 = trunc i64 %v2_3caec to i8
  %v5_3cb01 = icmp eq i8 %v4_3cb01, 0
  %v1_3cb03 = icmp eq i1 %v5_3cb01, false
  br i1 %v1_3cb03, label %bb249, label %dec_label_pc_3cb05

bb249:                                            ; preds = %dec_label_pc_3cad1
  %v2_3cb03 = call i64 @function_3cb80()
  store i64 %v2_3cb03, i64* @rax, align 8
  %v0_3cb05.pre = load i64, i64* @r12, align 8
  %v0_3cb0a.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_3cb05

dec_label_pc_3cb05:                               ; preds = %bb249, %dec_label_pc_3cad1
  %v0_3cb0a = phi i64 [ %v0_3cb0a.pre, %bb249 ], [ %v2_3cad8, %dec_label_pc_3cad1 ]
  %v0_3cb41 = phi i64 [ %v0_3cb05.pre, %bb249 ], [ %v0_3cae1, %dec_label_pc_3cad1 ]
  %v1_3cb05 = add i64 %v0_3cb41, 56
  %v2_3cb05 = inttoptr i64 %v1_3cb05 to i64*
  %v3_3cb05 = load i64, i64* %v2_3cb05, align 8
  store i64 %v3_3cb05, i64* @rdi, align 8
  store i64 %v0_3cb0a, i64* %rsi.global-to-local, align 8
  %v1_3cb0d = inttoptr i64 %v3_3cb05 to i64*
  %v2_3cb0d = load i64, i64* %v1_3cb0d, align 8
  store i64 %v2_3cb0d, i64* @rdi, align 8
  store i64 %v2_3cb0d, i64* @rdx, align 8
  %v0_3cb24 = load i64, i64* @rbp, align 8
  store i64 %v0_3cb24, i64* @rax, align 8
  %v4_3cb27 = trunc i64 %v2_3cb0d to i8
  %v5_3cb27 = icmp eq i8 %v4_3cb27, 0
  %v1_3cb29 = icmp eq i1 %v5_3cb27, false
  br i1 %v1_3cb29, label %dec_label_pc_3cb38, label %dec_label_pc_3cb2b

dec_label_pc_3cb2b:                               ; preds = %dec_label_pc_3cb05
  %v2_3cb2b = load i64, i64* %stack_var_-40, align 8
  store i64 %v2_3cb2b, i64* @rbx, align 8
  store i64 %v0_3ca86, i64* %rbp.global-to-local, align 8
  store i64 %v0_3ca84, i64* %r12.global-to-local, align 8
  store i64 %v0_3ca82, i64* %r13.global-to-local, align 8
  store i64 %v0_3ca80, i64* %r14.global-to-local, align 8
  ret i64 %v0_3cb24

dec_label_pc_3cb38:                               ; preds = %dec_label_pc_3cb05
  store i64 248639, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_3cb41 = add i64 %v0_3cb41, 64
  %v2_3cb41 = inttoptr i64 %v1_3cb41 to i64*
  %v3_3cb41 = load i64, i64* %v2_3cb41, align 8
  store i64 %v3_3cb41, i64* %rbp.global-to-local, align 8
  ret i64 0
}

define i64 @function_3cb80() local_unnamed_addr {
dec_label_pc_3cb80:
  store i64 248711, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3cb89 = load i64, i64* @r12, align 8
  %v1_3cb8e = add i64 %v0_3cb89, 48
  %v2_3cb8e = inttoptr i64 %v1_3cb8e to i64*
  %v3_3cb8e = load i64, i64* %v2_3cb8e, align 8
  store i64 %v3_3cb8e, i64* @rbp, align 8
  ret i64 0
}

define i64 @function_3cc19() local_unnamed_addr {
dec_label_pc_3cc19:
  store i64 248864, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3cc54(i64 %arg1) local_unnamed_addr {
dec_label_pc_3cc54:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$728onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3cc60:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_3cc60 = load i64, i64* %r14.global-to-local, align 8
  %v0_3cc62 = load i64, i64* %r13.global-to-local, align 8
  %v0_3cc64 = load i64, i64* %r12.global-to-local, align 8
  %v0_3cc66 = load i64, i64* %rbp.global-to-local, align 8
  %v0_3cc67 = load i64, i64* @rdi, align 8
  store i64 %v0_3cc67, i64* @r12, align 8
  %v0_3cc6a = load i64, i64* @rbx, align 8
  store i64 %v0_3cc6a, i64* %stack_var_-40, align 8
  %v2_3cc6b = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_3cc6b, i64* @rbx, align 8
  store i64 %v2_3cc6b, i64* %r13.global-to-local, align 8
  store i64 1, i64* @rbp, align 8
  store i64 2, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v2_3cc6b, i64* @rdi, align 8
  %v1_3cca1 = add i64 %v0_3cc67, 24
  %v2_3cca1 = inttoptr i64 %v1_3cca1 to i64*
  %v3_3cca1 = load i64, i64* %v2_3cca1, align 8
  store i64 %v3_3cca1, i64* @rax, align 8
  %v1_3cca6 = add i64 %v3_3cca1, 8
  %v2_3cca6 = inttoptr i64 %v1_3cca6 to i32*
  %v3_3cca6 = load i32, i32* %v2_3cca6, align 4
  %v4_3cca6 = zext i32 %v3_3cca6 to i64
  store i64 %v4_3cca6, i64* @rdx, align 8
  %v5_3cca9 = icmp eq i32 %v3_3cca6, 0
  br i1 %v5_3cca9, label %bb, label %dec_label_pc_3ccb1

bb:                                               ; preds = %dec_label_pc_3cc60
  %v2_3ccab = call i64 @function_3ce34(i64 %v2_3cc6b)
  store i64 %v2_3ccab, i64* @rax, align 8
  %v0_3ccb5.pre = load i64, i64* %r13.global-to-local, align 8
  %v0_3ccc1.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_3ccb1

dec_label_pc_3ccb1:                               ; preds = %bb, %dec_label_pc_3cc60
  %v0_3ccc1 = phi i64 [ %v0_3ccc1.pre, %bb ], [ %v0_3cc67, %dec_label_pc_3cc60 ]
  %v0_3ccb5 = phi i64 [ %v0_3ccb5.pre, %bb ], [ %v2_3cc6b, %dec_label_pc_3cc60 ]
  %v0_3ccb1 = phi i64 [ %v2_3ccab, %bb ], [ %v3_3cca1, %dec_label_pc_3cc60 ]
  %v1_3ccb1 = add i64 %v0_3ccb1, 16
  %v2_3ccb1 = inttoptr i64 %v1_3ccb1 to i64*
  %v3_3ccb1 = load i64, i64* %v2_3ccb1, align 8
  store i64 %v3_3ccb1, i64* @rdi, align 8
  store i64 %v0_3ccb5, i64* %rsi.global-to-local, align 8
  %v1_3ccb8 = inttoptr i64 %v3_3ccb1 to i64*
  %v2_3ccb8 = load i64, i64* %v1_3ccb8, align 8
  store i64 %v2_3ccb8, i64* @rax, align 8
  %v1_3ccc1 = add i64 %v0_3ccc1, 32
  %v2_3ccc1 = inttoptr i64 %v1_3ccc1 to i64*
  %v3_3ccc1 = load i64, i64* %v2_3ccc1, align 8
  store i64 %v3_3ccc1, i64* @rdi, align 8
  store i64 %v2_3ccb8, i64* %r13.global-to-local, align 8
  store i64 %v2_3ccb8, i64* %rsi.global-to-local, align 8
  %v1_3cccc = inttoptr i64 %v3_3ccc1 to i64*
  %v2_3cccc = load i64, i64* %v1_3cccc, align 8
  store i64 %v2_3cccc, i64* @rax, align 8
  %v1_3ccd5 = inttoptr i64 %v2_3cccc to i64*
  %v2_3ccd5 = load i64, i64* %v1_3ccd5, align 8
  store i64 %v2_3ccd5, i64* @rdx, align 8
  store i64 %v2_3cccc, i64* @rdi, align 8
  %v4_3cce1 = trunc i64 %v2_3cccc to i8
  %v5_3cce1 = icmp eq i8 %v4_3cce1, 0
  %v1_3cce3 = icmp eq i1 %v5_3cce1, false
  br i1 %v1_3cce3, label %bb249, label %dec_label_pc_3cce5

bb249:                                            ; preds = %dec_label_pc_3ccb1
  %v2_3cce3 = call i64 @function_3cd60()
  store i64 %v2_3cce3, i64* @rax, align 8
  %v0_3cce5.pre = load i64, i64* @r12, align 8
  %v0_3ccea.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_3cce5

dec_label_pc_3cce5:                               ; preds = %bb249, %dec_label_pc_3ccb1
  %v0_3ccea = phi i64 [ %v0_3ccea.pre, %bb249 ], [ %v2_3ccb8, %dec_label_pc_3ccb1 ]
  %v0_3cd21 = phi i64 [ %v0_3cce5.pre, %bb249 ], [ %v0_3ccc1, %dec_label_pc_3ccb1 ]
  %v1_3cce5 = add i64 %v0_3cd21, 56
  %v2_3cce5 = inttoptr i64 %v1_3cce5 to i64*
  %v3_3cce5 = load i64, i64* %v2_3cce5, align 8
  store i64 %v3_3cce5, i64* @rdi, align 8
  store i64 %v0_3ccea, i64* %rsi.global-to-local, align 8
  %v1_3cced = inttoptr i64 %v3_3cce5 to i64*
  %v2_3cced = load i64, i64* %v1_3cced, align 8
  store i64 %v2_3cced, i64* @rdi, align 8
  store i64 %v2_3cced, i64* @rdx, align 8
  %v0_3cd04 = load i64, i64* @rbp, align 8
  store i64 %v0_3cd04, i64* @rax, align 8
  %v4_3cd07 = trunc i64 %v2_3cced to i8
  %v5_3cd07 = icmp eq i8 %v4_3cd07, 0
  %v1_3cd09 = icmp eq i1 %v5_3cd07, false
  br i1 %v1_3cd09, label %dec_label_pc_3cd18, label %dec_label_pc_3cd0b

dec_label_pc_3cd0b:                               ; preds = %dec_label_pc_3cce5
  %v2_3cd0b = load i64, i64* %stack_var_-40, align 8
  store i64 %v2_3cd0b, i64* @rbx, align 8
  store i64 %v0_3cc66, i64* %rbp.global-to-local, align 8
  store i64 %v0_3cc64, i64* %r12.global-to-local, align 8
  store i64 %v0_3cc62, i64* %r13.global-to-local, align 8
  store i64 %v0_3cc60, i64* %r14.global-to-local, align 8
  ret i64 %v0_3cd04

dec_label_pc_3cd18:                               ; preds = %dec_label_pc_3cce5
  store i64 249119, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_3cd21 = add i64 %v0_3cd21, 64
  %v2_3cd21 = inttoptr i64 %v1_3cd21 to i64*
  %v3_3cd21 = load i64, i64* %v2_3cd21, align 8
  store i64 %v3_3cd21, i64* %rbp.global-to-local, align 8
  ret i64 0
}

define i64 @function_3cd60() local_unnamed_addr {
dec_label_pc_3cd60:
  store i64 249191, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3cd69 = load i64, i64* @r12, align 8
  %v1_3cd6e = add i64 %v0_3cd69, 48
  %v2_3cd6e = inttoptr i64 %v1_3cd6e to i64*
  %v3_3cd6e = load i64, i64* %v2_3cd6e, align 8
  store i64 %v3_3cd6e, i64* @rbp, align 8
  ret i64 0
}

define i64 @function_3cdf9() local_unnamed_addr {
dec_label_pc_3cdf9:
  store i64 249344, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3ce34(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ce34:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib19DebugLib$getupvalue6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3ce40:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ce40 = load i64, i64* %r12.global-to-local, align 8
  %v0_3ce42 = load i64, i64* %rbp.global-to-local, align 8
  %v0_3ce43 = load i64, i64* @rbx, align 8
  %v2_3ce44 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_3ce44, i64* @rbx, align 8
  store i64 %v2_3ce44, i64* %r12.global-to-local, align 8
  store i64 249459, i64* %rsi.global-to-local, align 8
  store i64 1, i64* %rbp.global-to-local, align 8
  store i64 %v2_3ce44, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3ce83 = load i64, i64* inttoptr (i64 249482 to i64*), align 8
  store i64 %v0_3ce83, i64* @rax, align 8
  store i64 %v0_3ce43, i64* @rbx, align 8
  store i64 %v0_3ce42, i64* %rbp.global-to-local, align 8
  store i64 %v0_3ce40, i64* %r12.global-to-local, align 8
  ret i64 %v0_3ce83
}

define i64 @function_3cf3b() local_unnamed_addr {
dec_label_pc_3cf3b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3cf42() local_unnamed_addr {
dec_label_pc_3cf42:
  %rbp.global-to-local = alloca i64, align 8
  %v0_3cf42 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_3cf42, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3cf4b() local_unnamed_addr {
dec_label_pc_3cf4b:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @_ZN3org4luaj3vm29LoadState13loadConstantsEJvPNS1_9PrototypeE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3cf50:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3cf5d = load i64, i64* @rdi, align 8
  store i64 %v0_3cf5d, i64* @rbx, align 8
  store i64 %v0_3cf5d, i64* @rax, align 8
  %v4_3cf6a = trunc i64 %v0_3cf5d to i32
  %tmp245 = icmp slt i32 %v4_3cf6a, 1
  br i1 %tmp245, label %bb, label %dec_label_pc_3cf72

bb:                                               ; preds = %dec_label_pc_3cf50
  %v5_3cf6c = call i64 @function_3d190()
  store i64 %v5_3cf6c, i64* @rax, align 8
  br label %dec_label_pc_3cf72

dec_label_pc_3cf72:                               ; preds = %bb, %dec_label_pc_3cf50
  %v0_3cf7d = phi i64 [ %v5_3cf6c, %bb ], [ %v0_3cf5d, %dec_label_pc_3cf50 ]
  store i64 %v0_3cf7d, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3cfb0() local_unnamed_addr {
dec_label_pc_3cfb0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3cfdb(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3cfdb:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_3cfdb = trunc i64 %arg3 to i16
  %v2_3cfdb = call i32 @__asm_insd(i16 %v1_3cfdb)
  %v3_3cfdb = load i64, i64* @rdi, align 8
  %v4_3cfdb = inttoptr i64 %v3_3cfdb to i32*
  store i32 %v2_3cfdb, i32* %v4_3cfdb, align 4
  %v0_3cfdc = load i64, i64* @rax, align 8
  %v1_3cfdc = add i64 %v0_3cfdc, -119
  %v2_3cfdc = inttoptr i64 %v1_3cfdc to i8*
  %v3_3cfdc = load i8, i8* %v2_3cfdc, align 1
  %v4_3cfdc = load i64, i64* @rcx, align 8
  %v5_3cfdc = trunc i64 %v4_3cfdc to i8
  %v6_3cfdc = or i8 %v5_3cfdc, %v3_3cfdc
  store i8 %v6_3cfdc, i8* %v2_3cfdc, align 1
  %v0_3cfdf = load i64, i64* @rax, align 8
  ret i64 %v0_3cfdf
}

define i64 @function_3cfe2(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3cfe2:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3cfe2 = load i64, i64* @rdx, align 8
  %v0_3cfe5 = load i64, i64* @r13, align 8
  store i64 %v0_3cfe5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_3cff9 = load i64, i64* @r12, align 8
  %v2_3cff9 = inttoptr i64 %v1_3cff9 to i64*
  store i64 %v0_3cfe2, i64* %v2_3cff9, align 8
  %v3_3cff9 = load i64, i64* @rax, align 8
  ret i64 %v3_3cff9
}

define i64 @function_3cffd(i32 %arg1) local_unnamed_addr {
dec_label_pc_3cffd:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %v4_3cffd = load i64, i64* %rbp.global-to-local, align 8
  %v5_3cffd = trunc i64 %v4_3cffd to i32
  %v16_3cffd = icmp eq i32 %v5_3cffd, %arg1
  br i1 %v16_3cffd, label %bb, label %dec_label_pc_3cffd.dec_label_pc_3d007_crit_edge

dec_label_pc_3cffd.dec_label_pc_3d007_crit_edge:  ; preds = %dec_label_pc_3cffd
  %v0_3d015.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3d007

bb:                                               ; preds = %dec_label_pc_3cffd
  %v1_3d001 = load i64, i64* @rdi, align 8
  %v2_3d001 = load i64, i64* %rsi.global-to-local, align 8
  %v3_3d001 = load i64, i64* @rdx, align 8
  %v4_3d001 = call i64 @function_3d197(i64 %v1_3d001, i64 %v2_3d001, i64 %v3_3d001)
  store i64 %v4_3d001, i64* @rax, align 8
  %v0_3d00b.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_3d007

dec_label_pc_3d007:                               ; preds = %dec_label_pc_3cffd.dec_label_pc_3d007_crit_edge, %bb
  %v0_3d015 = phi i64 [ %v4_3d001, %bb ], [ %v0_3d015.pre, %dec_label_pc_3cffd.dec_label_pc_3d007_crit_edge ]
  %v0_3d00b = phi i64 [ %v0_3d00b.pre, %bb ], [ %v4_3cffd, %dec_label_pc_3cffd.dec_label_pc_3d007_crit_edge ]
  %v0_3d007 = load i64, i64* @rbx, align 8
  %v1_3d007 = add i64 %v0_3d007, 40
  %v2_3d007 = inttoptr i64 %v1_3d007 to i64*
  %v3_3d007 = load i64, i64* %v2_3d007, align 8
  store i64 %v3_3d007, i64* @rdi, align 8
  %v2_3d00b = add i64 %v0_3d00b, 1
  %v17_3d00b = and i64 %v2_3d00b, 4294967295
  store i64 %v17_3d00b, i64* %rbp.global-to-local, align 8
  ret i64 %v0_3d015
}

define i64 @function_3d017() local_unnamed_addr {
dec_label_pc_3d017:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3d050() local_unnamed_addr {
dec_label_pc_3d050:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_3d078(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3d078:
  %r13.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3d07b = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_3d07b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3d0ac(i64 %arg1) local_unnamed_addr {
dec_label_pc_3d0ac:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3d0ac = load i64, i64* @rbp, align 8
  %v1_3d0ac = trunc i64 %v0_3d0ac to i32
  %v2_3d0ac = load i64, i64* @r13, align 8
  %v3_3d0ac = add i64 %v2_3d0ac, 8
  %v4_3d0ac = inttoptr i64 %v3_3d0ac to i32*
  %v5_3d0ac = load i32, i32* %v4_3d0ac, align 4
  %v11_3d0ac = icmp ult i32 %v1_3d0ac, %v5_3d0ac
  br i1 %v11_3d0ac, label %bb, label %dec_label_pc_3d0ac.dec_label_pc_3d0b6_crit_edge

dec_label_pc_3d0ac.dec_label_pc_3d0b6_crit_edge:  ; preds = %dec_label_pc_3d0ac
  %v0_3d0b6.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3d0b6

bb:                                               ; preds = %dec_label_pc_3d0ac
  %v2_3d0b0 = load i64, i64* @rsi, align 8
  %v3_3d0b0 = load i64, i64* @rdx, align 8
  %v4_3d0b0 = call i64 @function_3cfe2(i64 %arg1, i64 %v2_3d0b0, i64 %v3_3d0b0)
  store i64 %v4_3d0b0, i64* @rax, align 8
  br label %dec_label_pc_3d0b6

dec_label_pc_3d0b6:                               ; preds = %dec_label_pc_3d0ac.dec_label_pc_3d0b6_crit_edge, %bb
  %v0_3d0b6 = phi i64 [ %v0_3d0b6.pre, %dec_label_pc_3d0ac.dec_label_pc_3d0b6_crit_edge ], [ %v4_3d0b0, %bb ]
  ret i64 %v0_3d0b6
}

define i64 @function_3d0c0() local_unnamed_addr {
dec_label_pc_3d0c0:
  %v2_3d0c0 = load i64, i64* @rbx, align 8
  %v4_3d0db = and i64 %v2_3d0c0, 4294967295
  store i64 %v4_3d0db, i64* @rax, align 8
  %v1_3d0df = add nuw nsw i64 %v4_3d0db, 256
  store i64 %v1_3d0df, i64* @rdi, align 8
  %v1_3d0e5 = trunc i64 %v1_3d0df to i32
  %v0_3d0ed = load i64, i64* inttoptr (i64 250100 to i64*), align 8
  store i64 %v0_3d0ed, i64* @rax, align 8
  %v3_3d0f4 = add i64 %v0_3d0ed, 8
  %v4_3d0f4 = inttoptr i64 %v3_3d0f4 to i32*
  %v5_3d0f4 = load i32, i32* %v4_3d0f4, align 4
  %v11_3d0f4 = icmp ult i32 %v1_3d0e5, %v5_3d0f4
  %v1_3d0f7 = add i64 %v0_3d0ed, 16
  store i64 %v1_3d0f7, i64* @rdx, align 8
  %v1_3d0fb = icmp eq i1 %v11_3d0f4, false
  br i1 %v1_3d0fb, label %bb, label %dec_label_pc_3d101

bb:                                               ; preds = %dec_label_pc_3d0c0
  %v2_3d0fb = call i64 @function_3d050()
  store i64 %v2_3d0fb, i64* @rax, align 8
  %v0_3d101.pre = load i64, i64* @rdi, align 8
  %v0_3d104.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_3d101

dec_label_pc_3d101:                               ; preds = %bb, %dec_label_pc_3d0c0
  %v0_3d104 = phi i64 [ %v0_3d104.pre, %bb ], [ %v1_3d0f7, %dec_label_pc_3d0c0 ]
  %v0_3d101 = phi i64 [ %v0_3d101.pre, %bb ], [ %v1_3d0df, %dec_label_pc_3d0c0 ]
  %v2_3d104 = mul i64 %v0_3d101, 8
  %v3_3d104 = add i64 %v2_3d104, %v0_3d104
  %v4_3d104 = inttoptr i64 %v3_3d104 to i64*
  %v5_3d104 = load i64, i64* %v4_3d104, align 8
  store i64 %v5_3d104, i64* @rdx, align 8
  %v1_3d108 = call i64 @function_3d0ac(i64 %v0_3d101)
  store i64 %v1_3d108, i64* @rax, align 8
  ret i64 %v1_3d108
}

define i64 @function_3d110() local_unnamed_addr {
dec_label_pc_3d110:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3d170(i8 %arg1) local_unnamed_addr {
dec_label_pc_3d170:
  %v10_3d170 = icmp eq i8 %arg1, 0
  br i1 %v10_3d170, label %bb, label %dec_label_pc_3d170.dec_label_pc_3d17b_crit_edge

dec_label_pc_3d170.dec_label_pc_3d17b_crit_edge:  ; preds = %dec_label_pc_3d170
  %v0_3d182.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3d17b

bb:                                               ; preds = %dec_label_pc_3d170
  %v1_3d175 = call i64 @function_3d240()
  store i64 %v1_3d175, i64* @rax, align 8
  br label %dec_label_pc_3d17b

dec_label_pc_3d17b:                               ; preds = %dec_label_pc_3d170.dec_label_pc_3d17b_crit_edge, %bb
  %v0_3d182 = phi i64 [ %v0_3d182.pre, %dec_label_pc_3d170.dec_label_pc_3d17b_crit_edge ], [ %v1_3d175, %bb ]
  %v0_3d17b = load i64, i64* inttoptr (i64 250242 to i64*), align 8
  store i64 %v0_3d17b, i64* @rdx, align 8
  ret i64 %v0_3d182
}

define i64 @function_3d190() local_unnamed_addr {
dec_label_pc_3d190:
  %v1_3d190 = load i64, i64* @rax, align 8
  ret i64 %v1_3d190
}

define i64 @function_3d197(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3d197:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_3d197 = load i64, i64* @rbx, align 8
  store i64 %v2_3d197, i64* @rax, align 8
  %v0_3d19a = load i64, i64* @r13, align 8
  %v1_3d19a = load i64, i64* @r15, align 8
  %v2_3d19a = add i64 %v1_3d19a, 8
  %v3_3d19a = inttoptr i64 %v2_3d19a to i64*
  store i64 %v0_3d19a, i64* %v3_3d19a, align 8
  %v0_3d19e = load i64, i64* @rbx, align 8
  store i64 %v0_3d19e, i64* @rdi, align 8
  %v0_3d1a4 = load i64, i64* @rax, align 8
  %v4_3d1a4 = trunc i64 %v0_3d1a4 to i32
  %tmp6 = icmp slt i32 %v4_3d1a4, 1
  br i1 %tmp6, label %bb, label %dec_label_pc_3d1b0

bb:                                               ; preds = %dec_label_pc_3d197
  %v5_3d1aa = call i64 @function_3d233()
  store i64 %v5_3d1aa, i64* @rax, align 8
  br label %dec_label_pc_3d1b0

dec_label_pc_3d1b0:                               ; preds = %bb, %dec_label_pc_3d197
  %v0_3d1b7 = phi i64 [ %v5_3d1aa, %bb ], [ %v0_3d1a4, %dec_label_pc_3d197 ]
  store i64 %v0_3d1b7, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbp, align 8
  ret i64 0
}

define i64 @function_3d209(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_3d209:
  %v0_3d209 = load i64, i64* @r12, align 8
  %v1_3d209 = load i64, i64* @r15, align 8
  %v2_3d209 = add i64 %v1_3d209, 24
  %v3_3d209 = inttoptr i64 %v2_3d209 to i64*
  store i64 %v0_3d209, i64* %v3_3d209, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* @r12, align 8
  %v0_3d21b = load i64, i64* @rax, align 8
  ret i64 %v0_3d21b
}

define i64 @function_3d220() local_unnamed_addr {
dec_label_pc_3d220:
  store i64 250407, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3d233() local_unnamed_addr {
dec_label_pc_3d233:
  %v0_3d233 = load i64, i64* inttoptr (i64 250426 to i64*), align 8
  store i64 %v0_3d233, i64* @r12, align 8
  %v6_3d23a = call i64 @function_3d209(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_3d23a, i64* @rax, align 8
  ret i64 %v6_3d23a
}

define i64 @function_3d240() local_unnamed_addr {
dec_label_pc_3d240:
  store i64 250439, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3d258() local_unnamed_addr {
dec_label_pc_3d258:
  store i64 250463, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i128 @"_ZN3org4luaj3vm23lib12MathLib$fmod4callEJPNS1_8LuaValueES5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3d270:
  %rsi.global-to-local = alloca i64, align 8
  %xmm0.global-to-local = alloca i128, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3d272 = load i64, i64* @rdx, align 8
  store i64 %v0_3d272, i64* @rbp, align 8
  %v0_3d275 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3d275, i64* @rbx, align 8
  store i64 %v0_3d275, i64* @rdi, align 8
  store i64 %v0_3d275, i64* @rax, align 8
  %v4_3d288 = trunc i64 %v0_3d275 to i8
  %v5_3d288 = icmp eq i8 %v4_3d288, 0
  br i1 %v5_3d288, label %dec_label_pc_3d2a1, label %dec_label_pc_3d28c

dec_label_pc_3d28c:                               ; preds = %dec_label_pc_3d270
  store i64 %v0_3d272, i64* @rax, align 8
  store i64 %v0_3d272, i64* @rdi, align 8
  %v4_3d299 = trunc i64 %v0_3d272 to i8
  %v5_3d299 = icmp eq i8 %v4_3d299, 0
  %v1_3d29b = icmp eq i1 %v5_3d299, false
  br i1 %v1_3d29b, label %bb, label %dec_label_pc_3d2a1

bb:                                               ; preds = %dec_label_pc_3d28c
  %v2_3d29b = call i64 @function_3d3d0()
  store i64 %v2_3d29b, i64* @rax, align 8
  %v2_3d2ad.pre = load i64, i64* @rdx, align 8
  %v0_3d2b1.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_3d2a1

dec_label_pc_3d2a1:                               ; preds = %bb, %dec_label_pc_3d28c, %dec_label_pc_3d270
  %v0_3d2b1 = phi i64 [ %v0_3d2b1.pre, %bb ], [ %v0_3d272, %dec_label_pc_3d28c ], [ %v0_3d272, %dec_label_pc_3d270 ]
  %v2_3d2ad = phi i64 [ %v2_3d2ad.pre, %bb ], [ %v0_3d272, %dec_label_pc_3d28c ], [ %v0_3d272, %dec_label_pc_3d270 ]
  store i64 %v2_3d2ad, i64* @rax, align 8
  store i64 %v0_3d2b1, i64* @rdi, align 8
  %v0_3d2b4 = load i128, i128* %xmm0.global-to-local, align 8
  %v1_3d2b4 = call i64 @__asm_movsd.7465(i128 %v0_3d2b4)
  %v4_3d2c0 = call i128 @__asm_movsd(i64 %v1_3d2b4)
  %v1_3d2c6 = call i128 @__asm_movapd(i128 %v0_3d2b4)
  %v1_3d2ca = call i128 @__asm_movapd(i128 %v4_3d2c0)
  store i128 %v1_3d2ca, i128* %xmm0.global-to-local, align 8
  ret i128 %v1_3d2ca
}

define i64 @function_3d350() local_unnamed_addr {
dec_label_pc_3d350:
  %cf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %v0_3d350 = load i64, i64* inttoptr (i64 250712 to i64*), align 8
  %v1_3d350 = call i128 @__asm_movsd(i64 %v0_3d350)
  %v1_3d358 = load i128, i128* %xmm0.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_3d350, i128 %v1_3d358)
  %v0_3d35c = load i1, i1* %cf.global-to-local, align 1
  %v1_3d35c = icmp eq i1 %v0_3d35c, false
  br i1 %v1_3d35c, label %bb, label %dec_label_pc_3d350.dec_label_pc_3d35e_crit_edge

dec_label_pc_3d350.dec_label_pc_3d35e_crit_edge:  ; preds = %dec_label_pc_3d350
  %v3_3d35c.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3d35e

bb:                                               ; preds = %dec_label_pc_3d350
  %v2_3d35c = call i64 @function_3d3c0()
  store i64 %v2_3d35c, i64* @rax, align 8
  br label %dec_label_pc_3d35e

dec_label_pc_3d35e:                               ; preds = %dec_label_pc_3d350.dec_label_pc_3d35e_crit_edge, %bb
  %v3_3d35c = phi i64 [ %v3_3d35c.pre, %dec_label_pc_3d350.dec_label_pc_3d35e_crit_edge ], [ %v2_3d35c, %bb ]
  ret i64 %v3_3d35c
}

define i64 @function_3d3c0() local_unnamed_addr {
dec_label_pc_3d3c0:
  %v0_3d3c5 = load i64, i64* @rax, align 8
  ret i64 %v0_3d3c5
}

define i64 @function_3d3d0() local_unnamed_addr {
dec_label_pc_3d3d0:
  %v2_3d3d0 = load i64, i64* @rbx, align 8
  %v2_3d3df = load i64, i64* @rbp, align 8
  store i64 %v2_3d3df, i64* @rcx, align 8
  store i64 250873, i64* @rdi, align 8
  %tmp = urem i64 %v2_3d3d0, %v2_3d3df
  store i64 %tmp, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 %tmp, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_3d420() local_unnamed_addr {
dec_label_pc_3d420:
  store i64 250919, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3d42e() local_unnamed_addr {
dec_label_pc_3d42e:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3d485() local_unnamed_addr {
dec_label_pc_3d485:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable3setEJviPNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3d490:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3d492 = load i64, i64* %r12.global-to-local, align 8
  %v0_3d494 = load i64, i64* @rdx, align 8
  store i64 %v0_3d494, i64* %r12.global-to-local, align 8
  %v0_3d497 = load i64, i64* %rbp.global-to-local, align 8
  %v0_3d498 = load i64, i64* @rbx, align 8
  %v0_3d499 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3d499, i64* %rbp.global-to-local, align 8
  %v0_3d49b = load i64, i64* @rdi, align 8
  store i64 %v0_3d49b, i64* @rbx, align 8
  %v1_3d4a2 = add i64 %v0_3d49b, 32
  %v2_3d4a2 = inttoptr i64 %v1_3d4a2 to i64*
  %v3_3d4a2 = load i64, i64* %v2_3d4a2, align 8
  %v10_3d4a2 = icmp eq i64 %v3_3d4a2, 0
  br i1 %v10_3d4a2, label %dec_label_pc_3d4c2, label %dec_label_pc_3d4a9

dec_label_pc_3d4a9:                               ; preds = %dec_label_pc_3d490
  store i64 %v0_3d49b, i64* @rax, align 8
  store i64 %v0_3d49b, i64* @rdx, align 8
  %v4_3d4be = trunc i64 %v0_3d49b to i8
  %v5_3d4be = icmp eq i8 %v4_3d4be, 0
  %v1_3d4c0 = icmp eq i1 %v5_3d4be, false
  br i1 %v1_3d4c0, label %dec_label_pc_3d4e0, label %dec_label_pc_3d4c2

dec_label_pc_3d4c2:                               ; preds = %dec_label_pc_3d4a9, %dec_label_pc_3d490
  store i64 %v0_3d49b, i64* @rax, align 8
  store i64 %v0_3d494, i64* @rdx, align 8
  store i64 %v0_3d498, i64* @rbx, align 8
  store i64 %v0_3d497, i64* %rbp.global-to-local, align 8
  store i64 %v0_3d492, i64* %r12.global-to-local, align 8
  ret i64 %v0_3d49b

dec_label_pc_3d4e0:                               ; preds = %dec_label_pc_3d4a9
  store i64 251111, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3d519(i64 %arg1) local_unnamed_addr {
dec_label_pc_3d519:
  %v0_3d519 = load i64, i64* @r12, align 8
  store i64 %v0_3d519, i64* @rdx, align 8
  %v0_3d51f = load i64, i64* @rbx, align 8
  store i64 %v0_3d51f, i64* @rdi, align 8
  %v0_3d527 = load i64, i64* @rax, align 8
  ret i64 %v0_3d527
}

define i64 @function_3d530(i64 %arg1) local_unnamed_addr {
dec_label_pc_3d530:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3d530 = load i64, i64* inttoptr (i64 251191 to i64*), align 8
  store i64 %v0_3d530, i64* @rax, align 8
  %v1_3d537 = trunc i64 %arg1 to i32
  %v3_3d537 = add i64 %v0_3d530, 8
  %v4_3d537 = inttoptr i64 %v3_3d537 to i32*
  %v5_3d537 = load i32, i32* %v4_3d537, align 4
  %v11_3d537 = icmp ult i32 %v1_3d537, %v5_3d537
  %v1_3d53a = add i64 %v0_3d530, 16
  store i64 %v1_3d53a, i64* @rdx, align 8
  %v1_3d53e = icmp eq i1 %v11_3d537, false
  br i1 %v1_3d53e, label %dec_label_pc_3d549, label %dec_label_pc_3d540

dec_label_pc_3d540:                               ; preds = %dec_label_pc_3d530
  %v2_3d543 = mul i64 %arg1, 8
  %v3_3d543 = add i64 %v1_3d53a, %v2_3d543
  %v4_3d543 = inttoptr i64 %v3_3d543 to i64*
  %v5_3d543 = load i64, i64* %v4_3d543, align 8
  store i64 %v5_3d543, i64* @r13, align 8
  %v1_3d547 = call i64 @function_3d519(i64 %arg1)
  store i64 %v1_3d547, i64* @rax, align 8
  ret i64 %v1_3d547

dec_label_pc_3d549:                               ; preds = %dec_label_pc_3d530
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$464callEJPN3org4luaj3vm28LuaValueES5_S5_S5_"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3d550:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 251234, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3d566 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3d566, i64* @rbx, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$738onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3d9a0:
  %r15.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3d9aa = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3d9aa, i64* @rbx, align 8
  %v0_3d9ad = load i64, i64* @rdi, align 8
  store i64 %v0_3d9ad, i64* @rbp, align 8
  store i64 %v0_3d9aa, i64* %r15.global-to-local, align 8
  store i64 1, i64* @r12, align 8
  store i64 2, i64* @r13, align 8
  store i64 3, i64* @r14, align 8
  store i64 4, i64* @rax, align 8
  store i64 5, i64* %rsi.global-to-local, align 8
  store i64 %v0_3d9aa, i64* @rdi, align 8
  %v1_3da09 = add i64 %v0_3d9ad, 24
  %v2_3da09 = inttoptr i64 %v1_3da09 to i64*
  %v3_3da09 = load i64, i64* %v2_3da09, align 8
  store i64 %v3_3da09, i64* @rax, align 8
  %v1_3da0d = add i64 %v3_3da09, 8
  %v2_3da0d = inttoptr i64 %v1_3da0d to i32*
  %v3_3da0d = load i32, i32* %v2_3da0d, align 4
  %v4_3da0d = zext i32 %v3_3da0d to i64
  store i64 %v4_3da0d, i64* %rsi.global-to-local, align 8
  %v5_3da10 = icmp eq i32 %v3_3da0d, 0
  br i1 %v5_3da10, label %bb, label %dec_label_pc_3da18

bb:                                               ; preds = %dec_label_pc_3d9a0
  %v2_3da12 = call i64 @function_3dc82(i64 %v0_3d9aa)
  store i64 %v2_3da12, i64* @rax, align 8
  %v0_3da1c.pre = load i64, i64* %r15.global-to-local, align 8
  %v0_3da28.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_3da18

dec_label_pc_3da18:                               ; preds = %bb, %dec_label_pc_3d9a0
  %v0_3da28 = phi i64 [ %v0_3da28.pre, %bb ], [ %v0_3d9ad, %dec_label_pc_3d9a0 ]
  %v0_3da1c = phi i64 [ %v0_3da1c.pre, %bb ], [ %v0_3d9aa, %dec_label_pc_3d9a0 ]
  %v0_3da18 = phi i64 [ %v2_3da12, %bb ], [ %v3_3da09, %dec_label_pc_3d9a0 ]
  %v1_3da18 = add i64 %v0_3da18, 16
  %v2_3da18 = inttoptr i64 %v1_3da18 to i64*
  %v3_3da18 = load i64, i64* %v2_3da18, align 8
  store i64 %v3_3da18, i64* @rdi, align 8
  store i64 %v0_3da1c, i64* %rsi.global-to-local, align 8
  %v1_3da1f = inttoptr i64 %v3_3da18 to i64*
  %v2_3da1f = load i64, i64* %v1_3da1f, align 8
  store i64 %v2_3da1f, i64* @rax, align 8
  %v1_3da28 = add i64 %v0_3da28, 32
  %v2_3da28 = inttoptr i64 %v1_3da28 to i64*
  %v3_3da28 = load i64, i64* %v2_3da28, align 8
  store i64 %v3_3da28, i64* @rdi, align 8
  store i64 %v2_3da1f, i64* @r15, align 8
  store i64 %v2_3da1f, i64* %rsi.global-to-local, align 8
  %v1_3da32 = inttoptr i64 %v3_3da28 to i64*
  %v2_3da32 = load i64, i64* %v1_3da32, align 8
  store i64 %v2_3da32, i64* @rax, align 8
  %v1_3da3b = inttoptr i64 %v2_3da32 to i64*
  %v2_3da3b = load i64, i64* %v1_3da3b, align 8
  store i64 %v2_3da3b, i64* @rdx, align 8
  store i64 %v2_3da32, i64* @rdi, align 8
  %v4_3da47 = trunc i64 %v2_3da32 to i8
  %v5_3da47 = icmp eq i8 %v4_3da47, 0
  br i1 %v5_3da47, label %bb250, label %dec_label_pc_3da4f

bb250:                                            ; preds = %dec_label_pc_3da18
  %v7_3da49 = call i64 @function_3db70(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_3da49, i64* @rax, align 8
  %v0_3da4f.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_3da4f

dec_label_pc_3da4f:                               ; preds = %bb250, %dec_label_pc_3da18
  %v0_3da4f = phi i64 [ %v0_3da4f.pre, %bb250 ], [ %v0_3da28, %dec_label_pc_3da18 ]
  %v1_3da4f = add i64 %v0_3da4f, 48
  %v2_3da4f = inttoptr i64 %v1_3da4f to i64*
  %v3_3da4f = load i64, i64* %v2_3da4f, align 8
  store i64 %v3_3da4f, i64* @rax, align 8
  %v1_3da57 = add i64 %v3_3da4f, 8
  %v2_3da57 = inttoptr i64 %v1_3da57 to i32*
  %v3_3da57 = load i32, i32* %v2_3da57, align 4
  %v4_3da57 = zext i32 %v3_3da57 to i64
  store i64 %v4_3da57, i64* @rcx, align 8
  %v5_3da5a = icmp eq i32 %v3_3da57, 0
  br i1 %v5_3da5a, label %bb251, label %dec_label_pc_3da62

bb251:                                            ; preds = %dec_label_pc_3da4f
  %v2_3da5c = call i64 @function_3dc82(i64 %v2_3da32)
  store i64 %v2_3da5c, i64* @rax, align 8
  br label %dec_label_pc_3da62

dec_label_pc_3da62:                               ; preds = %bb251, %dec_label_pc_3da4f
  store i64 252539, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3db40() local_unnamed_addr {
dec_label_pc_3db40:
  store i64 252743, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3db70(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_3db70:
  %v0_3db70 = load i64, i64* @rbp, align 8
  %v1_3db70 = add i64 %v0_3db70, 56
  %v2_3db70 = inttoptr i64 %v1_3db70 to i64*
  %v3_3db70 = load i64, i64* %v2_3db70, align 8
  store i64 %v3_3db70, i64* @rdi, align 8
  %v1_3db77 = inttoptr i64 %v3_3db70 to i64*
  %v2_3db77 = load i64, i64* %v1_3db77, align 8
  store i64 %v2_3db77, i64* @rax, align 8
  %v1_3db80 = inttoptr i64 %v2_3db77 to i64*
  %v2_3db80 = load i64, i64* %v1_3db80, align 8
  store i64 %v2_3db80, i64* @rdx, align 8
  store i64 %v2_3db77, i64* @rdi, align 8
  %v4_3db8c = trunc i64 %v2_3db77 to i8
  %v5_3db8c = icmp eq i8 %v4_3db8c, 0
  br i1 %v5_3db8c, label %dec_label_pc_3dc70, label %dec_label_pc_3db94

dec_label_pc_3db94:                               ; preds = %dec_label_pc_3db70
  %v1_3db94 = add i64 %v0_3db70, 64
  %v2_3db94 = inttoptr i64 %v1_3db94 to i64*
  %v3_3db94 = load i64, i64* %v2_3db94, align 8
  store i64 %v3_3db94, i64* @rax, align 8
  %v1_3db98 = add i64 %v3_3db94, 8
  %v2_3db98 = inttoptr i64 %v1_3db98 to i32*
  %v3_3db98 = load i32, i32* %v2_3db98, align 4
  %v4_3db98 = zext i32 %v3_3db98 to i64
  store i64 %v4_3db98, i64* @rdx, align 8
  %v5_3db9b = icmp eq i32 %v3_3db98, 0
  br i1 %v5_3db9b, label %bb, label %dec_label_pc_3dba3

bb:                                               ; preds = %dec_label_pc_3db94
  %v2_3db9d = call i64 @function_3dc82(i64 %v2_3db77)
  store i64 %v2_3db9d, i64* @rax, align 8
  %v0_3dba3.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_3dba3

dec_label_pc_3dba3:                               ; preds = %bb, %dec_label_pc_3db94
  %v0_3dba7 = phi i64 [ %v2_3db9d, %bb ], [ %v3_3db94, %dec_label_pc_3db94 ]
  %v0_3dc39 = phi i64 [ %v0_3dba3.pre, %bb ], [ %v0_3db70, %dec_label_pc_3db94 ]
  %v1_3dba3 = add i64 %v0_3dc39, 72
  %v2_3dba3 = inttoptr i64 %v1_3dba3 to i64*
  %v3_3dba3 = load i64, i64* %v2_3dba3, align 8
  store i64 %v3_3dba3, i64* @rdi, align 8
  %v1_3dba7 = add i64 %v0_3dba7, 16
  %v2_3dba7 = inttoptr i64 %v1_3dba7 to i64*
  %v3_3dba7 = load i64, i64* %v2_3dba7, align 8
  store i64 %v3_3dba7, i64* @rbx, align 8
  %v1_3dbae = inttoptr i64 %v3_3dba3 to i64*
  %v2_3dbae = load i64, i64* %v1_3dbae, align 8
  store i64 %v2_3dbae, i64* @rax, align 8
  %v1_3dbb7 = inttoptr i64 %v2_3dbae to i64*
  %v2_3dbb7 = load i64, i64* %v1_3dbb7, align 8
  store i64 %v2_3dbb7, i64* @rdx, align 8
  store i64 %v2_3dbae, i64* @rdi, align 8
  %v1_3dbc8 = inttoptr i64 %v3_3dba7 to i64*
  %v2_3dbc8 = load i64, i64* %v1_3dbc8, align 8
  store i64 %v2_3dbc8, i64* @rdx, align 8
  store i64 %v3_3dba7, i64* @rdi, align 8
  %v2_3dbd7 = load i64, i64* %v1_3dbb7, align 8
  store i64 %v2_3dbd7, i64* @rdx, align 8
  store i64 %v2_3dbae, i64* @rdi, align 8
  %v1_3dbe0 = add i64 %v0_3dc39, 80
  %v2_3dbe0 = inttoptr i64 %v1_3dbe0 to i64*
  %v3_3dbe0 = load i64, i64* %v2_3dbe0, align 8
  store i64 %v3_3dbe0, i64* @rdi, align 8
  store i64 %v2_3dbae, i64* @rbx, align 8
  %v1_3dbea = inttoptr i64 %v3_3dbe0 to i64*
  %v2_3dbea = load i64, i64* %v1_3dbea, align 8
  store i64 %v2_3dbea, i64* @rdi, align 8
  store i64 %v2_3dbea, i64* @rdx, align 8
  %v0_3dc01 = load i64, i64* @r14, align 8
  store i64 %v0_3dc01, i64* @rax, align 8
  %v1_3dc0c = add i64 %v0_3dc39, 88
  %v2_3dc0c = inttoptr i64 %v1_3dc0c to i64*
  %v3_3dc0c = load i64, i64* %v2_3dc0c, align 8
  store i64 %v3_3dc0c, i64* @rdi, align 8
  %v1_3dc10 = add i64 %v0_3dc39, 96
  %v2_3dc10 = inttoptr i64 %v1_3dc10 to i64*
  %v3_3dc10 = load i64, i64* %v2_3dc10, align 8
  store i64 %v3_3dc10, i64* @rdx, align 8
  %v1_3dc17 = inttoptr i64 %v3_3dc0c to i64*
  %v2_3dc17 = load i64, i64* %v1_3dc17, align 8
  store i64 %v2_3dc17, i64* @rdi, align 8
  store i64 %v2_3dc17, i64* @rdx, align 8
  %v0_3dc2e = load i64, i64* @r12, align 8
  store i64 %v0_3dc2e, i64* @rax, align 8
  %v3_3dc39 = load i64, i64* %v2_3dc0c, align 8
  store i64 %v3_3dc39, i64* @rdi, align 8
  %v1_3dc3d = add i64 %v0_3dc39, 104
  %v2_3dc3d = inttoptr i64 %v1_3dc3d to i64*
  %v3_3dc3d = load i64, i64* %v2_3dc3d, align 8
  store i64 %v3_3dc3d, i64* @rdx, align 8
  %v1_3dc44 = inttoptr i64 %v3_3dc39 to i64*
  %v2_3dc44 = load i64, i64* %v1_3dc44, align 8
  store i64 %v2_3dc44, i64* @rax, align 8
  %v1_3dc4d = inttoptr i64 %v2_3dc44 to i64*
  %v2_3dc4d = load i64, i64* %v1_3dc4d, align 8
  store i64 %v2_3dc4d, i64* @rdx, align 8
  store i64 %v2_3dc44, i64* @rdi, align 8
  %v4_3dc59 = trunc i64 %v2_3dc44 to i8
  %v5_3dc59 = icmp eq i8 %v4_3dc59, 0
  %v1_3dc5e = icmp eq i1 %v5_3dc59, false
  %v3_3dc5e = load i64, i64* @r13, align 8
  %v4_3dc5e = select i1 %v1_3dc5e, i64 %v3_3dc5e, i64 %v0_3dc01
  store i64 %v4_3dc5e, i64* @rax, align 8
  ret i64 %v4_3dc5e

dec_label_pc_3dc70:                               ; preds = %dec_label_pc_3db70
  %v0_3dc70 = load i64, i64* @r14, align 8
  store i64 %v0_3dc70, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  ret i64 %v0_3dc70
}

define i64 @function_3dc82(i64 %arg1) local_unnamed_addr {
dec_label_pc_3dc82:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm29WeakTable4wrapEJPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3dc90:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3dc93 = load i64, i64* @rbx, align 8
  %v0_3dc94 = load i64, i64* @rdi, align 8
  %v1_3dc94 = add i64 %v0_3dc94, 9
  %v2_3dc94 = inttoptr i64 %v1_3dc94 to i8*
  %v3_3dc94 = load i8, i8* %v2_3dc94, align 1
  %v10_3dc94 = icmp eq i8 %v3_3dc94, 0
  %v0_3dc98 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_3dc98, i64* @rbx, align 8
  %v1_3dc9b = icmp eq i1 %v10_3dc94, false
  br i1 %v1_3dc9b, label %dec_label_pc_3dca8, label %dec_label_pc_3dc9d

dec_label_pc_3dc9d:                               ; preds = %dec_label_pc_3dc90
  store i64 %v0_3dc98, i64* @rax, align 8
  store i64 %v0_3dc93, i64* @rbx, align 8
  ret i64 %v0_3dc98

dec_label_pc_3dca8:                               ; preds = %dec_label_pc_3dc90
  store i64 253103, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3dd30() local_unnamed_addr {
dec_label_pc_3dd30:
  store i64 253239, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState5add_sEJvPNS1_6BufferEPNS1_9LuaStringEii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_3ddb0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3ddbd = load i64, i64* @rdx, align 8
  store i64 %v0_3ddbd, i64* @rbx, align 8
  store i64 %v0_3ddbd, i64* @rax, align 8
  store i64 %v0_3ddbd, i64* @rdi, align 8
  %v4_3ddde = trunc i64 %v0_3ddbd to i32
  %tmp251 = icmp slt i32 %v4_3ddde, 1
  br i1 %tmp251, label %bb, label %dec_label_pc_3dde6

bb:                                               ; preds = %dec_label_pc_3ddb0
  %v11_3dde0 = call i64 @function_3e0b2(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_3dde0, i64* @rax, align 8
  br label %dec_label_pc_3dde6

dec_label_pc_3dde6:                               ; preds = %bb, %dec_label_pc_3ddb0
  %v0_3ddeb = phi i64 [ %v11_3dde0, %bb ], [ %v0_3ddbd, %dec_label_pc_3ddb0 ]
  ret i64 %v0_3ddeb
}

define i64 @function_3df20(i64 %arg1) local_unnamed_addr {
dec_label_pc_3df20:
  %r14.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3df20 = load i64, i64* %r14.global-to-local, align 8
  %v1_3df20 = add i64 %v0_3df20, 1
  store i64 %v1_3df20, i64* @r12, align 8
  %v0_3df24 = load i64, i64* @rbp, align 8
  %v8_3df27 = icmp sgt i64 %v0_3df24, %v1_3df20
  br i1 %v8_3df27, label %bb, label %dec_label_pc_3df20.dec_label_pc_3df2d_crit_edge

dec_label_pc_3df20.dec_label_pc_3df2d_crit_edge:  ; preds = %dec_label_pc_3df20
  %v0_3df34.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3df2d

bb:                                               ; preds = %dec_label_pc_3df20
  %v9_3df27 = call i64 @function_3e0c8()
  store i64 %v9_3df27, i64* @rax, align 8
  br label %dec_label_pc_3df2d

dec_label_pc_3df2d:                               ; preds = %dec_label_pc_3df20.dec_label_pc_3df2d_crit_edge, %bb
  %v0_3df34 = phi i64 [ %v0_3df34.pre, %dec_label_pc_3df20.dec_label_pc_3df2d_crit_edge ], [ %v9_3df27, %bb ]
  store i64 0, i64* @rdi, align 8
  %v4_3df34 = trunc i64 %v0_3df34 to i8
  %v5_3df34 = icmp eq i8 %v4_3df34, 0
  %v1_3df36 = icmp eq i1 %v5_3df34, false
  br i1 %v1_3df36, label %bb241, label %dec_label_pc_3df38

bb241:                                            ; preds = %dec_label_pc_3df2d
  %v3_3df36 = call i64 @function_3df90(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_3df36, i64* @rax, align 8
  br label %dec_label_pc_3df38

dec_label_pc_3df38:                               ; preds = %bb241, %dec_label_pc_3df2d
  %v4_3df36 = phi i64 [ %v3_3df36, %bb241 ], [ %v0_3df34, %dec_label_pc_3df2d ]
  ret i64 %v4_3df36
}

define i64 @function_3df5d() local_unnamed_addr {
dec_label_pc_3df5d:
  %v0_3df5d = load i64, i64* @rbx, align 8
  %v1_3df5d = icmp eq i64 %v0_3df5d, 0
  br i1 %v1_3df5d, label %bb, label %dec_label_pc_3df5d.dec_label_pc_3df66_crit_edge

dec_label_pc_3df5d.dec_label_pc_3df66_crit_edge:  ; preds = %dec_label_pc_3df5d
  %v1_3df66.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3df66

bb:                                               ; preds = %dec_label_pc_3df5d
  %v1_3df60 = call i64 @function_3e462()
  store i64 %v1_3df60, i64* @rax, align 8
  %v0_3df66.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3df66

dec_label_pc_3df66:                               ; preds = %dec_label_pc_3df5d.dec_label_pc_3df66_crit_edge, %bb
  %v1_3df66 = phi i64 [ %v1_3df60, %bb ], [ %v1_3df66.pre, %dec_label_pc_3df5d.dec_label_pc_3df66_crit_edge ]
  %v0_3df66 = phi i64 [ %v0_3df66.pre, %bb ], [ %v0_3df5d, %dec_label_pc_3df5d.dec_label_pc_3df66_crit_edge ]
  store i64 %v0_3df66, i64* @rdi, align 8
  ret i64 %v1_3df66
}

define i64 @function_3df90(i64 %arg1) local_unnamed_addr {
dec_label_pc_3df90:
  %r8.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_3df95 = add i64 %arg1, 32
  %v2_3df95 = inttoptr i64 %v1_3df95 to i32*
  %v3_3df95 = load i32, i32* %v2_3df95, align 4
  %v5_3df99 = icmp slt i32 %v3_3df95, -48
  br i1 %v5_3df99, label %bb, label %dec_label_pc_3df9f

bb:                                               ; preds = %dec_label_pc_3df90
  %v6_3df99 = call i64 @function_3e48c()
  store i64 %v6_3df99, i64* @rax, align 8
  br label %dec_label_pc_3df9f

dec_label_pc_3df9f:                               ; preds = %bb, %dec_label_pc_3df90
  store i64 4294967247, i64* @rax, align 8
  store i64 4294967247, i64* @rdi, align 8
  store i64 %arg1, i64* @rdx, align 8
  %v1_3dfab = add i64 %arg1, 48
  %v2_3dfab = inttoptr i64 %v1_3dfab to i64*
  %v3_3dfab = load i64, i64* %v2_3dfab, align 8
  store i64 %v3_3dfab, i64* @rdx, align 8
  %v1_3dfaf = add i64 %v3_3dfab, 8
  %v2_3dfaf = inttoptr i64 %v1_3dfaf to i32*
  %v3_3dfaf = load i32, i32* %v2_3dfaf, align 4
  %tmp24 = icmp ult i32 %v3_3dfaf, -48
  br i1 %tmp24, label %bb18, label %dec_label_pc_3dfb8

bb18:                                             ; preds = %dec_label_pc_3df9f
  %v3_3dfb2 = call i64 @function_3e479()
  store i64 %v3_3dfb2, i64* @rax, align 8
  %v0_3dfbb.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_3dfb8

dec_label_pc_3dfb8:                               ; preds = %bb18, %dec_label_pc_3df9f
  %v4_3dfda5 = phi i64 [ %v3_3dfb2, %bb18 ], [ 4294967247, %dec_label_pc_3df9f ]
  %v0_3dfbb = phi i64 [ %v0_3dfbb.pre, %bb18 ], [ %v3_3dfab, %dec_label_pc_3df9f ]
  store i64 4294967247, i64* @rcx, align 8
  %v4_3dfbb = add i64 %v0_3dfbb, 17179869000
  %v5_3dfbb = inttoptr i64 %v4_3dfbb to i32*
  %v6_3dfbb = load i32, i32* %v5_3dfbb, align 4
  %v7_3dfbb = zext i32 %v6_3dfbb to i64
  store i64 %v7_3dfbb, i64* @rdx, align 8
  %v12_3dfbf = icmp eq i32 %v6_3dfbb, -1
  br i1 %v12_3dfbf, label %bb19, label %dec_label_pc_3dfc8

bb19:                                             ; preds = %dec_label_pc_3dfb8
  %v1_3dfc2 = call i64 @function_3e480()
  store i64 %v1_3dfc2, i64* @rax, align 8
  br label %dec_label_pc_3dfc8

dec_label_pc_3dfc8:                               ; preds = %bb19, %dec_label_pc_3dfb8
  %v4_3dfda4 = phi i64 [ %v1_3dfc2, %bb19 ], [ %v4_3dfda5, %dec_label_pc_3dfb8 ]
  %v12_3dfc8 = icmp eq i32 %v6_3dfbb, -2
  br i1 %v12_3dfc8, label %bb20, label %dec_label_pc_3dfd1

bb20:                                             ; preds = %dec_label_pc_3dfc8
  %v2_3dfcb = load i64, i64* @rsi, align 8
  %v4_3dfcb = sext i32 %v6_3dfbb to i64
  %v7_3dfcb = call i64 @function_3e320(i64 4294967247, i64 %v2_3dfcb, i64 %v4_3dfcb, i64 4294967247, i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_3dfcb, i64* @rax, align 8
  br label %dec_label_pc_3dfd1

dec_label_pc_3dfd1:                               ; preds = %bb20, %dec_label_pc_3dfc8
  %v4_3dfda = phi i64 [ %v7_3dfcb, %bb20 ], [ %v4_3dfda4, %dec_label_pc_3dfc8 ]
  store i64 %arg1, i64* %rsi.global-to-local, align 8
  %v1_3dfd6 = add i64 %arg1, 40
  %v2_3dfd6 = inttoptr i64 %v1_3dfd6 to i64*
  %v3_3dfd6 = load i64, i64* %v2_3dfd6, align 8
  store i64 %v3_3dfd6, i64* %rsi.global-to-local, align 8
  %v1_3dfda = add i64 %v3_3dfd6, 8
  %v2_3dfda = inttoptr i64 %v1_3dfda to i32*
  %v3_3dfda = load i32, i32* %v2_3dfda, align 4
  %v5_3dfda = trunc i64 %v4_3dfda to i32
  %v1_3dfdd = add i64 %v3_3dfd6, 12
  store i64 %v1_3dfdd, i64* %r8.global-to-local, align 8
  %tmp25 = icmp ugt i32 %v3_3dfda, %v5_3dfda
  br i1 %tmp25, label %dec_label_pc_3dfe7, label %bb21

bb21:                                             ; preds = %dec_label_pc_3dfd1
  %v3_3dfe1 = call i64 @function_3e479()
  store i64 %v3_3dfe1, i64* @rax, align 8
  %v0_3dfec.pre = load i64, i64* %r8.global-to-local, align 8
  br label %dec_label_pc_3dfe7

dec_label_pc_3dfe7:                               ; preds = %dec_label_pc_3dfd1, %bb21
  %v0_3dfec = phi i64 [ %v0_3dfec.pre, %bb21 ], [ %v1_3dfdd, %dec_label_pc_3dfd1 ]
  store i64 %arg1, i64* @rax, align 8
  %v3_3dfec = add i64 %v0_3dfec, 17179868988
  %v4_3dfec = inttoptr i64 %v3_3dfec to i32*
  %v5_3dfec = load i32, i32* %v4_3dfec, align 4
  %v6_3dfec = zext i32 %v5_3dfec to i64
  store i64 %v6_3dfec, i64* @rsi, align 8
  %v1_3dff0 = add i64 %arg1, 8
  %v2_3dff0 = inttoptr i64 %v1_3dff0 to i64*
  %v3_3dff0 = load i64, i64* %v2_3dff0, align 8
  store i64 %v3_3dff0, i64* @rdi, align 8
  %v5_3dff4 = add i32 %v5_3dfec, %v6_3dfbb
  %v21_3dff4 = zext i32 %v5_3dff4 to i64
  store i64 %v21_3dff4, i64* @rdx, align 8
  %v1_3dff6 = inttoptr i64 %v3_3dff0 to i64*
  %v2_3dff6 = load i64, i64* %v1_3dff6, align 8
  store i64 %v2_3dff6, i64* @rax, align 8
  store i64 %v2_3dff6, i64* @rdi, align 8
  %v1_3e002 = inttoptr i64 %v2_3dff6 to i64*
  %v2_3e002 = load i64, i64* %v1_3e002, align 8
  store i64 %v2_3e002, i64* @rax, align 8
  %v0_3e00b = load i64, i64* @r15, align 8
  %v1_3e00b = icmp eq i64 %v0_3e00b, 0
  store i64 %v2_3e002, i64* @r14, align 8
  br i1 %v1_3e00b, label %bb22, label %dec_label_pc_3e017

bb22:                                             ; preds = %dec_label_pc_3dfe7
  %v1_3e011 = call i64 @function_3e462()
  store i64 %v1_3e011, i64* @rax, align 8
  %v0_3e017.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_3e017

dec_label_pc_3e017:                               ; preds = %bb22, %dec_label_pc_3dfe7
  %v0_3e01b = phi i64 [ %v1_3e011, %bb22 ], [ %v2_3e002, %dec_label_pc_3dfe7 ]
  %v0_3e017 = phi i64 [ %v0_3e017.pre, %bb22 ], [ %v0_3e00b, %dec_label_pc_3dfe7 ]
  %v1_3e017 = add i64 %v0_3e017, 24
  %v2_3e017 = inttoptr i64 %v1_3e017 to i64*
  %v3_3e017 = load i64, i64* %v2_3e017, align 8
  store i64 %v3_3e017, i64* @rdi, align 8
  %v1_3e01b = add i64 %v0_3e01b, 20
  %v2_3e01b = inttoptr i64 %v1_3e01b to i32*
  %v3_3e01b = load i32, i32* %v2_3e01b, align 4
  %v4_3e01b = zext i32 %v3_3e01b to i64
  store i64 %v4_3e01b, i64* @r13, align 8
  %v1_3e01f = icmp eq i64 %v3_3e017, 0
  br i1 %v1_3e01f, label %bb23, label %dec_label_pc_3e028

bb23:                                             ; preds = %dec_label_pc_3e017
  %v1_3e022 = call i64 @function_3e218()
  store i64 %v1_3e022, i64* @rax, align 8
  %v0_3e040.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_3e028

dec_label_pc_3e028:                               ; preds = %bb23, %dec_label_pc_3e017
  %v0_3e040 = phi i64 [ %v0_3e040.pre, %bb23 ], [ %v0_3e017, %dec_label_pc_3e017 ]
  %v1_3e028 = inttoptr i64 %v3_3e017 to i64*
  %v2_3e028 = load i64, i64* %v1_3e028, align 8
  store i64 %v2_3e028, i64* @rax, align 8
  %v1_3e031 = add i64 %v2_3e028, 20
  %v2_3e031 = inttoptr i64 %v1_3e031 to i32*
  %v3_3e031 = load i32, i32* %v2_3e031, align 4
  %v4_3e031 = zext i32 %v3_3e031 to i64
  store i64 %v4_3e031, i64* %rsi.global-to-local, align 8
  store i64 254011, i64* @rdi, align 8
  %v1_3e040 = add i64 %v0_3e040, 24
  %v2_3e040 = inttoptr i64 %v1_3e040 to i64*
  store i64 0, i64* %v2_3e040, align 8
  %v0_3e048 = load i64, i64* @r15, align 8
  %v1_3e048 = add i64 %v0_3e048, 20
  %v2_3e048 = inttoptr i64 %v1_3e048 to i32*
  store i32 0, i32* %v2_3e048, align 4
  store i64 0, i64* @rax, align 8
  %v0_3e052 = load i64, i64* %rsi.global-to-local, align 8
  %v1_3e052 = trunc i64 %v0_3e052 to i32
  %v2_3e052 = load i64, i64* @r15, align 8
  %v3_3e052 = add i64 %v2_3e052, 16
  %v4_3e052 = inttoptr i64 %v3_3e052 to i32*
  store i32 %v1_3e052, i32* %v4_3e052, align 4
  %v0_3e056 = load i64, i64* %rsi.global-to-local, align 8
  %v2_3e056 = load i64, i64* @r13, align 8
  %v4_3e056 = add i64 %v2_3e056, %v0_3e056
  %v20_3e056 = and i64 %v4_3e056, 4294967295
  store i64 %v20_3e056, i64* %rsi.global-to-local, align 8
  %v21_3e056 = load i64, i64* @rax, align 8
  ret i64 %v21_3e056
}

define i64 @function_3e08a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3e08a:
  store i64 %arg3, i64* @rdx, align 8
  %v2_3e08a = load i64, i64* @r14, align 8
  %v4_3e08d = add i64 %arg4, %arg1
  %v20_3e08d = and i64 %v4_3e08d, 4294967295
  store i64 %v20_3e08d, i64* @rcx, align 8
  store i64 %v2_3e08a, i64* @rdi, align 8
  %v0_3e092 = load i64, i64* @r12, align 8
  %v0_3e097 = load i64, i64* @r13, align 8
  store i64 %v0_3e097, i64* @r8, align 8
  %v2_3e09a = add i64 %v0_3e092, 1
  %v17_3e09a = and i64 %v2_3e09a, 4294967295
  store i64 %v17_3e09a, i64* @r14, align 8
  %v0_3e0a5 = load i64, i64* @r15, align 8
  %v1_3e0a5 = add i64 %v0_3e0a5, 16
  %v2_3e0a5 = inttoptr i64 %v1_3e0a5 to i32*
  %v3_3e0a5 = load i32, i32* %v2_3e0a5, align 4
  %v5_3e0a5 = trunc i64 %v0_3e097 to i32
  %v6_3e0a5 = add i32 %v3_3e0a5, %v5_3e0a5
  store i32 %v6_3e0a5, i32* %v2_3e0a5, align 4
  %v0_3e0ac = load i64, i64* @rax, align 8
  ret i64 %v0_3e0ac
}

define i64 @function_3e0b2(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_3e0b2:
  store i64 %arg1, i64* @rbx, align 8
  %v0_3e0c0 = load i64, i64* @rax, align 8
  ret i64 %v0_3e0c0
}

define i64 @function_3e0c8() local_unnamed_addr {
dec_label_pc_3e0c8:
  %v2_3e0c8 = load i64, i64* @rbx, align 8
  %v0_3e0cb = load i64, i64* @r12, align 8
  store i64 %v0_3e0cb, i64* @rsi, align 8
  store i64 %v2_3e0c8, i64* @rax, align 8
  store i64 %v2_3e0c8, i64* @rdi, align 8
  ret i64 %v2_3e0c8
}

define i64 @function_3e16f(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3e16f:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_3e16f = trunc i64 %arg4 to i32
  %v3_3e16f = trunc i64 %arg1 to i32
  %v4_3e16f = add i32 %v1_3e16f, %v3_3e16f
  %v20_3e16f = zext i32 %v4_3e16f to i64
  store i64 %v20_3e16f, i64* @rcx, align 8
  %v3_3e171 = add i64 %arg3, 8
  %v4_3e171 = inttoptr i64 %v3_3e171 to i32*
  %v5_3e171 = load i32, i32* %v4_3e171, align 4
  %v11_3e171 = icmp ult i32 %v4_3e16f, %v5_3e171
  %v1_3e174 = add i64 %arg1, 1
  store i64 %v1_3e174, i64* @rax, align 8
  %v1_3e177 = trunc i64 %v1_3e174 to i32
  %v2_3e177 = load i64, i64* @r15, align 8
  %v3_3e177 = add i64 %v2_3e177, 16
  %v4_3e177 = inttoptr i64 %v3_3e177 to i32*
  store i32 %v1_3e177, i32* %v4_3e177, align 4
  %v1_3e17b = icmp eq i1 %v11_3e171, false
  br i1 %v1_3e17b, label %bb, label %dec_label_pc_3e181

bb:                                               ; preds = %dec_label_pc_3e16f
  %v6_3e17b = call i64 @function_3e469(i64 %arg1, i64 %arg2, i64 %arg3, i64 %v20_3e16f)
  store i64 %v6_3e17b, i64* @rax, align 8
  br label %dec_label_pc_3e181

dec_label_pc_3e181:                               ; preds = %bb, %dec_label_pc_3e16f
  store i64 %v20_3e16f, i64* @rcx, align 8
  %v3_3e187 = add i64 %arg3, 12
  %v4_3e187 = add i64 %v3_3e187, %v20_3e16f
  %v5_3e187 = inttoptr i64 %v4_3e187 to i8*
  store i8 37, i8* %v5_3e187, align 1
  %v0_3e18c = load i64, i64* @rax, align 8
  ret i64 %v0_3e18c
}

define i64 @function_3e198() local_unnamed_addr {
dec_label_pc_3e198:
  %v0_3e198 = load i64, i64* @r15, align 8
  %v1_3e198 = add i64 %v0_3e198, 8
  %v2_3e198 = inttoptr i64 %v1_3e198 to i64*
  %v3_3e198 = load i64, i64* %v2_3e198, align 8
  store i64 %v3_3e198, i64* @rdx, align 8
  %v1_3e19c = add i64 %v0_3e198, 20
  %v2_3e19c = inttoptr i64 %v1_3e19c to i32*
  %v3_3e19c = load i32, i32* %v2_3e19c, align 4
  %v4_3e19c = zext i32 %v3_3e19c to i64
  store i64 %v4_3e19c, i64* @rcx, align 8
  %v1_3e1a0 = add i64 %v0_3e198, 16
  %v2_3e1a0 = inttoptr i64 %v1_3e1a0 to i32*
  %v3_3e1a0 = load i32, i32* %v2_3e1a0, align 4
  %v4_3e1a0 = zext i32 %v3_3e1a0 to i64
  store i64 %v4_3e1a0, i64* @rdi, align 8
  %v1_3e1a4 = add i64 %v3_3e198, 8
  %v2_3e1a4 = inttoptr i64 %v1_3e1a4 to i32*
  %v3_3e1a4 = load i32, i32* %v2_3e1a4, align 4
  %v4_3e1a4 = zext i32 %v3_3e1a4 to i64
  store i64 %v4_3e1a4, i64* @rax, align 8
  %v2_3e1a7 = sext i32 %v3_3e19c to i64
  %v4_3e1a7 = add nuw nsw i64 %v4_3e1a0, 1
  %v5_3e1a7 = add nsw i64 %v4_3e1a7, %v2_3e1a7
  %sext = mul i64 %v5_3e1a7, 4294967296
  %v7_3e1ad = sdiv i64 %sext, 4294967296
  %v9_3e1ad = icmp sgt i64 %v7_3e1ad, %v4_3e1a4
  br i1 %v9_3e1ad, label %dec_label_pc_3e1b3, label %dec_label_pc_3e1af

dec_label_pc_3e1af:                               ; preds = %dec_label_pc_3e198
  %v8_3e1af = icmp slt i32 %v3_3e19c, 0
  %v1_3e1b1 = icmp eq i1 %v8_3e1af, false
  br i1 %v1_3e1b1, label %bb, label %dec_label_pc_3e1b3

bb:                                               ; preds = %dec_label_pc_3e1af
  %v8_3e1b1 = call i64 @function_3e16f(i64 %v4_3e1a0, i64 %v7_3e1ad, i64 %v3_3e198, i64 %v2_3e1a7)
  store i64 %v8_3e1b1, i64* @rax, align 8
  br label %dec_label_pc_3e1b3

dec_label_pc_3e1b3:                               ; preds = %bb, %dec_label_pc_3e1af, %dec_label_pc_3e198
  %v0_3e1cc = phi i64 [ %v8_3e1b1, %bb ], [ %v4_3e1a4, %dec_label_pc_3e1af ], [ %v4_3e1a4, %dec_label_pc_3e198 ]
  %v1_3e1bc = trunc i64 %v4_3e1a7 to i32
  %v9_3e1c0 = icmp sgt i32 %v1_3e1bc, 31
  br i1 %v9_3e1c0, label %dec_label_pc_3e1c2, label %dec_label_pc_3e1cc

dec_label_pc_3e1c2:                               ; preds = %dec_label_pc_3e1b3
  %v3_3e1c2 = mul nuw nsw i64 %v4_3e1a0, 2
  %v1_3e1c5 = trunc i64 %v3_3e1c2 to i32
  %v4_3e1c5 = sub i32 %v1_3e1c5, %v1_3e1bc
  %v10_3e1c52 = xor i64 %v4_3e1a7, %v3_3e1c2
  %v10_3e1c5 = trunc i64 %v10_3e1c52 to i32
  %v11_3e1c5 = xor i32 %v4_3e1c5, %v1_3e1c5
  %v12_3e1c5 = and i32 %v11_3e1c5, %v10_3e1c5
  %v13_3e1c5 = icmp slt i32 %v12_3e1c5, 0
  %v15_3e1c5 = icmp slt i32 %v4_3e1c5, 0
  %v2_3e1c8 = icmp ne i1 %v15_3e1c5, %v13_3e1c5
  %v7_3e1c8.v = select i1 %v2_3e1c8, i64 %v4_3e1a7, i64 %v3_3e1c2
  %v8_3e1c8 = and i64 %v7_3e1c8.v, 4294967295
  br label %dec_label_pc_3e1cc

dec_label_pc_3e1cc:                               ; preds = %dec_label_pc_3e1b3, %dec_label_pc_3e1c2
  %v2_3e1ce = phi i64 [ 32, %dec_label_pc_3e1b3 ], [ %v8_3e1c8, %dec_label_pc_3e1c2 ]
  %v1_3e1cc = trunc i64 %v0_3e1cc to i32
  %v3_3e1cc = trunc i64 %v2_3e1ce to i32
  %v14_3e1cc = icmp eq i32 %v1_3e1cc, %v3_3e1cc
  br i1 %v14_3e1cc, label %bb257, label %dec_label_pc_3e1d0

bb257:                                            ; preds = %dec_label_pc_3e1cc
  %v6_3e1ce = call i64 @function_3e16f(i64 %v4_3e1a0, i64 %v2_3e1ce, i64 %v3_3e198, i64 %v2_3e1a7)
  store i64 %v6_3e1ce, i64* @rax, align 8
  br label %dec_label_pc_3e1d0

dec_label_pc_3e1d0:                               ; preds = %bb257, %dec_label_pc_3e1cc
  %v7_3e1ce = phi i64 [ %v6_3e1ce, %bb257 ], [ %v0_3e1cc, %dec_label_pc_3e1cc ]
  ret i64 %v7_3e1ce
}

define i64 @function_3e218() local_unnamed_addr {
dec_label_pc_3e218:
  %v0_3e218 = load i64, i64* @r15, align 8
  %v1_3e218 = add i64 %v0_3e218, 20
  %v2_3e218 = inttoptr i64 %v1_3e218 to i32*
  %v3_3e218 = load i32, i32* %v2_3e218, align 4
  %v4_3e218 = zext i32 %v3_3e218 to i64
  store i64 %v4_3e218, i64* @rcx, align 8
  %v1_3e21c = add i64 %v0_3e218, 16
  %v2_3e21c = inttoptr i64 %v1_3e21c to i32*
  %v3_3e21c = load i32, i32* %v2_3e21c, align 4
  %v4_3e21c = zext i32 %v3_3e21c to i64
  store i64 %v4_3e21c, i64* @rdi, align 8
  %v1_3e220 = add i64 %v0_3e218, 8
  %v2_3e220 = inttoptr i64 %v1_3e220 to i64*
  %v3_3e220 = load i64, i64* %v2_3e220, align 8
  store i64 %v3_3e220, i64* @rdx, align 8
  %v1_3e224 = sext i32 %v3_3e218 to i64
  %v4_3e224 = add nsw i64 %v4_3e21c, %v1_3e224
  store i64 %v4_3e224, i64* @rax, align 8
  %v1_3e227 = add i64 %v3_3e220, 8
  %v2_3e227 = inttoptr i64 %v1_3e227 to i32*
  %v3_3e227 = load i32, i32* %v2_3e227, align 4
  %v4_3e227 = zext i32 %v3_3e227 to i64
  store i64 %v4_3e227, i64* @r8, align 8
  %v1_3e22b = trunc i64 %v4_3e224 to i32
  %v2_3e22b = load i64, i64* @r13, align 8
  %v3_3e22b = trunc i64 %v2_3e22b to i32
  %v4_3e22b = add i32 %v3_3e22b, %v1_3e22b
  %v20_3e22b = zext i32 %v4_3e22b to i64
  store i64 %v20_3e22b, i64* @rax, align 8
  %v8_3e231 = icmp ugt i32 %v4_3e22b, %v3_3e227
  br i1 %v8_3e231, label %dec_label_pc_3e23b, label %dec_label_pc_3e233

dec_label_pc_3e233:                               ; preds = %dec_label_pc_3e218
  %v8_3e233 = icmp slt i32 %v3_3e218, 0
  %v1_3e235 = icmp eq i1 %v8_3e233, false
  br i1 %v1_3e235, label %bb, label %dec_label_pc_3e23b

bb:                                               ; preds = %dec_label_pc_3e233
  %v3_3e235 = load i64, i64* @rsi, align 8
  %v7_3e235 = call i64 @function_3e08a(i64 %v4_3e21c, i64 %v3_3e235, i64 %v3_3e220, i64 %v1_3e224)
  store i64 %v7_3e235, i64* @rax, align 8
  %v0_3e23b.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_3e23b

dec_label_pc_3e23b:                               ; preds = %bb, %dec_label_pc_3e233, %dec_label_pc_3e218
  %v0_3e23b = phi i64 [ %v0_3e23b.pre, %bb ], [ %v2_3e22b, %dec_label_pc_3e233 ], [ %v2_3e22b, %dec_label_pc_3e218 ]
  %v3_3e23b = add i64 %v0_3e23b, %v4_3e21c
  store i64 %v3_3e23b, i64* @rax, align 8
  %v1_3e245 = trunc i64 %v3_3e23b to i32
  %v9_3e248 = icmp sgt i32 %v1_3e245, 31
  br i1 %v9_3e248, label %dec_label_pc_3e24a, label %dec_label_pc_3e252

dec_label_pc_3e24a:                               ; preds = %dec_label_pc_3e23b
  %v3_3e24a = mul nuw nsw i64 %v4_3e21c, 2
  %v1_3e24d = trunc i64 %v3_3e24a to i32
  %v4_3e24d = sub i32 %v1_3e24d, %v1_3e245
  %v10_3e24d1 = xor i64 %v3_3e23b, %v3_3e24a
  %v10_3e24d = trunc i64 %v10_3e24d1 to i32
  %v11_3e24d = xor i32 %v4_3e24d, %v1_3e24d
  %v12_3e24d = and i32 %v11_3e24d, %v10_3e24d
  %v13_3e24d = icmp slt i32 %v12_3e24d, 0
  %v15_3e24d = icmp slt i32 %v4_3e24d, 0
  %v2_3e24f = icmp ne i1 %v15_3e24d, %v13_3e24d
  %v7_3e24f.v = select i1 %v2_3e24f, i64 %v3_3e23b, i64 %v3_3e24a
  %v8_3e24f = and i64 %v7_3e24f.v, 4294967295
  br label %dec_label_pc_3e252

dec_label_pc_3e252:                               ; preds = %dec_label_pc_3e23b, %dec_label_pc_3e24a
  %v2_3e255 = phi i64 [ 32, %dec_label_pc_3e23b ], [ %v8_3e24f, %dec_label_pc_3e24a ]
  %v0_3e252 = load i64, i64* @r8, align 8
  %v1_3e252 = trunc i64 %v0_3e252 to i32
  %v3_3e252 = trunc i64 %v2_3e255 to i32
  %v14_3e252 = icmp eq i32 %v1_3e252, %v3_3e252
  br i1 %v14_3e252, label %bb18, label %dec_label_pc_3e25b

bb18:                                             ; preds = %dec_label_pc_3e252
  %v6_3e255 = call i64 @function_3e08a(i64 %v4_3e21c, i64 %v2_3e255, i64 %v3_3e220, i64 %v1_3e224)
  store i64 %v6_3e255, i64* @rax, align 8
  br label %dec_label_pc_3e25b

dec_label_pc_3e25b:                               ; preds = %bb18, %dec_label_pc_3e252
  %v7_3e255 = phi i64 [ %v6_3e255, %bb18 ], [ %v3_3e23b, %dec_label_pc_3e252 ]
  ret i64 %v7_3e255
}

define i64 @function_3e2a8(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e2a8:
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %tmp241 = call i32 @__decompiler_undefined_function_2()
  %v0_3e2a8 = load i64, i64* %r13.global-to-local, align 8
  %v1_3e2a8 = trunc i64 %v0_3e2a8 to i32
  %v10_3e2a8 = icmp eq i32 %v1_3e2a8, 48
  store i64 %arg1, i64* @rax, align 8
  br i1 %v10_3e2a8, label %dec_label_pc_3e2e8, label %dec_label_pc_3e2ae

dec_label_pc_3e2ae:                               ; preds = %dec_label_pc_3e2a8
  %v1_3e2b3 = add i64 %v0_3e2a8, -49
  %v2_3e2b3 = trunc i64 %v1_3e2b3 to i32
  store i64 %v1_3e2b3, i64* @rdi, align 8
  %v4_3e2b7 = add i64 %arg1, 32
  %v5_3e2b7 = inttoptr i64 %v4_3e2b7 to i32*
  %v6_3e2b7 = load i32, i32* %v5_3e2b7, align 4
  %v7_3e2ba = icmp slt i32 %v2_3e2b3, %v6_3e2b7
  br i1 %v7_3e2ba, label %bb, label %dec_label_pc_3e2c0

bb:                                               ; preds = %dec_label_pc_3e2ae
  %sext = mul i64 %v1_3e2b3, 4294967296
  %v9_3e2ba = sdiv i64 %sext, 4294967296
  %v10_3e2ba = call i64 @function_3e472(i64 %v9_3e2ba)
  store i64 %v10_3e2ba, i64* @rax, align 8
  br label %dec_label_pc_3e2c0

dec_label_pc_3e2c0:                               ; preds = %bb, %dec_label_pc_3e2ae
  %v0_3e2c82 = phi i64 [ %v10_3e2ba, %bb ], [ %arg1, %dec_label_pc_3e2ae ]
  %v7_3e2c0 = icmp eq i32 %v2_3e2b3, 0
  %v1_3e2c2 = icmp eq i1 %v7_3e2c0, false
  br i1 %v1_3e2c2, label %bb247, label %dec_label_pc_3e2c8

bb247:                                            ; preds = %dec_label_pc_3e2c0
  %v2_3e2c2 = call i64 @function_3e48c()
  store i64 %v2_3e2c2, i64* @rax, align 8
  br label %dec_label_pc_3e2c8

dec_label_pc_3e2c8:                               ; preds = %bb247, %dec_label_pc_3e2c0
  %v0_3e2c8 = phi i64 [ %v2_3e2c2, %bb247 ], [ %v0_3e2c82, %dec_label_pc_3e2c0 ]
  %v1_3e2c8 = add i64 %v0_3e2c8, 8
  %v2_3e2c8 = inttoptr i64 %v1_3e2c8 to i64*
  %v3_3e2c8 = load i64, i64* %v2_3e2c8, align 8
  store i64 %v3_3e2c8, i64* @rdi, align 8
  %v4_3e2cc = zext i32 %tmp241 to i64
  store i64 %v4_3e2cc, i64* @rdx, align 8
  %v1_3e2d4 = inttoptr i64 %v3_3e2c8 to i64*
  %v2_3e2d4 = load i64, i64* %v1_3e2d4, align 8
  store i64 %v2_3e2d4, i64* @rax, align 8
  store i64 %v2_3e2d4, i64* @rdi, align 8
  ret i64 %v2_3e2d4

dec_label_pc_3e2e8:                               ; preds = %dec_label_pc_3e2a8
  %v4_3e2ed = zext i32 %tmp241 to i64
  store i64 %v4_3e2ed, i64* @rdx, align 8
  %v1_3e2f5 = add i64 %arg1, 8
  %v2_3e2f5 = inttoptr i64 %v1_3e2f5 to i64*
  %v3_3e2f5 = load i64, i64* %v2_3e2f5, align 8
  store i64 %v3_3e2f5, i64* @rdi, align 8
  %v1_3e2f9 = inttoptr i64 %v3_3e2f5 to i64*
  %v2_3e2f9 = load i64, i64* %v1_3e2f9, align 8
  store i64 %v2_3e2f9, i64* @rax, align 8
  %v0_3e302 = load i64, i64* %r15.global-to-local, align 8
  %v1_3e302 = icmp eq i64 %v0_3e302, 0
  br i1 %v1_3e302, label %bb248, label %dec_label_pc_3e30b

bb248:                                            ; preds = %dec_label_pc_3e2e8
  %v1_3e305 = call i64 @function_3e462()
  store i64 %v1_3e305, i64* @rax, align 8
  %v0_3e30e.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_3e30b

dec_label_pc_3e30b:                               ; preds = %bb248, %dec_label_pc_3e2e8
  %v0_3e30e = phi i64 [ %v0_3e30e.pre, %bb248 ], [ %v0_3e302, %dec_label_pc_3e2e8 ]
  %v0_3e30b = phi i64 [ %v1_3e305, %bb248 ], [ %v2_3e2f9, %dec_label_pc_3e2e8 ]
  store i64 %v0_3e30e, i64* @rdi, align 8
  ret i64 %v0_3e30b
}

define i64 @function_3e320(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_3e320:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg5, i64* @rdx, align 8
  %v1_3e325 = add i64 %arg5, 40
  %v2_3e325 = inttoptr i64 %v1_3e325 to i64*
  %v3_3e325 = load i64, i64* %v2_3e325, align 8
  store i64 %v3_3e325, i64* @rdx, align 8
  %v1_3e329 = add i64 %v3_3e325, 8
  %v2_3e329 = inttoptr i64 %v1_3e329 to i32*
  %v3_3e329 = load i32, i32* %v2_3e329, align 4
  %v4_3e329 = load i64, i64* @rax, align 8
  %v5_3e329 = trunc i64 %v4_3e329 to i32
  %tmp3 = icmp ugt i32 %v3_3e329, %v5_3e329
  br i1 %tmp3, label %dec_label_pc_3e336, label %bb

bb:                                               ; preds = %dec_label_pc_3e320
  %v3_3e330 = call i64 @function_3e479()
  store i64 %v3_3e330, i64* @rax, align 8
  br label %dec_label_pc_3e336

dec_label_pc_3e336:                               ; preds = %dec_label_pc_3e320, %bb
  store i64 254781, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e3ae() local_unnamed_addr {
dec_label_pc_3e3ae:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3e462() local_unnamed_addr {
dec_label_pc_3e462:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e469(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3e469:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e472(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e472:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_3e479() local_unnamed_addr {
dec_label_pc_3e479:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e480() local_unnamed_addr {
dec_label_pc_3e480:
  %v0_3e480 = load i64, i64* inttoptr (i64 255111 to i64*), align 8
  store i64 %v0_3e480, i64* @rdi, align 8
  %v0_3e487 = load i64, i64* @rax, align 8
  ret i64 %v0_3e487
}

define i64 @function_3e48c() local_unnamed_addr {
dec_label_pc_3e48c:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @_ZN3org4luaj3vm29LoadState10loadNumberEJPNS1_8LuaValueEv(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e4a0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3e4a6 = load i64, i64* @rdi, align 8
  %v1_3e4a6 = add i64 %v0_3e4a6, 36
  %v2_3e4a6 = inttoptr i64 %v1_3e4a6 to i32*
  %v3_3e4a6 = load i32, i32* %v2_3e4a6, align 4
  %v13_3e4a6 = icmp eq i32 %v3_3e4a6, 1
  store i64 %v0_3e4a6, i64* @rax, align 8
  br i1 %v13_3e4a6, label %bb, label %dec_label_pc_3e4b3

bb:                                               ; preds = %dec_label_pc_3e4a0
  %v1_3e4ad = call i64 @function_3e6e8()
  store i64 %v1_3e4ad, i64* @rax, align 8
  br label %dec_label_pc_3e4b3

dec_label_pc_3e4b3:                               ; preds = %bb, %dec_label_pc_3e4a0
  %v0_3e4bd = phi i64 [ %v1_3e4ad, %bb ], [ %v0_3e4a6, %dec_label_pc_3e4a0 ]
  store i64 255165, i64* @rdi, align 8
  store i64 %v0_3e4bd, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e5b0() local_unnamed_addr {
dec_label_pc_3e5b0:
  store i64 1, i64* @rdx, align 8
  %v2_3e5c4 = load i64, i64* @rax, align 8
  %v3_3e5c4 = trunc i64 %v2_3e5c4 to i32
  %v4_3e5c4 = sub i64 52, %v2_3e5c4
  %v20_3e5c4 = and i64 %v4_3e5c4, 4294967295
  store i64 %v20_3e5c4, i64* @rcx, align 8
  %v2_3e5c9 = urem i64 %v4_3e5c4, 64
  %v4_3e5c9 = icmp eq i64 %v2_3e5c9, 0
  br i1 %v4_3e5c9, label %bb240, label %bb

bb:                                               ; preds = %dec_label_pc_3e5b0
  %v5_3e5c9 = shl i64 1, %v2_3e5c9
  store i64 %v5_3e5c9, i64* @rdx, align 8
  %phitmp = add i64 %v5_3e5c9, -1
  br label %bb240

bb240:                                            ; preds = %dec_label_pc_3e5b0, %bb
  %v0_3e5cc = phi i64 [ 0, %dec_label_pc_3e5b0 ], [ %phitmp, %bb ]
  store i64 %v0_3e5cc, i64* @rdx, align 8
  br i1 %v4_3e5c9, label %bb242, label %bb241

bb241:                                            ; preds = %bb240
  br label %bb242

bb242:                                            ; preds = %bb240, %bb241
  store i64 %v2_3e5c4, i64* @rcx, align 8
  %v4_3e5e3 = urem i32 %v3_3e5c4, 32
  %v6_3e5e3 = icmp eq i32 %v4_3e5e3, 0
  br i1 %v6_3e5e3, label %bb244, label %bb243

bb243:                                            ; preds = %bb242
  br label %bb244

bb244:                                            ; preds = %bb242, %bb243
  store i64 255480, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e638() local_unnamed_addr {
dec_label_pc_3e638:
  %pf.global-to-local = alloca i1, align 1
  %xmm1.global-to-local = alloca i128, align 8
  %v0_3e63d = load i128, i128* @xmm0, align 8
  %v1_3e63d = load i128, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v0_3e63d, i128 %v1_3e63d)
  %v0_3e641 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_3e641, label %bb, label %dec_label_pc_3e638.dec_label_pc_3e643_crit_edge

dec_label_pc_3e638.dec_label_pc_3e643_crit_edge:  ; preds = %dec_label_pc_3e638
  %v0_3e643.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3e643

bb:                                               ; preds = %dec_label_pc_3e638
  %v1_3e641 = call i64 @function_3e645()
  store i64 %v1_3e641, i64* @rax, align 8
  br label %dec_label_pc_3e643

dec_label_pc_3e643:                               ; preds = %dec_label_pc_3e638.dec_label_pc_3e643_crit_edge, %bb
  %v0_3e643 = phi i64 [ %v0_3e643.pre, %dec_label_pc_3e638.dec_label_pc_3e643_crit_edge ], [ %v1_3e641, %bb ]
  ret i64 %v0_3e643
}

define i64 @function_3e645() local_unnamed_addr {
dec_label_pc_3e645:
  store i64 255564, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3e64e = load i128, i128* @xmm0, align 8
  %v1_3e64e = call i64 @__asm_movsd.7465(i128 %v0_3e64e)
  %v5_3e64e = load i64, i64* @rax, align 8
  ret i64 %v5_3e64e
}

define i64 @function_3e672(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3e672:
  store i64 %arg1, i64* @rbx, align 8
  %v0_3e678 = load i64, i64* @rax, align 8
  ret i64 %v0_3e678
}

define i64 @function_3e680() local_unnamed_addr {
dec_label_pc_3e680:
  store i64 255623, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e6a0() local_unnamed_addr {
dec_label_pc_3e6a0:
  %v0_3e6a5 = load i64, i64* @rax, align 8
  ret i64 %v0_3e6a5
}

define i64 @function_3e6b0() local_unnamed_addr {
dec_label_pc_3e6b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_3e6be() local_unnamed_addr {
dec_label_pc_3e6be:
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3e6e8() local_unnamed_addr {
dec_label_pc_3e6e8:
  %v0_3e6eb = load i64, i64* @rax, align 8
  ret i64 %v0_3e6eb
}

define i64 @function_3e6f2() local_unnamed_addr {
dec_label_pc_3e6f2:
  %pf.global-to-local = alloca i1, align 1
  %v0_3e6f2 = load i128, i128* @xmm0, align 8
  %v1_3e6f2 = load i64, i64* inttoptr (i64 255738 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_3e6f2, i64 %v1_3e6f2)
  %v0_3e6fa = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_3e6fa, label %bb, label %dec_label_pc_3e6f2.dec_label_pc_3e700_crit_edge

dec_label_pc_3e6f2.dec_label_pc_3e700_crit_edge:  ; preds = %dec_label_pc_3e6f2
  %v2_3e6fa.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3e700

bb:                                               ; preds = %dec_label_pc_3e6f2
  %v1_3e6fa = call i64 @function_3e645()
  store i64 %v1_3e6fa, i64* @rax, align 8
  br label %dec_label_pc_3e700

dec_label_pc_3e700:                               ; preds = %dec_label_pc_3e6f2.dec_label_pc_3e700_crit_edge, %bb
  %v2_3e6fa = phi i64 [ %v2_3e6fa.pre, %dec_label_pc_3e6f2.dec_label_pc_3e700_crit_edge ], [ %v1_3e6fa, %bb ]
  ret i64 %v2_3e6fa
}

define i64 @function_3e705() local_unnamed_addr {
dec_label_pc_3e705:
  %v0_3e705 = load i64, i64* @rax, align 8
  %v1_3e705 = add i64 %v0_3e705, -115
  %v2_3e705 = inttoptr i64 %v1_3e705 to i32*
  %v3_3e705 = load i32, i32* %v2_3e705, align 4
  %v4_3e705 = add i32 %v3_3e705, -1
  store i32 %v4_3e705, i32* %v2_3e705, align 4
  store i64 0, i64* @rax, align 8
  store i64 256, i64* @rdx, align 8
  store i64 256, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_3e723() local_unnamed_addr {
dec_label_pc_3e723:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaValue6invokeEJPNS1_7VarargsEP6JArrayIPS2_ES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3e730:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 255808, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_3e745 = load i64, i64* @rdx, align 8
  store i64 %v0_3e745, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_3e78a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3e78a:
  %v2_3e78a = load i64, i64* @r12, align 8
  store i64 %v2_3e78a, i64* @rax, align 8
  store i64 %v2_3e78a, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_3e78a
}

define i64 @function_3e7a8() local_unnamed_addr {
dec_label_pc_3e7a8:
  store i64 255932, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e7f0() local_unnamed_addr {
dec_label_pc_3e7f0:
  %v2_3e7f0 = load i64, i64* @rbx, align 8
  store i64 %v2_3e7f0, i64* @rax, align 8
  store i64 %v2_3e7f0, i64* @rdi, align 8
  %v4_3e7f9 = trunc i64 %v2_3e7f0 to i32
  %tmp237 = icmp slt i32 %v4_3e7f9, 1
  br i1 %tmp237, label %bb, label %dec_label_pc_3e7fd

bb:                                               ; preds = %dec_label_pc_3e7f0
  %v6_3e7fb = call i64 @function_3e820(i64 %v2_3e7f0)
  store i64 %v6_3e7fb, i64* @rax, align 8
  br label %dec_label_pc_3e7fd

dec_label_pc_3e7fd:                               ; preds = %bb, %dec_label_pc_3e7f0
  store i64 256004, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e820(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e820:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3e820 = load i64, i64* @rbp, align 8
  %v1_3e820 = add i64 %v0_3e820, 8
  %v2_3e820 = inttoptr i64 %v1_3e820 to i32*
  %v3_3e820 = load i32, i32* %v2_3e820, align 4
  %v4_3e820 = zext i32 %v3_3e820 to i64
  store i64 %v4_3e820, i64* @rax, align 8
  %v5_3e823 = icmp eq i32 %v3_3e820, 0
  br i1 %v5_3e823, label %dec_label_pc_3e830, label %dec_label_pc_3e827

dec_label_pc_3e827:                               ; preds = %dec_label_pc_3e820
  %v1_3e827 = add i64 %v0_3e820, 16
  %v2_3e827 = inttoptr i64 %v1_3e827 to i64*
  %v3_3e827 = load i64, i64* %v2_3e827, align 8
  store i64 %v3_3e827, i64* @rbx, align 8
  %v4_3e82b = call i64 @function_3e78a(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_3e82b, i64* @rax, align 8
  ret i64 %v4_3e82b

dec_label_pc_3e830:                               ; preds = %dec_label_pc_3e820
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e839() local_unnamed_addr {
dec_label_pc_3e839:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure7executeEJPNS1_7VarargsEP6JArrayIPNS1_8LuaValueEES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3e850:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3e854 = load i64, i64* %rsi.global-to-local, align 8
  %v0_3e861 = load i64, i64* @rdi, align 8
  %v1_3e861 = add i64 %v0_3e861, 8
  %v2_3e861 = inttoptr i64 %v1_3e861 to i64*
  %v3_3e861 = load i64, i64* %v2_3e861, align 8
  store i64 %v3_3e861, i64* @rax, align 8
  %v0_3e865 = load i64, i64* inttoptr (i64 256108 to i64*), align 8
  store i64 %v0_3e865, i64* @rbx, align 8
  %v1_3e87f = add i64 %v3_3e861, 16
  %v2_3e87f = inttoptr i64 %v1_3e87f to i64*
  %v3_3e87f = load i64, i64* %v2_3e87f, align 8
  store i64 %v3_3e87f, i64* @rcx, align 8
  %v1_3e888 = add i64 %v3_3e861, 8
  %v2_3e888 = inttoptr i64 %v1_3e888 to i64*
  %v3_3e888 = load i64, i64* %v2_3e888, align 8
  store i64 %v3_3e888, i64* @rcx, align 8
  %v1_3e88c = add i64 %v3_3e861, 24
  %v2_3e88c = inttoptr i64 %v1_3e88c to i64*
  %v3_3e88c = load i64, i64* %v2_3e88c, align 8
  store i64 %v3_3e88c, i64* @rax, align 8
  %v1_3e895 = add i64 %v3_3e88c, 8
  %v2_3e895 = inttoptr i64 %v1_3e895 to i32*
  %v3_3e895 = load i32, i32* %v2_3e895, align 4
  %v4_3e895 = zext i32 %v3_3e895 to i64
  store i64 %v4_3e895, i64* @rax, align 8
  %v1_3e89c = add i64 %v0_3e854, 8
  %v2_3e89c = inttoptr i64 %v1_3e89c to i32*
  %v3_3e89c = load i32, i32* %v2_3e89c, align 4
  %v4_3e89c = zext i32 %v3_3e89c to i64
  store i64 %v4_3e89c, i64* @rdi, align 8
  store i64 256166, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3e980() local_unnamed_addr {
dec_label_pc_3e980:
  %v0_3e980 = load i64, i64* @rbx, align 8
  %v1_3e980 = trunc i64 %v0_3e980 to i32
  %v3_3e980 = udiv i32 %v1_3e980, 8388608
  %tmp238 = icmp ult i32 %v1_3e980, 8388608
  %v10_3e980 = zext i32 %v3_3e980 to i64
  store i64 %v10_3e980, i64* @rbx, align 8
  br i1 %tmp238, label %bb, label %dec_label_pc_3e98b

bb:                                               ; preds = %dec_label_pc_3e980
  %v2_3e985 = call i64 @function_40128(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3e985, i64* @rax, align 8
  %v0_3e98b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3e98b

dec_label_pc_3e98b:                               ; preds = %bb, %dec_label_pc_3e980
  %v0_3e98b = phi i64 [ %v0_3e98b.pre, %bb ], [ %v10_3e980, %dec_label_pc_3e980 ]
  %v1_3e98b = trunc i64 %v0_3e98b to i32
  %v11_3e98b = icmp eq i32 %v1_3e98b, 1
  br i1 %v11_3e98b, label %bb237, label %dec_label_pc_3e98b.dec_label_pc_3e994_crit_edge

dec_label_pc_3e98b.dec_label_pc_3e994_crit_edge:  ; preds = %dec_label_pc_3e98b
  %v0_3e999.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_3e994

bb237:                                            ; preds = %dec_label_pc_3e98b
  %v2_3e98e = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3e98e, i64* @rax, align 8
  br label %dec_label_pc_3e994

dec_label_pc_3e994:                               ; preds = %dec_label_pc_3e98b.dec_label_pc_3e994_crit_edge, %bb237
  %v0_3e999 = phi i64 [ %v0_3e999.pre, %dec_label_pc_3e98b.dec_label_pc_3e994_crit_edge ], [ %v2_3e98e, %bb237 ]
  ret i64 %v0_3e999
}

define i64 @function_3e9a0(i64 %arg1) local_unnamed_addr {
dec_label_pc_3e9a0:
  store i64 %arg1, i64* @rcx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3eab0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_3eab0:
  %r13.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3eab0 = load i64, i64* @rcx, align 8
  %v1_3eab0 = add i64 %v0_3eab0, 16
  %v2_3eab0 = inttoptr i64 %v1_3eab0 to i64*
  %v3_3eab0 = load i64, i64* %v2_3eab0, align 8
  store i64 %v3_3eab0, i64* %r13.global-to-local, align 8
  %v0_3eab4 = load i64, i64* @rax, align 8
  %v1_3eab4 = add i64 %v0_3eab4, 18
  %v2_3eab4 = inttoptr i64 %v1_3eab4 to i16*
  %v3_3eab4 = load i16, i16* %v2_3eab4, align 2
  %v4_3eab4 = sext i16 %v3_3eab4 to i64
  store i64 %v4_3eab4, i64* @rdx, align 8
  store i64 %arg5, i64* @rdi, align 8
  store i64 %v0_3eab4, i64* @rcx, align 8
  %v1_3eacd = add i64 %v3_3eab0, 16
  store i64 %v1_3eacd, i64* @rax, align 8
  %v1_3ead1 = add i64 %v3_3eab0, 8
  %v2_3ead1 = inttoptr i64 %v1_3ead1 to i32*
  %v3_3ead1 = load i32, i32* %v2_3ead1, align 4
  %v4_3ead1 = zext i32 %v3_3ead1 to i64
  store i64 %v4_3ead1, i64* @rdx, align 8
  %v0_3ead5 = load i64, i64* @rbx, align 8
  %v1_3ead5 = trunc i64 %v0_3ead5 to i32
  %v9_3ead5 = icmp ult i32 %v1_3ead5, %v3_3ead1
  %v1_3ead7 = icmp eq i1 %v9_3ead5, false
  br i1 %v1_3ead7, label %bb, label %dec_label_pc_3eadd

bb:                                               ; preds = %dec_label_pc_3eab0
  %v3_3ead7 = call i64 @function_40dbe(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_3ead7, i64* @rax, align 8
  %v0_3eae3.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_3eadd

dec_label_pc_3eadd:                               ; preds = %bb, %dec_label_pc_3eab0
  %v0_3eae3 = phi i64 [ %v0_3eae3.pre, %bb ], [ %v3_3eab0, %dec_label_pc_3eab0 ]
  %v1_3eadd = phi i64 [ %v3_3ead7, %bb ], [ %v1_3eacd, %dec_label_pc_3eab0 ]
  %v0_3eadd = load i64, i64* @rbp, align 8
  %v2_3eadd = add i64 %v0_3eadd, %v1_3eadd
  store i64 %v2_3eadd, i64* @rbp, align 8
  store i64 %v0_3eae3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3eb02(i64 %arg1) local_unnamed_addr {
dec_label_pc_3eb02:
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  %tmp250 = call i64 @__decompiler_undefined_function_0()
  %tmp251 = call i64 @__decompiler_undefined_function_0()
  %tmp253 = call i64 @__decompiler_undefined_function_0()
  %v1_3eb0b = add i64 %tmp253, 8
  %v2_3eb0b = inttoptr i64 %v1_3eb0b to i32*
  %v3_3eb0b = load i32, i32* %v2_3eb0b, align 4
  %v4_3eb0b = zext i32 %v3_3eb0b to i64
  store i64 %v4_3eb0b, i64* @rax, align 8
  %v0_3eb0e = load i64, i64* @rbx, align 8
  %v1_3eb0e = trunc i64 %v0_3eb0e to i32
  %v9_3eb0e = icmp ult i32 %v1_3eb0e, %v3_3eb0b
  %v1_3eb10 = icmp eq i1 %v9_3eb0e, false
  br i1 %v1_3eb10, label %bb, label %dec_label_pc_3eb16

bb:                                               ; preds = %dec_label_pc_3eb02
  %v2_3eb10 = call i64 @function_40d8f()
  store i64 %v2_3eb10, i64* @rax, align 8
  %v0_3eb1b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3eb16

dec_label_pc_3eb16:                               ; preds = %bb, %dec_label_pc_3eb02
  %v0_3eb1b = phi i64 [ %v0_3eb1b.pre, %bb ], [ %v0_3eb0e, %dec_label_pc_3eb02 ]
  %v1_3eb1b = mul i64 %v0_3eb1b, 8
  store i64 %v1_3eb1b, i64* @rbp, align 8
  %v3_3eb23 = add i64 %v1_3eb1b, %tmp251
  %v4_3eb23 = inttoptr i64 %v3_3eb23 to i64*
  %v5_3eb23 = load i64, i64* %v4_3eb23, align 8
  store i64 %v5_3eb23, i64* @rax, align 8
  %v1_3eb27 = add i64 %v5_3eb23, 16
  %v2_3eb27 = inttoptr i64 %v1_3eb27 to i8*
  %v3_3eb27 = load i8, i8* %v2_3eb27, align 1
  %v4_3eb27 = zext i8 %v3_3eb27 to i64
  store i64 %v4_3eb27, i64* @rdx, align 8
  %v7_3eb2b = icmp eq i8 %v3_3eb27, 0
  %v1_3eb32 = icmp eq i1 %v7_3eb2b, false
  br i1 %v1_3eb32, label %bb254, label %dec_label_pc_3eb38

bb254:                                            ; preds = %dec_label_pc_3eb16
  %v2_3eb32 = load i64, i64* @rdi, align 8
  %v3_3eb32 = load i64, i64* %rsi.global-to-local, align 8
  %v5_3eb32 = sext i8 %v3_3eb27 to i64
  %v9_3eb32 = call i64 @function_3eab0(i64 %v2_3eb32, i64 %v3_3eb32, i64 %v5_3eb32, i64 %tmp250, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v9_3eb32, i64* @rax, align 8
  br label %dec_label_pc_3eb38

dec_label_pc_3eb38:                               ; preds = %bb254, %dec_label_pc_3eb16
  %v0_3eb45 = phi i64 [ %v9_3eb32, %bb254 ], [ %v5_3eb23, %dec_label_pc_3eb16 ]
  %v1_3eb38 = add i64 %tmp250, 16
  %v2_3eb38 = inttoptr i64 %v1_3eb38 to i64*
  %v3_3eb38 = load i64, i64* %v2_3eb38, align 8
  store i64 %v3_3eb38, i64* @rdi, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v1_3eb41 = add i64 %arg1, 16
  %v2_3eb41 = inttoptr i64 %v1_3eb41 to i64*
  %v3_3eb41 = load i64, i64* %v2_3eb41, align 8
  store i64 %v3_3eb41, i64* @rdx, align 8
  %v1_3eb45 = add i64 %v0_3eb45, 18
  %v2_3eb45 = inttoptr i64 %v1_3eb45 to i16*
  %v3_3eb45 = load i16, i16* %v2_3eb45, align 2
  %v4_3eb45 = sext i16 %v3_3eb45 to i64
  store i64 %v4_3eb45, i64* @rax, align 8
  %v1_3eb4a = add i64 %v3_3eb41, 16
  store i64 %v1_3eb4a, i64* %rsi.global-to-local, align 8
  %v1_3eb4e = sext i16 %v3_3eb45 to i32
  store i64 %v4_3eb45, i64* @rcx, align 8
  %v1_3eb51 = add i64 %v3_3eb41, 8
  %v2_3eb51 = inttoptr i64 %v1_3eb51 to i32*
  %v3_3eb51 = load i32, i32* %v2_3eb51, align 4
  %v4_3eb51 = zext i32 %v3_3eb51 to i64
  store i64 %v4_3eb51, i64* @rdx, align 8
  %v10_3eb54 = icmp ult i32 %v1_3eb4e, %v3_3eb51
  %v1_3eb56 = icmp eq i1 %v10_3eb54, false
  br i1 %v1_3eb56, label %bb255, label %dec_label_pc_3eb5c

bb255:                                            ; preds = %dec_label_pc_3eb38
  %v7_3eb56 = call i64 @function_40dc9(i64 %v3_3eb38, i64 %v1_3eb4a, i64 %v4_3eb51, i64 %v4_3eb45)
  store i64 %v7_3eb56, i64* @rax, align 8
  br label %dec_label_pc_3eb5c

dec_label_pc_3eb5c:                               ; preds = %bb255, %dec_label_pc_3eb38
  %v1_3eb5c = phi i64 [ %v7_3eb56, %bb255 ], [ %v4_3eb45, %dec_label_pc_3eb38 ]
  %v2_3eb5c = mul i64 %v1_3eb5c, 8
  %v3_3eb5c = add i64 %v2_3eb5c, %v1_3eb4a
  %v4_3eb5c = inttoptr i64 %v3_3eb5c to i64*
  %v5_3eb5c = load i64, i64* %v4_3eb5c, align 8
  store i64 %v5_3eb5c, i64* %r13.global-to-local, align 8
  %v1_3eb60 = add i64 %v3_3eb38, 16
  store i64 %v1_3eb60, i64* @rax, align 8
  %v1_3eb64 = add i64 %v3_3eb38, 8
  %v2_3eb64 = inttoptr i64 %v1_3eb64 to i32*
  %v3_3eb64 = load i32, i32* %v2_3eb64, align 4
  %v4_3eb64 = zext i32 %v3_3eb64 to i64
  store i64 %v4_3eb64, i64* @rdx, align 8
  %v0_3eb67 = load i64, i64* @rbx, align 8
  %v1_3eb67 = trunc i64 %v0_3eb67 to i32
  %v9_3eb67 = icmp ult i32 %v1_3eb67, %v3_3eb64
  %v1_3eb69 = icmp eq i1 %v9_3eb67, false
  br i1 %v1_3eb69, label %bb256, label %dec_label_pc_3eb6f

bb256:                                            ; preds = %dec_label_pc_3eb5c
  %v2_3eb69 = call i64 @function_40db5()
  store i64 %v2_3eb69, i64* @rax, align 8
  %v0_3eb72.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_3eb6f

dec_label_pc_3eb6f:                               ; preds = %bb256, %dec_label_pc_3eb5c
  %v0_3eb7c = phi i64 [ %v0_3eb72.pre, %bb256 ], [ %v5_3eb5c, %dec_label_pc_3eb5c ]
  %v1_3eb6f = phi i64 [ %v2_3eb69, %bb256 ], [ %v1_3eb60, %dec_label_pc_3eb5c ]
  %v0_3eb6f = load i64, i64* @rbp, align 8
  %v2_3eb6f = add i64 %v0_3eb6f, %v1_3eb6f
  store i64 %v0_3eb7c, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  %v2_3eb7c = inttoptr i64 %v2_3eb6f to i64*
  store i64 %v0_3eb7c, i64* %v2_3eb7c, align 8
  %v0_3eb80 = load i64, i64* @rbx, align 8
  %v1_3eb80 = add i64 %v0_3eb80, 1
  store i64 %v1_3eb80, i64* @rbx, align 8
  %v0_3eb88 = load i64, i64* @rax, align 8
  ret i64 %v0_3eb88
}

define i64 @function_3eb8e(i64 %arg1) local_unnamed_addr {
dec_label_pc_3eb8e:
  %r15.global-to-local = alloca i64, align 8
  %tmp234 = call i64 @__decompiler_undefined_function_0()
  %v1_3eb8e = add i64 %tmp234, 8
  %v2_3eb8e = inttoptr i64 %v1_3eb8e to i32*
  %v3_3eb8e = load i32, i32* %v2_3eb8e, align 4
  %v4_3eb8e = zext i32 %v3_3eb8e to i64
  store i64 %v4_3eb8e, i64* @rax, align 8
  %v0_3eb92 = load i64, i64* @r14, align 8
  %v1_3eb92 = trunc i64 %v0_3eb92 to i32
  %v9_3eb92 = icmp ult i32 %v1_3eb92, %v3_3eb8e
  %v1_3eb95 = icmp eq i1 %v9_3eb92, false
  br i1 %v1_3eb95, label %bb, label %dec_label_pc_3eb9b

bb:                                               ; preds = %dec_label_pc_3eb8e
  %v2_3eb95 = call i64 @function_40f1c()
  store i64 %v2_3eb95, i64* @rax, align 8
  %v0_3eba0.pre = load i64, i64* %r15.global-to-local, align 8
  %v1_3eba3.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_3eb9b

dec_label_pc_3eb9b:                               ; preds = %bb, %dec_label_pc_3eb8e
  %v1_3eba3 = phi i64 [ %v1_3eba3.pre, %bb ], [ %v0_3eb92, %dec_label_pc_3eb8e ]
  %v0_3eba0 = phi i64 [ %v0_3eba0.pre, %bb ], [ %tmp234, %dec_label_pc_3eb8e ]
  store i64 %v0_3eba0, i64* @rdi, align 8
  %v2_3eba3 = mul i64 %v1_3eba3, 8
  %v3_3eba3 = add i64 %v2_3eba3, %arg1
  store i64 %v3_3eba3, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3ebd4() local_unnamed_addr {
dec_label_pc_3ebd4:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_3ebf6() local_unnamed_addr {
dec_label_pc_3ebf6:
  %v0_3ebf6 = load i64, i64* @rdi, align 8
  %v2_3ebf6 = call i64 @function_3ec0f(i64 %v0_3ebf6, i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3ebf6, i64* @rax, align 8
  ret i64 %v2_3ebf6
}

define i64 @function_3ebf8(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ebf8:
  %r14.global-to-local = alloca i64, align 8
  %tmp236 = call i32 @__decompiler_undefined_function_2()
  store i64 %arg1, i64* @rdi, align 8
  %v2_3ec09 = add i32 %tmp236, -1
  %v2_3ec0c = load i64, i64* %r14.global-to-local, align 8
  %v3_3ec0c = trunc i64 %v2_3ec0c to i32
  %v4_3ec0c = sub i32 %v2_3ec09, %v3_3ec0c
  %v20_3ec0c = zext i32 %v4_3ec0c to i64
  store i64 %v20_3ec0c, i64* @rax, align 8
  ret i64 %v20_3ec0c
}

define i64 @function_3ec0f(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3ec0f:
  store i64 %arg1, i64* @rdi, align 8
  %v2_3ec16 = load i64, i64* @rdi, align 8
  store i64 %v2_3ec16, i64* @rax, align 8
  %v0_3ec2b = load i64, i64* @r14, align 8
  %v2_3ec2b = add i64 %v0_3ec2b, 1
  %v17_3ec2b = and i64 %v2_3ec2b, 4294967295
  store i64 1, i64* @rbx, align 8
  store i64 %arg2, i64* @rcx, align 8
  store i64 %v17_3ec2b, i64* @rax, align 8
  %v2_3ec51 = mul nuw nsw i64 %v17_3ec2b, 8
  %v3_3ec51 = add i64 %v2_3ec51, %arg2
  %v4_3ec51 = inttoptr i64 %v3_3ec51 to i64*
  %v5_3ec51 = load i64, i64* %v4_3ec51, align 8
  store i64 %v5_3ec51, i64* @rdx, align 8
  %v2_3ec55 = load i64, i64* @rbp, align 8
  store i64 %v2_3ec55, i64* @rax, align 8
  %v1_3ec59 = add i64 %v2_3ec55, 1144
  %v2_3ec59 = inttoptr i64 %v1_3ec59 to i64*
  %v3_3ec59 = load i64, i64* %v2_3ec59, align 8
  store i64 %v3_3ec59, i64* @rax, align 8
  store i64 %v2_3ec55, i64* @rdi, align 8
  store i64 2, i64* @rbx, align 8
  ret i64 %v3_3ec59
}

define i64 @function_3ec71(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_3ec71:
  %rbp.global-to-local = alloca i64, align 8
  %v4_3ec71 = load i64, i64* @rbx, align 8
  %v5_3ec75 = sext i32 %arg2 to i64
  %v6_3ec75 = icmp slt i64 %v5_3ec75, %v4_3ec71
  br i1 %v6_3ec75, label %bb, label %dec_label_pc_3ec80.preheader

bb:                                               ; preds = %dec_label_pc_3ec71
  %v8_3ec75 = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_3ec75, i64* @rax, align 8
  %v0_3ec85.pre.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3ec80.preheader

dec_label_pc_3ec80.preheader:                     ; preds = %bb, %dec_label_pc_3ec71
  %v0_3ec85.pre = phi i64 [ %v0_3ec85.pre.pre, %bb ], [ %v4_3ec71, %dec_label_pc_3ec71 ]
  %v2_3ec97.pre = load i64, i64* %rbp.global-to-local, align 8
  %v1_3ec8e = inttoptr i64 %arg1 to i64*
  %v1_3ec9b = add i64 %v2_3ec97.pre, 1144
  %v2_3ec9b = inttoptr i64 %v1_3ec9b to i64*
  br label %dec_label_pc_3ec80

dec_label_pc_3ec80:                               ; preds = %dec_label_pc_3ec80.preheader, %dec_label_pc_3ec80
  %v0_3ecad = phi i64 [ %v0_3ec85.pre, %dec_label_pc_3ec80.preheader ], [ %v17_3ecad, %dec_label_pc_3ec80 ]
  store i64 %arg1, i64* @rdi, align 8
  %v2_3ec8e = load i64, i64* %v1_3ec8e, align 8
  store i64 %v2_3ec8e, i64* @rax, align 8
  %v1_3ec91 = add i64 %v2_3ec8e, 64
  %v2_3ec91 = inttoptr i64 %v1_3ec91 to i64*
  %v3_3ec91 = load i64, i64* %v2_3ec91, align 8
  store i64 %v3_3ec91, i64* @rax, align 8
  store i64 %v2_3ec97.pre, i64* @rdx, align 8
  %v3_3ec9b = load i64, i64* %v2_3ec9b, align 8
  store i64 %v3_3ec9b, i64* @rcx, align 8
  store i64 %v3_3ec91, i64* @rdx, align 8
  store i64 %v2_3ec97.pre, i64* @rdi, align 8
  %v2_3ecad = add i64 %v0_3ecad, 1
  %v17_3ecad = and i64 %v2_3ecad, 4294967295
  store i64 %v17_3ecad, i64* @rbx, align 8
  %v6_3ecb4 = icmp slt i64 %v5_3ec75, %v17_3ecad
  br i1 %v6_3ecb4, label %dec_label_pc_3ecb6, label %dec_label_pc_3ec80

dec_label_pc_3ecb6:                               ; preds = %dec_label_pc_3ec80
  %v1_3ecb6 = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v1_3ecb6, i64* @rax, align 8
  ret i64 %v1_3ecb6
}

define i64 @function_3ed45() local_unnamed_addr {
dec_label_pc_3ed45:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_3edb0(i64 %arg1) local_unnamed_addr {
dec_label_pc_3edb0:
  %r14.global-to-local = alloca i64, align 8
  %tmp234 = call i64 @__decompiler_undefined_function_0()
  %v1_3edb0 = add i64 %tmp234, 8
  %v2_3edb0 = inttoptr i64 %v1_3edb0 to i32*
  %v3_3edb0 = load i32, i32* %v2_3edb0, align 4
  %v4_3edb0 = zext i32 %v3_3edb0 to i64
  store i64 %v4_3edb0, i64* @rax, align 8
  %v0_3edb4 = load i64, i64* %r14.global-to-local, align 8
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v0_3edb4, i64* @rdx, align 8
  %v2_3edc5 = mul i64 %v0_3edb4, 8
  %v3_3edc5 = add i64 %v2_3edc5, %arg1
  %v4_3edc5 = inttoptr i64 %v3_3edc5 to i64*
  %v5_3edc5 = load i64, i64* %v4_3edc5, align 8
  %v1_3edc9 = add i64 %v0_3edb4, 1
  store i64 %v1_3edc9, i64* @rdi, align 8
  %v2_3edd8 = mul i64 %v1_3edc9, 8
  %v3_3edd8 = add i64 %v2_3edd8, %arg1
  %v4_3edd8 = inttoptr i64 %v3_3edd8 to i64*
  %v5_3edd8 = load i64, i64* %v4_3edd8, align 8
  store i64 %v5_3edd8, i64* @rdi, align 8
  %v1_3eddc = mul i64 %v0_3edb4, 4294967296
  %sext = add i64 %v1_3eddc, 8589934592
  %v4_3edec = sdiv i64 %sext, 4294967296
  store i64 %v4_3edec, i64* @rax, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v1_3edff = inttoptr i64 %v5_3edc5 to i64*
  %v2_3edff = load i64, i64* %v1_3edff, align 8
  store i64 %v2_3edff, i64* @rdx, align 8
  %v1_3ee03 = add i64 %v2_3edff, 1424
  %v2_3ee03 = inttoptr i64 %v1_3ee03 to i64*
  %v3_3ee03 = load i64, i64* %v2_3ee03, align 8
  store i64 %v3_3ee03, i64* @rdx, align 8
  %v0_3ee12 = load i64, i64* @rbx, align 8
  %v1_3ee1c = trunc i64 %v0_3ee12 to i32
  %v3_3ee1c = sdiv i32 %v1_3ee1c, 16384
  %v4_3ee1f = sub i64 4294967294, %v0_3edb4
  %v20_3ee1f = and i64 %v4_3ee1f, 4294967295
  store i64 %v20_3ee1f, i64* @rax, align 8
  %v2_3ee22 = urem i32 %v3_3ee1c, 512
  %v9_3ee22 = zext i32 %v2_3ee22 to i64
  store i64 %v9_3ee22, i64* @rdi, align 8
  %v3_3ee28 = add i64 %v0_3edb4, 2
  %v4_3ee28 = add i64 %v3_3ee28, %v9_3ee22
  store i64 %v4_3ee28, i64* @rbx, align 8
  store i64 %v20_3ee1f, i64* %r14.global-to-local, align 8
  ret i64 %v20_3ee1f
}

define i64 @function_3ee38(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ee38:
  %r12.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %v2_3ee38 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_3ee38, i64* @rax, align 8
  %v1_3ee3c = add i64 %v2_3ee38, 64
  %v2_3ee3c = inttoptr i64 %v1_3ee3c to i64*
  %v3_3ee3c = load i64, i64* %v2_3ee3c, align 8
  store i64 %v3_3ee3c, i64* @rax, align 8
  store i64 %v2_3ee38, i64* @rdi, align 8
  %v0_3ee48 = load i64, i64* %r15.global-to-local, align 8
  %v1_3ee48 = add i64 %v0_3ee48, 8
  %v2_3ee48 = inttoptr i64 %v1_3ee48 to i32*
  %v3_3ee48 = load i32, i32* %v2_3ee48, align 4
  %v4_3ee48 = zext i32 %v3_3ee48 to i64
  store i64 %v4_3ee48, i64* @rax, align 8
  %v2_3ee4c = load i64, i64* @rbx, align 8
  %v3_3ee4c = trunc i64 %v2_3ee4c to i32
  %tmp239 = icmp ugt i32 %v3_3ee48, %v3_3ee4c
  br i1 %tmp239, label %dec_label_pc_3ee54, label %bb

bb:                                               ; preds = %dec_label_pc_3ee38
  %v3_3ee4e = call i64 @function_40d98()
  store i64 %v3_3ee4e, i64* @rax, align 8
  %v0_3ee5f.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_3ee54

dec_label_pc_3ee54:                               ; preds = %dec_label_pc_3ee38, %bb
  %v0_3ee5f = phi i64 [ %v0_3ee5f.pre, %bb ], [ %v0_3ee48, %dec_label_pc_3ee38 ]
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v0_3ee5f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3efc8(i32 %arg1) local_unnamed_addr {
dec_label_pc_3efc8:
  %v4_3efc8 = zext i32 %arg1 to i64
  %v0_3efcc = load i64, i64* @rbx, align 8
  %v1_3efce = trunc i64 %v0_3efcc to i32
  %v3_3efce = udiv i32 %v1_3efce, 16384
  %v10_3efce = zext i32 %v3_3efce to i64
  store i64 %v10_3efce, i64* @rdi, align 8
  %v3_3efd1 = add nsw i64 %v4_3efc8, -131071
  %v4_3efd1 = add nsw i64 %v3_3efd1, %v10_3efce
  store i64 %v4_3efd1, i64* @rax, align 8
  ret i64 %v4_3efd1
}

define i64 @function_3efe0(i64 %arg1) local_unnamed_addr {
dec_label_pc_3efe0:
  %v0_3efe5 = load i64, i64* @rax, align 8
  ret i64 %v0_3efe5
}

define i64 @function_3f1e7() local_unnamed_addr {
dec_label_pc_3f1e7:
  %v0_3f1e7 = load i64, i64* @rax, align 8
  ret i64 %v0_3f1e7
}

define i64 @function_3f1fd() local_unnamed_addr {
dec_label_pc_3f1fd:
  %v0_3f1fd = load i64, i64* @rax, align 8
  ret i64 %v0_3f1fd
}

define i64 @function_3f20f() local_unnamed_addr {
dec_label_pc_3f20f:
  %v0_3f20f = load i64, i64* @rax, align 8
  ret i64 %v0_3f20f
}

define i64 @function_3f22c() local_unnamed_addr {
dec_label_pc_3f22c:
  %cf.global-to-local = alloca i1, align 1
  %v0_3f22c = load i64, i64* @rax, align 8
  %v1_3f22c = add i64 %v0_3f22c, 5
  %v2_3f22c = inttoptr i64 %v1_3f22c to i8*
  %v3_3f22c = load i8, i8* %v2_3f22c, align 1
  %v4_3f22c = load i1, i1* %cf.global-to-local, align 1
  %v5_3f22c = zext i1 %v4_3f22c to i8
  %v6_3f22c = add i8 %v5_3f22c, %v3_3f22c
  store i8 %v6_3f22c, i8* %v2_3f22c, align 1
  %v0_3f230 = load i64, i64* @rbx, align 8
  %v1_3f230 = udiv i64 %v0_3f230, 256
  %v2_3f230 = trunc i64 %v1_3f230 to i8
  %v6_3f2301 = mul nuw nsw i64 %v1_3f230, 2
  %v6_3f230 = trunc i64 %v6_3f2301 to i8
  %v11_3f230 = icmp ult i8 %v6_3f230, %v2_3f230
  store i1 %v11_3f230, i1* %cf.global-to-local, align 1
  %v21_3f230 = mul i64 %v1_3f230, 512
  %v23_3f230 = and i64 %v21_3f230, 65024
  %v24_3f230 = and i64 %v0_3f230, -65281
  %v25_3f230 = or i64 %v23_3f230, %v24_3f230
  store i64 %v25_3f230, i64* @rbx, align 8
  %v0_3f232 = load i64, i64* @rax, align 8
  %v1_3f232 = add i64 %v0_3f232, -119
  %v2_3f232 = inttoptr i64 %v1_3f232 to i8*
  %v3_3f232 = load i8, i8* %v2_3f232, align 1
  %v4_3f232 = udiv i8 %v3_3f232, 2
  %v5_3f232 = shl i8 %v3_3f232, 7
  %v6_3f232 = or i8 %v4_3f232, %v5_3f232
  store i8 %v6_3f232, i8* %v2_3f232, align 1
  %v10_3f232 = urem i8 %v3_3f232, 2
  %v11_3f232 = icmp ne i8 %v10_3f232, 0
  store i1 %v11_3f232, i1* %cf.global-to-local, align 1
  %v0_3f235 = load i64, i64* @rax, align 8
  ret i64 %v0_3f235
}

define i64 @function_3f243() local_unnamed_addr {
dec_label_pc_3f243:
  %v0_3f246 = load i64, i64* @r15, align 8
  store i64 %v0_3f246, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3f258(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f258:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %v0_3f258 = load i64, i64* @rbx, align 8
  %v1_3f25a = trunc i64 %v0_3f258 to i32
  %v3_3f25a = udiv i32 %v1_3f25a, 8388608
  %tmp260 = icmp ult i32 %v1_3f25a, 8388608
  %v10_3f25a = zext i32 %v3_3f25a to i64
  store i64 %v10_3f25a, i64* @rdi, align 8
  br i1 %tmp260, label %bb, label %dec_label_pc_3f26c

bb:                                               ; preds = %dec_label_pc_3f258
  %v3_3f266 = call i64 @function_406a0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_3f266, i64* @rax, align 8
  br label %dec_label_pc_3f26c

dec_label_pc_3f26c:                               ; preds = %bb, %dec_label_pc_3f258
  %tmp261 = and i32 %v1_3f25a, -8388608
  %tmp262 = icmp eq i32 %tmp261, 16777216
  %v1_3f26f = icmp eq i1 %tmp262, false
  br i1 %v1_3f26f, label %bb258, label %dec_label_pc_3f275

bb258:                                            ; preds = %dec_label_pc_3f26c
  %v5_3f26f = call i64 @function_40638(i64 %v10_3f25a, i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_3f26f, i64* @rax, align 8
  br label %dec_label_pc_3f275

dec_label_pc_3f275:                               ; preds = %bb258, %dec_label_pc_3f26c
  %v0_3f275 = load i64, i64* @r15, align 8
  %v1_3f275 = add i64 %v0_3f275, 16
  store i64 %v1_3f275, i64* @rax, align 8
  %v1_3f279 = add i64 %v0_3f275, 8
  %v2_3f279 = inttoptr i64 %v1_3f279 to i32*
  %v3_3f279 = load i32, i32* %v2_3f279, align 4
  %v4_3f279 = zext i32 %v3_3f279 to i64
  store i64 %v4_3f279, i64* @rdx, align 8
  %v0_3f27d = load i64, i64* @r14, align 8
  %v2_3f286 = mul i64 %v0_3f27d, 8
  %v3_3f286 = add i64 %v2_3f286, %v1_3f275
  %v4_3f286 = inttoptr i64 %v3_3f286 to i64*
  %v5_3f286 = load i64, i64* %v4_3f286, align 8
  store i64 %v5_3f286, i64* @rbx, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v1_3f29b = add i64 %arg1, 8
  %v2_3f29b = inttoptr i64 %v1_3f29b to i32*
  %v3_3f29b = load i32, i32* %v2_3f29b, align 4
  %v4_3f29b = zext i32 %v3_3f29b to i64
  store i64 %arg1, i64* %r13.global-to-local, align 8
  %v1_3f2a1 = add nsw i64 %v4_3f29b, -1
  store i64 %v1_3f2a1, i64* @rbp, align 8
  store i64 %v1_3f2a1, i64* @rax, align 8
  %v2_3f2ab = mul nsw i64 %v1_3f2a1, 8
  %v3_3f2ab = add i64 %arg1, 16
  %v4_3f2ab = add i64 %v3_3f2ab, %v2_3f2ab
  store i64 %v4_3f2ab, i64* %r12.global-to-local, align 8
  %v4_3f2d74 = trunc i64 %v1_3f2a1 to i32
  %v6_3f2d76 = icmp slt i32 %v4_3f2d74, 0
  %v1_3f2d911 = icmp eq i1 %v6_3f2d76, false
  br i1 %v1_3f2d911, label %dec_label_pc_3f2b8, label %dec_label_pc_3f2db

dec_label_pc_3f2b8:                               ; preds = %dec_label_pc_3f275, %dec_label_pc_3f2c2.dec_label_pc_3f2b8_crit_edge
  %v0_3f2db19 = phi i64 [ %v0_3f2db18, %dec_label_pc_3f2c2.dec_label_pc_3f2b8_crit_edge ], [ %v1_3f2a1, %dec_label_pc_3f275 ]
  %v0_3f2b8 = phi i64 [ %v17_3f2d4, %dec_label_pc_3f2c2.dec_label_pc_3f2b8_crit_edge ], [ %v1_3f2a1, %dec_label_pc_3f275 ]
  %v0_3f2c214 = phi i64 [ %v1_3f2d0, %dec_label_pc_3f2c2.dec_label_pc_3f2b8_crit_edge ], [ %v4_3f2ab, %dec_label_pc_3f275 ]
  %v2_3f2b8 = phi i64 [ %v2_3f2b8.pre, %dec_label_pc_3f2c2.dec_label_pc_3f2b8_crit_edge ], [ %arg1, %dec_label_pc_3f275 ]
  %v1_3f2b8 = trunc i64 %v0_3f2b8 to i32
  %v3_3f2b8 = add i64 %v2_3f2b8, 8
  %v4_3f2b8 = inttoptr i64 %v3_3f2b8 to i32*
  %v5_3f2b8 = load i32, i32* %v4_3f2b8, align 4
  %v11_3f2b8 = icmp ult i32 %v1_3f2b8, %v5_3f2b8
  %v1_3f2bc = icmp eq i1 %v11_3f2b8, false
  br i1 %v1_3f2bc, label %bb259, label %dec_label_pc_3f2c2

bb259:                                            ; preds = %dec_label_pc_3f2b8
  %v2_3f2bc = call i64 @function_410ae()
  store i64 %v2_3f2bc, i64* @rax, align 8
  %v0_3f2c2.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_3f2d4.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_3f2c2

dec_label_pc_3f2c2:                               ; preds = %bb259, %dec_label_pc_3f2b8
  %v0_3f2db18 = phi i64 [ %v2_3f2bc, %bb259 ], [ %v0_3f2db19, %dec_label_pc_3f2b8 ]
  %v0_3f2d4 = phi i64 [ %v0_3f2d4.pre, %bb259 ], [ %v0_3f2b8, %dec_label_pc_3f2b8 ]
  %v0_3f2d0 = phi i64 [ %v0_3f2c2.pre, %bb259 ], [ %v0_3f2c214, %dec_label_pc_3f2b8 ]
  %v1_3f2c2 = inttoptr i64 %v0_3f2d0 to i64*
  %v2_3f2c2 = load i64, i64* %v1_3f2c2, align 8
  store i64 %v2_3f2c2, i64* @rdi, align 8
  %v1_3f2d0 = add i64 %v0_3f2d0, -8
  store i64 %v1_3f2d0, i64* %r12.global-to-local, align 8
  %v1_3f2d4 = trunc i64 %v0_3f2d4 to i32
  %v2_3f2d4 = add i32 %v1_3f2d4, -1
  %v12_3f2d4 = icmp slt i32 %v2_3f2d4, 0
  %v17_3f2d4 = zext i32 %v2_3f2d4 to i64
  store i64 %v17_3f2d4, i64* @rbp, align 8
  %v1_3f2d9 = icmp eq i1 %v12_3f2d4, false
  br i1 %v1_3f2d9, label %dec_label_pc_3f2c2.dec_label_pc_3f2b8_crit_edge, label %dec_label_pc_3f2db

dec_label_pc_3f2c2.dec_label_pc_3f2b8_crit_edge:  ; preds = %dec_label_pc_3f2c2
  %v2_3f2b8.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_3f2b8

dec_label_pc_3f2db:                               ; preds = %dec_label_pc_3f2c2, %dec_label_pc_3f275
  %v0_3f2db = phi i64 [ %v1_3f2a1, %dec_label_pc_3f275 ], [ %v0_3f2db18, %dec_label_pc_3f2c2 ]
  ret i64 %v0_3f2db
}

define i64 @function_3f2e0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3f2e0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp234 = call i32 @__decompiler_undefined_function_2()
  %v0_3f2e0 = load i64, i64* @rbx, align 8
  %v1_3f2e2 = trunc i64 %v0_3f2e0 to i32
  %v3_3f2e2 = udiv i64 %v0_3f2e0, 8388608
  %v10_3f2e2 = urem i64 %v3_3f2e2, 512
  store i64 %v10_3f2e2, i64* @rdi, align 8
  store i64 %arg4, i64* @rax, align 8
  %v2_3f2f6 = mul nuw nsw i64 %v10_3f2e2, 8
  %v3_3f2f6 = add i64 %v2_3f2f6, %arg4
  %v4_3f2f6 = inttoptr i64 %v3_3f2f6 to i64*
  %v5_3f2f6 = load i64, i64* %v4_3f2f6, align 8
  %v1_3f2fa = inttoptr i64 %v5_3f2f6 to i64*
  %v2_3f2fa = load i64, i64* %v1_3f2fa, align 8
  store i64 %v2_3f2fa, i64* @rax, align 8
  %v1_3f2fe = add i64 %v2_3f2fa, 680
  %v2_3f2fe = inttoptr i64 %v1_3f2fe to i64*
  %v3_3f2fe = load i64, i64* %v2_3f2fe, align 8
  store i64 %v3_3f2fe, i64* @rax, align 8
  store i64 %v5_3f2f6, i64* @rdi, align 8
  %v2_3f30a = and i32 %v1_3f2e2, 8372224
  %v3_3f30a = icmp eq i32 %v2_3f30a, 0
  %v9_3f30a = zext i32 %v2_3f30a to i64
  store i64 %v9_3f30a, i64* @rbx, align 8
  %v1_3f310 = icmp eq i1 %v3_3f30a, false
  %v2_3f310 = zext i1 %v1_3f310 to i64
  %v3_3f310 = load i64, i64* @rdx, align 8
  %v4_3f310 = and i64 %v3_3f310, -256
  %v5_3f310 = or i64 %v4_3f310, %v2_3f310
  store i64 %v5_3f310, i64* @rdx, align 8
  %v1_3f313 = trunc i64 %v3_3f2fe to i8
  %v3_3f313 = zext i1 %v1_3f310 to i8
  %v14_3f313 = icmp eq i8 %v1_3f313, %v3_3f313
  br i1 %v14_3f313, label %bb, label %dec_label_pc_3f31b

bb:                                               ; preds = %dec_label_pc_3f2e0
  %v1_3f315 = call i64 @function_4039a()
  store i64 %v1_3f315, i64* @rax, align 8
  br label %dec_label_pc_3f31b

dec_label_pc_3f31b:                               ; preds = %bb, %dec_label_pc_3f2e0
  %v4_3f31b = add i32 %tmp234, 1
  %v1_3f320 = sext i32 %v4_3f31b to i64
  %v2_3f320 = call i64 @function_3efe0(i64 %v1_3f320)
  store i64 %v2_3f320, i64* @rax, align 8
  ret i64 %v2_3f320
}

define i64 @function_3f328(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3f328:
  %r14.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp234 = call i32 @__decompiler_undefined_function_2()
  %v0_3f32c = load i64, i64* %r14.global-to-local, align 8
  store i64 %arg4, i64* @rax, align 8
  %v2_3f33a = mul i64 %v0_3f32c, 8
  %v3_3f33a = add i64 %v2_3f33a, %arg4
  %v4_3f33a = inttoptr i64 %v3_3f33a to i64*
  %v5_3f33a = load i64, i64* %v4_3f33a, align 8
  store i64 %v5_3f33a, i64* @rdi, align 8
  %v1_3f33e = inttoptr i64 %v5_3f33a to i64*
  %v2_3f33e = load i64, i64* %v1_3f33e, align 8
  store i64 %v2_3f33e, i64* @rax, align 8
  %v1_3f341 = add i64 %v2_3f33e, 680
  %v2_3f341 = inttoptr i64 %v1_3f341 to i64*
  %v3_3f341 = load i64, i64* %v2_3f341, align 8
  %v0_3f34a = load i64, i64* @rbx, align 8
  %v1_3f34a = trunc i64 %v0_3f34a to i32
  %v2_3f34a = and i32 %v1_3f34a, 8372224
  %v3_3f34a = icmp eq i32 %v2_3f34a, 0
  %v9_3f34a = zext i32 %v2_3f34a to i64
  store i64 %v9_3f34a, i64* @rbx, align 8
  %v1_3f350 = icmp eq i1 %v3_3f34a, false
  %v2_3f350 = zext i1 %v1_3f350 to i64
  %v3_3f350 = load i64, i64* @rdx, align 8
  %v4_3f350 = and i64 %v3_3f350, -256
  %v5_3f350 = or i64 %v2_3f350, %v4_3f350
  store i64 %v5_3f350, i64* @rdx, align 8
  %v1_3f353 = trunc i64 %v3_3f341 to i8
  %v3_3f353 = zext i1 %v1_3f350 to i8
  %v14_3f353 = icmp eq i8 %v1_3f353, %v3_3f353
  %v1_3f355 = icmp eq i1 %v14_3f353, false
  %v2_3f355 = zext i1 %v1_3f355 to i64
  %v4_3f355 = and i64 %v3_3f341, -256
  %v5_3f355 = or i64 %v2_3f355, %v4_3f355
  store i64 %v5_3f355, i64* @rax, align 8
  %v5_3f35b = trunc i64 %v5_3f355 to i32
  %v6_3f35b = add i32 %v5_3f35b, %tmp234
  %v1_3f35f = sext i32 %v6_3f35b to i64
  %v2_3f35f = call i64 @function_3efe0(i64 %v1_3f35f)
  store i64 %v2_3f35f, i64* @rax, align 8
  ret i64 %v2_3f35f
}

define i64 @function_3f368(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f368:
  %tmp242 = call i64 @__decompiler_undefined_function_0()
  %v0_3f368 = load i64, i64* @rbx, align 8
  %v1_3f36a = trunc i64 %v0_3f368 to i32
  %v3_3f36a = udiv i32 %v1_3f36a, 8388608
  %v10_3f36a = zext i32 %v3_3f36a to i64
  store i64 %v10_3f36a, i64* @rdi, align 8
  %v7_3f36d = icmp ult i32 %v1_3f36a, 2139095040
  %tmp248 = and i32 %v1_3f36a, -8388608
  %tmp249 = icmp eq i32 %tmp248, 2139095040
  %v2_3f373 = or i1 %v7_3f36d, %tmp249
  br i1 %v2_3f373, label %dec_label_pc_3f379, label %bb

bb:                                               ; preds = %dec_label_pc_3f368
  %v7_3f373 = call i64 @function_40220(i64 %v10_3f36a, i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_3f373, i64* @rax, align 8
  %v0_3f38e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3f379

dec_label_pc_3f379:                               ; preds = %dec_label_pc_3f368, %bb
  %v0_3f38e = phi i64 [ %v0_3f368, %dec_label_pc_3f368 ], [ %v0_3f38e.pre, %bb ]
  store i64 %arg1, i64* @rax, align 8
  %v3_3f38a = mul nuw nsw i64 %v10_3f36a, 8
  %v4_3f38a = add i64 %v3_3f38a, %arg1
  %v5_3f38a = inttoptr i64 %v4_3f38a to i64*
  %v6_3f38a = load i64, i64* %v5_3f38a, align 8
  store i64 %v6_3f38a, i64* @rdi, align 8
  %v1_3f38e = trunc i64 %v0_3f38e to i32
  %v3_3f38e = sdiv i32 %v1_3f38e, 16384
  %v10_3f38e = zext i32 %v3_3f38e to i64
  store i64 %v10_3f38e, i64* @rbx, align 8
  %v2_3f393 = urem i32 %v3_3f38e, 512
  %v9_3f393 = zext i32 %v2_3f393 to i64
  store i64 %v9_3f393, i64* @rax, align 8
  %v9_3f39d = icmp ugt i32 %v2_3f393, 255
  br i1 %v9_3f39d, label %dec_label_pc_3f3a3, label %bb247

bb247:                                            ; preds = %dec_label_pc_3f379
  %v11_3f39d = call i64 @function_40480(i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_3f39d, i64* @rax, align 8
  %v0_3f3c1.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_3f3a3

dec_label_pc_3f3a3:                               ; preds = %dec_label_pc_3f379, %bb247
  %v0_3f3c1 = phi i64 [ %v6_3f38a, %dec_label_pc_3f379 ], [ %v0_3f3c1.pre, %bb247 ]
  %v1_3f3ae = add i64 %tmp242, 16
  store i64 %v1_3f3ae, i64* @rax, align 8
  %v1_3f3b2 = add i64 %tmp242, 8
  %v2_3f3b2 = inttoptr i64 %v1_3f3b2 to i32*
  %v3_3f3b2 = load i32, i32* %v2_3f3b2, align 4
  %v4_3f3b2 = zext i32 %v3_3f3b2 to i64
  store i64 %v4_3f3b2, i64* @rdx, align 8
  %v1_3f3c1 = inttoptr i64 %v0_3f3c1 to i64*
  %v2_3f3c1 = load i64, i64* %v1_3f3c1, align 8
  store i64 %v2_3f3c1, i64* @rax, align 8
  %v1_3f3c4 = add i64 %v2_3f3c1, 1912
  %v2_3f3c4 = inttoptr i64 %v1_3f3c4 to i64*
  %v3_3f3c4 = load i64, i64* %v2_3f3c4, align 8
  store i64 %v3_3f3c4, i64* @rax, align 8
  ret i64 %v3_3f3c4
}

define i64 @function_3f3d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_3f3d8:
  %r14.global-to-local = alloca i64, align 8
  %tmp243 = call i64 @__decompiler_undefined_function_0()
  %v0_3f3d8 = load i64, i64* @rbx, align 8
  %v1_3f3da = trunc i64 %v0_3f3d8 to i32
  %v3_3f3da = udiv i32 %v1_3f3da, 8388608
  %v10_3f3da = zext i32 %v3_3f3da to i64
  store i64 %v10_3f3da, i64* @rdi, align 8
  %v7_3f3dd = icmp ult i32 %v1_3f3da, 2139095040
  %tmp248 = and i32 %v1_3f3da, -8388608
  %tmp249 = icmp eq i32 %tmp248, 2139095040
  %v2_3f3e3 = or i1 %v7_3f3dd, %tmp249
  br i1 %v2_3f3e3, label %bb, label %dec_label_pc_3f3e9

bb:                                               ; preds = %dec_label_pc_3f3d8
  %v6_3f3e3 = call i64 @function_40200(i64 %v10_3f3da, i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_3f3e3, i64* @rax, align 8
  %v0_3f408.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3f3e9

dec_label_pc_3f3e9:                               ; preds = %bb, %dec_label_pc_3f3d8
  %v0_3f408 = phi i64 [ %v0_3f408.pre, %bb ], [ %v0_3f3d8, %dec_label_pc_3f3d8 ]
  store i64 %v10_3f3da, i64* @rdi, align 8
  %v1_3f3f5 = add i64 %tmp243, 16
  store i64 %v1_3f3f5, i64* @rax, align 8
  %v1_3f3f9 = add i64 %tmp243, 8
  %v2_3f3f9 = inttoptr i64 %v1_3f3f9 to i32*
  %v3_3f3f9 = load i32, i32* %v2_3f3f9, align 4
  %v4_3f3f9 = zext i32 %v3_3f3f9 to i64
  store i64 %v4_3f3f9, i64* @rdx, align 8
  %v2_3f404 = mul nuw nsw i64 %v10_3f3da, 8
  %v3_3f404 = add i64 %v2_3f404, %v1_3f3f5
  %v4_3f404 = inttoptr i64 %v3_3f404 to i64*
  %v5_3f404 = load i64, i64* %v4_3f404, align 8
  store i64 %v5_3f404, i64* @rdi, align 8
  %v1_3f408 = trunc i64 %v0_3f408 to i32
  %v3_3f408 = sdiv i32 %v1_3f408, 16384
  %v10_3f408 = zext i32 %v3_3f408 to i64
  store i64 %v10_3f408, i64* @rbx, align 8
  %v2_3f40d = urem i32 %v3_3f408, 512
  %v9_3f40d = zext i32 %v2_3f40d to i64
  store i64 %v9_3f40d, i64* @rax, align 8
  %v9_3f417 = icmp ugt i32 %v2_3f40d, 255
  br i1 %v9_3f417, label %dec_label_pc_3f41d, label %bb247

bb247:                                            ; preds = %dec_label_pc_3f3e9
  %v11_3f417 = call i64 @function_40440(i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_3f417, i64* @rax, align 8
  %v0_3f43b.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_3f41d

dec_label_pc_3f41d:                               ; preds = %dec_label_pc_3f3e9, %bb247
  %v0_3f43b = phi i64 [ %v5_3f404, %dec_label_pc_3f3e9 ], [ %v0_3f43b.pre, %bb247 ]
  store i64 %v1_3f3f5, i64* @rax, align 8
  %v3_3f42c = load i32, i32* %v2_3f3f9, align 4
  %v4_3f42c = zext i32 %v3_3f42c to i64
  store i64 %v4_3f42c, i64* @rdx, align 8
  %v1_3f43b = inttoptr i64 %v0_3f43b to i64*
  %v2_3f43b = load i64, i64* %v1_3f43b, align 8
  store i64 %v2_3f43b, i64* @rax, align 8
  %v1_3f43e = add i64 %v2_3f43b, 1864
  %v2_3f43e = inttoptr i64 %v1_3f43e to i64*
  %v3_3f43e = load i64, i64* %v2_3f43e, align 8
  %v0_3f447 = load i64, i64* %r14.global-to-local, align 8
  %v4_3f447 = trunc i64 %v0_3f447 to i32
  %v5_3f447 = icmp eq i32 %v4_3f447, 0
  %v1_3f44a = icmp eq i1 %v5_3f447, false
  %v2_3f44a = zext i1 %v1_3f44a to i64
  %v4_3f44a = and i64 %v4_3f42c, 4294967040
  %v5_3f44a = or i64 %v2_3f44a, %v4_3f44a
  store i64 %v5_3f44a, i64* @rdx, align 8
  %v1_3f44d = zext i1 %v1_3f44a to i8
  %v3_3f44d = trunc i64 %v3_3f43e to i8
  %v14_3f44d = icmp eq i8 %v1_3f44d, %v3_3f44d
  %v1_3f44f = icmp eq i1 %v14_3f44d, false
  %v2_3f44f = zext i1 %v1_3f44f to i64
  %v4_3f44f = and i64 %v3_3f43e, -256
  %v5_3f44f = or i64 %v2_3f44f, %v4_3f44f
  store i64 %v5_3f44f, i64* @rax, align 8
  %v5_3f455 = trunc i64 %v5_3f44f to i32
  %v6_3f455 = add i32 %v5_3f455, %arg1
  %v1_3f459 = sext i32 %v6_3f455 to i64
  %v2_3f459 = call i64 @function_3efe0(i64 %v1_3f459)
  store i64 %v2_3f459, i64* @rax, align 8
  ret i64 %v2_3f459
}

define i64 @function_3f460(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f460:
  %v0_3f460 = load i64, i64* @rbx, align 8
  %v1_3f462 = trunc i64 %v0_3f460 to i32
  %v3_3f462 = udiv i32 %v1_3f462, 8388608
  %v10_3f462 = zext i32 %v3_3f462 to i64
  store i64 %v10_3f462, i64* @rdi, align 8
  %v7_3f465 = icmp ult i32 %v1_3f462, 2139095040
  %tmp246 = and i32 %v1_3f462, -8388608
  %tmp247 = icmp eq i32 %tmp246, 2139095040
  %v2_3f46b = or i1 %v7_3f465, %tmp247
  br i1 %v2_3f46b, label %bb, label %dec_label_pc_3f471

bb:                                               ; preds = %dec_label_pc_3f460
  %v6_3f46b = call i64 @function_401e0(i64 %v10_3f462, i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_3f46b, i64* @rax, align 8
  %v0_3f490.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3f471

dec_label_pc_3f471:                               ; preds = %bb, %dec_label_pc_3f460
  %v0_3f490 = phi i64 [ %v0_3f490.pre, %bb ], [ %v0_3f460, %dec_label_pc_3f460 ]
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v10_3f462, i64* @rdi, align 8
  %v1_3f47d = add i64 %arg1, 16
  store i64 %v1_3f47d, i64* @rax, align 8
  %v1_3f481 = add i64 %arg1, 8
  %v2_3f481 = inttoptr i64 %v1_3f481 to i32*
  %v3_3f481 = load i32, i32* %v2_3f481, align 4
  %v4_3f481 = zext i32 %v3_3f481 to i64
  store i64 %v4_3f481, i64* @rdx, align 8
  %v2_3f48c = mul nuw nsw i64 %v10_3f462, 8
  %v3_3f48c = add i64 %v2_3f48c, %v1_3f47d
  %v4_3f48c = inttoptr i64 %v3_3f48c to i64*
  %v5_3f48c = load i64, i64* %v4_3f48c, align 8
  store i64 %v5_3f48c, i64* @rdi, align 8
  %v1_3f490 = trunc i64 %v0_3f490 to i32
  %v3_3f490 = sdiv i32 %v1_3f490, 16384
  %v10_3f490 = zext i32 %v3_3f490 to i64
  store i64 %v10_3f490, i64* @rbx, align 8
  %v2_3f495 = urem i32 %v3_3f490, 512
  %v9_3f495 = zext i32 %v2_3f495 to i64
  store i64 %v9_3f495, i64* @rax, align 8
  %v9_3f49f = icmp ugt i32 %v2_3f495, 255
  br i1 %v9_3f49f, label %dec_label_pc_3f4a5, label %bb245

bb245:                                            ; preds = %dec_label_pc_3f471
  %v11_3f49f = call i64 @function_40518(i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_3f49f, i64* @rax, align 8
  %v0_3f4c3.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_3f4a5

dec_label_pc_3f4a5:                               ; preds = %dec_label_pc_3f471, %bb245
  %v0_3f4c3 = phi i64 [ %v5_3f48c, %dec_label_pc_3f471 ], [ %v0_3f4c3.pre, %bb245 ]
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v1_3f47d, i64* @rax, align 8
  %v3_3f4b4 = load i32, i32* %v2_3f481, align 4
  %v4_3f4b4 = zext i32 %v3_3f4b4 to i64
  store i64 %v4_3f4b4, i64* @rdx, align 8
  %v1_3f4c3 = inttoptr i64 %v0_3f4c3 to i64*
  %v2_3f4c3 = load i64, i64* %v1_3f4c3, align 8
  store i64 %v2_3f4c3, i64* @rax, align 8
  %v1_3f4c6 = add i64 %v2_3f4c3, 1568
  %v2_3f4c6 = inttoptr i64 %v1_3f4c6 to i64*
  %v3_3f4c6 = load i64, i64* %v2_3f4c6, align 8
  store i64 %v3_3f4c6, i64* @rax, align 8
  ret i64 %v3_3f4c6
}

define i64 @function_3f4d8(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f4d8:
  %r14.global-to-local = alloca i64, align 8
  %tmp237 = call i32 @__decompiler_undefined_function_2()
  %v4_3f4d8 = zext i32 %tmp237 to i64
  %v0_3f4dc = load i64, i64* @rbx, align 8
  %v3_3f4de = udiv i64 %v0_3f4dc, 16384
  %v10_3f4de = urem i64 %v3_3f4de, 262144
  store i64 %v10_3f4de, i64* @rdi, align 8
  %v0_3f4e1 = load i64, i64* %r14.global-to-local, align 8
  %v4_3f4e1 = trunc i64 %v0_3f4e1 to i32
  %v5_3f4e1 = icmp eq i32 %v4_3f4e1, 0
  %v3_3f4e4 = add nsw i64 %v4_3f4d8, -131071
  %v4_3f4e4 = add nsw i64 %v3_3f4e4, %v10_3f4de
  store i64 %v4_3f4e4, i64* @rax, align 8
  br i1 %v5_3f4e1, label %bb, label %dec_label_pc_3f4f5

bb:                                               ; preds = %dec_label_pc_3f4d8
  %v2_3f4ef = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3f4ef, i64* @rax, align 8
  %v0_3f4fa.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_3f4f5

dec_label_pc_3f4f5:                               ; preds = %bb, %dec_label_pc_3f4d8
  %v0_3f4fa = phi i64 [ %v0_3f4fa.pre, %bb ], [ %v0_3f4e1, %dec_label_pc_3f4d8 ]
  store i64 %arg1, i64* @rcx, align 8
  %v2_3f4fa = add i64 %v0_3f4fa, 4294967295
  %v17_3f4fa = and i64 %v2_3f4fa, 4294967295
  store i64 %v17_3f4fa, i64* %r14.global-to-local, align 8
  %v1_3f4fe = add i64 %arg1, 8
  %v2_3f4fe = inttoptr i64 %v1_3f4fe to i32*
  %v3_3f4fe = load i32, i32* %v2_3f4fe, align 4
  %v2_3f501 = add i32 %v3_3f4fe, -1
  %v17_3f501 = zext i32 %v2_3f501 to i64
  store i64 %v17_3f501, i64* @rbx, align 8
  store i64 %v17_3f501, i64* @rax, align 8
  ret i64 %v17_3f501
}

define i64 @function_3f510(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3f510:
  store i64 %arg1, i64* @rdi, align 8
  %v0_3f510 = load i64, i64* @rbp, align 8
  %v1_3f510 = add i64 %v0_3f510, -8
  store i64 %v1_3f510, i64* @rbp, align 8
  %v0_3f514 = load i64, i64* @rbx, align 8
  %v1_3f514 = trunc i64 %v0_3f514 to i32
  %v2_3f514 = add i32 %v1_3f514, -1
  %v12_3f514 = icmp slt i32 %v2_3f514, 0
  %v17_3f514 = zext i32 %v2_3f514 to i64
  store i64 %v17_3f514, i64* @rbx, align 8
  br i1 %v12_3f514, label %bb, label %dec_label_pc_3f51f

bb:                                               ; preds = %dec_label_pc_3f510
  %v2_3f519 = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3f519, i64* @rax, align 8
  %v0_3f527.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3f51f

dec_label_pc_3f51f:                               ; preds = %bb, %dec_label_pc_3f510
  %v0_3f527 = phi i64 [ %v0_3f527.pre, %bb ], [ %v17_3f514, %dec_label_pc_3f510 ]
  store i64 %arg3, i64* @rax, align 8
  %v1_3f524 = add i64 %arg3, 8
  %v2_3f524 = inttoptr i64 %v1_3f524 to i32*
  %v3_3f524 = load i32, i32* %v2_3f524, align 4
  %v4_3f524 = zext i32 %v3_3f524 to i64
  store i64 %v4_3f524, i64* @rax, align 8
  %v1_3f527 = trunc i64 %v0_3f527 to i32
  %v9_3f527 = icmp ult i32 %v1_3f527, %v3_3f524
  %v1_3f529 = icmp eq i1 %v9_3f527, false
  br i1 %v1_3f529, label %bb11, label %dec_label_pc_3f52f

bb11:                                             ; preds = %dec_label_pc_3f51f
  %v2_3f529 = call i64 @function_40da1()
  store i64 %v2_3f529, i64* @rax, align 8
  br label %dec_label_pc_3f52f

dec_label_pc_3f52f:                               ; preds = %bb11, %dec_label_pc_3f51f
  %v0_3f52f = load i64, i64* @rbp, align 8
  %v1_3f52f = inttoptr i64 %v0_3f52f to i64*
  %v2_3f52f = load i64, i64* %v1_3f52f, align 8
  store i64 %v2_3f52f, i64* @rdi, align 8
  %v1_3f533 = icmp eq i64 %v2_3f52f, 0
  br i1 %v1_3f533, label %bb12, label %dec_label_pc_3f538

bb12:                                             ; preds = %dec_label_pc_3f52f
  %v4_3f536 = call i64 @function_3f510(i64 0, i64 %arg2, i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_3f536, i64* @rax, align 8
  br label %dec_label_pc_3f538

dec_label_pc_3f538:                               ; preds = %bb12, %dec_label_pc_3f52f
  %v1_3f538 = add i64 %v2_3f52f, 16
  %v2_3f538 = inttoptr i64 %v1_3f538 to i32*
  %v3_3f538 = load i32, i32* %v2_3f538, align 4
  %v4_3f538 = zext i32 %v3_3f538 to i64
  store i64 %v4_3f538, i64* @rax, align 8
  %v0_3f53b = load i64, i64* @r14, align 8
  %v8_3f53e = icmp sgt i64 %v0_3f53b, %v4_3f538
  br i1 %v8_3f53e, label %bb13, label %dec_label_pc_3f540

bb13:                                             ; preds = %dec_label_pc_3f538
  %v12_3f53e = call i64 @function_3f510(i64 %v2_3f52f, i64 %arg2, i64 ptrtoint (i32* @0 to i64))
  store i64 %v12_3f53e, i64* @rax, align 8
  br label %dec_label_pc_3f540

dec_label_pc_3f540:                               ; preds = %bb13, %dec_label_pc_3f538
  store i64 %arg3, i64* @rax, align 8
  %v3_3f54a = load i32, i32* %v2_3f524, align 4
  %v4_3f54a = zext i32 %v3_3f54a to i64
  store i64 %v4_3f54a, i64* @rax, align 8
  %v0_3f54d = load i64, i64* @rbx, align 8
  %v1_3f54d = trunc i64 %v0_3f54d to i32
  %v9_3f54d = icmp ult i32 %v1_3f54d, %v3_3f54a
  %v1_3f54f = icmp eq i1 %v9_3f54d, false
  br i1 %v1_3f54f, label %bb14, label %dec_label_pc_3f555

bb14:                                             ; preds = %dec_label_pc_3f540
  %v2_3f54f = call i64 @function_40def()
  store i64 %v2_3f54f, i64* @rax, align 8
  br label %dec_label_pc_3f555

dec_label_pc_3f555:                               ; preds = %bb14, %dec_label_pc_3f540
  store i64 %arg3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3f570(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f570:
  %r12.global-to-local = alloca i64, align 8
  %v0_3f570 = load i64, i64* @rbx, align 8
  %v3_3f575 = udiv i64 %v0_3f570, 8388608
  %v10_3f575 = urem i64 %v3_3f575, 512
  store i64 %v10_3f575, i64* %r12.global-to-local, align 8
  %v3_3f5794 = udiv i64 %v0_3f570, 16384
  %v2_3f57c = urem i64 %v3_3f5794, 512
  store i64 %v2_3f57c, i64* @rdi, align 8
  store i64 %v2_3f57c, i64* @rbx, align 8
  store i64 %arg1, i64* @rdx, align 8
  store i64 %v2_3f57c, i64* @rax, align 8
  %v2_3f5a6 = mul nuw nsw i64 %v2_3f57c, 8
  %v3_3f5a6 = add i64 %v2_3f5a6, %arg1
  %v4_3f5a6 = inttoptr i64 %v3_3f5a6 to i64*
  %v5_3f5a6 = load i64, i64* %v4_3f5a6, align 8
  store i64 %v5_3f5a6, i64* @rdi, align 8
  %v1_3f5aa = inttoptr i64 %v5_3f5a6 to i64*
  %v2_3f5aa = load i64, i64* %v1_3f5aa, align 8
  store i64 %v2_3f5aa, i64* @rax, align 8
  %v1_3f5ad = add i64 %v2_3f5aa, 2088
  %v2_3f5ad = inttoptr i64 %v1_3f5ad to i64*
  %v3_3f5ad = load i64, i64* %v2_3f5ad, align 8
  store i64 %v3_3f5ad, i64* @rax, align 8
  %v1_3f5b6 = icmp eq i64 %v3_3f5ad, 0
  store i64 %v3_3f5ad, i64* @rbp, align 8
  %v1_3f5bc = icmp eq i1 %v1_3f5b6, false
  br i1 %v1_3f5bc, label %dec_label_pc_3f5f5, label %dec_label_pc_3f5be

dec_label_pc_3f5be:                               ; preds = %dec_label_pc_3f570
  ret i64 %v3_3f5ad

dec_label_pc_3f5c8:                               ; preds = %dec_label_pc_3f622, %dec_label_pc_3f60d
  %v1_3f5c8 = inttoptr i64 %v5_3f615 to i64*
  %v2_3f5c8 = load i64, i64* %v1_3f5c8, align 8
  store i64 %v2_3f5c8, i64* @rax, align 8
  %v1_3f5cc = add i64 %v2_3f5c8, 2056
  %v2_3f5cc = inttoptr i64 %v1_3f5cc to i64*
  %v3_3f5cc = load i64, i64* %v2_3f5cc, align 8
  store i64 %v3_3f5cc, i64* @rax, align 8
  store i64 %v5_3f615, i64* @rdi, align 8
  %v0_3f5d8 = load i64, i64* inttoptr (i64 259551 to i64*), align 8
  store i64 %v0_3f5d8, i64* @rdx, align 8
  %v2_3f5df = add i64 %v0_3f619, 8
  %v3_3f5df = inttoptr i64 %v2_3f5df to i64*
  store i64 %v0_3f5d8, i64* %v3_3f5df, align 8
  %v0_3f5e3 = load i64, i64* @rbp, align 8
  %v1_3f5e3 = add i64 %v0_3f5e3, 16
  %v2_3f5e3 = inttoptr i64 %v1_3f5e3 to i32*
  store i32 0, i32* %v2_3f5e3, align 4
  %v0_3f5ea = load i64, i64* @rbp, align 8
  %v1_3f5ea = add i64 %v0_3f5ea, 20
  %v2_3f5ea = inttoptr i64 %v1_3f5ea to i32*
  store i32 0, i32* %v2_3f5ea, align 4
  %v0_3f5f1 = load i64, i64* @rax, align 8
  %v1_3f5f1 = load i64, i64* @rbp, align 8
  %v2_3f5f1 = add i64 %v1_3f5f1, 24
  %v3_3f5f1 = inttoptr i64 %v2_3f5f1 to i64*
  store i64 %v0_3f5f1, i64* %v3_3f5f1, align 8
  %v0_3f5f5.pre = load i64, i64* @rbx, align 8
  %v2_3f5f8.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_3f5f5

dec_label_pc_3f5f5:                               ; preds = %dec_label_pc_3f570, %dec_label_pc_3f5c8
  %v2_3f5f8 = phi i64 [ %v2_3f5f8.pre, %dec_label_pc_3f5c8 ], [ %v10_3f575, %dec_label_pc_3f570 ]
  %v0_3f5f5 = phi i64 [ %v0_3f5f5.pre, %dec_label_pc_3f5c8 ], [ %v2_3f57c, %dec_label_pc_3f570 ]
  %v2_3f5f5 = add i64 %v0_3f5f5, 4294967295
  %v17_3f5f5 = and i64 %v2_3f5f5, 4294967295
  store i64 %v17_3f5f5, i64* @rbx, align 8
  %v5_3f5fb = icmp slt i64 %v17_3f5f5, %v2_3f5f8
  br i1 %v5_3f5fb, label %bb, label %dec_label_pc_3f601

bb:                                               ; preds = %dec_label_pc_3f5f5
  %v6_3f5fb = call i64 @function_40574()
  store i64 %v6_3f5fb, i64* @rax, align 8
  %v2_3f605.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3f601

dec_label_pc_3f601:                               ; preds = %bb, %dec_label_pc_3f5f5
  %v2_3f605 = phi i64 [ %v2_3f605.pre, %bb ], [ %v17_3f5f5, %dec_label_pc_3f5f5 ]
  %v0_3f601 = load i64, i64* @r15, align 8
  %v1_3f601 = add i64 %v0_3f601, 8
  %v2_3f601 = inttoptr i64 %v1_3f601 to i32*
  %v3_3f601 = load i32, i32* %v2_3f601, align 4
  %v4_3f601 = zext i32 %v3_3f601 to i64
  store i64 %v4_3f601, i64* @rax, align 8
  %v3_3f605 = trunc i64 %v2_3f605 to i32
  %tmp245 = icmp ugt i32 %v3_3f601, %v3_3f605
  br i1 %tmp245, label %dec_label_pc_3f60d, label %bb243

bb243:                                            ; preds = %dec_label_pc_3f601
  %v3_3f607 = call i64 @function_40de6()
  store i64 %v3_3f607, i64* @rax, align 8
  %v0_3f612.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3f60d

dec_label_pc_3f60d:                               ; preds = %dec_label_pc_3f601, %bb243
  %v0_3f62a = phi i64 [ %v0_3f612.pre, %bb243 ], [ %v2_3f605, %dec_label_pc_3f601 ]
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v0_3f62a, i64* @rax, align 8
  %v2_3f615 = mul i64 %v0_3f62a, 8
  %v3_3f615 = add i64 %v2_3f615, %arg1
  %v4_3f615 = inttoptr i64 %v3_3f615 to i64*
  %v5_3f615 = load i64, i64* %v4_3f615, align 8
  %v0_3f619 = load i64, i64* @rbp, align 8
  %v1_3f619 = add i64 %v0_3f619, 24
  %v2_3f619 = inttoptr i64 %v1_3f619 to i64*
  %v3_3f619 = load i64, i64* %v2_3f619, align 8
  %v1_3f61d = icmp eq i64 %v3_3f619, 0
  %v1_3f620 = icmp eq i1 %v1_3f61d, false
  br i1 %v1_3f620, label %dec_label_pc_3f5c8, label %dec_label_pc_3f622

dec_label_pc_3f622:                               ; preds = %dec_label_pc_3f60d
  store i64 %v0_3f619, i64* @rdi, align 8
  br label %dec_label_pc_3f5c8
}

define i64 @function_3f631() local_unnamed_addr {
dec_label_pc_3f631:
  %v0_3f631 = load i64, i64* @rdi, align 8
  %v1_3f631 = call i64 @function_3f64a(i64 %v0_3f631)
  store i64 %v1_3f631, i64* @rax, align 8
  ret i64 %v1_3f631
}

define i64 @function_3f633(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f633:
  %v0_3f637 = load i64, i64* @rbx, align 8
  store i64 %arg1, i64* @rax, align 8
  store i64 %v0_3f637, i64* @rdi, align 8
  %v2_3f646 = mul i64 %v0_3f637, 8
  %v3_3f646 = add i64 %v2_3f646, %arg1
  %v4_3f646 = inttoptr i64 %v3_3f646 to i64*
  %v5_3f646 = load i64, i64* %v4_3f646, align 8
  store i64 %v5_3f646, i64* @rdi, align 8
  ret i64 %arg1
}

define i64 @function_3f64a(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f64a:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_3f64d = add i64 %arg1, 1536
  %v2_3f64d = inttoptr i64 %v1_3f64d to i64*
  %v3_3f64d = load i64, i64* %v2_3f64d, align 8
  store i64 %v3_3f64d, i64* @rax, align 8
  store i64 %v3_3f64d, i64* @rbx, align 8
  %v0_3f659 = load i64, i64* @r15, align 8
  %v1_3f659 = add i64 %v0_3f659, 8
  %v2_3f659 = inttoptr i64 %v1_3f659 to i32*
  %v3_3f659 = load i32, i32* %v2_3f659, align 4
  %v4_3f659 = zext i32 %v3_3f659 to i64
  store i64 %v4_3f659, i64* @rax, align 8
  ret i64 %v4_3f659
}

define i64 @function_3f670(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f670:
  %v1_3f675 = load i64, i64* @r14, align 8
  %v2_3f675 = mul i64 %v1_3f675, 8
  %v3_3f675 = add i64 %v2_3f675, %arg1
  store i64 %v3_3f675, i64* @rbp, align 8
  %v0_3f67c = load i64, i64* @r15, align 8
  store i64 %v0_3f67c, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3f686() local_unnamed_addr {
dec_label_pc_3f686:
  %rbp.global-to-local = alloca i64, align 8
  %v0_3f686 = load i64, i64* @rbx, align 8
  %v1_3f686 = load i64, i64* %rbp.global-to-local, align 8
  %v2_3f686 = inttoptr i64 %v1_3f686 to i64*
  store i64 %v0_3f686, i64* %v2_3f686, align 8
  %v1_3f68a = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v1_3f68a, i64* @rax, align 8
  ret i64 %v1_3f68a
}

define i64 @function_3f691() local_unnamed_addr {
dec_label_pc_3f691:
  %v0_3f691 = load i64, i64* @rdi, align 8
  %v1_3f691 = call i64 @function_3f6aa(i64 %v0_3f691)
  store i64 %v1_3f691, i64* @rax, align 8
  ret i64 %v1_3f691
}

define i64 @function_3f693(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f693:
  %v0_3f697 = load i64, i64* @rbx, align 8
  store i64 %arg1, i64* @rax, align 8
  store i64 %v0_3f697, i64* @rdi, align 8
  %v2_3f6a6 = mul i64 %v0_3f697, 8
  %v3_3f6a6 = add i64 %v2_3f6a6, %arg1
  %v4_3f6a6 = inttoptr i64 %v3_3f6a6 to i64*
  %v5_3f6a6 = load i64, i64* %v4_3f6a6, align 8
  store i64 %v5_3f6a6, i64* @rdi, align 8
  ret i64 %arg1
}

define i64 @function_3f6aa(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f6aa:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_3f6ad = add i64 %arg1, 1520
  %v2_3f6ad = inttoptr i64 %v1_3f6ad to i64*
  %v3_3f6ad = load i64, i64* %v2_3f6ad, align 8
  store i64 %v3_3f6ad, i64* @rax, align 8
  store i64 %v3_3f6ad, i64* @rbx, align 8
  %v0_3f6b9 = load i64, i64* @r15, align 8
  %v1_3f6b9 = add i64 %v0_3f6b9, 8
  %v2_3f6b9 = inttoptr i64 %v1_3f6b9 to i32*
  %v3_3f6b9 = load i32, i32* %v2_3f6b9, align 4
  %v4_3f6b9 = zext i32 %v3_3f6b9 to i64
  store i64 %v4_3f6b9, i64* @rax, align 8
  %v0_3f6bd = load i64, i64* @r14, align 8
  %v1_3f6bd = trunc i64 %v0_3f6bd to i32
  %v9_3f6bd = icmp ult i32 %v1_3f6bd, %v3_3f6b9
  br i1 %v9_3f6bd, label %bb, label %dec_label_pc_3f6c2

bb:                                               ; preds = %dec_label_pc_3f6aa
  %v2_3f6c0 = call i64 @function_3f670(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3f6c0, i64* @rax, align 8
  %v0_3f6c2.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_3f6c2

dec_label_pc_3f6c2:                               ; preds = %bb, %dec_label_pc_3f6aa
  %v0_3f6c2 = phi i64 [ %v0_3f6c2.pre, %bb ], [ %v0_3f6bd, %dec_label_pc_3f6aa ]
  store i64 %v0_3f6c2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3fbc0() local_unnamed_addr {
dec_label_pc_3fbc0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_3fc04(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3fc04:
  %cf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3fc04 = load i64, i64* @rax, align 8
  %v1_3fc04 = add i64 %v0_3fc04, -117
  %v2_3fc04 = inttoptr i64 %v1_3fc04 to i8*
  %v3_3fc04 = load i8, i8* %v2_3fc04, align 1
  %v5_3fc04 = trunc i64 %arg4 to i8
  %v6_3fc04 = load i1, i1* %cf.global-to-local, align 1
  %v7_3fc04 = zext i1 %v6_3fc04 to i8
  %v8_3fc04 = add i8 %v3_3fc04, %v5_3fc04
  %v9_3fc04 = add i8 %v7_3fc04, %v8_3fc04
  %v27_3fc04 = icmp ule i8 %v9_3fc04, %v3_3fc04
  %v28_3fc04 = icmp ult i8 %v8_3fc04, %v3_3fc04
  %v29_3fc04 = select i1 %v6_3fc04, i1 %v27_3fc04, i1 %v28_3fc04
  store i1 %v29_3fc04, i1* %cf.global-to-local, align 1
  store i8 %v9_3fc04, i8* %v2_3fc04, align 1
  %v0_3fc07 = load i64, i64* @rcx, align 8
  %v1_3fc07 = trunc i64 %v0_3fc07 to i8
  %v2_3fc07 = load i64, i64* @rax, align 8
  %v3_3fc07 = trunc i64 %v2_3fc07 to i8
  %v4_3fc07 = load i1, i1* %cf.global-to-local, align 1
  %v5_3fc07 = zext i1 %v4_3fc07 to i8
  %v6_3fc07 = add i8 %v3_3fc07, %v1_3fc07
  %v7_3fc07 = add i8 %v6_3fc07, %v5_3fc07
  %v25_3fc07 = icmp ule i8 %v7_3fc07, %v1_3fc07
  %v26_3fc07 = icmp ult i8 %v6_3fc07, %v1_3fc07
  %v27_3fc07 = select i1 %v4_3fc07, i1 %v25_3fc07, i1 %v26_3fc07
  store i1 %v27_3fc07, i1* %cf.global-to-local, align 1
  %v28_3fc07 = zext i8 %v7_3fc07 to i64
  %v30_3fc07 = and i64 %v0_3fc07, -256
  %v31_3fc07 = or i64 %v28_3fc07, %v30_3fc07
  store i64 %v31_3fc07, i64* @rcx, align 8
  %v4_3fc0a = call i64 @function_3fc23(i64 %arg1, i64 %arg2, i64 %arg3, i64 %v31_3fc07)
  store i64 %v4_3fc0a, i64* @rax, align 8
  ret i64 %v4_3fc0a
}

define i64 @function_3fc11(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3fc11:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v5_3fc111 = or i64 %arg4, %arg1
  %v5_3fc11 = trunc i64 %v5_3fc111 to i8
  %v12_3fc11 = inttoptr i64 %arg4 to i8*
  store i8 %v5_3fc11, i8* %v12_3fc11, align 1
  %v0_3fc14 = load i64, i64* @rax, align 8
  ret i64 %v0_3fc14
}

define i64 @function_3fc23(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3fc23:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3fc24 = load i64, i64* @rcx, align 8
  %v1_3fc24 = add i64 %v0_3fc24, 57
  %v2_3fc24 = inttoptr i64 %v1_3fc24 to i8*
  %v3_3fc24 = load i8, i8* %v2_3fc24, align 1
  %v4_3fc24 = load i64, i64* @rax, align 8
  %v5_3fc24 = trunc i64 %v4_3fc24 to i8
  %v6_3fc24 = or i8 %v5_3fc24, %v3_3fc24
  store i8 %v6_3fc24, i8* %v2_3fc24, align 1
  %v15_3fc24 = load i64, i64* @rax, align 8
  ret i64 %v15_3fc24
}

define i64 @function_3fc5a() local_unnamed_addr {
dec_label_pc_3fc5a:
  %v0_3fc5a = load i64, i64* @rax, align 8
  ret i64 %v0_3fc5a
}

define i64 @function_3fc70(i64 %arg1) local_unnamed_addr {
dec_label_pc_3fc70:
  %r14.global-to-local = alloca i64, align 8
  %tmp238 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rax, align 8
  %v1_3fc75 = add i64 %arg1, 16
  %v2_3fc75 = inttoptr i64 %v1_3fc75 to i64*
  %v3_3fc75 = load i64, i64* %v2_3fc75, align 8
  store i64 %v3_3fc75, i64* @rax, align 8
  %v1_3fc79 = add i64 %v3_3fc75, 16
  store i64 %v1_3fc79, i64* @rdx, align 8
  %v1_3fc7d = add i64 %v3_3fc75, 8
  %v2_3fc7d = inttoptr i64 %v1_3fc7d to i32*
  %v3_3fc7d = load i32, i32* %v2_3fc7d, align 4
  %v4_3fc7d = zext i32 %v3_3fc7d to i64
  store i64 %v4_3fc7d, i64* @rax, align 8
  %v0_3fc80 = load i64, i64* %r14.global-to-local, align 8
  %v2_3fc89 = mul i64 %v0_3fc80, 8
  %v3_3fc89 = add i64 %v2_3fc89, %v1_3fc79
  %v4_3fc89 = inttoptr i64 %v3_3fc89 to i64*
  %v5_3fc89 = load i64, i64* %v4_3fc89, align 8
  store i64 %v5_3fc89, i64* @rax, align 8
  %v1_3fc8d = icmp eq i64 %v5_3fc89, 0
  br i1 %v1_3fc8d, label %bb, label %dec_label_pc_3fc96

bb:                                               ; preds = %dec_label_pc_3fc70
  %v1_3fc90 = call i64 @function_40ed6()
  store i64 %v1_3fc90, i64* @rax, align 8
  br label %dec_label_pc_3fc96

dec_label_pc_3fc96:                               ; preds = %bb, %dec_label_pc_3fc70
  %v0_3fc96 = phi i64 [ %v1_3fc90, %bb ], [ %v5_3fc89, %dec_label_pc_3fc70 ]
  %v1_3fc96 = add i64 %v0_3fc96, 8
  %v2_3fc96 = inttoptr i64 %v1_3fc96 to i64*
  %v3_3fc96 = load i64, i64* %v2_3fc96, align 8
  store i64 %v3_3fc96, i64* @rdx, align 8
  %v1_3fc9a = add i64 %v0_3fc96, 16
  %v2_3fc9a = inttoptr i64 %v1_3fc9a to i32*
  %v3_3fc9a = load i32, i32* %v2_3fc9a, align 4
  %v4_3fc9a = sext i32 %v3_3fc9a to i64
  store i64 %v4_3fc9a, i64* @rdi, align 8
  %v1_3fc9e = add i64 %v3_3fc96, 16
  store i64 %v1_3fc9e, i64* @rax, align 8
  %v1_3fca2 = add i64 %v3_3fc96, 8
  %v2_3fca2 = inttoptr i64 %v1_3fca2 to i32*
  %v3_3fca2 = load i32, i32* %v2_3fca2, align 4
  %v4_3fca2 = zext i32 %v3_3fca2 to i64
  store i64 %v4_3fca2, i64* @rdx, align 8
  %v2_3fcad = mul nsw i64 %v4_3fc9a, 8
  %v3_3fcad = add i64 %v2_3fcad, %v1_3fc9e
  %v4_3fcad = inttoptr i64 %v3_3fcad to i64*
  %v5_3fcad = load i64, i64* %v4_3fcad, align 8
  store i64 %v5_3fcad, i64* @rdi, align 8
  %v0_3fcb1 = load i64, i64* @rbx, align 8
  %v1_3fcb3 = trunc i64 %v0_3fcb1 to i32
  %v3_3fcb3 = udiv i32 %v1_3fcb3, 8388608
  %v10_3fcb3 = zext i32 %v3_3fcb3 to i64
  store i64 %v10_3fcb3, i64* @rax, align 8
  %v6_3fcb6 = icmp ult i32 %v1_3fcb3, 2139095040
  %tmp245 = and i32 %v1_3fcb3, -8388608
  %tmp246 = icmp eq i32 %tmp245, 2139095040
  %v2_3fcbb = or i1 %v6_3fcb6, %tmp246
  br i1 %v2_3fcbb, label %bb243, label %dec_label_pc_3fcc1

bb243:                                            ; preds = %dec_label_pc_3fc96
  %v4_3fcbb = call i64 @function_400f0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_3fcbb, i64* @rax, align 8
  %v0_3fcdc.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3fcc1

dec_label_pc_3fcc1:                               ; preds = %bb243, %dec_label_pc_3fc96
  %v0_3fcdc = phi i64 [ %v0_3fcdc.pre, %bb243 ], [ %v0_3fcb1, %dec_label_pc_3fc96 ]
  %v1_3fcc9 = add i64 %tmp238, 16
  store i64 %v1_3fcc9, i64* @rdx, align 8
  %v1_3fccd = add i64 %tmp238, 8
  %v2_3fccd = inttoptr i64 %v1_3fccd to i32*
  %v3_3fccd = load i32, i32* %v2_3fccd, align 4
  %v4_3fccd = zext i32 %v3_3fccd to i64
  store i64 %v4_3fccd, i64* @rcx, align 8
  %v1_3fcdc = trunc i64 %v0_3fcdc to i32
  %v3_3fcdc = sdiv i32 %v1_3fcdc, 16384
  %v10_3fcdc = zext i32 %v3_3fcdc to i64
  store i64 %v10_3fcdc, i64* @rbx, align 8
  %v2_3fce1 = urem i32 %v3_3fcdc, 512
  %v9_3fce1 = zext i32 %v2_3fce1 to i64
  store i64 %v9_3fce1, i64* @rax, align 8
  %v9_3fceb = icmp ugt i32 %v2_3fce1, 255
  br i1 %v9_3fceb, label %dec_label_pc_3fcf1, label %bb244

bb244:                                            ; preds = %dec_label_pc_3fcc1
  %v10_3fceb = call i64 @function_404c0()
  store i64 %v10_3fceb, i64* @rax, align 8
  %v0_3fd03.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_3fcf1

dec_label_pc_3fcf1:                               ; preds = %dec_label_pc_3fcc1, %bb244
  %v1_3fd0b = phi i64 [ %v10_3fcdc, %dec_label_pc_3fcc1 ], [ %v0_3fd03.pre, %bb244 ]
  store i64 %v1_3fcc9, i64* @rax, align 8
  %v3_3fd00 = load i32, i32* %v2_3fccd, align 4
  %v4_3fd00 = zext i32 %v3_3fd00 to i64
  store i64 %v4_3fd00, i64* @rdx, align 8
  %v2_3fd0b = mul i64 %v1_3fd0b, 8
  %v3_3fd0b = add i64 %v2_3fd0b, %v1_3fcc9
  %v4_3fd0b = inttoptr i64 %v3_3fd0b to i64*
  %v5_3fd0b = load i64, i64* %v4_3fd0b, align 8
  store i64 %v5_3fd0b, i64* @rdx, align 8
  %v0_3fd0f = load i64, i64* @rdi, align 8
  %v1_3fd0f = inttoptr i64 %v0_3fd0f to i64*
  %v2_3fd0f = load i64, i64* %v1_3fd0f, align 8
  store i64 %v2_3fd0f, i64* @rax, align 8
  %v1_3fd12 = add i64 %v2_3fd0f, 1136
  %v2_3fd12 = inttoptr i64 %v1_3fd12 to i64*
  %v3_3fd12 = load i64, i64* %v2_3fd12, align 8
  store i64 %v3_3fd12, i64* @rax, align 8
  %v1_3fd1b = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v1_3fd1b, i64* @rax, align 8
  ret i64 %v1_3fd1b
}

define i64 @function_3fd6d() local_unnamed_addr {
dec_label_pc_3fd6d:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_3fd72() local_unnamed_addr {
dec_label_pc_3fd72:
  %cf.global-to-local = alloca i1, align 1
  %v0_3fd72 = load i64, i64* @rax, align 8
  %v1_3fd72 = add i64 %v0_3fd72, 4
  %v2_3fd72 = inttoptr i64 %v1_3fd72 to i8*
  %v3_3fd72 = load i8, i8* %v2_3fd72, align 1
  %v4_3fd72 = load i1, i1* %cf.global-to-local, align 1
  %v5_3fd72 = zext i1 %v4_3fd72 to i8
  %v6_3fd72 = sub i8 %v3_3fd72, %v5_3fd72
  store i8 %v6_3fd72, i8* %v2_3fd72, align 1
  %v0_3fd76 = load i64, i64* @rbx, align 8
  %v1_3fd76 = udiv i64 %v0_3fd76, 256
  %v2_3fd76 = trunc i64 %v1_3fd76 to i8
  %v6_3fd761 = mul nuw nsw i64 %v1_3fd76, 2
  %v6_3fd76 = trunc i64 %v6_3fd761 to i8
  %v11_3fd76 = icmp ult i8 %v6_3fd76, %v2_3fd76
  store i1 %v11_3fd76, i1* %cf.global-to-local, align 1
  %v21_3fd76 = mul i64 %v1_3fd76, 512
  %v23_3fd76 = and i64 %v21_3fd76, 65024
  %v24_3fd76 = and i64 %v0_3fd76, -65281
  %v25_3fd76 = or i64 %v23_3fd76, %v24_3fd76
  store i64 %v25_3fd76, i64* @rbx, align 8
  %v0_3fd78 = load i64, i64* @rax, align 8
  %v1_3fd78 = add i64 %v0_3fd78, -119
  %v2_3fd78 = inttoptr i64 %v1_3fd78 to i8*
  %v3_3fd78 = load i8, i8* %v2_3fd78, align 1
  %v4_3fd78 = udiv i8 %v3_3fd78, 2
  %v5_3fd78 = shl i8 %v3_3fd78, 7
  %v6_3fd78 = or i8 %v4_3fd78, %v5_3fd78
  store i8 %v6_3fd78, i8* %v2_3fd78, align 1
  %v10_3fd78 = urem i8 %v3_3fd78, 2
  %v11_3fd78 = icmp ne i8 %v10_3fd78, 0
  store i1 %v11_3fd78, i1* %cf.global-to-local, align 1
  %v0_3fd7b = load i64, i64* @rax, align 8
  ret i64 %v0_3fd7b
}

define i64 @function_3fe10(i64 %arg1) local_unnamed_addr {
dec_label_pc_3fe10:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v1_3fe13 = add i64 %arg1, 1112
  %v2_3fe13 = inttoptr i64 %v1_3fe13 to i64*
  %v3_3fe13 = load i64, i64* %v2_3fe13, align 8
  store i64 %v3_3fe13, i64* @rax, align 8
  store i64 %v3_3fe13, i64* @rbx, align 8
  %v0_3fe1f = load i64, i64* @r15, align 8
  %v1_3fe1f = add i64 %v0_3fe1f, 8
  %v2_3fe1f = inttoptr i64 %v1_3fe1f to i32*
  %v3_3fe1f = load i32, i32* %v2_3fe1f, align 4
  %v4_3fe1f = zext i32 %v3_3fe1f to i64
  store i64 %v4_3fe1f, i64* @rax, align 8
  %v0_3fe23 = load i64, i64* @r14, align 8
  %v1_3fe23 = trunc i64 %v0_3fe23 to i32
  %v9_3fe23 = icmp ult i32 %v1_3fe23, %v3_3fe1f
  br i1 %v9_3fe23, label %bb, label %dec_label_pc_3fe2c

bb:                                               ; preds = %dec_label_pc_3fe10
  %v2_3fe26 = call i64 @function_3f670(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3fe26, i64* @rax, align 8
  %v0_3fe2c.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_3fe2c

dec_label_pc_3fe2c:                               ; preds = %bb, %dec_label_pc_3fe10
  %v0_3fe2c = phi i64 [ %v0_3fe2c.pre, %bb ], [ %v0_3fe23, %dec_label_pc_3fe10 ]
  store i64 %v0_3fe2c, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3fea8(i64 %arg1) local_unnamed_addr {
dec_label_pc_3fea8:
  store i64 %arg1, i64* @rcx, align 8
  %v0_3feb3 = load i64, i64* @r15, align 8
  store i64 %v0_3feb3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3fecc() local_unnamed_addr {
dec_label_pc_3fecc:
  %v0_3fecc = load i64, i64* @rbx, align 8
  %v1_3fecc = trunc i64 %v0_3fecc to i32
  %v11_3fecc = icmp eq i32 %v1_3fecc, -1
  br i1 %v11_3fecc, label %bb, label %dec_label_pc_3fed5

bb:                                               ; preds = %dec_label_pc_3fecc
  %v2_3fecf = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_3fecf, i64* @rax, align 8
  br label %dec_label_pc_3fed5

dec_label_pc_3fed5:                               ; preds = %bb, %dec_label_pc_3fecc
  %v0_3fed5 = load i64, i64* inttoptr (i64 261852 to i64*), align 8
  store i64 %v0_3fed5, i64* @rbp, align 8
  %v0_3fedc = load i64, i64* @r15, align 8
  %v1_3fedc = add i64 %v0_3fedc, 8
  %v2_3fedc = inttoptr i64 %v1_3fedc to i32*
  %v3_3fedc = load i32, i32* %v2_3fedc, align 4
  %v4_3fedc = zext i32 %v3_3fedc to i64
  store i64 %v4_3fedc, i64* @rax, align 8
  %v2_3fee0 = load i64, i64* @r14, align 8
  %v3_3fee0 = trunc i64 %v2_3fee0 to i32
  %tmp237 = icmp ugt i32 %v3_3fedc, %v3_3fee0
  br i1 %tmp237, label %bb236, label %dec_label_pc_3fee5

bb236:                                            ; preds = %dec_label_pc_3fed5
  %v5_3fee3 = call i64 @function_3fea8(i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_3fee3, i64* @rax, align 8
  %v0_3fee5.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_3fee5

dec_label_pc_3fee5:                               ; preds = %dec_label_pc_3fed5, %bb236
  %v0_3fee5 = phi i64 [ %v2_3fee0, %dec_label_pc_3fed5 ], [ %v0_3fee5.pre, %bb236 ]
  store i64 %v0_3fee5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_3ffe0() local_unnamed_addr {
dec_label_pc_3ffe0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_400d8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_400d8:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg4, i64* @rcx, align 8
  %v0_400eb = call i64 @function_3fd6d()
  store i64 %v0_400eb, i64* @rax, align 8
  ret i64 %v0_400eb
}

define i64 @function_400f0(i64 %arg1) local_unnamed_addr {
dec_label_pc_400f0:
  %v0_400f0 = load i64, i64* @r15, align 8
  %v1_400f0 = add i64 %v0_400f0, 8
  %v2_400f0 = inttoptr i64 %v1_400f0 to i32*
  %v3_400f0 = load i32, i32* %v2_400f0, align 4
  %v4_400f0 = zext i32 %v3_400f0 to i64
  store i64 %v4_400f0, i64* @rdx, align 8
  %v0_400f4 = load i64, i64* @rax, align 8
  store i64 %arg1, i64* @rcx, align 8
  ret i64 %v0_400f4
}

define i64 @function_40110(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_40110:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg4, i64* @rcx, align 8
  %v0_4011d = call i64 @function_3fbc0()
  store i64 %v0_4011d, i64* @rax, align 8
  ret i64 %v0_4011d
}

define i64 @function_40128(i64 %arg1) local_unnamed_addr {
dec_label_pc_40128:
  store i64 %arg1, i64* @rbx, align 8
  %v1_4012d = inttoptr i64 %arg1 to i64*
  %v2_4012d = load i64, i64* %v1_4012d, align 8
  store i64 %v2_4012d, i64* @rax, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_40143(i64 %arg1) local_unnamed_addr {
dec_label_pc_40143:
  store i64 %arg1, i64* @rdi, align 8
  %v0_40143 = load i64, i64* @rax, align 8
  %v1_40148 = call i64 @function_3efe0(i64 %v0_40143)
  store i64 %v1_40148, i64* @rax, align 8
  ret i64 %v1_40148
}

define i64 @function_40150() local_unnamed_addr {
dec_label_pc_40150:
  %tmp228 = call i64 @__decompiler_undefined_function_0()
  %v1_40154 = add i64 %tmp228, 2008
  %v2_40154 = inttoptr i64 %v1_40154 to i64*
  %v3_40154 = load i64, i64* %v2_40154, align 8
  store i64 %v3_40154, i64* @rax, align 8
  %v0_4015b = call i64 @function_3ed45()
  store i64 %v0_4015b, i64* @rax, align 8
  ret i64 %v0_4015b
}

define i64 @function_40160(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_40160:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_40160 = add i32 %arg5, 1
  %v4_40171 = sext i32 %v4_40160 to i64
  store i64 %v4_40171, i64* @rax, align 8
  %v0_4017a = call i64 @function_3ebd4()
  store i64 %v0_4017a, i64* @rax, align 8
  ret i64 %v0_4017a
}

define i64 @function_40180(i64 %arg1) local_unnamed_addr {
dec_label_pc_40180:
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  %v1_40180 = add i64 %tmp231, 8
  %v2_40180 = inttoptr i64 %v1_40180 to i32*
  %v3_40180 = load i32, i32* %v2_40180, align 4
  %v4_40180 = zext i32 %v3_40180 to i64
  store i64 %v4_40180, i64* @rdx, align 8
  %v0_40184 = load i64, i64* @rax, align 8
  store i64 %arg1, i64* @rcx, align 8
  ret i64 %v0_40184
}

define i64 @function_401a0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_401a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_401c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_401c0:
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rdi, align 8
  %v1_401c0 = add i64 %tmp231, 8
  %v2_401c0 = inttoptr i64 %v1_401c0 to i32*
  %v3_401c0 = load i32, i32* %v2_401c0, align 4
  %v4_401c0 = zext i32 %v3_401c0 to i64
  store i64 %v4_401c0, i64* @rax, align 8
  %v0_401c4 = load i64, i64* @rdi, align 8
  %v1_401c4 = trunc i64 %v0_401c4 to i32
  %v9_401c4 = icmp ult i32 %v1_401c4, %v3_401c0
  %v1_401c6 = icmp eq i1 %v9_401c4, false
  br i1 %v1_401c6, label %bb, label %dec_label_pc_401cc

bb:                                               ; preds = %dec_label_pc_401c0
  %v2_401c6 = call i64 @function_41069()
  store i64 %v2_401c6, i64* @rax, align 8
  br label %dec_label_pc_401cc

dec_label_pc_401cc:                               ; preds = %bb, %dec_label_pc_401c0
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_401e0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_401e0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_40200(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_40200:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_40220(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_40220:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rcx, align 8
  %v1_4022c = add i64 %arg2, 16
  store i64 %v1_4022c, i64* @rax, align 8
  %v1_40230 = add i64 %arg2, 8
  %v2_40230 = inttoptr i64 %v1_40230 to i32*
  %v3_40230 = load i32, i32* %v2_40230, align 4
  %v4_40230 = zext i32 %v3_40230 to i64
  store i64 %v4_40230, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40298(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_40298:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_402b0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_402b0:
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rdi, align 8
  %v1_402b0 = add i64 %tmp231, 8
  %v2_402b0 = inttoptr i64 %v1_402b0 to i32*
  %v3_402b0 = load i32, i32* %v2_402b0, align 4
  %v4_402b0 = zext i32 %v3_402b0 to i64
  store i64 %v4_402b0, i64* @rax, align 8
  %v0_402b4 = load i64, i64* @rdi, align 8
  %v1_402b4 = trunc i64 %v0_402b4 to i32
  %v9_402b4 = icmp ult i32 %v1_402b4, %v3_402b0
  %v1_402b6 = icmp eq i1 %v9_402b4, false
  br i1 %v1_402b6, label %bb, label %dec_label_pc_402bc

bb:                                               ; preds = %dec_label_pc_402b0
  %v2_402b6 = call i64 @function_413f9()
  store i64 %v2_402b6, i64* @rax, align 8
  br label %dec_label_pc_402bc

dec_label_pc_402bc:                               ; preds = %bb, %dec_label_pc_402b0
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_402d0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_402d0:
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rdi, align 8
  %v1_402d0 = add i64 %tmp231, 8
  %v2_402d0 = inttoptr i64 %v1_402d0 to i32*
  %v3_402d0 = load i32, i32* %v2_402d0, align 4
  %v4_402d0 = zext i32 %v3_402d0 to i64
  store i64 %v4_402d0, i64* @rax, align 8
  %v0_402d4 = load i64, i64* @rdi, align 8
  %v1_402d4 = trunc i64 %v0_402d4 to i32
  %v9_402d4 = icmp ult i32 %v1_402d4, %v3_402d0
  %v1_402d6 = icmp eq i1 %v9_402d4, false
  br i1 %v1_402d6, label %bb, label %dec_label_pc_402dc

bb:                                               ; preds = %dec_label_pc_402d0
  %v2_402d6 = call i64 @function_413e2()
  store i64 %v2_402d6, i64* @rax, align 8
  br label %dec_label_pc_402dc

dec_label_pc_402dc:                               ; preds = %bb, %dec_label_pc_402d0
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_402f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_402f0:
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rdi, align 8
  %v1_402f0 = add i64 %tmp231, 8
  %v2_402f0 = inttoptr i64 %v1_402f0 to i32*
  %v3_402f0 = load i32, i32* %v2_402f0, align 4
  %v4_402f0 = zext i32 %v3_402f0 to i64
  store i64 %v4_402f0, i64* @rax, align 8
  %v0_402f4 = load i64, i64* @rdi, align 8
  %v1_402f4 = trunc i64 %v0_402f4 to i32
  %v9_402f4 = icmp ult i32 %v1_402f4, %v3_402f0
  %v1_402f6 = icmp eq i1 %v9_402f4, false
  br i1 %v1_402f6, label %bb, label %dec_label_pc_402fc

bb:                                               ; preds = %dec_label_pc_402f0
  %v2_402f6 = call i64 @function_40ec5()
  store i64 %v2_402f6, i64* @rax, align 8
  br label %dec_label_pc_402fc

dec_label_pc_402fc:                               ; preds = %bb, %dec_label_pc_402f0
  store i64 %arg2, i64* @rax, align 8
  ret i64 %arg2
}

define i64 @function_40306(i64 %arg1) local_unnamed_addr {
dec_label_pc_40306:
  %v0_40306 = load i64, i64* @rax, align 8
  %v1_40306 = trunc i64 %v0_40306 to i32
  %v9_40311 = icmp sgt i32 %v1_40306, 8404992
  br i1 %v9_40311, label %dec_label_pc_40317, label %bb

bb:                                               ; preds = %dec_label_pc_40306
  %v11_40311 = call i64 @function_40888(i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_40311, i64* @rax, align 8
  br label %dec_label_pc_40317

dec_label_pc_40317:                               ; preds = %dec_label_pc_40306, %bb
  %v0_40322 = phi i64 [ %v0_40306, %dec_label_pc_40306 ], [ %v11_40311, %bb ]
  %v1_40317 = trunc i64 %v0_40322 to i32
  %v10_40322 = icmp eq i32 %v1_40317, 16777216
  %v1_40327 = icmp eq i1 %v10_40322, false
  br i1 %v1_40327, label %bb244, label %dec_label_pc_4032d

bb244:                                            ; preds = %dec_label_pc_40317
  %v3_40327 = call i64 @function_40b9f(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_40327, i64* @rax, align 8
  br label %dec_label_pc_4032d

dec_label_pc_4032d:                               ; preds = %bb244, %dec_label_pc_40317
  %v0_4032d = load i64, i64* @r15, align 8
  %v1_4032d = add i64 %v0_4032d, 8
  %v2_4032d = inttoptr i64 %v1_4032d to i32*
  %v3_4032d = load i32, i32* %v2_4032d, align 4
  %v4_4032d = zext i32 %v3_4032d to i64
  store i64 %v4_4032d, i64* @rdx, align 8
  %v0_40331 = load i64, i64* @r14, align 8
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v0_40331, i64* @rax, align 8
  %v2_40342 = mul i64 %v0_40331, 8
  %v3_40342 = add i64 %v2_40342, %arg1
  %v4_40342 = inttoptr i64 %v3_40342 to i64*
  %v5_40342 = load i64, i64* %v4_40342, align 8
  store i64 %v5_40342, i64* @rdi, align 8
  %v1_40346 = add i64 %v0_40331, 1
  store i64 %v1_40346, i64* @rax, align 8
  %v1_40358 = inttoptr i64 %v5_40342 to i64*
  %v2_40358 = load i64, i64* %v1_40358, align 8
  store i64 %v2_40358, i64* @rax, align 8
  %v1_4035b = add i64 %v2_40358, 1424
  %v2_4035b = inttoptr i64 %v1_4035b to i64*
  %v3_4035b = load i64, i64* %v2_4035b, align 8
  store i64 %v3_4035b, i64* @rax, align 8
  store i64 %v3_4035b, i64* @rdi, align 8
  %v1_4036c = inttoptr i64 %v3_4035b to i64*
  %v2_4036c = load i64, i64* %v1_4036c, align 8
  store i64 %v2_4036c, i64* @rax, align 8
  %v1_4036f = add i64 %v2_4036c, 72
  %v2_4036f = inttoptr i64 %v1_4036f to i64*
  %v3_4036f = load i64, i64* %v2_4036f, align 8
  %v4_40375 = add i64 %v3_4036f, %v0_40331
  %v20_40375 = and i64 %v4_40375, 4294967295
  store i64 %v20_40375, i64* @rax, align 8
  %v1_4037c = call i64 @function_3efe0(i64 %v3_4035b)
  store i64 %v1_4037c, i64* @rax, align 8
  ret i64 %v1_4037c
}

define i64 @function_40381() local_unnamed_addr {
dec_label_pc_40381:
  store i64 263048, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4039a() local_unnamed_addr {
dec_label_pc_4039a:
  %v0_4039e = load i64, i64* @r14, align 8
  store i64 %v0_4039e, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40420(i64 %arg1) local_unnamed_addr {
dec_label_pc_40420:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v1_40420 = add i64 %tmp232, 8
  %v2_40420 = inttoptr i64 %v1_40420 to i32*
  %v3_40420 = load i32, i32* %v2_40420, align 4
  %v4_40420 = zext i32 %v3_40420 to i64
  store i64 %v4_40420, i64* @rdx, align 8
  %v0_40424 = load i64, i64* @rax, align 8
  %v1_40424 = trunc i64 %v0_40424 to i32
  %v9_40424 = icmp ult i32 %v1_40424, %v3_40420
  %v1_40426 = icmp eq i1 %v9_40424, false
  br i1 %v1_40426, label %bb, label %dec_label_pc_4042c

bb:                                               ; preds = %dec_label_pc_40420
  %v2_40426 = call i64 @function_413c9()
  store i64 %v2_40426, i64* @rax, align 8
  br label %dec_label_pc_4042c

dec_label_pc_4042c:                               ; preds = %bb, %dec_label_pc_40420
  %v1_40433 = phi i64 [ %v2_40426, %bb ], [ %v0_40424, %dec_label_pc_40420 ]
  store i64 %arg1, i64* @rcx, align 8
  ret i64 %v1_40433
}

define i64 @function_40440(i64 %arg1) local_unnamed_addr {
dec_label_pc_40440:
  %v0_40440 = load i64, i64* @r15, align 8
  %v1_40440 = add i64 %v0_40440, 8
  %v2_40440 = inttoptr i64 %v1_40440 to i32*
  %v3_40440 = load i32, i32* %v2_40440, align 4
  %v4_40440 = zext i32 %v3_40440 to i64
  store i64 %v4_40440, i64* @rdx, align 8
  %v0_40444 = load i64, i64* @rax, align 8
  store i64 %arg1, i64* @rcx, align 8
  ret i64 %v0_40444
}

define i64 @function_40460(i64 %arg1) local_unnamed_addr {
dec_label_pc_40460:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v1_40460 = add i64 %tmp232, 8
  %v2_40460 = inttoptr i64 %v1_40460 to i32*
  %v3_40460 = load i32, i32* %v2_40460, align 4
  %v4_40460 = zext i32 %v3_40460 to i64
  store i64 %v4_40460, i64* @rdx, align 8
  %v0_40464 = load i64, i64* @rax, align 8
  %v1_40464 = trunc i64 %v0_40464 to i32
  %v9_40464 = icmp ult i32 %v1_40464, %v3_40460
  %v1_40466 = icmp eq i1 %v9_40464, false
  br i1 %v1_40466, label %bb, label %dec_label_pc_4046c

bb:                                               ; preds = %dec_label_pc_40460
  %v2_40466 = call i64 @function_413b7()
  store i64 %v2_40466, i64* @rax, align 8
  br label %dec_label_pc_4046c

dec_label_pc_4046c:                               ; preds = %bb, %dec_label_pc_40460
  %v1_40473 = phi i64 [ %v2_40466, %bb ], [ %v0_40464, %dec_label_pc_40460 ]
  store i64 %arg1, i64* @rdx, align 8
  ret i64 %v1_40473
}

define i64 @function_40480(i64 %arg1) local_unnamed_addr {
dec_label_pc_40480:
  %v0_40484 = load i64, i64* @rax, align 8
  store i64 %arg1, i64* @rdx, align 8
  ret i64 %v0_40484
}

define i64 @function_404a1() local_unnamed_addr {
dec_label_pc_404a1:
  %v0_404a1 = load i64, i64* @rax, align 8
  ret i64 %v0_404a1
}

define i64 @function_404a8(i64 %arg1) local_unnamed_addr {
dec_label_pc_404a8:
  store i64 %arg1, i64* @rcx, align 8
  %v1_404af = load i64, i64* @rax, align 8
  %v2_404af = mul i64 %v1_404af, 8
  %v3_404af = add i64 %v2_404af, %arg1
  %v4_404af = inttoptr i64 %v3_404af to i64*
  %v5_404af = load i64, i64* %v4_404af, align 8
  store i64 %v5_404af, i64* @rdx, align 8
  ret i64 %v1_404af
}

define i64 @function_404c0() local_unnamed_addr {
dec_label_pc_404c0:
  %v0_404c0 = load i64, i64* @r15, align 8
  %v1_404c0 = add i64 %v0_404c0, 8
  %v2_404c0 = inttoptr i64 %v1_404c0 to i32*
  %v3_404c0 = load i32, i32* %v2_404c0, align 4
  %v4_404c0 = zext i32 %v3_404c0 to i64
  store i64 %v4_404c0, i64* @rdx, align 8
  %v0_404c4 = load i64, i64* @rax, align 8
  %v1_404c4 = trunc i64 %v0_404c4 to i32
  %v9_404c4 = icmp ult i32 %v1_404c4, %v3_404c0
  br i1 %v9_404c4, label %bb, label %dec_label_pc_404c8

bb:                                               ; preds = %dec_label_pc_404c0
  %v2_404c6 = call i64 @function_404a8(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_404c6, i64* @rax, align 8
  br label %dec_label_pc_404c8

dec_label_pc_404c8:                               ; preds = %bb, %dec_label_pc_404c0
  %v0_404c8 = phi i64 [ %v2_404c6, %bb ], [ %v0_404c4, %dec_label_pc_404c0 ]
  store i64 %v0_404c8, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_404d8(i64 %arg1) local_unnamed_addr {
dec_label_pc_404d8:
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  %v1_404d8 = add i64 %tmp231, 8
  %v2_404d8 = inttoptr i64 %v1_404d8 to i32*
  %v3_404d8 = load i32, i32* %v2_404d8, align 4
  %v4_404d8 = zext i32 %v3_404d8 to i64
  store i64 %v4_404d8, i64* @rdx, align 8
  %v0_404dc = load i64, i64* @rax, align 8
  store i64 %arg1, i64* @rcx, align 8
  ret i64 %v0_404dc
}

define i64 @function_404f8(i64 %arg1) local_unnamed_addr {
dec_label_pc_404f8:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v1_404f8 = add i64 %tmp232, 8
  %v2_404f8 = inttoptr i64 %v1_404f8 to i32*
  %v3_404f8 = load i32, i32* %v2_404f8, align 4
  %v4_404f8 = zext i32 %v3_404f8 to i64
  store i64 %v4_404f8, i64* @rdx, align 8
  %v0_404fc = load i64, i64* @rax, align 8
  %v1_404fc = trunc i64 %v0_404fc to i32
  %v9_404fc = icmp ult i32 %v1_404fc, %v3_404f8
  %v1_404fe = icmp eq i1 %v9_404fc, false
  br i1 %v1_404fe, label %bb, label %dec_label_pc_40504

bb:                                               ; preds = %dec_label_pc_404f8
  %v2_404fe = call i64 @function_41393()
  store i64 %v2_404fe, i64* @rax, align 8
  br label %dec_label_pc_40504

dec_label_pc_40504:                               ; preds = %bb, %dec_label_pc_404f8
  %v1_4050b = phi i64 [ %v2_404fe, %bb ], [ %v0_404fc, %dec_label_pc_404f8 ]
  store i64 %arg1, i64* @rdx, align 8
  ret i64 %v1_4050b
}

define i64 @function_40518(i64 %arg1) local_unnamed_addr {
dec_label_pc_40518:
  %v0_4051c = load i64, i64* @rax, align 8
  store i64 %arg1, i64* @rdx, align 8
  ret i64 %v0_4051c
}

define i64 @function_40538(i64 %arg1) local_unnamed_addr {
dec_label_pc_40538:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v1_40538 = add i64 %tmp232, 8
  %v2_40538 = inttoptr i64 %v1_40538 to i32*
  %v3_40538 = load i32, i32* %v2_40538, align 4
  %v4_40538 = zext i32 %v3_40538 to i64
  store i64 %v4_40538, i64* @rdx, align 8
  %v0_4053c = load i64, i64* @rax, align 8
  %v1_4053c = trunc i64 %v0_4053c to i32
  %v9_4053c = icmp ult i32 %v1_4053c, %v3_40538
  %v1_4053e = icmp eq i1 %v9_4053c, false
  br i1 %v1_4053e, label %bb, label %dec_label_pc_40544

bb:                                               ; preds = %dec_label_pc_40538
  %v2_4053e = call i64 @function_40e6c()
  store i64 %v2_4053e, i64* @rax, align 8
  br label %dec_label_pc_40544

dec_label_pc_40544:                               ; preds = %bb, %dec_label_pc_40538
  %v1_4054b = phi i64 [ %v2_4053e, %bb ], [ %v0_4053c, %dec_label_pc_40538 ]
  store i64 %arg1, i64* @rcx, align 8
  ret i64 %v1_4054b
}

define i64 @function_40558(i64 %arg1) local_unnamed_addr {
dec_label_pc_40558:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v1_40558 = add i64 %tmp232, 8
  %v2_40558 = inttoptr i64 %v1_40558 to i32*
  %v3_40558 = load i32, i32* %v2_40558, align 4
  %v4_40558 = zext i32 %v3_40558 to i64
  store i64 %v4_40558, i64* @rdx, align 8
  %v0_4055c = load i64, i64* @rax, align 8
  %v1_4055c = trunc i64 %v0_4055c to i32
  %v9_4055c = icmp ult i32 %v1_4055c, %v3_40558
  %v1_4055e = icmp eq i1 %v9_4055c, false
  br i1 %v1_4055e, label %bb, label %dec_label_pc_40564

bb:                                               ; preds = %dec_label_pc_40558
  %v2_4055e = call i64 @function_41313()
  store i64 %v2_4055e, i64* @rax, align 8
  br label %dec_label_pc_40564

dec_label_pc_40564:                               ; preds = %bb, %dec_label_pc_40558
  %v1_4056b = phi i64 [ %v2_4055e, %bb ], [ %v0_4055c, %dec_label_pc_40558 ]
  store i64 %arg1, i64* @rdx, align 8
  ret i64 %v1_4056b
}

define i64 @function_40574() local_unnamed_addr {
dec_label_pc_40574:
  %v0_40574 = load i64, i64* @rbp, align 8
  %v1_40574 = add i64 %v0_40574, 24
  %v2_40574 = inttoptr i64 %v1_40574 to i64*
  %v3_40574 = load i64, i64* %v2_40574, align 8
  store i64 %v3_40574, i64* @rbx, align 8
  %v1_40578 = icmp eq i64 %v3_40574, 0
  br i1 %v1_40578, label %bb, label %dec_label_pc_40581

bb:                                               ; preds = %dec_label_pc_40574
  %v1_4057b = call i64 @function_40d58()
  store i64 %v1_4057b, i64* @rax, align 8
  br label %dec_label_pc_40581

dec_label_pc_40581:                               ; preds = %bb, %dec_label_pc_40574
  %v0_40581 = load i64, i64* @r15, align 8
  %v1_40581 = add i64 %v0_40581, 8
  %v2_40581 = inttoptr i64 %v1_40581 to i32*
  %v3_40581 = load i32, i32* %v2_40581, align 4
  %v4_40581 = zext i32 %v3_40581 to i64
  store i64 %v4_40581, i64* @rax, align 8
  %v0_40585 = load i64, i64* @r14, align 8
  %v1_40585 = trunc i64 %v0_40585 to i32
  %v9_40585 = icmp ult i32 %v1_40585, %v3_40581
  br i1 %v9_40585, label %bb3, label %dec_label_pc_4058e

bb3:                                              ; preds = %dec_label_pc_40581
  %v2_40588 = call i64 @function_3f670(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_40588, i64* @rax, align 8
  %v0_4058e.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_4058e

dec_label_pc_4058e:                               ; preds = %bb3, %dec_label_pc_40581
  %v0_4058e = phi i64 [ %v0_4058e.pre, %bb3 ], [ %v0_40585, %dec_label_pc_40581 ]
  store i64 %v0_4058e, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_405e3(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_405e3:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_405e3 = load i64, i64* @rax, align 8
  %v1_405e3 = add i64 %v0_405e3, -119
  %v2_405e3 = inttoptr i64 %v1_405e3 to i8*
  %v3_405e3 = load i8, i8* %v2_405e3, align 1
  %v4_405e3 = load i64, i64* @rcx, align 8
  %v5_405e3 = trunc i64 %v4_405e3 to i8
  %v6_405e3 = or i8 %v5_405e3, %v3_405e3
  store i8 %v6_405e3, i8* %v2_405e3, align 1
  %v4_405e6 = load i32, i32* bitcast (i64* @rax to i32*), align 8
  %v5_405e6 = sext i32 %v4_405e6 to i64
  %v6_405e6 = mul nsw i64 %v5_405e6, 72
  store i64 %v6_405e6, i64* @rdx, align 8
  %v4_405f4 = sext i32 %arg5 to i64
  store i64 %v4_405f4, i64* @rcx, align 8
  %v1_405f9 = add nsw i64 %v4_405f4, 8
  %v2_405f9 = inttoptr i64 %v1_405f9 to i32*
  %v3_405f9 = load i32, i32* %v2_405f9, align 4
  %v4_405f9 = zext i32 %v3_405f9 to i64
  store i64 %v4_405f4, i64* %r13.global-to-local, align 8
  %v1_405ff = add nsw i64 %v4_405f9, -1
  store i64 %v1_405ff, i64* @rbp, align 8
  store i64 %v1_405ff, i64* @rax, align 8
  %v2_40609 = mul nsw i64 %v1_405ff, 8
  %v3_40609 = add nsw i64 %v4_405f4, 16
  %v4_40609 = add i64 %v3_40609, %v2_40609
  store i64 %v4_40609, i64* %r12.global-to-local, align 8
  %v4_4062f3 = trunc i64 %v1_405ff to i32
  %v6_4062f5 = icmp slt i32 %v4_4062f3, 0
  %v1_4063110 = icmp eq i1 %v6_4062f5, false
  br i1 %v1_4063110, label %dec_label_pc_40610, label %dec_label_pc_40633

dec_label_pc_40610:                               ; preds = %dec_label_pc_405e3, %dec_label_pc_4061a.dec_label_pc_40610_crit_edge
  %v0_4063318 = phi i64 [ %v0_4063317, %dec_label_pc_4061a.dec_label_pc_40610_crit_edge ], [ %v1_405ff, %dec_label_pc_405e3 ]
  %v0_40610 = phi i64 [ %v17_4062c, %dec_label_pc_4061a.dec_label_pc_40610_crit_edge ], [ %v1_405ff, %dec_label_pc_405e3 ]
  %v0_4061a13 = phi i64 [ %v1_40628, %dec_label_pc_4061a.dec_label_pc_40610_crit_edge ], [ %v4_40609, %dec_label_pc_405e3 ]
  %v2_40610 = phi i64 [ %v2_40610.pre, %dec_label_pc_4061a.dec_label_pc_40610_crit_edge ], [ %v4_405f4, %dec_label_pc_405e3 ]
  %v1_40610 = trunc i64 %v0_40610 to i32
  %v3_40610 = add i64 %v2_40610, 8
  %v4_40610 = inttoptr i64 %v3_40610 to i32*
  %v5_40610 = load i32, i32* %v4_40610, align 4
  %v11_40610 = icmp ult i32 %v1_40610, %v5_40610
  %v1_40614 = icmp eq i1 %v11_40610, false
  br i1 %v1_40614, label %bb, label %dec_label_pc_4061a

bb:                                               ; preds = %dec_label_pc_40610
  %v2_40614 = call i64 @function_410ae()
  store i64 %v2_40614, i64* @rax, align 8
  %v0_4061a.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_4062c.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_4061a

dec_label_pc_4061a:                               ; preds = %bb, %dec_label_pc_40610
  %v0_4063317 = phi i64 [ %v2_40614, %bb ], [ %v0_4063318, %dec_label_pc_40610 ]
  %v0_4062c = phi i64 [ %v0_4062c.pre, %bb ], [ %v0_40610, %dec_label_pc_40610 ]
  %v0_40628 = phi i64 [ %v0_4061a.pre, %bb ], [ %v0_4061a13, %dec_label_pc_40610 ]
  %v1_4061a = inttoptr i64 %v0_40628 to i64*
  %v2_4061a = load i64, i64* %v1_4061a, align 8
  store i64 %v2_4061a, i64* @rdi, align 8
  %v1_40628 = add i64 %v0_40628, -8
  store i64 %v1_40628, i64* %r12.global-to-local, align 8
  %v1_4062c = trunc i64 %v0_4062c to i32
  %v2_4062c = add i32 %v1_4062c, -1
  %v12_4062c = icmp slt i32 %v2_4062c, 0
  %v17_4062c = zext i32 %v2_4062c to i64
  store i64 %v17_4062c, i64* @rbp, align 8
  %v1_40631 = icmp eq i1 %v12_4062c, false
  br i1 %v1_40631, label %dec_label_pc_4061a.dec_label_pc_40610_crit_edge, label %dec_label_pc_40633

dec_label_pc_4061a.dec_label_pc_40610_crit_edge:  ; preds = %dec_label_pc_4061a
  %v2_40610.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_40610

dec_label_pc_40633:                               ; preds = %dec_label_pc_4061a, %dec_label_pc_405e3
  %v0_40633 = phi i64 [ %v1_405ff, %dec_label_pc_405e3 ], [ %v0_4063317, %dec_label_pc_4061a ]
  ret i64 %v0_40633
}

define i64 @function_40638(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_40638:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4063e = load i64, i64* @r15, align 8
  store i64 %v0_4063e, i64* @rdi, align 8
  %v0_4064c = load i64, i64* @rax, align 8
  store i64 %v0_4064c, i64* @rbx, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v1_4065a = add i64 %arg2, 8
  %v2_4065a = inttoptr i64 %v1_4065a to i32*
  %v3_4065a = load i32, i32* %v2_4065a, align 4
  %v4_4065a = zext i32 %v3_4065a to i64
  store i64 %arg2, i64* %r13.global-to-local, align 8
  %v1_40660 = add nsw i64 %v4_4065a, -1
  store i64 %v1_40660, i64* @rbp, align 8
  store i64 %v1_40660, i64* @rax, align 8
  %v2_4066a = mul nsw i64 %v1_40660, 8
  %v3_4066a = add i64 %arg2, 16
  %v4_4066a = add i64 %v3_4066a, %v2_4066a
  store i64 %v4_4066a, i64* %r12.global-to-local, align 8
  %v4_406973 = trunc i64 %v1_40660 to i32
  %v6_406975 = icmp slt i32 %v4_406973, 0
  %v1_4069910 = icmp eq i1 %v6_406975, false
  br i1 %v1_4069910, label %dec_label_pc_40678, label %dec_label_pc_4069b

dec_label_pc_40678:                               ; preds = %dec_label_pc_40638, %dec_label_pc_40682.dec_label_pc_40678_crit_edge
  %v0_4069b18 = phi i64 [ %v0_4069b17, %dec_label_pc_40682.dec_label_pc_40678_crit_edge ], [ %v1_40660, %dec_label_pc_40638 ]
  %v0_40678 = phi i64 [ %v17_40694, %dec_label_pc_40682.dec_label_pc_40678_crit_edge ], [ %v1_40660, %dec_label_pc_40638 ]
  %v0_4068213 = phi i64 [ %v1_40690, %dec_label_pc_40682.dec_label_pc_40678_crit_edge ], [ %v4_4066a, %dec_label_pc_40638 ]
  %v2_40678 = phi i64 [ %v2_40678.pre, %dec_label_pc_40682.dec_label_pc_40678_crit_edge ], [ %arg2, %dec_label_pc_40638 ]
  %v1_40678 = trunc i64 %v0_40678 to i32
  %v3_40678 = add i64 %v2_40678, 8
  %v4_40678 = inttoptr i64 %v3_40678 to i32*
  %v5_40678 = load i32, i32* %v4_40678, align 4
  %v11_40678 = icmp ult i32 %v1_40678, %v5_40678
  %v1_4067c = icmp eq i1 %v11_40678, false
  br i1 %v1_4067c, label %bb, label %dec_label_pc_40682

bb:                                               ; preds = %dec_label_pc_40678
  %v2_4067c = call i64 @function_410ae()
  store i64 %v2_4067c, i64* @rax, align 8
  %v0_40682.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_40694.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_40682

dec_label_pc_40682:                               ; preds = %bb, %dec_label_pc_40678
  %v0_4069b17 = phi i64 [ %v2_4067c, %bb ], [ %v0_4069b18, %dec_label_pc_40678 ]
  %v0_40694 = phi i64 [ %v0_40694.pre, %bb ], [ %v0_40678, %dec_label_pc_40678 ]
  %v0_40690 = phi i64 [ %v0_40682.pre, %bb ], [ %v0_4068213, %dec_label_pc_40678 ]
  %v1_40682 = inttoptr i64 %v0_40690 to i64*
  %v2_40682 = load i64, i64* %v1_40682, align 8
  store i64 %v2_40682, i64* @rdi, align 8
  %v1_40690 = add i64 %v0_40690, -8
  store i64 %v1_40690, i64* %r12.global-to-local, align 8
  %v1_40694 = trunc i64 %v0_40694 to i32
  %v2_40694 = add i32 %v1_40694, -1
  %v12_40694 = icmp slt i32 %v2_40694, 0
  %v17_40694 = zext i32 %v2_40694 to i64
  store i64 %v17_40694, i64* @rbp, align 8
  %v1_40699 = icmp eq i1 %v12_40694, false
  br i1 %v1_40699, label %dec_label_pc_40682.dec_label_pc_40678_crit_edge, label %dec_label_pc_4069b

dec_label_pc_40682.dec_label_pc_40678_crit_edge:  ; preds = %dec_label_pc_40682
  %v2_40678.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_40678

dec_label_pc_4069b:                               ; preds = %dec_label_pc_40682, %dec_label_pc_40638
  %v0_4069b = phi i64 [ %v1_40660, %dec_label_pc_40638 ], [ %v0_4069b17, %dec_label_pc_40682 ]
  ret i64 %v0_4069b
}

define i64 @function_406a0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_406a0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %tmp21 = call i32 @__decompiler_undefined_function_2()
  store i64 %arg2, i64* @rbx, align 8
  %v1_406a5 = inttoptr i64 %arg2 to i64*
  %v2_406a5 = load i64, i64* %v1_406a5, align 8
  store i64 %v2_406a5, i64* @rax, align 8
  %v1_406a8 = add i64 %v2_406a5, 72
  %v2_406a8 = inttoptr i64 %v1_406a8 to i64*
  %v3_406a8 = load i64, i64* %v2_406a8, align 8
  store i64 %v3_406a8, i64* @rax, align 8
  %v0_406b8 = load i64, i64* @r14, align 8
  %v0_406bb = load i64, i64* @r15, align 8
  store i64 %v0_406bb, i64* @rdi, align 8
  %v3_406be = trunc i64 %v3_406a8 to i32
  %v4_406be = sub i32 %tmp21, %v3_406be
  %v3_406c0 = trunc i64 %v0_406b8 to i32
  %v4_406c0 = sub i32 %v4_406be, %v3_406c0
  %v20_406c0 = zext i32 %v4_406c0 to i64
  store i64 %v20_406c0, i64* @rdx, align 8
  store i64 %v3_406a8, i64* @rbx, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v1_406dc = add i64 %arg1, 8
  %v2_406dc = inttoptr i64 %v1_406dc to i32*
  %v3_406dc = load i32, i32* %v2_406dc, align 4
  %v4_406dc = zext i32 %v3_406dc to i64
  store i64 %arg1, i64* %r13.global-to-local, align 8
  %v1_406e2 = add nsw i64 %v4_406dc, -1
  store i64 %v1_406e2, i64* @rbp, align 8
  store i64 %v1_406e2, i64* @rax, align 8
  %v2_406ec = mul nsw i64 %v1_406e2, 8
  %v3_406ec = add i64 %arg1, 16
  %v4_406ec = add i64 %v3_406ec, %v2_406ec
  store i64 %v4_406ec, i64* %r12.global-to-local, align 8
  %v4_407173 = trunc i64 %v1_406e2 to i32
  %v6_407175 = icmp slt i32 %v4_407173, 0
  %v1_4071910 = icmp eq i1 %v6_407175, false
  br i1 %v1_4071910, label %dec_label_pc_406f8, label %dec_label_pc_4071b

dec_label_pc_406f8:                               ; preds = %dec_label_pc_406a0, %dec_label_pc_40702.dec_label_pc_406f8_crit_edge
  %v0_4071b18 = phi i64 [ %v0_4071b17, %dec_label_pc_40702.dec_label_pc_406f8_crit_edge ], [ %v1_406e2, %dec_label_pc_406a0 ]
  %v0_406f8 = phi i64 [ %v17_40714, %dec_label_pc_40702.dec_label_pc_406f8_crit_edge ], [ %v1_406e2, %dec_label_pc_406a0 ]
  %v0_4070213 = phi i64 [ %v1_40710, %dec_label_pc_40702.dec_label_pc_406f8_crit_edge ], [ %v4_406ec, %dec_label_pc_406a0 ]
  %v2_406f8 = phi i64 [ %v2_406f8.pre, %dec_label_pc_40702.dec_label_pc_406f8_crit_edge ], [ %arg1, %dec_label_pc_406a0 ]
  %v1_406f8 = trunc i64 %v0_406f8 to i32
  %v3_406f8 = add i64 %v2_406f8, 8
  %v4_406f8 = inttoptr i64 %v3_406f8 to i32*
  %v5_406f8 = load i32, i32* %v4_406f8, align 4
  %v11_406f8 = icmp ult i32 %v1_406f8, %v5_406f8
  %v1_406fc = icmp eq i1 %v11_406f8, false
  br i1 %v1_406fc, label %bb, label %dec_label_pc_40702

bb:                                               ; preds = %dec_label_pc_406f8
  %v2_406fc = call i64 @function_410ae()
  store i64 %v2_406fc, i64* @rax, align 8
  %v0_40702.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_40714.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_40702

dec_label_pc_40702:                               ; preds = %bb, %dec_label_pc_406f8
  %v0_4071b17 = phi i64 [ %v2_406fc, %bb ], [ %v0_4071b18, %dec_label_pc_406f8 ]
  %v0_40714 = phi i64 [ %v0_40714.pre, %bb ], [ %v0_406f8, %dec_label_pc_406f8 ]
  %v0_40710 = phi i64 [ %v0_40702.pre, %bb ], [ %v0_4070213, %dec_label_pc_406f8 ]
  %v1_40702 = inttoptr i64 %v0_40710 to i64*
  %v2_40702 = load i64, i64* %v1_40702, align 8
  store i64 %v2_40702, i64* @rdi, align 8
  %v1_40710 = add i64 %v0_40710, -8
  store i64 %v1_40710, i64* %r12.global-to-local, align 8
  %v1_40714 = trunc i64 %v0_40714 to i32
  %v2_40714 = add i32 %v1_40714, -1
  %v12_40714 = icmp slt i32 %v2_40714, 0
  %v17_40714 = zext i32 %v2_40714 to i64
  store i64 %v17_40714, i64* @rbp, align 8
  %v1_40719 = icmp eq i1 %v12_40714, false
  br i1 %v1_40719, label %dec_label_pc_40702.dec_label_pc_406f8_crit_edge, label %dec_label_pc_4071b

dec_label_pc_40702.dec_label_pc_406f8_crit_edge:  ; preds = %dec_label_pc_40702
  %v2_406f8.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_406f8

dec_label_pc_4071b:                               ; preds = %dec_label_pc_40702, %dec_label_pc_406a0
  %v0_4071b = phi i64 [ %v1_406e2, %dec_label_pc_406a0 ], [ %v0_4071b17, %dec_label_pc_40702 ]
  ret i64 %v0_4071b
}

define i64 @function_40734() local_unnamed_addr {
dec_label_pc_40734:
  %v0_40734 = load i64, i64* @rax, align 8
  %v1_40734 = add i64 %v0_40734, -8
  %v2_40734 = inttoptr i64 %v1_40734 to i64*
  %v3_40734 = load i64, i64* %v2_40734, align 8
  store i64 %v3_40734, i64* @rbp, align 8
  store i64 263999, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40888(i64 %arg1) local_unnamed_addr {
dec_label_pc_40888:
  %v0_40888 = load i64, i64* @rax, align 8
  %v1_40888 = trunc i64 %v0_40888 to i32
  %v10_40888 = icmp eq i32 %v1_40888, 8388608
  %v1_4088d = icmp eq i1 %v10_40888, false
  br i1 %v1_4088d, label %bb, label %dec_label_pc_40893

bb:                                               ; preds = %dec_label_pc_40888
  %v3_4088d = call i64 @function_40b9f(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_4088d, i64* @rax, align 8
  br label %dec_label_pc_40893

dec_label_pc_40893:                               ; preds = %bb, %dec_label_pc_40888
  %v0_40893 = load i64, i64* @r15, align 8
  %v1_40893 = add i64 %v0_40893, 8
  %v2_40893 = inttoptr i64 %v1_40893 to i32*
  %v3_40893 = load i32, i32* %v2_40893, align 4
  %v4_40893 = zext i32 %v3_40893 to i64
  store i64 %v4_40893, i64* @rax, align 8
  %v0_40897 = load i64, i64* @r14, align 8
  %v1_40897 = trunc i64 %v0_40897 to i32
  %v9_40897 = icmp ult i32 %v1_40897, %v3_40893
  %v1_4089a = icmp eq i1 %v9_40897, false
  br i1 %v1_4089a, label %bb3, label %dec_label_pc_408a0

bb3:                                              ; preds = %dec_label_pc_40893
  %v2_4089a = call i64 @function_410e9()
  store i64 %v2_4089a, i64* @rax, align 8
  %v0_408a5.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_408a0

dec_label_pc_408a0:                               ; preds = %bb3, %dec_label_pc_40893
  %v0_408a5 = phi i64 [ %v0_408a5.pre, %bb3 ], [ %v0_40897, %dec_label_pc_40893 ]
  store i64 %arg1, i64* @rdx, align 8
  store i64 %v0_408a5, i64* @rax, align 8
  %v2_408a8 = mul i64 %v0_408a5, 8
  %v3_408a8 = add i64 %v2_408a8, %arg1
  %v4_408a8 = inttoptr i64 %v3_408a8 to i64*
  %v5_408a8 = load i64, i64* %v4_408a8, align 8
  store i64 %v5_408a8, i64* @rdi, align 8
  %v1_408b3 = inttoptr i64 %v5_408a8 to i64*
  %v2_408b3 = load i64, i64* %v1_408b3, align 8
  store i64 %v2_408b3, i64* @rax, align 8
  ret i64 %v2_408b3
}

define i64 @function_408bb() local_unnamed_addr {
dec_label_pc_408bb:
  %v0_408bb = load i64, i64* @rbx, align 8
  %v1_408bd = trunc i64 %v0_408bb to i32
  %v3_408bd = udiv i32 %v1_408bd, 8388608
  %tmp237 = icmp ult i32 %v1_408bd, 8388608
  %v10_408bd = zext i32 %v3_408bd to i64
  store i64 %v10_408bd, i64* @rdi, align 8
  br i1 %tmp237, label %bb, label %dec_label_pc_408bb.dec_label_pc_408c8_crit_edge

dec_label_pc_408bb.dec_label_pc_408c8_crit_edge:  ; preds = %dec_label_pc_408bb
  br label %dec_label_pc_408c8

bb:                                               ; preds = %dec_label_pc_408bb
  %v2_408c2 = call i64 @function_40adb(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_408c2, i64* @rax, align 8
  %v0_408c8.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_408c8

dec_label_pc_408c8:                               ; preds = %dec_label_pc_408bb.dec_label_pc_408c8_crit_edge, %bb
  %v0_408c8 = phi i64 [ %v0_408c8.pre, %bb ], [ %v10_408bd, %dec_label_pc_408bb.dec_label_pc_408c8_crit_edge ]
  %v1_408c8 = add i64 %v0_408c8, -1
  store i64 %v1_408c8, i64* @rdx, align 8
  store i64 264414, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40986(i64 %arg1) local_unnamed_addr {
dec_label_pc_40986:
  %tmp5 = call i64 @__decompiler_undefined_function_0()
  %v10_40986 = icmp eq i64 %arg1, 0
  %v0_4098c = load i64, i64* @rax, align 8
  %v1_4098c = add i64 %v0_4098c, -8
  %v2_4098c = inttoptr i64 %v1_4098c to i64*
  %v3_4098c = load i64, i64* %v2_4098c, align 8
  store i64 %v3_4098c, i64* @r12, align 8
  br i1 %v10_40986, label %bb, label %dec_label_pc_40996

bb:                                               ; preds = %dec_label_pc_40986
  %v1_40990 = load i64, i64* @rdi, align 8
  %v2_40990 = load i64, i64* @rsi, align 8
  %v3_40990 = load i64, i64* @rdx, align 8
  %v5_40990 = call i64 @function_40dff(i64 %v1_40990, i64 %v2_40990, i64 %v3_40990, i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_40990, i64* @rax, align 8
  br label %dec_label_pc_40996

dec_label_pc_40996:                               ; preds = %bb, %dec_label_pc_40986
  store i64 %arg1, i64* @rcx, align 8
  %v1_4099b = add i64 %arg1, 8
  %v2_4099b = inttoptr i64 %v1_4099b to i32*
  %v3_4099b = load i32, i32* %v2_4099b, align 4
  %v4_4099b = zext i32 %v3_4099b to i64
  %v1_4099e = add nsw i64 %v4_4099b, -1
  store i64 %v1_4099e, i64* @rbx, align 8
  store i64 %v1_4099e, i64* @rax, align 8
  %v2_409a8 = mul nsw i64 %v1_4099e, 8
  %v3_409a8 = add i64 %arg1, 16
  %v4_409a8 = add i64 %v3_409a8, %v2_409a8
  store i64 %v4_409a8, i64* @rbp, align 8
  br label %dec_label_pc_409ad

dec_label_pc_409ad:                               ; preds = %dec_label_pc_409c3, %dec_label_pc_40996
  %v0_409ad = phi i64 [ %v1_4099e, %dec_label_pc_40996 ], [ %v17_409d5, %dec_label_pc_409c3 ]
  %.0 = phi i64 [ %tmp5, %dec_label_pc_40996 ], [ %v2_409c3, %dec_label_pc_409c3 ]
  %v4_409ad = trunc i64 %v0_409ad to i32
  %v6_409ad = icmp slt i32 %v4_409ad, 0
  br i1 %v6_409ad, label %bb8, label %dec_label_pc_409b5

bb8:                                              ; preds = %dec_label_pc_409ad
  %v2_409af = load i64, i64* @rsi, align 8
  %v3_409af = load i64, i64* @rdx, align 8
  %v5_409af = call i64 @function_40dff(i64 %.0, i64 %v2_409af, i64 %v3_409af, i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_409af, i64* @rax, align 8
  %v0_409ba.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_409b5

dec_label_pc_409b5:                               ; preds = %bb8, %dec_label_pc_409ad
  %v0_409ba = phi i64 [ %v0_409ba.pre, %bb8 ], [ %v0_409ad, %dec_label_pc_409ad ]
  store i64 %arg1, i64* @rax, align 8
  %v1_409ba = trunc i64 %v0_409ba to i32
  %v5_409ba = load i32, i32* %v2_4099b, align 4
  %v11_409ba = icmp ult i32 %v1_409ba, %v5_409ba
  %v1_409bd = icmp eq i1 %v11_409ba, false
  br i1 %v1_409bd, label %bb9, label %dec_label_pc_409c3

bb9:                                              ; preds = %dec_label_pc_409b5
  %v2_409bd = call i64 @function_40ea5()
  store i64 %v2_409bd, i64* @rax, align 8
  %v0_409d5.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_409c3

dec_label_pc_409c3:                               ; preds = %bb9, %dec_label_pc_409b5
  %v0_409d5 = phi i64 [ %v0_409d5.pre, %bb9 ], [ %v0_409ba, %dec_label_pc_409b5 ]
  %v0_409c3 = load i64, i64* @rbp, align 8
  %v1_409c3 = inttoptr i64 %v0_409c3 to i64*
  %v2_409c3 = load i64, i64* %v1_409c3, align 8
  store i64 %v2_409c3, i64* @rdi, align 8
  %v1_409d1 = add i64 %v0_409c3, -8
  store i64 %v1_409d1, i64* @rbp, align 8
  %v2_409d5 = add i64 %v0_409d5, 4294967295
  %v17_409d5 = and i64 %v2_409d5, 4294967295
  store i64 %v17_409d5, i64* @rbx, align 8
  br label %dec_label_pc_409ad
}

define i64 @function_40adb(i64 %arg1) local_unnamed_addr {
dec_label_pc_40adb:
  %tmp = call i32 @__decompiler_undefined_function_2()
  %v0_40ae0 = load i64, i64* @r14, align 8
  %v1_40ae0 = add i64 %v0_40ae0, 1
  store i64 %v1_40ae0, i64* @rbx, align 8
  %v1_40ae4 = inttoptr i64 %arg1 to i64*
  %v2_40ae4 = load i64, i64* %v1_40ae4, align 8
  store i64 %v2_40ae4, i64* @rax, align 8
  %v1_40ae8 = add i64 %v2_40ae4, 72
  %v2_40ae8 = inttoptr i64 %v1_40ae8 to i64*
  %v3_40ae8 = load i64, i64* %v2_40ae8, align 8
  store i64 %v3_40ae8, i64* @rax, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v0_40afa = load i64, i64* @r15, align 8
  store i64 %v0_40afa, i64* @rdi, align 8
  %v3_40afd = trunc i64 %v3_40ae8 to i32
  %v4_40afd = sub i32 %tmp, %v3_40afd
  %v3_40aff = trunc i64 %v1_40ae0 to i32
  %v4_40aff = sub i32 %v4_40afd, %v3_40aff
  %v20_40aff = zext i32 %v4_40aff to i64
  store i64 %v20_40aff, i64* @rdx, align 8
  ret i64 %v3_40ae8
}

define i64 @function_40b23(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_40b23:
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_40b23 = load i64, i64* @rax, align 8
  %v1_40b23 = add i64 %v0_40b23, -117
  %v2_40b23 = inttoptr i64 %v1_40b23 to i32*
  %v3_40b23 = load i32, i32* %v2_40b23, align 4
  %v4_40b23 = udiv i32 %v3_40b23, 536870912
  %v5_40b23 = mul i32 %v3_40b23, 8
  %v6_40b23 = or i32 %v4_40b23, %v5_40b23
  store i32 %v6_40b23, i32* %v2_40b23, align 4
  %v0_40b27 = load i64, i64* @rcx, align 8
  %v1_40b27 = add i64 %v0_40b27, -115
  %v2_40b27 = inttoptr i64 %v1_40b27 to i8*
  %v3_40b27 = load i8, i8* %v2_40b27, align 1
  %v4_40b27 = load i64, i64* @rax, align 8
  %v5_40b27 = trunc i64 %v4_40b27 to i8
  %v6_40b27 = add i8 %v5_40b27, %v3_40b27
  store i8 %v6_40b27, i8* %v2_40b27, align 1
  %v2_40b2a = load i32, i32* bitcast (i64* @rcx to i32*), align 8
  %v3_40b2a = load i64, i64* %r15.global-to-local, align 8
  %v4_40b2a = trunc i64 %v3_40b2a to i32
  %v5_40b2a = add i32 %v4_40b2a, %v2_40b2a
  %v21_40b2a = load i64, i64* @rcx, align 8
  %v22_40b2a = inttoptr i64 %v21_40b2a to i32*
  store i32 %v5_40b2a, i32* %v22_40b2a, align 4
  %v0_40b2d = load i64, i64* @rax, align 8
  ret i64 %v0_40b2d
}

define i64 @function_40b39(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_40b39:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_40b39 = add i64 %arg4, -115
  %v2_40b39 = inttoptr i64 %v1_40b39 to i32*
  %v3_40b39 = load i32, i32* %v2_40b39, align 4
  %v4_40b39 = mul i32 %v3_40b39, 64
  %v5_40b39 = udiv i32 %v3_40b39, 67108864
  %v6_40b39 = or i32 %v5_40b39, %v4_40b39
  store i32 %v6_40b39, i32* %v2_40b39, align 4
  %v0_40b3d = load i64, i64* @rbx, align 8
  %v1_40b3d = udiv i64 %v0_40b3d, 256
  %v2_40b3d = trunc i64 %v1_40b3d to i8
  %v5_40b3d = load i8, i8* bitcast (i64* @rcx to i8*), align 8
  %v6_40b3d = add i8 %v2_40b3d, %v5_40b3d
  %v21_40b3d = zext i8 %v6_40b3d to i64
  %v23_40b3d = mul nuw nsw i64 %v21_40b3d, 256
  %v24_40b3d = and i64 %v0_40b3d, -65281
  %v25_40b3d = or i64 %v23_40b3d, %v24_40b3d
  store i64 %v25_40b3d, i64* @rbx, align 8
  %v0_40b3f = load i64, i64* @rax, align 8
  ret i64 %v0_40b3f
}

define i64 @function_40b51() local_unnamed_addr {
dec_label_pc_40b51:
  %v0_40b55 = load i64, i64* @rbx, align 8
  %v1_40b55 = udiv i64 %v0_40b55, 256
  %v21_40b55 = mul i64 %v1_40b55, 512
  %v23_40b55 = and i64 %v21_40b55, 65024
  %v24_40b55 = and i64 %v0_40b55, -65281
  %v25_40b55 = or i64 %v23_40b55, %v24_40b55
  store i64 %v25_40b55, i64* @rbx, align 8
  %v0_40b57 = load i64, i64* @rax, align 8
  %v1_40b57 = add i64 %v0_40b57, -119
  %v2_40b57 = inttoptr i64 %v1_40b57 to i8*
  %v3_40b57 = load i8, i8* %v2_40b57, align 1
  %v4_40b57 = udiv i8 %v3_40b57, 2
  %v5_40b57 = shl i8 %v3_40b57, 7
  %v6_40b57 = or i8 %v4_40b57, %v5_40b57
  store i8 %v6_40b57, i8* %v2_40b57, align 1
  %v0_40b5a = load i64, i64* @rax, align 8
  ret i64 %v0_40b5a
}

define i64 @function_40b9f(i64 %arg1) local_unnamed_addr {
dec_label_pc_40b9f:
  %r12.global-to-local = alloca i64, align 8
  %v0_40b9f = load i64, i64* @rbx, align 8
  %v3_40ba113 = udiv i64 %v0_40b9f, 16384
  %v2_40ba4 = urem i64 %v3_40ba113, 512
  store i64 %v2_40ba4, i64* @rbx, align 8
  %v3_40baa = udiv i64 %v0_40b9f, 8388608
  %v10_40baa = urem i64 %v3_40baa, 512
  store i64 %v10_40baa, i64* @rax, align 8
  store i64 %v2_40ba4, i64* %r12.global-to-local, align 8
  %v0_40bb0 = load i64, i64* @r15, align 8
  %v1_40bb0 = add i64 %v0_40bb0, 8
  %v2_40bb0 = inttoptr i64 %v1_40bb0 to i32*
  %v3_40bb0 = load i32, i32* %v2_40bb0, align 4
  %v4_40bb0 = zext i32 %v3_40bb0 to i64
  store i64 %v4_40bb0, i64* @rdx, align 8
  %v0_40bb4 = load i64, i64* @r14, align 8
  %v1_40bb4 = trunc i64 %v0_40bb4 to i32
  %v9_40bb4 = icmp ult i32 %v1_40bb4, %v3_40bb0
  %v1_40bb7 = icmp eq i1 %v9_40bb4, false
  br i1 %v1_40bb7, label %bb, label %dec_label_pc_40bbd

bb:                                               ; preds = %dec_label_pc_40b9f
  %v2_40bb7 = call i64 @function_41326()
  store i64 %v2_40bb7, i64* @rax, align 8
  %v0_40bc2.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_40bbd

dec_label_pc_40bbd:                               ; preds = %bb, %dec_label_pc_40b9f
  %v0_40bc9 = phi i64 [ %v2_40bb7, %bb ], [ %v10_40baa, %dec_label_pc_40b9f ]
  %v0_40bc2 = phi i64 [ %v0_40bc2.pre, %bb ], [ %v0_40bb4, %dec_label_pc_40b9f ]
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v0_40bc2, i64* @rdx, align 8
  %v2_40bc5 = mul i64 %v0_40bc2, 8
  %v3_40bc5 = add i64 %v2_40bc5, %arg1
  %v4_40bc5 = inttoptr i64 %v3_40bc5 to i64*
  %v5_40bc5 = load i64, i64* %v4_40bc5, align 8
  store i64 %v5_40bc5, i64* @rbx, align 8
  %v4_40bc9 = trunc i64 %v0_40bc9 to i32
  %v5_40bc9 = icmp eq i32 %v4_40bc9, 0
  br i1 %v5_40bc9, label %bb14, label %dec_label_pc_40bd1

bb14:                                             ; preds = %dec_label_pc_40bbd
  %v2_40bcb = call i64 @function_40d28(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_40bcb, i64* @rax, align 8
  %v0_40bd4.pre = load i64, i64* @r14, align 8
  %v0_40be0.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_40bd1

dec_label_pc_40bd1:                               ; preds = %bb14, %dec_label_pc_40bbd
  %v0_40bed = phi i64 [ %v0_40be0.pre, %bb14 ], [ %v5_40bc5, %dec_label_pc_40bbd ]
  %v0_40bd4 = phi i64 [ %v0_40bd4.pre, %bb14 ], [ %v0_40bc2, %dec_label_pc_40bbd ]
  %v0_40bf5 = phi i64 [ %v2_40bcb, %bb14 ], [ %v0_40bc9, %dec_label_pc_40bbd ]
  %v1_40bd1 = add i64 %v0_40bf5, -1
  store i64 %v1_40bd1, i64* @rdx, align 8
  %v0_40bd8 = load i64, i64* @r15, align 8
  store i64 %v0_40bd8, i64* @rdi, align 8
  %v1_40be0 = inttoptr i64 %v0_40bed to i64*
  %v2_40be0 = load i64, i64* %v1_40be0, align 8
  store i64 %v2_40be0, i64* @rdx, align 8
  %v1_40be3 = add i64 %v2_40be0, 1424
  %v2_40be3 = inttoptr i64 %v1_40be3 to i64*
  %v3_40be3 = load i64, i64* %v2_40be3, align 8
  store i64 %v3_40be3, i64* @rdx, align 8
  store i64 %v0_40bed, i64* @rdi, align 8
  %v0_40bf2 = load i64, i64* %r12.global-to-local, align 8
  %v4_40bf2 = trunc i64 %v0_40bf2 to i32
  %v5_40bf2 = icmp eq i32 %v4_40bf2, 0
  store i64 %v0_40bf5, i64* @rbx, align 8
  br i1 %v5_40bf2, label %bb15, label %dec_label_pc_40bfe

bb15:                                             ; preds = %dec_label_pc_40bd1
  %v1_40bf8 = call i64 @function_40d68()
  store i64 %v1_40bf8, i64* @rax, align 8
  %v0_40bfe.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_40c0d.pre = load i64, i64* @r14, align 8
  %v0_40c13.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_40bfe

dec_label_pc_40bfe:                               ; preds = %bb15, %dec_label_pc_40bd1
  %v0_40c13 = phi i64 [ %v0_40c13.pre, %bb15 ], [ %v0_40bf5, %dec_label_pc_40bd1 ]
  %v0_40c03 = phi i64 [ %v1_40bf8, %bb15 ], [ %v0_40bf5, %dec_label_pc_40bd1 ]
  %v0_40c0d = phi i64 [ %v0_40c0d.pre, %bb15 ], [ %v0_40bd4, %dec_label_pc_40bd1 ]
  %v0_40bfe = phi i64 [ %v0_40bfe.pre, %bb15 ], [ %v0_40bf2, %dec_label_pc_40bd1 ]
  %v1_40bfe = add i64 %v0_40bfe, -1
  store i64 %v1_40bfe, i64* @rcx, align 8
  %v1_40c03 = inttoptr i64 %v0_40c03 to i64*
  %v2_40c03 = load i64, i64* %v1_40c03, align 8
  store i64 %v2_40c03, i64* @rax, align 8
  %v1_40c06 = add i64 %v2_40c03, 544
  %v2_40c06 = inttoptr i64 %v1_40c06 to i64*
  %v3_40c06 = load i64, i64* %v2_40c06, align 8
  store i64 %v3_40c06, i64* @rax, align 8
  store i64 %v0_40c0d, i64* @rdx, align 8
  store i64 %v0_40c13, i64* @rdi, align 8
  ret i64 %v3_40c06
}

define i64 @function_40c1d(i64 %arg1) local_unnamed_addr {
dec_label_pc_40c1d:
  %r14.global-to-local = alloca i64, align 8
  %tmp233 = call i64 @__decompiler_undefined_function_0()
  %v1_40c1d = add i64 %tmp233, 8
  %v2_40c1d = inttoptr i64 %v1_40c1d to i32*
  %v3_40c1d = load i32, i32* %v2_40c1d, align 4
  %v4_40c1d = zext i32 %v3_40c1d to i64
  store i64 %v4_40c1d, i64* @rcx, align 8
  %v0_40c21 = load i64, i64* %r14.global-to-local, align 8
  store i64 %arg1, i64* @rdx, align 8
  store i64 %v0_40c21, i64* @rax, align 8
  %v2_40c32 = mul i64 %v0_40c21, 8
  %v3_40c32 = add i64 %v2_40c32, %arg1
  %v4_40c32 = inttoptr i64 %v3_40c32 to i64*
  %v5_40c32 = load i64, i64* %v4_40c32, align 8
  store i64 %v5_40c32, i64* @rdi, align 8
  %v1_40c48 = add i64 %v0_40c21, 2
  store i64 %v1_40c48, i64* @rax, align 8
  %v2_40c56 = mul i64 %v1_40c48, 8
  %v3_40c56 = add i64 %v2_40c56, %arg1
  %v4_40c56 = inttoptr i64 %v3_40c56 to i64*
  %v5_40c56 = load i64, i64* %v4_40c56, align 8
  store i64 %v5_40c56, i64* @rdx, align 8
  %v2_40c5a = add i64 %v0_40c21, 3
  %v17_40c5a = and i64 %v2_40c5a, 4294967295
  store i64 %v17_40c5a, i64* %r14.global-to-local, align 8
  store i64 %arg1, i64* @rax, align 8
  %v2_40c6f = mul nuw nsw i64 %v17_40c5a, 8
  %v3_40c6f = add i64 %v2_40c6f, %arg1
  %v4_40c6f = inttoptr i64 %v3_40c6f to i64*
  %v5_40c6f = load i64, i64* %v4_40c6f, align 8
  store i64 %v5_40c6f, i64* @rcx, align 8
  %v1_40c73 = inttoptr i64 %v5_40c32 to i64*
  %v2_40c73 = load i64, i64* %v1_40c73, align 8
  store i64 %v2_40c73, i64* @rax, align 8
  %v1_40c76 = add i64 %v2_40c73, 1360
  %v2_40c76 = inttoptr i64 %v1_40c76 to i64*
  %v3_40c76 = load i64, i64* %v2_40c76, align 8
  store i64 %v3_40c76, i64* @rax, align 8
  %v1_40c7f = call i64 @function_3efe0(i64 ptrtoint (i32* @0 to i64))
  store i64 %v1_40c7f, i64* @rax, align 8
  ret i64 %v1_40c7f
}

define i64 @function_40c84(i64 %arg1) local_unnamed_addr {
dec_label_pc_40c84:
  %r14.global-to-local = alloca i64, align 8
  %v0_40c84 = load i64, i64* @r15, align 8
  %v1_40c84 = add i64 %v0_40c84, 8
  %v2_40c84 = inttoptr i64 %v1_40c84 to i32*
  %v3_40c84 = load i32, i32* %v2_40c84, align 4
  %v4_40c84 = zext i32 %v3_40c84 to i64
  store i64 %v4_40c84, i64* @rdx, align 8
  %v0_40c88 = load i64, i64* %r14.global-to-local, align 8
  %v1_40c88 = trunc i64 %v0_40c88 to i32
  %v9_40c88 = icmp ult i32 %v1_40c88, %v3_40c84
  %v1_40c8b = icmp eq i1 %v9_40c88, false
  br i1 %v1_40c8b, label %bb, label %dec_label_pc_40c91

bb:                                               ; preds = %dec_label_pc_40c84
  %v2_40c8b = call i64 @function_411ea()
  store i64 %v2_40c8b, i64* @rax, align 8
  %v0_40c96.pre = load i64, i64* %r14.global-to-local, align 8
  %v0_40ca5.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_40c91

dec_label_pc_40c91:                               ; preds = %bb, %dec_label_pc_40c84
  %v0_40ca5 = phi i64 [ %v0_40ca5.pre, %bb ], [ %v4_40c84, %dec_label_pc_40c84 ]
  %v0_40ca1 = phi i64 [ %v0_40c96.pre, %bb ], [ %v0_40c88, %dec_label_pc_40c84 ]
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v0_40ca1, i64* @rax, align 8
  %v2_40c99 = mul i64 %v0_40ca1, 8
  %v3_40c99 = add i64 %v2_40c99, %arg1
  %v1_40c9d = inttoptr i64 %v3_40c99 to i64*
  %v2_40c9d = load i64, i64* %v1_40c9d, align 8
  store i64 %v2_40c9d, i64* @rdi, align 8
  %v1_40ca1 = add i64 %v0_40ca1, 1
  store i64 %v1_40ca1, i64* @rax, align 8
  %v1_40ca5 = trunc i64 %v0_40ca5 to i32
  %v3_40ca5 = trunc i64 %v1_40ca1 to i32
  %tmp246 = icmp ugt i32 %v1_40ca5, %v3_40ca5
  br i1 %tmp246, label %dec_label_pc_40cad, label %bb244

bb244:                                            ; preds = %dec_label_pc_40c91
  %v3_40ca7 = call i64 @function_411e1()
  store i64 %v3_40ca7, i64* @rax, align 8
  %v0_40cb3.pre = load i64, i64* @rdi, align 8
  %v0_40cc6.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_40cad

dec_label_pc_40cad:                               ; preds = %dec_label_pc_40c91, %bb244
  %v0_40cc6 = phi i64 [ %v0_40cc6.pre, %bb244 ], [ %v0_40ca1, %dec_label_pc_40c91 ]
  %v0_40cb3 = phi i64 [ %v0_40cb3.pre, %bb244 ], [ %v2_40c9d, %dec_label_pc_40c91 ]
  %v1_40cb3 = inttoptr i64 %v0_40cb3 to i64*
  %v2_40cb3 = load i64, i64* %v1_40cb3, align 8
  store i64 %v2_40cb3, i64* @rax, align 8
  %v1_40cb6 = add i64 %v2_40cb3, 1336
  %v2_40cb6 = inttoptr i64 %v1_40cb6 to i64*
  %v3_40cb6 = load i64, i64* %v2_40cb6, align 8
  store i64 %v3_40cb6, i64* @rax, align 8
  store i64 %v3_40cb6, i64* @rbx, align 8
  %v0_40cc2 = load i64, i64* @r15, align 8
  %v1_40cc2 = add i64 %v0_40cc2, 8
  %v2_40cc2 = inttoptr i64 %v1_40cc2 to i32*
  %v3_40cc2 = load i32, i32* %v2_40cc2, align 4
  %v4_40cc2 = zext i32 %v3_40cc2 to i64
  store i64 %v4_40cc2, i64* @rax, align 8
  %v1_40cc6 = trunc i64 %v0_40cc6 to i32
  %v9_40cc6 = icmp ult i32 %v1_40cc6, %v3_40cc2
  br i1 %v9_40cc6, label %bb245, label %dec_label_pc_40ccf

bb245:                                            ; preds = %dec_label_pc_40cad
  %v1_40cc9 = call i64 @function_3f243()
  store i64 %v1_40cc9, i64* @rax, align 8
  %v0_40ccf.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_40ccf

dec_label_pc_40ccf:                               ; preds = %bb245, %dec_label_pc_40cad
  %v0_40ccf = phi i64 [ %v0_40ccf.pre, %bb245 ], [ %v0_40cc6, %dec_label_pc_40cad ]
  store i64 %v0_40ccf, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40d28(i64 %arg1) local_unnamed_addr {
dec_label_pc_40d28:
  %tmp = call i32 @__decompiler_undefined_function_2()
  %v0_40d2d = load i64, i64* @r14, align 8
  %v1_40d2d = add i64 %v0_40d2d, 1
  %v1_40d31 = inttoptr i64 %arg1 to i64*
  %v2_40d31 = load i64, i64* %v1_40d31, align 8
  store i64 %v2_40d31, i64* @rax, align 8
  %v1_40d35 = add i64 %v2_40d31, 72
  %v2_40d35 = inttoptr i64 %v1_40d35 to i64*
  %v3_40d35 = load i64, i64* %v2_40d35, align 8
  store i64 %v3_40d35, i64* @rax, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v0_40d47 = load i64, i64* @r15, align 8
  store i64 %v0_40d47, i64* @rdi, align 8
  %v3_40d4a = trunc i64 %v3_40d35 to i32
  %v4_40d4a = sub i32 %tmp, %v3_40d4a
  %v3_40d4c = trunc i64 %v1_40d2d to i32
  %v4_40d4c = sub i32 %v4_40d4a, %v3_40d4c
  %v20_40d4c = zext i32 %v4_40d4c to i64
  store i64 %v20_40d4c, i64* @rdx, align 8
  ret i64 %v3_40d35
}

define i64 @function_40d58() local_unnamed_addr {
dec_label_pc_40d58:
  %v0_40d58 = load i64, i64* @rbp, align 8
  store i64 %v0_40d58, i64* @rdi, align 8
  %v0_40d60 = load i64, i64* @rax, align 8
  store i64 %v0_40d60, i64* @rbx, align 8
  ret i64 %v0_40d60
}

define i64 @function_40d68() local_unnamed_addr {
dec_label_pc_40d68:
  %v0_40d6f = load i64, i64* @rbx, align 8
  store i64 %v0_40d6f, i64* @rdi, align 8
  store i64 %v0_40d6f, i64* @rax, align 8
  %v1_40d7e = add i64 %v0_40d6f, 552
  %v2_40d7e = inttoptr i64 %v1_40d7e to i64*
  %v3_40d7e = load i64, i64* %v2_40d7e, align 8
  store i64 %v3_40d7e, i64* @rax, align 8
  store i64 %v0_40d6f, i64* @rdi, align 8
  %v1_40d8a = call i64 @function_40143(i64 %v0_40d6f)
  store i64 %v1_40d8a, i64* @rax, align 8
  ret i64 %v1_40d8a
}

define i64 @function_40d8f() local_unnamed_addr {
dec_label_pc_40d8f:
  %v0_40d8f = load i64, i64* @rbx, align 8
  store i64 %v0_40d8f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40d98() local_unnamed_addr {
dec_label_pc_40d98:
  %v0_40d98 = load i64, i64* @rbx, align 8
  store i64 %v0_40d98, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40da1() local_unnamed_addr {
dec_label_pc_40da1:
  %v0_40da1 = load i64, i64* @rbx, align 8
  store i64 %v0_40da1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40daa(i32 %arg1) local_unnamed_addr {
dec_label_pc_40daa:
  %v4_40daa = zext i32 %arg1 to i64
  store i64 %v4_40daa, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40db5() local_unnamed_addr {
dec_label_pc_40db5:
  %v0_40db5 = load i64, i64* @rbx, align 8
  store i64 %v0_40db5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40dbe(i64 %arg1) local_unnamed_addr {
dec_label_pc_40dbe:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40dc9(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_40dc9:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40de6() local_unnamed_addr {
dec_label_pc_40de6:
  %v0_40de6 = load i64, i64* @rbx, align 8
  store i64 %v0_40de6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40def() local_unnamed_addr {
dec_label_pc_40def:
  %v0_40def = load i64, i64* @rbx, align 8
  store i64 %v0_40def, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40df8() local_unnamed_addr {
dec_label_pc_40df8:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40dff(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_40dff:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg4, i64* @rax, align 8
  %v1_40e04 = add i64 %arg4, 24
  %v2_40e04 = inttoptr i64 %v1_40e04 to i64*
  %v3_40e04 = load i64, i64* %v2_40e04, align 8
  store i64 %v3_40e04, i64* @rax, align 8
  %v1_40e08 = icmp eq i64 %v3_40e04, 0
  br i1 %v1_40e08, label %dec_label_pc_40e1f, label %dec_label_pc_40e0d

dec_label_pc_40e0d:                               ; preds = %dec_label_pc_40dff
  %v1_40e0d = add i64 %v3_40e04, 96
  %v2_40e0d = inttoptr i64 %v1_40e0d to i64*
  %v3_40e0d = load i64, i64* %v2_40e0d, align 8
  store i64 %v3_40e0d, i64* @rdi, align 8
  %v1_40e11 = icmp eq i64 %v3_40e0d, 0
  br i1 %v1_40e11, label %dec_label_pc_40e1f, label %dec_label_pc_40e16

dec_label_pc_40e16:                               ; preds = %dec_label_pc_40e0d
  %v1_40e16 = inttoptr i64 %v3_40e0d to i64*
  %v2_40e16 = load i64, i64* %v1_40e16, align 8
  store i64 %v2_40e16, i64* @rax, align 8
  br label %dec_label_pc_40e1f

dec_label_pc_40e1f:                               ; preds = %dec_label_pc_40e16, %dec_label_pc_40e0d, %dec_label_pc_40dff
  %v0_40e1f = load i64, i64* @r12, align 8
  store i64 %v0_40e1f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_40e29 = load i64, i64* @rdx, align 8
  %v10_40e29 = icmp eq i64 %v0_40e29, 21
  br i1 %v10_40e29, label %bb, label %dec_label_pc_40e33

bb:                                               ; preds = %dec_label_pc_40e1f
  %v2_40e2d = call i64 @function_4107f(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_40e2d, i64* @rax, align 8
  %v0_40e33.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_40e33

dec_label_pc_40e33:                               ; preds = %bb, %dec_label_pc_40e1f
  %v0_40e415 = phi i64 [ %v2_40e2d, %bb ], [ 0, %dec_label_pc_40e1f ]
  %v0_40e33 = phi i64 [ %v0_40e33.pre, %bb ], [ %v0_40e29, %dec_label_pc_40e1f ]
  %v10_40e33 = icmp eq i64 %v0_40e33, 20
  br i1 %v10_40e33, label %bb9, label %dec_label_pc_40e3d

bb9:                                              ; preds = %dec_label_pc_40e33
  %v1_40e37 = call i64 @function_40734()
  store i64 %v1_40e37, i64* @rax, align 8
  br label %dec_label_pc_40e3d

dec_label_pc_40e3d:                               ; preds = %bb9, %dec_label_pc_40e33
  %v0_40e41 = phi i64 [ %v1_40e37, %bb9 ], [ %v0_40e415, %dec_label_pc_40e33 ]
  ret i64 %v0_40e41
}

define i64 @function_40e47() local_unnamed_addr {
dec_label_pc_40e47:
  %v0_40e47 = load i64, i64* @rax, align 8
  store i64 %v0_40e47, i64* @rdi, align 8
  ret i64 %v0_40e47
}

define i64 @function_40e4f() local_unnamed_addr {
dec_label_pc_40e4f:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40e62() local_unnamed_addr {
dec_label_pc_40e62:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40e6c() local_unnamed_addr {
dec_label_pc_40e6c:
  %v0_40e6c = load i64, i64* @rax, align 8
  store i64 %v0_40e6c, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40e7e() local_unnamed_addr {
dec_label_pc_40e7e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40ea5() local_unnamed_addr {
dec_label_pc_40ea5:
  %v0_40ea5 = load i64, i64* @rbx, align 8
  store i64 %v0_40ea5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40ec5() local_unnamed_addr {
dec_label_pc_40ec5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40ed6() local_unnamed_addr {
dec_label_pc_40ed6:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_40f06() local_unnamed_addr {
dec_label_pc_40f06:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_40f0b() local_unnamed_addr {
dec_label_pc_40f0b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40f1c() local_unnamed_addr {
dec_label_pc_40f1c:
  %v0_40f1c = load i64, i64* @r14, align 8
  store i64 %v0_40f1c, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40f2d() local_unnamed_addr {
dec_label_pc_40f2d:
  %v0_40f2d = load i64, i64* @rbx, align 8
  store i64 %v0_40f2d, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40f44() local_unnamed_addr {
dec_label_pc_40f44:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40f4e(i32 %arg1) local_unnamed_addr {
dec_label_pc_40f4e:
  %v4_40f4e = zext i32 %arg1 to i64
  store i64 %v4_40f4e, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40f69() local_unnamed_addr {
dec_label_pc_40f69:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40f73() local_unnamed_addr {
dec_label_pc_40f73:
  %v0_40f73 = load i64, i64* @rbx, align 8
  store i64 %v0_40f73, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40fba() local_unnamed_addr {
dec_label_pc_40fba:
  %v0_40fc1 = load i64, i64* @rbx, align 8
  store i64 %v0_40fc1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40fda() local_unnamed_addr {
dec_label_pc_40fda:
  %v0_40fe4 = load i64, i64* @rbx, align 8
  store i64 %v0_40fe4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40fed() local_unnamed_addr {
dec_label_pc_40fed:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_40ffb() local_unnamed_addr {
dec_label_pc_40ffb:
  %v0_40ffb = load i64, i64* @rbx, align 8
  store i64 %v0_40ffb, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41004() local_unnamed_addr {
dec_label_pc_41004:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41014() local_unnamed_addr {
dec_label_pc_41014:
  %v0_41014 = load i64, i64* @rbx, align 8
  store i64 %v0_41014, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4101d() local_unnamed_addr {
dec_label_pc_4101d:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4102b() local_unnamed_addr {
dec_label_pc_4102b:
  %v0_4102b = load i64, i64* @rbx, align 8
  store i64 %v0_4102b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41034() local_unnamed_addr {
dec_label_pc_41034:
  %v0_4103b = load i64, i64* @rbx, align 8
  store i64 %v0_4103b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41069() local_unnamed_addr {
dec_label_pc_41069:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4107f(i64 %arg1) local_unnamed_addr {
dec_label_pc_4107f:
  %tmp = call i32 @__decompiler_undefined_function_2()
  %v0_4107f = load i64, i64* @rax, align 8
  %v1_4107f = add i64 %v0_4107f, -8
  %v2_4107f = inttoptr i64 %v1_4107f to i64*
  %v3_4107f = load i64, i64* %v2_4107f, align 8
  store i64 %v3_4107f, i64* @rbx, align 8
  %v1_41083 = add i64 %v3_4107f, 56
  %v2_41083 = inttoptr i64 %v1_41083 to i64*
  %v3_41083 = load i64, i64* %v2_41083, align 8
  store i64 %v3_41083, i64* @rax, align 8
  %v1_41087 = icmp eq i64 %v3_41083, 0
  %v1_4108a = icmp eq i1 %v1_41087, false
  br i1 %v1_4108a, label %dec_label_pc_410a4, label %dec_label_pc_4108c

dec_label_pc_4108c:                               ; preds = %dec_label_pc_4107f
  store i64 %arg1, i64* @rax, align 8
  %v1_41091 = add i64 %arg1, 8
  %v2_41091 = inttoptr i64 %v1_41091 to i64*
  %v3_41091 = load i64, i64* %v2_41091, align 8
  store i64 %v3_41091, i64* @rdx, align 8
  %v4_41095 = zext i32 %tmp to i64
  store i64 %v4_41095, i64* @rcx, align 8
  store i64 %v3_4107f, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  br label %dec_label_pc_410a4

dec_label_pc_410a4:                               ; preds = %dec_label_pc_4108c, %dec_label_pc_4107f
  store i64 %v3_4107f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_410ae() local_unnamed_addr {
dec_label_pc_410ae:
  %v0_410ae = load i64, i64* @rbp, align 8
  store i64 %v0_410ae, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_410e9() local_unnamed_addr {
dec_label_pc_410e9:
  %v0_410e9 = load i64, i64* @r14, align 8
  store i64 %v0_410e9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_410f3() local_unnamed_addr {
dec_label_pc_410f3:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_410fd() local_unnamed_addr {
dec_label_pc_410fd:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41131() local_unnamed_addr {
dec_label_pc_41131:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4115e() local_unnamed_addr {
dec_label_pc_4115e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41168() local_unnamed_addr {
dec_label_pc_41168:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_411e1() local_unnamed_addr {
dec_label_pc_411e1:
  %v0_411e1 = load i64, i64* @rax, align 8
  store i64 %v0_411e1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_411ea() local_unnamed_addr {
dec_label_pc_411ea:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41206() local_unnamed_addr {
dec_label_pc_41206:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41210() local_unnamed_addr {
dec_label_pc_41210:
  %v0_41210 = load i64, i64* @rax, align 8
  store i64 %v0_41210, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41219() local_unnamed_addr {
dec_label_pc_41219:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41223() local_unnamed_addr {
dec_label_pc_41223:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4122a(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4122a:
  store i64 %arg3, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  %v10_41234 = icmp eq i64 %arg3, 9
  br i1 %v10_41234, label %bb, label %dec_label_pc_4123e

bb:                                               ; preds = %dec_label_pc_4122a
  %v2_41238 = call i64 @function_4107f(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_41238, i64* @rax, align 8
  %v0_4123e.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_4123e

dec_label_pc_4123e:                               ; preds = %bb, %dec_label_pc_4122a
  %v0_4123e = phi i64 [ %v0_4123e.pre, %bb ], [ %arg3, %dec_label_pc_4122a ]
  %v10_4123e = icmp eq i64 %v0_4123e, 8
  br i1 %v10_4123e, label %bb239, label %dec_label_pc_41248

bb239:                                            ; preds = %dec_label_pc_4123e
  %v1_41242 = call i64 @function_40734()
  store i64 %v1_41242, i64* @rax, align 8
  %v0_41248.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_41248

dec_label_pc_41248:                               ; preds = %bb239, %dec_label_pc_4123e
  %v0_41248 = phi i64 [ %v0_41248.pre, %bb239 ], [ %v0_4123e, %dec_label_pc_4123e ]
  %v10_41248 = icmp eq i64 %v0_41248, 7
  br i1 %v10_41248, label %bb241, label %dec_label_pc_41252

bb241:                                            ; preds = %dec_label_pc_41248
  %v2_4124c = call i64 @function_40986(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_4124c, i64* @rax, align 8
  br label %dec_label_pc_41252

dec_label_pc_41252:                               ; preds = %bb241, %dec_label_pc_41248
  %v0_41252 = call i64 @function_40e47()
  store i64 %v0_41252, i64* @rax, align 8
  ret i64 %v0_41252
}

define i64 @function_41257() local_unnamed_addr {
dec_label_pc_41257:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4126a() local_unnamed_addr {
dec_label_pc_4126a:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41271() local_unnamed_addr {
dec_label_pc_41271:
  %v0_41271 = load i64, i64* @rax, align 8
  store i64 %v0_41271, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41286() local_unnamed_addr {
dec_label_pc_41286:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41299() local_unnamed_addr {
dec_label_pc_41299:
  %v0_41299 = load i64, i64* @rbx, align 8
  store i64 %v0_41299, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_412e5() local_unnamed_addr {
dec_label_pc_412e5:
  %v0_412e5 = load i64, i64* @rbx, align 8
  store i64 %v0_412e5, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_412ee() local_unnamed_addr {
dec_label_pc_412ee:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41313() local_unnamed_addr {
dec_label_pc_41313:
  %v0_41313 = load i64, i64* @rax, align 8
  store i64 %v0_41313, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41326() local_unnamed_addr {
dec_label_pc_41326:
  %v0_41326 = load i64, i64* @r14, align 8
  store i64 %v0_41326, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41330() local_unnamed_addr {
dec_label_pc_41330:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4135d(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4135d:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v10_4135d = icmp eq i64 %arg3, 24
  br i1 %v10_4135d, label %bb, label %dec_label_pc_41367

bb:                                               ; preds = %dec_label_pc_4135d
  %v2_41361 = call i64 @function_4107f(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_41361, i64* @rax, align 8
  %v0_41367.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_41367

dec_label_pc_41367:                               ; preds = %bb, %dec_label_pc_4135d
  %v0_41367 = phi i64 [ %v0_41367.pre, %bb ], [ %arg3, %dec_label_pc_4135d ]
  %v10_41367 = icmp eq i64 %v0_41367, 23
  br i1 %v10_41367, label %bb238, label %dec_label_pc_41371

bb238:                                            ; preds = %dec_label_pc_41367
  %v1_4136b = call i64 @function_40734()
  store i64 %v1_4136b, i64* @rax, align 8
  %v0_41371.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_41371

dec_label_pc_41371:                               ; preds = %bb238, %dec_label_pc_41367
  %v0_41371 = phi i64 [ %v0_41371.pre, %bb238 ], [ %v0_41367, %dec_label_pc_41367 ]
  %v10_41371 = icmp eq i64 %v0_41371, 22
  br i1 %v10_41371, label %bb240, label %dec_label_pc_4137b

bb240:                                            ; preds = %dec_label_pc_41371
  %v2_41375 = call i64 @function_40986(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_41375, i64* @rax, align 8
  br label %dec_label_pc_4137b

dec_label_pc_4137b:                               ; preds = %bb240, %dec_label_pc_41371
  %v0_4137b = call i64 @function_40e47()
  store i64 %v0_4137b, i64* @rax, align 8
  ret i64 %v0_4137b
}

define i64 @function_41393() local_unnamed_addr {
dec_label_pc_41393:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413b7() local_unnamed_addr {
dec_label_pc_413b7:
  %v0_413b7 = load i64, i64* @rax, align 8
  store i64 %v0_413b7, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413c9() local_unnamed_addr {
dec_label_pc_413c9:
  %v0_413c9 = load i64, i64* @rax, align 8
  store i64 %v0_413c9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413d2() local_unnamed_addr {
dec_label_pc_413d2:
  %v0_413d2 = load i64, i64* @rbx, align 8
  store i64 %v0_413d2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413db() local_unnamed_addr {
dec_label_pc_413db:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413e2() local_unnamed_addr {
dec_label_pc_413e2:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413e9() local_unnamed_addr {
dec_label_pc_413e9:
  %v0_413e9 = load i64, i64* @rbx, align 8
  store i64 %v0_413e9, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413f2() local_unnamed_addr {
dec_label_pc_413f2:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_413f9() local_unnamed_addr {
dec_label_pc_413f9:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41400() local_unnamed_addr {
dec_label_pc_41400:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4140a() local_unnamed_addr {
dec_label_pc_4140a:
  %v0_4140a = load i64, i64* @rax, align 8
  store i64 %v0_4140a, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41413() local_unnamed_addr {
dec_label_pc_41413:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4141a() local_unnamed_addr {
dec_label_pc_4141a:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState15push_onecaptureEJPNS1_8LuaValueEiii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_41440:
  %r8.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_41440 = load i64, i64* %rbp.global-to-local, align 8
  %v0_41441 = load i64, i64* @rbx, align 8
  %v1_41446 = trunc i64 %arg2 to i32
  %v3_41446 = add i64 %arg1, 32
  %v4_41446 = inttoptr i64 %v3_41446 to i32*
  %v5_41446 = load i32, i32* %v4_41446, align 4
  %v7_41449 = icmp slt i32 %v1_41446, %v5_41446
  br i1 %v7_41449, label %dec_label_pc_41470, label %dec_label_pc_4144b

dec_label_pc_4144b:                               ; preds = %dec_label_pc_41440
  %v1_41453 = add i64 %arg1, 8
  %v2_41453 = inttoptr i64 %v1_41453 to i64*
  %v3_41453 = load i64, i64* %v2_41453, align 8
  store i64 %v3_41453, i64* @rdi, align 8
  %v0_41457 = load i64, i64* @rdx, align 8
  store i64 %v0_41457, i64* @rax, align 8
  %v0_41459 = load i64, i64* @rcx, align 8
  store i64 %v0_41459, i64* @rdx, align 8
  %v1_4145d = inttoptr i64 %v3_41453 to i64*
  %v2_4145d = load i64, i64* %v1_4145d, align 8
  store i64 %v2_4145d, i64* %r8.global-to-local, align 8
  ret i64 %v0_41457

dec_label_pc_41470:                               ; preds = %dec_label_pc_41440
  %v1_41470 = add i64 %arg1, 48
  %v2_41470 = inttoptr i64 %v1_41470 to i64*
  %v3_41470 = load i64, i64* %v2_41470, align 8
  store i64 %v3_41470, i64* @rax, align 8
  %v3_41474 = add i64 %v3_41470, 8
  %v4_41474 = inttoptr i64 %v3_41474 to i32*
  %v5_41474 = load i32, i32* %v4_41474, align 4
  %v11_41474 = icmp ult i32 %v1_41446, %v5_41474
  %v1_41477 = icmp eq i1 %v11_41474, false
  br i1 %v1_41477, label %bb, label %dec_label_pc_4147d

bb:                                               ; preds = %dec_label_pc_41470
  %v4_41477 = call i64 @function_41537(i64 %arg1, i64 %arg2)
  store i64 %v4_41477, i64* @rax, align 8
  br label %dec_label_pc_4147d

dec_label_pc_4147d:                               ; preds = %bb, %dec_label_pc_41470
  %v0_41480 = phi i64 [ %v4_41477, %bb ], [ %v3_41470, %dec_label_pc_41470 ]
  store i64 %arg2, i64* @rcx, align 8
  %v2_41480 = mul i64 %arg2, 4
  %v3_41480 = add i64 %v2_41480, 12
  %v4_41480 = add i64 %v3_41480, %v0_41480
  %v5_41480 = inttoptr i64 %v4_41480 to i32*
  %v6_41480 = load i32, i32* %v5_41480, align 4
  %v7_41480 = zext i32 %v6_41480 to i64
  store i64 %v7_41480, i64* @rdx, align 8
  %v11_4148d = icmp eq i32 %v6_41480, -2
  %v1_41490 = add i64 %arg1, 40
  %v2_41490 = inttoptr i64 %v1_41490 to i64*
  %v3_41490 = load i64, i64* %v2_41490, align 8
  store i64 %v3_41490, i64* @rax, align 8
  %v3_414c0 = add i64 %v3_41490, 8
  %v4_414c0 = inttoptr i64 %v3_414c0 to i32*
  %v5_414c0 = load i32, i32* %v4_414c0, align 4
  %v11_414c0 = icmp ult i32 %v1_41446, %v5_414c0
  %v1_414c3 = add i64 %v3_41490, 12
  br i1 %v11_4148d, label %dec_label_pc_414c0, label %dec_label_pc_41496

dec_label_pc_41496:                               ; preds = %dec_label_pc_4147d
  store i64 %v1_414c3, i64* %r8.global-to-local, align 8
  %v1_4149d = icmp eq i1 %v11_414c0, false
  br i1 %v1_4149d, label %bb256, label %dec_label_pc_414a3

bb256:                                            ; preds = %dec_label_pc_41496
  %v4_4149d = call i64 @function_41537(i64 %arg1, i64 %arg2)
  store i64 %v4_4149d, i64* @rax, align 8
  %v0_414a7.pre = load i64, i64* %r8.global-to-local, align 8
  %v1_414a7.pre = load i64, i64* @rcx, align 8
  %v0_414ae.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_414a3

dec_label_pc_414a3:                               ; preds = %bb256, %dec_label_pc_41496
  %v0_414ae = phi i64 [ %v0_414ae.pre, %bb256 ], [ %v7_41480, %dec_label_pc_41496 ]
  %v1_414a7 = phi i64 [ %v1_414a7.pre, %bb256 ], [ %arg2, %dec_label_pc_41496 ]
  %v0_414a7 = phi i64 [ %v0_414a7.pre, %bb256 ], [ %v1_414c3, %dec_label_pc_41496 ]
  %v1_414a3 = add i64 %arg1, 8
  %v2_414a3 = inttoptr i64 %v1_414a3 to i64*
  %v3_414a3 = load i64, i64* %v2_414a3, align 8
  store i64 %v3_414a3, i64* @rdi, align 8
  %v2_414a7 = mul i64 %v1_414a7, 4
  %v3_414a7 = add i64 %v2_414a7, %v0_414a7
  %v4_414a7 = inttoptr i64 %v3_414a7 to i32*
  %v5_414a7 = load i32, i32* %v4_414a7, align 4
  %v1_414ab = inttoptr i64 %v3_414a3 to i64*
  %v2_414ab = load i64, i64* %v1_414ab, align 8
  store i64 %v2_414ab, i64* @rax, align 8
  %v1_414ae = trunc i64 %v0_414ae to i32
  %v4_414ae = add i32 %v5_414a7, %v1_414ae
  %v20_414ae = zext i32 %v4_414ae to i64
  store i64 %v20_414ae, i64* @rdx, align 8
  store i64 %v0_41441, i64* @rbx, align 8
  store i64 %v0_41440, i64* %rbp.global-to-local, align 8
  ret i64 %v2_414ab

dec_label_pc_414c0:                               ; preds = %dec_label_pc_4147d
  store i64 %v1_414c3, i64* @rdx, align 8
  %v1_414c7 = icmp eq i1 %v11_414c0, false
  br i1 %v1_414c7, label %bb258, label %dec_label_pc_414c9

bb258:                                            ; preds = %dec_label_pc_414c0
  %v4_414c7 = call i64 @function_41537(i64 %arg1, i64 %arg2)
  store i64 %v4_414c7, i64* @rax, align 8
  %v0_414d0.pre = load i64, i64* @rdx, align 8
  %v1_414d0.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_414c9

dec_label_pc_414c9:                               ; preds = %bb258, %dec_label_pc_414c0
  %v1_414d0 = phi i64 [ %v1_414d0.pre, %bb258 ], [ %arg2, %dec_label_pc_414c0 ]
  %v0_414d0 = phi i64 [ %v0_414d0.pre, %bb258 ], [ %v1_414c3, %dec_label_pc_414c0 ]
  store i64 267472, i64* @rdi, align 8
  %v2_414d0 = mul i64 %v1_414d0, 4
  %v3_414d0 = add i64 %v2_414d0, %v0_414d0
  %v4_414d0 = inttoptr i64 %v3_414d0 to i32*
  %v5_414d0 = load i32, i32* %v4_414d0, align 4
  %v6_414d0 = zext i32 %v5_414d0 to i64
  store i64 %v6_414d0, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41537(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41537:
  store i64 %arg2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41558() local_unnamed_addr {
dec_label_pc_41558:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState9add_valueEJvPNS1_6BufferEiiPNS1_8LuaValueE"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_41560:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r8.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* %r8.global-to-local, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_41560 = load i64, i64* %r14.global-to-local, align 8
  %v0_41562 = load i64, i64* %r13.global-to-local, align 8
  %v0_41564 = load i64, i64* @rcx, align 8
  store i64 %v0_41564, i64* %r14.global-to-local, align 8
  %v0_41567 = load i64, i64* %r12.global-to-local, align 8
  %v0_41569 = load i64, i64* %rbp.global-to-local, align 8
  %v0_4156a = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_4156a, i64* %r12.global-to-local, align 8
  %v0_4156d = load i64, i64* @rbx, align 8
  store i64 %v0_4156d, i64* %stack_var_-40, align 8
  %v2_4156e = load i64, i64* %r8.global-to-local, align 8
  store i64 %v2_4156e, i64* @rax, align 8
  %v0_41571 = load i64, i64* @rdi, align 8
  store i64 %v0_41571, i64* %rbp.global-to-local, align 8
  %v0_41574 = load i64, i64* @rdx, align 8
  store i64 %v0_41574, i64* %r13.global-to-local, align 8
  store i64 %v2_4156e, i64* @rbx, align 8
  store i64 %v2_4156e, i64* @rdi, align 8
  %v1_41583 = trunc i64 %v2_4156e to i32
  %v8_4158c = icmp sgt i32 %v1_41583, 5
  br i1 %v8_4158c, label %dec_label_pc_41592, label %dec_label_pc_41620

dec_label_pc_41592:                               ; preds = %dec_label_pc_41560
  %v11_41592 = icmp eq i32 %v1_41583, 6
  %v1_41595 = icmp eq i1 %v11_41592, false
  br i1 %v1_41595, label %dec_label_pc_41650, label %dec_label_pc_4159b

dec_label_pc_4159b:                               ; preds = %dec_label_pc_41592
  store i64 %v2_4156e, i64* %rsi.global-to-local, align 8
  store i64 %v2_4156e, i64* @rdx, align 8
  store i64 %v2_4156e, i64* @rbx, align 8
  store i64 %v2_4156e, i64* @rax, align 8
  store i64 %v2_4156e, i64* @rdi, align 8
  %v4_415d7 = trunc i64 %v2_4156e to i8
  %v5_415d7 = icmp eq i8 %v4_415d7, 0
  %v1_415d9 = icmp eq i1 %v5_415d7, false
  br i1 %v1_415d9, label %dec_label_pc_41660, label %dec_label_pc_415df

dec_label_pc_415df:                               ; preds = %dec_label_pc_4159b
  %v1_415df = add i64 %v0_41571, 8
  %v2_415df = inttoptr i64 %v1_415df to i64*
  %v3_415df = load i64, i64* %v2_415df, align 8
  store i64 %v3_415df, i64* @rdi, align 8
  store i64 %v0_41564, i64* @rdx, align 8
  store i64 %v0_41574, i64* %rsi.global-to-local, align 8
  %v1_415e9 = inttoptr i64 %v3_415df to i64*
  %v2_415e9 = load i64, i64* %v1_415e9, align 8
  store i64 %v2_415e9, i64* @rax, align 8
  store i64 %v2_415e9, i64* @rbx, align 8
  br label %dec_label_pc_415f5

dec_label_pc_415f5:                               ; preds = %dec_label_pc_41660, %dec_label_pc_415df
  %v0_415f5 = phi i64 [ %v2_4156e, %dec_label_pc_41660 ], [ %v2_415e9, %dec_label_pc_415df ]
  %v1_415f5 = inttoptr i64 %v0_415f5 to i64*
  %v2_415f5 = load i64, i64* %v1_415f5, align 8
  store i64 %v2_415f5, i64* @rax, align 8
  store i64 %v0_415f5, i64* @rdi, align 8
  %v1_41601 = icmp eq i64 %v0_4156a, 0
  br i1 %v1_41601, label %bb, label %dec_label_pc_4160a

bb:                                               ; preds = %dec_label_pc_415f5
  %v1_41604 = call i64 @function_41710()
  store i64 %v1_41604, i64* @rax, align 8
  %v2_41615.pre = load i64, i64* %stack_var_-40, align 8
  br label %dec_label_pc_4160a

dec_label_pc_4160a:                               ; preds = %bb, %dec_label_pc_415f5
  %v2_41615 = phi i64 [ %v2_41615.pre, %bb ], [ %v0_4156d, %dec_label_pc_415f5 ]
  %v0_4161d = phi i64 [ %v1_41604, %bb ], [ %v2_415f5, %dec_label_pc_415f5 ]
  store i64 %v0_4161d, i64* %rsi.global-to-local, align 8
  store i64 %v0_4156a, i64* @rdi, align 8
  store i64 %v2_41615, i64* @rbx, align 8
  store i64 %v0_41569, i64* %rbp.global-to-local, align 8
  store i64 %v0_41567, i64* %r12.global-to-local, align 8
  store i64 %v0_41562, i64* %r13.global-to-local, align 8
  store i64 %v0_41560, i64* %r14.global-to-local, align 8
  ret i64 %v0_4161d

dec_label_pc_41620:                               ; preds = %dec_label_pc_41560
  %v6_41623 = icmp slt i32 %v1_41583, 3
  br i1 %v6_41623, label %dec_label_pc_41650, label %dec_label_pc_41625

dec_label_pc_41625:                               ; preds = %dec_label_pc_41620
  store i64 %v2_4156e, i64* @rax, align 8
  store i64 %v0_41564, i64* %r8.global-to-local, align 8
  store i64 %v0_41574, i64* @rcx, align 8
  store i64 %v2_4156e, i64* @rdx, align 8
  store i64 %v0_41571, i64* @rdi, align 8
  store i64 %v0_4156d, i64* @rbx, align 8
  store i64 %v0_41569, i64* %rbp.global-to-local, align 8
  store i64 %v0_41567, i64* %r12.global-to-local, align 8
  store i64 %v0_41562, i64* %r13.global-to-local, align 8
  store i64 %v0_41560, i64* %r14.global-to-local, align 8
  ret i64 %v2_4156e

dec_label_pc_41650:                               ; preds = %dec_label_pc_41620, %dec_label_pc_41592
  %v0_41650 = load i64, i64* inttoptr (i64 267863 to i64*), align 8
  store i64 %v0_41650, i64* @rdi, align 8
  br label %dec_label_pc_41660

dec_label_pc_41660:                               ; preds = %dec_label_pc_41650, %dec_label_pc_4159b
  %v1_41660 = inttoptr i64 %v2_4156e to i64*
  %v2_41660 = load i64, i64* %v1_41660, align 8
  store i64 %v2_41660, i64* @rax, align 8
  store i64 %v2_4156e, i64* @rdi, align 8
  %v4_4166c = trunc i64 %v2_41660 to i8
  %v5_4166c = icmp eq i8 %v4_4166c, 0
  %v1_4166e = icmp eq i1 %v5_4166c, false
  br i1 %v1_4166e, label %dec_label_pc_415f5, label %dec_label_pc_41674

dec_label_pc_41674:                               ; preds = %dec_label_pc_41660
  ret i64 %v2_41660
}

define i64 @function_41710() local_unnamed_addr {
dec_label_pc_41710:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib12MathLib$modf6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41720:
  %rsi.global-to-local = alloca i64, align 8
  %xmm1.global-to-local = alloca i128, align 8
  %xmm2.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_41723 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_41723, i64* @rbx, align 8
  store i64 %v0_41723, i64* @rax, align 8
  store i64 %v0_41723, i64* @rdi, align 8
  %v4_41740 = trunc i64 %v0_41723 to i8
  store i1 false, i1* @cf, align 1
  %v5_41740 = icmp eq i8 %v4_41740, 0
  store i1 %v5_41740, i1* @zf, align 1
  %v7_41740 = call i8 @llvm.ctpop.i8(i8 %v4_41740)
  %v8_41740 = urem i8 %v7_41740, 2
  %v9_41740 = icmp eq i8 %v8_41740, 0
  store i1 %v9_41740, i1* @pf, align 1
  %v1_41742 = icmp eq i1 %v5_41740, false
  br i1 %v1_41742, label %bb, label %dec_label_pc_41748

bb:                                               ; preds = %dec_label_pc_41720
  %v2_41742 = call i64 @function_418c0()
  store i64 %v2_41742, i64* @rax, align 8
  %v2_41748.pre = load i64, i64* %rsi.global-to-local, align 8
  %v0_4174b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_41748

dec_label_pc_41748:                               ; preds = %bb, %dec_label_pc_41720
  %v0_4174b = phi i64 [ %v0_4174b.pre, %bb ], [ %v0_41723, %dec_label_pc_41720 ]
  %v2_41748 = phi i64 [ %v2_41748.pre, %bb ], [ %v0_41723, %dec_label_pc_41720 ]
  store i64 %v2_41748, i64* @rax, align 8
  store i64 %v0_4174b, i64* @rdi, align 8
  %v0_41754 = load i128, i128* %xmm2.global-to-local, align 8
  %v2_41754 = call i128 @__asm_pxor(i128 %v0_41754, i128 %v0_41754)
  store i128 %v2_41754, i128* %xmm2.global-to-local, align 8
  %v0_41758 = load i128, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v0_41758, i128 %v2_41754)
  %v0_4175c = load i1, i1* @cf, align 1
  %v1_4175c = load i1, i1* @zf, align 1
  %v2_4175c = or i1 %v0_4175c, %v1_4175c
  br i1 %v2_4175c, label %bb262, label %dec_label_pc_41762

bb262:                                            ; preds = %dec_label_pc_41748
  %v3_4175c = call i64 @function_41860()
  store i64 %v3_4175c, i64* @rax, align 8
  br label %dec_label_pc_41762

dec_label_pc_41762:                               ; preds = %bb262, %dec_label_pc_41748
  %v0_41762 = load i64, i64* inttoptr (i64 268138 to i64*), align 8
  %v1_41762 = call i128 @__asm_movsd(i64 %v0_41762)
  %v0_4176a = load i128, i128* @xmm0, align 8
  %v1_4176a = call i128 @__asm_movapd(i128 %v0_4176a)
  %v0_4176e = load i64, i64* inttoptr (i64 268150 to i64*), align 8
  %v1_4176e = call i128 @__asm_movsd(i64 %v0_4176e)
  %v2_41776 = call i128 @__asm_andpd(i128 %v1_4176a, i128 %v1_41762)
  %v0_4177a = load i128, i128* @xmm0, align 8
  %v1_4177a = call i128 @__asm_movapd(i128 %v0_4177a)
  store i128 %v1_4177a, i128* %xmm1.global-to-local, align 8
  call void @__asm_ucomisd(i128 %v1_4176e, i128 %v2_41776)
  %v0_41782 = load i1, i1* @cf, align 1
  %v1_41782 = load i1, i1* @zf, align 1
  %v2_41782 = or i1 %v0_41782, %v1_41782
  br i1 %v2_41782, label %dec_label_pc_41762.dec_label_pc_417b7_crit_edge, label %dec_label_pc_41784

dec_label_pc_41762.dec_label_pc_417b7_crit_edge:  ; preds = %dec_label_pc_41762
  %v0_417b7.pre = load i128, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_417b7

dec_label_pc_41784:                               ; preds = %dec_label_pc_41762
  %v0_41784 = load i128, i128* @xmm0, align 8
  %v1_41784 = call i64 @__asm_cvttsd2si.7470(i128 %v0_41784)
  store i64 %v1_41784, i64* @rax, align 8
  %v2_41789 = call i128 @__asm_pxor(i128 %v2_41776, i128 %v2_41776)
  %v0_4178d = load i64, i64* inttoptr (i64 268181 to i64*), align 8
  %v1_4178d = call i128 @__asm_movsd(i64 %v0_4178d)
  %v1_41795 = load i128, i128* @xmm0, align 8
  %v2_41795 = call i128 @__asm_andnpd(i128 %v1_41762, i128 %v1_41795)
  %v0_41799 = load i64, i64* @rax, align 8
  %v1_41799 = call i128 @__asm_cvtsi2sd(i64 %v0_41799)
  %v1_4179e = call i128 @__asm_movapd(i128 %v1_41799)
  store i128 %v1_4179e, i128* %xmm1.global-to-local, align 8
  %v1_417a2 = load i128, i128* @xmm0, align 8
  %v2_417a2 = call i128 @__asm_cmpnlesd(i128 %v1_4179e, i128 %v1_417a2)
  store i128 %v2_417a2, i128* %xmm1.global-to-local, align 8
  %v2_417a7 = call i128 @__asm_andpd(i128 %v2_417a2, i128 %v1_4178d)
  store i128 %v2_417a7, i128* %xmm1.global-to-local, align 8
  %v2_417ab = call i128 @__asm_subsd(i128 %v1_41799, i128 %v2_417a7)
  %v1_417af = call i128 @__asm_movapd(i128 %v2_417ab)
  store i128 %v1_417af, i128* %xmm1.global-to-local, align 8
  %v2_417b3 = call i128 @__asm_orpd(i128 %v1_417af, i128 %v2_41795)
  store i128 %v2_417b3, i128* %xmm1.global-to-local, align 8
  br label %dec_label_pc_417b7

dec_label_pc_417b7:                               ; preds = %dec_label_pc_41762.dec_label_pc_417b7_crit_edge, %dec_label_pc_41784
  %v0_417b7 = phi i128 [ %v0_417b7.pre, %dec_label_pc_41762.dec_label_pc_417b7_crit_edge ], [ %v2_417b3, %dec_label_pc_41784 ]
  %v1_417b7 = load i128, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v0_417b7, i128 %v1_417b7)
  %v0_417bb = load i1, i1* @pf, align 1
  br i1 %v0_417bb, label %dec_label_pc_417bf, label %dec_label_pc_417bd

dec_label_pc_417bd:                               ; preds = %dec_label_pc_417b7
  %v0_417bd = load i1, i1* @zf, align 1
  br i1 %v0_417bd, label %dec_label_pc_417bd.dec_label_pc_417c7_crit_edge, label %dec_label_pc_417bf

dec_label_pc_417bd.dec_label_pc_417c7_crit_edge:  ; preds = %dec_label_pc_417bd
  %v0_417d0.pre = load i128, i128* %xmm2.global-to-local, align 8
  br label %dec_label_pc_417c7

dec_label_pc_417bf:                               ; preds = %dec_label_pc_417bd, %dec_label_pc_417b7
  %v0_417bf = load i128, i128* @xmm0, align 8
  %v1_417bf = call i128 @__asm_movapd(i128 %v0_417bf)
  store i128 %v1_417bf, i128* %xmm2.global-to-local, align 8
  %v1_417c3 = load i128, i128* %xmm1.global-to-local, align 8
  %v2_417c3 = call i128 @__asm_subsd(i128 %v1_417bf, i128 %v1_417c3)
  store i128 %v2_417c3, i128* %xmm2.global-to-local, align 8
  br label %dec_label_pc_417c7

dec_label_pc_417c7:                               ; preds = %dec_label_pc_417bd.dec_label_pc_417c7_crit_edge, %dec_label_pc_417bf
  %v0_417d0 = phi i128 [ %v0_417d0.pre, %dec_label_pc_417bd.dec_label_pc_417c7_crit_edge ], [ %v2_417c3, %dec_label_pc_417bf ]
  store i64 268238, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_417d0 = call i64 @__asm_movsd.7465(i128 %v0_417d0)
  %v0_417d6 = load i128, i128* %xmm1.global-to-local, align 8
  %v1_417d6 = call i64 @__asm_movsd.7465(i128 %v0_417d6)
  %v4_417d6 = load i64, i64* @rax, align 8
  ret i64 %v4_417d6
}

define i64 @function_41853(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_41853:
  %v0_41853 = load i64, i64* @rbx, align 8
  store i64 %v0_41853, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_41853
}

define i64 @function_41860() local_unnamed_addr {
dec_label_pc_41860:
  %v0_41860 = load i64, i64* inttoptr (i64 268392 to i64*), align 8
  %v1_41860 = call i128 @__asm_movsd(i64 %v0_41860)
  %v0_41868 = load i128, i128* @xmm0, align 8
  %v1_41868 = call i128 @__asm_movapd(i128 %v0_41868)
  %v0_4186c = load i64, i64* inttoptr (i64 268404 to i64*), align 8
  %v1_4186c = call i128 @__asm_movsd(i64 %v0_4186c)
  %v0_41874 = load i128, i128* @xmm0, align 8
  %v1_41874 = call i128 @__asm_movapd(i128 %v0_41874)
  %v2_41878 = call i128 @__asm_andpd(i128 %v1_41868, i128 %v1_41860)
  call void @__asm_ucomisd(i128 %v1_4186c, i128 %v2_41878)
  %v0_41886 = load i128, i128* @xmm0, align 8
  %v1_41886 = call i64 @__asm_cvttsd2si.7470(i128 %v0_41886)
  store i64 %v1_41886, i64* @rax, align 8
  %v2_4188b = call i128 @__asm_pxor(i128 %v2_41878, i128 %v2_41878)
  %v0_4188f = load i64, i64* inttoptr (i64 268439 to i64*), align 8
  %v1_4188f = call i128 @__asm_movsd(i64 %v0_4188f)
  %v1_41897 = load i128, i128* @xmm0, align 8
  %v2_41897 = call i128 @__asm_andnpd(i128 %v1_41860, i128 %v1_41897)
  %v1_4189b = call i128 @__asm_cvtsi2sd(i64 %v1_41886)
  %v2_418a0 = call i128 @__asm_cmpnlesd(i128 %v1_41874, i128 %v1_4189b)
  %v2_418a5 = call i128 @__asm_andpd(i128 %v2_418a0, i128 %v1_4188f)
  %v2_418a9 = call i128 @__asm_addsd(i128 %v2_418a5, i128 %v1_4189b)
  %v2_418ad = call i128 @__asm_orpd(i128 %v2_418a9, i128 %v2_41897)
  ret i64 %v1_41886
}

define i64 @function_418c0() local_unnamed_addr {
dec_label_pc_418c0:
  store i64 268487, i64* @rdi, align 8
  store i1 false, i1* @cf, align 1
  store i1 true, i1* @zf, align 1
  store i1 true, i1* @pf, align 1
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$708onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41920:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4192d = load i64, i64* @rdi, align 8
  store i64 %v0_4192d, i64* @rbx, align 8
  store i64 268691, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_419e0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_419e0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_419e0 = load i64, i64* @rbx, align 8
  %v1_419e0 = add i64 %v0_419e0, 48
  %v2_419e0 = inttoptr i64 %v1_419e0 to i64*
  %v3_419e0 = load i64, i64* %v2_419e0, align 8
  store i64 %v3_419e0, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41a96(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41a96:
  %r13.global-to-local = alloca i64, align 8
  %v0_41a96 = load i64, i64* @rbx, align 8
  %v1_41a96 = add i64 %v0_41a96, 32
  %v2_41a96 = inttoptr i64 %v1_41a96 to i64*
  %v3_41a96 = load i64, i64* %v2_41a96, align 8
  store i64 %v3_41a96, i64* @rdi, align 8
  %v0_41a9a = load i64, i64* @rbp, align 8
  %v1_41a9d = inttoptr i64 %v3_41a96 to i64*
  %v2_41a9d = load i64, i64* %v1_41a9d, align 8
  store i64 %v2_41a9d, i64* @rax, align 8
  %v1_41aa6 = inttoptr i64 %v2_41a9d to i64*
  %v2_41aa6 = load i64, i64* %v1_41aa6, align 8
  store i64 %v2_41aa6, i64* @rdx, align 8
  store i64 %v2_41a9d, i64* @rdi, align 8
  %v4_41ab2 = trunc i64 %v2_41a9d to i8
  %v5_41ab2 = icmp eq i8 %v4_41ab2, 0
  %v1_41ab4 = icmp eq i1 %v5_41ab2, false
  br i1 %v1_41ab4, label %bb, label %dec_label_pc_41aba

bb:                                               ; preds = %dec_label_pc_41a96
  %v5_41ab4 = call i64 @function_419e0(i64 %v2_41a9d, i64 %v0_41a9a, i64 %v2_41aa6)
  store i64 %v5_41ab4, i64* @rax, align 8
  %v0_41aba.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_41aba

dec_label_pc_41aba:                               ; preds = %bb, %dec_label_pc_41a96
  %v0_41af9 = phi i64 [ %v0_41aba.pre, %bb ], [ %v0_41a96, %dec_label_pc_41a96 ]
  %v1_41aba = add i64 %v0_41af9, 64
  %v2_41aba = inttoptr i64 %v1_41aba to i64*
  %v3_41aba = load i64, i64* %v2_41aba, align 8
  store i64 %v3_41aba, i64* @rdi, align 8
  %v1_41ac1 = inttoptr i64 %v3_41aba to i64*
  %v2_41ac1 = load i64, i64* %v1_41ac1, align 8
  store i64 %v2_41ac1, i64* @rax, align 8
  %v1_41aca = inttoptr i64 %v2_41ac1 to i64*
  %v2_41aca = load i64, i64* %v1_41aca, align 8
  store i64 %v2_41aca, i64* @rdx, align 8
  %v4_41ad6 = trunc i64 %v2_41ac1 to i8
  %v5_41ad6 = icmp eq i8 %v4_41ad6, 0
  store i64 %arg1, i64* @rdi, align 8
  %v1_41adc = icmp eq i1 %v5_41ad6, false
  br i1 %v1_41adc, label %dec_label_pc_41af0, label %dec_label_pc_41ade

dec_label_pc_41ade:                               ; preds = %dec_label_pc_41aba
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1

dec_label_pc_41af0:                               ; preds = %dec_label_pc_41aba
  store i64 269047, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v2_41b02 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_41b02, i64* @rax, align 8
  store i64 %v2_41b02, i64* @rdi, align 8
  %v4_41b0c = trunc i64 %v2_41b02 to i32
  %v5_41b0c = icmp eq i32 %v4_41b0c, 0
  br i1 %v5_41b0c, label %bb254, label %dec_label_pc_41b15

bb254:                                            ; preds = %dec_label_pc_41af0
  %v1_41b13 = call i64 @function_41b39()
  store i64 %v1_41b13, i64* @rax, align 8
  br label %dec_label_pc_41b15

dec_label_pc_41b15:                               ; preds = %bb254, %dec_label_pc_41af0
  store i64 269084, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41b39() local_unnamed_addr {
dec_label_pc_41b39:
  store i64 269134, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41b70(i64 %arg1) local_unnamed_addr {
dec_label_pc_41b70:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib21PackageLib$searchpath6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41b80:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_41b8d = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_41b8d, i64* @rbx, align 8
  store i64 %v0_41b8d, i64* @rdi, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rax, align 8
  %v0_41bc4 = load i64, i64* inttoptr (i64 269259 to i64*), align 8
  store i64 %v0_41bc4, i64* @rdx, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 269280, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41c80(i64 %arg1) local_unnamed_addr {
dec_label_pc_41c80:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_41c87 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_41c87, i64* @rdx, align 8
  %v1_41c87 = load i64, i64* @rax, align 8
  ret i64 %v1_41c87
}

define i64 @function_41d2d() local_unnamed_addr {
dec_label_pc_41d2d:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v1_41d2d = add i64 %tmp232, 24
  %v2_41d2d = inttoptr i64 %v1_41d2d to i64*
  %v3_41d2d = load i64, i64* %v2_41d2d, align 8
  store i64 %v3_41d2d, i64* @rax, align 8
  store i64 1, i64* @rdx, align 8
  %v1_41d3d = add i64 %v3_41d2d, 24
  %v2_41d3d = inttoptr i64 %v1_41d3d to i64*
  %v3_41d3d = load i64, i64* %v2_41d3d, align 8
  store i64 %v3_41d3d, i64* @rax, align 8
  %v1_41d41 = add i64 %v3_41d3d, 64
  %v2_41d41 = inttoptr i64 %v1_41d41 to i64*
  %v3_41d41 = load i64, i64* %v2_41d41, align 8
  %v1_41d45 = inttoptr i64 %v3_41d41 to i64*
  %v2_41d45 = load i64, i64* %v1_41d45, align 8
  store i64 %v2_41d45, i64* @rax, align 8
  %v1_41d49 = inttoptr i64 %v2_41d45 to i64*
  %v2_41d49 = load i64, i64* %v1_41d49, align 8
  store i64 %v2_41d49, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41dcc(i64 %arg1) local_unnamed_addr {
dec_label_pc_41dcc:
  %rbp.global-to-local = alloca i64, align 8
  %v0_41dcc = load i64, i64* %rbp.global-to-local, align 8
  %v1_41dcc = add i64 %v0_41dcc, 1
  store i64 %v1_41dcc, i64* @rbx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %v1_41dcc, i64* @rdx, align 8
  %v1_41dd9 = load i64, i64* @rax, align 8
  ret i64 %v1_41dd9
}

define i64 @function_41e00() local_unnamed_addr {
dec_label_pc_41e00:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_41e20() local_unnamed_addr {
dec_label_pc_41e20:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_41e8d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_41e8d:
  %v0_41e8d = load i64, i64* @rbx, align 8
  store i64 %v0_41e8d, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_41e8d
}

define i64 @function_41ea0() local_unnamed_addr {
dec_label_pc_41ea0:
  %v2_41ea0 = load i64, i64* @rax, align 8
  store i64 %v2_41ea0, i64* @rdx, align 8
  %v1_41ea3 = add i64 %v2_41ea0, 72
  %v2_41ea3 = inttoptr i64 %v1_41ea3 to i64*
  %v3_41ea3 = load i64, i64* %v2_41ea3, align 8
  store i64 %v3_41ea3, i64* @rdx, align 8
  store i64 270003, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_41ec7() local_unnamed_addr {
dec_label_pc_41ec7:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$15$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_41ef0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_41ef8 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_41ef8, i64* @rbx, align 8
  store i64 %v0_41ef8, i64* @rdi, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 2, i64* @rax, align 8
  %v0_41f2a = load i64, i64* inttoptr (i64 270129 to i64*), align 8
  store i64 %v0_41f2a, i64* %rsi.global-to-local, align 8
  store i64 270145, i64* @rdi, align 8
  %v3_41f43 = load i64, i64* inttoptr (i64 270155 to i64*), align 8
  store i64 %v3_41f43, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_420ff() local_unnamed_addr {
dec_label_pc_420ff:
  store i64 270598, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_42256(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_42256:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_42256 = load i64, i64* inttoptr (i64 270941 to i64*), align 8
  br label %dec_label_pc_422cc

dec_label_pc_42268:                               ; preds = %dec_label_pc_422cc
  %v2_42268 = load i64, i64* %v1_422d8, align 8
  store i64 %v2_42268, i64* @rax, align 8
  store i64 %v2_422cc, i64* @rdx, align 8
  store i64 %v2_422cc, i64* @rdi, align 8
  %v1_4228b = inttoptr i64 %v2_42268 to i64*
  %v2_4228b = load i64, i64* %v1_4228b, align 8
  store i64 %v2_4228b, i64* @rdx, align 8
  store i64 %v2_42268, i64* @rdi, align 8
  store i64 %v2_42268, i64* @r13, align 8
  %v2_4229a = load i64, i64* %v1_4228b, align 8
  store i64 %v2_4229a, i64* @rax, align 8
  store i64 %v2_42268, i64* @rdi, align 8
  %v4_422ad = trunc i64 %v2_4229a to i8
  %v5_422ad = icmp eq i8 %v4_422ad, 0
  br i1 %v5_422ad, label %bb, label %dec_label_pc_422b5

bb:                                               ; preds = %dec_label_pc_42268
  %v7_422af = call i64 @function_42340(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_422af, i64* @rax, align 8
  %v0_422b5.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_422b5

dec_label_pc_422b5:                               ; preds = %bb, %dec_label_pc_42268
  %v0_422b5 = phi i64 [ %v0_422b5.pre, %bb ], [ %v0_42268, %dec_label_pc_42268 ]
  %v1_422b5 = inttoptr i64 %v0_422b5 to i64*
  %v2_422b5 = load i64, i64* %v1_422b5, align 8
  store i64 %v2_422b5, i64* @rax, align 8
  store i64 %v0_422b5, i64* @rdi, align 8
  br label %dec_label_pc_422cc

dec_label_pc_422cc:                               ; preds = %dec_label_pc_422b5, %dec_label_pc_42256
  %v0_42268 = phi i64 [ %v2_422b5, %dec_label_pc_422b5 ], [ %v0_42256, %dec_label_pc_42256 ]
  %v2_422cc = load i64, i64* @rbx, align 8
  store i64 %v2_422cc, i64* @rax, align 8
  store i64 %v2_422cc, i64* @rdi, align 8
  %v1_422d8 = inttoptr i64 %v0_42268 to i64*
  %v2_422d8 = load i64, i64* %v1_422d8, align 8
  store i64 %v2_422d8, i64* @rdx, align 8
  store i64 %v0_42268, i64* @rdi, align 8
  %v4_422e8 = trunc i64 %v2_422cc to i8
  %v5_422e8 = icmp eq i8 %v4_422e8, 0
  %v1_422ea = icmp eq i1 %v5_422e8, false
  br i1 %v1_422ea, label %dec_label_pc_42268, label %dec_label_pc_422f0

dec_label_pc_422f0:                               ; preds = %dec_label_pc_422cc
  store i64 271095, i64* @rdi, align 8
  %v0_422fb = load i64, i64* inttoptr (i64 271106 to i64*), align 8
  store i64 %v0_422fb, i64* @rbx, align 8
  ret i64 %v2_422cc
}

define i64 @function_42340(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_42340:
  %v0_42340 = load i64, i64* @r13, align 8
  store i64 %v0_42340, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  ret i64 %v0_42340
}

define i64 @function_42352(i64 %arg1) local_unnamed_addr {
dec_label_pc_42352:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$788onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_42360:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4236d = load i64, i64* @rdi, align 8
  store i64 %v0_4236d, i64* @rbx, align 8
  store i64 271262, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 1, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_42903() local_unnamed_addr {
dec_label_pc_42903:
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  ret i64 %tmp229
}

define i64 @function_4291c() local_unnamed_addr {
dec_label_pc_4291c:
  %rbp.global-to-local = alloca i64, align 8
  %v0_4291c = load i64, i64* @rbx, align 8
  %v1_4291c = add i64 %v0_4291c, 24
  %v2_4291c = inttoptr i64 %v1_4291c to i64*
  %v3_4291c = load i64, i64* %v2_4291c, align 8
  store i64 %v3_4291c, i64* @rdi, align 8
  %v1_42923 = inttoptr i64 %v3_4291c to i64*
  %v2_42923 = load i64, i64* %v1_42923, align 8
  store i64 %v2_42923, i64* @rax, align 8
  %v1_4292c = inttoptr i64 %v2_42923 to i64*
  %v2_4292c = load i64, i64* %v1_4292c, align 8
  store i64 %v2_4292c, i64* @rdx, align 8
  store i64 %v2_42923, i64* @rdi, align 8
  %v4_42938 = trunc i64 %v2_42923 to i8
  %v5_42938 = icmp eq i8 %v4_42938, 0
  %v1_4293a = icmp eq i1 %v5_42938, false
  br i1 %v1_4293a, label %bb, label %dec_label_pc_42940

bb:                                               ; preds = %dec_label_pc_4291c
  %v2_4293a = call i64 @function_42b8a()
  store i64 %v2_4293a, i64* @rax, align 8
  %v0_42940.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_42940

dec_label_pc_42940:                               ; preds = %bb, %dec_label_pc_4291c
  %v0_42940 = phi i64 [ %v0_42940.pre, %bb ], [ %v0_4291c, %dec_label_pc_4291c ]
  %v1_42940 = add i64 %v0_42940, 256
  %v2_42940 = inttoptr i64 %v1_42940 to i64*
  %v3_42940 = load i64, i64* %v2_42940, align 8
  store i64 %v3_42940, i64* @rdi, align 8
  %v1_4294a = inttoptr i64 %v3_42940 to i64*
  %v2_4294a = load i64, i64* %v1_4294a, align 8
  store i64 %v2_4294a, i64* @rax, align 8
  %v1_42953 = inttoptr i64 %v2_4294a to i64*
  %v2_42953 = load i64, i64* %v1_42953, align 8
  store i64 %v2_42953, i64* @rdx, align 8
  store i64 %v2_4294a, i64* @rdi, align 8
  %v4_4295f = trunc i64 %v2_4294a to i8
  %v5_4295f = icmp eq i8 %v4_4295f, 0
  br i1 %v5_4295f, label %bb248, label %dec_label_pc_42967

bb248:                                            ; preds = %dec_label_pc_42940
  %v1_42961 = call i64 @function_42bab()
  store i64 %v1_42961, i64* @rax, align 8
  %v0_42967.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_42967

dec_label_pc_42967:                               ; preds = %bb248, %dec_label_pc_42940
  %v0_42967 = phi i64 [ %v0_42967.pre, %bb248 ], [ %v0_42940, %dec_label_pc_42940 ]
  %v1_42967 = add i64 %v0_42967, 184
  %v2_42967 = inttoptr i64 %v1_42967 to i64*
  %v3_42967 = load i64, i64* %v2_42967, align 8
  store i64 %v3_42967, i64* @rax, align 8
  %v0_4296e = load i64, i64* inttoptr (i64 272757 to i64*), align 8
  store i64 %v0_4296e, i64* %rbp.global-to-local, align 8
  %v1_42975 = add i64 %v3_42967, 8
  %v2_42975 = inttoptr i64 %v1_42975 to i32*
  %v3_42975 = load i32, i32* %v2_42975, align 4
  %v5_42979 = icmp eq i32 %v3_42975, 0
  br i1 %v5_42979, label %bb249, label %dec_label_pc_42982

bb249:                                            ; preds = %dec_label_pc_42967
  %v2_4297c = call i64 @function_42ba2(i64 %v2_4294a)
  store i64 %v2_4297c, i64* @rax, align 8
  %v0_42982.pre = load i64, i64* @rbx, align 8
  %v0_429ea.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_42982

dec_label_pc_42982:                               ; preds = %bb249, %dec_label_pc_42967
  %v0_429ea = phi i64 [ %v0_429ea.pre, %bb249 ], [ %v0_4296e, %dec_label_pc_42967 ]
  %v0_42989 = phi i64 [ %v2_4297c, %bb249 ], [ %v3_42967, %dec_label_pc_42967 ]
  %v0_42a10 = phi i64 [ %v0_42982.pre, %bb249 ], [ %v0_42967, %dec_label_pc_42967 ]
  %v1_42982 = add i64 %v0_42a10, 272
  %v2_42982 = inttoptr i64 %v1_42982 to i64*
  %v3_42982 = load i64, i64* %v2_42982, align 8
  store i64 %v3_42982, i64* @rdi, align 8
  %v1_42989 = add i64 %v0_42989, 16
  %v2_42989 = inttoptr i64 %v1_42989 to i64*
  %v3_42989 = load i64, i64* %v2_42989, align 8
  %v1_42990 = add i64 %v0_42a10, ptrtoint (i64* @global_var_108.7479 to i64)
  %v2_42990 = inttoptr i64 %v1_42990 to i64*
  %v3_42990 = load i64, i64* %v2_42990, align 8
  %v1_42997 = inttoptr i64 %v3_42982 to i64*
  %v2_42997 = load i64, i64* %v1_42997, align 8
  store i64 %v2_42997, i64* @rax, align 8
  %v1_429a0 = inttoptr i64 %v2_42997 to i64*
  %v2_429a0 = load i64, i64* %v1_429a0, align 8
  store i64 %v2_429a0, i64* @rdx, align 8
  store i64 %v2_42997, i64* @rdi, align 8
  %v1_429b1 = inttoptr i64 %v3_42990 to i64*
  %v2_429b1 = load i64, i64* %v1_429b1, align 8
  store i64 %v2_429b1, i64* @rdx, align 8
  store i64 %v3_42990, i64* @rdi, align 8
  %v2_429c0 = load i64, i64* %v1_429a0, align 8
  store i64 %v2_429c0, i64* @rdx, align 8
  store i64 %v2_42997, i64* @rdi, align 8
  %v1_429d1 = inttoptr i64 %v3_42989 to i64*
  %v2_429d1 = load i64, i64* %v1_429d1, align 8
  store i64 %v2_429d1, i64* @rdx, align 8
  store i64 %v3_42989, i64* @rdi, align 8
  %v2_429e1 = load i64, i64* %v1_429a0, align 8
  store i64 %v2_429e1, i64* @rdx, align 8
  store i64 %v2_42997, i64* @rdi, align 8
  %v1_429ea = inttoptr i64 %v0_429ea to i64*
  %v2_429ea = load i64, i64* %v1_429ea, align 8
  store i64 %v2_429ea, i64* @rdx, align 8
  store i64 %v0_429ea, i64* @rdi, align 8
  %v2_429fa = load i64, i64* %v1_429a0, align 8
  store i64 %v2_429fa, i64* @rdx, align 8
  store i64 %v2_42997, i64* @rdi, align 8
  store i64 %v2_42997, i64* %rbp.global-to-local, align 8
  %v1_42a10 = add i64 %v0_42a10, 184
  %v2_42a10 = inttoptr i64 %v1_42a10 to i64*
  %v3_42a10 = load i64, i64* %v2_42a10, align 8
  store i64 %v3_42a10, i64* @rax, align 8
  %v1_42a17 = add i64 %v3_42a10, 8
  %v2_42a17 = inttoptr i64 %v1_42a17 to i32*
  %v3_42a17 = load i32, i32* %v2_42a17, align 4
  %v5_42a1b = icmp eq i32 %v3_42a17, 0
  br i1 %v5_42a1b, label %bb250, label %dec_label_pc_42a24

bb250:                                            ; preds = %dec_label_pc_42982
  %v2_42a1e = call i64 @function_42ba2(i64 %v2_42997)
  store i64 %v2_42a1e, i64* @rax, align 8
  %v0_42a24.pre = load i64, i64* @rbx, align 8
  %v0_42a65.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_42a24

dec_label_pc_42a24:                               ; preds = %bb250, %dec_label_pc_42982
  %v0_42a65 = phi i64 [ %v0_42a65.pre, %bb250 ], [ %v2_42997, %dec_label_pc_42982 ]
  %v0_42a2b = phi i64 [ %v2_42a1e, %bb250 ], [ %v3_42a10, %dec_label_pc_42982 ]
  %v0_42a24 = phi i64 [ %v0_42a24.pre, %bb250 ], [ %v0_42a10, %dec_label_pc_42982 ]
  %v1_42a24 = add i64 %v0_42a24, 280
  %v2_42a24 = inttoptr i64 %v1_42a24 to i64*
  %v3_42a24 = load i64, i64* %v2_42a24, align 8
  store i64 %v3_42a24, i64* @rdi, align 8
  %v1_42a2b = add i64 %v0_42a2b, 16
  %v2_42a2b = inttoptr i64 %v1_42a2b to i64*
  %v3_42a2b = load i64, i64* %v2_42a2b, align 8
  %v1_42a32 = inttoptr i64 %v3_42a24 to i64*
  %v2_42a32 = load i64, i64* %v1_42a32, align 8
  store i64 %v2_42a32, i64* @rax, align 8
  %v1_42a3b = inttoptr i64 %v2_42a32 to i64*
  %v2_42a3b = load i64, i64* %v1_42a3b, align 8
  store i64 %v2_42a3b, i64* @rdx, align 8
  store i64 %v2_42a32, i64* @rdi, align 8
  %v1_42a4c = inttoptr i64 %v3_42a2b to i64*
  %v2_42a4c = load i64, i64* %v1_42a4c, align 8
  store i64 %v2_42a4c, i64* @rdx, align 8
  store i64 %v3_42a2b, i64* @rdi, align 8
  %v2_42a5c = load i64, i64* %v1_42a3b, align 8
  store i64 %v2_42a5c, i64* @rdx, align 8
  store i64 %v2_42a32, i64* @rdi, align 8
  %v1_42a65 = inttoptr i64 %v0_42a65 to i64*
  %v2_42a65 = load i64, i64* %v1_42a65, align 8
  store i64 %v2_42a65, i64* @rdx, align 8
  store i64 %v0_42a65, i64* @rdi, align 8
  %v2_42a75 = load i64, i64* %v1_42a3b, align 8
  store i64 %v2_42a75, i64* @rdx, align 8
  store i64 %v2_42a32, i64* @rdi, align 8
  ret i64 %v2_42a32
}

define i64 @function_42a8d() local_unnamed_addr {
dec_label_pc_42a8d:
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v2_42a8d = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_42a8d, i64* @rax, align 8
  store i64 %v2_42a8d, i64* @rdi, align 8
  store i64 %v2_42a8d, i64* @rdx, align 8
  store i64 %v2_42a8d, i64* @rdi, align 8
  %v0_42ab5 = load i64, i64* @rbx, align 8
  %v1_42ab5 = add i64 %v0_42ab5, 56
  %v2_42ab5 = inttoptr i64 %v1_42ab5 to i64*
  %v3_42ab5 = load i64, i64* %v2_42ab5, align 8
  store i64 %v3_42ab5, i64* @rax, align 8
  %v1_42ab9 = add i64 %v3_42ab5, 8
  %v2_42ab9 = inttoptr i64 %v1_42ab9 to i32*
  %v3_42ab9 = load i32, i32* %v2_42ab9, align 4
  %v4_42ab9 = zext i32 %v3_42ab9 to i64
  store i64 %v4_42ab9, i64* @rdi, align 8
  %v7_42abc = icmp eq i32 %v3_42ab9, 0
  br i1 %v7_42abc, label %bb, label %dec_label_pc_42ac4

bb:                                               ; preds = %dec_label_pc_42a8d
  %v3_42abe = call i64 @function_42ba2(i64 0)
  store i64 %v3_42abe, i64* @rax, align 8
  %v0_42ac8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_42ac4

dec_label_pc_42ac4:                               ; preds = %bb, %dec_label_pc_42a8d
  %v0_42aef = phi i64 [ %v0_42ac8.pre, %bb ], [ %v0_42ab5, %dec_label_pc_42a8d ]
  %v0_42ac4 = phi i64 [ %v3_42abe, %bb ], [ %v3_42ab5, %dec_label_pc_42a8d ]
  %v1_42ac4 = add i64 %v0_42ac4, 16
  %v2_42ac4 = inttoptr i64 %v1_42ac4 to i64*
  %v3_42ac4 = load i64, i64* %v2_42ac4, align 8
  store i64 %v3_42ac4, i64* @rdi, align 8
  %v1_42ac8 = add i64 %v0_42aef, 216
  %v2_42ac8 = inttoptr i64 %v1_42ac8 to i64*
  %v3_42ac8 = load i64, i64* %v2_42ac8, align 8
  store i64 %v3_42ac8, i64* @rdx, align 8
  %v1_42ad2 = inttoptr i64 %v3_42ac4 to i64*
  %v2_42ad2 = load i64, i64* %v1_42ad2, align 8
  store i64 %v2_42ad2, i64* @rax, align 8
  %v1_42adb = inttoptr i64 %v2_42ad2 to i64*
  %v2_42adb = load i64, i64* %v1_42adb, align 8
  store i64 %v2_42adb, i64* @rdx, align 8
  store i64 %v2_42ad2, i64* @rdi, align 8
  %v1_42aef = add i64 %v0_42aef, 56
  %v2_42aef = inttoptr i64 %v1_42aef to i64*
  %v3_42aef = load i64, i64* %v2_42aef, align 8
  store i64 %v3_42aef, i64* @rax, align 8
  %v1_42af3 = add i64 %v3_42aef, 8
  %v2_42af3 = inttoptr i64 %v1_42af3 to i32*
  %v3_42af3 = load i32, i32* %v2_42af3, align 4
  %v5_42af6 = icmp eq i32 %v3_42af3, 0
  br i1 %v5_42af6, label %bb252, label %dec_label_pc_42afe

bb252:                                            ; preds = %dec_label_pc_42ac4
  %v2_42af8 = call i64 @function_42ba2(i64 %v2_42ad2)
  store i64 %v2_42af8, i64* @rax, align 8
  %v0_42b16.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_42afe

dec_label_pc_42afe:                               ; preds = %bb252, %dec_label_pc_42ac4
  %v0_42b16 = phi i64 [ %v0_42b16.pre, %bb252 ], [ %v0_42aef, %dec_label_pc_42ac4 ]
  %v0_42afe = phi i64 [ %v2_42af8, %bb252 ], [ %v3_42aef, %dec_label_pc_42ac4 ]
  %v1_42afe = add i64 %v0_42afe, 16
  %v2_42afe = inttoptr i64 %v1_42afe to i64*
  %v3_42afe = load i64, i64* %v2_42afe, align 8
  store i64 %v3_42afe, i64* %r15.global-to-local, align 8
  %v2_42b02 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_42b02, i64* @rax, align 8
  store i64 %v2_42b02, i64* @rdi, align 8
  %v1_42b16 = add i64 %v0_42b16, 136
  %v2_42b16 = inttoptr i64 %v1_42b16 to i64*
  %v3_42b16 = load i64, i64* %v2_42b16, align 8
  store i64 %v3_42b16, i64* @rdx, align 8
  %v1_42b1d = add i64 %v3_42b16, 8
  %v2_42b1d = inttoptr i64 %v1_42b1d to i32*
  %v3_42b1d = load i32, i32* %v2_42b1d, align 4
  %v4_42b1d = zext i32 %v3_42b1d to i64
  store i64 %v4_42b1d, i64* @rcx, align 8
  %v5_42b20 = icmp eq i32 %v3_42b1d, 0
  br i1 %v5_42b20, label %bb253, label %dec_label_pc_42b24

bb253:                                            ; preds = %dec_label_pc_42afe
  %v2_42b22 = call i64 @function_42ba2(i64 %v2_42b02)
  store i64 %v2_42b22, i64* @rax, align 8
  %v0_42b24.pre = load i64, i64* %r15.global-to-local, align 8
  %v2_42b37.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_42b24

dec_label_pc_42b24:                               ; preds = %bb253, %dec_label_pc_42afe
  %v2_42b37 = phi i64 [ %v2_42b37.pre, %bb253 ], [ %v2_42b02, %dec_label_pc_42afe ]
  %v0_42b43 = phi i64 [ %v2_42b22, %bb253 ], [ %v2_42b02, %dec_label_pc_42afe ]
  %v0_42b2e = phi i64 [ %v0_42b24.pre, %bb253 ], [ %v3_42afe, %dec_label_pc_42afe ]
  %v1_42b24 = inttoptr i64 %v0_42b2e to i64*
  %v2_42b24 = load i64, i64* %v1_42b24, align 8
  store i64 %v2_42b24, i64* @rcx, align 8
  store i64 %v2_42b37, i64* @rdx, align 8
  store i64 %v0_42b43, i64* @rdi, align 8
  %v0_42b4b = load i64, i64* %r13.global-to-local, align 8
  %v1_42b4b = add i64 %v0_42b4b, 8
  %v2_42b4b = inttoptr i64 %v1_42b4b to i32*
  %v3_42b4b = load i32, i32* %v2_42b4b, align 4
  %v4_42b4b = zext i32 %v3_42b4b to i64
  store i64 %v4_42b4b, i64* @rax, align 8
  %v5_42b4f = icmp eq i32 %v3_42b4b, 0
  br i1 %v5_42b4f, label %bb254, label %dec_label_pc_42b53

bb254:                                            ; preds = %dec_label_pc_42b24
  %v2_42b51 = call i64 @function_42ba2(i64 %v0_42b43)
  store i64 %v2_42b51, i64* @rax, align 8
  %v2_42b53.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_42b57.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_42b53

dec_label_pc_42b53:                               ; preds = %bb254, %dec_label_pc_42b24
  %v0_42b57 = phi i64 [ %v0_42b57.pre, %bb254 ], [ %v0_42b4b, %dec_label_pc_42b24 ]
  %v0_42b5b = phi i64 [ %v2_42b53.pre, %bb254 ], [ %v2_42b37, %dec_label_pc_42b24 ]
  store i64 %v0_42b5b, i64* @rax, align 8
  %v1_42b57 = add i64 %v0_42b57, 16
  %v2_42b57 = inttoptr i64 %v1_42b57 to i64*
  %v3_42b57 = load i64, i64* %v2_42b57, align 8
  store i64 %v3_42b57, i64* @rbx, align 8
  store i64 %v3_42b57, i64* @rdi, align 8
  ret i64 %v0_42b5b
}

define i64 @function_42b8a() local_unnamed_addr {
dec_label_pc_42b8a:
  %v0_42b8a = load i64, i64* @rbx, align 8
  %v1_42b8a = add i64 %v0_42b8a, 32
  %v2_42b8a = inttoptr i64 %v1_42b8a to i64*
  %v3_42b8a = load i64, i64* %v2_42b8a, align 8
  store i64 %v3_42b8a, i64* @rdi, align 8
  %v0_42b96 = load i64, i64* @rax, align 8
  ret i64 %v0_42b96
}

define i64 @function_42b9b() local_unnamed_addr {
dec_label_pc_42b9b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_42ba2(i64 %arg1) local_unnamed_addr {
dec_label_pc_42ba2:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_42bab() local_unnamed_addr {
dec_label_pc_42bab:
  %rbp.global-to-local = alloca i64, align 8
  %v0_42bab = load i64, i64* @rbx, align 8
  %v1_42bab = add i64 %v0_42bab, 288
  %v2_42bab = inttoptr i64 %v1_42bab to i64*
  %v3_42bab = load i64, i64* %v2_42bab, align 8
  store i64 %v3_42bab, i64* @rdi, align 8
  %v1_42bb5 = inttoptr i64 %v3_42bab to i64*
  %v2_42bb5 = load i64, i64* %v1_42bb5, align 8
  store i64 %v2_42bb5, i64* @rax, align 8
  %v1_42bbe = inttoptr i64 %v2_42bb5 to i64*
  %v2_42bbe = load i64, i64* %v1_42bbe, align 8
  store i64 %v2_42bbe, i64* @rdx, align 8
  store i64 %v2_42bb5, i64* @rdi, align 8
  %v4_42bca = trunc i64 %v2_42bb5 to i8
  %v5_42bca = icmp eq i8 %v4_42bca, 0
  br i1 %v5_42bca, label %dec_label_pc_42ca5, label %dec_label_pc_42bd2

dec_label_pc_42bd2:                               ; preds = %dec_label_pc_42bab
  %v1_42bd2 = add i64 %v0_42bab, 184
  %v2_42bd2 = inttoptr i64 %v1_42bd2 to i64*
  %v3_42bd2 = load i64, i64* %v2_42bd2, align 8
  store i64 %v3_42bd2, i64* @rax, align 8
  %v0_42bd9 = load i64, i64* inttoptr (i64 273376 to i64*), align 32
  store i64 %v0_42bd9, i64* %rbp.global-to-local, align 8
  %v1_42be0 = add i64 %v3_42bd2, 8
  %v2_42be0 = inttoptr i64 %v1_42be0 to i32*
  %v3_42be0 = load i32, i32* %v2_42be0, align 4
  %v5_42be4 = icmp eq i32 %v3_42be0, 0
  br i1 %v5_42be4, label %bb, label %dec_label_pc_42be9

bb:                                               ; preds = %dec_label_pc_42bd2
  %v2_42be7 = call i64 @function_42ba2(i64 %v2_42bb5)
  store i64 %v2_42be7, i64* @rax, align 8
  %v0_42be9.pre = load i64, i64* @rbx, align 8
  %v0_42c2a.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_42be9

dec_label_pc_42be9:                               ; preds = %bb, %dec_label_pc_42bd2
  %v0_42c2a = phi i64 [ %v0_42c2a.pre, %bb ], [ %v0_42bd9, %dec_label_pc_42bd2 ]
  %v0_42bf0 = phi i64 [ %v2_42be7, %bb ], [ %v3_42bd2, %dec_label_pc_42bd2 ]
  %v0_42c50 = phi i64 [ %v0_42be9.pre, %bb ], [ %v0_42bab, %dec_label_pc_42bd2 ]
  %v1_42be9 = add i64 %v0_42c50, 296
  %v2_42be9 = inttoptr i64 %v1_42be9 to i64*
  %v3_42be9 = load i64, i64* %v2_42be9, align 8
  store i64 %v3_42be9, i64* @rdi, align 8
  %v1_42bf0 = add i64 %v0_42bf0, 16
  %v2_42bf0 = inttoptr i64 %v1_42bf0 to i64*
  %v3_42bf0 = load i64, i64* %v2_42bf0, align 8
  %v1_42bf7 = inttoptr i64 %v3_42be9 to i64*
  %v2_42bf7 = load i64, i64* %v1_42bf7, align 8
  store i64 %v2_42bf7, i64* @rax, align 8
  %v1_42c00 = inttoptr i64 %v2_42bf7 to i64*
  %v2_42c00 = load i64, i64* %v1_42c00, align 8
  store i64 %v2_42c00, i64* @rdx, align 8
  store i64 %v2_42bf7, i64* @rdi, align 8
  %v1_42c11 = inttoptr i64 %v3_42bf0 to i64*
  %v2_42c11 = load i64, i64* %v1_42c11, align 8
  store i64 %v2_42c11, i64* @rdx, align 8
  store i64 %v3_42bf0, i64* @rdi, align 8
  %v2_42c21 = load i64, i64* %v1_42c00, align 8
  store i64 %v2_42c21, i64* @rdx, align 8
  store i64 %v2_42bf7, i64* @rdi, align 8
  %v1_42c2a = inttoptr i64 %v0_42c2a to i64*
  %v2_42c2a = load i64, i64* %v1_42c2a, align 8
  store i64 %v2_42c2a, i64* @rdx, align 8
  store i64 %v0_42c2a, i64* @rdi, align 8
  %v2_42c3a = load i64, i64* %v1_42c00, align 8
  store i64 %v2_42c3a, i64* @rdx, align 8
  store i64 %v2_42bf7, i64* @rdi, align 8
  store i64 %v2_42bf7, i64* %rbp.global-to-local, align 8
  %v1_42c50 = add i64 %v0_42c50, 184
  %v2_42c50 = inttoptr i64 %v1_42c50 to i64*
  %v3_42c50 = load i64, i64* %v2_42c50, align 8
  store i64 %v3_42c50, i64* @rax, align 8
  %v1_42c57 = add i64 %v3_42c50, 8
  %v2_42c57 = inttoptr i64 %v1_42c57 to i32*
  %v3_42c57 = load i32, i32* %v2_42c57, align 4
  %v4_42c57 = zext i32 %v3_42c57 to i64
  store i64 %v4_42c57, i64* @rdi, align 8
  %v7_42c5a = icmp eq i32 %v3_42c57, 0
  br i1 %v7_42c5a, label %bb35, label %dec_label_pc_42c62

bb35:                                             ; preds = %dec_label_pc_42be9
  %v3_42c5c = call i64 @function_42ba2(i64 0)
  store i64 %v3_42c5c, i64* @rax, align 8
  %v0_42c66.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_42c62

dec_label_pc_42c62:                               ; preds = %bb35, %dec_label_pc_42be9
  %v0_42c66 = phi i64 [ %v0_42c66.pre, %bb35 ], [ %v0_42c50, %dec_label_pc_42be9 ]
  %v1_42c66 = add i64 %v0_42c66, 304
  %v2_42c66 = inttoptr i64 %v1_42c66 to i64*
  %v3_42c66 = load i64, i64* %v2_42c66, align 8
  %v1_42c6d = add i64 %v0_42c66, 312
  %v2_42c6d = inttoptr i64 %v1_42c6d to i64*
  %v3_42c6d = load i64, i64* %v2_42c6d, align 8
  store i64 %v3_42c6d, i64* @rdi, align 8
  br label %dec_label_pc_42c74

dec_label_pc_42c74:                               ; preds = %dec_label_pc_42ecc, %dec_label_pc_42dfe, %dec_label_pc_42c62
  %v0_42c91 = phi i64 [ %v3_42ed0, %dec_label_pc_42ecc ], [ %v3_42e02, %dec_label_pc_42dfe ], [ %v3_42c66, %dec_label_pc_42c62 ]
  %v0_42c74 = phi i64 [ %v3_42ed7, %dec_label_pc_42ecc ], [ %v3_42e09, %dec_label_pc_42dfe ], [ %v3_42c6d, %dec_label_pc_42c62 ]
  %v1_42c74 = inttoptr i64 %v0_42c74 to i64*
  %v2_42c74 = load i64, i64* %v1_42c74, align 8
  store i64 %v2_42c74, i64* @rax, align 8
  %v1_42c80 = inttoptr i64 %v2_42c74 to i64*
  %v2_42c80 = load i64, i64* %v1_42c80, align 8
  store i64 %v2_42c80, i64* @rdx, align 8
  store i64 %v2_42c74, i64* @rdi, align 8
  %v1_42c91 = inttoptr i64 %v0_42c91 to i64*
  %v2_42c91 = load i64, i64* %v1_42c91, align 8
  store i64 %v2_42c91, i64* @rdx, align 8
  store i64 %v0_42c91, i64* @rdi, align 8
  ret i64 %v2_42c74

dec_label_pc_42ca5:                               ; preds = %dec_label_pc_42bab
  %v1_42ca5 = add i64 %v0_42bab, 320
  %v2_42ca5 = inttoptr i64 %v1_42ca5 to i64*
  %v3_42ca5 = load i64, i64* %v2_42ca5, align 8
  store i64 %v3_42ca5, i64* @rdi, align 8
  %v1_42caf = inttoptr i64 %v3_42ca5 to i64*
  %v2_42caf = load i64, i64* %v1_42caf, align 8
  store i64 %v2_42caf, i64* @rax, align 8
  %v1_42cb8 = inttoptr i64 %v2_42caf to i64*
  %v2_42cb8 = load i64, i64* %v1_42cb8, align 8
  store i64 %v2_42cb8, i64* @rdx, align 8
  store i64 %v2_42caf, i64* @rdi, align 8
  %v4_42cc4 = trunc i64 %v2_42caf to i8
  %v5_42cc4 = icmp eq i8 %v4_42cc4, 0
  br i1 %v5_42cc4, label %dec_label_pc_42e15, label %dec_label_pc_42ccc

dec_label_pc_42ccc:                               ; preds = %dec_label_pc_42ca5
  %v1_42ccc = add i64 %v0_42bab, 184
  %v2_42ccc = inttoptr i64 %v1_42ccc to i64*
  %v3_42ccc = load i64, i64* %v2_42ccc, align 8
  store i64 %v3_42ccc, i64* @rax, align 8
  %v0_42cd3 = load i64, i64* inttoptr (i64 273626 to i64*), align 8
  store i64 %v0_42cd3, i64* %rbp.global-to-local, align 8
  %v1_42cda = add i64 %v3_42ccc, 8
  %v2_42cda = inttoptr i64 %v1_42cda to i32*
  %v3_42cda = load i32, i32* %v2_42cda, align 4
  %v5_42cdd = icmp eq i32 %v3_42cda, 0
  br i1 %v5_42cdd, label %bb36, label %dec_label_pc_42ce5

bb36:                                             ; preds = %dec_label_pc_42ccc
  %v2_42cdf = call i64 @function_42ba2(i64 %v2_42caf)
  store i64 %v2_42cdf, i64* @rax, align 8
  %v0_42ce5.pre = load i64, i64* @rbx, align 8
  %v0_42d4d.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_42ce5

dec_label_pc_42ce5:                               ; preds = %bb36, %dec_label_pc_42ccc
  %v0_42d4d = phi i64 [ %v0_42d4d.pre, %bb36 ], [ %v0_42cd3, %dec_label_pc_42ccc ]
  %v0_42cec = phi i64 [ %v2_42cdf, %bb36 ], [ %v3_42ccc, %dec_label_pc_42ccc ]
  %v0_42d73 = phi i64 [ %v0_42ce5.pre, %bb36 ], [ %v0_42bab, %dec_label_pc_42ccc ]
  %v1_42ce5 = add i64 %v0_42d73, 328
  %v2_42ce5 = inttoptr i64 %v1_42ce5 to i64*
  %v3_42ce5 = load i64, i64* %v2_42ce5, align 8
  store i64 %v3_42ce5, i64* @rdi, align 8
  %v1_42cec = add i64 %v0_42cec, 16
  %v2_42cec = inttoptr i64 %v1_42cec to i64*
  %v3_42cec = load i64, i64* %v2_42cec, align 8
  %v1_42cf3 = add i64 %v0_42d73, ptrtoint (i64* @global_var_108.7479 to i64)
  %v2_42cf3 = inttoptr i64 %v1_42cf3 to i64*
  %v3_42cf3 = load i64, i64* %v2_42cf3, align 8
  %v1_42cfa = inttoptr i64 %v3_42ce5 to i64*
  %v2_42cfa = load i64, i64* %v1_42cfa, align 8
  store i64 %v2_42cfa, i64* @rax, align 8
  %v1_42d03 = inttoptr i64 %v2_42cfa to i64*
  %v2_42d03 = load i64, i64* %v1_42d03, align 8
  store i64 %v2_42d03, i64* @rdx, align 8
  store i64 %v2_42cfa, i64* @rdi, align 8
  %v1_42d14 = inttoptr i64 %v3_42cf3 to i64*
  %v2_42d14 = load i64, i64* %v1_42d14, align 8
  store i64 %v2_42d14, i64* @rdx, align 8
  store i64 %v3_42cf3, i64* @rdi, align 8
  %v2_42d23 = load i64, i64* %v1_42d03, align 8
  store i64 %v2_42d23, i64* @rdx, align 8
  store i64 %v2_42cfa, i64* @rdi, align 8
  %v1_42d34 = inttoptr i64 %v3_42cec to i64*
  %v2_42d34 = load i64, i64* %v1_42d34, align 8
  store i64 %v2_42d34, i64* @rdx, align 8
  store i64 %v3_42cec, i64* @rdi, align 8
  %v2_42d44 = load i64, i64* %v1_42d03, align 8
  store i64 %v2_42d44, i64* @rdx, align 8
  store i64 %v2_42cfa, i64* @rdi, align 8
  %v1_42d4d = inttoptr i64 %v0_42d4d to i64*
  %v2_42d4d = load i64, i64* %v1_42d4d, align 8
  store i64 %v2_42d4d, i64* @rdx, align 8
  store i64 %v0_42d4d, i64* @rdi, align 8
  %v2_42d5d = load i64, i64* %v1_42d03, align 8
  store i64 %v2_42d5d, i64* @rdx, align 8
  store i64 %v2_42cfa, i64* @rdi, align 8
  store i64 %v2_42cfa, i64* %rbp.global-to-local, align 8
  %v1_42d73 = add i64 %v0_42d73, 184
  %v2_42d73 = inttoptr i64 %v1_42d73 to i64*
  %v3_42d73 = load i64, i64* %v2_42d73, align 8
  store i64 %v3_42d73, i64* @rax, align 8
  %v1_42d7a = add i64 %v3_42d73, 8
  %v2_42d7a = inttoptr i64 %v1_42d7a to i32*
  %v3_42d7a = load i32, i32* %v2_42d7a, align 4
  %v4_42d7a = zext i32 %v3_42d7a to i64
  store i64 %v4_42d7a, i64* @rcx, align 8
  %v5_42d7d = icmp eq i32 %v3_42d7a, 0
  br i1 %v5_42d7d, label %bb37, label %dec_label_pc_42d85

bb37:                                             ; preds = %dec_label_pc_42ce5
  %v2_42d7f = call i64 @function_42ba2(i64 %v2_42cfa)
  store i64 %v2_42d7f, i64* @rax, align 8
  %v0_42d85.pre = load i64, i64* @rbx, align 8
  %v0_42dc6.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_42d85

dec_label_pc_42d85:                               ; preds = %bb37, %dec_label_pc_42ce5
  %v0_42dc6 = phi i64 [ %v0_42dc6.pre, %bb37 ], [ %v2_42cfa, %dec_label_pc_42ce5 ]
  %v0_42d8c = phi i64 [ %v2_42d7f, %bb37 ], [ %v3_42d73, %dec_label_pc_42ce5 ]
  %v0_42dec = phi i64 [ %v0_42d85.pre, %bb37 ], [ %v0_42d73, %dec_label_pc_42ce5 ]
  %v1_42d85 = add i64 %v0_42dec, 336
  %v2_42d85 = inttoptr i64 %v1_42d85 to i64*
  %v3_42d85 = load i64, i64* %v2_42d85, align 8
  store i64 %v3_42d85, i64* @rdi, align 8
  %v1_42d8c = add i64 %v0_42d8c, 16
  %v2_42d8c = inttoptr i64 %v1_42d8c to i64*
  %v3_42d8c = load i64, i64* %v2_42d8c, align 8
  %v1_42d93 = inttoptr i64 %v3_42d85 to i64*
  %v2_42d93 = load i64, i64* %v1_42d93, align 8
  store i64 %v2_42d93, i64* @rax, align 8
  %v1_42d9c = inttoptr i64 %v2_42d93 to i64*
  %v2_42d9c = load i64, i64* %v1_42d9c, align 8
  store i64 %v2_42d9c, i64* @rdx, align 8
  store i64 %v2_42d93, i64* @rdi, align 8
  %v1_42dad = inttoptr i64 %v3_42d8c to i64*
  %v2_42dad = load i64, i64* %v1_42dad, align 8
  store i64 %v2_42dad, i64* @rdx, align 8
  store i64 %v3_42d8c, i64* @rdi, align 8
  %v2_42dbd = load i64, i64* %v1_42d9c, align 8
  store i64 %v2_42dbd, i64* @rdx, align 8
  store i64 %v2_42d93, i64* @rdi, align 8
  %v1_42dc6 = inttoptr i64 %v0_42dc6 to i64*
  %v2_42dc6 = load i64, i64* %v1_42dc6, align 8
  store i64 %v2_42dc6, i64* @rdx, align 8
  store i64 %v0_42dc6, i64* @rdi, align 8
  %v2_42dd6 = load i64, i64* %v1_42d9c, align 8
  store i64 %v2_42dd6, i64* @rdx, align 8
  store i64 %v2_42d93, i64* @rdi, align 8
  store i64 %v2_42d93, i64* %rbp.global-to-local, align 8
  %v1_42dec = add i64 %v0_42dec, 184
  %v2_42dec = inttoptr i64 %v1_42dec to i64*
  %v3_42dec = load i64, i64* %v2_42dec, align 8
  store i64 %v3_42dec, i64* @rax, align 8
  %v1_42df3 = add i64 %v3_42dec, 8
  %v2_42df3 = inttoptr i64 %v1_42df3 to i32*
  %v3_42df3 = load i32, i32* %v2_42df3, align 4
  %v4_42df3 = zext i32 %v3_42df3 to i64
  store i64 %v4_42df3, i64* @rdx, align 8
  %v5_42df6 = icmp eq i32 %v3_42df3, 0
  br i1 %v5_42df6, label %bb38, label %dec_label_pc_42dfe

bb38:                                             ; preds = %dec_label_pc_42d85
  %v2_42df8 = call i64 @function_42ba2(i64 %v2_42d93)
  store i64 %v2_42df8, i64* @rax, align 8
  %v0_42e02.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_42dfe

dec_label_pc_42dfe:                               ; preds = %bb38, %dec_label_pc_42d85
  %v0_42e02 = phi i64 [ %v0_42e02.pre, %bb38 ], [ %v0_42dec, %dec_label_pc_42d85 ]
  %v1_42e02 = add i64 %v0_42e02, 304
  %v2_42e02 = inttoptr i64 %v1_42e02 to i64*
  %v3_42e02 = load i64, i64* %v2_42e02, align 8
  %v1_42e09 = add i64 %v0_42e02, 344
  %v2_42e09 = inttoptr i64 %v1_42e09 to i64*
  %v3_42e09 = load i64, i64* %v2_42e09, align 8
  store i64 %v3_42e09, i64* @rdi, align 8
  br label %dec_label_pc_42c74

dec_label_pc_42e15:                               ; preds = %dec_label_pc_42ca5
  %v1_42e15 = add i64 %v0_42bab, 352
  %v2_42e15 = inttoptr i64 %v1_42e15 to i64*
  %v3_42e15 = load i64, i64* %v2_42e15, align 8
  store i64 %v3_42e15, i64* @rdi, align 8
  %v1_42e1f = inttoptr i64 %v3_42e15 to i64*
  %v2_42e1f = load i64, i64* %v1_42e1f, align 8
  store i64 %v2_42e1f, i64* @rax, align 8
  %v1_42e28 = inttoptr i64 %v2_42e1f to i64*
  %v2_42e28 = load i64, i64* %v1_42e28, align 8
  store i64 %v2_42e28, i64* @rdx, align 8
  store i64 %v2_42e1f, i64* @rdi, align 8
  %v4_42e34 = trunc i64 %v2_42e1f to i8
  %v5_42e34 = icmp eq i8 %v4_42e34, 0
  br i1 %v5_42e34, label %dec_label_pc_42ee3, label %dec_label_pc_42e3c

dec_label_pc_42e3c:                               ; preds = %dec_label_pc_42e15
  %v1_42e3c = add i64 %v0_42bab, 184
  %v2_42e3c = inttoptr i64 %v1_42e3c to i64*
  %v3_42e3c = load i64, i64* %v2_42e3c, align 8
  store i64 %v3_42e3c, i64* @rax, align 8
  %v0_42e43 = load i64, i64* inttoptr (i64 273994 to i64*), align 8
  store i64 %v0_42e43, i64* %rbp.global-to-local, align 8
  %v1_42e4a = add i64 %v3_42e3c, 8
  %v2_42e4a = inttoptr i64 %v1_42e4a to i32*
  %v3_42e4a = load i32, i32* %v2_42e4a, align 4
  %v10_42e4a = icmp eq i32 %v3_42e4a, 0
  br i1 %v10_42e4a, label %bb39, label %dec_label_pc_42e54

bb39:                                             ; preds = %dec_label_pc_42e3c
  %v2_42e4e = call i64 @function_42ba2(i64 %v2_42e1f)
  store i64 %v2_42e4e, i64* @rax, align 8
  %v0_42e54.pre = load i64, i64* @rbx, align 8
  %v0_42e95.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_42e54

dec_label_pc_42e54:                               ; preds = %bb39, %dec_label_pc_42e3c
  %v0_42e95 = phi i64 [ %v0_42e95.pre, %bb39 ], [ %v0_42e43, %dec_label_pc_42e3c ]
  %v0_42e5b = phi i64 [ %v2_42e4e, %bb39 ], [ %v3_42e3c, %dec_label_pc_42e3c ]
  %v0_42ebb = phi i64 [ %v0_42e54.pre, %bb39 ], [ %v0_42bab, %dec_label_pc_42e3c ]
  %v1_42e54 = add i64 %v0_42ebb, 360
  %v2_42e54 = inttoptr i64 %v1_42e54 to i64*
  %v3_42e54 = load i64, i64* %v2_42e54, align 8
  store i64 %v3_42e54, i64* @rdi, align 8
  %v1_42e5b = add i64 %v0_42e5b, 16
  %v2_42e5b = inttoptr i64 %v1_42e5b to i64*
  %v3_42e5b = load i64, i64* %v2_42e5b, align 8
  %v1_42e62 = inttoptr i64 %v3_42e54 to i64*
  %v2_42e62 = load i64, i64* %v1_42e62, align 8
  store i64 %v2_42e62, i64* @rax, align 8
  %v1_42e6b = inttoptr i64 %v2_42e62 to i64*
  %v2_42e6b = load i64, i64* %v1_42e6b, align 8
  store i64 %v2_42e6b, i64* @rdx, align 8
  store i64 %v2_42e62, i64* @rdi, align 8
  %v1_42e7c = inttoptr i64 %v3_42e5b to i64*
  %v2_42e7c = load i64, i64* %v1_42e7c, align 8
  store i64 %v2_42e7c, i64* @rdx, align 8
  store i64 %v3_42e5b, i64* @rdi, align 8
  %v2_42e8c = load i64, i64* %v1_42e6b, align 8
  store i64 %v2_42e8c, i64* @rdx, align 8
  store i64 %v2_42e62, i64* @rdi, align 8
  %v1_42e95 = inttoptr i64 %v0_42e95 to i64*
  %v2_42e95 = load i64, i64* %v1_42e95, align 8
  store i64 %v2_42e95, i64* @rdx, align 8
  store i64 %v0_42e95, i64* @rdi, align 8
  %v2_42ea5 = load i64, i64* %v1_42e6b, align 8
  store i64 %v2_42ea5, i64* @rdx, align 8
  store i64 %v2_42e62, i64* @rdi, align 8
  store i64 %v2_42e62, i64* %rbp.global-to-local, align 8
  %v1_42ebb = add i64 %v0_42ebb, 184
  %v2_42ebb = inttoptr i64 %v1_42ebb to i64*
  %v3_42ebb = load i64, i64* %v2_42ebb, align 8
  store i64 %v3_42ebb, i64* @rax, align 8
  %v1_42ec2 = add i64 %v3_42ebb, 8
  %v2_42ec2 = inttoptr i64 %v1_42ec2 to i32*
  %v3_42ec2 = load i32, i32* %v2_42ec2, align 4
  %v10_42ec2 = icmp eq i32 %v3_42ec2, 0
  br i1 %v10_42ec2, label %bb40, label %dec_label_pc_42ecc

bb40:                                             ; preds = %dec_label_pc_42e54
  %v2_42ec6 = call i64 @function_42ba2(i64 %v2_42e62)
  store i64 %v2_42ec6, i64* @rax, align 8
  %v0_42ed0.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_42ecc

dec_label_pc_42ecc:                               ; preds = %bb40, %dec_label_pc_42e54
  %v0_42ed0 = phi i64 [ %v0_42ed0.pre, %bb40 ], [ %v0_42ebb, %dec_label_pc_42e54 ]
  %v1_42ed0 = add i64 %v0_42ed0, 304
  %v2_42ed0 = inttoptr i64 %v1_42ed0 to i64*
  %v3_42ed0 = load i64, i64* %v2_42ed0, align 8
  %v1_42ed7 = add i64 %v0_42ed0, 368
  %v2_42ed7 = inttoptr i64 %v1_42ed7 to i64*
  %v3_42ed7 = load i64, i64* %v2_42ed7, align 8
  store i64 %v3_42ed7, i64* @rdi, align 8
  br label %dec_label_pc_42c74

dec_label_pc_42ee3:                               ; preds = %dec_label_pc_42e15
  %v1_42ee3 = add i64 %v0_42bab, 40
  %v2_42ee3 = inttoptr i64 %v1_42ee3 to i64*
  %v3_42ee3 = load i64, i64* %v2_42ee3, align 8
  store i64 %v3_42ee3, i64* @rdi, align 8
  ret i64 %v2_42e1f
}

define i64 @_ZN3org4luaj3vm29LoadState19longBitsToLuaNumberEJPNS1_8LuaValueEx(i64 %arg1) local_unnamed_addr {
dec_label_pc_42f00:
  store i64 %arg1, i64* @rdi, align 8
  %v0_42f02 = load i64, i64* @rdi, align 8
  store i64 %v0_42f02, i64* @rbx, align 8
  store i64 274188, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_42fc8() local_unnamed_addr {
dec_label_pc_42fc8:
  store i64 1, i64* @rdx, align 8
  %v2_42fdc = load i64, i64* @rax, align 8
  %v3_42fdc = trunc i64 %v2_42fdc to i32
  %v4_42fdc = sub i64 52, %v2_42fdc
  %v20_42fdc = and i64 %v4_42fdc, 4294967295
  store i64 %v20_42fdc, i64* @rcx, align 8
  %v2_42fe1 = urem i64 %v4_42fdc, 64
  %v4_42fe1 = icmp eq i64 %v2_42fe1, 0
  br i1 %v4_42fe1, label %bb240, label %bb

bb:                                               ; preds = %dec_label_pc_42fc8
  %v5_42fe1 = shl i64 1, %v2_42fe1
  store i64 %v5_42fe1, i64* @rdx, align 8
  %phitmp = add i64 %v5_42fe1, -1
  br label %bb240

bb240:                                            ; preds = %dec_label_pc_42fc8, %bb
  %v0_42fe4 = phi i64 [ 0, %dec_label_pc_42fc8 ], [ %phitmp, %bb ]
  store i64 %v0_42fe4, i64* @rdx, align 8
  br i1 %v4_42fe1, label %bb242, label %bb241

bb241:                                            ; preds = %bb240
  br label %bb242

bb242:                                            ; preds = %bb240, %bb241
  store i64 %v2_42fdc, i64* @rcx, align 8
  %v4_42ffb = urem i32 %v3_42fdc, 32
  %v6_42ffb = icmp eq i32 %v4_42ffb, 0
  br i1 %v6_42ffb, label %bb244, label %bb243

bb243:                                            ; preds = %bb242
  br label %bb244

bb244:                                            ; preds = %bb242, %bb243
  store i64 274436, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_43050() local_unnamed_addr {
dec_label_pc_43050:
  %cf.global-to-local = alloca i1, align 1
  %pf.global-to-local = alloca i1, align 1
  %v0_43050 = load i64, i64* inttoptr (i64 274520 to i64*), align 8
  %v1_43050 = call i128 @__asm_movsd(i64 %v0_43050)
  %v1_43058 = load i128, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v1_43050, i128 %v1_43058)
  %v0_4305c = load i1, i1* %cf.global-to-local, align 1
  %v1_4305c = icmp eq i1 %v0_4305c, false
  br i1 %v1_4305c, label %bb, label %dec_label_pc_43062

bb:                                               ; preds = %dec_label_pc_43050
  %v2_4305c = call i64 @function_430f0()
  store i64 %v2_4305c, i64* @rax, align 8
  br label %dec_label_pc_43062

dec_label_pc_43062:                               ; preds = %bb, %dec_label_pc_43050
  %v0_43062 = load i128, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v0_43062, i128 %v0_43062)
  %v0_43066 = load i1, i1* %pf.global-to-local, align 1
  br i1 %v0_43066, label %bb241, label %dec_label_pc_4306c

bb241:                                            ; preds = %dec_label_pc_43062
  %v1_43066 = call i64 @function_43134()
  store i64 %v1_43066, i64* @rax, align 8
  br label %dec_label_pc_4306c

dec_label_pc_4306c:                               ; preds = %bb241, %dec_label_pc_43062
  %v0_4306c = load i128, i128* @xmm0, align 8
  %v1_4306c = call i32 @__asm_cvttsd2si(i128 %v0_4306c)
  %v2_43070 = call i128 @__asm_pxor(i128 %v1_43050, i128 %v1_43050)
  %v3_43074 = call i128 @__asm_cvtsi2sd.7468(i32 %v1_4306c)
  %v0_43078 = load i128, i128* @xmm0, align 8
  call void @__asm_ucomisd(i128 %v0_43078, i128 %v3_43074)
  store i64 274575, i64* @rdi, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 true, i1* %pf.global-to-local, align 1
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_430d0() local_unnamed_addr {
dec_label_pc_430d0:
  store i64 274647, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_430f0() local_unnamed_addr {
dec_label_pc_430f0:
  %v0_430f5 = load i64, i64* @rax, align 8
  ret i64 %v0_430f5
}

define i64 @function_43100() local_unnamed_addr {
dec_label_pc_43100:
  store i64 274695, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4310e() local_unnamed_addr {
dec_label_pc_4310e:
  store i64 274709, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_43134() local_unnamed_addr {
dec_label_pc_43134:
  %v0_43134 = load i128, i128* @xmm0, align 8
  %v1_43134 = load i64, i64* inttoptr (i64 274748 to i64*), align 8
  call void @__asm_ucomisd.7467(i128 %v0_43134, i64 %v1_43134)
  store i64 274767, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_43165() local_unnamed_addr {
dec_label_pc_43165:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$byte_6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_43170:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_43178 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_43178, i64* @rdi, align 8
  store i64 %v0_43178, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_43192 = add i64 %v0_43178, 20
  %v2_43192 = inttoptr i64 %v1_43192 to i32*
  %v3_43192 = load i32, i32* %v2_43192, align 4
  %v4_43192 = zext i32 %v3_43192 to i64
  store i64 %v4_43192, i64* @rbx, align 8
  store i64 1, i64* @rdx, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 274870, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_43250(i64 %arg1) local_unnamed_addr {
dec_label_pc_43250:
  %r12.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_43250 = load i64, i64* inttoptr (i64 275031 to i64*), align 8
  store i64 %v0_43250, i64* @rax, align 8
  %v1_43257 = add i64 %v0_43250, 8
  %v2_43257 = inttoptr i64 %v1_43257 to i32*
  %v3_43257 = load i32, i32* %v2_43257, align 4
  %v5_43257 = trunc i64 %arg1 to i32
  %v1_4325a = add i64 %v0_43250, 16
  store i64 %v1_4325a, i64* @rdx, align 8
  %tmp240 = icmp ugt i32 %v3_43257, %v5_43257
  br i1 %tmp240, label %dec_label_pc_43264, label %bb

bb:                                               ; preds = %dec_label_pc_43250
  %v3_4325e = call i64 @function_433e7()
  store i64 %v3_4325e, i64* @rax, align 8
  br label %dec_label_pc_43264

dec_label_pc_43264:                               ; preds = %dec_label_pc_43250, %bb
  %v0_4326b = load i64, i64* %r12.global-to-local, align 8
  %v1_4326b = add i64 %v0_4326b, 8
  %v2_4326b = inttoptr i64 %v1_4326b to i32*
  %v3_4326b = load i32, i32* %v2_4326b, align 4
  %v4_4326b = load i64, i64* @rbx, align 8
  %v5_4326b = trunc i64 %v4_4326b to i32
  %tmp241 = icmp ugt i32 %v3_4326b, %v5_4326b
  br i1 %tmp241, label %dec_label_pc_43276, label %bb239

bb239:                                            ; preds = %dec_label_pc_43264
  %v4_43270 = call i64 @function_433e3(i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_43270, i64* @rax, align 8
  %v0_4327b.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_43276

dec_label_pc_43276:                               ; preds = %dec_label_pc_43264, %bb239
  %v0_4327b = phi i64 [ %v0_4327b.pre, %bb239 ], [ %v0_4326b, %dec_label_pc_43264 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_4327b, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_43295() local_unnamed_addr {
dec_label_pc_43295:
  store i64 275118, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_43300() local_unnamed_addr {
dec_label_pc_43300:
  store i64 275207, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4333e(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8, i64 %arg9, i64 %arg10) local_unnamed_addr {
dec_label_pc_4333e:
  %st7.global-to-local = alloca x86_fp80, align 16
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_4333e = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_4333e = load i64, i64* @rax, align 8
  %v4_4333e = trunc i64 %v3_4333e to i8
  %v5_4333e = add i8 %v4_4333e, %v2_4333e
  %v21_4333e = inttoptr i64 %v3_4333e to i8*
  store i8 %v5_4333e, i8* %v21_4333e, align 1
  %v0_43340 = load i64, i64* @rax, align 8
  %v1_43340 = add i64 %v0_43340, -119
  %v2_43340 = inttoptr i64 %v1_43340 to i8*
  %v3_43340 = load i8, i8* %v2_43340, align 1
  %v4_43340 = load i64, i64* @rcx, align 8
  %v5_43340 = trunc i64 %v4_43340 to i8
  %v6_43340 = add i8 %v5_43340, %v3_43340
  store i8 %v6_43340, i8* %v2_43340, align 1
  %v1_43343 = load x86_fp80, x86_fp80* %st7.global-to-local, align 16
  %v2_43343 = load i64, i64* @rcx, align 8
  %v4_43343 = mul i64 %v2_43343, 4
  %v5_43343 = add i64 %v2_43343, 99
  %v6_43343 = add i64 %v5_43343, %v4_43343
  %v7_43343 = inttoptr i64 %v6_43343 to float*
  %v8_43343 = load float, float* %v7_43343, align 4
  %v9_43343 = fpext float %v8_43343 to x86_fp80
  %v10_43343 = fmul x86_fp80 %v1_43343, %v9_43343
  store x86_fp80 %v10_43343, x86_fp80* %st7.global-to-local, align 16
  %v0_43347 = load i64, i64* @rax, align 8
  %v1_43347 = add i64 %v0_43347, -119
  %v2_43347 = inttoptr i64 %v1_43347 to i8*
  %v3_43347 = load i8, i8* %v2_43347, align 1
  %v5_43347 = trunc i64 %v2_43343 to i8
  %v6_43347 = or i8 %v3_43347, %v5_43347
  store i8 %v6_43347, i8* %v2_43347, align 1
  %v4_4334a = load i32, i32* bitcast (i64* @rax to i32*), align 8
  %v5_4334a = sext i32 %v4_4334a to i64
  %v6_4334a = mul nsw i64 %v5_4334a, 72
  store i64 %v6_4334a, i64* @rdx, align 8
  store i64 %arg5, i64* @rbx, align 8
  %v0_4335a = load i64, i64* @rax, align 8
  ret i64 %v0_4335a
}

define i64 @function_43360(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_43360:
  %v0_43360 = load i64, i64* inttoptr (i64 275303 to i64*), align 8
  store i64 %v0_43360, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_43360
}

define i64 @function_43380(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_43380:
  %r12.global-to-local = alloca i64, align 8
  %v0_43380 = load i64, i64* %r12.global-to-local, align 8
  %v1_43380 = add i64 %v0_43380, 16
  %v2_43380 = inttoptr i64 %v1_43380 to i64*
  %v3_43380 = load i64, i64* %v2_43380, align 8
  store i64 %v3_43380, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  ret i64 %v3_43380
}

define i64 @function_43398() local_unnamed_addr {
dec_label_pc_43398:
  store i64 275359, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_433e3(i64 %arg1) local_unnamed_addr {
dec_label_pc_433e3:
  store i64 %arg1, i64* @rdi, align 8
  %v6_433e3 = load i64, i64* @rax, align 8
  ret i64 %v6_433e3
}

define i64 @function_433e7() local_unnamed_addr {
dec_label_pc_433e7:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_433ee() local_unnamed_addr {
dec_label_pc_433ee:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_43406(i64 %arg1) local_unnamed_addr {
dec_label_pc_43406:
  store i64 0, i64* @rdi, align 8
  %v0_4340e = load i64, i64* @rax, align 8
  ret i64 %v0_4340e
}

define i64 @"_ZN3org4luaj3vm23lib22BaseLib$collectgarbage6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_43410:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v0_4341d = load i64, i64* inttoptr (i64 275492 to i64*), align 8
  store i64 %v0_4341d, i64* @rdx, align 8
  %v0_4342f = load i64, i64* inttoptr (i64 275510 to i64*), align 8
  store i64 %v0_4342f, i64* @rdi, align 8
  %v1_43436 = icmp eq i64 %v0_4342f, 0
  br i1 %v1_43436, label %bb, label %dec_label_pc_4343f

bb:                                               ; preds = %dec_label_pc_43410
  %v1_43439 = call i64 @function_43598()
  store i64 %v1_43439, i64* @rax, align 8
  br label %dec_label_pc_4343f

dec_label_pc_4343f:                               ; preds = %bb, %dec_label_pc_43410
  %v0_4343f = phi i64 [ %v1_43439, %bb ], [ %arg2, %dec_label_pc_43410 ]
  store i64 %v0_4343f, i64* @rbx, align 8
  ret i64 %v0_4343f
}

define i64 @function_43498() local_unnamed_addr {
dec_label_pc_43498:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_434b0() local_unnamed_addr {
dec_label_pc_434b0:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_434c8() local_unnamed_addr {
dec_label_pc_434c8:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_43598() local_unnamed_addr {
dec_label_pc_43598:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$558onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_435a0:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_435aa = load i64, i64* %rsi.global-to-local, align 8
  %v0_435ad = load i64, i64* @rdi, align 8
  store i64 %v0_435ad, i64* @rbx, align 8
  store i64 1, i64* %r12.global-to-local, align 8
  store i64 3, i64* @rax, align 8
  store i64 4, i64* %rsi.global-to-local, align 8
  store i64 %v0_435aa, i64* @rdi, align 8
  %v1_435fd = add i64 %v0_435ad, 24
  %v2_435fd = inttoptr i64 %v1_435fd to i64*
  %v3_435fd = load i64, i64* %v2_435fd, align 8
  store i64 %v3_435fd, i64* @rax, align 8
  %v1_43606 = add i64 %v0_435ad, 32
  %v2_43606 = inttoptr i64 %v1_43606 to i64*
  %v3_43606 = load i64, i64* %v2_43606, align 8
  store i64 %v3_43606, i64* @rax, align 8
  %v1_4360a = add i64 %v3_43606, 8
  %v2_4360a = inttoptr i64 %v1_4360a to i32*
  %v3_4360a = load i32, i32* %v2_4360a, align 4
  %v4_4360a = zext i32 %v3_4360a to i64
  store i64 %v4_4360a, i64* @rcx, align 8
  %v5_4360d = icmp eq i32 %v3_4360a, 0
  br i1 %v5_4360d, label %bb, label %dec_label_pc_43615

bb:                                               ; preds = %dec_label_pc_435a0
  %v2_4360f = call i64 @function_439b4(i64 %v0_435aa)
  store i64 %v2_4360f, i64* @rax, align 8
  %v0_43619.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_43615

dec_label_pc_43615:                               ; preds = %bb, %dec_label_pc_435a0
  %v0_43619 = phi i64 [ %v0_43619.pre, %bb ], [ %v0_435ad, %dec_label_pc_435a0 ]
  %v0_43615 = phi i64 [ %v2_4360f, %bb ], [ %v3_43606, %dec_label_pc_435a0 ]
  %v1_43615 = add i64 %v0_43615, 16
  %v2_43615 = inttoptr i64 %v1_43615 to i64*
  %v3_43615 = load i64, i64* %v2_43615, align 8
  store i64 %v3_43615, i64* @rax, align 8
  %v1_43622 = add i64 %v0_43619, 48
  %v2_43622 = inttoptr i64 %v1_43622 to i64*
  %v3_43622 = load i64, i64* %v2_43622, align 8
  store i64 %v3_43622, i64* @rax, align 8
  %v1_43626 = add i64 %v3_43622, 8
  %v2_43626 = inttoptr i64 %v1_43626 to i32*
  %v3_43626 = load i32, i32* %v2_43626, align 4
  %v4_43626 = zext i32 %v3_43626 to i64
  store i64 %v4_43626, i64* @rdx, align 8
  %v5_43629 = icmp eq i32 %v3_43626, 0
  br i1 %v5_43629, label %bb259, label %dec_label_pc_43631

bb259:                                            ; preds = %dec_label_pc_43615
  %v2_4362b = call i64 @function_439b4(i64 %v0_435aa)
  store i64 %v2_4362b, i64* @rax, align 8
  %v0_43635.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_43631

dec_label_pc_43631:                               ; preds = %bb259, %dec_label_pc_43615
  %v0_4364c = phi i64 [ %v0_43635.pre, %bb259 ], [ %v0_43619, %dec_label_pc_43615 ]
  %v0_43631 = phi i64 [ %v2_4362b, %bb259 ], [ %v3_43622, %dec_label_pc_43615 ]
  %v1_43631 = add i64 %v0_43631, 16
  %v2_43631 = inttoptr i64 %v1_43631 to i64*
  %v3_43631 = load i64, i64* %v2_43631, align 8
  store i64 %v3_43631, i64* @rax, align 8
  %v1_43635 = add i64 %v0_4364c, 56
  %v2_43635 = inttoptr i64 %v1_43635 to i64*
  %v3_43635 = load i64, i64* %v2_43635, align 8
  store i64 %v3_43635, i64* @rdi, align 8
  store i64 %v0_435aa, i64* %rsi.global-to-local, align 8
  %v1_43643 = inttoptr i64 %v3_43635 to i64*
  %v2_43643 = load i64, i64* %v1_43643, align 8
  store i64 %v2_43643, i64* %r15.global-to-local, align 8
  store i64 276070, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* %r14.global-to-local, align 8
  %v3_4367c = load i32, i32* inttoptr (i64 8 to i32*), align 8
  %v4_4367c = zext i32 %v3_4367c to i64
  store i64 %v4_4367c, i64* @rax, align 8
  %v5_4367f = icmp eq i32 %v3_4367c, 0
  br i1 %v5_4367f, label %bb260, label %dec_label_pc_43687

bb260:                                            ; preds = %dec_label_pc_43631
  %v2_43681 = call i64 @function_439b4(i64 2)
  store i64 %v2_43681, i64* @rax, align 8
  %v0_43689.pre = load i64, i64* %r15.global-to-local, align 8
  %v0_4368c.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_43687

dec_label_pc_43687:                               ; preds = %bb260, %dec_label_pc_43631
  %v1_43699 = phi i64 [ %v0_4368c.pre, %bb260 ], [ 0, %dec_label_pc_43631 ]
  %v0_43699 = phi i64 [ %v0_43689.pre, %bb260 ], [ %v2_43643, %dec_label_pc_43631 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_43699, i64* %rsi.global-to-local, align 8
  store i64 %v1_43699, i64* @rdi, align 8
  %v1_43694 = add i64 %v1_43699, 8
  %v2_43694 = inttoptr i64 %v1_43694 to i32*
  %v3_43694 = load i32, i32* %v2_43694, align 4
  %v2_43699 = add i64 %v1_43699, 16
  %v3_43699 = inttoptr i64 %v2_43699 to i64*
  store i64 %v0_43699, i64* %v3_43699, align 8
  %tmp263 = or i32 %v3_43694, 1
  %tmp264 = icmp eq i32 %tmp263, 1
  br i1 %tmp264, label %bb262, label %dec_label_pc_436a3

bb262:                                            ; preds = %dec_label_pc_43687
  %v3_4369d = call i64 @function_439bd()
  store i64 %v3_4369d, i64* @rax, align 8
  br label %dec_label_pc_436a3

dec_label_pc_436a3:                               ; preds = %bb262, %dec_label_pc_43687
  %v0_436a3 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_436a3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_436a8 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_436a8, i64* %rsi.global-to-local, align 8
  ret i64 0
}

define i64 @function_43970() local_unnamed_addr {
dec_label_pc_43970:
  %tmp230 = call i64 @__decompiler_undefined_function_0()
  ret i64 %tmp230
}

define i64 @function_439b4(i64 %arg1) local_unnamed_addr {
dec_label_pc_439b4:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_439bd() local_unnamed_addr {
dec_label_pc_439bd:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_439c9() local_unnamed_addr {
dec_label_pc_439c9:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_439d5() local_unnamed_addr {
dec_label_pc_439d5:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$568onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_439f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_439fc = load i64, i64* @rdi, align 8
  store i64 %v0_439fc, i64* @rbx, align 8
  store i64 276998, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_43e60(i64 %arg1) local_unnamed_addr {
dec_label_pc_43e60:
  %tmp239 = call i64 @__decompiler_undefined_function_0()
  %v1_43e65 = add i64 %tmp239, 8
  %v2_43e65 = inttoptr i64 %v1_43e65 to i32*
  %v3_43e65 = load i32, i32* %v2_43e65, align 4
  %v5_43e69 = icmp eq i32 %v3_43e65, 0
  br i1 %v5_43e69, label %bb, label %dec_label_pc_43e72

bb:                                               ; preds = %dec_label_pc_43e60
  %v1_43e6c = load i64, i64* @rdi, align 8
  %v2_43e6c = call i64 @function_442e5(i64 %v1_43e6c)
  store i64 %v2_43e6c, i64* @rax, align 8
  br label %dec_label_pc_43e72

dec_label_pc_43e72:                               ; preds = %bb, %dec_label_pc_43e60
  store i64 %arg1, i64* @rdi, align 8
  %v1_43e7a = inttoptr i64 %arg1 to i64*
  %v2_43e7a = load i64, i64* %v1_43e7a, align 8
  store i64 %v2_43e7a, i64* @rax, align 8
  %v4_43e83 = trunc i64 %v2_43e7a to i8
  %v5_43e83 = icmp eq i8 %v4_43e83, 0
  %v1_43e85 = icmp eq i1 %v5_43e83, false
  br i1 %v1_43e85, label %bb240, label %dec_label_pc_43e8b

bb240:                                            ; preds = %dec_label_pc_43e72
  %v2_43e85 = call i64 @function_442cd()
  store i64 %v2_43e85, i64* @rax, align 8
  br label %dec_label_pc_43e8b

dec_label_pc_43e8b:                               ; preds = %bb240, %dec_label_pc_43e72
  store i64 278162, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44282() local_unnamed_addr {
dec_label_pc_44282:
  store i64 279177, i64* @rdi, align 8
  %v1_44289 = load i64, i64* @rax, align 8
  ret i64 %v1_44289
}

define i64 @function_442cd() local_unnamed_addr {
dec_label_pc_442cd:
  %v0_442cd = load i64, i64* @rbx, align 8
  %v1_442cd = add i64 %v0_442cd, 72
  %v2_442cd = inttoptr i64 %v1_442cd to i64*
  %v3_442cd = load i64, i64* %v2_442cd, align 8
  store i64 %v3_442cd, i64* @rdi, align 8
  %v1_442d4 = inttoptr i64 %v3_442cd to i64*
  %v2_442d4 = load i64, i64* %v1_442d4, align 8
  store i64 %v2_442d4, i64* @rax, align 8
  store i64 %v2_442d4, i64* @r13, align 8
  ret i64 %v2_442d4
}

define i64 @function_442e5(i64 %arg1) local_unnamed_addr {
dec_label_pc_442e5:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib20StringLib$MatchState13push_capturesEJPNS1_7VarargsEbii"(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_442f0:
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_442f4 = load i64, i64* %r13.global-to-local, align 8
  %v0_442f8 = load i64, i64* @rdi, align 8
  store i64 %v0_442f8, i64* %r13.global-to-local, align 8
  %v1_44301 = add i64 %v0_442f8, 32
  %v2_44301 = inttoptr i64 %v1_44301 to i32*
  %v3_44301 = load i32, i32* %v2_44301, align 4
  %v4_44301 = zext i32 %v3_44301 to i64
  store i64 %v4_44301, i64* @rax, align 8
  %v5_4430c = icmp eq i32 %v3_44301, 0
  %v1_44312 = icmp eq i1 %v5_4430c, false
  br i1 %v1_44312, label %dec_label_pc_44338.thread260, label %dec_label_pc_44314

dec_label_pc_44338.thread260:                     ; preds = %dec_label_pc_442f0
  br label %dec_label_pc_44340

dec_label_pc_44314:                               ; preds = %dec_label_pc_442f0
  %v0_44314 = load i64, i64* %rsi.global-to-local, align 8
  %v4_44314 = trunc i64 %v0_44314 to i8
  %v5_44314 = icmp eq i8 %v4_44314, 0
  br i1 %v5_44314, label %bb, label %dec_label_pc_44319

dec_label_pc_44319:                               ; preds = %dec_label_pc_44314
  store i64 0, i64* %rsi.global-to-local, align 8
  store i64 %v0_442f4, i64* %r13.global-to-local, align 8
  ret i64 %v4_44301

bb:                                               ; preds = %dec_label_pc_44314
  %v1_4433a = call i64 @function_44420()
  store i64 %v1_4433a, i64* @rax, align 8
  br label %dec_label_pc_44340

dec_label_pc_44340:                               ; preds = %dec_label_pc_44338.thread260, %bb
  %v0_44340 = phi i64 [ %v1_4433a, %bb ], [ %v4_44301, %dec_label_pc_44338.thread260 ]
  %v1_44340 = trunc i64 %v0_44340 to i32
  %v11_44340 = icmp eq i32 %v1_44340, 1
  br i1 %v11_44340, label %bb259, label %dec_label_pc_44349

bb259:                                            ; preds = %dec_label_pc_44340
  %v3_44343 = call i64 @function_44574(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_44343, i64* @rax, align 8
  br label %dec_label_pc_44349

dec_label_pc_44349:                               ; preds = %bb259, %dec_label_pc_44340
  %v0_44355 = phi i64 [ %v3_44343, %bb259 ], [ %v0_44340, %dec_label_pc_44340 ]
  store i64 279376, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v0_44355, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44370(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44370:
  %v0_44370 = load i64, i64* @r14, align 8
  %v4_44370 = trunc i64 %v0_44370 to i32
  %v5_44370 = icmp eq i32 %v4_44370, 0
  %v1_44373 = icmp eq i1 %v5_44370, false
  br i1 %v1_44373, label %bb, label %dec_label_pc_44379

bb:                                               ; preds = %dec_label_pc_44370
  %v2_44373 = call i64 @function_445a9()
  store i64 %v2_44373, i64* @rax, align 8
  br label %dec_label_pc_44379

dec_label_pc_44379:                               ; preds = %bb, %dec_label_pc_44370
  %v0_44379 = load i64, i64* @r13, align 8
  %v1_44379 = add i64 %v0_44379, 8
  %v2_44379 = inttoptr i64 %v1_44379 to i64*
  %v3_44379 = load i64, i64* %v2_44379, align 8
  store i64 %v3_44379, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v1_44388 = inttoptr i64 %v3_44379 to i64*
  %v2_44388 = load i64, i64* %v1_44388, align 8
  store i64 %v2_44388, i64* @rax, align 8
  ret i64 %v2_44388
}

define i64 @function_44394(i64 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_44394:
  %tmp = sext i32 %arg3 to i64
  store i64 %tmp, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_44394 = load i64, i64* @rbx, align 8
  %v1_44394 = add i64 %v0_44394, 8
  %v2_44394 = inttoptr i64 %v1_44394 to i32*
  %v3_44394 = load i32, i32* %v2_44394, align 4
  %v4_44394 = load i64, i64* @r12, align 8
  %v5_44394 = trunc i64 %v4_44394 to i32
  %tmp4 = icmp ugt i32 %v3_44394, %v5_44394
  br i1 %tmp4, label %dec_label_pc_4439e, label %bb

bb:                                               ; preds = %dec_label_pc_44394
  %v3_44398 = call i64 @function_445a0()
  store i64 %v3_44398, i64* @rax, align 8
  %v0_443a3.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4439e

dec_label_pc_4439e:                               ; preds = %dec_label_pc_44394, %bb
  %v0_443a3 = phi i64 [ %v0_443a3.pre, %bb ], [ %v0_44394, %dec_label_pc_44394 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_443a3, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_443bf() local_unnamed_addr {
dec_label_pc_443bf:
  %v0_443bf = load i64, i64* @r13, align 8
  %v1_443bf = add i64 %v0_443bf, 32
  %v2_443bf = inttoptr i64 %v1_443bf to i32*
  %v3_443bf = load i32, i32* %v2_443bf, align 4
  %v4_443bf = load i64, i64* @r14, align 8
  store i64 %v4_443bf, i64* @rbp, align 8
  %v7_443c6 = sext i32 %v3_443bf to i64
  %v8_443c6 = icmp sgt i64 %v7_443c6, %v4_443bf
  br i1 %v8_443c6, label %dec_label_pc_443c8, label %bb

bb:                                               ; preds = %dec_label_pc_443bf
  %v11_443c6 = call i64 @function_44370(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v11_443c6, i64* @rax, align 8
  %v0_443c8.pre = load i64, i64* @r13, align 8
  %v0_443cc.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_443c8

dec_label_pc_443c8:                               ; preds = %dec_label_pc_443bf, %bb
  %v0_443cc = phi i64 [ %v4_443bf, %dec_label_pc_443bf ], [ %v0_443cc.pre, %bb ]
  %v0_443c8 = phi i64 [ %v0_443bf, %dec_label_pc_443bf ], [ %v0_443c8.pre, %bb ]
  %v1_443c8 = add i64 %v0_443c8, 48
  %v2_443c8 = inttoptr i64 %v1_443c8 to i64*
  %v3_443c8 = load i64, i64* %v2_443c8, align 8
  store i64 %v3_443c8, i64* @rax, align 8
  store i64 %v0_443cc, i64* @r12, align 8
  %v1_443cf = add i64 %v3_443c8, 8
  %v2_443cf = inttoptr i64 %v1_443cf to i32*
  %v3_443cf = load i32, i32* %v2_443cf, align 4
  %v5_443cf = trunc i64 %v0_443cc to i32
  %v1_443d3 = add i64 %v3_443c8, 12
  store i64 %v1_443d3, i64* @rdx, align 8
  %tmp253 = icmp ugt i32 %v3_443cf, %v5_443cf
  br i1 %tmp253, label %dec_label_pc_443dd, label %bb249

bb249:                                            ; preds = %dec_label_pc_443c8
  %v3_443d7 = call i64 @function_44596()
  store i64 %v3_443d7, i64* @rax, align 8
  %v0_443dd.pre = load i64, i64* @rdx, align 8
  %v1_443dd.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_443dd

dec_label_pc_443dd:                               ; preds = %dec_label_pc_443c8, %bb249
  %v0_443e1 = phi i64 [ %v1_443dd.pre, %bb249 ], [ %v0_443cc, %dec_label_pc_443c8 ]
  %v0_443dd = phi i64 [ %v0_443dd.pre, %bb249 ], [ %v1_443d3, %dec_label_pc_443c8 ]
  %v2_443dd = mul i64 %v0_443e1, 4
  %v3_443dd = add i64 %v2_443dd, %v0_443dd
  %v4_443dd = inttoptr i64 %v3_443dd to i32*
  %v5_443dd = load i32, i32* %v4_443dd, align 4
  %v6_443dd = zext i32 %v5_443dd to i64
  store i64 %v6_443dd, i64* @rdx, align 8
  %v11_443e9 = icmp eq i32 %v5_443dd, -1
  br i1 %v11_443e9, label %bb250, label %dec_label_pc_443f2

bb250:                                            ; preds = %dec_label_pc_443dd
  %v1_443ec = call i64 @function_445b5()
  store i64 %v1_443ec, i64* @rax, align 8
  %v0_443f2.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_443f2

dec_label_pc_443f2:                               ; preds = %bb250, %dec_label_pc_443dd
  %v0_443f2 = phi i64 [ %v0_443f2.pre, %bb250 ], [ %v6_443dd, %dec_label_pc_443dd ]
  %v1_443f2 = trunc i64 %v0_443f2 to i32
  %v11_443f2 = icmp eq i32 %v1_443f2, -2
  %v0_443f5 = load i64, i64* @r13, align 8
  %v1_443f5 = add i64 %v0_443f5, 40
  %v2_443f5 = inttoptr i64 %v1_443f5 to i64*
  %v3_443f5 = load i64, i64* %v2_443f5, align 8
  store i64 %v3_443f5, i64* @rax, align 8
  br i1 %v11_443f2, label %bb251, label %dec_label_pc_443fb

bb251:                                            ; preds = %dec_label_pc_443f2
  %v1_443f9 = load i64, i64* @rdi, align 8
  %v3_443f9 = call i64 @function_44448(i64 %v1_443f9, i64 %v2_443dd)
  store i64 %v3_443f9, i64* @rax, align 8
  br label %dec_label_pc_443fb

dec_label_pc_443fb:                               ; preds = %bb251, %dec_label_pc_443f2
  %v2_443fb = phi i64 [ %v3_443f9, %bb251 ], [ %v3_443f5, %dec_label_pc_443f2 ]
  %v0_443fb = load i64, i64* @r14, align 8
  %v1_443fb = trunc i64 %v0_443fb to i32
  %v3_443fb = add i64 %v2_443fb, 8
  %v4_443fb = inttoptr i64 %v3_443fb to i32*
  %v5_443fb = load i32, i32* %v4_443fb, align 4
  %v11_443fb = icmp ult i32 %v1_443fb, %v5_443fb
  %v1_443ff = icmp eq i1 %v11_443fb, false
  br i1 %v1_443ff, label %bb252, label %dec_label_pc_44405

bb252:                                            ; preds = %dec_label_pc_443fb
  %v2_443ff = call i64 @function_44596()
  store i64 %v2_443ff, i64* @rax, align 8
  br label %dec_label_pc_44405

dec_label_pc_44405:                               ; preds = %bb252, %dec_label_pc_443fb
  %v0_44409 = phi i64 [ %v2_443ff, %bb252 ], [ %v2_443fb, %dec_label_pc_443fb ]
  %v0_44405 = load i64, i64* @r13, align 8
  %v1_44405 = add i64 %v0_44405, 8
  %v2_44405 = inttoptr i64 %v1_44405 to i64*
  %v3_44405 = load i64, i64* %v2_44405, align 8
  store i64 %v3_44405, i64* @rdi, align 8
  %v3_44409 = add i64 %v2_443dd, 12
  %v4_44409 = add i64 %v3_44409, %v0_44409
  %v5_44409 = inttoptr i64 %v4_44409 to i32*
  %v6_44409 = load i32, i32* %v5_44409, align 4
  %v1_4440d = inttoptr i64 %v3_44405 to i64*
  %v2_4440d = load i64, i64* %v1_4440d, align 8
  store i64 %v2_4440d, i64* @rax, align 8
  %v0_44410 = load i64, i64* @rdx, align 8
  %v1_44410 = trunc i64 %v0_44410 to i32
  %v5_44410 = add i32 %v1_44410, %v6_44409
  %v21_44410 = zext i32 %v5_44410 to i64
  store i64 %v21_44410, i64* @rdx, align 8
  store i64 %v2_4440d, i64* @r15, align 8
  %v7_4441b = call i64 @function_44394(i64 %v3_44405, i32 %v6_44409, i32 %v5_44410)
  store i64 %v7_4441b, i64* @rax, align 8
  ret i64 %v7_4441b
}

define i64 @function_44420() local_unnamed_addr {
dec_label_pc_44420:
  store i64 279591, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44448(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44448:
  store i64 %arg1, i64* @rdi, align 8
  %v0_44448 = load i64, i64* @r14, align 8
  %v1_44448 = trunc i64 %v0_44448 to i32
  %v2_44448 = load i64, i64* @rax, align 8
  %v3_44448 = add i64 %v2_44448, 8
  %v4_44448 = inttoptr i64 %v3_44448 to i32*
  %v5_44448 = load i32, i32* %v4_44448, align 4
  %v11_44448 = icmp ult i32 %v1_44448, %v5_44448
  %v1_4444c = icmp eq i1 %v11_44448, false
  br i1 %v1_4444c, label %bb, label %dec_label_pc_44452

bb:                                               ; preds = %dec_label_pc_44448
  %v2_4444c = call i64 @function_44596()
  store i64 %v2_4444c, i64* @rax, align 8
  br label %dec_label_pc_44452

dec_label_pc_44452:                               ; preds = %bb, %dec_label_pc_44448
  store i64 279641, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_444e0() local_unnamed_addr {
dec_label_pc_444e0:
  store i64 279783, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44524(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_44524:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_44524 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_44524 = load i64, i64* @rax, align 8
  %v4_44524 = trunc i64 %v3_44524 to i8
  %v5_44524 = add i8 %v4_44524, %v2_44524
  %v21_44524 = inttoptr i64 %v3_44524 to i8*
  store i8 %v5_44524, i8* %v21_44524, align 1
  %v0_44526 = load i64, i64* @rax, align 8
  %v1_44526 = add i64 %v0_44526, -119
  %v2_44526 = inttoptr i64 %v1_44526 to i8*
  %v3_44526 = load i8, i8* %v2_44526, align 1
  %v4_44526 = load i64, i64* @rcx, align 8
  %v5_44526 = trunc i64 %v4_44526 to i8
  %v6_44526 = add i8 %v5_44526, %v3_44526
  store i8 %v6_44526, i8* %v2_44526, align 1
  %v0_4452a = load i64, i64* @rax, align 8
  %v1_4452a = add i64 %v0_4452a, -119
  %v2_4452a = inttoptr i64 %v1_4452a to i8*
  %v3_4452a = load i8, i8* %v2_4452a, align 1
  %v4_4452a = load i64, i64* @rcx, align 8
  %v5_4452a = trunc i64 %v4_4452a to i8
  %v6_4452a = or i8 %v5_4452a, %v3_4452a
  store i8 %v6_4452a, i8* %v2_4452a, align 1
  %v0_4452d = call i64 @unknown_1069ce7e()
  store i64 %v0_4452d, i64* @rax, align 8
  ret i64 %v0_4452d
}

define i64 @function_44537() local_unnamed_addr {
dec_label_pc_44537:
  store i64 279870, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44574(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44574:
  store i64 %arg2, i64* @rcx, align 8
  store i64 %arg1, i64* @rdx, align 8
  %v0_4457c = load i64, i64* @rax, align 8
  ret i64 %v0_4457c
}

define i64 @function_44581() local_unnamed_addr {
dec_label_pc_44581:
  %v0_44581 = load i64, i64* @rbx, align 8
  %v1_44581 = add i64 %v0_44581, 16
  %v2_44581 = inttoptr i64 %v1_44581 to i64*
  %v3_44581 = load i64, i64* %v2_44581, align 8
  store i64 %v3_44581, i64* @rax, align 8
  ret i64 %v3_44581
}

define i64 @function_4458a() local_unnamed_addr {
dec_label_pc_4458a:
  %v0_4458a = load i64, i64* inttoptr (i64 279953 to i64*), align 8
  store i64 %v0_4458a, i64* @rax, align 8
  ret i64 %v0_4458a
}

define i64 @function_44596() local_unnamed_addr {
dec_label_pc_44596:
  %v0_44596 = load i64, i64* @r14, align 8
  store i64 %v0_44596, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_445a0() local_unnamed_addr {
dec_label_pc_445a0:
  %v0_445a0 = load i64, i64* @rbp, align 8
  store i64 %v0_445a0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_445a9() local_unnamed_addr {
dec_label_pc_445a9:
  %v0_445a9 = load i64, i64* inttoptr (i64 279984 to i64*), align 16
  store i64 %v0_445a9, i64* @rdi, align 8
  %v0_445b0 = load i64, i64* @rax, align 8
  ret i64 %v0_445b0
}

define i64 @function_445b5() local_unnamed_addr {
dec_label_pc_445b5:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_445c1() local_unnamed_addr {
dec_label_pc_445c1:
  store i64 1, i64* @rdi, align 8
  %v0_445c1 = load i64, i64* @rax, align 8
  ret i64 %v0_445c1
}

define i64 @function_445c6() local_unnamed_addr {
dec_label_pc_445c6:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_445cd(i64 %arg1) local_unnamed_addr {
dec_label_pc_445cd:
  store i64 0, i64* @rdi, align 8
  %v12_445cd = load i64, i64* @rax, align 8
  ret i64 %v12_445cd
}

define i64 @"_ZN4lang16lang_luaj$77$7$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_445e0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_445ea = load i64, i64* @rdi, align 8
  store i64 %v0_445ea, i64* @rbx, align 8
  store i64 %arg2, i64* @r12, align 8
  store i64 1, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_4460d = add i64 %v0_445ea, 24
  %v2_4460d = inttoptr i64 %v1_4460d to i64*
  %v3_4460d = load i64, i64* %v2_4460d, align 8
  store i64 %v3_4460d, i64* @rax, align 8
  %v1_44611 = add i64 %v3_4460d, 8
  %v2_44611 = inttoptr i64 %v1_44611 to i32*
  %v3_44611 = load i32, i32* %v2_44611, align 4
  %v5_44614 = icmp eq i32 %v3_44611, 0
  br i1 %v5_44614, label %bb, label %dec_label_pc_4461c

bb:                                               ; preds = %dec_label_pc_445e0
  %v1_44616 = call i64 @function_4477b()
  store i64 %v1_44616, i64* @rax, align 8
  %v0_44620.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4461c

dec_label_pc_4461c:                               ; preds = %bb, %dec_label_pc_445e0
  %v0_44620 = phi i64 [ %v0_44620.pre, %bb ], [ %v0_445ea, %dec_label_pc_445e0 ]
  %v0_4461c = phi i64 [ %v1_44616, %bb ], [ %v3_4460d, %dec_label_pc_445e0 ]
  %v1_4461c = add i64 %v0_4461c, 16
  %v2_4461c = inttoptr i64 %v1_4461c to i64*
  %v3_4461c = load i64, i64* %v2_4461c, align 8
  store i64 %v3_4461c, i64* @rdi, align 8
  %v1_44624 = inttoptr i64 %v3_4461c to i64*
  %v2_44624 = load i64, i64* %v1_44624, align 8
  store i64 %v2_44624, i64* @rax, align 8
  %v4_4462d = trunc i64 %v2_44624 to i8
  %v5_4462d = icmp eq i8 %v4_4462d, 0
  br i1 %v5_4462d, label %bb243, label %dec_label_pc_44631

bb243:                                            ; preds = %dec_label_pc_4461c
  %v1_4462f = call i64 @function_44660()
  store i64 %v1_4462f, i64* @rax, align 8
  %v0_44631.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_44631

dec_label_pc_44631:                               ; preds = %bb243, %dec_label_pc_4461c
  %v0_44631 = phi i64 [ %v0_44631.pre, %bb243 ], [ %v0_44620, %dec_label_pc_4461c ]
  %v1_44631 = add i64 %v0_44631, 24
  %v2_44631 = inttoptr i64 %v1_44631 to i64*
  %v3_44631 = load i64, i64* %v2_44631, align 8
  store i64 %v3_44631, i64* @rbx, align 8
  %v1_44635 = add i64 %v3_44631, 8
  %v2_44635 = inttoptr i64 %v1_44635 to i32*
  %v3_44635 = load i32, i32* %v2_44635, align 4
  %v4_44635 = zext i32 %v3_44635 to i64
  store i64 %v4_44635, i64* @rcx, align 8
  %v5_44638 = icmp eq i32 %v3_44635, 0
  br i1 %v5_44638, label %bb244, label %dec_label_pc_44640

bb244:                                            ; preds = %dec_label_pc_44631
  %v1_4463a = call i64 @function_4477b()
  store i64 %v1_4463a, i64* @rax, align 8
  %v0_44645.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_44640

dec_label_pc_44640:                               ; preds = %bb244, %dec_label_pc_44631
  %v0_44645 = phi i64 [ %v0_44645.pre, %bb244 ], [ %v3_44631, %dec_label_pc_44631 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_44645, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_44660() local_unnamed_addr {
dec_label_pc_44660:
  %v0_44660 = load i64, i64* @rbx, align 8
  %v1_44660 = add i64 %v0_44660, 24
  %v2_44660 = inttoptr i64 %v1_44660 to i64*
  %v3_44660 = load i64, i64* %v2_44660, align 8
  store i64 %v3_44660, i64* @rax, align 8
  %v1_44664 = add i64 %v3_44660, 8
  %v2_44664 = inttoptr i64 %v1_44664 to i32*
  %v3_44664 = load i32, i32* %v2_44664, align 4
  %v4_44664 = zext i32 %v3_44664 to i64
  store i64 %v4_44664, i64* @rdx, align 8
  %v5_44667 = icmp eq i32 %v3_44664, 0
  br i1 %v5_44667, label %bb, label %dec_label_pc_4466f

bb:                                               ; preds = %dec_label_pc_44660
  %v1_44669 = call i64 @function_4477b()
  store i64 %v1_44669, i64* @rax, align 8
  %v0_446af.pre.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4466f

dec_label_pc_4466f:                               ; preds = %bb, %dec_label_pc_44660
  %v0_446af.pre = phi i64 [ %v0_446af.pre.pre, %bb ], [ %v0_44660, %dec_label_pc_44660 ]
  %v0_4466f = phi i64 [ %v1_44669, %bb ], [ %v3_44660, %dec_label_pc_44660 ]
  %v1_4466f = add i64 %v0_4466f, 16
  %v2_4466f = inttoptr i64 %v1_4466f to i64*
  %v3_4466f = load i64, i64* %v2_4466f, align 8
  br label %dec_label_pc_446af

dec_label_pc_44678:                               ; preds = %dec_label_pc_446af
  %v1_44678 = add i64 %v0_4468b, 56
  %v2_44678 = inttoptr i64 %v1_44678 to i64*
  %v3_44678 = load i64, i64* %v2_44678, align 8
  store i64 %v3_44678, i64* @rdi, align 8
  %v1_4467f = inttoptr i64 %v3_44678 to i64*
  %v2_4467f = load i64, i64* %v1_4467f, align 8
  store i64 %v2_4467f, i64* @rax, align 8
  %v1_44688 = inttoptr i64 %v2_4467f to i64*
  %v2_44688 = load i64, i64* %v1_44688, align 8
  store i64 %v2_44688, i64* @rdx, align 8
  store i64 %v2_4467f, i64* @rdi, align 8
  %v4_44698 = trunc i64 %v2_4467f to i8
  %v5_44698 = icmp eq i8 %v4_44698, 0
  %v1_4469a = icmp eq i1 %v5_44698, false
  br i1 %v1_4469a, label %bb8, label %dec_label_pc_4469c

bb8:                                              ; preds = %dec_label_pc_44678
  %v2_4469a = call i64 @function_44710()
  store i64 %v2_4469a, i64* @rax, align 8
  %v0_4469c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4469c

dec_label_pc_4469c:                               ; preds = %bb8, %dec_label_pc_44678
  %v0_4469c = phi i64 [ %v0_4469c.pre, %bb8 ], [ %v0_4468b, %dec_label_pc_44678 ]
  %v1_4469c = add i64 %v0_4469c, 56
  %v2_4469c = inttoptr i64 %v1_4469c to i64*
  %v3_4469c = load i64, i64* %v2_4469c, align 8
  store i64 %v3_4469c, i64* @rdi, align 8
  %v1_446a3 = inttoptr i64 %v3_4469c to i64*
  %v2_446a3 = load i64, i64* %v1_446a3, align 8
  store i64 %v2_446a3, i64* @rax, align 8
  br label %dec_label_pc_446af

dec_label_pc_446af:                               ; preds = %dec_label_pc_4469c, %dec_label_pc_4466f
  %v0_4468b = phi i64 [ %v0_4469c, %dec_label_pc_4469c ], [ %v0_446af.pre, %dec_label_pc_4466f ]
  %v0_4467c = phi i64 [ %v2_446a3, %dec_label_pc_4469c ], [ %v3_4466f, %dec_label_pc_4466f ]
  store i64 %v0_4467c, i64* @rbp, align 8
  %v1_446af = add i64 %v0_4468b, 40
  %v2_446af = inttoptr i64 %v1_446af to i64*
  %v3_446af = load i64, i64* %v2_446af, align 8
  store i64 %v3_446af, i64* @rdi, align 8
  %v1_446b6 = inttoptr i64 %v3_446af to i64*
  %v2_446b6 = load i64, i64* %v1_446b6, align 8
  store i64 %v2_446b6, i64* @rax, align 8
  %v1_446bf = inttoptr i64 %v2_446b6 to i64*
  %v2_446bf = load i64, i64* %v1_446bf, align 8
  store i64 %v2_446bf, i64* @rdx, align 8
  store i64 %v2_446b6, i64* @rdi, align 8
  %v4_446cb = trunc i64 %v2_446b6 to i8
  %v5_446cb = icmp eq i8 %v4_446cb, 0
  %v1_446cd = icmp eq i1 %v5_446cb, false
  br i1 %v1_446cd, label %dec_label_pc_44678, label %dec_label_pc_446cf

dec_label_pc_446cf:                               ; preds = %dec_label_pc_446af
  store i64 280278, i64* @rdi, align 8
  %v1_446d6 = add i64 %v0_4468b, 48
  %v2_446d6 = inttoptr i64 %v1_446d6 to i64*
  %v3_446d6 = load i64, i64* %v2_446d6, align 8
  store i64 %v3_446d6, i64* @r12, align 8
  ret i64 %v2_446b6
}

define i64 @function_44710() local_unnamed_addr {
dec_label_pc_44710:
  %v0_44710 = load i64, i64* @rbx, align 8
  %v1_44710 = add i64 %v0_44710, 40
  %v2_44710 = inttoptr i64 %v1_44710 to i64*
  %v3_44710 = load i64, i64* %v2_44710, align 8
  store i64 %v3_44710, i64* @rdi, align 8
  %v0_44714 = load i64, i64* @rbp, align 8
  %v1_44717 = inttoptr i64 %v3_44710 to i64*
  %v2_44717 = load i64, i64* %v1_44717, align 8
  store i64 %v2_44717, i64* @rax, align 8
  %v1_44720 = inttoptr i64 %v2_44717 to i64*
  %v2_44720 = load i64, i64* %v1_44720, align 8
  store i64 %v2_44720, i64* @rdx, align 8
  store i64 %v2_44717, i64* @rdi, align 8
  %v1_44730 = add i64 %v0_44710, 56
  %v2_44730 = inttoptr i64 %v1_44730 to i64*
  %v3_44730 = load i64, i64* %v2_44730, align 8
  store i64 %v3_44730, i64* @rdi, align 8
  %v1_44737 = inttoptr i64 %v3_44730 to i64*
  %v2_44737 = load i64, i64* %v1_44737, align 8
  store i64 %v2_44737, i64* @rax, align 8
  %v1_44740 = inttoptr i64 %v2_44737 to i64*
  %v2_44740 = load i64, i64* %v1_44740, align 8
  store i64 %v2_44740, i64* @rdx, align 8
  store i64 %v2_44737, i64* @rdi, align 8
  store i64 %v0_44714, i64* @rax, align 8
  %v0_4475c = load i64, i64* @r12, align 8
  store i64 %v0_4475c, i64* @rdx, align 8
  store i64 %v0_44714, i64* @rdi, align 8
  %v0_4476f = load i64, i64* inttoptr (i64 280438 to i64*), align 8
  store i64 %v0_4476f, i64* @rax, align 8
  ret i64 %v0_4476f
}

define i64 @function_4477b() local_unnamed_addr {
dec_label_pc_4477b:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN4lang16lang_luaj$76$7$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44790:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4479a = load i64, i64* @rdi, align 8
  store i64 %v0_4479a, i64* @rbx, align 8
  store i64 %arg2, i64* @r12, align 8
  store i64 1, i64* @rax, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v1_447bd = add i64 %v0_4479a, 24
  %v2_447bd = inttoptr i64 %v1_447bd to i64*
  %v3_447bd = load i64, i64* %v2_447bd, align 8
  store i64 %v3_447bd, i64* @rax, align 8
  %v1_447c1 = add i64 %v3_447bd, 8
  %v2_447c1 = inttoptr i64 %v1_447c1 to i32*
  %v3_447c1 = load i32, i32* %v2_447c1, align 4
  %v5_447c4 = icmp eq i32 %v3_447c1, 0
  br i1 %v5_447c4, label %bb, label %dec_label_pc_447cc

bb:                                               ; preds = %dec_label_pc_44790
  %v1_447c6 = call i64 @function_4492b()
  store i64 %v1_447c6, i64* @rax, align 8
  %v0_447d0.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_447cc

dec_label_pc_447cc:                               ; preds = %bb, %dec_label_pc_44790
  %v0_447d0 = phi i64 [ %v0_447d0.pre, %bb ], [ %v0_4479a, %dec_label_pc_44790 ]
  %v0_447cc = phi i64 [ %v1_447c6, %bb ], [ %v3_447bd, %dec_label_pc_44790 ]
  %v1_447cc = add i64 %v0_447cc, 16
  %v2_447cc = inttoptr i64 %v1_447cc to i64*
  %v3_447cc = load i64, i64* %v2_447cc, align 8
  store i64 %v3_447cc, i64* @rdi, align 8
  %v1_447d4 = inttoptr i64 %v3_447cc to i64*
  %v2_447d4 = load i64, i64* %v1_447d4, align 8
  store i64 %v2_447d4, i64* @rax, align 8
  %v4_447dd = trunc i64 %v2_447d4 to i8
  %v5_447dd = icmp eq i8 %v4_447dd, 0
  br i1 %v5_447dd, label %bb243, label %dec_label_pc_447e1

bb243:                                            ; preds = %dec_label_pc_447cc
  %v1_447df = call i64 @function_44810()
  store i64 %v1_447df, i64* @rax, align 8
  %v0_447e1.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_447e1

dec_label_pc_447e1:                               ; preds = %bb243, %dec_label_pc_447cc
  %v0_447e1 = phi i64 [ %v0_447e1.pre, %bb243 ], [ %v0_447d0, %dec_label_pc_447cc ]
  %v1_447e1 = add i64 %v0_447e1, 24
  %v2_447e1 = inttoptr i64 %v1_447e1 to i64*
  %v3_447e1 = load i64, i64* %v2_447e1, align 8
  store i64 %v3_447e1, i64* @rbx, align 8
  %v1_447e5 = add i64 %v3_447e1, 8
  %v2_447e5 = inttoptr i64 %v1_447e5 to i32*
  %v3_447e5 = load i32, i32* %v2_447e5, align 4
  %v4_447e5 = zext i32 %v3_447e5 to i64
  store i64 %v4_447e5, i64* @rcx, align 8
  %v5_447e8 = icmp eq i32 %v3_447e5, 0
  br i1 %v5_447e8, label %bb244, label %dec_label_pc_447f0

bb244:                                            ; preds = %dec_label_pc_447e1
  %v1_447ea = call i64 @function_4492b()
  store i64 %v1_447ea, i64* @rax, align 8
  %v0_447f5.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_447f0

dec_label_pc_447f0:                               ; preds = %bb244, %dec_label_pc_447e1
  %v0_447f5 = phi i64 [ %v0_447f5.pre, %bb244 ], [ %v3_447e1, %dec_label_pc_447e1 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_447f5, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_44810() local_unnamed_addr {
dec_label_pc_44810:
  %v0_44810 = load i64, i64* @rbx, align 8
  %v1_44810 = add i64 %v0_44810, 24
  %v2_44810 = inttoptr i64 %v1_44810 to i64*
  %v3_44810 = load i64, i64* %v2_44810, align 8
  store i64 %v3_44810, i64* @rax, align 8
  %v1_44814 = add i64 %v3_44810, 8
  %v2_44814 = inttoptr i64 %v1_44814 to i32*
  %v3_44814 = load i32, i32* %v2_44814, align 4
  %v4_44814 = zext i32 %v3_44814 to i64
  store i64 %v4_44814, i64* @rdx, align 8
  %v5_44817 = icmp eq i32 %v3_44814, 0
  br i1 %v5_44817, label %bb, label %dec_label_pc_4481f

bb:                                               ; preds = %dec_label_pc_44810
  %v1_44819 = call i64 @function_4492b()
  store i64 %v1_44819, i64* @rax, align 8
  %v0_4485f.pre.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4481f

dec_label_pc_4481f:                               ; preds = %bb, %dec_label_pc_44810
  %v0_4485f.pre = phi i64 [ %v0_4485f.pre.pre, %bb ], [ %v0_44810, %dec_label_pc_44810 ]
  %v0_4481f = phi i64 [ %v1_44819, %bb ], [ %v3_44810, %dec_label_pc_44810 ]
  %v1_4481f = add i64 %v0_4481f, 16
  %v2_4481f = inttoptr i64 %v1_4481f to i64*
  %v3_4481f = load i64, i64* %v2_4481f, align 8
  br label %dec_label_pc_4485f

dec_label_pc_44828:                               ; preds = %dec_label_pc_4485f
  %v1_44828 = add i64 %v0_4483b, 56
  %v2_44828 = inttoptr i64 %v1_44828 to i64*
  %v3_44828 = load i64, i64* %v2_44828, align 8
  store i64 %v3_44828, i64* @rdi, align 8
  %v1_4482f = inttoptr i64 %v3_44828 to i64*
  %v2_4482f = load i64, i64* %v1_4482f, align 8
  store i64 %v2_4482f, i64* @rax, align 8
  %v1_44838 = inttoptr i64 %v2_4482f to i64*
  %v2_44838 = load i64, i64* %v1_44838, align 8
  store i64 %v2_44838, i64* @rdx, align 8
  store i64 %v2_4482f, i64* @rdi, align 8
  %v4_44848 = trunc i64 %v2_4482f to i8
  %v5_44848 = icmp eq i8 %v4_44848, 0
  %v1_4484a = icmp eq i1 %v5_44848, false
  br i1 %v1_4484a, label %bb8, label %dec_label_pc_4484c

bb8:                                              ; preds = %dec_label_pc_44828
  %v2_4484a = call i64 @function_448c0()
  store i64 %v2_4484a, i64* @rax, align 8
  %v0_4484c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4484c

dec_label_pc_4484c:                               ; preds = %bb8, %dec_label_pc_44828
  %v0_4484c = phi i64 [ %v0_4484c.pre, %bb8 ], [ %v0_4483b, %dec_label_pc_44828 ]
  %v1_4484c = add i64 %v0_4484c, 56
  %v2_4484c = inttoptr i64 %v1_4484c to i64*
  %v3_4484c = load i64, i64* %v2_4484c, align 8
  store i64 %v3_4484c, i64* @rdi, align 8
  %v1_44853 = inttoptr i64 %v3_4484c to i64*
  %v2_44853 = load i64, i64* %v1_44853, align 8
  store i64 %v2_44853, i64* @rax, align 8
  br label %dec_label_pc_4485f

dec_label_pc_4485f:                               ; preds = %dec_label_pc_4484c, %dec_label_pc_4481f
  %v0_4483b = phi i64 [ %v0_4484c, %dec_label_pc_4484c ], [ %v0_4485f.pre, %dec_label_pc_4481f ]
  %v0_4482c = phi i64 [ %v2_44853, %dec_label_pc_4484c ], [ %v3_4481f, %dec_label_pc_4481f ]
  store i64 %v0_4482c, i64* @rbp, align 8
  %v1_4485f = add i64 %v0_4483b, 40
  %v2_4485f = inttoptr i64 %v1_4485f to i64*
  %v3_4485f = load i64, i64* %v2_4485f, align 8
  store i64 %v3_4485f, i64* @rdi, align 8
  %v1_44866 = inttoptr i64 %v3_4485f to i64*
  %v2_44866 = load i64, i64* %v1_44866, align 8
  store i64 %v2_44866, i64* @rax, align 8
  %v1_4486f = inttoptr i64 %v2_44866 to i64*
  %v2_4486f = load i64, i64* %v1_4486f, align 8
  store i64 %v2_4486f, i64* @rdx, align 8
  store i64 %v2_44866, i64* @rdi, align 8
  %v4_4487b = trunc i64 %v2_44866 to i8
  %v5_4487b = icmp eq i8 %v4_4487b, 0
  %v1_4487d = icmp eq i1 %v5_4487b, false
  br i1 %v1_4487d, label %dec_label_pc_44828, label %dec_label_pc_4487f

dec_label_pc_4487f:                               ; preds = %dec_label_pc_4485f
  store i64 280710, i64* @rdi, align 8
  %v1_44886 = add i64 %v0_4483b, 48
  %v2_44886 = inttoptr i64 %v1_44886 to i64*
  %v3_44886 = load i64, i64* %v2_44886, align 8
  store i64 %v3_44886, i64* @r12, align 8
  ret i64 %v2_44866
}

define i64 @function_448c0() local_unnamed_addr {
dec_label_pc_448c0:
  %v0_448c0 = load i64, i64* @rbx, align 8
  %v1_448c0 = add i64 %v0_448c0, 40
  %v2_448c0 = inttoptr i64 %v1_448c0 to i64*
  %v3_448c0 = load i64, i64* %v2_448c0, align 8
  store i64 %v3_448c0, i64* @rdi, align 8
  %v0_448c4 = load i64, i64* @rbp, align 8
  %v1_448c7 = inttoptr i64 %v3_448c0 to i64*
  %v2_448c7 = load i64, i64* %v1_448c7, align 8
  store i64 %v2_448c7, i64* @rax, align 8
  %v1_448d0 = inttoptr i64 %v2_448c7 to i64*
  %v2_448d0 = load i64, i64* %v1_448d0, align 8
  store i64 %v2_448d0, i64* @rdx, align 8
  store i64 %v2_448c7, i64* @rdi, align 8
  %v1_448e0 = add i64 %v0_448c0, 56
  %v2_448e0 = inttoptr i64 %v1_448e0 to i64*
  %v3_448e0 = load i64, i64* %v2_448e0, align 8
  store i64 %v3_448e0, i64* @rdi, align 8
  %v1_448e7 = inttoptr i64 %v3_448e0 to i64*
  %v2_448e7 = load i64, i64* %v1_448e7, align 8
  store i64 %v2_448e7, i64* @rax, align 8
  %v1_448f0 = inttoptr i64 %v2_448e7 to i64*
  %v2_448f0 = load i64, i64* %v1_448f0, align 8
  store i64 %v2_448f0, i64* @rdx, align 8
  store i64 %v2_448e7, i64* @rdi, align 8
  store i64 %v0_448c4, i64* @rax, align 8
  %v0_4490c = load i64, i64* @r12, align 8
  store i64 %v0_4490c, i64* @rdx, align 8
  store i64 %v0_448c4, i64* @rdi, align 8
  %v0_4491f = load i64, i64* inttoptr (i64 280870 to i64*), align 8
  store i64 %v0_4491f, i64* @rax, align 8
  ret i64 %v0_4491f
}

define i64 @function_4492b() local_unnamed_addr {
dec_label_pc_4492b:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN4lang14lang_luaj$44$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44940:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_44948 = load i64, i64* %rsi.global-to-local, align 8
  %v0_4494d = load i64, i64* @rdi, align 8
  store i64 %v0_4494d, i64* @rbp, align 8
  store i64 %v0_44948, i64* @rbx, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_44948, i64* @rdi, align 8
  %v1_44977 = add i64 %v0_4494d, 24
  %v2_44977 = inttoptr i64 %v1_44977 to i64*
  %v3_44977 = load i64, i64* %v2_44977, align 8
  store i64 %v3_44977, i64* @rdi, align 8
  store i64 %v0_44948, i64* %rsi.global-to-local, align 8
  %v1_4497e = inttoptr i64 %v3_44977 to i64*
  %v2_4497e = load i64, i64* %v1_4497e, align 8
  store i64 %v2_4497e, i64* @rax, align 8
  %v1_44987 = add i64 %v0_4494d, 32
  %v2_44987 = inttoptr i64 %v1_44987 to i64*
  %v3_44987 = load i64, i64* %v2_44987, align 8
  store i64 %v3_44987, i64* @rdi, align 8
  store i64 %v0_44948, i64* %rsi.global-to-local, align 8
  %v1_4498e = inttoptr i64 %v3_44987 to i64*
  %v2_4498e = load i64, i64* %v1_4498e, align 8
  store i64 %v2_4498e, i64* @rax, align 8
  %v1_44997 = inttoptr i64 %v2_4498e to i64*
  %v2_44997 = load i64, i64* %v1_44997, align 8
  store i64 %v2_44997, i64* @rdx, align 8
  store i64 %v2_4498e, i64* @rdi, align 8
  %v4_449a3 = trunc i64 %v2_4498e to i8
  %v5_449a3 = icmp eq i8 %v4_449a3, 0
  br i1 %v5_449a3, label %bb, label %dec_label_pc_449ab

bb:                                               ; preds = %dec_label_pc_44940
  %v7_449a5 = call i64 @function_44bd0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_449a5, i64* @rax, align 8
  %v0_449ab.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_449ab

dec_label_pc_449ab:                               ; preds = %bb, %dec_label_pc_44940
  %v0_449ab = phi i64 [ %v0_449ab.pre, %bb ], [ %v0_4494d, %dec_label_pc_44940 ]
  %v1_449ab = add i64 %v0_449ab, 48
  %v2_449ab = inttoptr i64 %v1_449ab to i64*
  %v3_449ab = load i64, i64* %v2_449ab, align 8
  store i64 %v3_449ab, i64* @rax, align 8
  %v1_449af = add i64 %v0_449ab, 40
  %v2_449af = inttoptr i64 %v1_449af to i64*
  %v3_449af = load i64, i64* %v2_449af, align 8
  store i64 %v3_449af, i64* @rdi, align 8
  %v1_449b3 = add i64 %v3_449ab, 8
  %v2_449b3 = inttoptr i64 %v1_449b3 to i32*
  %v3_449b3 = load i32, i32* %v2_449b3, align 4
  %v5_449b7 = icmp eq i32 %v3_449b3, 0
  br i1 %v5_449b7, label %bb252, label %dec_label_pc_449c0

bb252:                                            ; preds = %dec_label_pc_449ab
  %v2_449ba = call i64 @function_44c3d(i64 %v3_449af)
  store i64 %v2_449ba, i64* @rax, align 8
  %v0_449c4.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_449c0

dec_label_pc_449c0:                               ; preds = %bb252, %dec_label_pc_449ab
  %v0_449c4 = phi i64 [ %v0_449c4.pre, %bb252 ], [ %v0_449ab, %dec_label_pc_449ab ]
  %v0_449c0 = phi i64 [ %v2_449ba, %bb252 ], [ %v3_449ab, %dec_label_pc_449ab ]
  %v1_449c0 = add i64 %v0_449c0, 16
  %v2_449c0 = inttoptr i64 %v1_449c0 to i64*
  %v3_449c0 = load i64, i64* %v2_449c0, align 8
  store i64 %v3_449c0, i64* %rsi.global-to-local, align 8
  %v1_449c4 = add i64 %v0_449c4, 56
  %v2_449c4 = inttoptr i64 %v1_449c4 to i64*
  %v3_449c4 = load i64, i64* %v2_449c4, align 8
  store i64 %v3_449c4, i64* @rax, align 8
  %v1_449c8 = add i64 %v3_449c4, 8
  %v2_449c8 = inttoptr i64 %v1_449c8 to i32*
  %v3_449c8 = load i32, i32* %v2_449c8, align 4
  %v5_449cc = icmp eq i32 %v3_449c8, 0
  br i1 %v5_449cc, label %bb253, label %dec_label_pc_449d5

bb253:                                            ; preds = %dec_label_pc_449c0
  %v2_449cf = call i64 @function_44c3d(i64 %v3_449af)
  store i64 %v2_449cf, i64* @rax, align 8
  %v0_449e2.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_449d5

dec_label_pc_449d5:                               ; preds = %bb253, %dec_label_pc_449c0
  %v0_449e2 = phi i64 [ %v0_449e2.pre, %bb253 ], [ %v0_449c4, %dec_label_pc_449c0 ]
  %v0_449d5 = phi i64 [ %v2_449cf, %bb253 ], [ %v3_449c4, %dec_label_pc_449c0 ]
  %v1_449d5 = add i64 %v0_449d5, 16
  %v2_449d5 = inttoptr i64 %v1_449d5 to i64*
  %v3_449d5 = load i64, i64* %v2_449d5, align 8
  store i64 %v3_449d5, i64* @rdx, align 8
  %v1_449d9 = inttoptr i64 %v3_449af to i64*
  %v2_449d9 = load i64, i64* %v1_449d9, align 8
  store i64 %v2_449d9, i64* @rax, align 8
  %v1_449e2 = add i64 %v0_449e2, 64
  %v2_449e2 = inttoptr i64 %v1_449e2 to i64*
  %v3_449e2 = load i64, i64* %v2_449e2, align 8
  store i64 %v3_449e2, i64* @rax, align 8
  %v1_449e6 = add i64 %v3_449e2, 8
  %v2_449e6 = inttoptr i64 %v1_449e6 to i32*
  %v3_449e6 = load i32, i32* %v2_449e6, align 4
  %v4_449e6 = zext i32 %v3_449e6 to i64
  store i64 %v4_449e6, i64* @rcx, align 8
  %v5_449e9 = icmp eq i32 %v3_449e6, 0
  br i1 %v5_449e9, label %bb254, label %dec_label_pc_449f1

bb254:                                            ; preds = %dec_label_pc_449d5
  %v2_449eb = call i64 @function_44c3d(i64 %v3_449af)
  store i64 %v2_449eb, i64* @rax, align 8
  br label %dec_label_pc_449f1

dec_label_pc_449f1:                               ; preds = %bb254, %dec_label_pc_449d5
  store i64 281080, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44b86() local_unnamed_addr {
dec_label_pc_44b86:
  store i64 281499, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44bd0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_44bd0:
  %v0_44bd0 = load i64, i64* @rbx, align 8
  store i64 %v0_44bd0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  ret i64 %v0_44bd0
}

define i64 @function_44be8() local_unnamed_addr {
dec_label_pc_44be8:
  %rbp.global-to-local = alloca i64, align 8
  %v0_44be8 = load i64, i64* %rbp.global-to-local, align 8
  %v1_44be8 = add i64 %v0_44be8, 16
  %v2_44be8 = inttoptr i64 %v1_44be8 to i64*
  %v3_44be8 = load i64, i64* %v2_44be8, align 8
  store i64 %v3_44be8, i64* %rbp.global-to-local, align 8
  %v0_44bec = call i64 @function_44b86()
  store i64 %v0_44bec, i64* @rax, align 8
  ret i64 %v0_44bec
}

define i64 @function_44bf0() local_unnamed_addr {
dec_label_pc_44bf0:
  %v0_44bf7 = call i64 @function_44b86()
  store i64 %v0_44bf7, i64* @rax, align 8
  ret i64 %v0_44bf7
}

define i64 @function_44c00() local_unnamed_addr {
dec_label_pc_44c00:
  store i64 281607, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44c3d(i64 %arg1) local_unnamed_addr {
dec_label_pc_44c3d:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44c46() local_unnamed_addr {
dec_label_pc_44c46:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44c52() local_unnamed_addr {
dec_label_pc_44c52:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44c5e() local_unnamed_addr {
dec_label_pc_44c5e:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable7presizeEJvii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_44c70:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_44c7f = load i64, i64* @rdx, align 8
  %v1_44c88 = trunc i64 %v0_44c7f to i32
  %v11_44c88 = icmp eq i32 %v1_44c88, 1
  %v0_44c7f.op = and i64 %v0_44c7f, 4294967295
  %v6_44c8b = select i1 %v11_44c88, i64 2, i64 %v0_44c7f.op
  store i64 %v6_44c8b, i64* @rbx, align 8
  store i64 281764, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44d98(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_44d98:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_44dd7(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_44dd7:
  %rbp.global-to-local = alloca i64, align 8
  %v0_44dd7 = load i64, i64* @rax, align 8
  %v1_44dd7 = load i64, i64* %rbp.global-to-local, align 8
  %v2_44dd7 = add i64 %v1_44dd7, 16
  %v3_44dd7 = inttoptr i64 %v2_44dd7 to i64*
  store i64 %v0_44dd7, i64* %v3_44dd7, align 8
  %v0_44ddb = load i64, i64* %rbp.global-to-local, align 8
  %v1_44ddb = add i64 %v0_44ddb, 24
  %v2_44ddb = inttoptr i64 %v1_44ddb to i32*
  store i32 0, i32* %v2_44ddb, align 4
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  %v0_44df0 = load i64, i64* @rax, align 8
  ret i64 %v0_44df0
}

define i64 @function_44df8() local_unnamed_addr {
dec_label_pc_44df8:
  store i64 4, i64* @rcx, align 8
  store i64 8, i64* @rdx, align 8
  store i64 16, i64* @rdi, align 8
  store i64 64, i64* @r11, align 8
  store i64 256, i64* @rax, align 8
  ret i64 256
}

define i64 @function_44e90(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_44e90:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg5, i64* @rdi, align 8
  %v3_44e93 = call i64 @function_44d98(i64 %arg5, i64 %arg2, i64 %arg3)
  store i64 %v3_44e93, i64* @rax, align 8
  ret i64 %v3_44e93
}

define i64 @function_44ea0() local_unnamed_addr {
dec_label_pc_44ea0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 1, i64* @rdi, align 8
  %v1_44ea5 = load i64, i64* %rsi.global-to-local, align 8
  %v2_44ea5 = load i64, i64* @rdx, align 8
  %v3_44ea5 = call i64 @function_44d98(i64 1, i64 %v1_44ea5, i64 %v2_44ea5)
  store i64 %v3_44ea5, i64* @rax, align 8
  ret i64 %v3_44ea5
}

define i64 @function_44eaa(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_44eaa:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg6, i64* @rdi, align 8
  %v3_44ead = call i64 @function_44d98(i64 %arg6, i64 %arg2, i64 %arg3)
  store i64 %v3_44ead, i64* @rax, align 8
  ret i64 %v3_44ead
}

define i64 @_ZN3org4luaj3vm28LuaTable7presizeEJvi(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_44ec0:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_44ec8 = load i64, i64* %rbp.global-to-local, align 8
  %v0_44ece = load i64, i64* @rdi, align 8
  %v1_44ece = add i64 %v0_44ece, 8
  %v2_44ece = inttoptr i64 %v1_44ece to i64*
  %v3_44ece = load i64, i64* %v2_44ece, align 8
  store i64 %v3_44ece, i64* %rbp.global-to-local, align 8
  %v0_44ed2 = load i64, i64* %rsi.global-to-local, align 8
  %v1_44ed2 = trunc i64 %v0_44ed2 to i32
  %v3_44ed2 = add i64 %v3_44ece, 8
  %v4_44ed2 = inttoptr i64 %v3_44ed2 to i32*
  %v5_44ed2 = load i32, i32* %v4_44ed2, align 4
  %v10_44ed5 = icmp sgt i32 %v1_44ed2, %v5_44ed2
  br i1 %v10_44ed5, label %dec_label_pc_44ef0, label %dec_label_pc_44ed7

dec_label_pc_44ed7:                               ; preds = %dec_label_pc_44ec0
  store i64 %v0_44ec8, i64* %rbp.global-to-local, align 8
  %v0_44ee5 = load i64, i64* @rax, align 8
  ret i64 %v0_44ee5

dec_label_pc_44ef0:                               ; preds = %dec_label_pc_44ec0
  store i64 %v0_44ece, i64* @rbx, align 8
  store i64 282362, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4506a(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4506a:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_450a8(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_450a8:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg3, i64* @rdi, align 8
  %v3_450aa = call i64 @function_4506a(i64 %arg3, i64 %arg2, i64 %arg3)
  store i64 %v3_450aa, i64* @rax, align 8
  ret i64 %v3_450aa
}

define i64 @function_450b0() local_unnamed_addr {
dec_label_pc_450b0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 1, i64* @rdi, align 8
  %v1_450b5 = load i64, i64* %rsi.global-to-local, align 8
  %v2_450b5 = load i64, i64* @rdx, align 8
  %v3_450b5 = call i64 @function_4506a(i64 1, i64 %v1_450b5, i64 %v2_450b5)
  store i64 %v3_450b5, i64* @rax, align 8
  ret i64 %v3_450b5
}

define i64 @function_450c0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_450c0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg5, i64* @rdi, align 8
  %v3_450c3 = call i64 @function_4506a(i64 %arg5, i64 %arg2, i64 %arg3)
  store i64 %v3_450c3, i64* @rax, align 8
  ret i64 %v3_450c3
}

define i64 @function_450c5(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_450c5:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg6, i64* @rdi, align 8
  %v3_450c8 = call i64 @function_4506a(i64 %arg6, i64 %arg2, i64 %arg3)
  store i64 %v3_450c8, i64* @rax, align 8
  ret i64 %v3_450c8
}

define i64 @_ZN3org4luaj3vm28LuaTable4nextEJPNS1_7VarargsEPNS1_8LuaValueE(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_450d0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_450d8 = load i64, i64* @rdi, align 8
  store i64 %v0_450d8, i64* @r13, align 8
  %v0_450dd = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_450dd, i64* @r12, align 8
  store i64 %v0_450dd, i64* @rdi, align 8
  store i64 %v0_450dd, i64* @rax, align 8
  %v1_450f8 = add i64 %v0_450d8, 8
  %v2_450f8 = inttoptr i64 %v1_450f8 to i64*
  %v3_450f8 = load i64, i64* %v2_450f8, align 8
  store i64 0, i64* @rbx, align 8
  %v1_450fe = add i64 %v3_450f8, 8
  %v2_450fe = inttoptr i64 %v1_450fe to i32*
  %v3_450fe = load i32, i32* %v2_450fe, align 4
  %v4_450fe = zext i32 %v3_450fe to i64
  store i64 %v4_450fe, i64* @rax, align 8
  %v14_45101 = icmp eq i32 %v3_450fe, 0
  br i1 %v14_45101, label %bb, label %dec_label_pc_45109

bb:                                               ; preds = %dec_label_pc_450d0
  %v6_45103 = call i64 @function_45210()
  store i64 %v6_45103, i64* @rax, align 8
  %v0_45109.pre = load i64, i64* @rbx, align 8
  %v0_4510b.pre = load i64, i64* @rbp, align 8
  %phitmp = trunc i64 %v0_45109.pre to i32
  br label %dec_label_pc_45109

dec_label_pc_45109:                               ; preds = %dec_label_pc_450d0, %bb
  %v0_4510b = phi i64 [ %v3_450f8, %dec_label_pc_450d0 ], [ %v0_4510b.pre, %bb ]
  %v2_45109 = phi i64 [ %v4_450fe, %dec_label_pc_450d0 ], [ %v6_45103, %bb ]
  %v0_45109 = phi i32 [ 0, %dec_label_pc_450d0 ], [ %phitmp, %bb ]
  %v3_45109 = trunc i64 %v2_45109 to i32
  %v9_45109 = icmp ult i32 %v0_45109, %v3_45109
  %v1_4510b = add i64 %v0_4510b, 16
  store i64 %v1_4510b, i64* @rdx, align 8
  %v1_4510f = icmp eq i1 %v9_45109, false
  br i1 %v1_4510f, label %bb250, label %dec_label_pc_45115

bb250:                                            ; preds = %dec_label_pc_45109
  %v2_4510f = call i64 @function_452d6()
  store i64 %v2_4510f, i64* @rax, align 8
  br label %dec_label_pc_45115

dec_label_pc_45115:                               ; preds = %bb250, %dec_label_pc_45109
  %v0_4511c = phi i64 [ %v2_4510f, %bb250 ], [ %v2_45109, %dec_label_pc_45109 ]
  ret i64 %v0_4511c
}

define i64 @function_451b9(i64 %arg1) local_unnamed_addr {
dec_label_pc_451b9:
  store i64 283072, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_451c2 = load i64, i64* @rbp, align 8
  store i64 %v0_451c2, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_451fc(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_451fc:
  %v0_451fc = load i64, i64* @rbx, align 8
  store i64 %v0_451fc, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg4, i64* @r13, align 8
  ret i64 %v0_451fc
}

define i64 @function_45210() local_unnamed_addr {
dec_label_pc_45210:
  %v0_45210 = load i64, i64* @rbx, align 8
  %v1_45210 = trunc i64 %v0_45210 to i32
  %v2_45210 = load i64, i64* @rax, align 8
  %v3_45210 = trunc i64 %v2_45210 to i32
  %v4_45210 = sub i32 %v1_45210, %v3_45210
  %v20_45210 = zext i32 %v4_45210 to i64
  store i64 %v20_45210, i64* @rbx, align 8
  %v0_45212 = load i64, i64* @r13, align 8
  %v1_45212 = add i64 %v0_45212, 16
  %v2_45212 = inttoptr i64 %v1_45212 to i64*
  %v3_45212 = load i64, i64* %v2_45212, align 8
  store i64 %v3_45212, i64* @rax, align 8
  %v1_45216 = add i64 %v3_45212, 8
  %v2_45216 = inttoptr i64 %v1_45216 to i32*
  %v3_45216 = load i32, i32* %v2_45216, align 4
  %v4_45216 = zext i32 %v3_45216 to i64
  store i64 %v4_45216, i64* @rcx, align 8
  %v9_45219 = icmp ult i32 %v4_45210, %v3_45216
  br i1 %v9_45219, label %dec_label_pc_45221, label %bb

bb:                                               ; preds = %dec_label_pc_45210
  %v6_4521b = call i64 @function_454bb()
  store i64 %v6_4521b, i64* @rax, align 8
  %v0_45221.pre = load i64, i64* @rcx, align 8
  %v2_45221.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_45221

dec_label_pc_45221:                               ; preds = %dec_label_pc_45210, %bb
  %v0_45223 = phi i64 [ %v3_45212, %dec_label_pc_45210 ], [ %v6_4521b, %bb ]
  %v2_45221 = phi i64 [ %v20_45210, %dec_label_pc_45210 ], [ %v2_45221.pre, %bb ]
  %v0_45221 = phi i64 [ %v4_45216, %dec_label_pc_45210 ], [ %v0_45221.pre, %bb ]
  %v1_45221 = trunc i64 %v0_45221 to i32
  %v3_45221 = trunc i64 %v2_45221 to i32
  %v1_45223 = add i64 %v0_45223, 16
  store i64 %v1_45223, i64* @rdx, align 8
  %tmp12 = icmp ugt i32 %v1_45221, %v3_45221
  br i1 %tmp12, label %dec_label_pc_4522d, label %bb10

bb10:                                             ; preds = %dec_label_pc_45221
  %v3_45227 = call i64 @function_452d6()
  store i64 %v3_45227, i64* @rax, align 8
  %v0_45234.pre = load i64, i64* @rbx, align 8
  %v0_45237.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_4522d

dec_label_pc_4522d:                               ; preds = %dec_label_pc_45221, %bb10
  %v0_45237 = phi i64 [ %v0_45237.pre, %bb10 ], [ %v1_45223, %dec_label_pc_45221 ]
  %v0_45234 = phi i64 [ %v0_45234.pre, %bb10 ], [ %v2_45221, %dec_label_pc_45221 ]
  store i64 283188, i64* @r14, align 8
  store i64 %v0_45234, i64* @rcx, align 8
  %v2_45237 = mul i64 %v0_45234, 8
  %v3_45237 = add i64 %v2_45237, %v0_45237
  %v4_45237 = inttoptr i64 %v3_45237 to i64*
  %v5_45237 = load i64, i64* %v4_45237, align 8
  store i64 %v5_45237, i64* @rbp, align 8
  %v1_4523b = icmp eq i64 %v5_45237, 0
  %v1_4523e = icmp eq i1 %v1_4523b, false
  br i1 %v1_4523e, label %bb11, label %dec_label_pc_45240

bb11:                                             ; preds = %dec_label_pc_4522d
  %v2_4523e = call i64 @function_4526b()
  store i64 %v2_4523e, i64* @rax, align 8
  br label %dec_label_pc_45240

dec_label_pc_45240:                               ; preds = %bb11, %dec_label_pc_4522d
  %v0_45240 = call i64 @function_452bc()
  store i64 %v0_45240, i64* @rax, align 8
  ret i64 %v0_45240
}

define i64 @function_45248() local_unnamed_addr {
dec_label_pc_45248:
  %rbp.global-to-local = alloca i64, align 8
  %v2_45248 = load i64, i64* %rbp.global-to-local, align 8
  store i64 5, i64* @rdx, align 8
  store i64 %v2_45248, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4526b() local_unnamed_addr {
dec_label_pc_4526b:
  %v2_4526b = load i64, i64* @rbp, align 8
  store i64 2, i64* @rdx, align 8
  store i64 %v2_4526b, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_452b8() local_unnamed_addr {
dec_label_pc_452b8:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_452bc() local_unnamed_addr {
dec_label_pc_452bc:
  %v0_452bc = load i64, i64* @rax, align 8
  %v1_452bc = add i64 %v0_452bc, 8
  %v2_452bc = inttoptr i64 %v1_452bc to i32*
  %v3_452bc = load i32, i32* %v2_452bc, align 4
  %v4_452bc = zext i32 %v3_452bc to i64
  store i64 %v4_452bc, i64* @rcx, align 8
  %v0_452bf = load i64, i64* @rbx, align 8
  %v1_452bf = trunc i64 %v0_452bf to i32
  %v2_452bf = add i32 %v1_452bf, 1
  %v17_452bf = zext i32 %v2_452bf to i64
  store i64 %v17_452bf, i64* @rbx, align 8
  %v7_452c4 = icmp ugt i32 %v3_452bc, %v2_452bf
  br i1 %v7_452c4, label %dec_label_pc_452ca, label %bb

bb:                                               ; preds = %dec_label_pc_452bc
  %v8_452c4 = call i64 @function_454bb()
  store i64 %v8_452c4, i64* @rax, align 8
  br label %dec_label_pc_452ca

dec_label_pc_452ca:                               ; preds = %dec_label_pc_452bc, %bb
  %v0_452cc = phi i64 [ %v0_452bc, %dec_label_pc_452bc ], [ %v8_452c4, %bb ]
  %v1_452cc = add i64 %v0_452cc, 16
  store i64 %v1_452cc, i64* @rdx, align 8
  ret i64 %v0_452cc
}

define i64 @function_452d6() local_unnamed_addr {
dec_label_pc_452d6:
  %r14.global-to-local = alloca i64, align 8
  %v2_452e0 = load i64, i64* @r12, align 8
  store i64 %v2_452e0, i64* @rax, align 8
  store i64 %v2_452e0, i64* @rdi, align 8
  %v4_452ed = trunc i64 %v2_452e0 to i8
  %v5_452ed = icmp eq i8 %v4_452ed, 0
  %v1_452ef = icmp eq i1 %v5_452ed, false
  br i1 %v1_452ef, label %bb, label %dec_label_pc_452f5

bb:                                               ; preds = %dec_label_pc_452d6
  %v2_452ef = call i64 @function_45432()
  store i64 %v2_452ef, i64* @rax, align 8
  br label %dec_label_pc_452f5

dec_label_pc_452f5:                               ; preds = %bb, %dec_label_pc_452d6
  %v0_452f5 = load i64, i64* @r13, align 8
  %v1_452f5 = add i64 %v0_452f5, 16
  %v2_452f5 = inttoptr i64 %v1_452f5 to i64*
  %v3_452f5 = load i64, i64* %v2_452f5, align 8
  store i64 %v3_452f5, i64* @rax, align 8
  %v1_452f9 = add i64 %v3_452f5, 8
  %v2_452f9 = inttoptr i64 %v1_452f9 to i32*
  %v3_452f9 = load i32, i32* %v2_452f9, align 4
  %v4_452f9 = zext i32 %v3_452f9 to i64
  store i64 %v4_452f9, i64* @rax, align 8
  %v5_452fc = icmp eq i32 %v3_452f9, 0
  br i1 %v5_452fc, label %bb8, label %dec_label_pc_45304

bb8:                                              ; preds = %dec_label_pc_452f5
  %v1_452fe = call i64 @function_453d0()
  store i64 %v1_452fe, i64* @rax, align 8
  %v0_45312.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_45304

dec_label_pc_45304:                               ; preds = %bb8, %dec_label_pc_452f5
  %v0_45312 = phi i64 [ %v0_45312.pre, %bb8 ], [ %v0_452f5, %dec_label_pc_452f5 ]
  %v0_45304 = phi i64 [ %v1_452fe, %bb8 ], [ %v4_452f9, %dec_label_pc_452f5 ]
  %v0_45307 = load i64, i64* @r12, align 8
  store i64 %v0_45307, i64* @rdi, align 8
  store i64 %v0_45304, i64* %r14.global-to-local, align 8
  %v1_45312 = add i64 %v0_45312, 16
  %v2_45312 = inttoptr i64 %v1_45312 to i64*
  %v3_45312 = load i64, i64* %v2_45312, align 8
  store i64 %v3_45312, i64* @rax, align 8
  %v1_45316 = trunc i64 %v0_45304 to i32
  %v3_45316 = add i64 %v3_45312, 8
  %v4_45316 = inttoptr i64 %v3_45316 to i32*
  %v5_45316 = load i32, i32* %v4_45316, align 4
  %v11_45316 = icmp ult i32 %v1_45316, %v5_45316
  %v1_4531a = add i64 %v3_45312, 16
  store i64 %v1_4531a, i64* @rdx, align 8
  %v1_4531e = icmp eq i1 %v11_45316, false
  br i1 %v1_4531e, label %bb9, label %dec_label_pc_45324

bb9:                                              ; preds = %dec_label_pc_45304
  %v2_4531e = call i64 @function_454c7()
  store i64 %v2_4531e, i64* @rax, align 8
  %v0_45324.pre = load i64, i64* %r14.global-to-local, align 8
  %v0_45330.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_45324

dec_label_pc_45324:                               ; preds = %bb9, %dec_label_pc_45304
  %v0_45330 = phi i64 [ %v0_45330.pre, %bb9 ], [ %v1_4531a, %dec_label_pc_45304 ]
  %v0_45324 = phi i64 [ %v0_45324.pre, %bb9 ], [ %v0_45304, %dec_label_pc_45304 ]
  store i64 %v0_45324, i64* @rax, align 8
  store i64 0, i64* @rbp, align 8
  store i64 283440, i64* @r15, align 8
  %v2_45330 = mul i64 %v0_45324, 8
  %v3_45330 = add i64 %v2_45330, %v0_45330
  %v4_45330 = inttoptr i64 %v3_45330 to i64*
  %v5_45330 = load i64, i64* %v4_45330, align 8
  store i64 %v5_45330, i64* @rbx, align 8
  %v1_45334 = icmp eq i64 %v5_45330, 0
  %v1_45337 = icmp eq i1 %v1_45334, false
  br i1 %v1_45337, label %bb10, label %dec_label_pc_45339

bb10:                                             ; preds = %dec_label_pc_45324
  %v2_45337 = call i64 @function_45386()
  store i64 %v2_45337, i64* @rax, align 8
  br label %dec_label_pc_45339

dec_label_pc_45339:                               ; preds = %bb10, %dec_label_pc_45324
  %v0_45339 = call i64 @function_4548b()
  store i64 %v0_45339, i64* @rax, align 8
  ret i64 %v0_45339
}

define i64 @function_45340() local_unnamed_addr {
dec_label_pc_45340:
  store i64 2, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_45386() local_unnamed_addr {
dec_label_pc_45386:
  %v2_45386 = load i64, i64* @rbx, align 8
  store i64 %v2_45386, i64* @rax, align 8
  %v0_45389 = load i64, i64* @rbp, align 8
  %v4_45389 = trunc i64 %v0_45389 to i32
  %v5_45389 = icmp eq i32 %v4_45389, 0
  store i64 %v2_45386, i64* @rdi, align 8
  %v1_4538e = icmp eq i1 %v5_45389, false
  br i1 %v1_4538e, label %bb, label %dec_label_pc_45390

bb:                                               ; preds = %dec_label_pc_45386
  %v2_4538e = call i64 @function_45340()
  store i64 %v2_4538e, i64* @rax, align 8
  br label %dec_label_pc_45390

dec_label_pc_45390:                               ; preds = %bb, %dec_label_pc_45386
  store i64 4, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_453b0(i64 %arg1) local_unnamed_addr {
dec_label_pc_453b0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_453b0 = load i64, i64* inttoptr (i64 283575 to i64*), align 8
  store i64 %v0_453b0, i64* @rax, align 8
  %v1_453ba = add i64 %v0_453b0, 16
  store i64 %v1_453ba, i64* @rdx, align 8
  %v2_453c7 = mul i64 %arg1, 8
  %v3_453c7 = add i64 %v1_453ba, %v2_453c7
  %v4_453c7 = inttoptr i64 %v3_453c7 to i64*
  %v5_453c7 = load i64, i64* %v4_453c7, align 8
  store i64 %v5_453c7, i64* @rbp, align 8
  %v1_453cb = call i64 @function_451b9(i64 %arg1)
  store i64 %v1_453cb, i64* @rax, align 8
  ret i64 %v1_453cb
}

define i64 @function_453d0() local_unnamed_addr {
dec_label_pc_453d0:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_453f9() local_unnamed_addr {
dec_label_pc_453f9:
  %v0_45404 = load i64, i64* @rax, align 8
  store i64 %v0_45404, i64* @rdi, align 8
  ret i64 %v0_45404
}

define i64 @function_4541d() local_unnamed_addr {
dec_label_pc_4541d:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v0_4541d = load i64, i64* %rbp.global-to-local, align 8
  %v4_4541d = trunc i64 %v0_4541d to i32
  %v5_4541d = icmp eq i32 %v4_4541d, 0
  br i1 %v5_4541d, label %bb, label %dec_label_pc_45421

bb:                                               ; preds = %dec_label_pc_4541d
  %v1_4541f = call i64 @function_4548b()
  store i64 %v1_4541f, i64* @rax, align 8
  br label %dec_label_pc_45421

dec_label_pc_45421:                               ; preds = %bb, %dec_label_pc_4541d
  %v0_45421 = load i64, i64* %r13.global-to-local, align 8
  %v1_45421 = add i64 %v0_45421, 8
  %v2_45421 = inttoptr i64 %v1_45421 to i64*
  %v3_45421 = load i64, i64* %v2_45421, align 8
  store i64 %v3_45421, i64* %rbp.global-to-local, align 8
  %v1_45425 = add i64 %v3_45421, 8
  %v2_45425 = inttoptr i64 %v1_45425 to i32*
  %v3_45425 = load i32, i32* %v2_45425, align 4
  %v4_45425 = zext i32 %v3_45425 to i64
  store i64 %v4_45425, i64* @rax, align 8
  %v1_45428 = load i64, i64* %r14.global-to-local, align 8
  %v3_45428 = add nuw nsw i64 %v4_45425, 1
  %v4_45428 = add i64 %v3_45428, %v1_45428
  store i64 %v4_45428, i64* @rbx, align 8
  ret i64 %v4_45425
}

define i64 @function_45432() local_unnamed_addr {
dec_label_pc_45432:
  %v2_45432 = load i64, i64* @r12, align 8
  store i64 %v2_45432, i64* @rax, align 8
  store i64 %v2_45432, i64* @rdi, align 8
  store i64 %v2_45432, i64* @rbx, align 8
  ret i64 %v2_45432
}

define i64 @function_4545b(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_4545b:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 3, i64* @rdx, align 8
  %v2_4546f = load i64, i64* @rax, align 8
  store i64 %v2_4546f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4548b() local_unnamed_addr {
dec_label_pc_4548b:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_454bb() local_unnamed_addr {
dec_label_pc_454bb:
  %v0_454bb = load i64, i64* inttoptr (i64 283842 to i64*), align 8
  store i64 %v0_454bb, i64* @rbx, align 8
  %v6_454c2 = call i64 @function_451fc(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_454c2, i64* @rax, align 8
  ret i64 %v6_454c2
}

define i64 @function_454c7() local_unnamed_addr {
dec_label_pc_454c7:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN4lang17lang_luaj$77$17$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_454e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_454e5 = load i64, i64* @rbx, align 8
  %v0_454e6 = load i64, i64* @rdi, align 8
  store i64 %v0_454e6, i64* @rbx, align 8
  %v0_454e9 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_454e9, i64* @rdi, align 8
  store i64 %v0_454e9, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_454fe = add i64 %v0_454e6, 24
  %v2_454fe = inttoptr i64 %v1_454fe to i64*
  %v3_454fe = load i64, i64* %v2_454fe, align 8
  store i64 %v3_454fe, i64* @rdi, align 8
  %v1_45502 = inttoptr i64 %v3_454fe to i64*
  %v2_45502 = load i64, i64* %v1_45502, align 8
  store i64 %v2_45502, i64* @rax, align 8
  %v1_4550b = inttoptr i64 %v2_45502 to i64*
  %v2_4550b = load i64, i64* %v1_4550b, align 8
  store i64 %v2_4550b, i64* @rdx, align 8
  store i64 %v2_45502, i64* @rdi, align 8
  %v4_45517 = trunc i64 %v2_45502 to i8
  %v5_45517 = icmp eq i8 %v4_45517, 0
  br i1 %v5_45517, label %dec_label_pc_45530, label %dec_label_pc_4551b

dec_label_pc_4551b:                               ; preds = %dec_label_pc_454e0
  %v0_4551b = load i64, i64* inttoptr (i64 283938 to i64*), align 8
  store i64 %v0_4551b, i64* @rax, align 8
  store i64 %v0_454e5, i64* @rbx, align 8
  ret i64 %v0_4551b

dec_label_pc_45530:                               ; preds = %dec_label_pc_454e0
  %v1_45530 = add i64 %v0_454e6, 32
  %v2_45530 = inttoptr i64 %v1_45530 to i64*
  %v3_45530 = load i64, i64* %v2_45530, align 8
  store i64 %v3_45530, i64* @rdi, align 8
  %v1_45534 = inttoptr i64 %v3_45530 to i64*
  %v2_45534 = load i64, i64* %v1_45534, align 8
  store i64 %v2_45534, i64* @rax, align 8
  store i64 %v2_45534, i64* @rbp, align 8
  %v1_45540 = inttoptr i64 %v2_45534 to i64*
  %v2_45540 = load i64, i64* %v1_45540, align 8
  store i64 %v2_45540, i64* @rax, align 8
  %v1_45543 = add i64 %v0_454e6, 40
  %v2_45543 = inttoptr i64 %v1_45543 to i64*
  %v3_45543 = load i64, i64* %v2_45543, align 8
  store i64 %v3_45543, i64* %rsi.global-to-local, align 8
  store i64 %v2_45534, i64* @rdi, align 8
  %v4_45550 = trunc i64 %v2_45540 to i8
  %v5_45550 = icmp eq i8 %v4_45550, 0
  br i1 %v5_45550, label %bb, label %dec_label_pc_45558

bb:                                               ; preds = %dec_label_pc_45530
  %v1_45552 = call i64 @function_45720()
  store i64 %v1_45552, i64* @rax, align 8
  %v0_45558.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_45558

dec_label_pc_45558:                               ; preds = %bb, %dec_label_pc_45530
  %v0_45558 = phi i64 [ %v0_45558.pre, %bb ], [ %v0_454e6, %dec_label_pc_45530 ]
  %v1_45558 = add i64 %v0_45558, 56
  %v2_45558 = inttoptr i64 %v1_45558 to i64*
  %v3_45558 = load i64, i64* %v2_45558, align 8
  store i64 %v3_45558, i64* @rdi, align 8
  %v1_4555c = inttoptr i64 %v3_45558 to i64*
  %v2_4555c = load i64, i64* %v1_4555c, align 8
  store i64 %v2_4555c, i64* @rax, align 8
  store i64 %v2_4555c, i64* @rbp, align 8
  %v1_45568 = inttoptr i64 %v2_4555c to i64*
  %v2_45568 = load i64, i64* %v1_45568, align 8
  store i64 %v2_45568, i64* @rax, align 8
  %v0_4556b = load i64, i64* inttoptr (i64 284018 to i64*), align 8
  store i64 %v0_4556b, i64* %rsi.global-to-local, align 8
  store i64 %v2_4555c, i64* @rdi, align 8
  %v4_4557b = trunc i64 %v2_45568 to i8
  %v5_4557b = icmp eq i8 %v4_4557b, 0
  %v1_4557d = icmp eq i1 %v5_4557b, false
  br i1 %v1_4557d, label %bb258, label %dec_label_pc_45583

bb258:                                            ; preds = %dec_label_pc_45558
  %v2_4557d = call i64 @function_456d8()
  store i64 %v2_4557d, i64* @rax, align 8
  %v0_45583.pre = load i64, i64* @rbx, align 8
  %v0_45587.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_45583

dec_label_pc_45583:                               ; preds = %bb258, %dec_label_pc_45558
  %v0_45587 = phi i64 [ %v0_45587.pre, %bb258 ], [ %v2_4555c, %dec_label_pc_45558 ]
  %v0_45583 = phi i64 [ %v0_45583.pre, %bb258 ], [ %v0_45558, %dec_label_pc_45558 ]
  %v1_45583 = add i64 %v0_45583, 72
  %v2_45583 = inttoptr i64 %v1_45583 to i64*
  %v3_45583 = load i64, i64* %v2_45583, align 8
  store i64 %v3_45583, i64* @rdi, align 8
  store i64 %v0_45587, i64* %rsi.global-to-local, align 8
  %v1_4558a = inttoptr i64 %v3_45583 to i64*
  %v2_4558a = load i64, i64* %v1_4558a, align 8
  store i64 %v2_4558a, i64* @rax, align 8
  %v1_45593 = inttoptr i64 %v2_4558a to i64*
  %v2_45593 = load i64, i64* %v1_45593, align 8
  store i64 %v2_45593, i64* @rdx, align 8
  store i64 %v2_4558a, i64* @rdi, align 8
  %v4_4559f = trunc i64 %v2_4558a to i8
  %v5_4559f = icmp eq i8 %v4_4559f, 0
  br i1 %v5_4559f, label %bb259, label %dec_label_pc_455a7

bb259:                                            ; preds = %dec_label_pc_45583
  %v1_455a1 = call i64 @function_45738()
  store i64 %v1_455a1, i64* @rax, align 8
  %v0_455a7.pre = load i64, i64* @rbx, align 8
  %v0_455ab.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_455a7

dec_label_pc_455a7:                               ; preds = %bb259, %dec_label_pc_45583
  %v0_455ab = phi i64 [ %v0_455ab.pre, %bb259 ], [ %v0_45587, %dec_label_pc_45583 ]
  %v0_455b7 = phi i64 [ %v0_455a7.pre, %bb259 ], [ %v0_45583, %dec_label_pc_45583 ]
  %v1_455a7 = add i64 %v0_455b7, 80
  %v2_455a7 = inttoptr i64 %v1_455a7 to i64*
  %v3_455a7 = load i64, i64* %v2_455a7, align 8
  store i64 %v3_455a7, i64* @rdi, align 8
  store i64 %v0_455ab, i64* %rsi.global-to-local, align 8
  %v1_455ae = inttoptr i64 %v3_455a7 to i64*
  %v2_455ae = load i64, i64* %v1_455ae, align 8
  store i64 %v2_455ae, i64* @rax, align 8
  %v1_455b7 = add i64 %v0_455b7, 72
  %v2_455b7 = inttoptr i64 %v1_455b7 to i64*
  %v3_455b7 = load i64, i64* %v2_455b7, align 8
  store i64 %v3_455b7, i64* @rdi, align 8
  store i64 %v2_455ae, i64* %rsi.global-to-local, align 8
  %v1_455c1 = inttoptr i64 %v3_455b7 to i64*
  %v2_455c1 = load i64, i64* %v1_455c1, align 8
  store i64 %v2_455c1, i64* @rax, align 8
  %v1_455ca = inttoptr i64 %v2_455c1 to i64*
  %v2_455ca = load i64, i64* %v1_455ca, align 8
  store i64 %v2_455ca, i64* @rdx, align 8
  store i64 %v2_455c1, i64* @rdi, align 8
  %v4_455d6 = trunc i64 %v2_455c1 to i8
  %v5_455d6 = icmp eq i8 %v4_455d6, 0
  br i1 %v5_455d6, label %bb260, label %dec_label_pc_455de

bb260:                                            ; preds = %dec_label_pc_455a7
  %v1_455d8 = call i64 @function_456d8()
  store i64 %v1_455d8, i64* @rax, align 8
  %v0_455de.pre = load i64, i64* @rbx, align 8
  %v0_455e6.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_455de

dec_label_pc_455de:                               ; preds = %bb260, %dec_label_pc_455a7
  %v0_455e6 = phi i64 [ %v0_455e6.pre, %bb260 ], [ %v2_455ae, %dec_label_pc_455a7 ]
  %v0_455de = phi i64 [ %v0_455de.pre, %bb260 ], [ %v0_455b7, %dec_label_pc_455a7 ]
  %v1_455de = add i64 %v0_455de, 80
  %v2_455de = inttoptr i64 %v1_455de to i64*
  %v3_455de = load i64, i64* %v2_455de, align 8
  store i64 %v3_455de, i64* @rdi, align 8
  %v1_455e2 = add i64 %v0_455de, 88
  %v2_455e2 = inttoptr i64 %v1_455e2 to i64*
  %v3_455e2 = load i64, i64* %v2_455e2, align 8
  store i64 %v0_455e6, i64* %rsi.global-to-local, align 8
  %v1_455e9 = inttoptr i64 %v3_455de to i64*
  %v2_455e9 = load i64, i64* %v1_455e9, align 8
  store i64 %v2_455e9, i64* @rax, align 8
  %v1_455f2 = inttoptr i64 %v2_455e9 to i64*
  %v2_455f2 = load i64, i64* %v1_455f2, align 8
  store i64 %v2_455f2, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_455e9, i64* @rdi, align 8
  %v1_45603 = inttoptr i64 %v3_455e2 to i64*
  %v2_45603 = load i64, i64* %v1_45603, align 8
  store i64 %v2_45603, i64* @rdx, align 8
  store i64 %v2_455e9, i64* %rsi.global-to-local, align 8
  store i64 %v3_455e2, i64* @rdi, align 8
  %v2_45613 = load i64, i64* %v1_455f2, align 8
  store i64 %v2_45613, i64* @rdx, align 8
  store i64 %v2_455e9, i64* @rdi, align 8
  %v2_4561c = load i64, i64* %v1_455f2, align 8
  store i64 %v2_4561c, i64* @rdx, align 8
  store i64 %v2_455e9, i64* @rdi, align 8
  %v4_45628 = trunc i64 %v2_455e9 to i8
  %v5_45628 = icmp eq i8 %v4_45628, 0
  br i1 %v5_45628, label %bb261, label %dec_label_pc_45630

bb261:                                            ; preds = %dec_label_pc_455de
  %v1_4562a = call i64 @function_456d8()
  store i64 %v1_4562a, i64* @rax, align 8
  %v0_45630.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_45630

dec_label_pc_45630:                               ; preds = %bb261, %dec_label_pc_455de
  %v0_45644 = phi i64 [ %v0_45630.pre, %bb261 ], [ %v0_455de, %dec_label_pc_455de ]
  %v1_45630 = add i64 %v0_45644, 104
  %v2_45630 = inttoptr i64 %v1_45630 to i64*
  %v3_45630 = load i64, i64* %v2_45630, align 8
  store i64 %v3_45630, i64* @rdi, align 8
  %v0_45634 = load i64, i64* @rbp, align 8
  store i64 %v0_45634, i64* %rsi.global-to-local, align 8
  %v1_4563b = inttoptr i64 %v3_45630 to i64*
  %v2_4563b = load i64, i64* %v1_4563b, align 8
  store i64 %v2_4563b, i64* @rax, align 8
  %v3_45644 = load i64, i64* %v2_45630, align 8
  store i64 %v3_45644, i64* @rdi, align 8
  store i64 284254, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_456d8() local_unnamed_addr {
dec_label_pc_456d8:
  %v0_456d8 = load i64, i64* @rbx, align 8
  %v1_456d8 = add i64 %v0_456d8, 64
  %v2_456d8 = inttoptr i64 %v1_456d8 to i64*
  %v3_456d8 = load i64, i64* %v2_456d8, align 8
  store i64 %v3_456d8, i64* @r12, align 8
  %v0_456dc = load i64, i64* inttoptr (i64 284387 to i64*), align 8
  store i64 %v0_456dc, i64* @rbp, align 8
  store i64 284394, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_456ec(i64 %arg1) local_unnamed_addr {
dec_label_pc_456ec:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_45720() local_unnamed_addr {
dec_label_pc_45720:
  %v0_45720 = load i64, i64* @rbx, align 8
  %v1_45720 = add i64 %v0_45720, 48
  %v2_45720 = inttoptr i64 %v1_45720 to i64*
  %v3_45720 = load i64, i64* %v2_45720, align 8
  store i64 %v3_45720, i64* @rdi, align 8
  %v1_45727 = inttoptr i64 %v3_45720 to i64*
  %v2_45727 = load i64, i64* %v1_45727, align 8
  store i64 %v2_45727, i64* @rax, align 8
  ret i64 %v2_45727
}

define i64 @function_45738() local_unnamed_addr {
dec_label_pc_45738:
  %v0_4573c = load i64, i64* inttoptr (i64 284483 to i64*), align 8
  store i64 %v0_4573c, i64* @rbp, align 8
  store i64 284490, i64* @rdi, align 8
  %v1_4574a = call i64 @function_456ec(i64 284490)
  store i64 %v1_4574a, i64* @rax, align 8
  ret i64 %v1_4574a
}

define i64 @function_4574c(i64 %arg1) local_unnamed_addr {
dec_label_pc_4574c:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$76$12$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_45760:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_45765 = load i64, i64* @rbx, align 8
  %v0_45766 = load i64, i64* @rdi, align 8
  store i64 %v0_45766, i64* @rbx, align 8
  %v0_45769 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_45769, i64* @rdi, align 8
  store i64 %v0_45769, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_4577e = add i64 %v0_45766, 24
  %v2_4577e = inttoptr i64 %v1_4577e to i64*
  %v3_4577e = load i64, i64* %v2_4577e, align 8
  store i64 %v3_4577e, i64* @rdi, align 8
  %v1_45782 = inttoptr i64 %v3_4577e to i64*
  %v2_45782 = load i64, i64* %v1_45782, align 8
  store i64 %v2_45782, i64* @rax, align 8
  %v1_4578b = inttoptr i64 %v2_45782 to i64*
  %v2_4578b = load i64, i64* %v1_4578b, align 8
  store i64 %v2_4578b, i64* @rdx, align 8
  store i64 %v2_45782, i64* @rdi, align 8
  %v4_45797 = trunc i64 %v2_45782 to i8
  %v5_45797 = icmp eq i8 %v4_45797, 0
  br i1 %v5_45797, label %dec_label_pc_457b0, label %dec_label_pc_4579b

dec_label_pc_4579b:                               ; preds = %dec_label_pc_45760
  %v0_4579b = load i64, i64* inttoptr (i64 284578 to i64*), align 8
  store i64 %v0_4579b, i64* @rax, align 8
  store i64 %v0_45765, i64* @rbx, align 8
  ret i64 %v0_4579b

dec_label_pc_457b0:                               ; preds = %dec_label_pc_45760
  %v1_457b0 = add i64 %v0_45766, 32
  %v2_457b0 = inttoptr i64 %v1_457b0 to i64*
  %v3_457b0 = load i64, i64* %v2_457b0, align 8
  store i64 %v3_457b0, i64* @rdi, align 8
  %v1_457b4 = inttoptr i64 %v3_457b0 to i64*
  %v2_457b4 = load i64, i64* %v1_457b4, align 8
  store i64 %v2_457b4, i64* @rax, align 8
  store i64 %v2_457b4, i64* @rbp, align 8
  %v1_457c0 = inttoptr i64 %v2_457b4 to i64*
  %v2_457c0 = load i64, i64* %v1_457c0, align 8
  store i64 %v2_457c0, i64* @rax, align 8
  %v1_457c3 = add i64 %v0_45766, 40
  %v2_457c3 = inttoptr i64 %v1_457c3 to i64*
  %v3_457c3 = load i64, i64* %v2_457c3, align 8
  store i64 %v3_457c3, i64* %rsi.global-to-local, align 8
  store i64 %v2_457b4, i64* @rdi, align 8
  %v4_457d0 = trunc i64 %v2_457c0 to i8
  %v5_457d0 = icmp eq i8 %v4_457d0, 0
  br i1 %v5_457d0, label %bb, label %dec_label_pc_457d8

bb:                                               ; preds = %dec_label_pc_457b0
  %v1_457d2 = call i64 @function_459a0()
  store i64 %v1_457d2, i64* @rax, align 8
  %v0_457d8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_457d8

dec_label_pc_457d8:                               ; preds = %bb, %dec_label_pc_457b0
  %v0_457d8 = phi i64 [ %v0_457d8.pre, %bb ], [ %v0_45766, %dec_label_pc_457b0 ]
  %v1_457d8 = add i64 %v0_457d8, 56
  %v2_457d8 = inttoptr i64 %v1_457d8 to i64*
  %v3_457d8 = load i64, i64* %v2_457d8, align 8
  store i64 %v3_457d8, i64* @rdi, align 8
  %v1_457dc = inttoptr i64 %v3_457d8 to i64*
  %v2_457dc = load i64, i64* %v1_457dc, align 8
  store i64 %v2_457dc, i64* @rax, align 8
  store i64 %v2_457dc, i64* @rbp, align 8
  %v1_457e8 = inttoptr i64 %v2_457dc to i64*
  %v2_457e8 = load i64, i64* %v1_457e8, align 8
  store i64 %v2_457e8, i64* @rax, align 8
  %v0_457eb = load i64, i64* inttoptr (i64 284658 to i64*), align 8
  store i64 %v0_457eb, i64* %rsi.global-to-local, align 8
  store i64 %v2_457dc, i64* @rdi, align 8
  %v4_457fb = trunc i64 %v2_457e8 to i8
  %v5_457fb = icmp eq i8 %v4_457fb, 0
  %v1_457fd = icmp eq i1 %v5_457fb, false
  br i1 %v1_457fd, label %bb258, label %dec_label_pc_45803

bb258:                                            ; preds = %dec_label_pc_457d8
  %v2_457fd = call i64 @function_45958()
  store i64 %v2_457fd, i64* @rax, align 8
  %v0_45803.pre = load i64, i64* @rbx, align 8
  %v0_45807.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_45803

dec_label_pc_45803:                               ; preds = %bb258, %dec_label_pc_457d8
  %v0_45807 = phi i64 [ %v0_45807.pre, %bb258 ], [ %v2_457dc, %dec_label_pc_457d8 ]
  %v0_45803 = phi i64 [ %v0_45803.pre, %bb258 ], [ %v0_457d8, %dec_label_pc_457d8 ]
  %v1_45803 = add i64 %v0_45803, 72
  %v2_45803 = inttoptr i64 %v1_45803 to i64*
  %v3_45803 = load i64, i64* %v2_45803, align 8
  store i64 %v3_45803, i64* @rdi, align 8
  store i64 %v0_45807, i64* %rsi.global-to-local, align 8
  %v1_4580a = inttoptr i64 %v3_45803 to i64*
  %v2_4580a = load i64, i64* %v1_4580a, align 8
  store i64 %v2_4580a, i64* @rax, align 8
  %v1_45813 = inttoptr i64 %v2_4580a to i64*
  %v2_45813 = load i64, i64* %v1_45813, align 8
  store i64 %v2_45813, i64* @rdx, align 8
  store i64 %v2_4580a, i64* @rdi, align 8
  %v4_4581f = trunc i64 %v2_4580a to i8
  %v5_4581f = icmp eq i8 %v4_4581f, 0
  br i1 %v5_4581f, label %bb259, label %dec_label_pc_45827

bb259:                                            ; preds = %dec_label_pc_45803
  %v1_45821 = call i64 @function_459b8()
  store i64 %v1_45821, i64* @rax, align 8
  %v0_45827.pre = load i64, i64* @rbx, align 8
  %v0_4582b.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_45827

dec_label_pc_45827:                               ; preds = %bb259, %dec_label_pc_45803
  %v0_4582b = phi i64 [ %v0_4582b.pre, %bb259 ], [ %v0_45807, %dec_label_pc_45803 ]
  %v0_45837 = phi i64 [ %v0_45827.pre, %bb259 ], [ %v0_45803, %dec_label_pc_45803 ]
  %v1_45827 = add i64 %v0_45837, 80
  %v2_45827 = inttoptr i64 %v1_45827 to i64*
  %v3_45827 = load i64, i64* %v2_45827, align 8
  store i64 %v3_45827, i64* @rdi, align 8
  store i64 %v0_4582b, i64* %rsi.global-to-local, align 8
  %v1_4582e = inttoptr i64 %v3_45827 to i64*
  %v2_4582e = load i64, i64* %v1_4582e, align 8
  store i64 %v2_4582e, i64* @rax, align 8
  %v1_45837 = add i64 %v0_45837, 72
  %v2_45837 = inttoptr i64 %v1_45837 to i64*
  %v3_45837 = load i64, i64* %v2_45837, align 8
  store i64 %v3_45837, i64* @rdi, align 8
  store i64 %v2_4582e, i64* %rsi.global-to-local, align 8
  %v1_45841 = inttoptr i64 %v3_45837 to i64*
  %v2_45841 = load i64, i64* %v1_45841, align 8
  store i64 %v2_45841, i64* @rax, align 8
  %v1_4584a = inttoptr i64 %v2_45841 to i64*
  %v2_4584a = load i64, i64* %v1_4584a, align 8
  store i64 %v2_4584a, i64* @rdx, align 8
  store i64 %v2_45841, i64* @rdi, align 8
  %v4_45856 = trunc i64 %v2_45841 to i8
  %v5_45856 = icmp eq i8 %v4_45856, 0
  br i1 %v5_45856, label %bb260, label %dec_label_pc_4585e

bb260:                                            ; preds = %dec_label_pc_45827
  %v1_45858 = call i64 @function_45958()
  store i64 %v1_45858, i64* @rax, align 8
  %v0_4585e.pre = load i64, i64* @rbx, align 8
  %v0_45866.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_4585e

dec_label_pc_4585e:                               ; preds = %bb260, %dec_label_pc_45827
  %v0_45866 = phi i64 [ %v0_45866.pre, %bb260 ], [ %v2_4582e, %dec_label_pc_45827 ]
  %v0_4585e = phi i64 [ %v0_4585e.pre, %bb260 ], [ %v0_45837, %dec_label_pc_45827 ]
  %v1_4585e = add i64 %v0_4585e, 80
  %v2_4585e = inttoptr i64 %v1_4585e to i64*
  %v3_4585e = load i64, i64* %v2_4585e, align 8
  store i64 %v3_4585e, i64* @rdi, align 8
  %v1_45862 = add i64 %v0_4585e, 88
  %v2_45862 = inttoptr i64 %v1_45862 to i64*
  %v3_45862 = load i64, i64* %v2_45862, align 8
  store i64 %v0_45866, i64* %rsi.global-to-local, align 8
  %v1_45869 = inttoptr i64 %v3_4585e to i64*
  %v2_45869 = load i64, i64* %v1_45869, align 8
  store i64 %v2_45869, i64* @rax, align 8
  %v1_45872 = inttoptr i64 %v2_45869 to i64*
  %v2_45872 = load i64, i64* %v1_45872, align 8
  store i64 %v2_45872, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_45869, i64* @rdi, align 8
  %v1_45883 = inttoptr i64 %v3_45862 to i64*
  %v2_45883 = load i64, i64* %v1_45883, align 8
  store i64 %v2_45883, i64* @rdx, align 8
  store i64 %v2_45869, i64* %rsi.global-to-local, align 8
  store i64 %v3_45862, i64* @rdi, align 8
  %v2_45893 = load i64, i64* %v1_45872, align 8
  store i64 %v2_45893, i64* @rdx, align 8
  store i64 %v2_45869, i64* @rdi, align 8
  %v2_4589c = load i64, i64* %v1_45872, align 8
  store i64 %v2_4589c, i64* @rdx, align 8
  store i64 %v2_45869, i64* @rdi, align 8
  %v4_458a8 = trunc i64 %v2_45869 to i8
  %v5_458a8 = icmp eq i8 %v4_458a8, 0
  br i1 %v5_458a8, label %bb261, label %dec_label_pc_458b0

bb261:                                            ; preds = %dec_label_pc_4585e
  %v1_458aa = call i64 @function_45958()
  store i64 %v1_458aa, i64* @rax, align 8
  %v0_458b0.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_458b0

dec_label_pc_458b0:                               ; preds = %bb261, %dec_label_pc_4585e
  %v0_458c4 = phi i64 [ %v0_458b0.pre, %bb261 ], [ %v0_4585e, %dec_label_pc_4585e ]
  %v1_458b0 = add i64 %v0_458c4, 104
  %v2_458b0 = inttoptr i64 %v1_458b0 to i64*
  %v3_458b0 = load i64, i64* %v2_458b0, align 8
  store i64 %v3_458b0, i64* @rdi, align 8
  %v0_458b4 = load i64, i64* @rbp, align 8
  store i64 %v0_458b4, i64* %rsi.global-to-local, align 8
  %v1_458bb = inttoptr i64 %v3_458b0 to i64*
  %v2_458bb = load i64, i64* %v1_458bb, align 8
  store i64 %v2_458bb, i64* @rax, align 8
  %v3_458c4 = load i64, i64* %v2_458b0, align 8
  store i64 %v3_458c4, i64* @rdi, align 8
  store i64 284894, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_45958() local_unnamed_addr {
dec_label_pc_45958:
  %v0_45958 = load i64, i64* @rbx, align 8
  %v1_45958 = add i64 %v0_45958, 64
  %v2_45958 = inttoptr i64 %v1_45958 to i64*
  %v3_45958 = load i64, i64* %v2_45958, align 8
  store i64 %v3_45958, i64* @r12, align 8
  %v0_4595c = load i64, i64* inttoptr (i64 285027 to i64*), align 8
  store i64 %v0_4595c, i64* @rbp, align 8
  store i64 285034, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4596c(i64 %arg1) local_unnamed_addr {
dec_label_pc_4596c:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_459a0() local_unnamed_addr {
dec_label_pc_459a0:
  %v0_459a0 = load i64, i64* @rbx, align 8
  %v1_459a0 = add i64 %v0_459a0, 48
  %v2_459a0 = inttoptr i64 %v1_459a0 to i64*
  %v3_459a0 = load i64, i64* %v2_459a0, align 8
  store i64 %v3_459a0, i64* @rdi, align 8
  %v1_459a7 = inttoptr i64 %v3_459a0 to i64*
  %v2_459a7 = load i64, i64* %v1_459a7, align 8
  store i64 %v2_459a7, i64* @rax, align 8
  ret i64 %v2_459a7
}

define i64 @function_459b8() local_unnamed_addr {
dec_label_pc_459b8:
  %v0_459bc = load i64, i64* inttoptr (i64 285123 to i64*), align 8
  store i64 %v0_459bc, i64* @rbp, align 8
  store i64 285130, i64* @rdi, align 8
  %v1_459ca = call i64 @function_4596c(i64 285130)
  store i64 %v1_459ca, i64* @rax, align 8
  ret i64 %v1_459ca
}

define i64 @function_459cc(i64 %arg1) local_unnamed_addr {
dec_label_pc_459cc:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$698onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_459e0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_459ea = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_459ea, i64* @rbx, align 8
  %v0_459ed = load i64, i64* @rdi, align 8
  store i64 %v0_459ed, i64* @rbp, align 8
  store i64 4, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_459ea, i64* @rdi, align 8
  %v8_45a39 = call i64 @function_45be7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_45a39, i64* @rax, align 8
  %v0_45a3f = load i64, i64* @rbp, align 8
  %v1_45a3f = add i64 %v0_45a3f, 32
  %v2_45a3f = inttoptr i64 %v1_45a3f to i64*
  %v3_45a3f = load i64, i64* %v2_45a3f, align 8
  store i64 %v3_45a3f, i64* @rax, align 8
  %v1_45a43 = add i64 %v3_45a3f, 8
  %v2_45a43 = inttoptr i64 %v1_45a43 to i32*
  %v3_45a43 = load i32, i32* %v2_45a43, align 4
  %v4_45a43 = zext i32 %v3_45a43 to i64
  store i64 %v4_45a43, i64* @rdi, align 8
  %v7_45a46 = icmp eq i32 %v3_45a43, 0
  br i1 %v7_45a46, label %bb, label %dec_label_pc_45a4e

bb:                                               ; preds = %dec_label_pc_459e0
  %v3_45a48 = call i64 @function_45f2a(i64 0)
  store i64 %v3_45a48, i64* @rax, align 8
  %v0_45a61.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_45a4e

dec_label_pc_45a4e:                               ; preds = %bb, %dec_label_pc_459e0
  %v0_45a61 = phi i64 [ %v0_45a61.pre, %bb ], [ %v0_45a3f, %dec_label_pc_459e0 ]
  %v0_45a4e = phi i64 [ %v3_45a48, %bb ], [ %v3_45a3f, %dec_label_pc_459e0 ]
  %v1_45a4e = add i64 %v0_45a4e, 16
  %v2_45a4e = inttoptr i64 %v1_45a4e to i64*
  %v3_45a4e = load i64, i64* %v2_45a4e, align 8
  store i64 %v3_45a4e, i64* @rdi, align 8
  %v0_45a52 = load i64, i64* @r12, align 8
  store i64 %v0_45a52, i64* %rsi.global-to-local, align 8
  %v1_45a55 = inttoptr i64 %v3_45a4e to i64*
  %v2_45a55 = load i64, i64* %v1_45a55, align 8
  store i64 %v2_45a55, i64* @rax, align 8
  store i64 %v2_45a55, i64* @r14, align 8
  %v1_45a61 = add i64 %v0_45a61, 32
  %v2_45a61 = inttoptr i64 %v1_45a61 to i64*
  %v3_45a61 = load i64, i64* %v2_45a61, align 8
  store i64 %v3_45a61, i64* @rax, align 8
  %v1_45a65 = add i64 %v3_45a61, 8
  %v2_45a65 = inttoptr i64 %v1_45a65 to i32*
  %v3_45a65 = load i32, i32* %v2_45a65, align 4
  %v4_45a65 = zext i32 %v3_45a65 to i64
  store i64 %v4_45a65, i64* %rsi.global-to-local, align 8
  %v5_45a68 = icmp eq i32 %v3_45a65, 0
  br i1 %v5_45a68, label %bb254, label %dec_label_pc_45a70

bb254:                                            ; preds = %dec_label_pc_45a4e
  %v2_45a6a = call i64 @function_45f2a(i64 %v3_45a4e)
  store i64 %v2_45a6a, i64* @rax, align 8
  %v0_45a80.pre = load i64, i64* @rbp, align 8
  %v0_45a87.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_45a70

dec_label_pc_45a70:                               ; preds = %bb254, %dec_label_pc_45a4e
  %v0_45a87 = phi i64 [ %v0_45a87.pre, %bb254 ], [ %v2_45a55, %dec_label_pc_45a4e ]
  %v0_45a80 = phi i64 [ %v0_45a80.pre, %bb254 ], [ %v0_45a61, %dec_label_pc_45a4e ]
  %v0_45a70 = phi i64 [ %v2_45a6a, %bb254 ], [ %v3_45a61, %dec_label_pc_45a4e ]
  %v1_45a70 = add i64 %v0_45a70, 16
  %v2_45a70 = inttoptr i64 %v1_45a70 to i64*
  %v3_45a70 = load i64, i64* %v2_45a70, align 8
  store i64 %v3_45a70, i64* @rdi, align 8
  %v0_45a74 = load i64, i64* @r13, align 8
  store i64 %v0_45a74, i64* %rsi.global-to-local, align 8
  %v1_45a77 = inttoptr i64 %v3_45a70 to i64*
  %v2_45a77 = load i64, i64* %v1_45a77, align 8
  store i64 %v2_45a77, i64* @rax, align 8
  %v1_45a80 = add i64 %v0_45a80, 40
  %v2_45a80 = inttoptr i64 %v1_45a80 to i64*
  %v3_45a80 = load i64, i64* %v2_45a80, align 8
  store i64 %v3_45a80, i64* @rdi, align 8
  store i64 %v2_45a77, i64* @r13, align 8
  store i64 %v0_45a87, i64* %rsi.global-to-local, align 8
  %v1_45a8a = inttoptr i64 %v3_45a80 to i64*
  %v2_45a8a = load i64, i64* %v1_45a8a, align 8
  store i64 %v2_45a8a, i64* @rax, align 8
  %v1_45a93 = inttoptr i64 %v2_45a8a to i64*
  %v2_45a93 = load i64, i64* %v1_45a93, align 8
  store i64 %v2_45a93, i64* @rdx, align 8
  store i64 %v2_45a8a, i64* @rdi, align 8
  %v4_45a9f = trunc i64 %v2_45a8a to i8
  %v5_45a9f = icmp eq i8 %v4_45a9f, 0
  br i1 %v5_45a9f, label %bb255, label %dec_label_pc_45aa7

bb255:                                            ; preds = %dec_label_pc_45a70
  %v1_45aa1 = call i64 @function_45bb0()
  store i64 %v1_45aa1, i64* @rax, align 8
  %v0_45aa7.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_45aa7

dec_label_pc_45aa7:                               ; preds = %bb255, %dec_label_pc_45a70
  %v0_45aa7 = phi i64 [ %v0_45aa7.pre, %bb255 ], [ %v0_45a80, %dec_label_pc_45a70 ]
  %v1_45aa7 = add i64 %v0_45aa7, 56
  %v2_45aa7 = inttoptr i64 %v1_45aa7 to i64*
  %v3_45aa7 = load i64, i64* %v2_45aa7, align 8
  store i64 %v3_45aa7, i64* @rax, align 8
  %v1_45aaf = add i64 %v3_45aa7, 8
  %v2_45aaf = inttoptr i64 %v1_45aaf to i32*
  %v3_45aaf = load i32, i32* %v2_45aaf, align 4
  %v4_45aaf = zext i32 %v3_45aaf to i64
  store i64 %v4_45aaf, i64* @rdx, align 8
  %v5_45ab2 = icmp eq i32 %v3_45aaf, 0
  br i1 %v5_45ab2, label %bb256, label %dec_label_pc_45aba

bb256:                                            ; preds = %dec_label_pc_45aa7
  %v2_45ab4 = call i64 @function_45f2a(i64 %v2_45a8a)
  store i64 %v2_45ab4, i64* @rax, align 8
  br label %dec_label_pc_45aba

dec_label_pc_45aba:                               ; preds = %bb256, %dec_label_pc_45aa7
  store i64 285395, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_45b80() local_unnamed_addr {
dec_label_pc_45b80:
  store i64 285575, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_45bb0() local_unnamed_addr {
dec_label_pc_45bb0:
  %v0_45bb0 = load i64, i64* @rbp, align 8
  %v1_45bb0 = add i64 %v0_45bb0, 40
  %v2_45bb0 = inttoptr i64 %v1_45bb0 to i64*
  %v3_45bb0 = load i64, i64* %v2_45bb0, align 8
  store i64 %v3_45bb0, i64* @rdi, align 8
  %v1_45bb7 = inttoptr i64 %v3_45bb0 to i64*
  %v2_45bb7 = load i64, i64* %v1_45bb7, align 8
  store i64 %v2_45bb7, i64* @rax, align 8
  %v1_45bc0 = inttoptr i64 %v2_45bb7 to i64*
  %v2_45bc0 = load i64, i64* %v1_45bc0, align 8
  store i64 %v2_45bc0, i64* @rdx, align 8
  %v2_45bd4 = load i64, i64* @r14, align 8
  store i64 %v2_45bd4, i64* @rax, align 8
  store i64 %v2_45bd4, i64* @rdi, align 8
  ret i64 %v2_45bd4
}

define i64 @function_45be7(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_45be7:
  %v0_45be7 = load i64, i64* @rbp, align 8
  %v1_45be7 = add i64 %v0_45be7, 24
  %v2_45be7 = inttoptr i64 %v1_45be7 to i64*
  %v3_45be7 = load i64, i64* %v2_45be7, align 8
  store i64 %v3_45be7, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg4, i64* @r13, align 8
  ret i64 %v3_45be7
}

define i64 @function_45c00() local_unnamed_addr {
dec_label_pc_45c00:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_45e70() local_unnamed_addr {
dec_label_pc_45e70:
  %v0_45e70 = load i64, i64* @rbp, align 8
  %v1_45e70 = add i64 %v0_45e70, 136
  %v2_45e70 = inttoptr i64 %v1_45e70 to i64*
  %v3_45e70 = load i64, i64* %v2_45e70, align 8
  store i64 %v3_45e70, i64* @rdi, align 8
  %v1_45e7a = inttoptr i64 %v3_45e70 to i64*
  %v2_45e7a = load i64, i64* %v1_45e7a, align 8
  store i64 %v2_45e7a, i64* @rax, align 8
  %v1_45e83 = inttoptr i64 %v2_45e7a to i64*
  %v2_45e83 = load i64, i64* %v1_45e83, align 8
  store i64 %v2_45e83, i64* @rdx, align 8
  store i64 %v2_45e7a, i64* @rdi, align 8
  %v4_45e8f = trunc i64 %v2_45e7a to i8
  %v5_45e8f = icmp eq i8 %v4_45e8f, 0
  br i1 %v5_45e8f, label %dec_label_pc_45ecd, label %dec_label_pc_45e93

dec_label_pc_45e93:                               ; preds = %dec_label_pc_45e70
  %v3_45e93 = load i64, i64* %v2_45e70, align 8
  store i64 %v3_45e93, i64* @rdi, align 8
  %v1_45e9d = inttoptr i64 %v3_45e93 to i64*
  %v2_45e9d = load i64, i64* %v1_45e9d, align 8
  store i64 %v2_45e9d, i64* @rax, align 8
  %v1_45ea6 = inttoptr i64 %v2_45e9d to i64*
  %v2_45ea6 = load i64, i64* %v1_45ea6, align 8
  store i64 %v2_45ea6, i64* @rdx, align 8
  store i64 %v2_45e9d, i64* @rdi, align 8
  ret i64 %v2_45e9d

dec_label_pc_45ecd:                               ; preds = %dec_label_pc_45e70
  %v1_45ecd = add i64 %v0_45e70, 160
  %v2_45ecd = inttoptr i64 %v1_45ecd to i64*
  %v3_45ecd = load i64, i64* %v2_45ecd, align 8
  store i64 %v3_45ecd, i64* @rdi, align 8
  %v1_45ed7 = inttoptr i64 %v3_45ecd to i64*
  %v2_45ed7 = load i64, i64* %v1_45ed7, align 8
  store i64 %v2_45ed7, i64* @rax, align 8
  %v1_45ee0 = inttoptr i64 %v2_45ed7 to i64*
  %v2_45ee0 = load i64, i64* %v1_45ee0, align 8
  store i64 %v2_45ee0, i64* @rdx, align 8
  store i64 %v2_45ed7, i64* @rdi, align 8
  %v4_45eec = trunc i64 %v2_45ed7 to i8
  %v5_45eec = icmp eq i8 %v4_45eec, 0
  br i1 %v5_45eec, label %bb, label %dec_label_pc_45ef0

bb:                                               ; preds = %dec_label_pc_45ecd
  %v1_45eee = call i64 @function_45f33()
  store i64 %v1_45eee, i64* @rax, align 8
  %v0_45ef0.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_45ef0

dec_label_pc_45ef0:                               ; preds = %bb, %dec_label_pc_45ecd
  %v0_45f17 = phi i64 [ %v0_45ef0.pre, %bb ], [ %v0_45e70, %dec_label_pc_45ecd ]
  %v1_45ef0 = add i64 %v0_45f17, 160
  %v2_45ef0 = inttoptr i64 %v1_45ef0 to i64*
  %v3_45ef0 = load i64, i64* %v2_45ef0, align 8
  store i64 %v3_45ef0, i64* @rdi, align 8
  %v1_45efa = inttoptr i64 %v3_45ef0 to i64*
  %v2_45efa = load i64, i64* %v1_45efa, align 8
  store i64 %v2_45efa, i64* @rax, align 8
  %v1_45f03 = inttoptr i64 %v2_45efa to i64*
  %v2_45f03 = load i64, i64* %v1_45f03, align 8
  store i64 %v2_45f03, i64* @rdx, align 8
  store i64 %v2_45efa, i64* @rdi, align 8
  ret i64 %v2_45efa
}

define i64 @function_45f2a(i64 %arg1) local_unnamed_addr {
dec_label_pc_45f2a:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_45f33() local_unnamed_addr {
dec_label_pc_45f33:
  %v0_45f33 = load i64, i64* @rbp, align 8
  %v1_45f33 = add i64 %v0_45f33, 184
  %v2_45f33 = inttoptr i64 %v1_45f33 to i64*
  %v3_45f33 = load i64, i64* %v2_45f33, align 8
  store i64 %v3_45f33, i64* @rdi, align 8
  %v0_45f46 = load i64, i64* @rax, align 8
  ret i64 %v0_45f46
}

define i64 @function_45f4b() local_unnamed_addr {
dec_label_pc_45f4b:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_45f57() local_unnamed_addr {
dec_label_pc_45f57:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_45f63() local_unnamed_addr {
dec_label_pc_45f63:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm220Varargs$ArrayVarargs7subargsEJPNS1_7VarargsEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_45f70:
  store i64 %arg1, i64* @rdi, align 8
  %v4_45f70 = trunc i64 %arg2 to i32
  %tmp249 = icmp slt i32 %v4_45f70, 1
  br i1 %tmp249, label %bb, label %dec_label_pc_45f80

bb:                                               ; preds = %dec_label_pc_45f70
  %v5_45f7a = call i64 @function_46136()
  store i64 %v5_45f7a, i64* @rax, align 8
  br label %dec_label_pc_45f80

dec_label_pc_45f80:                               ; preds = %bb, %dec_label_pc_45f70
  %v11_45f80 = icmp eq i32 %v4_45f70, 1
  br i1 %v11_45f80, label %bb251, label %dec_label_pc_45f8c

bb251:                                            ; preds = %dec_label_pc_45f80
  %v7_45f86 = call i64 @function_46030(i64 %arg1, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_45f86, i64* @rax, align 8
  br label %dec_label_pc_45f8c

dec_label_pc_45f8c:                               ; preds = %bb251, %dec_label_pc_45f80
  %v1_45f8c = add i64 %arg1, 8
  %v2_45f8c = inttoptr i64 %v1_45f8c to i64*
  %v3_45f8c = load i64, i64* %v2_45f8c, align 8
  %v1_45f90 = add i64 %v3_45f8c, 8
  %v2_45f90 = inttoptr i64 %v1_45f90 to i32*
  %v3_45f90 = load i32, i32* %v2_45f90, align 4
  %v4_45f90 = zext i32 %v3_45f90 to i64
  store i64 %v4_45f90, i64* @rdx, align 8
  %v8_45f96 = sext i32 %v3_45f90 to i64
  %v9_45f96 = icmp slt i64 %v8_45f96, %arg2
  br i1 %v9_45f96, label %bb252, label %dec_label_pc_45f98

bb252:                                            ; preds = %dec_label_pc_45f8c
  %v14_45f96 = call i64 @function_46008(i64 %arg1, i64 %arg2, i64 %v8_45f96)
  store i64 %v14_45f96, i64* @rax, align 8
  br label %dec_label_pc_45f98

dec_label_pc_45f98:                               ; preds = %bb252, %dec_label_pc_45f8c
  %v1_45f98 = add i64 %arg2, 4294967295
  %v1_45f9c = add i64 %arg1, 16
  %v2_45f9c = inttoptr i64 %v1_45f9c to i64*
  %v3_45f9c = load i64, i64* %v2_45f9c, align 8
  store i64 %v3_45f9c, i64* @rbx, align 8
  store i64 286631, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v4_45fa9 = trunc i64 %v1_45f98 to i32
  %v5_45fa9 = sub i32 %v3_45f90, %v4_45fa9
  %v21_45fa9 = zext i32 %v5_45fa9 to i64
  store i64 %v21_45fa9, i64* @rdx, align 8
  ret i64 0
}

define i64 @function_46008(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_46008:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_46008 = add i64 %arg1, 16
  %v2_46008 = inttoptr i64 %v1_46008 to i64*
  %v3_46008 = load i64, i64* %v2_46008, align 8
  store i64 %v3_46008, i64* @rdi, align 8
  %v1_4600e = inttoptr i64 %v3_46008 to i64*
  %v2_4600e = load i64, i64* %v1_4600e, align 8
  store i64 %v2_4600e, i64* @rax, align 8
  store i64 %v2_4600e, i64* @rbx, align 8
  ret i64 %v2_4600e
}

define i64 @function_4601a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_4601a:
  %v0_4601a = load i64, i64* @rbx, align 8
  store i64 %v0_4601a, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_4601a
}

define i64 @function_46030(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_46030:
  store i64 %arg1, i64* @rdi, align 8
  %v0_46030 = load i64, i64* @rdi, align 8
  store i64 %v0_46030, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v0_46030
}

define i64 @function_46040() local_unnamed_addr {
dec_label_pc_46040:
  %v2_46040 = load i64, i64* @rbx, align 8
  store i64 %v2_46040, i64* @rax, align 8
  store i64 %v2_46040, i64* @rdi, align 8
  %v4_46049 = trunc i64 %v2_46040 to i32
  %tmp236 = icmp slt i32 %v4_46049, 1
  br i1 %tmp236, label %bb, label %dec_label_pc_46051

bb:                                               ; preds = %dec_label_pc_46040
  %v5_4604b = call i64 @function_460f0()
  store i64 %v5_4604b, i64* @rax, align 8
  br label %dec_label_pc_46051

dec_label_pc_46051:                               ; preds = %bb, %dec_label_pc_46040
  store i64 286808, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46088() local_unnamed_addr {
dec_label_pc_46088:
  %v2_46088 = load i64, i64* @rbx, align 8
  store i64 %v2_46088, i64* @rax, align 8
  store i64 %v2_46088, i64* @rdi, align 8
  %v4_46091 = trunc i64 %v2_46088 to i32
  %tmp236 = icmp slt i32 %v4_46091, 1
  br i1 %tmp236, label %bb, label %dec_label_pc_46095

bb:                                               ; preds = %dec_label_pc_46088
  %v5_46093 = call i64 @function_460d8()
  store i64 %v5_46093, i64* @rax, align 8
  br label %dec_label_pc_46095

dec_label_pc_46095:                               ; preds = %bb, %dec_label_pc_46088
  store i64 286876, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_460d8() local_unnamed_addr {
dec_label_pc_460d8:
  %v0_460d8 = load i64, i64* @r13, align 8
  %v1_460d8 = trunc i64 %v0_460d8 to i32
  %v2_460d8 = load i64, i64* @r14, align 8
  %v3_460d8 = add i64 %v2_460d8, 8
  %v4_460d8 = inttoptr i64 %v3_460d8 to i32*
  %v5_460d8 = load i32, i32* %v4_460d8, align 4
  %v11_460d8 = icmp ult i32 %v1_460d8, %v5_460d8
  %v1_460dc = add i64 %v2_460d8, 16
  store i64 %v1_460dc, i64* @rax, align 8
  %v1_460e0 = icmp eq i1 %v11_460d8, false
  br i1 %v1_460e0, label %bb, label %dec_label_pc_460e2

bb:                                               ; preds = %dec_label_pc_460d8
  %v2_460e0 = call i64 @function_46147()
  store i64 %v2_460e0, i64* @rax, align 8
  %v1_460e5.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_460e2

dec_label_pc_460e2:                               ; preds = %bb, %dec_label_pc_460d8
  %v1_460e5 = phi i64 [ %v1_460e5.pre, %bb ], [ %v0_460d8, %dec_label_pc_460d8 ]
  %v0_460e5 = phi i64 [ %v2_460e0, %bb ], [ %v1_460dc, %dec_label_pc_460d8 ]
  %v2_460e5 = mul i64 %v1_460e5, 8
  %v3_460e5 = add i64 %v2_460e5, %v0_460e5
  %v4_460e5 = inttoptr i64 %v3_460e5 to i64*
  %v5_460e5 = load i64, i64* %v4_460e5, align 8
  store i64 %v5_460e5, i64* @rbx, align 8
  %v5_460e9 = call i64 @function_4601a(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_460e9, i64* @rax, align 8
  ret i64 %v5_460e9
}

define i64 @function_460f0() local_unnamed_addr {
dec_label_pc_460f0:
  store i64 286967, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46136() local_unnamed_addr {
dec_label_pc_46136:
  store i64 1, i64* @rdi, align 8
  %v0_46142 = load i64, i64* @rax, align 8
  ret i64 %v0_46142
}

define i64 @function_46147() local_unnamed_addr {
dec_label_pc_46147:
  %v0_46151 = load i64, i64* @r12, align 8
  store i64 %v0_46151, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib6errputEJPNS2_10IoLib$FileEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_46160:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_46160 = load i64, i64* @rdi, align 8
  %v1_46160 = add i64 %v0_46160, 40
  %v2_46160 = inttoptr i64 %v1_46160 to i64*
  %v3_46160 = load i64, i64* %v2_46160, align 8
  store i64 %v3_46160, i64* @rax, align 8
  %v1_46164 = icmp eq i64 %v3_46160, 0
  br i1 %v1_46164, label %dec_label_pc_46170, label %dec_label_pc_46169

dec_label_pc_46169:                               ; preds = %dec_label_pc_46160
  ret i64 %v3_46160

dec_label_pc_46170:                               ; preds = %dec_label_pc_46160
  %v0_46170 = load i64, i64* %rbp.global-to-local, align 8
  %v0_46171 = load i64, i64* @rbx, align 8
  store i64 %v0_46160, i64* @rbx, align 8
  store i64 %v0_46160, i64* @rax, align 8
  %v1_4617c = add i64 %v0_46160, 2240
  %v2_4617c = inttoptr i64 %v1_4617c to i64*
  %v3_4617c = load i64, i64* %v2_4617c, align 8
  store i64 %v3_4617c, i64* @rax, align 8
  store i64 %v3_4617c, i64* %v2_46160, align 8
  store i64 %v0_46171, i64* @rbx, align 8
  store i64 %v0_46170, i64* %rbp.global-to-local, align 8
  %v0_4618f = load i64, i64* @rax, align 8
  ret i64 %v0_4618f
}

define i64 @function_461f1() local_unnamed_addr {
dec_label_pc_461f1:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib5inputEJPNS2_10IoLib$FileEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_46200:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_46200 = load i64, i64* @rdi, align 8
  %v1_46200 = add i64 %v0_46200, 24
  %v2_46200 = inttoptr i64 %v1_46200 to i64*
  %v3_46200 = load i64, i64* %v2_46200, align 8
  store i64 %v3_46200, i64* @rax, align 8
  %v1_46204 = icmp eq i64 %v3_46200, 0
  br i1 %v1_46204, label %dec_label_pc_46210, label %dec_label_pc_46209

dec_label_pc_46209:                               ; preds = %dec_label_pc_46200
  ret i64 %v3_46200

dec_label_pc_46210:                               ; preds = %dec_label_pc_46200
  %v0_46210 = load i64, i64* %rbp.global-to-local, align 8
  %v0_46211 = load i64, i64* @rbx, align 8
  store i64 %v0_46200, i64* @rbx, align 8
  store i64 %v0_46200, i64* @rax, align 8
  %v1_4621c = add i64 %v0_46200, 2224
  %v2_4621c = inttoptr i64 %v1_4621c to i64*
  %v3_4621c = load i64, i64* %v2_4621c, align 8
  store i64 %v3_4621c, i64* @rax, align 8
  store i64 %v3_4621c, i64* %v2_46200, align 8
  store i64 %v0_46211, i64* @rbx, align 8
  store i64 %v0_46210, i64* %rbp.global-to-local, align 8
  %v0_4622f = load i64, i64* @rax, align 8
  ret i64 %v0_4622f
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib6outputEJPNS2_10IoLib$FileEv"(i64 %arg1) local_unnamed_addr {
dec_label_pc_462a0:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_462a0 = load i64, i64* @rdi, align 8
  %v1_462a0 = add i64 %v0_462a0, 32
  %v2_462a0 = inttoptr i64 %v1_462a0 to i64*
  %v3_462a0 = load i64, i64* %v2_462a0, align 8
  store i64 %v3_462a0, i64* @rax, align 8
  %v1_462a4 = icmp eq i64 %v3_462a0, 0
  br i1 %v1_462a4, label %dec_label_pc_462b0, label %dec_label_pc_462a9

dec_label_pc_462a9:                               ; preds = %dec_label_pc_462a0
  ret i64 %v3_462a0

dec_label_pc_462b0:                               ; preds = %dec_label_pc_462a0
  %v0_462b0 = load i64, i64* %rbp.global-to-local, align 8
  %v0_462b1 = load i64, i64* @rbx, align 8
  store i64 %v0_462a0, i64* @rbx, align 8
  store i64 %v0_462a0, i64* @rax, align 8
  %v1_462bc = add i64 %v0_462a0, 2232
  %v2_462bc = inttoptr i64 %v1_462bc to i64*
  %v3_462bc = load i64, i64* %v2_462bc, align 8
  store i64 %v3_462bc, i64* @rax, align 8
  store i64 %v3_462bc, i64* %v2_462a0, align 8
  store i64 %v0_462b1, i64* @rbx, align 8
  store i64 %v0_462b0, i64* %rbp.global-to-local, align 8
  %v0_462cf = load i64, i64* @rax, align 8
  ret i64 %v0_462cf
}

define i64 @_ZN3org4luaj3vm28LuaTable7hashsetEJvPNS1_8LuaValueES4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_46340:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_46344 = load i64, i64* %r13.global-to-local, align 8
  %v0_46346 = load i64, i64* %r12.global-to-local, align 8
  %v0_46348 = load i64, i64* @rdx, align 8
  store i64 %v0_46348, i64* %r13.global-to-local, align 8
  %v0_4634b = load i64, i64* %rbp.global-to-local, align 8
  %v0_4634d = load i64, i64* @rdi, align 8
  store i64 %v0_4634d, i64* %r12.global-to-local, align 8
  %v0_46350 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_46350, i64* @rbp, align 8
  store i64 %v0_46348, i64* @rdi, align 8
  store i64 %v0_46348, i64* @rax, align 8
  %v4_46363 = trunc i64 %v0_46348 to i8
  %v5_46363 = icmp eq i8 %v4_46363, 0
  br i1 %v5_46363, label %dec_label_pc_46388, label %dec_label_pc_46367

dec_label_pc_46367:                               ; preds = %dec_label_pc_46340
  store i64 %v0_4634d, i64* @rdi, align 8
  store i64 %v0_4634b, i64* %rbp.global-to-local, align 8
  store i64 %v0_46346, i64* %r12.global-to-local, align 8
  store i64 %v0_46344, i64* %r13.global-to-local, align 8
  ret i64 %v0_46348

dec_label_pc_46388:                               ; preds = %dec_label_pc_46340
  %v1_46388 = add i64 %v0_4634d, 16
  %v2_46388 = inttoptr i64 %v1_46388 to i64*
  %v3_46388 = load i64, i64* %v2_46388, align 8
  store i64 %v3_46388, i64* @rax, align 8
  %v1_4638d = add i64 %v3_46388, 8
  %v2_4638d = inttoptr i64 %v1_4638d to i32*
  %v3_4638d = load i32, i32* %v2_4638d, align 4
  %v4_4638d = zext i32 %v3_4638d to i64
  store i64 %v4_4638d, i64* @rdx, align 8
  %tmp252 = icmp slt i32 %v3_4638d, 1
  br i1 %tmp252, label %bb, label %dec_label_pc_46398

bb:                                               ; preds = %dec_label_pc_46388
  %v5_46392 = call i64 @function_464e0()
  store i64 %v5_46392, i64* @rax, align 8
  %v0_463a1.pre = load i64, i64* @rdx, align 8
  %v2_463a9.pre = load i64, i64* %rsi.global-to-local, align 8
  %v0_463ad.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_46398

dec_label_pc_46398:                               ; preds = %bb, %dec_label_pc_46388
  %v0_463ad = phi i64 [ %v0_463ad.pre, %bb ], [ %v0_46350, %dec_label_pc_46388 ]
  %v2_463a9 = phi i64 [ %v2_463a9.pre, %bb ], [ %v0_46350, %dec_label_pc_46388 ]
  %v0_463a1 = phi i64 [ %v0_463a1.pre, %bb ], [ %v4_4638d, %dec_label_pc_46388 ]
  %v1_463a1 = add i64 %v0_463a1, -1
  store i64 %v1_463a1, i64* @rbx, align 8
  store i64 %v2_463a9, i64* @rax, align 8
  store i64 %v0_463ad, i64* @rdi, align 8
  %v1_463b6 = trunc i64 %v2_463a9 to i32
  %tmp253 = sub i32 7, %v1_463b6
  %v9_463b6 = and i32 %tmp253, %v1_463b6
  %v10_463b6 = icmp slt i32 %v9_463b6, 0
  store i1 %v10_463b6, i1* @of, align 1
  %tmp255 = icmp ult i32 %v1_463b6, 9
  br i1 %tmp255, label %bb254, label %dec_label_pc_463bf

bb254:                                            ; preds = %dec_label_pc_46398
  %v3_463b9 = call i64 @function_465b8()
  store i64 %v3_463b9, i64* @rax, align 8
  br label %dec_label_pc_463bf

dec_label_pc_463bf:                               ; preds = %bb254, %dec_label_pc_46398
  store i64 287696, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46420() local_unnamed_addr {
dec_label_pc_46420:
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46446() local_unnamed_addr {
dec_label_pc_46446:
  store i64 3, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_464e0() local_unnamed_addr {
dec_label_pc_464e0:
  %v12_464e7 = load i64, i64* @rax, align 8
  ret i64 %v12_464e7
}

define i64 @function_464ea() local_unnamed_addr {
dec_label_pc_464ea:
  %v0_464ea = load i64, i64* @rax, align 8
  %v1_464ea = add i64 %v0_464ea, 8
  %v2_464ea = inttoptr i64 %v1_464ea to i32*
  %v3_464ea = load i32, i32* %v2_464ea, align 4
  %v4_464ea = zext i32 %v3_464ea to i64
  store i64 %v4_464ea, i64* @rax, align 8
  %v0_464ed = load i64, i64* @r12, align 8
  %v1_464ed = add i64 %v0_464ed, 24
  %v2_464ed = inttoptr i64 %v1_464ed to i32*
  %v3_464ed = load i32, i32* %v2_464ed, align 4
  %v5_464f2 = sext i32 %v3_464ed to i64
  %v6_464f2 = icmp slt i64 %v5_464f2, %v4_464ea
  br i1 %v6_464f2, label %dec_label_pc_464f8, label %bb

bb:                                               ; preds = %dec_label_pc_464ea
  %v7_464f2 = call i64 @function_46600()
  store i64 %v7_464f2, i64* @rax, align 8
  %v0_464f8.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_464f8

dec_label_pc_464f8:                               ; preds = %dec_label_pc_464ea, %bb
  %v0_464f8 = phi i64 [ %v0_464ed, %dec_label_pc_464ea ], [ %v0_464f8.pre, %bb ]
  %v1_464f8 = add i64 %v0_464f8, 32
  %v2_464f8 = inttoptr i64 %v1_464f8 to i64*
  %v3_464f8 = load i64, i64* %v2_464f8, align 8
  store i64 %v3_464f8, i64* @rbx, align 8
  %v1_464fd = icmp eq i64 %v3_464f8, 0
  br i1 %v1_464fd, label %bb239, label %dec_label_pc_46506

bb239:                                            ; preds = %dec_label_pc_464f8
  %v1_46500 = call i64 @function_467b0()
  store i64 %v1_46500, i64* @rax, align 8
  br label %dec_label_pc_46506

dec_label_pc_46506:                               ; preds = %bb239, %dec_label_pc_464f8
  %v1_46506 = inttoptr i64 %v3_464f8 to i64*
  %v2_46506 = load i64, i64* %v1_46506, align 8
  store i64 %v2_46506, i64* @rax, align 8
  store i64 4, i64* @rdx, align 8
  %v1_46515 = inttoptr i64 %v2_46506 to i64*
  %v2_46515 = load i64, i64* %v1_46515, align 8
  store i64 %v2_46515, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4652d(i64 %arg1) local_unnamed_addr {
dec_label_pc_4652d:
  %v0_4652d = load i64, i64* @r12, align 8
  %v1_4652d = add i64 %v0_4652d, 16
  %v2_4652d = inttoptr i64 %v1_4652d to i64*
  %v3_4652d = load i64, i64* %v2_4652d, align 8
  store i64 %v3_4652d, i64* @rbx, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v1_46535 = add i64 %v3_4652d, 8
  %v2_46535 = inttoptr i64 %v1_46535 to i32*
  %v3_46535 = load i32, i32* %v2_46535, align 4
  %v5_46535 = trunc i64 %arg1 to i32
  %v1_46538 = add i64 %v3_4652d, 16
  store i64 %v1_46538, i64* @rax, align 8
  %tmp8 = icmp ugt i32 %v3_46535, %v5_46535
  br i1 %tmp8, label %dec_label_pc_46542, label %bb

bb:                                               ; preds = %dec_label_pc_4652d
  %v3_4653c = call i64 @function_467c3()
  store i64 %v3_4653c, i64* @rax, align 8
  br label %dec_label_pc_46542

dec_label_pc_46542:                               ; preds = %dec_label_pc_4652d, %bb
  %v0_46545 = phi i64 [ %v3_4653c, %bb ], [ %v1_46538, %dec_label_pc_4652d ]
  %v0_46542 = load i64, i64* @r14, align 8
  store i64 %v0_46542, i64* @rdx, align 8
  %v2_46545 = mul i64 %v0_46542, 8
  %v3_46545 = add i64 %v2_46545, %v0_46545
  %v1_46549 = inttoptr i64 %v3_46545 to i64*
  %v2_46549 = load i64, i64* %v1_46549, align 8
  store i64 %v2_46549, i64* @rcx, align 8
  %v1_4654d = icmp eq i64 %v2_46549, 0
  br i1 %v1_4654d, label %bb7, label %dec_label_pc_46552

bb7:                                              ; preds = %dec_label_pc_46542
  %v1_46550 = call i64 @function_4658c()
  store i64 %v1_46550, i64* @rax, align 8
  br label %dec_label_pc_46552

dec_label_pc_46552:                               ; preds = %bb7, %dec_label_pc_46542
  %v1_46552 = inttoptr i64 %v2_46549 to i64*
  %v2_46552 = load i64, i64* %v1_46552, align 8
  store i64 %v2_46552, i64* @rax, align 8
  store i64 8, i64* @rdx, align 8
  %v1_46566 = inttoptr i64 %v2_46552 to i64*
  %v2_46566 = load i64, i64* %v1_46566, align 8
  store i64 %v2_46566, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4658c() local_unnamed_addr {
dec_label_pc_4658c:
  %v0_4658f = load i64, i64* @rbx, align 8
  store i64 %v0_4658f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_465b8() local_unnamed_addr {
dec_label_pc_465b8:
  store i64 1, i64* @rdx, align 8
  %v0_465bd = load i64, i64* @rax, align 8
  store i64 %v0_465bd, i64* @rcx, align 8
  %v2_465bf = urem i64 %v0_465bd, 64
  %v4_465bf = icmp eq i64 %v2_465bf, 0
  br i1 %v4_465bf, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_465b8
  %v5_465bf = shl i64 1, %v2_465bf
  store i64 %v5_465bf, i64* @rdx, align 8
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_465b8, %bb
  store i64 288223, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46600() local_unnamed_addr {
dec_label_pc_46600:
  %v2_46600 = load i64, i64* @rbp, align 8
  store i64 %v2_46600, i64* @rax, align 8
  store i64 %v2_46600, i64* @rdi, align 8
  %v4_4660d = trunc i64 %v2_46600 to i8
  %v5_4660d = icmp eq i8 %v4_4660d, 0
  br i1 %v5_4660d, label %bb, label %dec_label_pc_46615

bb:                                               ; preds = %dec_label_pc_46600
  %v1_4660f = call i64 @function_466e0()
  store i64 %v1_4660f, i64* @rax, align 8
  %v2_46615.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_46615

dec_label_pc_46615:                               ; preds = %bb, %dec_label_pc_46600
  %v2_46615 = phi i64 [ %v2_46615.pre, %bb ], [ %v2_46600, %dec_label_pc_46600 ]
  store i64 %v2_46615, i64* @rax, align 8
  store i64 %v2_46615, i64* @rdi, align 8
  %v4_46622 = trunc i64 %v2_46615 to i32
  %tmp16 = icmp slt i32 %v4_46622, 1
  br i1 %tmp16, label %bb17, label %dec_label_pc_4662a

bb17:                                             ; preds = %dec_label_pc_46615
  %v5_46624 = call i64 @function_466e0()
  store i64 %v5_46624, i64* @rax, align 8
  %v2_4662a.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_4662a

dec_label_pc_4662a:                               ; preds = %bb17, %dec_label_pc_46615
  %v0_46645 = phi i64 [ %v2_4662a.pre, %bb17 ], [ %v2_46615, %dec_label_pc_46615 ]
  %v0_46637 = load i64, i64* @r12, align 8
  store i64 %v0_46645, i64* @rax, align 8
  store i64 %v0_46645, i64* @rdi, align 8
  %v4_4664e = trunc i64 %v0_46645 to i32
  %tmp18 = icmp slt i32 %v4_4664e, 1
  br i1 %tmp18, label %bb19, label %dec_label_pc_46656

bb19:                                             ; preds = %dec_label_pc_4662a
  %v5_46650 = call i64 @function_466ed()
  store i64 %v5_46650, i64* @rax, align 8
  %v0_46656.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_46656

dec_label_pc_46656:                               ; preds = %bb19, %dec_label_pc_4662a
  %v0_4665b = phi i64 [ %v5_46650, %bb19 ], [ %v0_46645, %dec_label_pc_4662a ]
  %v0_46656 = phi i64 [ %v0_46656.pre, %bb19 ], [ %v0_46637, %dec_label_pc_4662a ]
  %v1_46656 = add i64 %v0_46656, 8
  %v2_46656 = inttoptr i64 %v1_46656 to i64*
  %v3_46656 = load i64, i64* %v2_46656, align 8
  store i64 %v3_46656, i64* @r14, align 8
  %v1_4665b = trunc i64 %v0_4665b to i32
  %v3_4665b = add i64 %v3_46656, 8
  %v4_4665b = inttoptr i64 %v3_4665b to i32*
  %v5_4665b = load i32, i32* %v4_4665b, align 4
  %v10_4665f = icmp sgt i32 %v1_4665b, %v5_4665b
  br i1 %v10_4665f, label %bb20, label %dec_label_pc_46665

bb20:                                             ; preds = %dec_label_pc_46656
  %v11_4665f = call i64 @function_466ed()
  store i64 %v11_4665f, i64* @rax, align 8
  br label %dec_label_pc_46665

dec_label_pc_46665:                               ; preds = %bb20, %dec_label_pc_46656
  %v0_46665 = phi i64 [ %v11_4665f, %bb20 ], [ %v0_4665b, %dec_label_pc_46656 ]
  %v1_46665 = add i64 %v0_46665, -1
  store i64 %v1_46665, i64* @rbx, align 8
  %v2_46668 = load i64, i64* @r13, align 8
  store i64 %v2_46668, i64* @rax, align 8
  store i64 %v2_46668, i64* @rdi, align 8
  store i64 0, i64* @rbp, align 8
  %v4_46677 = trunc i64 %v2_46668 to i8
  %v5_46677 = icmp eq i8 %v4_46677, 0
  %v1_46679 = icmp eq i1 %v5_46677, false
  br i1 %v1_46679, label %bb21, label %dec_label_pc_4667b

bb21:                                             ; preds = %dec_label_pc_46665
  %v2_46679 = call i64 @function_466ad()
  store i64 %v2_46679, i64* @rax, align 8
  %v0_46680.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_4667b

dec_label_pc_4667b:                               ; preds = %bb21, %dec_label_pc_46665
  %v0_46680 = phi i64 [ %v0_46680.pre, %bb21 ], [ %v2_46668, %dec_label_pc_46665 ]
  %v0_4667b = load i64, i64* @r12, align 8
  %v1_4667b = add i64 %v0_4667b, 32
  %v2_4667b = inttoptr i64 %v1_4667b to i64*
  %v3_4667b = load i64, i64* %v2_4667b, align 8
  store i64 %v3_4667b, i64* @r12, align 8
  store i64 %v0_46680, i64* @rbp, align 8
  %v1_46683 = icmp eq i64 %v3_4667b, 0
  br i1 %v1_46683, label %bb22, label %dec_label_pc_46688

bb22:                                             ; preds = %dec_label_pc_4667b
  %v1_46686 = call i64 @function_466ad()
  store i64 %v1_46686, i64* @rax, align 8
  br label %dec_label_pc_46688

dec_label_pc_46688:                               ; preds = %bb22, %dec_label_pc_4667b
  %v1_46688 = inttoptr i64 %v3_4667b to i64*
  %v2_46688 = load i64, i64* %v1_46688, align 8
  store i64 %v2_46688, i64* @rax, align 8
  store i64 5, i64* @rdx, align 8
  %v1_46698 = inttoptr i64 %v2_46688 to i64*
  %v2_46698 = load i64, i64* %v1_46698, align 8
  store i64 %v2_46698, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_466ad() local_unnamed_addr {
dec_label_pc_466ad:
  %v0_466ad = load i64, i64* @rbx, align 8
  %v1_466ad = trunc i64 %v0_466ad to i32
  %v2_466ad = load i64, i64* @r14, align 8
  %v3_466ad = add i64 %v2_466ad, 8
  %v4_466ad = inttoptr i64 %v3_466ad to i32*
  %v5_466ad = load i32, i32* %v4_466ad, align 4
  %v11_466ad = icmp ult i32 %v1_466ad, %v5_466ad
  %v1_466b1 = add i64 %v2_466ad, 16
  store i64 %v1_466b1, i64* @rdx, align 8
  %v1_466b5 = icmp eq i1 %v11_466ad, false
  br i1 %v1_466b5, label %bb, label %dec_label_pc_466bb

bb:                                               ; preds = %dec_label_pc_466ad
  %v2_466b5 = call i64 @function_467cd()
  store i64 %v2_466b5, i64* @rax, align 8
  %v0_466bb.pre = load i64, i64* @rbx, align 8
  %v0_466c1.pre = load i64, i64* @r14, align 8
  %v0_466c4.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_466bb

dec_label_pc_466bb:                               ; preds = %bb, %dec_label_pc_466ad
  %v0_466c4 = phi i64 [ %v0_466c4.pre, %bb ], [ %v1_466b1, %dec_label_pc_466ad ]
  %v0_466c1 = phi i64 [ %v0_466c1.pre, %bb ], [ %v2_466ad, %dec_label_pc_466ad ]
  %v0_466bb = phi i64 [ %v0_466bb.pre, %bb ], [ %v0_466ad, %dec_label_pc_466ad ]
  store i64 %v0_466c1, i64* @rdi, align 8
  %v2_466c4 = mul i64 %v0_466bb, 8
  %v3_466c4 = add i64 %v2_466c4, %v0_466c4
  store i64 %v3_466c4, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_466e0() local_unnamed_addr {
dec_label_pc_466e0:
  %v0_466e5 = load i64, i64* @r12, align 8
  store i64 %v0_466e5, i64* @rdi, align 8
  %v0_466e8 = load i64, i64* @rax, align 8
  ret i64 %v0_466e8
}

define i64 @function_466ed() local_unnamed_addr {
dec_label_pc_466ed:
  %v0_466ed = load i64, i64* @r12, align 8
  %v1_466ed = add i64 %v0_466ed, 16
  %v2_466ed = inttoptr i64 %v1_466ed to i64*
  %v3_466ed = load i64, i64* %v2_466ed, align 8
  store i64 %v3_466ed, i64* @rax, align 8
  store i64 288505, i64* @rdi, align 8
  %v1_466f9 = add i64 %v3_466ed, 8
  %v2_466f9 = inttoptr i64 %v1_466f9 to i32*
  %v3_466f9 = load i32, i32* %v2_466f9, align 4
  %v4_466f9 = zext i32 %v3_466f9 to i64
  store i64 %v4_466f9, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46760() local_unnamed_addr {
dec_label_pc_46760:
  store i64 288625, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46790() local_unnamed_addr {
dec_label_pc_46790:
  %v0_46790 = load i64, i64* @r12, align 8
  %v1_46790 = add i64 %v0_46790, 16
  %v2_46790 = inttoptr i64 %v1_46790 to i64*
  %v3_46790 = load i64, i64* %v2_46790, align 8
  store i64 %v3_46790, i64* @rax, align 8
  %v1_46795 = add i64 %v3_46790, 8
  %v2_46795 = inttoptr i64 %v1_46795 to i32*
  %v3_46795 = load i32, i32* %v2_46795, align 4
  %v4_46795 = zext i32 %v3_46795 to i64
  store i64 %v4_46795, i64* @rax, align 8
  %v0_467a3 = call i64 @function_46600()
  store i64 %v0_467a3, i64* @rax, align 8
  ret i64 %v0_467a3
}

define i64 @function_467b0() local_unnamed_addr {
dec_label_pc_467b0:
  %v0_467b0 = load i64, i64* @rbp, align 8
  store i64 %v0_467b0, i64* @rdi, align 8
  %v0_467bb = load i64, i64* @rax, align 8
  store i64 %v0_467bb, i64* @rbp, align 8
  %v1_467be = call i64 @function_4652d(i64 ptrtoint (i32* @0 to i64))
  store i64 %v1_467be, i64* @rax, align 8
  ret i64 %v1_467be
}

define i64 @function_467c3() local_unnamed_addr {
dec_label_pc_467c3:
  %v0_467c3 = load i64, i64* @r14, align 8
  store i64 %v0_467c3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_467cd() local_unnamed_addr {
dec_label_pc_467cd:
  %v0_467cd = load i64, i64* @rbx, align 8
  store i64 %v0_467cd, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm224Varargs$ArrayPartVarargs7subargsEJPNS1_7VarargsEi"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_467e0:
  store i64 %arg1, i64* @rdi, align 8
  %v4_467e0 = trunc i64 %arg2 to i32
  %tmp248 = icmp slt i32 %v4_467e0, 1
  br i1 %tmp248, label %bb, label %dec_label_pc_467f0

bb:                                               ; preds = %dec_label_pc_467e0
  %v5_467ea = call i64 @function_469a5()
  store i64 %v5_467ea, i64* @rax, align 8
  br label %dec_label_pc_467f0

dec_label_pc_467f0:                               ; preds = %bb, %dec_label_pc_467e0
  %v11_467f0 = icmp eq i32 %v4_467e0, 1
  br i1 %v11_467f0, label %bb250, label %dec_label_pc_467f9

bb250:                                            ; preds = %dec_label_pc_467f0
  %v7_467f3 = call i64 @function_468a0(i64 %arg1, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_467f3, i64* @rax, align 8
  br label %dec_label_pc_467f9

dec_label_pc_467f9:                               ; preds = %bb250, %dec_label_pc_467f0
  %v1_467f9 = add i64 %arg1, 24
  %v2_467f9 = inttoptr i64 %v1_467f9 to i32*
  %v3_467f9 = load i32, i32* %v2_467f9, align 4
  %v4_467f9 = zext i32 %v3_467f9 to i64
  store i64 %v4_467f9, i64* @rdx, align 8
  %v8_467fe = icmp slt i64 %v4_467f9, %arg2
  br i1 %v8_467fe, label %bb251, label %dec_label_pc_46800

bb251:                                            ; preds = %dec_label_pc_467f9
  %v12_467fe = call i64 @function_46878(i64 %arg1, i64 %arg2, i64 %v4_467f9)
  store i64 %v12_467fe, i64* @rax, align 8
  br label %dec_label_pc_46800

dec_label_pc_46800:                               ; preds = %bb251, %dec_label_pc_467f9
  %v1_46804 = add nuw nsw i64 %v4_467f9, 1
  store i64 %v1_46804, i64* @rbx, align 8
  store i64 288790, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v4_46818 = sub i64 %v1_46804, %arg2
  %v20_46818 = and i64 %v4_46818, 4294967295
  store i64 %v20_46818, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_46878(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_46878:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_46878 = add i64 %arg1, 32
  %v2_46878 = inttoptr i64 %v1_46878 to i64*
  %v3_46878 = load i64, i64* %v2_46878, align 8
  store i64 %v3_46878, i64* @rdi, align 8
  %v1_4687e = inttoptr i64 %v3_46878 to i64*
  %v2_4687e = load i64, i64* %v1_4687e, align 8
  store i64 %v2_4687e, i64* @rax, align 8
  ret i64 %v2_4687e
}

define i64 @function_4688a(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_4688a:
  %v0_4688a = load i64, i64* @r14, align 8
  store i64 %v0_4688a, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_4688a
}

define i64 @function_468a0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_468a0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_468a0 = load i64, i64* @rdi, align 8
  store i64 %v0_468a0, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  ret i64 %v0_468a0
}

define i64 @function_468b0() local_unnamed_addr {
dec_label_pc_468b0:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v4_468b9 = trunc i64 %tmp232 to i32
  %tmp236 = icmp slt i32 %v4_468b9, 1
  br i1 %tmp236, label %bb, label %dec_label_pc_468c1

bb:                                               ; preds = %dec_label_pc_468b0
  %v5_468bb = call i64 @function_46960()
  store i64 %v5_468bb, i64* @rax, align 8
  br label %dec_label_pc_468c1

dec_label_pc_468c1:                               ; preds = %bb, %dec_label_pc_468b0
  store i64 288968, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_468f8() local_unnamed_addr {
dec_label_pc_468f8:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v4_46901 = trunc i64 %tmp232 to i32
  %tmp236 = icmp slt i32 %v4_46901, 1
  br i1 %tmp236, label %bb, label %dec_label_pc_46905

bb:                                               ; preds = %dec_label_pc_468f8
  %v5_46903 = call i64 @function_46948()
  store i64 %v5_46903, i64* @rax, align 8
  br label %dec_label_pc_46905

dec_label_pc_46905:                               ; preds = %bb, %dec_label_pc_468f8
  store i64 289036, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46948() local_unnamed_addr {
dec_label_pc_46948:
  %v0_46948 = load i64, i64* @rbp, align 8
  %v1_46948 = trunc i64 %v0_46948 to i32
  %v2_46948 = load i64, i64* @r13, align 8
  %v3_46948 = add i64 %v2_46948, 8
  %v4_46948 = inttoptr i64 %v3_46948 to i32*
  %v5_46948 = load i32, i32* %v4_46948, align 4
  %v11_46948 = icmp ult i32 %v1_46948, %v5_46948
  %v1_4694c = add i64 %v2_46948, 16
  store i64 %v1_4694c, i64* @rax, align 8
  %v1_46950 = icmp eq i1 %v11_46948, false
  br i1 %v1_46950, label %bb, label %dec_label_pc_46952

bb:                                               ; preds = %dec_label_pc_46948
  %v2_46950 = call i64 @function_469b6()
  store i64 %v2_46950, i64* @rax, align 8
  %v1_46955.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_46952

dec_label_pc_46952:                               ; preds = %bb, %dec_label_pc_46948
  %v1_46955 = phi i64 [ %v1_46955.pre, %bb ], [ %v0_46948, %dec_label_pc_46948 ]
  %v0_46955 = phi i64 [ %v2_46950, %bb ], [ %v1_4694c, %dec_label_pc_46948 ]
  %v2_46955 = mul i64 %v1_46955, 8
  %v3_46955 = add i64 %v2_46955, %v0_46955
  %v4_46955 = inttoptr i64 %v3_46955 to i64*
  %v5_46955 = load i64, i64* %v4_46955, align 8
  store i64 %v5_46955, i64* @r14, align 8
  %v5_46959 = call i64 @function_4688a(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_46959, i64* @rax, align 8
  ret i64 %v5_46959
}

define i64 @function_46960() local_unnamed_addr {
dec_label_pc_46960:
  store i64 289127, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_469a5() local_unnamed_addr {
dec_label_pc_469a5:
  store i64 1, i64* @rdi, align 8
  %v0_469b1 = load i64, i64* @rax, align 8
  ret i64 %v0_469b1
}

define i64 @function_469b6() local_unnamed_addr {
dec_label_pc_469b6:
  %v0_469b6 = load i64, i64* @rbp, align 8
  store i64 %v0_469b6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_469bf() local_unnamed_addr {
dec_label_pc_469bf:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib7BaseLib8loadFileEJPNS1_7VarargsEPN4java4lang6StringES9_PNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_469d0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_469e0 = load i64, i64* @rdi, align 8
  store i64 1, i64* @rdx, align 8
  %v1_469f6 = add i64 %v0_469e0, 24
  %v2_469f6 = inttoptr i64 %v1_469f6 to i64*
  %v3_469f6 = load i64, i64* %v2_469f6, align 8
  store i64 %v3_469f6, i64* @rax, align 8
  %v1_469fa = add i64 %v3_469f6, 64
  %v2_469fa = inttoptr i64 %v1_469fa to i64*
  %v3_469fa = load i64, i64* %v2_469fa, align 8
  store i64 %v3_469fa, i64* @rbx, align 8
  %v1_469fe = inttoptr i64 %v3_469fa to i64*
  %v2_469fe = load i64, i64* %v1_469fe, align 8
  store i64 %v2_469fe, i64* @rax, align 8
  %v1_46a01 = inttoptr i64 %v2_469fe to i64*
  %v2_46a01 = load i64, i64* %v1_46a01, align 8
  store i64 %v2_46a01, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46aa8() local_unnamed_addr {
dec_label_pc_46aa8:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_46b6b() local_unnamed_addr {
dec_label_pc_46b6b:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46b72() local_unnamed_addr {
dec_label_pc_46b72:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_46bb9() local_unnamed_addr {
dec_label_pc_46bb9:
  %v0_46bb9 = load i64, i64* @rax, align 8
  store i64 %v0_46bb9, i64* @rdi, align 8
  ret i64 %v0_46bb9
}

define i64 @"_ZN3org4luaj3vm23lib18DebugLib$upvalueid6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_46bd0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 1, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46cd4() local_unnamed_addr {
dec_label_pc_46cd4:
  %v0_46cd4 = load i64, i64* @rbx, align 8
  store i64 %v0_46cd4, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46cdd() local_unnamed_addr {
dec_label_pc_46cdd:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure4callEJPNS1_8LuaValueES4_S4_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_46cf0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_46d02 = load i64, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v1_46d0e = add i64 %v0_46d02, 8
  %v2_46d0e = inttoptr i64 %v1_46d0e to i64*
  %v3_46d0e = load i64, i64* %v2_46d0e, align 8
  store i64 %v3_46d0e, i64* @rax, align 8
  %v1_46d12 = add i64 %v3_46d0e, 80
  %v2_46d12 = inttoptr i64 %v1_46d12 to i32*
  %v3_46d12 = load i32, i32* %v2_46d12, align 4
  %v4_46d12 = zext i32 %v3_46d12 to i64
  store i64 0, i64* @rax, align 8
  store i64 %v4_46d12, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_46db8() local_unnamed_addr {
dec_label_pc_46db8:
  %v0_46db8 = load i64, i64* @rbx, align 8
  %v1_46db8 = add i64 %v0_46db8, 8
  %v2_46db8 = inttoptr i64 %v1_46db8 to i32*
  %v3_46db8 = load i32, i32* %v2_46db8, align 4
  %v4_46db8 = zext i32 %v3_46db8 to i64
  store i64 %v4_46db8, i64* @rdx, align 8
  %v5_46dbb = icmp eq i32 %v3_46db8, 0
  br i1 %v5_46dbb, label %bb, label %dec_label_pc_46dc3

bb:                                               ; preds = %dec_label_pc_46db8
  %v1_46dbd = load i64, i64* @rdi, align 8
  %v2_46dbd = call i64 @function_46e40(i64 %v1_46dbd)
  store i64 %v2_46dbd, i64* @rax, align 8
  %v0_46dc8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_46dc3

dec_label_pc_46dc3:                               ; preds = %bb, %dec_label_pc_46db8
  %v0_46dc8 = phi i64 [ %v0_46dc8.pre, %bb ], [ %v0_46db8, %dec_label_pc_46db8 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_46dc8, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_46de0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_46de0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_46de0 = add i64 %arg4, 76
  %v2_46de0 = inttoptr i64 %v1_46de0 to i32*
  %v3_46de0 = load i32, i32* %v2_46de0, align 4
  %v4_46de0 = zext i32 %v3_46de0 to i64
  store i64 %v4_46de0, i64* @rax, align 8
  %v0_46de3 = load i64, i64* inttoptr (i64 290282 to i64*), align 8
  store i64 %v0_46de3, i64* @rdx, align 8
  %v5_46dea = icmp eq i32 %v3_46de0, 0
  %v1_46dec = icmp eq i1 %v5_46dea, false
  br i1 %v1_46dec, label %dec_label_pc_46df8, label %dec_label_pc_46dee

dec_label_pc_46dee:                               ; preds = %dec_label_pc_46de0
  ret i64 %v4_46de0

dec_label_pc_46df8:                               ; preds = %dec_label_pc_46de0
  store i64 290303, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46e40(i64 %arg1) local_unnamed_addr {
dec_label_pc_46e40:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_46e49() local_unnamed_addr {
dec_label_pc_46e49:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm215LuaThread$State10lua_resumeEJPNS1_7VarargsEPNS1_9LuaThreadES4_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_46e60:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_46e6d = load i64, i64* @rdi, align 8
  store i64 %v0_46e6d, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_46ff0() local_unnamed_addr {
dec_label_pc_46ff0:
  %v0_46ff0 = load i64, i64* @rbx, align 8
  store i64 %v0_46ff0, i64* @rdi, align 8
  %v1_46ff0 = load i64, i64* @rax, align 8
  ret i64 %v1_46ff0
}

define i64 @function_47000() local_unnamed_addr {
dec_label_pc_47000:
  store i64 290823, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_47030() local_unnamed_addr {
dec_label_pc_47030:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_4708e() local_unnamed_addr {
dec_label_pc_4708e:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_470ea() local_unnamed_addr {
dec_label_pc_470ea:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_470f3() local_unnamed_addr {
dec_label_pc_470f3:
  %v0_470f6 = load i64, i64* @rbx, align 8
  store i64 %v0_470f6, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_47108() local_unnamed_addr {
dec_label_pc_47108:
  store i64 291091, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4713b() local_unnamed_addr {
dec_label_pc_4713b:
  %v0_4713b = load i64, i64* @rax, align 8
  ret i64 %v0_4713b
}

define i64 @function_47140() local_unnamed_addr {
dec_label_pc_47140:
  %v0_47140 = load i64, i64* @rax, align 8
  ret i64 %v0_47140
}

define i64 @function_47145() local_unnamed_addr {
dec_label_pc_47145:
  %v0_47145 = load i64, i64* @rax, align 8
  ret i64 %v0_47145
}

define i64 @function_4714a(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_4714a:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_47154 = call i64 @function_470f3()
  store i64 %v0_47154, i64* @rax, align 8
  ret i64 %v0_47154
}

define i64 @function_47156() local_unnamed_addr {
dec_label_pc_47156:
  %v0_47156 = load i64, i64* @rax, align 8
  ret i64 %v0_47156
}

define i64 @function_4715b() local_unnamed_addr {
dec_label_pc_4715b:
  %v0_4715b = load i64, i64* @rax, align 8
  ret i64 %v0_4715b
}

define i64 @function_47160() local_unnamed_addr {
dec_label_pc_47160:
  %v0_47160 = load i64, i64* @rax, align 8
  ret i64 %v0_47160
}

define i64 @function_47165() local_unnamed_addr {
dec_label_pc_47165:
  %v0_47165 = load i64, i64* @rax, align 8
  ret i64 %v0_47165
}

define i64 @function_4716a() local_unnamed_addr {
dec_label_pc_4716a:
  %v0_47170 = load i64, i64* @rax, align 8
  ret i64 %v0_47170
}

define i64 @function_47175() local_unnamed_addr {
dec_label_pc_47175:
  %v0_47175 = call i64 @function_4716a()
  store i64 %v0_47175, i64* @rax, align 8
  ret i64 %v0_47175
}

define i64 @function_47177() local_unnamed_addr {
dec_label_pc_47177:
  %v0_47177 = call i64 @function_4716a()
  store i64 %v0_47177, i64* @rax, align 8
  ret i64 %v0_47177
}

define i64 @function_47179() local_unnamed_addr {
dec_label_pc_47179:
  %v0_47179 = call i64 @function_4716a()
  store i64 %v0_47179, i64* @rax, align 8
  ret i64 %v0_47179
}

define i64 @function_4717b() local_unnamed_addr {
dec_label_pc_4717b:
  store i64 291202, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4718e() local_unnamed_addr {
dec_label_pc_4718e:
  %v0_4718e = load i64, i64* @rax, align 8
  ret i64 %v0_4718e
}

define i64 @function_47193() local_unnamed_addr {
dec_label_pc_47193:
  %v0_47193 = call i64 @function_4716a()
  store i64 %v0_47193, i64* @rax, align 8
  ret i64 %v0_47193
}

define i64 @function_47195() local_unnamed_addr {
dec_label_pc_47195:
  %v0_47195 = call i64 @function_4716a()
  store i64 %v0_47195, i64* @rax, align 8
  ret i64 %v0_47195
}

define i64 @function_47197() local_unnamed_addr {
dec_label_pc_47197:
  %v0_47197 = load i64, i64* @rax, align 8
  ret i64 %v0_47197
}

define i64 @function_4719c() local_unnamed_addr {
dec_label_pc_4719c:
  %v0_4719c = load i64, i64* @rax, align 8
  ret i64 %v0_4719c
}

define i64 @function_471a1() local_unnamed_addr {
dec_label_pc_471a1:
  %v0_471a1 = call i64 @function_4716a()
  store i64 %v0_471a1, i64* @rax, align 8
  ret i64 %v0_471a1
}

define i64 @function_471a3() local_unnamed_addr {
dec_label_pc_471a3:
  %v0_471a3 = call i64 @function_4716a()
  store i64 %v0_471a3, i64* @rax, align 8
  ret i64 %v0_471a3
}

define i64 @function_471a5() local_unnamed_addr {
dec_label_pc_471a5:
  %v0_471a5 = call i64 @function_4716a()
  store i64 %v0_471a5, i64* @rax, align 8
  ret i64 %v0_471a5
}

define i64 @function_471a7() local_unnamed_addr {
dec_label_pc_471a7:
  %v0_471a7 = call i64 @function_4716a()
  store i64 %v0_471a7, i64* @rax, align 8
  ret i64 %v0_471a7
}

define i64 @function_471a9() local_unnamed_addr {
dec_label_pc_471a9:
  %v0_471a9 = call i64 @function_4716a()
  store i64 %v0_471a9, i64* @rax, align 8
  ret i64 %v0_471a9
}

define i64 @function_471ab() local_unnamed_addr {
dec_label_pc_471ab:
  %v0_471ab = call i64 @function_4716a()
  store i64 %v0_471ab, i64* @rax, align 8
  ret i64 %v0_471ab
}

define i64 @function_471ad() local_unnamed_addr {
dec_label_pc_471ad:
  %v0_471ad = call i64 @function_4716a()
  store i64 %v0_471ad, i64* @rax, align 8
  ret i64 %v0_471ad
}

define i64 @function_471af() local_unnamed_addr {
dec_label_pc_471af:
  %v0_471af = call i64 @function_4716a()
  store i64 %v0_471af, i64* @rax, align 8
  ret i64 %v0_471af
}

define i64 @function_471b1() local_unnamed_addr {
dec_label_pc_471b1:
  %v0_471b1 = call i64 @function_4716a()
  store i64 %v0_471b1, i64* @rax, align 8
  ret i64 %v0_471b1
}

define i64 @function_471b3() local_unnamed_addr {
dec_label_pc_471b3:
  %v0_471b3 = load i64, i64* @rax, align 8
  ret i64 %v0_471b3
}

define i64 @function_471b8() local_unnamed_addr {
dec_label_pc_471b8:
  %v0_471b8 = load i64, i64* @rax, align 8
  ret i64 %v0_471b8
}

define i64 @function_471bd() local_unnamed_addr {
dec_label_pc_471bd:
  %v0_471bd = load i64, i64* @rax, align 8
  ret i64 %v0_471bd
}

define i64 @function_471c2() local_unnamed_addr {
dec_label_pc_471c2:
  %v0_471c2 = load i64, i64* @rax, align 8
  ret i64 %v0_471c2
}

define i64 @function_471c7() local_unnamed_addr {
dec_label_pc_471c7:
  %v0_471c7 = call i64 @function_4716a()
  store i64 %v0_471c7, i64* @rax, align 8
  ret i64 %v0_471c7
}

define i64 @function_471c9() local_unnamed_addr {
dec_label_pc_471c9:
  %v0_471c9 = load i64, i64* @rax, align 8
  ret i64 %v0_471c9
}

define i64 @function_471ce() local_unnamed_addr {
dec_label_pc_471ce:
  %v0_471ce = call i64 @function_4716a()
  store i64 %v0_471ce, i64* @rax, align 8
  ret i64 %v0_471ce
}

define i64 @function_471d0() local_unnamed_addr {
dec_label_pc_471d0:
  %v0_471d0 = call i64 @function_4716a()
  store i64 %v0_471d0, i64* @rax, align 8
  ret i64 %v0_471d0
}

define i64 @function_471d2() local_unnamed_addr {
dec_label_pc_471d2:
  %v0_471d2 = call i64 @function_4716a()
  store i64 %v0_471d2, i64* @rax, align 8
  ret i64 %v0_471d2
}

define i64 @function_471d4() local_unnamed_addr {
dec_label_pc_471d4:
  %v0_471d4 = call i64 @function_4716a()
  store i64 %v0_471d4, i64* @rax, align 8
  ret i64 %v0_471d4
}

define i64 @function_471d6() local_unnamed_addr {
dec_label_pc_471d6:
  %v0_471d6 = load i64, i64* @rax, align 8
  ret i64 %v0_471d6
}

define i64 @function_471db() local_unnamed_addr {
dec_label_pc_471db:
  %v0_471db = load i64, i64* @rax, align 8
  ret i64 %v0_471db
}

define i64 @function_471e0() local_unnamed_addr {
dec_label_pc_471e0:
  %v0_471e0 = load i64, i64* @rax, align 8
  ret i64 %v0_471e0
}

define i64 @function_471e5() local_unnamed_addr {
dec_label_pc_471e5:
  %v0_471e5 = load i64, i64* @rax, align 8
  ret i64 %v0_471e5
}

define i64 @function_471ea() local_unnamed_addr {
dec_label_pc_471ea:
  %v0_471ea = load i64, i64* @rax, align 8
  ret i64 %v0_471ea
}

define i64 @function_471ef() local_unnamed_addr {
dec_label_pc_471ef:
  %v0_471ef = load i64, i64* @rax, align 8
  ret i64 %v0_471ef
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib6ioreadEJPNS1_7VarargsEPNS2_10IoLib$FileES5_"(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_47200:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_47204 = load i64, i64* @rdx, align 8
  store i64 %v0_47204, i64* @rbx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v0_47204, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4735b(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_4735b:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg5, i64* @rax, align 8
  %v0_4735f = load i64, i64* @r13, align 8
  %v1_4735f = add i64 %v0_4735f, 8
  %v2_4735f = inttoptr i64 %v1_4735f to i32*
  %v3_4735f = load i32, i32* %v2_4735f, align 4
  %v5_4735f = trunc i64 %arg5 to i32
  %tmp5 = icmp ugt i32 %v3_4735f, %v5_4735f
  br i1 %tmp5, label %dec_label_pc_47369, label %bb

bb:                                               ; preds = %dec_label_pc_4735b
  %v3_47363 = call i64 @function_4766c()
  store i64 %v3_47363, i64* @rax, align 8
  %v0_4736e.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_47369

dec_label_pc_47369:                               ; preds = %dec_label_pc_4735b, %bb
  %v0_4736e = phi i64 [ %v0_4736e.pre, %bb ], [ %v0_4735f, %dec_label_pc_4735b ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_4736e, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_473b0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_473b0:
  store i64 %arg1, i64* @rbx, align 8
  %v0_473be = load i64, i64* @rax, align 8
  ret i64 %v0_473be
}

define i64 @function_473c0() local_unnamed_addr {
dec_label_pc_473c0:
  %rsi.global-to-local = alloca i64, align 8
  %v0_473c0 = load i64, i64* inttoptr (i64 291783 to i64*), align 8
  store i64 %v0_473c0, i64* @rcx, align 8
  %v0_473c7 = load i64, i64* @rdi, align 8
  %v1_473c7 = load i64, i64* %rsi.global-to-local, align 8
  %v2_473c7 = load i64, i64* @rdx, align 8
  %v5_473c7 = call i64 @function_4735b(i64 %v0_473c7, i64 %v1_473c7, i64 %v2_473c7, i64 %v0_473c0, i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_473c7, i64* @rax, align 8
  ret i64 %v5_473c7
}

define i64 @function_473d0() local_unnamed_addr {
dec_label_pc_473d0:
  %rsi.global-to-local = alloca i64, align 8
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  %v0_473d8 = load i64, i64* @rax, align 8
  store i64 %v0_473d8, i64* @rcx, align 8
  %v1_473db = load i64, i64* %rsi.global-to-local, align 8
  %v2_473db = load i64, i64* @rdx, align 8
  %v5_473db = call i64 @function_4735b(i64 %tmp231, i64 %v1_473db, i64 %v2_473db, i64 %v0_473d8, i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_473db, i64* @rax, align 8
  ret i64 %v5_473db
}

define i64 @function_473e0() local_unnamed_addr {
dec_label_pc_473e0:
  store i64 291815, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_47490() local_unnamed_addr {
dec_label_pc_47490:
  store i64 291991, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_474b8(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_474b8:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 292031, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_47580(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_47580:
  %tmp232 = call i64 @__decompiler_undefined_function_0()
  %v0_4758a = load i64, i64* @rax, align 8
  store i64 %v0_4758a, i64* @rcx, align 8
  %v2_4758d = load i64, i64* @rdx, align 8
  %v5_4758d = call i64 @function_4735b(i64 %tmp232, i64 0, i64 %v2_4758d, i64 %v0_4758a, i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_4758d, i64* @rax, align 8
  ret i64 %v5_4758d
}

define i64 @function_47592(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_47592:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 292249, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_47660() local_unnamed_addr {
dec_label_pc_47660:
  %v0_47660 = load i64, i64* inttoptr (i64 292455 to i64*), align 8
  store i64 %v0_47660, i64* @rax, align 8
  %v6_47667 = call i64 @function_473b0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_47667, i64* @rax, align 8
  ret i64 %v6_47667
}

define i64 @function_4766c() local_unnamed_addr {
dec_label_pc_4766c:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_47670() local_unnamed_addr {
dec_label_pc_47670:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib5IoLib8_io_readEJPNS1_7VarargsES5_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_47680:
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_47680 = load i64, i64* %rbp.global-to-local, align 8
  %v0_47681 = load i64, i64* @rbx, align 8
  %v0_47682 = load i64, i64* @rdi, align 8
  store i64 %v0_47682, i64* @rbx, align 8
  %v0_47685 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_47685, i64* %rbp.global-to-local, align 8
  %v1_4768c = add i64 %v0_47682, 24
  %v2_4768c = inttoptr i64 %v1_4768c to i64*
  %v3_4768c = load i64, i64* %v2_4768c, align 8
  store i64 %v3_4768c, i64* @rdi, align 8
  %v1_47690 = icmp eq i64 %v3_4768c, 0
  br i1 %v1_47690, label %dec_label_pc_476c0, label %dec_label_pc_47695

dec_label_pc_47695:                               ; preds = %dec_label_pc_476c0, %dec_label_pc_47680
  %v0_47695 = phi i64 [ %v0_47695.pre, %dec_label_pc_476c0 ], [ %v3_4768c, %dec_label_pc_47680 ]
  %v1_47695 = inttoptr i64 %v0_47695 to i64*
  %v2_47695 = load i64, i64* %v1_47695, align 8
  store i64 %v2_47695, i64* @rax, align 8
  %v4_4769e = trunc i64 %v2_47695 to i8
  %v5_4769e = icmp eq i8 %v4_4769e, 0
  %v1_476a0 = icmp eq i1 %v5_4769e, false
  br i1 %v1_476a0, label %dec_label_pc_476e1, label %dec_label_pc_476a2

dec_label_pc_476a2:                               ; preds = %dec_label_pc_47695
  %v0_476a2 = load i64, i64* @rbx, align 8
  %v1_476a2 = add i64 %v0_476a2, 24
  %v2_476a2 = inttoptr i64 %v1_476a2 to i64*
  %v3_476a2 = load i64, i64* %v2_476a2, align 8
  store i64 %v3_476a2, i64* %rsi.global-to-local, align 8
  %v0_476a6 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_476a6, i64* @rdx, align 8
  store i64 %v0_476a2, i64* @rdi, align 8
  store i64 %v0_47681, i64* @rbx, align 8
  store i64 %v0_47680, i64* %rbp.global-to-local, align 8
  ret i64 %v2_47695

dec_label_pc_476c0:                               ; preds = %dec_label_pc_47680
  %v0_476c0 = load i64, i64* inttoptr (i64 292551 to i64*), align 8
  store i64 %v0_476c0, i64* @rcx, align 8
  %v0_476c7 = load i64, i64* inttoptr (i64 292558 to i64*), align 8
  store i64 %v0_476c7, i64* @rdx, align 8
  store i64 0, i64* %rsi.global-to-local, align 8
  %v0_476d8 = load i64, i64* @rax, align 8
  store i64 %v0_476d8, i64* @rdi, align 8
  store i64 %v0_476d8, i64* %v2_4768c, align 8
  %v0_47695.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_47695

dec_label_pc_476e1:                               ; preds = %dec_label_pc_47695
  ret i64 %v2_47695
}

define i64 @_ZN3org4luaj3vm23lib5IoLib10_file_readEJPNS1_7VarargsEPNS1_8LuaValueES5_(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_476f0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 %arg2, i64* @rbx, align 8
  store i64 %arg2, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_47750() local_unnamed_addr {
dec_label_pc_47750:
  store i64 1, i64* @rdi, align 8
  %v0_47766 = load i64, i64* @rax, align 8
  ret i64 %v0_47766
}

define i64 @"_ZN4lang14lang_luaj$77$78onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_47770:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_47777 = load i64, i64* @rbx, align 8
  %v2_47778 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_47778, i64* @rax, align 8
  %v0_4777b = load i64, i64* @rdi, align 8
  store i64 %v0_4777b, i64* @rbx, align 8
  store i64 %v2_47778, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_4778c = add i64 %v0_4777b, 24
  %v2_4778c = inttoptr i64 %v1_4778c to i64*
  %v3_4778c = load i64, i64* %v2_4778c, align 8
  store i64 %v3_4778c, i64* @rdi, align 8
  %v1_47790 = inttoptr i64 %v3_4778c to i64*
  %v2_47790 = load i64, i64* %v1_47790, align 8
  store i64 %v2_47790, i64* @rax, align 8
  %v1_47799 = inttoptr i64 %v2_47790 to i64*
  %v2_47799 = load i64, i64* %v1_47799, align 8
  store i64 %v2_47799, i64* @rdx, align 8
  store i64 %v2_47790, i64* @rdi, align 8
  %v4_477a5 = trunc i64 %v2_47790 to i8
  %v5_477a5 = icmp eq i8 %v4_477a5, 0
  br i1 %v5_477a5, label %dec_label_pc_477c0, label %dec_label_pc_477a9

dec_label_pc_477a9:                               ; preds = %dec_label_pc_47770
  %v0_477a9 = load i64, i64* inttoptr (i64 292784 to i64*), align 16
  store i64 %v0_477a9, i64* @rax, align 8
  store i64 %v0_47777, i64* @rbx, align 8
  ret i64 %v0_477a9

dec_label_pc_477c0:                               ; preds = %dec_label_pc_47770
  %v1_477c0 = add i64 %v0_4777b, 32
  %v2_477c0 = inttoptr i64 %v1_477c0 to i64*
  %v3_477c0 = load i64, i64* %v2_477c0, align 8
  store i64 %v3_477c0, i64* @rdi, align 8
  %v1_477c4 = inttoptr i64 %v3_477c0 to i64*
  %v2_477c4 = load i64, i64* %v1_477c4, align 8
  store i64 %v2_477c4, i64* @rax, align 8
  store i64 %v2_477c4, i64* @rbp, align 8
  %v1_477d0 = inttoptr i64 %v2_477c4 to i64*
  %v2_477d0 = load i64, i64* %v1_477d0, align 8
  store i64 %v2_477d0, i64* @rax, align 8
  %v0_477d3 = load i64, i64* inttoptr (i64 292826 to i64*), align 8
  store i64 %v0_477d3, i64* %rsi.global-to-local, align 8
  store i64 %v2_477c4, i64* @rdi, align 8
  %v4_477e3 = trunc i64 %v2_477d0 to i8
  %v5_477e3 = icmp eq i8 %v4_477e3, 0
  br i1 %v5_477e3, label %bb, label %dec_label_pc_477eb

bb:                                               ; preds = %dec_label_pc_477c0
  %v1_477e5 = call i64 @function_479b0()
  store i64 %v1_477e5, i64* @rax, align 8
  %v0_477eb.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_477eb

dec_label_pc_477eb:                               ; preds = %bb, %dec_label_pc_477c0
  %v0_477eb = phi i64 [ %v0_477eb.pre, %bb ], [ %v0_4777b, %dec_label_pc_477c0 ]
  %v1_477eb = add i64 %v0_477eb, 48
  %v2_477eb = inttoptr i64 %v1_477eb to i64*
  %v3_477eb = load i64, i64* %v2_477eb, align 8
  store i64 %v3_477eb, i64* @rdi, align 8
  %v0_477ef = load i64, i64* inttoptr (i64 292854 to i64*), align 8
  store i64 %v0_477ef, i64* %rsi.global-to-local, align 8
  store i64 292870, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_479b0() local_unnamed_addr {
dec_label_pc_479b0:
  %v0_479b0 = load i64, i64* @rbx, align 8
  %v1_479b0 = add i64 %v0_479b0, 40
  %v2_479b0 = inttoptr i64 %v1_479b0 to i64*
  %v3_479b0 = load i64, i64* %v2_479b0, align 8
  store i64 %v3_479b0, i64* @rdi, align 8
  %v1_479b7 = inttoptr i64 %v3_479b0 to i64*
  %v2_479b7 = load i64, i64* %v1_479b7, align 8
  store i64 %v2_479b7, i64* @rax, align 8
  ret i64 %v2_479b7
}

define i64 @function_479c8(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_479c8:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %v0_479c8 = load i64, i64* @rbx, align 8
  %v1_479c8 = add i64 %v0_479c8, 104
  %v2_479c8 = inttoptr i64 %v1_479c8 to i64*
  %v3_479c8 = load i64, i64* %v2_479c8, align 8
  store i64 %v3_479c8, i64* @rax, align 8
  %v1_479cc = add i64 %v3_479c8, 8
  %v2_479cc = inttoptr i64 %v1_479cc to i32*
  %v3_479cc = load i32, i32* %v2_479cc, align 4
  %v5_479d0 = icmp eq i32 %v3_479cc, 0
  br i1 %v5_479d0, label %bb, label %dec_label_pc_479d9

bb:                                               ; preds = %dec_label_pc_479c8
  %v1_479d3 = load i64, i64* @rdi, align 8
  %v2_479d3 = call i64 @function_47a9f(i64 %v1_479d3)
  store i64 %v2_479d3, i64* @rax, align 8
  br label %dec_label_pc_479d9

dec_label_pc_479d9:                               ; preds = %bb, %dec_label_pc_479c8
  %v2_479dd = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_479dd, i64* @rax, align 8
  store i64 %v2_479dd, i64* @rdi, align 8
  %v0_479ea = load i64, i64* %r14.global-to-local, align 8
  %v1_479ea = add i64 %v0_479ea, 8
  %v2_479ea = inttoptr i64 %v1_479ea to i32*
  %v3_479ea = load i32, i32* %v2_479ea, align 4
  %v4_479ea = zext i32 %v3_479ea to i64
  store i64 %v4_479ea, i64* @rdi, align 8
  %v7_479ee = icmp eq i32 %v3_479ea, 0
  br i1 %v7_479ee, label %bb244, label %dec_label_pc_479f6

bb244:                                            ; preds = %dec_label_pc_479d9
  %v3_479f0 = call i64 @function_47a9f(i64 0)
  store i64 %v3_479f0, i64* @rax, align 8
  %v0_479f6.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_479f6

dec_label_pc_479f6:                               ; preds = %bb244, %dec_label_pc_479d9
  %v0_479f6 = phi i64 [ %v0_479f6.pre, %bb244 ], [ %v0_479ea, %dec_label_pc_479d9 ]
  %v1_479f6 = add i64 %v0_479f6, 16
  %v2_479f6 = inttoptr i64 %v1_479f6 to i64*
  %v3_479f6 = load i64, i64* %v2_479f6, align 8
  store i64 %v3_479f6, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  store i64 %arg5, i64* %r14.global-to-local, align 8
  ret i64 %v3_479f6
}

define i64 @function_47a08() local_unnamed_addr {
dec_label_pc_47a08:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %v0_47a08 = load i64, i64* @rbx, align 8
  %v1_47a08 = add i64 %v0_47a08, 88
  %v2_47a08 = inttoptr i64 %v1_47a08 to i64*
  %v3_47a08 = load i64, i64* %v2_47a08, align 8
  store i64 %v3_47a08, i64* @rdi, align 8
  %v1_47a0c = inttoptr i64 %v3_47a08 to i64*
  %v2_47a0c = load i64, i64* %v1_47a0c, align 8
  store i64 %v2_47a0c, i64* @rax, align 8
  %v1_47a15 = add i64 %v0_47a08, 112
  %v2_47a15 = inttoptr i64 %v1_47a15 to i64*
  %v3_47a15 = load i64, i64* %v2_47a15, align 8
  store i64 %v3_47a15, i64* @rax, align 8
  %v1_47a19 = add i64 %v3_47a15, 8
  %v2_47a19 = inttoptr i64 %v1_47a19 to i32*
  %v3_47a19 = load i32, i32* %v2_47a19, align 4
  %v5_47a1c = icmp eq i32 %v3_47a19, 0
  br i1 %v5_47a1c, label %bb, label %dec_label_pc_47a20

bb:                                               ; preds = %dec_label_pc_47a08
  %v2_47a1e = call i64 @function_47a9f(i64 %v3_47a08)
  store i64 %v2_47a1e, i64* @rax, align 8
  %v0_47a3d.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_47a20

dec_label_pc_47a20:                               ; preds = %bb, %dec_label_pc_47a08
  %v0_47a6b = phi i64 [ %v0_47a3d.pre, %bb ], [ %v0_47a08, %dec_label_pc_47a08 ]
  %v0_47a20 = phi i64 [ %v2_47a1e, %bb ], [ %v3_47a15, %dec_label_pc_47a08 ]
  %v1_47a20 = add i64 %v0_47a20, 16
  %v2_47a20 = inttoptr i64 %v1_47a20 to i64*
  %v3_47a20 = load i64, i64* %v2_47a20, align 8
  store i64 %v3_47a20, i64* @rdi, align 8
  %v1_47a24 = inttoptr i64 %v3_47a20 to i64*
  %v2_47a24 = load i64, i64* %v1_47a24, align 8
  store i64 %v2_47a24, i64* @rax, align 8
  %v2_47a2d = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_47a2d, i64* @rdx, align 8
  store i64 %v2_47a2d, i64* @rdi, align 8
  %v1_47a3d = add i64 %v0_47a6b, 88
  %v2_47a3d = inttoptr i64 %v1_47a3d to i64*
  %v3_47a3d = load i64, i64* %v2_47a3d, align 8
  store i64 %v3_47a3d, i64* @rdi, align 8
  %v1_47a41 = inttoptr i64 %v3_47a3d to i64*
  %v2_47a41 = load i64, i64* %v1_47a41, align 8
  store i64 %v2_47a41, i64* @rax, align 8
  %v1_47a4a = add i64 %v0_47a6b, 24
  %v2_47a4a = inttoptr i64 %v1_47a4a to i64*
  %v3_47a4a = load i64, i64* %v2_47a4a, align 8
  store i64 %v3_47a4a, i64* @rdi, align 8
  %v1_47a4e = inttoptr i64 %v3_47a4a to i64*
  %v2_47a4e = load i64, i64* %v1_47a4e, align 8
  store i64 %v2_47a4e, i64* @rax, align 8
  %v1_47a57 = inttoptr i64 %v2_47a4e to i64*
  %v2_47a57 = load i64, i64* %v1_47a57, align 8
  store i64 %v2_47a57, i64* @rdx, align 8
  store i64 %v2_47a4e, i64* @rdi, align 8
  %v1_47a6b = add i64 %v0_47a6b, 32
  %v2_47a6b = inttoptr i64 %v1_47a6b to i64*
  %v3_47a6b = load i64, i64* %v2_47a6b, align 8
  store i64 %v3_47a6b, i64* @rdi, align 8
  %v1_47a6f = inttoptr i64 %v3_47a6b to i64*
  %v2_47a6f = load i64, i64* %v1_47a6f, align 8
  store i64 %v2_47a6f, i64* @rax, align 8
  %v1_47a78 = inttoptr i64 %v2_47a6f to i64*
  %v2_47a78 = load i64, i64* %v1_47a78, align 8
  store i64 %v2_47a78, i64* @rdx, align 8
  store i64 %v2_47a6f, i64* @rdi, align 8
  %v0_47a93 = load i64, i64* %r14.global-to-local, align 8
  %v1_47a93 = add i64 %v0_47a93, 8
  %v2_47a93 = inttoptr i64 %v1_47a93 to i32*
  %v3_47a93 = load i32, i32* %v2_47a93, align 4
  %v4_47a93 = zext i32 %v3_47a93 to i64
  store i64 %v4_47a93, i64* @rcx, align 8
  ret i64 %v2_47a6f
}

define i64 @function_47a9f(i64 %arg1) local_unnamed_addr {
dec_label_pc_47a9f:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$76$78onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_47ab0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_47ab7 = load i64, i64* @rbx, align 8
  %v2_47ab8 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_47ab8, i64* @rax, align 8
  %v0_47abb = load i64, i64* @rdi, align 8
  store i64 %v0_47abb, i64* @rbx, align 8
  store i64 %v2_47ab8, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_47acc = add i64 %v0_47abb, 24
  %v2_47acc = inttoptr i64 %v1_47acc to i64*
  %v3_47acc = load i64, i64* %v2_47acc, align 8
  store i64 %v3_47acc, i64* @rdi, align 8
  %v1_47ad0 = inttoptr i64 %v3_47acc to i64*
  %v2_47ad0 = load i64, i64* %v1_47ad0, align 8
  store i64 %v2_47ad0, i64* @rax, align 8
  %v1_47ad9 = inttoptr i64 %v2_47ad0 to i64*
  %v2_47ad9 = load i64, i64* %v1_47ad9, align 8
  store i64 %v2_47ad9, i64* @rdx, align 8
  store i64 %v2_47ad0, i64* @rdi, align 8
  %v4_47ae5 = trunc i64 %v2_47ad0 to i8
  %v5_47ae5 = icmp eq i8 %v4_47ae5, 0
  br i1 %v5_47ae5, label %dec_label_pc_47b00, label %dec_label_pc_47ae9

dec_label_pc_47ae9:                               ; preds = %dec_label_pc_47ab0
  %v0_47ae9 = load i64, i64* inttoptr (i64 293616 to i64*), align 16
  store i64 %v0_47ae9, i64* @rax, align 8
  store i64 %v0_47ab7, i64* @rbx, align 8
  ret i64 %v0_47ae9

dec_label_pc_47b00:                               ; preds = %dec_label_pc_47ab0
  %v1_47b00 = add i64 %v0_47abb, 32
  %v2_47b00 = inttoptr i64 %v1_47b00 to i64*
  %v3_47b00 = load i64, i64* %v2_47b00, align 8
  store i64 %v3_47b00, i64* @rdi, align 8
  %v1_47b04 = inttoptr i64 %v3_47b00 to i64*
  %v2_47b04 = load i64, i64* %v1_47b04, align 8
  store i64 %v2_47b04, i64* @rax, align 8
  store i64 %v2_47b04, i64* @rbp, align 8
  %v1_47b10 = inttoptr i64 %v2_47b04 to i64*
  %v2_47b10 = load i64, i64* %v1_47b10, align 8
  store i64 %v2_47b10, i64* @rax, align 8
  %v0_47b13 = load i64, i64* inttoptr (i64 293658 to i64*), align 8
  store i64 %v0_47b13, i64* %rsi.global-to-local, align 8
  store i64 %v2_47b04, i64* @rdi, align 8
  %v4_47b23 = trunc i64 %v2_47b10 to i8
  %v5_47b23 = icmp eq i8 %v4_47b23, 0
  br i1 %v5_47b23, label %bb, label %dec_label_pc_47b2b

bb:                                               ; preds = %dec_label_pc_47b00
  %v1_47b25 = call i64 @function_47cf0()
  store i64 %v1_47b25, i64* @rax, align 8
  %v0_47b2b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_47b2b

dec_label_pc_47b2b:                               ; preds = %bb, %dec_label_pc_47b00
  %v0_47b2b = phi i64 [ %v0_47b2b.pre, %bb ], [ %v0_47abb, %dec_label_pc_47b00 ]
  %v1_47b2b = add i64 %v0_47b2b, 48
  %v2_47b2b = inttoptr i64 %v1_47b2b to i64*
  %v3_47b2b = load i64, i64* %v2_47b2b, align 8
  store i64 %v3_47b2b, i64* @rdi, align 8
  %v0_47b2f = load i64, i64* inttoptr (i64 293686 to i64*), align 8
  store i64 %v0_47b2f, i64* %rsi.global-to-local, align 8
  store i64 293702, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_47cf0() local_unnamed_addr {
dec_label_pc_47cf0:
  %v0_47cf0 = load i64, i64* @rbx, align 8
  %v1_47cf0 = add i64 %v0_47cf0, 40
  %v2_47cf0 = inttoptr i64 %v1_47cf0 to i64*
  %v3_47cf0 = load i64, i64* %v2_47cf0, align 8
  store i64 %v3_47cf0, i64* @rdi, align 8
  %v1_47cf7 = inttoptr i64 %v3_47cf0 to i64*
  %v2_47cf7 = load i64, i64* %v1_47cf7, align 8
  store i64 %v2_47cf7, i64* @rax, align 8
  ret i64 %v2_47cf7
}

define i64 @function_47d08(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_47d08:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %v0_47d08 = load i64, i64* @rbx, align 8
  %v1_47d08 = add i64 %v0_47d08, 104
  %v2_47d08 = inttoptr i64 %v1_47d08 to i64*
  %v3_47d08 = load i64, i64* %v2_47d08, align 8
  store i64 %v3_47d08, i64* @rax, align 8
  %v1_47d0c = add i64 %v3_47d08, 8
  %v2_47d0c = inttoptr i64 %v1_47d0c to i32*
  %v3_47d0c = load i32, i32* %v2_47d0c, align 4
  %v5_47d10 = icmp eq i32 %v3_47d0c, 0
  br i1 %v5_47d10, label %bb, label %dec_label_pc_47d19

bb:                                               ; preds = %dec_label_pc_47d08
  %v1_47d13 = load i64, i64* @rdi, align 8
  %v2_47d13 = call i64 @function_47ddf(i64 %v1_47d13)
  store i64 %v2_47d13, i64* @rax, align 8
  br label %dec_label_pc_47d19

dec_label_pc_47d19:                               ; preds = %bb, %dec_label_pc_47d08
  %v2_47d1d = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_47d1d, i64* @rax, align 8
  store i64 %v2_47d1d, i64* @rdi, align 8
  %v0_47d2a = load i64, i64* %r14.global-to-local, align 8
  %v1_47d2a = add i64 %v0_47d2a, 8
  %v2_47d2a = inttoptr i64 %v1_47d2a to i32*
  %v3_47d2a = load i32, i32* %v2_47d2a, align 4
  %v4_47d2a = zext i32 %v3_47d2a to i64
  store i64 %v4_47d2a, i64* @rdi, align 8
  %v7_47d2e = icmp eq i32 %v3_47d2a, 0
  br i1 %v7_47d2e, label %bb244, label %dec_label_pc_47d36

bb244:                                            ; preds = %dec_label_pc_47d19
  %v3_47d30 = call i64 @function_47ddf(i64 0)
  store i64 %v3_47d30, i64* @rax, align 8
  %v0_47d36.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_47d36

dec_label_pc_47d36:                               ; preds = %bb244, %dec_label_pc_47d19
  %v0_47d36 = phi i64 [ %v0_47d36.pre, %bb244 ], [ %v0_47d2a, %dec_label_pc_47d19 ]
  %v1_47d36 = add i64 %v0_47d36, 16
  %v2_47d36 = inttoptr i64 %v1_47d36 to i64*
  %v3_47d36 = load i64, i64* %v2_47d36, align 8
  store i64 %v3_47d36, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  store i64 %arg5, i64* %r14.global-to-local, align 8
  ret i64 %v3_47d36
}

define i64 @function_47d48() local_unnamed_addr {
dec_label_pc_47d48:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %v0_47d48 = load i64, i64* @rbx, align 8
  %v1_47d48 = add i64 %v0_47d48, 88
  %v2_47d48 = inttoptr i64 %v1_47d48 to i64*
  %v3_47d48 = load i64, i64* %v2_47d48, align 8
  store i64 %v3_47d48, i64* @rdi, align 8
  %v1_47d4c = inttoptr i64 %v3_47d48 to i64*
  %v2_47d4c = load i64, i64* %v1_47d4c, align 8
  store i64 %v2_47d4c, i64* @rax, align 8
  %v1_47d55 = add i64 %v0_47d48, 112
  %v2_47d55 = inttoptr i64 %v1_47d55 to i64*
  %v3_47d55 = load i64, i64* %v2_47d55, align 8
  store i64 %v3_47d55, i64* @rax, align 8
  %v1_47d59 = add i64 %v3_47d55, 8
  %v2_47d59 = inttoptr i64 %v1_47d59 to i32*
  %v3_47d59 = load i32, i32* %v2_47d59, align 4
  %v5_47d5c = icmp eq i32 %v3_47d59, 0
  br i1 %v5_47d5c, label %bb, label %dec_label_pc_47d60

bb:                                               ; preds = %dec_label_pc_47d48
  %v2_47d5e = call i64 @function_47ddf(i64 %v3_47d48)
  store i64 %v2_47d5e, i64* @rax, align 8
  %v0_47d7d.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_47d60

dec_label_pc_47d60:                               ; preds = %bb, %dec_label_pc_47d48
  %v0_47dab = phi i64 [ %v0_47d7d.pre, %bb ], [ %v0_47d48, %dec_label_pc_47d48 ]
  %v0_47d60 = phi i64 [ %v2_47d5e, %bb ], [ %v3_47d55, %dec_label_pc_47d48 ]
  %v1_47d60 = add i64 %v0_47d60, 16
  %v2_47d60 = inttoptr i64 %v1_47d60 to i64*
  %v3_47d60 = load i64, i64* %v2_47d60, align 8
  store i64 %v3_47d60, i64* @rdi, align 8
  %v1_47d64 = inttoptr i64 %v3_47d60 to i64*
  %v2_47d64 = load i64, i64* %v1_47d64, align 8
  store i64 %v2_47d64, i64* @rax, align 8
  %v2_47d6d = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_47d6d, i64* @rdx, align 8
  store i64 %v2_47d6d, i64* @rdi, align 8
  %v1_47d7d = add i64 %v0_47dab, 88
  %v2_47d7d = inttoptr i64 %v1_47d7d to i64*
  %v3_47d7d = load i64, i64* %v2_47d7d, align 8
  store i64 %v3_47d7d, i64* @rdi, align 8
  %v1_47d81 = inttoptr i64 %v3_47d7d to i64*
  %v2_47d81 = load i64, i64* %v1_47d81, align 8
  store i64 %v2_47d81, i64* @rax, align 8
  %v1_47d8a = add i64 %v0_47dab, 24
  %v2_47d8a = inttoptr i64 %v1_47d8a to i64*
  %v3_47d8a = load i64, i64* %v2_47d8a, align 8
  store i64 %v3_47d8a, i64* @rdi, align 8
  %v1_47d8e = inttoptr i64 %v3_47d8a to i64*
  %v2_47d8e = load i64, i64* %v1_47d8e, align 8
  store i64 %v2_47d8e, i64* @rax, align 8
  %v1_47d97 = inttoptr i64 %v2_47d8e to i64*
  %v2_47d97 = load i64, i64* %v1_47d97, align 8
  store i64 %v2_47d97, i64* @rdx, align 8
  store i64 %v2_47d8e, i64* @rdi, align 8
  %v1_47dab = add i64 %v0_47dab, 32
  %v2_47dab = inttoptr i64 %v1_47dab to i64*
  %v3_47dab = load i64, i64* %v2_47dab, align 8
  store i64 %v3_47dab, i64* @rdi, align 8
  %v1_47daf = inttoptr i64 %v3_47dab to i64*
  %v2_47daf = load i64, i64* %v1_47daf, align 8
  store i64 %v2_47daf, i64* @rax, align 8
  %v1_47db8 = inttoptr i64 %v2_47daf to i64*
  %v2_47db8 = load i64, i64* %v1_47db8, align 8
  store i64 %v2_47db8, i64* @rdx, align 8
  store i64 %v2_47daf, i64* @rdi, align 8
  %v0_47dd3 = load i64, i64* %r14.global-to-local, align 8
  %v1_47dd3 = add i64 %v0_47dd3, 8
  %v2_47dd3 = inttoptr i64 %v1_47dd3 to i32*
  %v3_47dd3 = load i32, i32* %v2_47dd3, align 4
  %v4_47dd3 = zext i32 %v3_47dd3 to i64
  store i64 %v4_47dd3, i64* @rcx, align 8
  ret i64 %v2_47daf
}

define i64 @function_47ddf(i64 %arg1) local_unnamed_addr {
dec_label_pc_47ddf:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$448onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_47df0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 294402, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_48250() local_unnamed_addr {
dec_label_pc_48250:
  %v0_48250 = load i64, i64* @r15, align 8
  %v1_48250 = add i64 %v0_48250, 72
  %v2_48250 = inttoptr i64 %v1_48250 to i64*
  %v3_48250 = load i64, i64* %v2_48250, align 8
  store i64 %v3_48250, i64* @rax, align 8
  %v1_48254 = add i64 %v3_48250, 8
  %v2_48254 = inttoptr i64 %v1_48254 to i32*
  %v3_48254 = load i32, i32* %v2_48254, align 4
  %v4_48254 = zext i32 %v3_48254 to i64
  store i64 %v4_48254, i64* @rdi, align 8
  %v7_48257 = icmp eq i32 %v3_48254, 0
  br i1 %v7_48257, label %bb, label %dec_label_pc_4825f

bb:                                               ; preds = %dec_label_pc_48250
  %v3_48259 = call i64 @function_48d30(i64 0)
  store i64 %v3_48259, i64* @rax, align 8
  br label %dec_label_pc_4825f

dec_label_pc_4825f:                               ; preds = %bb, %dec_label_pc_48250
  %v0_48262 = phi i64 [ %v3_48259, %bb ], [ %v3_48250, %dec_label_pc_48250 ]
  %v0_4825f = load i64, i64* @rbx, align 8
  %v1_4825f = add i64 %v0_4825f, 8
  %v2_4825f = inttoptr i64 %v1_4825f to i32*
  %v3_4825f = load i32, i32* %v2_4825f, align 4
  %v1_48262 = add i64 %v0_48262, 16
  %v2_48262 = inttoptr i64 %v1_48262 to i64*
  %v3_48262 = load i64, i64* %v2_48262, align 8
  store i64 %v3_48262, i64* @rdi, align 8
  %v5_48266 = icmp eq i32 %v3_4825f, 0
  br i1 %v5_48266, label %bb29, label %dec_label_pc_4826e

bb29:                                             ; preds = %dec_label_pc_4825f
  %v2_48268 = call i64 @function_48d30(i64 %v3_48262)
  store i64 %v2_48268, i64* @rax, align 8
  br label %dec_label_pc_4826e

dec_label_pc_4826e:                               ; preds = %bb29, %dec_label_pc_4825f
  %v1_4826e = inttoptr i64 %v3_48262 to i64*
  %v2_4826e = load i64, i64* %v1_4826e, align 8
  store i64 %v2_4826e, i64* @rax, align 8
  %v0_4827b = load i64, i64* @r13, align 8
  %v1_4827b = add i64 %v0_4827b, 8
  %v2_4827b = inttoptr i64 %v1_4827b to i32*
  %v3_4827b = load i32, i32* %v2_4827b, align 4
  %v4_4827b = zext i32 %v3_4827b to i64
  store i64 %v4_4827b, i64* @rcx, align 8
  %v5_48282 = icmp eq i32 %v3_4827b, 0
  br i1 %v5_48282, label %bb30, label %dec_label_pc_4828a

bb30:                                             ; preds = %dec_label_pc_4826e
  %v2_48284 = call i64 @function_48d30(i64 %v3_48262)
  store i64 %v2_48284, i64* @rax, align 8
  %v0_4828a.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_4828a

dec_label_pc_4828a:                               ; preds = %bb30, %dec_label_pc_4826e
  %v0_4828a = phi i64 [ %v0_4828a.pre, %bb30 ], [ %v0_4827b, %dec_label_pc_4826e ]
  %v1_4828a = add i64 %v0_4828a, 16
  %v2_4828a = inttoptr i64 %v1_4828a to i64*
  %v3_4828a = load i64, i64* %v2_4828a, align 8
  store i64 %v3_4828a, i64* @rdi, align 8
  %v1_48291 = inttoptr i64 %v3_4828a to i64*
  %v2_48291 = load i64, i64* %v1_48291, align 8
  store i64 %v2_48291, i64* @rax, align 8
  %v1_4829a = inttoptr i64 %v2_48291 to i64*
  %v2_4829a = load i64, i64* %v1_4829a, align 8
  store i64 %v2_4829a, i64* @rdx, align 8
  store i64 %v2_48291, i64* @rdi, align 8
  %v4_482ad = trunc i64 %v2_48291 to i8
  %v5_482ad = icmp eq i8 %v4_482ad, 0
  %v1_482af = icmp eq i1 %v5_482ad, false
  br i1 %v1_482af, label %bb31, label %dec_label_pc_482b5

bb31:                                             ; preds = %dec_label_pc_4828a
  %v2_482af = call i64 @function_48400()
  store i64 %v2_482af, i64* @rax, align 8
  br label %dec_label_pc_482b5

dec_label_pc_482b5:                               ; preds = %bb31, %dec_label_pc_4828a
  %v2_482b5 = load i64, i64* @rbp, align 8
  store i64 %v2_482b5, i64* @rax, align 8
  store i64 %v2_482b5, i64* @rdi, align 8
  store i64 %v2_482b5, i64* @rdx, align 8
  store i64 %v2_482b5, i64* @rdi, align 8
  %v4_482d8 = trunc i64 %v2_482b5 to i8
  %v5_482d8 = icmp eq i8 %v4_482d8, 0
  %v1_482da = icmp eq i1 %v5_482d8, false
  br i1 %v1_482da, label %bb32, label %dec_label_pc_482e0

bb32:                                             ; preds = %dec_label_pc_482b5
  %v3_482da = call i64 @function_48450(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_482da, i64* @rax, align 8
  %v2_482e0.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_482e0

dec_label_pc_482e0:                               ; preds = %bb32, %dec_label_pc_482b5
  %v2_482e0 = phi i64 [ %v2_482e0.pre, %bb32 ], [ %v2_482b5, %dec_label_pc_482b5 ]
  store i64 %v2_482e0, i64* @rax, align 8
  store i64 %v2_482e0, i64* @rdi, align 8
  %v0_482e7 = load i64, i64* inttoptr (i64 295662 to i64*), align 8
  store i64 %v0_482e7, i64* @rdx, align 8
  %v0_482f7 = load i64, i64* @r14, align 8
  %v1_482f7 = add i64 %v0_482f7, 8
  %v2_482f7 = inttoptr i64 %v1_482f7 to i32*
  %v3_482f7 = load i32, i32* %v2_482f7, align 4
  %v4_482f7 = zext i32 %v3_482f7 to i64
  store i64 %v4_482f7, i64* @r11, align 8
  %v0_482fb = load i64, i64* @r15, align 8
  %v1_482fb = add i64 %v0_482fb, 40
  %v2_482fb = inttoptr i64 %v1_482fb to i64*
  %v3_482fb = load i64, i64* %v2_482fb, align 8
  store i64 %v3_482fb, i64* @rdi, align 8
  %v5_482ff = icmp eq i32 %v3_482f7, 0
  br i1 %v5_482ff, label %bb33, label %dec_label_pc_48308

bb33:                                             ; preds = %dec_label_pc_482e0
  %v2_48302 = call i64 @function_48d30(i64 %v3_482fb)
  store i64 %v2_48302, i64* @rax, align 8
  br label %dec_label_pc_48308

dec_label_pc_48308:                               ; preds = %bb33, %dec_label_pc_482e0
  %v0_48308 = load i64, i64* @rbx, align 8
  %v1_48308 = add i64 %v0_48308, 8
  %v2_48308 = inttoptr i64 %v1_48308 to i32*
  %v3_48308 = load i32, i32* %v2_48308, align 4
  %v5_48310 = icmp eq i32 %v3_48308, 0
  br i1 %v5_48310, label %bb34, label %dec_label_pc_48319

bb34:                                             ; preds = %dec_label_pc_48308
  %v2_48313 = call i64 @function_48d30(i64 %v3_482fb)
  store i64 %v2_48313, i64* @rax, align 8
  %v0_4831c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_48319

dec_label_pc_48319:                               ; preds = %bb34, %dec_label_pc_48308
  %v0_4831c = phi i64 [ %v0_4831c.pre, %bb34 ], [ %v0_48308, %dec_label_pc_48308 ]
  %v1_48319 = inttoptr i64 %v3_482fb to i64*
  %v2_48319 = load i64, i64* %v1_48319, align 8
  store i64 %v2_48319, i64* @rax, align 8
  %v1_4831c = add i64 %v0_4831c, 16
  %v2_4831c = inttoptr i64 %v1_4831c to i64*
  %v3_4831c = load i64, i64* %v2_4831c, align 8
  store i64 %v3_4831c, i64* @rdx, align 8
  %v0_48326 = load i64, i64* @r15, align 8
  %v1_48326 = add i64 %v0_48326, 280
  %v2_48326 = inttoptr i64 %v1_48326 to i64*
  %v3_48326 = load i64, i64* %v2_48326, align 8
  store i64 %v3_48326, i64* @rax, align 8
  %v1_4832d = add i64 %v3_48326, 8
  %v2_4832d = inttoptr i64 %v1_4832d to i32*
  %v3_4832d = load i32, i32* %v2_4832d, align 4
  %v5_48331 = icmp eq i32 %v3_4832d, 0
  br i1 %v5_48331, label %bb35, label %dec_label_pc_4833a

bb35:                                             ; preds = %dec_label_pc_48319
  %v2_48334 = call i64 @function_48d30(i64 %v3_482fb)
  store i64 %v2_48334, i64* @rax, align 8
  %v0_4833a.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4833a

dec_label_pc_4833a:                               ; preds = %bb35, %dec_label_pc_48319
  %v0_4833e = phi i64 [ %v2_48334, %bb35 ], [ %v3_48326, %dec_label_pc_48319 ]
  %v0_4833a = phi i64 [ %v0_4833a.pre, %bb35 ], [ %v0_4831c, %dec_label_pc_48319 ]
  %v1_4833a = add i64 %v0_4833a, 8
  %v2_4833a = inttoptr i64 %v1_4833a to i32*
  %v3_4833a = load i32, i32* %v2_4833a, align 4
  %v1_4833e = add i64 %v0_4833e, 16
  %v2_4833e = inttoptr i64 %v1_4833e to i64*
  %v3_4833e = load i64, i64* %v2_4833e, align 8
  store i64 %v3_4833e, i64* @rdi, align 8
  %v5_48342 = icmp eq i32 %v3_4833a, 0
  br i1 %v5_48342, label %bb36, label %dec_label_pc_4834b

bb36:                                             ; preds = %dec_label_pc_4833a
  %v2_48345 = call i64 @function_48d30(i64 %v3_4833e)
  store i64 %v2_48345, i64* @rax, align 8
  %v0_4834e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4834b

dec_label_pc_4834b:                               ; preds = %bb36, %dec_label_pc_4833a
  %v0_4834e = phi i64 [ %v0_4834e.pre, %bb36 ], [ %v0_4833a, %dec_label_pc_4833a ]
  %v1_4834b = inttoptr i64 %v3_4833e to i64*
  %v2_4834b = load i64, i64* %v1_4834b, align 8
  store i64 %v2_4834b, i64* @rax, align 8
  %v1_48358 = add i64 %v0_4834e, 8
  %v2_48358 = inttoptr i64 %v1_48358 to i32*
  %v3_48358 = load i32, i32* %v2_48358, align 4
  %v5_4835e = icmp eq i32 %v3_48358, 0
  br i1 %v5_4835e, label %bb37, label %dec_label_pc_48366

bb37:                                             ; preds = %dec_label_pc_4834b
  %v2_48360 = call i64 @function_48d30(i64 %v3_4833e)
  store i64 %v2_48360, i64* @rax, align 8
  %v0_48369.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_48366

dec_label_pc_48366:                               ; preds = %bb37, %dec_label_pc_4834b
  %v0_48369 = phi i64 [ %v0_48369.pre, %bb37 ], [ %v0_4834e, %dec_label_pc_4834b ]
  store i64 %v0_48369, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_48386(i64 %arg1) local_unnamed_addr {
dec_label_pc_48386:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  %v0_48389 = load i64, i64* @rbx, align 8
  store i64 %arg1, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_4839f = trunc i64 %arg1 to i8
  %v5_4839f = icmp eq i8 %v4_4839f, 0
  %v1_483a1 = icmp eq i1 %v5_4839f, false
  br i1 %v1_483a1, label %bb, label %dec_label_pc_483a7

bb:                                               ; preds = %dec_label_pc_48386
  %v2_483a1 = call i64 @function_48250()
  store i64 %v2_483a1, i64* @rax, align 8
  %v0_483a7.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_483a7

dec_label_pc_483a7:                               ; preds = %bb, %dec_label_pc_48386
  %v4_483b95 = phi i64 [ %v2_483a1, %bb ], [ %arg1, %dec_label_pc_48386 ]
  %v0_483a7 = phi i64 [ %v0_483a7.pre, %bb ], [ %v0_48389, %dec_label_pc_48386 ]
  %v1_483a7 = add i64 %v0_483a7, 8
  %v2_483a7 = inttoptr i64 %v1_483a7 to i32*
  %v3_483a7 = load i32, i32* %v2_483a7, align 4
  %v4_483a7 = zext i32 %v3_483a7 to i64
  store i64 %v4_483a7, i64* @rdx, align 8
  %v5_483aa = icmp eq i32 %v3_483a7, 0
  br i1 %v5_483aa, label %bb240, label %dec_label_pc_483b2

bb240:                                            ; preds = %dec_label_pc_483a7
  %v2_483ac = call i64 @function_48d30(i64 %arg1)
  store i64 %v2_483ac, i64* @rax, align 8
  br label %dec_label_pc_483b2

dec_label_pc_483b2:                               ; preds = %bb240, %dec_label_pc_483a7
  %v4_483b9 = phi i64 [ %v2_483ac, %bb240 ], [ %v4_483b95, %dec_label_pc_483a7 ]
  store i64 295865, i64* @rdi, align 8
  ret i64 %v4_483b9
}

define i64 @function_483eb(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_483eb:
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg5, i64* @r14, align 8
  store i64 %arg6, i64* @r15, align 8
  %v0_483f9 = load i64, i64* @rax, align 8
  ret i64 %v0_483f9
}

define i64 @function_48400() local_unnamed_addr {
dec_label_pc_48400:
  store i64 295943, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_48409 = load i64, i64* inttoptr (i64 295952 to i64*), align 16
  store i64 %v0_48409, i64* @rbp, align 8
  ret i64 0
}

define i64 @function_48450(i64 %arg1) local_unnamed_addr {
dec_label_pc_48450:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %tmp101 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @rax, align 8
  %v1_48454 = add i64 %arg1, 8
  %v2_48454 = inttoptr i64 %v1_48454 to i32*
  %v3_48454 = load i32, i32* %v2_48454, align 4
  %v4_48454 = zext i32 %v3_48454 to i64
  store i64 %v4_48454, i64* @rdx, align 8
  %v5_48457 = icmp eq i32 %v3_48454, 0
  br i1 %v5_48457, label %bb, label %dec_label_pc_4845f

bb:                                               ; preds = %dec_label_pc_48450
  %v1_48459 = load i64, i64* @rdi, align 8
  %v2_48459 = call i64 @function_48d30(i64 %v1_48459)
  store i64 %v2_48459, i64* @rax, align 8
  br label %dec_label_pc_4845f

dec_label_pc_4845f:                               ; preds = %bb, %dec_label_pc_48450
  %v0_4845f = phi i64 [ %v2_48459, %bb ], [ %arg1, %dec_label_pc_48450 ]
  %v1_4845f = add i64 %v0_4845f, 16
  %v2_4845f = inttoptr i64 %v1_4845f to i64*
  %v3_4845f = load i64, i64* %v2_4845f, align 8
  store i64 %v3_4845f, i64* @rdi, align 8
  %v0_48463 = load i64, i64* inttoptr (i64 296042 to i64*), align 8
  store i64 %v0_48463, i64* @rdx, align 8
  %v1_48471 = inttoptr i64 %v3_4845f to i64*
  %v2_48471 = load i64, i64* %v1_48471, align 8
  store i64 %v2_48471, i64* @rax, align 8
  %v0_4847a = load i64, i64* @rbx, align 8
  %v1_4847a = add i64 %v0_4847a, 8
  %v2_4847a = inttoptr i64 %v1_4847a to i32*
  %v3_4847a = load i32, i32* %v2_4847a, align 4
  %v4_4847a = zext i32 %v3_4847a to i64
  store i64 %v4_4847a, i64* @rax, align 8
  %v0_4847d = load i64, i64* @r15, align 8
  %v1_4847d = add i64 %v0_4847d, 80
  %v2_4847d = inttoptr i64 %v1_4847d to i64*
  %v3_4847d = load i64, i64* %v2_4847d, align 8
  store i64 %v3_4847d, i64* @rdi, align 8
  %v5_48481 = icmp eq i32 %v3_4847a, 0
  br i1 %v5_48481, label %bb112, label %dec_label_pc_48489

bb112:                                            ; preds = %dec_label_pc_4845f
  %v2_48483 = call i64 @function_48d30(i64 %v3_4847d)
  store i64 %v2_48483, i64* @rax, align 8
  %v0_4848c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_48489

dec_label_pc_48489:                               ; preds = %bb112, %dec_label_pc_4845f
  %v0_4848c = phi i64 [ %v0_4848c.pre, %bb112 ], [ %v0_4847a, %dec_label_pc_4845f ]
  %v1_48489 = inttoptr i64 %v3_4847d to i64*
  %v2_48489 = load i64, i64* %v1_48489, align 8
  store i64 %v2_48489, i64* @rax, align 8
  %v1_48496 = inttoptr i64 %v2_48489 to i64*
  %v2_48496 = load i64, i64* %v1_48496, align 8
  store i64 %v2_48496, i64* @rdx, align 8
  store i64 %v2_48489, i64* @rdi, align 8
  %v4_484a2 = trunc i64 %v2_48489 to i8
  %v5_484a2 = icmp eq i8 %v4_484a2, 0
  %v1_484a4 = icmp eq i1 %v5_484a2, false
  br i1 %v1_484a4, label %bb113, label %dec_label_pc_484aa

bb113:                                            ; preds = %dec_label_pc_48489
  %v3_484a4 = call i64 @function_48d10(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_484a4, i64* @rax, align 8
  %v0_484aa.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_484aa

dec_label_pc_484aa:                               ; preds = %bb113, %dec_label_pc_48489
  %v0_484aa = phi i64 [ %v0_484aa.pre, %bb113 ], [ %v0_4848c, %dec_label_pc_48489 ]
  %v1_484aa = add i64 %v0_484aa, 8
  %v2_484aa = inttoptr i64 %v1_484aa to i32*
  %v3_484aa = load i32, i32* %v2_484aa, align 4
  %v4_484aa = zext i32 %v3_484aa to i64
  store i64 %v4_484aa, i64* @rax, align 8
  %v0_484ad = load i64, i64* @r15, align 8
  %v1_484ad = add i64 %v0_484ad, 88
  %v2_484ad = inttoptr i64 %v1_484ad to i64*
  %v3_484ad = load i64, i64* %v2_484ad, align 8
  store i64 %v3_484ad, i64* @rdi, align 8
  %v5_484b1 = icmp eq i32 %v3_484aa, 0
  br i1 %v5_484b1, label %bb114, label %dec_label_pc_484b9

bb114:                                            ; preds = %dec_label_pc_484aa
  %v2_484b3 = call i64 @function_48d30(i64 %v3_484ad)
  store i64 %v2_484b3, i64* @rax, align 8
  %v0_484bc.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_484b9

dec_label_pc_484b9:                               ; preds = %bb114, %dec_label_pc_484aa
  %v0_484bc = phi i64 [ %v0_484bc.pre, %bb114 ], [ %v0_484aa, %dec_label_pc_484aa ]
  %v1_484b9 = inttoptr i64 %v3_484ad to i64*
  %v2_484b9 = load i64, i64* %v1_484b9, align 8
  store i64 %v2_484b9, i64* @rax, align 8
  %v1_484c6 = inttoptr i64 %v2_484b9 to i64*
  %v2_484c6 = load i64, i64* %v1_484c6, align 8
  store i64 %v2_484c6, i64* @rdx, align 8
  store i64 %v2_484b9, i64* @rdi, align 8
  %v4_484d2 = trunc i64 %v2_484b9 to i8
  %v5_484d2 = icmp eq i8 %v4_484d2, 0
  br i1 %v5_484d2, label %bb115, label %dec_label_pc_484da

bb115:                                            ; preds = %dec_label_pc_484b9
  %v1_484d4 = call i64 @function_48c98()
  store i64 %v1_484d4, i64* @rax, align 8
  %v0_484da.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_484da

dec_label_pc_484da:                               ; preds = %bb115, %dec_label_pc_484b9
  %v0_484da = phi i64 [ %v0_484da.pre, %bb115 ], [ %v0_484bc, %dec_label_pc_484b9 ]
  %v1_484da = add i64 %v0_484da, 8
  %v2_484da = inttoptr i64 %v1_484da to i32*
  %v3_484da = load i32, i32* %v2_484da, align 4
  %v4_484da = zext i32 %v3_484da to i64
  store i64 %v4_484da, i64* @rax, align 8
  %v0_484dd = load i64, i64* @r15, align 8
  %v1_484dd = add i64 %v0_484dd, 96
  %v2_484dd = inttoptr i64 %v1_484dd to i64*
  %v3_484dd = load i64, i64* %v2_484dd, align 8
  store i64 %v3_484dd, i64* @rdi, align 8
  %v5_484e1 = icmp eq i32 %v3_484da, 0
  br i1 %v5_484e1, label %bb116, label %dec_label_pc_484e9

bb116:                                            ; preds = %dec_label_pc_484da
  %v2_484e3 = call i64 @function_48d30(i64 %v3_484dd)
  store i64 %v2_484e3, i64* @rax, align 8
  %v0_484ec.pre = load i64, i64* @rbx, align 8
  %v0_484fd.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_484e9

dec_label_pc_484e9:                               ; preds = %bb116, %dec_label_pc_484da
  %v0_484fd = phi i64 [ %v0_484fd.pre, %bb116 ], [ %v0_484dd, %dec_label_pc_484da ]
  %v0_484ec = phi i64 [ %v0_484ec.pre, %bb116 ], [ %v0_484da, %dec_label_pc_484da ]
  %v1_484e9 = inttoptr i64 %v3_484dd to i64*
  %v2_484e9 = load i64, i64* %v1_484e9, align 8
  store i64 %v2_484e9, i64* @rax, align 8
  %v1_484f6 = add i64 %v0_484ec, 8
  %v2_484f6 = inttoptr i64 %v1_484f6 to i32*
  %v3_484f6 = load i32, i32* %v2_484f6, align 4
  %v4_484f6 = zext i32 %v3_484f6 to i64
  store i64 %v4_484f6, i64* %r14.global-to-local, align 8
  store i64 %v2_484e9, i64* @r12, align 8
  %v1_484fd = add i64 %v0_484fd, 104
  %v2_484fd = inttoptr i64 %v1_484fd to i64*
  %v3_484fd = load i64, i64* %v2_484fd, align 8
  store i64 %v3_484fd, i64* @rdi, align 8
  %v5_48501 = icmp eq i32 %v3_484f6, 0
  br i1 %v5_48501, label %bb117, label %dec_label_pc_4850a

bb117:                                            ; preds = %dec_label_pc_484e9
  %v2_48504 = call i64 @function_48d30(i64 %v3_484fd)
  store i64 %v2_48504, i64* @rax, align 8
  br label %dec_label_pc_4850a

dec_label_pc_4850a:                               ; preds = %bb117, %dec_label_pc_484e9
  %v1_4850a = inttoptr i64 %v3_484fd to i64*
  %v2_4850a = load i64, i64* %v1_4850a, align 8
  store i64 %v2_4850a, i64* @rax, align 8
  store i64 11, i64* @rdi, align 8
  %v3_48521 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 11)
  store i64 %v3_48521, i64* @rax, align 8
  store i64 %v3_48521, i64* @rbx, align 8
  %v0_48529 = load i64, i64* @r15, align 8
  %v1_48529 = add i64 %v0_48529, 112
  %v2_48529 = inttoptr i64 %v1_48529 to i64*
  %v3_48529 = load i64, i64* %v2_48529, align 8
  store i64 %v3_48529, i64* @rax, align 8
  %v1_4852d = add i64 %v3_48529, 8
  %v2_4852d = inttoptr i64 %v1_4852d to i32*
  %v3_4852d = load i32, i32* %v2_4852d, align 4
  %v4_4852d = zext i32 %v3_4852d to i64
  store i64 %v4_4852d, i64* %r13.global-to-local, align 8
  %v5_48531 = icmp eq i32 %v3_4852d, 0
  br i1 %v5_48531, label %bb118, label %dec_label_pc_4853a

bb118:                                            ; preds = %dec_label_pc_4850a
  %v3_48534 = call i64 @function_48d30(i64 11)
  store i64 %v3_48534, i64* @rax, align 8
  %v0_4853e.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_4853a

dec_label_pc_4853a:                               ; preds = %bb118, %dec_label_pc_4850a
  %v0_4853e = phi i64 [ %v0_4853e.pre, %bb118 ], [ %v0_48529, %dec_label_pc_4850a ]
  %v0_4853a = phi i64 [ %v3_48534, %bb118 ], [ %v3_48529, %dec_label_pc_4850a ]
  %v1_4853a = add i64 %v0_4853a, 16
  %v2_4853a = inttoptr i64 %v1_4853a to i64*
  %v3_4853a = load i64, i64* %v2_4853a, align 8
  store i64 %v3_4853a, i64* @rdx, align 8
  %v1_4853e = add i64 %v0_4853e, 120
  %v2_4853e = inttoptr i64 %v1_4853e to i64*
  %v3_4853e = load i64, i64* %v2_4853e, align 8
  store i64 %v3_4853e, i64* @rax, align 8
  %v1_48542 = add i64 %v3_4853e, 8
  %v2_48542 = inttoptr i64 %v1_48542 to i32*
  %v3_48542 = load i32, i32* %v2_48542, align 4
  %v4_48542 = zext i32 %v3_48542 to i64
  store i64 %v4_48542, i64* %rbp.global-to-local, align 8
  %v5_48545 = icmp eq i32 %v3_48542, 0
  br i1 %v5_48545, label %bb119, label %dec_label_pc_4854d

bb119:                                            ; preds = %dec_label_pc_4853a
  %v3_48547 = call i64 @function_48d30(i64 11)
  store i64 %v3_48547, i64* @rax, align 8
  %v0_48551.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_4854d

dec_label_pc_4854d:                               ; preds = %bb119, %dec_label_pc_4853a
  %v0_48551 = phi i64 [ %v0_48551.pre, %bb119 ], [ %v0_4853e, %dec_label_pc_4853a ]
  %v0_4854d = phi i64 [ %v3_48547, %bb119 ], [ %v3_4853e, %dec_label_pc_4853a ]
  %v1_4854d = add i64 %v0_4854d, 16
  %v2_4854d = inttoptr i64 %v1_4854d to i64*
  %v3_4854d = load i64, i64* %v2_4854d, align 8
  store i64 %v3_4854d, i64* %rbp.global-to-local, align 8
  %v1_48551 = add i64 %v0_48551, 128
  %v2_48551 = inttoptr i64 %v1_48551 to i64*
  %v3_48551 = load i64, i64* %v2_48551, align 8
  store i64 %v3_48551, i64* @rax, align 8
  %v1_48558 = add i64 %v3_48551, 8
  %v2_48558 = inttoptr i64 %v1_48558 to i32*
  %v3_48558 = load i32, i32* %v2_48558, align 4
  %v4_48558 = zext i32 %v3_48558 to i64
  store i64 %v4_48558, i64* @r11, align 8
  %v5_4855c = icmp eq i32 %v3_48558, 0
  br i1 %v5_4855c, label %bb120, label %dec_label_pc_48565

bb120:                                            ; preds = %dec_label_pc_4854d
  %v3_4855f = call i64 @function_48d30(i64 11)
  store i64 %v3_4855f, i64* @rax, align 8
  %v0_48569.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_48565

dec_label_pc_48565:                               ; preds = %bb120, %dec_label_pc_4854d
  %v0_48569 = phi i64 [ %v0_48569.pre, %bb120 ], [ %v0_48551, %dec_label_pc_4854d ]
  %v0_48565 = phi i64 [ %v3_4855f, %bb120 ], [ %v3_48551, %dec_label_pc_4854d ]
  %v1_48565 = add i64 %v0_48565, 16
  %v2_48565 = inttoptr i64 %v1_48565 to i64*
  %v3_48565 = load i64, i64* %v2_48565, align 8
  store i64 %v3_48565, i64* %r14.global-to-local, align 8
  %v1_48569 = add i64 %v0_48569, 136
  %v2_48569 = inttoptr i64 %v1_48569 to i64*
  %v3_48569 = load i64, i64* %v2_48569, align 8
  store i64 %v3_48569, i64* @rax, align 8
  %v1_48570 = add i64 %v3_48569, 8
  %v2_48570 = inttoptr i64 %v1_48570 to i32*
  %v3_48570 = load i32, i32* %v2_48570, align 4
  %v5_48574 = icmp eq i32 %v3_48570, 0
  br i1 %v5_48574, label %bb121, label %dec_label_pc_4857d

bb121:                                            ; preds = %dec_label_pc_48565
  %v3_48577 = call i64 @function_48d30(i64 11)
  store i64 %v3_48577, i64* @rax, align 8
  %v0_48581.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_4857d

dec_label_pc_4857d:                               ; preds = %bb121, %dec_label_pc_48565
  %v0_48581 = phi i64 [ %v0_48581.pre, %bb121 ], [ %v0_48569, %dec_label_pc_48565 ]
  %v0_4857d = phi i64 [ %v3_48577, %bb121 ], [ %v3_48569, %dec_label_pc_48565 ]
  %v1_4857d = add i64 %v0_4857d, 16
  %v2_4857d = inttoptr i64 %v1_4857d to i64*
  %v3_4857d = load i64, i64* %v2_4857d, align 8
  store i64 %v3_4857d, i64* %r13.global-to-local, align 8
  %v1_48581 = add i64 %v0_48581, 144
  %v2_48581 = inttoptr i64 %v1_48581 to i64*
  %v3_48581 = load i64, i64* %v2_48581, align 8
  store i64 %v3_48581, i64* @rax, align 8
  %v1_48588 = add i64 %v3_48581, 8
  %v2_48588 = inttoptr i64 %v1_48588 to i32*
  %v3_48588 = load i32, i32* %v2_48588, align 4
  %v5_4858c = icmp eq i32 %v3_48588, 0
  br i1 %v5_4858c, label %bb122, label %dec_label_pc_48595

bb122:                                            ; preds = %dec_label_pc_4857d
  %v3_4858f = call i64 @function_48d30(i64 11)
  store i64 %v3_4858f, i64* @rax, align 8
  %v0_4859e.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_48595

dec_label_pc_48595:                               ; preds = %bb122, %dec_label_pc_4857d
  %v0_4859e = phi i64 [ %v0_4859e.pre, %bb122 ], [ %v0_48581, %dec_label_pc_4857d ]
  %v0_48595 = phi i64 [ %v3_4858f, %bb122 ], [ %v3_48581, %dec_label_pc_4857d ]
  %v1_48595 = add i64 %v0_48595, 16
  %v2_48595 = inttoptr i64 %v1_48595 to i64*
  %v3_48595 = load i64, i64* %v2_48595, align 8
  store i64 %v3_48595, i64* @rax, align 8
  %v1_4859e = add i64 %v0_4859e, 152
  %v2_4859e = inttoptr i64 %v1_4859e to i64*
  %v3_4859e = load i64, i64* %v2_4859e, align 8
  store i64 %v3_4859e, i64* @rax, align 8
  %v1_485a5 = add i64 %v3_4859e, 8
  %v2_485a5 = inttoptr i64 %v1_485a5 to i32*
  %v3_485a5 = load i32, i32* %v2_485a5, align 4
  %v5_485a9 = icmp eq i32 %v3_485a5, 0
  br i1 %v5_485a9, label %bb123, label %dec_label_pc_485b2

bb123:                                            ; preds = %dec_label_pc_48595
  %v3_485ac = call i64 @function_48d30(i64 11)
  store i64 %v3_485ac, i64* @rax, align 8
  %v0_485b6.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_485b2

dec_label_pc_485b2:                               ; preds = %bb123, %dec_label_pc_48595
  %v0_485b6 = phi i64 [ %v0_485b6.pre, %bb123 ], [ %v0_4859e, %dec_label_pc_48595 ]
  %v0_485b2 = phi i64 [ %v3_485ac, %bb123 ], [ %v3_4859e, %dec_label_pc_48595 ]
  %v1_485b2 = add i64 %v0_485b2, 16
  %v2_485b2 = inttoptr i64 %v1_485b2 to i64*
  %v3_485b2 = load i64, i64* %v2_485b2, align 8
  store i64 %v3_485b2, i64* @rcx, align 8
  %v1_485b6 = add i64 %v0_485b6, 160
  %v2_485b6 = inttoptr i64 %v1_485b6 to i64*
  %v3_485b6 = load i64, i64* %v2_485b6, align 8
  store i64 %v3_485b6, i64* @rax, align 8
  %v1_485bd = add i64 %v3_485b6, 8
  %v2_485bd = inttoptr i64 %v1_485bd to i32*
  %v3_485bd = load i32, i32* %v2_485bd, align 4
  %v4_485bd = zext i32 %v3_485bd to i64
  store i64 %v4_485bd, i64* @rdi, align 8
  %v7_485c5 = icmp eq i32 %v3_485bd, 0
  br i1 %v7_485c5, label %bb124, label %dec_label_pc_485cd

bb124:                                            ; preds = %dec_label_pc_485b2
  %v3_485c7 = call i64 @function_48d30(i64 0)
  store i64 %v3_485c7, i64* @rax, align 8
  %v0_485d1.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_485cd

dec_label_pc_485cd:                               ; preds = %bb124, %dec_label_pc_485b2
  %v0_485d1 = phi i64 [ %v0_485d1.pre, %bb124 ], [ %v0_485b6, %dec_label_pc_485b2 ]
  %v0_485cd = phi i64 [ %v3_485c7, %bb124 ], [ %v3_485b6, %dec_label_pc_485b2 ]
  %v1_485cd = add i64 %v0_485cd, 16
  %v2_485cd = inttoptr i64 %v1_485cd to i64*
  %v3_485cd = load i64, i64* %v2_485cd, align 8
  %v1_485d1 = add i64 %v0_485d1, 168
  %v2_485d1 = inttoptr i64 %v1_485d1 to i64*
  %v3_485d1 = load i64, i64* %v2_485d1, align 8
  store i64 %v3_485d1, i64* @rax, align 8
  %v1_485dd = add i64 %v3_485d1, 8
  %v2_485dd = inttoptr i64 %v1_485dd to i32*
  %v3_485dd = load i32, i32* %v2_485dd, align 4
  %v5_485e0 = icmp eq i32 %v3_485dd, 0
  br i1 %v5_485e0, label %bb125, label %dec_label_pc_485e8

bb125:                                            ; preds = %dec_label_pc_485cd
  %v2_485e2 = sext i32 %v3_485bd to i64
  %v3_485e2 = call i64 @function_48d30(i64 %v2_485e2)
  store i64 %v3_485e2, i64* @rax, align 8
  %v0_485ec.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_485e8

dec_label_pc_485e8:                               ; preds = %bb125, %dec_label_pc_485cd
  %v0_485ec = phi i64 [ %v0_485ec.pre, %bb125 ], [ %v0_485d1, %dec_label_pc_485cd ]
  %v0_485e8 = phi i64 [ %v3_485e2, %bb125 ], [ %v3_485d1, %dec_label_pc_485cd ]
  %v1_485e8 = add i64 %v0_485e8, 16
  %v2_485e8 = inttoptr i64 %v1_485e8 to i64*
  %v3_485e8 = load i64, i64* %v2_485e8, align 8
  store i64 %v3_485e8, i64* @rdi, align 8
  %v1_485ec = add i64 %v0_485ec, 176
  %v2_485ec = inttoptr i64 %v1_485ec to i64*
  %v3_485ec = load i64, i64* %v2_485ec, align 8
  store i64 %v3_485ec, i64* @rax, align 8
  %v1_485f3 = add i64 %v3_485ec, 8
  %v2_485f3 = inttoptr i64 %v1_485f3 to i32*
  %v3_485f3 = load i32, i32* %v2_485f3, align 4
  %v4_485f3 = zext i32 %v3_485f3 to i64
  store i64 %v4_485f3, i64* @rcx, align 8
  %v5_485fb = icmp eq i32 %v3_485f3, 0
  br i1 %v5_485fb, label %bb126, label %dec_label_pc_48603

bb126:                                            ; preds = %dec_label_pc_485e8
  %v2_485fd = call i64 @function_48d30(i64 %v3_485e8)
  store i64 %v2_485fd, i64* @rax, align 8
  %v0_48607.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_48603

dec_label_pc_48603:                               ; preds = %bb126, %dec_label_pc_485e8
  %v0_48607 = phi i64 [ %v0_48607.pre, %bb126 ], [ %v0_485ec, %dec_label_pc_485e8 ]
  %v0_48603 = phi i64 [ %v2_485fd, %bb126 ], [ %v3_485ec, %dec_label_pc_485e8 ]
  %v1_48603 = add i64 %v0_48603, 16
  %v2_48603 = inttoptr i64 %v1_48603 to i64*
  %v3_48603 = load i64, i64* %v2_48603, align 8
  %v1_48607 = add i64 %v0_48607, 184
  %v2_48607 = inttoptr i64 %v1_48607 to i64*
  %v3_48607 = load i64, i64* %v2_48607, align 8
  store i64 %v3_48607, i64* @rax, align 8
  %v1_4860e = add i64 %v3_48607, 8
  %v2_4860e = inttoptr i64 %v1_4860e to i32*
  %v3_4860e = load i32, i32* %v2_4860e, align 4
  %v4_4860e = zext i32 %v3_4860e to i64
  store i64 %v4_4860e, i64* @r11, align 8
  %v5_48617 = icmp eq i32 %v3_4860e, 0
  br i1 %v5_48617, label %bb127, label %dec_label_pc_48620

bb127:                                            ; preds = %dec_label_pc_48603
  %v2_4861a = call i64 @function_48d30(i64 %v3_485e8)
  store i64 %v2_4861a, i64* @rax, align 8
  %v0_48624.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_48620

dec_label_pc_48620:                               ; preds = %bb127, %dec_label_pc_48603
  %v0_48624 = phi i64 [ %v0_48624.pre, %bb127 ], [ %v0_48607, %dec_label_pc_48603 ]
  %v0_48620 = phi i64 [ %v2_4861a, %bb127 ], [ %v3_48607, %dec_label_pc_48603 ]
  %v1_48620 = add i64 %v0_48620, 16
  %v2_48620 = inttoptr i64 %v1_48620 to i64*
  %v3_48620 = load i64, i64* %v2_48620, align 8
  %v1_48624 = add i64 %v0_48624, 192
  %v2_48624 = inttoptr i64 %v1_48624 to i64*
  %v3_48624 = load i64, i64* %v2_48624, align 8
  store i64 %v3_48624, i64* @rax, align 8
  %v1_48630 = add i64 %v3_48624, 8
  %v2_48630 = inttoptr i64 %v1_48630 to i32*
  %v3_48630 = load i32, i32* %v2_48630, align 4
  %v5_48634 = icmp eq i32 %v3_48630, 0
  br i1 %v5_48634, label %bb128, label %dec_label_pc_4863d

bb128:                                            ; preds = %dec_label_pc_48620
  %v2_48637 = call i64 @function_48d30(i64 %v3_485e8)
  store i64 %v2_48637, i64* @rax, align 8
  br label %dec_label_pc_4863d

dec_label_pc_4863d:                               ; preds = %bb128, %dec_label_pc_48620
  %v0_4863d = phi i64 [ %v2_48637, %bb128 ], [ %v3_48624, %dec_label_pc_48620 ]
  %v1_4863d = add i64 %v0_4863d, 16
  %v2_4863d = inttoptr i64 %v1_4863d to i64*
  %v3_4863d = load i64, i64* %v2_4863d, align 8
  store i64 %v3_4863d, i64* @r11, align 8
  %v0_48641 = load i64, i64* @rbx, align 8
  %v1_48641 = inttoptr i64 %v0_48641 to i64*
  %v2_48641 = load i64, i64* %v1_48641, align 8
  store i64 %v2_48641, i64* @rax, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_48657 = load i64, i64* %v1_48641, align 8
  store i64 %v2_48657, i64* @rax, align 8
  %v0_4865a = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_4865a, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_4866b = load i64, i64* %v1_48641, align 8
  store i64 %v2_4866b, i64* @rax, align 8
  %v0_4866e = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_4866e, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_4867f = load i64, i64* %v1_48641, align 8
  store i64 %v2_4867f, i64* @rax, align 8
  %v0_48682 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_48682, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_48693 = load i64, i64* %v1_48641, align 8
  store i64 %v2_48693, i64* @rax, align 8
  store i64 %v3_48595, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_486a9 = load i64, i64* %v1_48641, align 8
  store i64 %v2_486a9, i64* @rax, align 8
  store i64 %v3_485b2, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_486bf = load i64, i64* %v1_48641, align 8
  store i64 %v2_486bf, i64* @rax, align 8
  store i64 %v3_485cd, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_486d5 = load i64, i64* %v1_48641, align 8
  store i64 %v2_486d5, i64* @rax, align 8
  store i64 %v3_485e8, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_486eb = load i64, i64* %v1_48641, align 8
  store i64 %v2_486eb, i64* @rax, align 8
  store i64 %v3_48603, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_48701 = load i64, i64* %v1_48641, align 8
  store i64 %v2_48701, i64* @rax, align 8
  store i64 %v3_48620, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v2_48717 = load i64, i64* %v1_48641, align 8
  store i64 %v2_48717, i64* @rax, align 8
  store i64 %v3_4863d, i64* @rdx, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v0_4872d = load i64, i64* inttoptr (i64 296756 to i64*), align 8
  store i64 %v0_4872d, i64* @r14, align 8
  %v0_48734 = load i64, i64* inttoptr (i64 296763 to i64*), align 8
  store i64 %v0_48734, i64* @rbp, align 8
  %v2_487b9 = load i64, i64* %v1_48641, align 8
  store i64 %v2_487b9, i64* @rax, align 8
  store i64 %v0_48641, i64* @rdi, align 8
  %v1_487c5 = inttoptr i64 %v0_4872d to i64*
  %v2_487c5 = load i64, i64* %v1_487c5, align 8
  store i64 %v2_487c5, i64* @rdx, align 8
  store i64 %v0_4872d, i64* @rdi, align 8
  %v4_487d4 = trunc i64 %v2_487b9 to i8
  %v5_487d4 = icmp eq i8 %v4_487d4, 0
  %v1_487d6 = icmp eq i1 %v5_487d4, false
  br i1 %v1_487d6, label %dec_label_pc_48740, label %dec_label_pc_487dc

dec_label_pc_48740:                               ; preds = %dec_label_pc_4863d
  ret i64 %v2_487b9

dec_label_pc_487dc:                               ; preds = %dec_label_pc_4863d
  %v1_487dc = inttoptr i64 %v0_48734 to i64*
  %v2_487dc = load i64, i64* %v1_487dc, align 8
  store i64 %v2_487dc, i64* @rax, align 8
  store i64 %v0_48734, i64* @rdi, align 8
  %v4_487e9 = trunc i64 %v2_487dc to i8
  %v5_487e9 = icmp eq i8 %v4_487e9, 0
  %v1_487eb = icmp eq i1 %v5_487e9, false
  br i1 %v1_487eb, label %bb129, label %dec_label_pc_487f1

bb129:                                            ; preds = %dec_label_pc_487dc
  %v3_487eb = call i64 @function_48d39(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_487eb, i64* @rax, align 8
  br label %dec_label_pc_487f1

dec_label_pc_487f1:                               ; preds = %bb129, %dec_label_pc_487dc
  %v0_487f1 = load i64, i64* @r15, align 8
  %v1_487f1 = add i64 %v0_487f1, 200
  %v2_487f1 = inttoptr i64 %v1_487f1 to i64*
  %v3_487f1 = load i64, i64* %v2_487f1, align 8
  store i64 %v3_487f1, i64* @rax, align 8
  %v1_487f8 = add i64 %v3_487f1, 8
  %v2_487f8 = inttoptr i64 %v1_487f8 to i32*
  %v3_487f8 = load i32, i32* %v2_487f8, align 4
  %v4_487f8 = zext i32 %v3_487f8 to i64
  store i64 %v4_487f8, i64* %r14.global-to-local, align 8
  %v5_487fc = icmp eq i32 %v3_487f8, 0
  br i1 %v5_487fc, label %bb130, label %dec_label_pc_48805

bb130:                                            ; preds = %dec_label_pc_487f1
  %v2_487ff = call i64 @function_48d30(i64 %v0_48734)
  store i64 %v2_487ff, i64* @rax, align 8
  %v0_48809.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_48805

dec_label_pc_48805:                               ; preds = %bb130, %dec_label_pc_487f1
  %v0_48809 = phi i64 [ %v0_48809.pre, %bb130 ], [ %v0_487f1, %dec_label_pc_487f1 ]
  %v0_48805 = phi i64 [ %v2_487ff, %bb130 ], [ %v3_487f1, %dec_label_pc_487f1 ]
  %v1_48805 = add i64 %v0_48805, 16
  %v2_48805 = inttoptr i64 %v1_48805 to i64*
  %v3_48805 = load i64, i64* %v2_48805, align 8
  store i64 %v3_48805, i64* @rdi, align 8
  %v1_48809 = add i64 %v0_48809, 232
  %v2_48809 = inttoptr i64 %v1_48809 to i64*
  %v3_48809 = load i64, i64* %v2_48809, align 8
  store i64 %v3_48809, i64* @rax, align 8
  %v1_48810 = add i64 %v3_48809, 8
  %v2_48810 = inttoptr i64 %v1_48810 to i32*
  %v3_48810 = load i32, i32* %v2_48810, align 4
  %v4_48810 = zext i32 %v3_48810 to i64
  store i64 %v4_48810, i64* %r13.global-to-local, align 8
  %v5_48814 = icmp eq i32 %v3_48810, 0
  br i1 %v5_48814, label %bb131, label %dec_label_pc_4881d

bb131:                                            ; preds = %dec_label_pc_48805
  %v2_48817 = call i64 @function_48d30(i64 %v3_48805)
  store i64 %v2_48817, i64* @rax, align 8
  br label %dec_label_pc_4881d

dec_label_pc_4881d:                               ; preds = %bb131, %dec_label_pc_48805
  %v0_4881d = phi i64 [ %v2_48817, %bb131 ], [ %v3_48809, %dec_label_pc_48805 ]
  %v1_4881d = add i64 %v0_4881d, 16
  %v2_4881d = inttoptr i64 %v1_4881d to i64*
  %v3_4881d = load i64, i64* %v2_4881d, align 8
  store i64 %v3_4881d, i64* @rdx, align 8
  %v1_48821 = inttoptr i64 %v3_48805 to i64*
  %v2_48821 = load i64, i64* %v1_48821, align 8
  store i64 %v2_48821, i64* @rax, align 8
  %v1_4882d = inttoptr i64 %v2_48821 to i64*
  %v2_4882d = load i64, i64* %v1_4882d, align 8
  store i64 %v2_4882d, i64* @rdx, align 8
  store i64 %v2_48821, i64* @rdi, align 8
  %v4_48839 = trunc i64 %v2_48821 to i8
  %v5_48839 = icmp eq i8 %v4_48839, 0
  %v1_4883b = icmp eq i1 %v5_48839, false
  br i1 %v1_4883b, label %bb132, label %dec_label_pc_48841

bb132:                                            ; preds = %dec_label_pc_4881d
  %v3_4883b = call i64 @function_48d10(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_4883b, i64* @rax, align 8
  br label %dec_label_pc_48841

dec_label_pc_48841:                               ; preds = %bb132, %dec_label_pc_4881d
  %v0_48841 = load i64, i64* @r15, align 8
  %v1_48841 = add i64 %v0_48841, 200
  %v2_48841 = inttoptr i64 %v1_48841 to i64*
  %v3_48841 = load i64, i64* %v2_48841, align 8
  store i64 %v3_48841, i64* @rax, align 8
  %v1_48848 = add i64 %v3_48841, 8
  %v2_48848 = inttoptr i64 %v1_48848 to i32*
  %v3_48848 = load i32, i32* %v2_48848, align 4
  %v4_48848 = zext i32 %v3_48848 to i64
  store i64 %v4_48848, i64* %rbp.global-to-local, align 8
  %v5_4884b = icmp eq i32 %v3_48848, 0
  br i1 %v5_4884b, label %bb133, label %dec_label_pc_48853

bb133:                                            ; preds = %dec_label_pc_48841
  %v2_4884d = call i64 @function_48d30(i64 %v2_48821)
  store i64 %v2_4884d, i64* @rax, align 8
  %v0_48857.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_48853

dec_label_pc_48853:                               ; preds = %bb133, %dec_label_pc_48841
  %v0_48857 = phi i64 [ %v0_48857.pre, %bb133 ], [ %v0_48841, %dec_label_pc_48841 ]
  %v0_48853 = phi i64 [ %v2_4884d, %bb133 ], [ %v3_48841, %dec_label_pc_48841 ]
  %v1_48853 = add i64 %v0_48853, 16
  %v2_48853 = inttoptr i64 %v1_48853 to i64*
  %v3_48853 = load i64, i64* %v2_48853, align 8
  store i64 %v3_48853, i64* @rdi, align 8
  %v1_48857 = add i64 %v0_48857, 240
  %v2_48857 = inttoptr i64 %v1_48857 to i64*
  %v3_48857 = load i64, i64* %v2_48857, align 8
  store i64 %v3_48857, i64* @rax, align 8
  %v1_4885e = add i64 %v3_48857, 8
  %v2_4885e = inttoptr i64 %v1_4885e to i32*
  %v3_4885e = load i32, i32* %v2_4885e, align 4
  %v4_4885e = zext i32 %v3_4885e to i64
  store i64 %v4_4885e, i64* @rbx, align 8
  %v5_48861 = icmp eq i32 %v3_4885e, 0
  br i1 %v5_48861, label %bb134, label %dec_label_pc_48869

bb134:                                            ; preds = %dec_label_pc_48853
  %v2_48863 = call i64 @function_48d30(i64 %v3_48853)
  store i64 %v2_48863, i64* @rax, align 8
  br label %dec_label_pc_48869

dec_label_pc_48869:                               ; preds = %bb134, %dec_label_pc_48853
  %v0_48869 = phi i64 [ %v2_48863, %bb134 ], [ %v3_48857, %dec_label_pc_48853 ]
  %v1_48869 = add i64 %v0_48869, 16
  %v2_48869 = inttoptr i64 %v1_48869 to i64*
  %v3_48869 = load i64, i64* %v2_48869, align 8
  store i64 %v3_48869, i64* @rdx, align 8
  %v1_4886d = inttoptr i64 %v3_48853 to i64*
  %v2_4886d = load i64, i64* %v1_4886d, align 8
  store i64 %v2_4886d, i64* @rax, align 8
  %v1_48879 = inttoptr i64 %v2_4886d to i64*
  %v2_48879 = load i64, i64* %v1_48879, align 8
  store i64 %v2_48879, i64* @rdx, align 8
  store i64 %v2_4886d, i64* @rdi, align 8
  %v4_48885 = trunc i64 %v2_4886d to i8
  %v5_48885 = icmp eq i8 %v4_48885, 0
  %v1_48887 = icmp eq i1 %v5_48885, false
  br i1 %v1_48887, label %bb135, label %dec_label_pc_4888d

bb135:                                            ; preds = %dec_label_pc_48869
  %v3_48887 = call i64 @function_48d10(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_48887, i64* @rax, align 8
  br label %dec_label_pc_4888d

dec_label_pc_4888d:                               ; preds = %bb135, %dec_label_pc_48869
  %v0_4888d = load i64, i64* @r15, align 8
  %v1_4888d = add i64 %v0_4888d, 200
  %v2_4888d = inttoptr i64 %v1_4888d to i64*
  %v3_4888d = load i64, i64* %v2_4888d, align 8
  store i64 %v3_4888d, i64* @rax, align 8
  %v1_48894 = add i64 %v3_4888d, 8
  %v2_48894 = inttoptr i64 %v1_48894 to i32*
  %v3_48894 = load i32, i32* %v2_48894, align 4
  %v4_48894 = zext i32 %v3_48894 to i64
  store i64 %v4_48894, i64* @r11, align 8
  %v5_48898 = icmp eq i32 %v3_48894, 0
  br i1 %v5_48898, label %bb136, label %dec_label_pc_488a1

bb136:                                            ; preds = %dec_label_pc_4888d
  %v2_4889b = call i64 @function_48d30(i64 %v2_4886d)
  store i64 %v2_4889b, i64* @rax, align 8
  %v0_488a5.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_488a1

dec_label_pc_488a1:                               ; preds = %bb136, %dec_label_pc_4888d
  %v0_488a5 = phi i64 [ %v0_488a5.pre, %bb136 ], [ %v0_4888d, %dec_label_pc_4888d ]
  %v0_488a1 = phi i64 [ %v2_4889b, %bb136 ], [ %v3_4888d, %dec_label_pc_4888d ]
  %v1_488a1 = add i64 %v0_488a1, 16
  %v2_488a1 = inttoptr i64 %v1_488a1 to i64*
  %v3_488a1 = load i64, i64* %v2_488a1, align 8
  store i64 %v3_488a1, i64* @rdi, align 8
  %v1_488a5 = add i64 %v0_488a5, 248
  %v2_488a5 = inttoptr i64 %v1_488a5 to i64*
  %v3_488a5 = load i64, i64* %v2_488a5, align 8
  store i64 %v3_488a5, i64* @rax, align 8
  %v1_488ac = add i64 %v3_488a5, 8
  %v2_488ac = inttoptr i64 %v1_488ac to i32*
  %v3_488ac = load i32, i32* %v2_488ac, align 4
  %v5_488b0 = icmp eq i32 %v3_488ac, 0
  br i1 %v5_488b0, label %bb137, label %dec_label_pc_488b9

bb137:                                            ; preds = %dec_label_pc_488a1
  %v2_488b3 = call i64 @function_48d30(i64 %v3_488a1)
  store i64 %v2_488b3, i64* @rax, align 8
  br label %dec_label_pc_488b9

dec_label_pc_488b9:                               ; preds = %bb137, %dec_label_pc_488a1
  %v0_488b9 = phi i64 [ %v2_488b3, %bb137 ], [ %v3_488a5, %dec_label_pc_488a1 ]
  %v1_488b9 = add i64 %v0_488b9, 16
  %v2_488b9 = inttoptr i64 %v1_488b9 to i64*
  %v3_488b9 = load i64, i64* %v2_488b9, align 8
  store i64 %v3_488b9, i64* @rdx, align 8
  %v1_488bd = inttoptr i64 %v3_488a1 to i64*
  %v2_488bd = load i64, i64* %v1_488bd, align 8
  store i64 %v2_488bd, i64* @rax, align 8
  %v1_488c9 = inttoptr i64 %v2_488bd to i64*
  %v2_488c9 = load i64, i64* %v1_488c9, align 8
  store i64 %v2_488c9, i64* @rdx, align 8
  store i64 %v2_488bd, i64* @rdi, align 8
  %v4_488d5 = trunc i64 %v2_488bd to i8
  %v5_488d5 = icmp eq i8 %v4_488d5, 0
  %v1_488d7 = icmp eq i1 %v5_488d5, false
  br i1 %v1_488d7, label %bb138, label %dec_label_pc_488dd

bb138:                                            ; preds = %dec_label_pc_488b9
  %v3_488d7 = call i64 @function_48d10(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_488d7, i64* @rax, align 8
  br label %dec_label_pc_488dd

dec_label_pc_488dd:                               ; preds = %bb138, %dec_label_pc_488b9
  %v0_488dd = load i64, i64* @r15, align 8
  %v1_488dd = add i64 %v0_488dd, 200
  %v2_488dd = inttoptr i64 %v1_488dd to i64*
  %v3_488dd = load i64, i64* %v2_488dd, align 8
  store i64 %v3_488dd, i64* @rax, align 8
  %v1_488e4 = add i64 %v3_488dd, 8
  %v2_488e4 = inttoptr i64 %v1_488e4 to i32*
  %v3_488e4 = load i32, i32* %v2_488e4, align 4
  %v5_488e8 = icmp eq i32 %v3_488e4, 0
  br i1 %v5_488e8, label %bb139, label %dec_label_pc_488f1

bb139:                                            ; preds = %dec_label_pc_488dd
  %v2_488eb = call i64 @function_48d30(i64 %v2_488bd)
  store i64 %v2_488eb, i64* @rax, align 8
  %v0_488f5.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_488f1

dec_label_pc_488f1:                               ; preds = %bb139, %dec_label_pc_488dd
  %v0_488f5 = phi i64 [ %v0_488f5.pre, %bb139 ], [ %v0_488dd, %dec_label_pc_488dd ]
  %v0_488f1 = phi i64 [ %v2_488eb, %bb139 ], [ %v3_488dd, %dec_label_pc_488dd ]
  %v1_488f1 = add i64 %v0_488f1, 16
  %v2_488f1 = inttoptr i64 %v1_488f1 to i64*
  %v3_488f1 = load i64, i64* %v2_488f1, align 8
  store i64 %v3_488f1, i64* @rdi, align 8
  %v1_488f5 = add i64 %v0_488f5, 256
  %v2_488f5 = inttoptr i64 %v1_488f5 to i64*
  %v3_488f5 = load i64, i64* %v2_488f5, align 8
  store i64 %v3_488f5, i64* @rax, align 8
  %v1_488fc = add i64 %v3_488f5, 8
  %v2_488fc = inttoptr i64 %v1_488fc to i32*
  %v3_488fc = load i32, i32* %v2_488fc, align 4
  %v5_48900 = icmp eq i32 %v3_488fc, 0
  br i1 %v5_48900, label %bb140, label %dec_label_pc_48909

bb140:                                            ; preds = %dec_label_pc_488f1
  %v2_48903 = call i64 @function_48d30(i64 %v3_488f1)
  store i64 %v2_48903, i64* @rax, align 8
  br label %dec_label_pc_48909

dec_label_pc_48909:                               ; preds = %bb140, %dec_label_pc_488f1
  %v0_48909 = phi i64 [ %v2_48903, %bb140 ], [ %v3_488f5, %dec_label_pc_488f1 ]
  %v1_48909 = add i64 %v0_48909, 16
  %v2_48909 = inttoptr i64 %v1_48909 to i64*
  %v3_48909 = load i64, i64* %v2_48909, align 8
  store i64 %v3_48909, i64* @rdx, align 8
  %v1_4890d = inttoptr i64 %v3_488f1 to i64*
  %v2_4890d = load i64, i64* %v1_4890d, align 8
  store i64 %v2_4890d, i64* @rax, align 8
  %v1_48919 = inttoptr i64 %v2_4890d to i64*
  %v2_48919 = load i64, i64* %v1_48919, align 8
  store i64 %v2_48919, i64* @rdx, align 8
  store i64 %v2_4890d, i64* @rdi, align 8
  %v4_48925 = trunc i64 %v2_4890d to i8
  %v5_48925 = icmp eq i8 %v4_48925, 0
  br i1 %v5_48925, label %bb141, label %dec_label_pc_4892d

bb141:                                            ; preds = %dec_label_pc_48909
  %v1_48927 = call i64 @function_48cf4()
  store i64 %v1_48927, i64* @rax, align 8
  br label %dec_label_pc_4892d

dec_label_pc_4892d:                               ; preds = %bb141, %dec_label_pc_48909
  store i64 %v2_4850a, i64* %rbp.global-to-local, align 8
  %v0_48932 = load i64, i64* @r15, align 8
  %v1_48932 = add i64 %v0_48932, 208
  %v2_48932 = inttoptr i64 %v1_48932 to i64*
  %v3_48932 = load i64, i64* %v2_48932, align 8
  store i64 %v3_48932, i64* @rbx, align 8
  %v1_48939 = inttoptr i64 %v2_4850a to i64*
  %v2_48939 = load i64, i64* %v1_48939, align 8
  store i64 %v2_48939, i64* @rax, align 8
  store i64 %v2_4850a, i64* @rdi, align 8
  %v1_48946 = inttoptr i64 %v2_48939 to i64*
  %v2_48946 = load i64, i64* %v1_48946, align 8
  store i64 %v2_48946, i64* @rdx, align 8
  store i64 %v2_48939, i64* @rdi, align 8
  %v1_4895b = inttoptr i64 %v3_48932 to i64*
  %v2_4895b = load i64, i64* %v1_4895b, align 8
  store i64 %v2_4895b, i64* @rax, align 8
  store i64 %v3_48932, i64* @rdi, align 8
  store i64 %arg1, i64* %r14.global-to-local, align 8
  %v3_4897a = load i64, i64* %v2_48932, align 8
  store i64 %v3_4897a, i64* @rbx, align 8
  %v3_48981 = load i32, i32* %v2_48454, align 4
  %v5_48985 = icmp eq i32 %v3_48981, 0
  br i1 %v5_48985, label %bb142, label %dec_label_pc_4898d

bb142:                                            ; preds = %dec_label_pc_4892d
  %v2_48987 = call i64 @function_48d30(i64 %v3_48932)
  store i64 %v2_48987, i64* @rax, align 8
  %v0_4898d.pre = load i64, i64* %r14.global-to-local, align 8
  %v0_489b6.pre = load i64, i64* @rbx, align 8
  %v0_489d1.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_4898d

dec_label_pc_4898d:                               ; preds = %bb142, %dec_label_pc_4892d
  %v0_489d1 = phi i64 [ %v0_489d1.pre, %bb142 ], [ %v0_48932, %dec_label_pc_4892d ]
  %v0_489c8 = phi i64 [ %v0_489b6.pre, %bb142 ], [ %v3_4897a, %dec_label_pc_4892d ]
  %v0_4898d = phi i64 [ %v0_4898d.pre, %bb142 ], [ %arg1, %dec_label_pc_4892d ]
  %v1_4898d = add i64 %v0_4898d, 16
  %v2_4898d = inttoptr i64 %v1_4898d to i64*
  %v3_4898d = load i64, i64* %v2_4898d, align 8
  store i64 %v3_4898d, i64* @rdi, align 8
  %v1_48998 = inttoptr i64 %v3_4898d to i64*
  %v2_48998 = load i64, i64* %v1_48998, align 8
  store i64 %v2_48998, i64* @rax, align 8
  %v1_489a1 = inttoptr i64 %v2_48998 to i64*
  %v2_489a1 = load i64, i64* %v1_489a1, align 8
  store i64 %v2_489a1, i64* @rdx, align 8
  store i64 %v2_48998, i64* @rdi, align 8
  %v1_489b6 = inttoptr i64 %v0_489c8 to i64*
  %v2_489b6 = load i64, i64* %v1_489b6, align 8
  store i64 %v2_489b6, i64* @rax, align 8
  store i64 %v0_489c8, i64* @rdi, align 8
  %v1_489d1 = add i64 %v0_489d1, 48
  %v2_489d1 = inttoptr i64 %v1_489d1 to i64*
  %v3_489d1 = load i64, i64* %v2_489d1, align 8
  store i64 %v3_489d1, i64* @rax, align 8
  %v1_489d5 = add i64 %v3_489d1, 8
  %v2_489d5 = inttoptr i64 %v1_489d5 to i32*
  %v3_489d5 = load i32, i32* %v2_489d5, align 4
  %v4_489d5 = zext i32 %v3_489d5 to i64
  store i64 %v4_489d5, i64* @rcx, align 8
  %v5_489d8 = icmp eq i32 %v3_489d5, 0
  br i1 %v5_489d8, label %bb143, label %dec_label_pc_489e0

bb143:                                            ; preds = %dec_label_pc_4898d
  %v2_489da = call i64 @function_48d30(i64 %v0_489c8)
  store i64 %v2_489da, i64* @rax, align 8
  %v0_48a09.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_489e0

dec_label_pc_489e0:                               ; preds = %bb143, %dec_label_pc_4898d
  %v0_48a09 = phi i64 [ %v0_48a09.pre, %bb143 ], [ %v0_4898d, %dec_label_pc_4898d ]
  %v0_489e0 = phi i64 [ %v2_489da, %bb143 ], [ %v3_489d1, %dec_label_pc_4898d ]
  %v1_489e0 = add i64 %v0_489e0, 16
  %v2_489e0 = inttoptr i64 %v1_489e0 to i64*
  %v3_489e0 = load i64, i64* %v2_489e0, align 8
  store i64 %v3_489e0, i64* @rbx, align 8
  %v0_489e4 = load i64, i64* %rbp.global-to-local, align 8
  %v1_489e4 = inttoptr i64 %v0_489e4 to i64*
  %v2_489e4 = load i64, i64* %v1_489e4, align 8
  store i64 %v2_489e4, i64* @rax, align 8
  store i64 %v2_489e4, i64* %rbp.global-to-local, align 8
  %v1_48a00 = inttoptr i64 %tmp101 to i64*
  %v2_48a00 = load i64, i64* %v1_48a00, align 8
  store i64 %v2_48a00, i64* @rax, align 8
  %v1_48a09 = add i64 %v0_48a09, 8
  %v2_48a09 = inttoptr i64 %v1_48a09 to i32*
  %v3_48a09 = load i32, i32* %v2_48a09, align 4
  %v4_48a09 = zext i32 %v3_48a09 to i64
  store i64 %v4_48a09, i64* @rdx, align 8
  %v5_48a0d = icmp eq i32 %v3_48a09, 0
  br i1 %v5_48a0d, label %bb144, label %dec_label_pc_48a15

bb144:                                            ; preds = %dec_label_pc_489e0
  %v2_48a0f = call i64 @function_48d30(i64 %tmp101)
  store i64 %v2_48a0f, i64* @rax, align 8
  %v0_48a15.pre = load i64, i64* @rbx, align 8
  %v0_48a18.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_48a15

dec_label_pc_48a15:                               ; preds = %bb144, %dec_label_pc_489e0
  %v0_48a1c = phi i64 [ %v2_48a0f, %bb144 ], [ %v2_48a00, %dec_label_pc_489e0 ]
  %v0_48a30 = phi i64 [ %v0_48a18.pre, %bb144 ], [ %v0_48a09, %dec_label_pc_489e0 ]
  %v0_48a22 = phi i64 [ %v0_48a15.pre, %bb144 ], [ %v3_489e0, %dec_label_pc_489e0 ]
  %v1_48a18 = add i64 %v0_48a30, 16
  %v2_48a18 = inttoptr i64 %v1_48a18 to i64*
  %v3_48a18 = load i64, i64* %v2_48a18, align 8
  store i64 %v3_48a18, i64* @rcx, align 8
  store i64 %v0_48a1c, i64* @rdx, align 8
  store i64 %v0_48a22, i64* @rdi, align 8
  store i64 %v0_48a30, i64* @rax, align 8
  %v1_48a33 = add i64 %v0_48a30, 8
  %v2_48a33 = inttoptr i64 %v1_48a33 to i32*
  %v3_48a33 = load i32, i32* %v2_48a33, align 4
  %v4_48a33 = zext i32 %v3_48a33 to i64
  store i64 %v4_48a33, i64* %r14.global-to-local, align 8
  %v5_48a37 = icmp eq i32 %v3_48a33, 0
  br i1 %v5_48a37, label %bb145, label %dec_label_pc_48a40

bb145:                                            ; preds = %dec_label_pc_48a15
  %v2_48a3a = call i64 @function_48d30(i64 %v0_48a22)
  store i64 %v2_48a3a, i64* @rax, align 8
  br label %dec_label_pc_48a40

dec_label_pc_48a40:                               ; preds = %bb145, %dec_label_pc_48a15
  %v0_48a40 = phi i64 [ %v2_48a3a, %bb145 ], [ %v0_48a30, %dec_label_pc_48a15 ]
  %v1_48a40 = add i64 %v0_48a40, 16
  %v2_48a40 = inttoptr i64 %v1_48a40 to i64*
  %v3_48a40 = load i64, i64* %v2_48a40, align 8
  store i64 %v3_48a40, i64* @rdi, align 8
  %v1_48a4b = inttoptr i64 %v3_48a40 to i64*
  %v2_48a4b = load i64, i64* %v1_48a4b, align 8
  store i64 %v2_48a4b, i64* @rax, align 8
  %v1_48a54 = inttoptr i64 %v2_48a4b to i64*
  %v2_48a54 = load i64, i64* %v1_48a54, align 8
  store i64 %v2_48a54, i64* @rdx, align 8
  store i64 %v2_48a4b, i64* @rdi, align 8
  %v4_48a60 = trunc i64 %v2_48a4b to i8
  %v5_48a60 = icmp eq i8 %v4_48a60, 0
  br i1 %v5_48a60, label %bb146, label %dec_label_pc_48a68

bb146:                                            ; preds = %dec_label_pc_48a40
  %v1_48a62 = call i64 @function_48cf4()
  store i64 %v1_48a62, i64* @rax, align 8
  br label %dec_label_pc_48a68

dec_label_pc_48a68:                               ; preds = %bb146, %dec_label_pc_48a40
  %v0_48a68 = load i64, i64* @r15, align 8
  %v1_48a68 = add i64 %v0_48a68, 256
  %v2_48a68 = inttoptr i64 %v1_48a68 to i64*
  %v3_48a68 = load i64, i64* %v2_48a68, align 8
  store i64 %v3_48a68, i64* @rax, align 8
  %v1_48a6f = add i64 %v0_48a68, 216
  %v2_48a6f = inttoptr i64 %v1_48a6f to i64*
  %v3_48a6f = load i64, i64* %v2_48a6f, align 8
  store i64 %v3_48a6f, i64* %rbp.global-to-local, align 8
  %v1_48a76 = add i64 %v3_48a68, 8
  %v2_48a76 = inttoptr i64 %v1_48a76 to i32*
  %v3_48a76 = load i32, i32* %v2_48a76, align 4
  %v4_48a76 = zext i32 %v3_48a76 to i64
  store i64 %v4_48a76, i64* %r13.global-to-local, align 8
  %v5_48a7a = icmp eq i32 %v3_48a76, 0
  br i1 %v5_48a7a, label %bb147, label %dec_label_pc_48a83

bb147:                                            ; preds = %dec_label_pc_48a68
  %v2_48a7d = call i64 @function_48d30(i64 %v2_48a4b)
  store i64 %v2_48a7d, i64* @rax, align 8
  br label %dec_label_pc_48a83

dec_label_pc_48a83:                               ; preds = %bb147, %dec_label_pc_48a68
  store i64 3, i64* @rdi, align 8
  %v3_48a8c = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 3)
  store i64 %v3_48a8c, i64* @rax, align 8
  store i64 %v3_48a8c, i64* @rbx, align 8
  %v2_48aa0 = load i64, i64* %v1_48939, align 8
  store i64 %v2_48aa0, i64* @rax, align 8
  store i64 %v2_4850a, i64* @rdi, align 8
  store i64 %v2_48aa0, i64* %r14.global-to-local, align 8
  %v2_48aaf = load i64, i64* %v1_48939, align 8
  store i64 %v2_48aaf, i64* @rax, align 8
  store i64 %v2_4850a, i64* @rdi, align 8
  store i64 %v2_48aaf, i64* %r13.global-to-local, align 8
  %v1_48ac5 = inttoptr i64 %v3_48a8c to i64*
  %v2_48ac5 = load i64, i64* %v1_48ac5, align 8
  store i64 %v2_48ac5, i64* @rax, align 8
  store i64 %v0_48a1c, i64* @rdx, align 8
  store i64 %v3_48a8c, i64* @rdi, align 8
  %v2_48ada = load i64, i64* %v1_48ac5, align 8
  store i64 %v2_48ada, i64* @rax, align 8
  store i64 %v2_48aa0, i64* @rdx, align 8
  store i64 %v3_48a8c, i64* @rdi, align 8
  %v2_48aee = load i64, i64* %v1_48ac5, align 8
  store i64 %v2_48aee, i64* @rax, align 8
  store i64 %v2_48aaf, i64* @rdx, align 8
  store i64 %v3_48a8c, i64* @rdi, align 8
  %v0_48b02 = load i64, i64* @rbp, align 8
  %v1_48b02 = inttoptr i64 %v0_48b02 to i64*
  %v2_48b02 = load i64, i64* %v1_48b02, align 8
  store i64 %v2_48b02, i64* @rax, align 8
  store i64 %v3_48a8c, i64* @rdx, align 8
  store i64 %v0_48b02, i64* @rdi, align 8
  %v1_48b15 = inttoptr i64 %v2_48b02 to i64*
  %v2_48b15 = load i64, i64* %v1_48b15, align 8
  store i64 %v2_48b15, i64* @rdx, align 8
  %v6_48b33 = call i64 @function_483eb(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_48b33, i64* @rax, align 8
  ret i64 %v6_48b33
}

define i64 @function_48b40(i64 %arg1) local_unnamed_addr {
dec_label_pc_48b40:
  store i64 0, i64* @rdi, align 8
  %v3_48b42 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 0)
  store i64 %v3_48b42, i64* @rax, align 8
  %v0_48b4a = load i64, i64* @rbx, align 8
  %v1_48b4a = add i64 %v0_48b4a, 8
  %v2_48b4a = inttoptr i64 %v1_48b4a to i32*
  %v3_48b4a = load i32, i32* %v2_48b4a, align 4
  %v4_48b4a = zext i32 %v3_48b4a to i64
  store i64 %v4_48b4a, i64* @rax, align 8
  %v5_48b4d = icmp eq i32 %v3_48b4a, 0
  br i1 %v5_48b4d, label %bb, label %dec_label_pc_48b55

bb:                                               ; preds = %dec_label_pc_48b40
  %v3_48b4f = call i64 @function_48d30(i64 0)
  store i64 %v3_48b4f, i64* @rax, align 8
  %v0_48b5a.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_48b55

dec_label_pc_48b55:                               ; preds = %bb, %dec_label_pc_48b40
  %v0_48b5a = phi i64 [ %v0_48b5a.pre, %bb ], [ %v0_48b4a, %dec_label_pc_48b40 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_48b5a, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_48b98() local_unnamed_addr {
dec_label_pc_48b98:
  store i64 2, i64* @rdi, align 8
  %v3_48b9d = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 2)
  store i64 %v3_48b9d, i64* @rax, align 8
  %v0_48ba2 = load i64, i64* @rbx, align 8
  %v1_48ba2 = add i64 %v0_48ba2, 8
  %v2_48ba2 = inttoptr i64 %v1_48ba2 to i32*
  %v3_48ba2 = load i32, i32* %v2_48ba2, align 4
  %v4_48ba2 = zext i32 %v3_48ba2 to i64
  store i64 %v4_48ba2, i64* @rdi, align 8
  %v7_48ba8 = icmp eq i32 %v3_48ba2, 0
  br i1 %v7_48ba8, label %bb, label %dec_label_pc_48bb0

bb:                                               ; preds = %dec_label_pc_48b98
  %v3_48baa = call i64 @function_48d30(i64 0)
  store i64 %v3_48baa, i64* @rax, align 8
  %v0_48bb3.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_48bb0

dec_label_pc_48bb0:                               ; preds = %bb, %dec_label_pc_48b98
  %v0_48bb3 = phi i64 [ %v0_48bb3.pre, %bb ], [ %v0_48ba2, %dec_label_pc_48b98 ]
  store i64 %v0_48bb3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_48c40(i64 %arg1) local_unnamed_addr {
dec_label_pc_48c40:
  %r10.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 0, i64* @rdi, align 8
  %v3_48c42 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 0)
  store i64 %v3_48c42, i64* @rax, align 8
  %v0_48c47 = load i64, i64* @rbx, align 8
  %v1_48c47 = add i64 %v0_48c47, 8
  %v2_48c47 = inttoptr i64 %v1_48c47 to i32*
  %v3_48c47 = load i32, i32* %v2_48c47, align 4
  %v4_48c47 = zext i32 %v3_48c47 to i64
  store i64 %v4_48c47, i64* @r11, align 8
  store i64 %v3_48c42, i64* %rbp.global-to-local, align 8
  %v5_48c4e = icmp eq i32 %v3_48c47, 0
  br i1 %v5_48c4e, label %bb, label %dec_label_pc_48c57

bb:                                               ; preds = %dec_label_pc_48c40
  %v3_48c51 = call i64 @function_48d30(i64 0)
  store i64 %v3_48c51, i64* @rax, align 8
  %v0_48c5a.pre = load i64, i64* @rbx, align 8
  %v0_48c68.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_48c57

dec_label_pc_48c57:                               ; preds = %bb, %dec_label_pc_48c40
  %v0_48c68 = phi i64 [ %v0_48c68.pre, %bb ], [ %v3_48c42, %dec_label_pc_48c40 ]
  %v1_48c68 = phi i64 [ %v0_48c5a.pre, %bb ], [ %v0_48c47, %dec_label_pc_48c40 ]
  store i64 %v1_48c68, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_48c64 = add i64 %v1_48c68, 8
  %v2_48c64 = inttoptr i64 %v1_48c64 to i32*
  %v3_48c64 = load i32, i32* %v2_48c64, align 4
  %v4_48c64 = zext i32 %v3_48c64 to i64
  store i64 %v4_48c64, i64* %r10.global-to-local, align 8
  %v2_48c68 = add i64 %v1_48c68, 16
  %v3_48c68 = inttoptr i64 %v2_48c68 to i64*
  store i64 %v0_48c68, i64* %v3_48c68, align 8
  %v0_48c6c = load i64, i64* %r10.global-to-local, align 8
  %v4_48c6c = trunc i64 %v0_48c6c to i32
  %v5_48c6c = icmp eq i32 %v4_48c6c, 0
  br i1 %v5_48c6c, label %bb247, label %dec_label_pc_48c75

bb247:                                            ; preds = %dec_label_pc_48c57
  %v2_48c6f = call i64 @function_48d30(i64 %v1_48c68)
  store i64 %v2_48c6f, i64* @rax, align 8
  br label %dec_label_pc_48c75

dec_label_pc_48c75:                               ; preds = %bb247, %dec_label_pc_48c57
  %v0_48c75 = load i64, i64* %r13.global-to-local, align 8
  %v1_48c75 = add i64 %v0_48c75, 8
  %v2_48c75 = inttoptr i64 %v1_48c75 to i32*
  %v3_48c75 = load i32, i32* %v2_48c75, align 4
  %v5_48c79 = icmp eq i32 %v3_48c75, 0
  br i1 %v5_48c79, label %bb248, label %dec_label_pc_48c82

bb248:                                            ; preds = %dec_label_pc_48c75
  %v2_48c7c = call i64 @function_48d30(i64 %v1_48c68)
  store i64 %v2_48c7c, i64* @rax, align 8
  %v0_48c85.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_48c82

dec_label_pc_48c82:                               ; preds = %bb248, %dec_label_pc_48c75
  %v0_48c85 = phi i64 [ %v0_48c85.pre, %bb248 ], [ %v0_48c75, %dec_label_pc_48c75 ]
  store i64 %v0_48c85, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_48c98() local_unnamed_addr {
dec_label_pc_48c98:
  %v0_48c98 = load i64, i64* @rbx, align 8
  %v1_48c98 = add i64 %v0_48c98, 8
  %v2_48c98 = inttoptr i64 %v1_48c98 to i32*
  %v3_48c98 = load i32, i32* %v2_48c98, align 4
  %v0_48c9c = load i64, i64* @r15, align 8
  %v1_48c9c = add i64 %v0_48c9c, ptrtoint (i64* @global_var_108.7479 to i64)
  %v2_48c9c = inttoptr i64 %v1_48c9c to i64*
  %v3_48c9c = load i64, i64* %v2_48c9c, align 8
  store i64 %v3_48c9c, i64* @rdi, align 8
  %v5_48ca3 = icmp eq i32 %v3_48c98, 0
  br i1 %v5_48ca3, label %bb, label %dec_label_pc_48cac

bb:                                               ; preds = %dec_label_pc_48c98
  %v2_48ca6 = call i64 @function_48d30(i64 %v3_48c9c)
  store i64 %v2_48ca6, i64* @rax, align 8
  %v0_48caf.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_48cac

dec_label_pc_48cac:                               ; preds = %bb, %dec_label_pc_48c98
  %v0_48caf = phi i64 [ %v0_48caf.pre, %bb ], [ %v0_48c98, %dec_label_pc_48c98 ]
  %v1_48cac = inttoptr i64 %v3_48c9c to i64*
  %v2_48cac = load i64, i64* %v1_48cac, align 8
  store i64 %v2_48cac, i64* @rax, align 8
  %v1_48cb9 = inttoptr i64 %v2_48cac to i64*
  %v2_48cb9 = load i64, i64* %v1_48cb9, align 8
  store i64 %v2_48cb9, i64* @rdx, align 8
  store i64 %v2_48cac, i64* @rdi, align 8
  %v4_48cc5 = trunc i64 %v2_48cac to i8
  %v5_48cc5 = icmp eq i8 %v4_48cc5, 0
  %v1_48cc7 = icmp eq i1 %v5_48cc5, false
  br i1 %v1_48cc7, label %bb9, label %dec_label_pc_48cc9

bb9:                                              ; preds = %dec_label_pc_48cac
  %v3_48cc7 = call i64 @function_48d10(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_48cc7, i64* @rax, align 8
  %v0_48cc9.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_48cc9

dec_label_pc_48cc9:                               ; preds = %bb9, %dec_label_pc_48cac
  %v0_48cc9 = phi i64 [ %v0_48cc9.pre, %bb9 ], [ %v0_48caf, %dec_label_pc_48cac ]
  %v1_48cc9 = add i64 %v0_48cc9, 8
  %v2_48cc9 = inttoptr i64 %v1_48cc9 to i32*
  %v3_48cc9 = load i32, i32* %v2_48cc9, align 4
  %v0_48ccc = load i64, i64* @r15, align 8
  %v1_48ccc = add i64 %v0_48ccc, 272
  %v2_48ccc = inttoptr i64 %v1_48ccc to i64*
  %v3_48ccc = load i64, i64* %v2_48ccc, align 8
  store i64 %v3_48ccc, i64* @rdi, align 8
  %v5_48cd3 = icmp eq i32 %v3_48cc9, 0
  br i1 %v5_48cd3, label %bb10, label %dec_label_pc_48cd7

bb10:                                             ; preds = %dec_label_pc_48cc9
  %v2_48cd5 = call i64 @function_48d30(i64 %v3_48ccc)
  store i64 %v2_48cd5, i64* @rax, align 8
  br label %dec_label_pc_48cd7

dec_label_pc_48cd7:                               ; preds = %bb10, %dec_label_pc_48cc9
  %v1_48cd7 = inttoptr i64 %v3_48ccc to i64*
  %v2_48cd7 = load i64, i64* %v1_48cd7, align 8
  store i64 %v2_48cd7, i64* @rax, align 8
  %v1_48ce4 = inttoptr i64 %v2_48cd7 to i64*
  %v2_48ce4 = load i64, i64* %v1_48ce4, align 8
  store i64 %v2_48ce4, i64* @rdx, align 8
  store i64 %v2_48cd7, i64* @rdi, align 8
  ret i64 %v2_48cd7
}

define i64 @function_48cf4() local_unnamed_addr {
dec_label_pc_48cf4:
  %v0_48cf4 = load i64, i64* @r15, align 8
  %v1_48cf4 = add i64 %v0_48cf4, 224
  %v2_48cf4 = inttoptr i64 %v1_48cf4 to i64*
  %v3_48cf4 = load i64, i64* %v2_48cf4, align 8
  store i64 %v3_48cf4, i64* @rdi, align 8
  %v6_48d07 = call i64 @function_483eb(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_48d07, i64* @rax, align 8
  ret i64 %v6_48d07
}

define i64 @function_48d10(i64 %arg1) local_unnamed_addr {
dec_label_pc_48d10:
  store i64 %arg1, i64* @rdi, align 8
  %v0_48d2f = load i64, i64* @rax, align 8
  ret i64 %v0_48d2f
}

define i64 @function_48d30(i64 %arg1) local_unnamed_addr {
dec_label_pc_48d30:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_48d39(i64 %arg1) local_unnamed_addr {
dec_label_pc_48d39:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %tmp20 = call i64 @__decompiler_undefined_function_0()
  %tmp22 = call i64 @__decompiler_undefined_function_0()
  %v0_48d3e = load i64, i64* @r15, align 8
  %v1_48d3e = add i64 %v0_48d3e, 208
  %v2_48d3e = inttoptr i64 %v1_48d3e to i64*
  %v3_48d3e = load i64, i64* %v2_48d3e, align 8
  store i64 %v3_48d3e, i64* @rbx, align 8
  %v1_48d45 = inttoptr i64 %tmp22 to i64*
  %v2_48d45 = load i64, i64* %v1_48d45, align 8
  store i64 %v2_48d45, i64* @rax, align 8
  %v1_48d52 = inttoptr i64 %v2_48d45 to i64*
  %v2_48d52 = load i64, i64* %v1_48d52, align 8
  store i64 %v2_48d52, i64* @rdx, align 8
  store i64 %v2_48d45, i64* @rdi, align 8
  %v1_48d67 = inttoptr i64 %v3_48d3e to i64*
  %v2_48d67 = load i64, i64* %v1_48d67, align 8
  store i64 %v2_48d67, i64* @rax, align 8
  store i64 %v3_48d3e, i64* @rdi, align 8
  store i64 %arg1, i64* %r14.global-to-local, align 8
  %v3_48d86 = load i64, i64* %v2_48d3e, align 8
  store i64 %v3_48d86, i64* @rbx, align 8
  %v1_48d8d = add i64 %arg1, 8
  %v2_48d8d = inttoptr i64 %v1_48d8d to i32*
  %v3_48d8d = load i32, i32* %v2_48d8d, align 4
  %v5_48d91 = icmp eq i32 %v3_48d8d, 0
  br i1 %v5_48d91, label %bb, label %dec_label_pc_48d96

bb:                                               ; preds = %dec_label_pc_48d39
  %v2_48d94 = call i64 @function_48d30(i64 %v3_48d3e)
  store i64 %v2_48d94, i64* @rax, align 8
  %v0_48d96.pre = load i64, i64* %r14.global-to-local, align 8
  %v0_48dbf.pre = load i64, i64* @rbx, align 8
  %v0_48dda.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_48d96

dec_label_pc_48d96:                               ; preds = %bb, %dec_label_pc_48d39
  %v0_48dda = phi i64 [ %v0_48dda.pre, %bb ], [ %v0_48d3e, %dec_label_pc_48d39 ]
  %v0_48dd1 = phi i64 [ %v0_48dbf.pre, %bb ], [ %v3_48d86, %dec_label_pc_48d39 ]
  %v0_48d96 = phi i64 [ %v0_48d96.pre, %bb ], [ %arg1, %dec_label_pc_48d39 ]
  %v1_48d96 = add i64 %v0_48d96, 16
  %v2_48d96 = inttoptr i64 %v1_48d96 to i64*
  %v3_48d96 = load i64, i64* %v2_48d96, align 8
  store i64 %v3_48d96, i64* @rdi, align 8
  %v1_48da1 = inttoptr i64 %v3_48d96 to i64*
  %v2_48da1 = load i64, i64* %v1_48da1, align 8
  store i64 %v2_48da1, i64* @rax, align 8
  %v1_48daa = inttoptr i64 %v2_48da1 to i64*
  %v2_48daa = load i64, i64* %v1_48daa, align 8
  store i64 %v2_48daa, i64* @rdx, align 8
  store i64 %v2_48da1, i64* @rdi, align 8
  %v1_48dbf = inttoptr i64 %v0_48dd1 to i64*
  %v2_48dbf = load i64, i64* %v1_48dbf, align 8
  store i64 %v2_48dbf, i64* @rax, align 8
  store i64 %v0_48dd1, i64* @rdi, align 8
  %v1_48dda = add i64 %v0_48dda, 48
  %v2_48dda = inttoptr i64 %v1_48dda to i64*
  %v3_48dda = load i64, i64* %v2_48dda, align 8
  store i64 %v3_48dda, i64* @rax, align 8
  %v1_48dde = add i64 %v3_48dda, 8
  %v2_48dde = inttoptr i64 %v1_48dde to i32*
  %v3_48dde = load i32, i32* %v2_48dde, align 4
  %v4_48dde = zext i32 %v3_48dde to i64
  store i64 %v4_48dde, i64* @rdi, align 8
  %v7_48de1 = icmp eq i32 %v3_48dde, 0
  br i1 %v7_48de1, label %bb23, label %dec_label_pc_48de9

bb23:                                             ; preds = %dec_label_pc_48d96
  %v3_48de3 = call i64 @function_48d30(i64 0)
  store i64 %v3_48de3, i64* @rax, align 8
  %v0_48e12.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_48de9

dec_label_pc_48de9:                               ; preds = %bb23, %dec_label_pc_48d96
  %v0_48e12 = phi i64 [ %v0_48e12.pre, %bb23 ], [ %v0_48d96, %dec_label_pc_48d96 ]
  %v0_48de9 = phi i64 [ %v3_48de3, %bb23 ], [ %v3_48dda, %dec_label_pc_48d96 ]
  %v1_48de9 = add i64 %v0_48de9, 16
  %v2_48de9 = inttoptr i64 %v1_48de9 to i64*
  %v3_48de9 = load i64, i64* %v2_48de9, align 8
  store i64 %v3_48de9, i64* @rbx, align 8
  %v0_48ded = load i64, i64* %rbp.global-to-local, align 8
  %v1_48ded = inttoptr i64 %v0_48ded to i64*
  %v2_48ded = load i64, i64* %v1_48ded, align 8
  store i64 %v2_48ded, i64* @rax, align 8
  store i64 %v2_48ded, i64* %rbp.global-to-local, align 8
  %v1_48e09 = inttoptr i64 %tmp20 to i64*
  %v2_48e09 = load i64, i64* %v1_48e09, align 8
  store i64 %v2_48e09, i64* @rax, align 8
  %v1_48e12 = add i64 %v0_48e12, 8
  %v2_48e12 = inttoptr i64 %v1_48e12 to i32*
  %v3_48e12 = load i32, i32* %v2_48e12, align 4
  %v5_48e16 = icmp eq i32 %v3_48e12, 0
  br i1 %v5_48e16, label %bb24, label %dec_label_pc_48e1e

bb24:                                             ; preds = %dec_label_pc_48de9
  %v2_48e18 = call i64 @function_48d30(i64 %tmp20)
  store i64 %v2_48e18, i64* @rax, align 8
  %v0_48e1e.pre = load i64, i64* @rbx, align 8
  %v0_48e27.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_48e1e

dec_label_pc_48e1e:                               ; preds = %bb24, %dec_label_pc_48de9
  %v0_48e35 = phi i64 [ %v0_48e27.pre, %bb24 ], [ %v0_48e12, %dec_label_pc_48de9 ]
  %v0_48e39 = phi i64 [ %v2_48e18, %bb24 ], [ %v2_48e09, %dec_label_pc_48de9 ]
  %v0_48e1e = phi i64 [ %v0_48e1e.pre, %bb24 ], [ %v3_48de9, %dec_label_pc_48de9 ]
  store i64 %v0_48e39, i64* @rdx, align 8
  store i64 %v0_48e1e, i64* @rdi, align 8
  %v1_48e27 = add i64 %v0_48e35, 16
  %v2_48e27 = inttoptr i64 %v1_48e27 to i64*
  %v3_48e27 = load i64, i64* %v2_48e27, align 8
  store i64 %v3_48e27, i64* @rcx, align 8
  %v1_48e35 = add i64 %v0_48e35, 8
  %v2_48e35 = inttoptr i64 %v1_48e35 to i32*
  %v3_48e35 = load i32, i32* %v2_48e35, align 4
  %v4_48e35 = zext i32 %v3_48e35 to i64
  store i64 %v4_48e35, i64* @rdx, align 8
  store i64 %v0_48e39, i64* @rbx, align 8
  %v5_48e3c = icmp eq i32 %v3_48e35, 0
  br i1 %v5_48e3c, label %bb25, label %dec_label_pc_48e44

bb25:                                             ; preds = %dec_label_pc_48e1e
  %v2_48e3e = call i64 @function_48d30(i64 %v0_48e1e)
  store i64 %v2_48e3e, i64* @rax, align 8
  %v0_48e44.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_48e44

dec_label_pc_48e44:                               ; preds = %bb25, %dec_label_pc_48e1e
  %v0_48e44 = phi i64 [ %v0_48e44.pre, %bb25 ], [ %v0_48e35, %dec_label_pc_48e1e ]
  %v1_48e44 = add i64 %v0_48e44, 16
  %v2_48e44 = inttoptr i64 %v1_48e44 to i64*
  %v3_48e44 = load i64, i64* %v2_48e44, align 8
  store i64 %v3_48e44, i64* @rdi, align 8
  %v1_48e4f = inttoptr i64 %v3_48e44 to i64*
  %v2_48e4f = load i64, i64* %v1_48e4f, align 8
  store i64 %v2_48e4f, i64* @rax, align 8
  %v1_48e58 = inttoptr i64 %v2_48e4f to i64*
  %v2_48e58 = load i64, i64* %v1_48e58, align 8
  store i64 %v2_48e58, i64* @rdx, align 8
  store i64 %v2_48e4f, i64* @rdi, align 8
  %v4_48e64 = trunc i64 %v2_48e4f to i8
  %v5_48e64 = icmp eq i8 %v4_48e64, 0
  br i1 %v5_48e64, label %bb26, label %dec_label_pc_48e6c

bb26:                                             ; preds = %dec_label_pc_48e44
  %v1_48e66 = call i64 @function_48cf4()
  store i64 %v1_48e66, i64* @rax, align 8
  br label %dec_label_pc_48e6c

dec_label_pc_48e6c:                               ; preds = %bb26, %dec_label_pc_48e44
  store i64 1, i64* @rdi, align 8
  %v0_48e71 = load i64, i64* @r15, align 8
  %v1_48e71 = add i64 %v0_48e71, 216
  %v2_48e71 = inttoptr i64 %v1_48e71 to i64*
  %v3_48e71 = load i64, i64* %v2_48e71, align 8
  store i64 %v3_48e71, i64* %r13.global-to-local, align 8
  %v3_48e78 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 1)
  store i64 %v3_48e78, i64* @rax, align 8
  store i64 %v3_48e78, i64* %rbp.global-to-local, align 8
  %v1_48e80 = inttoptr i64 %v3_48e78 to i64*
  %v2_48e80 = load i64, i64* %v1_48e80, align 8
  store i64 %v2_48e80, i64* @rax, align 8
  %v0_48e83 = load i64, i64* @rbx, align 8
  store i64 %v0_48e83, i64* @rdx, align 8
  store i64 %v3_48e78, i64* @rdi, align 8
  %v0_48e94 = load i64, i64* %r13.global-to-local, align 8
  %v1_48e94 = inttoptr i64 %v0_48e94 to i64*
  %v2_48e94 = load i64, i64* %v1_48e94, align 8
  store i64 %v2_48e94, i64* @rax, align 8
  store i64 %v3_48e78, i64* @rdx, align 8
  store i64 %v0_48e94, i64* @rdi, align 8
  ret i64 %v2_48e94
}

define i64 @"_ZN3org4luaj3vm23lib23PackageLib$lua_searcher6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_48eb0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_48eb7 = load i64, i64* @rdi, align 8
  %v2_48ebb = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_48ebb, i64* @rax, align 8
  store i64 %v2_48ebb, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_48ecf = add i64 %v0_48eb7, 24
  %v2_48ecf = inttoptr i64 %v1_48ecf to i64*
  %v3_48ecf = load i64, i64* %v2_48ecf, align 8
  store i64 %v3_48ecf, i64* @rax, align 8
  store i64 298715, i64* @rdi, align 8
  %v1_48edb = add i64 %v3_48ecf, 32
  %v2_48edb = inttoptr i64 %v1_48edb to i64*
  %v3_48edb = load i64, i64* %v2_48edb, align 8
  store i64 %v3_48edb, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_490d0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_490d0:
  %v2_490db = load i64, i64* @rax, align 8
  store i64 %v2_490db, i64* @rdx, align 8
  store i64 %v2_490db, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_490db
}

define i64 @function_49100() local_unnamed_addr {
dec_label_pc_49100:
  store i64 299271, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49130() local_unnamed_addr {
dec_label_pc_49130:
  %v0_49130 = load i64, i64* inttoptr (i64 299319 to i64*), align 8
  store i64 %v0_49130, i64* @rbx, align 8
  store i64 299326, i64* @rdi, align 8
  %v0_49137 = load i64, i64* @rax, align 8
  ret i64 %v0_49137
}

define i64 @function_49160() local_unnamed_addr {
dec_label_pc_49160:
  %rbp.global-to-local = alloca i64, align 8
  %v2_49160 = load i64, i64* %rbp.global-to-local, align 8
  store i64 299377, i64* @rdi, align 8
  store i64 %v2_49160, i64* @rbx, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_491b6() local_unnamed_addr {
dec_label_pc_491b6:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm23lib7BaseLib10loadStreamEJPNS1_7VarargsEPN4java2io11InputStreamEPNS6_4lang6StringESC_PNS1_8LuaValueE(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_491c0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_491c0 = icmp eq i64 %arg2, 0
  %v0_491c6 = load i64, i64* @rbx, align 8
  %v0_491c7 = load i64, i64* @rdx, align 8
  store i64 %v0_491c7, i64* @rbx, align 8
  br i1 %v1_491c0, label %dec_label_pc_491e8, label %dec_label_pc_491cc

dec_label_pc_491cc:                               ; preds = %dec_label_pc_491c0
  %v0_491cc = load i64, i64* @rdi, align 8
  %v1_491cc = add i64 %v0_491cc, 24
  %v2_491cc = inttoptr i64 %v1_491cc to i64*
  %v3_491cc = load i64, i64* %v2_491cc, align 8
  store i64 %v3_491cc, i64* @rdi, align 8
  %v1_491d0 = inttoptr i64 %v3_491cc to i64*
  %v2_491d0 = load i64, i64* %v1_491d0, align 8
  store i64 %v2_491d0, i64* @rax, align 8
  %v1_491d3 = add i64 %v2_491d0, 2392
  %v2_491d3 = inttoptr i64 %v1_491d3 to i64*
  %v3_491d3 = load i64, i64* %v2_491d3, align 8
  store i64 %v3_491d3, i64* @rax, align 8
  store i64 %v0_491c6, i64* @rbx, align 8
  ret i64 %v3_491d3

dec_label_pc_491e8:                               ; preds = %dec_label_pc_491c0
  %v1_491e0 = load i64, i64* @rax, align 8
  ret i64 %v1_491e0
}

define i64 @function_4929d() local_unnamed_addr {
dec_label_pc_4929d:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_492a2() local_unnamed_addr {
dec_label_pc_492a2:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_492ef() local_unnamed_addr {
dec_label_pc_492ef:
  %v0_492ef = load i64, i64* @rax, align 8
  store i64 %v0_492ef, i64* @rdi, align 8
  ret i64 %v0_492ef
}

define i64 @_ZN3org4luaj3vm23lib9StringLib12str_find_auxEJPNS1_7VarargsES5_b(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_49300:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  store i64 299798, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_494c0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_494c0:
  %v0_494c0 = load i64, i64* inttoptr (i64 300231 to i64*), align 8
  store i64 %v0_494c0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_494c0
}

define i64 @function_494e0() local_unnamed_addr {
dec_label_pc_494e0:
  %rbp.global-to-local = alloca i64, align 8
  %tmp228 = call i64 @__decompiler_undefined_function_0()
  %v0_494f3 = load i64, i64* %rbp.global-to-local, align 8
  %v1_494f3 = trunc i64 %v0_494f3 to i32
  %v3_494f3 = trunc i64 %tmp228 to i32
  %v4_494f3 = add i32 %v1_494f3, %v3_494f3
  %v15_494f3 = icmp slt i32 %v4_494f3, 0
  %v20_494f3 = zext i32 %v4_494f3 to i64
  store i64 0, i64* @rax, align 8
  %v6_494fa = select i1 %v15_494f3, i64 0, i64 %v20_494f3
  store i64 %v6_494fa, i64* %rbp.global-to-local, align 8
  ret i64 0
}

define i64 @function_49508() local_unnamed_addr {
dec_label_pc_49508:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %tmp231 = call i64 @__decompiler_undefined_function_0()
  %v4_49523 = trunc i64 %tmp231 to i8
  %v5_49523 = icmp eq i8 %v4_49523, 0
  br i1 %v5_49523, label %bb, label %dec_label_pc_4952b

bb:                                               ; preds = %dec_label_pc_49508
  %v1_49525 = call i64 @function_496a0()
  store i64 %v1_49525, i64* @rax, align 8
  br label %dec_label_pc_4952b

dec_label_pc_4952b:                               ; preds = %bb, %dec_label_pc_49508
  %v2_4952b = load i64, i64* %r12.global-to-local, align 8
  store i64 %v2_4952b, i64* @rax, align 8
  %v0_4952f = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_4952f, i64* @rdx, align 8
  store i64 %v2_4952b, i64* @rdi, align 8
  %v1_4953d = trunc i64 %v2_4952b to i32
  %v11_4953d = icmp eq i32 %v1_4953d, -1
  store i64 %v2_4952b, i64* %rbp.global-to-local, align 8
  br i1 %v11_4953d, label %bb236, label %dec_label_pc_49548

bb236:                                            ; preds = %dec_label_pc_4952b
  %v7_49542 = call i64 @function_494c0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_49542, i64* @rax, align 8
  br label %dec_label_pc_49548

dec_label_pc_49548:                               ; preds = %bb236, %dec_label_pc_4952b
  store i64 300367, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49595(i64 %arg1) local_unnamed_addr {
dec_label_pc_49595:
  store i64 300456, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49638(i64 %arg1) local_unnamed_addr {
dec_label_pc_49638:
  store i64 %arg1, i64* @rdi, align 8
  %v0_49638 = load i64, i64* inttoptr (i64 300607 to i64*), align 8
  store i64 %v0_49638, i64* @rax, align 8
  %v1_4963f = trunc i64 %arg1 to i32
  %v3_4963f = add i64 %v0_49638, 8
  %v4_4963f = inttoptr i64 %v3_4963f to i32*
  %v5_4963f = load i32, i32* %v4_4963f, align 4
  %v11_4963f = icmp ult i32 %v1_4963f, %v5_4963f
  %v1_49642 = add i64 %v0_49638, 16
  store i64 %v1_49642, i64* @rdx, align 8
  %v1_49646 = icmp eq i1 %v11_4963f, false
  br i1 %v1_49646, label %bb, label %dec_label_pc_4964c

bb:                                               ; preds = %dec_label_pc_49638
  %v2_49646 = call i64 @function_496e5()
  store i64 %v2_49646, i64* @rax, align 8
  %v0_4964c.pre = load i64, i64* @rdi, align 8
  %v0_4964f.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_4964c

dec_label_pc_4964c:                               ; preds = %bb, %dec_label_pc_49638
  %v0_4964f = phi i64 [ %v0_4964f.pre, %bb ], [ %v1_49642, %dec_label_pc_49638 ]
  %v0_4964c = phi i64 [ %v0_4964c.pre, %bb ], [ %arg1, %dec_label_pc_49638 ]
  %v2_4964f = mul i64 %v0_4964c, 8
  %v3_4964f = add i64 %v2_4964f, %v0_4964f
  %v4_4964f = inttoptr i64 %v3_4964f to i64*
  %v5_4964f = load i64, i64* %v4_4964f, align 8
  store i64 %v5_4964f, i64* @rbx, align 8
  %v1_49653 = call i64 @function_49595(i64 %v0_4964c)
  store i64 %v1_49653, i64* @rax, align 8
  ret i64 %v1_49653
}

define i64 @function_49660() local_unnamed_addr {
dec_label_pc_49660:
  store i64 300647, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49688() local_unnamed_addr {
dec_label_pc_49688:
  %rbp.global-to-local = alloca i64, align 8
  %v2_49688 = load i64, i64* @rbx, align 8
  store i64 %v2_49688, i64* @rax, align 8
  store i64 %v2_49688, i64* @rdi, align 8
  %v0_4968e = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_4968e, i64* @rdx, align 8
  ret i64 %v2_49688
}

define i64 @function_496a0() local_unnamed_addr {
dec_label_pc_496a0:
  %v2_496a0 = load i64, i64* @r15, align 8
  store i64 %v2_496a0, i64* @rax, align 8
  store i64 %v2_496a0, i64* @rdi, align 8
  ret i64 %v2_496a0
}

define i64 @function_496c8(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_496c8:
  %tmp233 = call i64 @__decompiler_undefined_function_0()
  ret i64 %tmp233
}

define i64 @function_496e5() local_unnamed_addr {
dec_label_pc_496e5:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib15StringLib$match6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_496f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v0_49702 = load i64, i64* @rax, align 8
  ret i64 %v0_49702
}

define i64 @"_ZN3org4luaj3vm23lib14StringLib$find6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_49710:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdi, align 8
  %v0_49725 = load i64, i64* @rax, align 8
  ret i64 %v0_49725
}

define i64 @_ZN3org4luaj3vm23lib8DebugLib13onInstructionEJviPNS1_7VarargsEi(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_49730:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_49738 = load i64, i64* %rbp.global-to-local, align 8
  %v0_4973e = load i64, i64* @rdi, align 8
  %v1_4973e = add i64 %v0_4973e, 24
  %v2_4973e = inttoptr i64 %v1_4973e to i64*
  %v3_4973e = load i64, i64* %v2_4973e, align 8
  store i64 %v3_4973e, i64* @rax, align 8
  %v1_49742 = add i64 %v3_4973e, 72
  %v2_49742 = inttoptr i64 %v1_49742 to i64*
  %v3_49742 = load i64, i64* %v2_49742, align 8
  store i64 %v3_49742, i64* @rax, align 8
  %v1_49746 = add i64 %v3_49742, 8
  %v2_49746 = inttoptr i64 %v1_49746 to i64*
  %v3_49746 = load i64, i64* %v2_49746, align 8
  store i64 %v3_49746, i64* %rbp.global-to-local, align 8
  %v1_4974a = add i64 %v3_49746, 72
  %v2_4974a = inttoptr i64 %v1_4974a to i8*
  %v3_4974a = load i8, i8* %v2_4974a, align 1
  %v10_4974a = icmp eq i8 %v3_4974a, 0
  br i1 %v10_4974a, label %dec_label_pc_49760, label %dec_label_pc_49750

dec_label_pc_49750:                               ; preds = %dec_label_pc_49730
  store i64 %v0_49738, i64* %rbp.global-to-local, align 8
  ret i64 %v3_49742

dec_label_pc_49760:                               ; preds = %dec_label_pc_49730
  store i64 %v0_4973e, i64* @rax, align 8
  store i64 %v0_4973e, i64* @rbx, align 8
  %v1_49775 = icmp eq i64 %v0_4973e, 0
  br i1 %v1_49775, label %bb, label %dec_label_pc_49781

bb:                                               ; preds = %dec_label_pc_49760
  %v1_4977b = call i64 @function_498d1()
  store i64 %v1_4977b, i64* @rax, align 8
  br label %dec_label_pc_49781

dec_label_pc_49781:                               ; preds = %bb, %dec_label_pc_49760
  %v0_49781 = phi i64 [ %v1_4977b, %bb ], [ %v0_4973e, %dec_label_pc_49760 ]
  store i64 %v0_49781, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49872(i64 %arg1) local_unnamed_addr {
dec_label_pc_49872:
  %v2_49872 = load i64, i64* @rbx, align 8
  store i64 %v2_49872, i64* @rax, align 8
  %v0_49875 = load i64, i64* @r14, align 8
  store i64 %v0_49875, i64* @rcx, align 8
  %v0_49878 = load i64, i64* @r13, align 8
  store i64 %v0_49878, i64* @rdx, align 8
  store i64 %v2_49872, i64* @rdi, align 8
  ret i64 %v2_49872
}

define i64 @function_49890() local_unnamed_addr {
dec_label_pc_49890:
  %v2_49890 = load i64, i64* @rbx, align 8
  store i64 %v2_49890, i64* @rax, align 8
  %v0_49893 = load i64, i64* inttoptr (i64 301210 to i64*), align 8
  store i64 %v0_49893, i64* @rcx, align 8
  %v0_4989d = load i64, i64* inttoptr (i64 301220 to i64*), align 8
  store i64 %v0_4989d, i64* @rdx, align 8
  store i64 %v2_49890, i64* @rdi, align 8
  ret i64 %v2_49890
}

define i64 @function_498b8(i64 %arg1) local_unnamed_addr {
dec_label_pc_498b8:
  store i64 %arg1, i64* @rdi, align 8
  %v0_498b8 = load i64, i64* inttoptr (i64 301247 to i64*), align 8
  store i64 %v0_498b8, i64* @rax, align 8
  %v1_498bf = trunc i64 %arg1 to i32
  %v3_498bf = add i64 %v0_498b8, 8
  %v4_498bf = inttoptr i64 %v3_498bf to i32*
  %v5_498bf = load i32, i32* %v4_498bf, align 4
  %v11_498bf = icmp ult i32 %v1_498bf, %v5_498bf
  %v1_498c2 = add i64 %v0_498b8, 16
  store i64 %v1_498c2, i64* @rdx, align 8
  %v1_498c6 = icmp eq i1 %v11_498bf, false
  br i1 %v1_498c6, label %bb, label %dec_label_pc_498c8

bb:                                               ; preds = %dec_label_pc_498b8
  %v2_498c6 = call i64 @function_498f4()
  store i64 %v2_498c6, i64* @rax, align 8
  %v0_498c8.pre = load i64, i64* @rdi, align 8
  %v0_498cb.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_498c8

dec_label_pc_498c8:                               ; preds = %bb, %dec_label_pc_498b8
  %v0_498cb = phi i64 [ %v0_498cb.pre, %bb ], [ %v1_498c2, %dec_label_pc_498b8 ]
  %v0_498c8 = phi i64 [ %v0_498c8.pre, %bb ], [ %arg1, %dec_label_pc_498b8 ]
  %v2_498cb = mul i64 %v0_498c8, 8
  %v3_498cb = add i64 %v2_498cb, %v0_498cb
  %v4_498cb = inttoptr i64 %v3_498cb to i64*
  %v5_498cb = load i64, i64* %v4_498cb, align 8
  store i64 %v5_498cb, i64* @r14, align 8
  %v1_498cf = call i64 @function_49872(i64 %v0_498c8)
  store i64 %v1_498cf, i64* @rax, align 8
  ret i64 %v1_498cf
}

define i64 @function_498d1() local_unnamed_addr {
dec_label_pc_498d1:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_498d8() local_unnamed_addr {
dec_label_pc_498d8:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_498f4() local_unnamed_addr {
dec_label_pc_498f4:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$76$13$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_49900:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_49907 = load i64, i64* @rbx, align 8
  %v2_49908 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_49908, i64* @rax, align 8
  %v0_4990b = load i64, i64* @rdi, align 8
  store i64 %v0_4990b, i64* @rbx, align 8
  store i64 %v2_49908, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_4991c = add i64 %v0_4990b, 24
  %v2_4991c = inttoptr i64 %v1_4991c to i64*
  %v3_4991c = load i64, i64* %v2_4991c, align 8
  store i64 %v3_4991c, i64* @rdi, align 8
  %v1_49920 = inttoptr i64 %v3_4991c to i64*
  %v2_49920 = load i64, i64* %v1_49920, align 8
  store i64 %v2_49920, i64* @rax, align 8
  %v1_49929 = inttoptr i64 %v2_49920 to i64*
  %v2_49929 = load i64, i64* %v1_49929, align 8
  store i64 %v2_49929, i64* @rdx, align 8
  store i64 %v2_49920, i64* @rdi, align 8
  %v4_49935 = trunc i64 %v2_49920 to i8
  %v5_49935 = icmp eq i8 %v4_49935, 0
  br i1 %v5_49935, label %dec_label_pc_49950, label %dec_label_pc_49939

dec_label_pc_49939:                               ; preds = %dec_label_pc_49900
  %v0_49939 = load i64, i64* inttoptr (i64 301376 to i64*), align 64
  store i64 %v0_49939, i64* @rax, align 8
  store i64 %v0_49907, i64* @rbx, align 8
  ret i64 %v0_49939

dec_label_pc_49950:                               ; preds = %dec_label_pc_49900
  %v1_49950 = add i64 %v0_4990b, 32
  %v2_49950 = inttoptr i64 %v1_49950 to i64*
  %v3_49950 = load i64, i64* %v2_49950, align 8
  store i64 %v3_49950, i64* @rdi, align 8
  %v1_49954 = inttoptr i64 %v3_49950 to i64*
  %v2_49954 = load i64, i64* %v1_49954, align 8
  store i64 %v2_49954, i64* @rax, align 8
  store i64 %v2_49954, i64* @rbp, align 8
  %v1_49960 = inttoptr i64 %v2_49954 to i64*
  %v2_49960 = load i64, i64* %v1_49960, align 8
  store i64 %v2_49960, i64* @rax, align 8
  %v1_49963 = add i64 %v0_4990b, 40
  %v2_49963 = inttoptr i64 %v1_49963 to i64*
  %v3_49963 = load i64, i64* %v2_49963, align 8
  store i64 %v3_49963, i64* %rsi.global-to-local, align 8
  store i64 %v2_49954, i64* @rdi, align 8
  %v4_49970 = trunc i64 %v2_49960 to i8
  %v5_49970 = icmp eq i8 %v4_49970, 0
  br i1 %v5_49970, label %bb, label %dec_label_pc_49978

bb:                                               ; preds = %dec_label_pc_49950
  %v1_49972 = call i64 @function_49bb0()
  store i64 %v1_49972, i64* @rax, align 8
  %v0_49978.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_49978

dec_label_pc_49978:                               ; preds = %bb, %dec_label_pc_49950
  %v0_49978 = phi i64 [ %v0_49978.pre, %bb ], [ %v0_4990b, %dec_label_pc_49950 ]
  %v1_49978 = add i64 %v0_49978, 56
  %v2_49978 = inttoptr i64 %v1_49978 to i64*
  %v3_49978 = load i64, i64* %v2_49978, align 8
  store i64 %v3_49978, i64* @rdi, align 8
  %v1_4997c = inttoptr i64 %v3_49978 to i64*
  %v2_4997c = load i64, i64* %v1_4997c, align 8
  store i64 %v2_4997c, i64* @rax, align 8
  store i64 %v2_4997c, i64* @rbp, align 8
  %v1_49988 = inttoptr i64 %v2_4997c to i64*
  %v2_49988 = load i64, i64* %v1_49988, align 8
  store i64 %v2_49988, i64* @rax, align 8
  %v0_4998b = load i64, i64* inttoptr (i64 301458 to i64*), align 8
  store i64 %v0_4998b, i64* %rsi.global-to-local, align 8
  store i64 %v2_4997c, i64* @rdi, align 8
  %v4_4999b = trunc i64 %v2_49988 to i8
  %v5_4999b = icmp eq i8 %v4_4999b, 0
  %v1_4999d = icmp eq i1 %v5_4999b, false
  br i1 %v1_4999d, label %bb260, label %dec_label_pc_499a3

bb260:                                            ; preds = %dec_label_pc_49978
  %v2_4999d = call i64 @function_49b60()
  store i64 %v2_4999d, i64* @rax, align 8
  %v0_499a3.pre = load i64, i64* @rbx, align 8
  %v0_499a7.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_499a3

dec_label_pc_499a3:                               ; preds = %bb260, %dec_label_pc_49978
  %v0_499a7 = phi i64 [ %v0_499a7.pre, %bb260 ], [ %v2_4997c, %dec_label_pc_49978 ]
  %v0_499a3 = phi i64 [ %v0_499a3.pre, %bb260 ], [ %v0_49978, %dec_label_pc_49978 ]
  %v1_499a3 = add i64 %v0_499a3, 72
  %v2_499a3 = inttoptr i64 %v1_499a3 to i64*
  %v3_499a3 = load i64, i64* %v2_499a3, align 8
  store i64 %v3_499a3, i64* @rdi, align 8
  store i64 %v0_499a7, i64* %rsi.global-to-local, align 8
  %v1_499aa = inttoptr i64 %v3_499a3 to i64*
  %v2_499aa = load i64, i64* %v1_499aa, align 8
  store i64 %v2_499aa, i64* @rax, align 8
  %v1_499b3 = inttoptr i64 %v2_499aa to i64*
  %v2_499b3 = load i64, i64* %v1_499b3, align 8
  store i64 %v2_499b3, i64* @rdx, align 8
  store i64 %v2_499aa, i64* @rdi, align 8
  %v4_499bf = trunc i64 %v2_499aa to i8
  %v5_499bf = icmp eq i8 %v4_499bf, 0
  br i1 %v5_499bf, label %bb261, label %dec_label_pc_499c7

bb261:                                            ; preds = %dec_label_pc_499a3
  %v1_499c1 = call i64 @function_49bc8()
  store i64 %v1_499c1, i64* @rax, align 8
  %v0_499c7.pre = load i64, i64* @rbx, align 8
  %v0_499cb.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_499c7

dec_label_pc_499c7:                               ; preds = %bb261, %dec_label_pc_499a3
  %v0_499cb = phi i64 [ %v0_499cb.pre, %bb261 ], [ %v0_499a7, %dec_label_pc_499a3 ]
  %v0_499d7 = phi i64 [ %v0_499c7.pre, %bb261 ], [ %v0_499a3, %dec_label_pc_499a3 ]
  %v1_499c7 = add i64 %v0_499d7, 80
  %v2_499c7 = inttoptr i64 %v1_499c7 to i64*
  %v3_499c7 = load i64, i64* %v2_499c7, align 8
  store i64 %v3_499c7, i64* @rdi, align 8
  store i64 %v0_499cb, i64* %rsi.global-to-local, align 8
  %v1_499ce = inttoptr i64 %v3_499c7 to i64*
  %v2_499ce = load i64, i64* %v1_499ce, align 8
  store i64 %v2_499ce, i64* @rax, align 8
  %v1_499d7 = add i64 %v0_499d7, 72
  %v2_499d7 = inttoptr i64 %v1_499d7 to i64*
  %v3_499d7 = load i64, i64* %v2_499d7, align 8
  store i64 %v3_499d7, i64* @rdi, align 8
  store i64 %v2_499ce, i64* %r12.global-to-local, align 8
  store i64 %v2_499ce, i64* %rsi.global-to-local, align 8
  %v1_499e1 = inttoptr i64 %v3_499d7 to i64*
  %v2_499e1 = load i64, i64* %v1_499e1, align 8
  store i64 %v2_499e1, i64* @rax, align 8
  %v1_499ea = inttoptr i64 %v2_499e1 to i64*
  %v2_499ea = load i64, i64* %v1_499ea, align 8
  store i64 %v2_499ea, i64* @rdx, align 8
  store i64 %v2_499e1, i64* @rdi, align 8
  %v4_499f6 = trunc i64 %v2_499e1 to i8
  %v5_499f6 = icmp eq i8 %v4_499f6, 0
  br i1 %v5_499f6, label %bb262, label %dec_label_pc_499fe

bb262:                                            ; preds = %dec_label_pc_499c7
  %v1_499f8 = call i64 @function_49bc8()
  store i64 %v1_499f8, i64* @rax, align 8
  %v0_499fe.pre = load i64, i64* @rbx, align 8
  %v0_49a02.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_499fe

dec_label_pc_499fe:                               ; preds = %bb262, %dec_label_pc_499c7
  %v0_49a02 = phi i64 [ %v0_49a02.pre, %bb262 ], [ %v2_499ce, %dec_label_pc_499c7 ]
  %v0_49a0e = phi i64 [ %v0_499fe.pre, %bb262 ], [ %v0_499d7, %dec_label_pc_499c7 ]
  %v1_499fe = add i64 %v0_49a0e, 80
  %v2_499fe = inttoptr i64 %v1_499fe to i64*
  %v3_499fe = load i64, i64* %v2_499fe, align 8
  store i64 %v3_499fe, i64* @rdi, align 8
  store i64 %v0_49a02, i64* %rsi.global-to-local, align 8
  %v1_49a05 = inttoptr i64 %v3_499fe to i64*
  %v2_49a05 = load i64, i64* %v1_49a05, align 8
  store i64 %v2_49a05, i64* @rax, align 8
  %v1_49a0e = add i64 %v0_49a0e, 72
  %v2_49a0e = inttoptr i64 %v1_49a0e to i64*
  %v3_49a0e = load i64, i64* %v2_49a0e, align 8
  store i64 %v3_49a0e, i64* @rdi, align 8
  store i64 %v2_49a05, i64* %r13.global-to-local, align 8
  store i64 %v2_49a05, i64* %rsi.global-to-local, align 8
  %v1_49a18 = inttoptr i64 %v3_49a0e to i64*
  %v2_49a18 = load i64, i64* %v1_49a18, align 8
  store i64 %v2_49a18, i64* @rax, align 8
  %v1_49a21 = inttoptr i64 %v2_49a18 to i64*
  %v2_49a21 = load i64, i64* %v1_49a21, align 8
  store i64 %v2_49a21, i64* @rdx, align 8
  store i64 %v2_49a18, i64* @rdi, align 8
  %v4_49a2d = trunc i64 %v2_49a18 to i8
  %v5_49a2d = icmp eq i8 %v4_49a2d, 0
  br i1 %v5_49a2d, label %bb263, label %dec_label_pc_49a35

bb263:                                            ; preds = %dec_label_pc_499fe
  %v1_49a2f = call i64 @function_49b60()
  store i64 %v1_49a2f, i64* @rax, align 8
  %v0_49a35.pre = load i64, i64* @rbx, align 8
  %v0_49a3d.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_49a35

dec_label_pc_49a35:                               ; preds = %bb263, %dec_label_pc_499fe
  %v0_49a3d = phi i64 [ %v0_49a3d.pre, %bb263 ], [ %v2_49a05, %dec_label_pc_499fe ]
  %v0_49a35 = phi i64 [ %v0_49a35.pre, %bb263 ], [ %v0_49a0e, %dec_label_pc_499fe ]
  %v1_49a35 = add i64 %v0_49a35, 80
  %v2_49a35 = inttoptr i64 %v1_49a35 to i64*
  %v3_49a35 = load i64, i64* %v2_49a35, align 8
  store i64 %v3_49a35, i64* @rdi, align 8
  %v1_49a39 = add i64 %v0_49a35, 88
  %v2_49a39 = inttoptr i64 %v1_49a39 to i64*
  %v3_49a39 = load i64, i64* %v2_49a39, align 8
  store i64 %v0_49a3d, i64* %rsi.global-to-local, align 8
  %v1_49a40 = inttoptr i64 %v3_49a35 to i64*
  %v2_49a40 = load i64, i64* %v1_49a40, align 8
  store i64 %v2_49a40, i64* @rax, align 8
  %v1_49a49 = inttoptr i64 %v2_49a40 to i64*
  %v2_49a49 = load i64, i64* %v1_49a49, align 8
  store i64 %v2_49a49, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_49a40, i64* @rdi, align 8
  %v1_49a5a = inttoptr i64 %v3_49a39 to i64*
  %v2_49a5a = load i64, i64* %v1_49a5a, align 8
  store i64 %v2_49a5a, i64* @rdx, align 8
  store i64 %v2_49a40, i64* %rsi.global-to-local, align 8
  store i64 %v3_49a39, i64* @rdi, align 8
  %v2_49a69 = load i64, i64* %v1_49a49, align 8
  store i64 %v2_49a69, i64* @rdx, align 8
  store i64 %v2_49a40, i64* @rdi, align 8
  %v2_49a72 = load i64, i64* %v1_49a49, align 8
  store i64 %v2_49a72, i64* @rdx, align 8
  store i64 %v2_49a40, i64* @rdi, align 8
  %v4_49a7e = trunc i64 %v2_49a40 to i8
  %v5_49a7e = icmp eq i8 %v4_49a7e, 0
  br i1 %v5_49a7e, label %bb264, label %dec_label_pc_49a86

bb264:                                            ; preds = %dec_label_pc_49a35
  %v1_49a80 = call i64 @function_49b60()
  store i64 %v1_49a80, i64* @rax, align 8
  %v0_49a86.pre = load i64, i64* @rbx, align 8
  %v0_49ab4.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_49a86

dec_label_pc_49a86:                               ; preds = %bb264, %dec_label_pc_49a35
  %v0_49ab4 = phi i64 [ %v0_49ab4.pre, %bb264 ], [ %v0_49a3d, %dec_label_pc_49a35 ]
  %v0_49aad = phi i64 [ %v0_49a86.pre, %bb264 ], [ %v0_49a35, %dec_label_pc_49a35 ]
  %v1_49a86 = add i64 %v0_49aad, 104
  %v2_49a86 = inttoptr i64 %v1_49a86 to i64*
  %v3_49a86 = load i64, i64* %v2_49a86, align 8
  store i64 %v3_49a86, i64* @rdi, align 8
  %v0_49a8a = load i64, i64* @rbp, align 8
  store i64 %v0_49a8a, i64* %rsi.global-to-local, align 8
  %v1_49a91 = inttoptr i64 %v3_49a86 to i64*
  %v2_49a91 = load i64, i64* %v1_49a91, align 8
  store i64 %v2_49a91, i64* @rax, align 8
  %v3_49a9a = load i64, i64* %v2_49a86, align 8
  store i64 %v3_49a9a, i64* @rdi, align 8
  %v0_49aa1 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_49aa1, i64* %rsi.global-to-local, align 8
  %v1_49aa4 = inttoptr i64 %v3_49a9a to i64*
  %v2_49aa4 = load i64, i64* %v1_49aa4, align 8
  store i64 %v2_49aa4, i64* @rax, align 8
  %v3_49aad = load i64, i64* %v2_49a86, align 8
  store i64 %v3_49aad, i64* @rdi, align 8
  store i64 %v2_49aa4, i64* %r12.global-to-local, align 8
  store i64 %v0_49ab4, i64* %rsi.global-to-local, align 8
  %v1_49ab7 = inttoptr i64 %v3_49aad to i64*
  %v2_49ab7 = load i64, i64* %v1_49ab7, align 8
  store i64 301767, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_49ab7, i64* %r13.global-to-local, align 8
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49b60() local_unnamed_addr {
dec_label_pc_49b60:
  %v0_49b60 = load i64, i64* @rbx, align 8
  %v1_49b60 = add i64 %v0_49b60, 64
  %v2_49b60 = inttoptr i64 %v1_49b60 to i64*
  %v3_49b60 = load i64, i64* %v2_49b60, align 8
  store i64 %v3_49b60, i64* @rbp, align 8
  %v0_49b64 = load i64, i64* inttoptr (i64 301931 to i64*), align 8
  store i64 %v0_49b64, i64* @rbx, align 8
  store i64 301938, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49b74(i64 %arg1) local_unnamed_addr {
dec_label_pc_49b74:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_49bb0() local_unnamed_addr {
dec_label_pc_49bb0:
  %v0_49bb0 = load i64, i64* @rbx, align 8
  %v1_49bb0 = add i64 %v0_49bb0, 48
  %v2_49bb0 = inttoptr i64 %v1_49bb0 to i64*
  %v3_49bb0 = load i64, i64* %v2_49bb0, align 8
  store i64 %v3_49bb0, i64* @rdi, align 8
  %v1_49bb7 = inttoptr i64 %v3_49bb0 to i64*
  %v2_49bb7 = load i64, i64* %v1_49bb7, align 8
  store i64 %v2_49bb7, i64* @rax, align 8
  ret i64 %v2_49bb7
}

define i64 @function_49bc8() local_unnamed_addr {
dec_label_pc_49bc8:
  %v0_49bc8 = load i64, i64* @rbx, align 8
  %v1_49bc8 = add i64 %v0_49bc8, 64
  %v2_49bc8 = inttoptr i64 %v1_49bc8 to i64*
  %v3_49bc8 = load i64, i64* %v2_49bc8, align 8
  store i64 %v3_49bc8, i64* @rbp, align 8
  store i64 302035, i64* @rdi, align 8
  %v0_49bd3 = load i64, i64* inttoptr (i64 302042 to i64*), align 8
  store i64 %v0_49bd3, i64* @rbx, align 8
  %v1_49bda = call i64 @function_49b74(i64 302035)
  store i64 %v1_49bda, i64* @rax, align 8
  ret i64 %v1_49bda
}

define i64 @function_49bdc(i64 %arg1) local_unnamed_addr {
dec_label_pc_49bdc:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49be5() local_unnamed_addr {
dec_label_pc_49be5:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$18$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_49c00:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_49c07 = load i64, i64* @rbx, align 8
  %v2_49c08 = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v2_49c08, i64* @rax, align 8
  %v0_49c0b = load i64, i64* @rdi, align 8
  store i64 %v0_49c0b, i64* @rbx, align 8
  store i64 %v2_49c08, i64* @rdi, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v1_49c1c = add i64 %v0_49c0b, 24
  %v2_49c1c = inttoptr i64 %v1_49c1c to i64*
  %v3_49c1c = load i64, i64* %v2_49c1c, align 8
  store i64 %v3_49c1c, i64* @rdi, align 8
  %v1_49c20 = inttoptr i64 %v3_49c1c to i64*
  %v2_49c20 = load i64, i64* %v1_49c20, align 8
  store i64 %v2_49c20, i64* @rax, align 8
  %v1_49c29 = inttoptr i64 %v2_49c20 to i64*
  %v2_49c29 = load i64, i64* %v1_49c29, align 8
  store i64 %v2_49c29, i64* @rdx, align 8
  store i64 %v2_49c20, i64* @rdi, align 8
  %v4_49c35 = trunc i64 %v2_49c20 to i8
  %v5_49c35 = icmp eq i8 %v4_49c35, 0
  br i1 %v5_49c35, label %dec_label_pc_49c50, label %dec_label_pc_49c39

dec_label_pc_49c39:                               ; preds = %dec_label_pc_49c00
  %v0_49c39 = load i64, i64* inttoptr (i64 302144 to i64*), align 64
  store i64 %v0_49c39, i64* @rax, align 8
  store i64 %v0_49c07, i64* @rbx, align 8
  ret i64 %v0_49c39

dec_label_pc_49c50:                               ; preds = %dec_label_pc_49c00
  %v1_49c50 = add i64 %v0_49c0b, 32
  %v2_49c50 = inttoptr i64 %v1_49c50 to i64*
  %v3_49c50 = load i64, i64* %v2_49c50, align 8
  store i64 %v3_49c50, i64* @rdi, align 8
  %v1_49c54 = inttoptr i64 %v3_49c50 to i64*
  %v2_49c54 = load i64, i64* %v1_49c54, align 8
  store i64 %v2_49c54, i64* @rax, align 8
  store i64 %v2_49c54, i64* @rbp, align 8
  %v1_49c60 = inttoptr i64 %v2_49c54 to i64*
  %v2_49c60 = load i64, i64* %v1_49c60, align 8
  store i64 %v2_49c60, i64* @rax, align 8
  %v1_49c63 = add i64 %v0_49c0b, 40
  %v2_49c63 = inttoptr i64 %v1_49c63 to i64*
  %v3_49c63 = load i64, i64* %v2_49c63, align 8
  store i64 %v3_49c63, i64* %rsi.global-to-local, align 8
  store i64 %v2_49c54, i64* @rdi, align 8
  %v4_49c70 = trunc i64 %v2_49c60 to i8
  %v5_49c70 = icmp eq i8 %v4_49c70, 0
  br i1 %v5_49c70, label %bb, label %dec_label_pc_49c78

bb:                                               ; preds = %dec_label_pc_49c50
  %v1_49c72 = call i64 @function_49eb0()
  store i64 %v1_49c72, i64* @rax, align 8
  %v0_49c78.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_49c78

dec_label_pc_49c78:                               ; preds = %bb, %dec_label_pc_49c50
  %v0_49c78 = phi i64 [ %v0_49c78.pre, %bb ], [ %v0_49c0b, %dec_label_pc_49c50 ]
  %v1_49c78 = add i64 %v0_49c78, 56
  %v2_49c78 = inttoptr i64 %v1_49c78 to i64*
  %v3_49c78 = load i64, i64* %v2_49c78, align 8
  store i64 %v3_49c78, i64* @rdi, align 8
  %v1_49c7c = inttoptr i64 %v3_49c78 to i64*
  %v2_49c7c = load i64, i64* %v1_49c7c, align 8
  store i64 %v2_49c7c, i64* @rax, align 8
  store i64 %v2_49c7c, i64* @rbp, align 8
  %v1_49c88 = inttoptr i64 %v2_49c7c to i64*
  %v2_49c88 = load i64, i64* %v1_49c88, align 8
  store i64 %v2_49c88, i64* @rax, align 8
  %v0_49c8b = load i64, i64* inttoptr (i64 302226 to i64*), align 8
  store i64 %v0_49c8b, i64* %rsi.global-to-local, align 8
  store i64 %v2_49c7c, i64* @rdi, align 8
  %v4_49c9b = trunc i64 %v2_49c88 to i8
  %v5_49c9b = icmp eq i8 %v4_49c9b, 0
  %v1_49c9d = icmp eq i1 %v5_49c9b, false
  br i1 %v1_49c9d, label %bb260, label %dec_label_pc_49ca3

bb260:                                            ; preds = %dec_label_pc_49c78
  %v2_49c9d = call i64 @function_49e60()
  store i64 %v2_49c9d, i64* @rax, align 8
  %v0_49ca3.pre = load i64, i64* @rbx, align 8
  %v0_49ca7.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_49ca3

dec_label_pc_49ca3:                               ; preds = %bb260, %dec_label_pc_49c78
  %v0_49ca7 = phi i64 [ %v0_49ca7.pre, %bb260 ], [ %v2_49c7c, %dec_label_pc_49c78 ]
  %v0_49ca3 = phi i64 [ %v0_49ca3.pre, %bb260 ], [ %v0_49c78, %dec_label_pc_49c78 ]
  %v1_49ca3 = add i64 %v0_49ca3, 72
  %v2_49ca3 = inttoptr i64 %v1_49ca3 to i64*
  %v3_49ca3 = load i64, i64* %v2_49ca3, align 8
  store i64 %v3_49ca3, i64* @rdi, align 8
  store i64 %v0_49ca7, i64* %rsi.global-to-local, align 8
  %v1_49caa = inttoptr i64 %v3_49ca3 to i64*
  %v2_49caa = load i64, i64* %v1_49caa, align 8
  store i64 %v2_49caa, i64* @rax, align 8
  %v1_49cb3 = inttoptr i64 %v2_49caa to i64*
  %v2_49cb3 = load i64, i64* %v1_49cb3, align 8
  store i64 %v2_49cb3, i64* @rdx, align 8
  store i64 %v2_49caa, i64* @rdi, align 8
  %v4_49cbf = trunc i64 %v2_49caa to i8
  %v5_49cbf = icmp eq i8 %v4_49cbf, 0
  br i1 %v5_49cbf, label %bb261, label %dec_label_pc_49cc7

bb261:                                            ; preds = %dec_label_pc_49ca3
  %v1_49cc1 = call i64 @function_49ec8()
  store i64 %v1_49cc1, i64* @rax, align 8
  %v0_49cc7.pre = load i64, i64* @rbx, align 8
  %v0_49ccb.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_49cc7

dec_label_pc_49cc7:                               ; preds = %bb261, %dec_label_pc_49ca3
  %v0_49ccb = phi i64 [ %v0_49ccb.pre, %bb261 ], [ %v0_49ca7, %dec_label_pc_49ca3 ]
  %v0_49cd7 = phi i64 [ %v0_49cc7.pre, %bb261 ], [ %v0_49ca3, %dec_label_pc_49ca3 ]
  %v1_49cc7 = add i64 %v0_49cd7, 80
  %v2_49cc7 = inttoptr i64 %v1_49cc7 to i64*
  %v3_49cc7 = load i64, i64* %v2_49cc7, align 8
  store i64 %v3_49cc7, i64* @rdi, align 8
  store i64 %v0_49ccb, i64* %rsi.global-to-local, align 8
  %v1_49cce = inttoptr i64 %v3_49cc7 to i64*
  %v2_49cce = load i64, i64* %v1_49cce, align 8
  store i64 %v2_49cce, i64* @rax, align 8
  %v1_49cd7 = add i64 %v0_49cd7, 72
  %v2_49cd7 = inttoptr i64 %v1_49cd7 to i64*
  %v3_49cd7 = load i64, i64* %v2_49cd7, align 8
  store i64 %v3_49cd7, i64* @rdi, align 8
  store i64 %v2_49cce, i64* %r12.global-to-local, align 8
  store i64 %v2_49cce, i64* %rsi.global-to-local, align 8
  %v1_49ce1 = inttoptr i64 %v3_49cd7 to i64*
  %v2_49ce1 = load i64, i64* %v1_49ce1, align 8
  store i64 %v2_49ce1, i64* @rax, align 8
  %v1_49cea = inttoptr i64 %v2_49ce1 to i64*
  %v2_49cea = load i64, i64* %v1_49cea, align 8
  store i64 %v2_49cea, i64* @rdx, align 8
  store i64 %v2_49ce1, i64* @rdi, align 8
  %v4_49cf6 = trunc i64 %v2_49ce1 to i8
  %v5_49cf6 = icmp eq i8 %v4_49cf6, 0
  br i1 %v5_49cf6, label %bb262, label %dec_label_pc_49cfe

bb262:                                            ; preds = %dec_label_pc_49cc7
  %v1_49cf8 = call i64 @function_49ec8()
  store i64 %v1_49cf8, i64* @rax, align 8
  %v0_49cfe.pre = load i64, i64* @rbx, align 8
  %v0_49d02.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_49cfe

dec_label_pc_49cfe:                               ; preds = %bb262, %dec_label_pc_49cc7
  %v0_49d02 = phi i64 [ %v0_49d02.pre, %bb262 ], [ %v2_49cce, %dec_label_pc_49cc7 ]
  %v0_49d0e = phi i64 [ %v0_49cfe.pre, %bb262 ], [ %v0_49cd7, %dec_label_pc_49cc7 ]
  %v1_49cfe = add i64 %v0_49d0e, 80
  %v2_49cfe = inttoptr i64 %v1_49cfe to i64*
  %v3_49cfe = load i64, i64* %v2_49cfe, align 8
  store i64 %v3_49cfe, i64* @rdi, align 8
  store i64 %v0_49d02, i64* %rsi.global-to-local, align 8
  %v1_49d05 = inttoptr i64 %v3_49cfe to i64*
  %v2_49d05 = load i64, i64* %v1_49d05, align 8
  store i64 %v2_49d05, i64* @rax, align 8
  %v1_49d0e = add i64 %v0_49d0e, 72
  %v2_49d0e = inttoptr i64 %v1_49d0e to i64*
  %v3_49d0e = load i64, i64* %v2_49d0e, align 8
  store i64 %v3_49d0e, i64* @rdi, align 8
  store i64 %v2_49d05, i64* %r13.global-to-local, align 8
  store i64 %v2_49d05, i64* %rsi.global-to-local, align 8
  %v1_49d18 = inttoptr i64 %v3_49d0e to i64*
  %v2_49d18 = load i64, i64* %v1_49d18, align 8
  store i64 %v2_49d18, i64* @rax, align 8
  %v1_49d21 = inttoptr i64 %v2_49d18 to i64*
  %v2_49d21 = load i64, i64* %v1_49d21, align 8
  store i64 %v2_49d21, i64* @rdx, align 8
  store i64 %v2_49d18, i64* @rdi, align 8
  %v4_49d2d = trunc i64 %v2_49d18 to i8
  %v5_49d2d = icmp eq i8 %v4_49d2d, 0
  br i1 %v5_49d2d, label %bb263, label %dec_label_pc_49d35

bb263:                                            ; preds = %dec_label_pc_49cfe
  %v1_49d2f = call i64 @function_49e60()
  store i64 %v1_49d2f, i64* @rax, align 8
  %v0_49d35.pre = load i64, i64* @rbx, align 8
  %v0_49d3d.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_49d35

dec_label_pc_49d35:                               ; preds = %bb263, %dec_label_pc_49cfe
  %v0_49d3d = phi i64 [ %v0_49d3d.pre, %bb263 ], [ %v2_49d05, %dec_label_pc_49cfe ]
  %v0_49d35 = phi i64 [ %v0_49d35.pre, %bb263 ], [ %v0_49d0e, %dec_label_pc_49cfe ]
  %v1_49d35 = add i64 %v0_49d35, 80
  %v2_49d35 = inttoptr i64 %v1_49d35 to i64*
  %v3_49d35 = load i64, i64* %v2_49d35, align 8
  store i64 %v3_49d35, i64* @rdi, align 8
  %v1_49d39 = add i64 %v0_49d35, 88
  %v2_49d39 = inttoptr i64 %v1_49d39 to i64*
  %v3_49d39 = load i64, i64* %v2_49d39, align 8
  store i64 %v0_49d3d, i64* %rsi.global-to-local, align 8
  %v1_49d40 = inttoptr i64 %v3_49d35 to i64*
  %v2_49d40 = load i64, i64* %v1_49d40, align 8
  store i64 %v2_49d40, i64* @rax, align 8
  %v1_49d49 = inttoptr i64 %v2_49d40 to i64*
  %v2_49d49 = load i64, i64* %v1_49d49, align 8
  store i64 %v2_49d49, i64* @rdx, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v2_49d40, i64* @rdi, align 8
  %v1_49d5a = inttoptr i64 %v3_49d39 to i64*
  %v2_49d5a = load i64, i64* %v1_49d5a, align 8
  store i64 %v2_49d5a, i64* @rdx, align 8
  store i64 %v2_49d40, i64* %rsi.global-to-local, align 8
  store i64 %v3_49d39, i64* @rdi, align 8
  %v2_49d69 = load i64, i64* %v1_49d49, align 8
  store i64 %v2_49d69, i64* @rdx, align 8
  store i64 %v2_49d40, i64* @rdi, align 8
  %v2_49d72 = load i64, i64* %v1_49d49, align 8
  store i64 %v2_49d72, i64* @rdx, align 8
  store i64 %v2_49d40, i64* @rdi, align 8
  %v4_49d7e = trunc i64 %v2_49d40 to i8
  %v5_49d7e = icmp eq i8 %v4_49d7e, 0
  br i1 %v5_49d7e, label %bb264, label %dec_label_pc_49d86

bb264:                                            ; preds = %dec_label_pc_49d35
  %v1_49d80 = call i64 @function_49e60()
  store i64 %v1_49d80, i64* @rax, align 8
  %v0_49d86.pre = load i64, i64* @rbx, align 8
  %v0_49db4.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_49d86

dec_label_pc_49d86:                               ; preds = %bb264, %dec_label_pc_49d35
  %v0_49db4 = phi i64 [ %v0_49db4.pre, %bb264 ], [ %v0_49d3d, %dec_label_pc_49d35 ]
  %v0_49dad = phi i64 [ %v0_49d86.pre, %bb264 ], [ %v0_49d35, %dec_label_pc_49d35 ]
  %v1_49d86 = add i64 %v0_49dad, 104
  %v2_49d86 = inttoptr i64 %v1_49d86 to i64*
  %v3_49d86 = load i64, i64* %v2_49d86, align 8
  store i64 %v3_49d86, i64* @rdi, align 8
  %v0_49d8a = load i64, i64* @rbp, align 8
  store i64 %v0_49d8a, i64* %rsi.global-to-local, align 8
  %v1_49d91 = inttoptr i64 %v3_49d86 to i64*
  %v2_49d91 = load i64, i64* %v1_49d91, align 8
  store i64 %v2_49d91, i64* @rax, align 8
  %v3_49d9a = load i64, i64* %v2_49d86, align 8
  store i64 %v3_49d9a, i64* @rdi, align 8
  %v0_49da1 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_49da1, i64* %rsi.global-to-local, align 8
  %v1_49da4 = inttoptr i64 %v3_49d9a to i64*
  %v2_49da4 = load i64, i64* %v1_49da4, align 8
  store i64 %v2_49da4, i64* @rax, align 8
  %v3_49dad = load i64, i64* %v2_49d86, align 8
  store i64 %v3_49dad, i64* @rdi, align 8
  store i64 %v2_49da4, i64* %r12.global-to-local, align 8
  store i64 %v0_49db4, i64* %rsi.global-to-local, align 8
  %v1_49db7 = inttoptr i64 %v3_49dad to i64*
  %v2_49db7 = load i64, i64* %v1_49db7, align 8
  store i64 302535, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_49db7, i64* %r13.global-to-local, align 8
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49e60() local_unnamed_addr {
dec_label_pc_49e60:
  %v0_49e60 = load i64, i64* @rbx, align 8
  %v1_49e60 = add i64 %v0_49e60, 64
  %v2_49e60 = inttoptr i64 %v1_49e60 to i64*
  %v3_49e60 = load i64, i64* %v2_49e60, align 8
  store i64 %v3_49e60, i64* @rbp, align 8
  %v0_49e64 = load i64, i64* inttoptr (i64 302699 to i64*), align 8
  store i64 %v0_49e64, i64* @rbx, align 8
  store i64 302706, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49e74(i64 %arg1) local_unnamed_addr {
dec_label_pc_49e74:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_49eb0() local_unnamed_addr {
dec_label_pc_49eb0:
  %v0_49eb0 = load i64, i64* @rbx, align 8
  %v1_49eb0 = add i64 %v0_49eb0, 48
  %v2_49eb0 = inttoptr i64 %v1_49eb0 to i64*
  %v3_49eb0 = load i64, i64* %v2_49eb0, align 8
  store i64 %v3_49eb0, i64* @rdi, align 8
  %v1_49eb7 = inttoptr i64 %v3_49eb0 to i64*
  %v2_49eb7 = load i64, i64* %v1_49eb7, align 8
  store i64 %v2_49eb7, i64* @rax, align 8
  ret i64 %v2_49eb7
}

define i64 @function_49ec8() local_unnamed_addr {
dec_label_pc_49ec8:
  %v0_49ec8 = load i64, i64* @rbx, align 8
  %v1_49ec8 = add i64 %v0_49ec8, 64
  %v2_49ec8 = inttoptr i64 %v1_49ec8 to i64*
  %v3_49ec8 = load i64, i64* %v2_49ec8, align 8
  store i64 %v3_49ec8, i64* @rbp, align 8
  store i64 302803, i64* @rdi, align 8
  %v0_49ed3 = load i64, i64* inttoptr (i64 302810 to i64*), align 8
  store i64 %v0_49ed3, i64* @rbx, align 8
  %v1_49eda = call i64 @function_49e74(i64 302803)
  store i64 %v1_49eda, i64* @rax, align 8
  ret i64 %v1_49eda
}

define i64 @function_49edc(i64 %arg1) local_unnamed_addr {
dec_label_pc_49edc:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_49ee5() local_unnamed_addr {
dec_label_pc_49ee5:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang17lang_luaj$77$15$18onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_49f00:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_49f06 = load i64, i64* %r12.global-to-local, align 8
  %v0_49f08 = load i64, i64* %rbp.global-to-local, align 8
  %v0_49f09 = load i64, i64* @rbx, align 8
  %v0_49f0a = load i64, i64* %rsi.global-to-local, align 8
  %v0_49f0d = load i64, i64* @rdi, align 8
  store i64 %v0_49f0d, i64* @rbp, align 8
  store i64 %v0_49f0a, i64* @r12, align 8
  store i64 1, i64* @rax, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_49f0a, i64* @rdi, align 8
  store i64 %v0_49f0a, i64* @rbx, align 8
  %v1_49f39 = add i64 %v0_49f0d, 24
  %v2_49f39 = inttoptr i64 %v1_49f39 to i64*
  %v3_49f39 = load i64, i64* %v2_49f39, align 8
  store i64 %v3_49f39, i64* @rdi, align 8
  %v1_49f3d = inttoptr i64 %v3_49f39 to i64*
  %v2_49f3d = load i64, i64* %v1_49f3d, align 8
  store i64 %v2_49f3d, i64* @rax, align 8
  %v1_49f46 = inttoptr i64 %v2_49f3d to i64*
  %v2_49f46 = load i64, i64* %v1_49f46, align 8
  store i64 %v2_49f46, i64* @rdx, align 8
  store i64 %v2_49f3d, i64* @rdi, align 8
  %v4_49f52 = trunc i64 %v2_49f3d to i8
  %v5_49f52 = icmp eq i8 %v4_49f52, 0
  br i1 %v5_49f52, label %dec_label_pc_49f70, label %dec_label_pc_49f56

dec_label_pc_49f56:                               ; preds = %dec_label_pc_49f00
  store i64 %v0_49f0a, i64* @rax, align 8
  store i64 %v0_49f09, i64* @rbx, align 8
  store i64 %v0_49f08, i64* %rbp.global-to-local, align 8
  store i64 %v0_49f06, i64* %r12.global-to-local, align 8
  ret i64 %v0_49f0a

dec_label_pc_49f70:                               ; preds = %dec_label_pc_49f00
  %v1_49f70 = add i64 %v0_49f0d, 32
  %v2_49f70 = inttoptr i64 %v1_49f70 to i64*
  %v3_49f70 = load i64, i64* %v2_49f70, align 8
  store i64 %v3_49f70, i64* @rdi, align 8
  %v1_49f74 = inttoptr i64 %v3_49f70 to i64*
  %v2_49f74 = load i64, i64* %v1_49f74, align 8
  store i64 %v2_49f74, i64* @rax, align 8
  store i64 %v2_49f74, i64* @r13, align 8
  %v1_49f80 = inttoptr i64 %v2_49f74 to i64*
  %v2_49f80 = load i64, i64* %v1_49f80, align 8
  store i64 %v2_49f80, i64* @rax, align 8
  %v0_49f83 = load i64, i64* inttoptr (i64 302986 to i64*), align 8
  store i64 %v0_49f83, i64* %rsi.global-to-local, align 8
  store i64 %v2_49f74, i64* @rdi, align 8
  %v4_49f93 = trunc i64 %v2_49f80 to i8
  %v5_49f93 = icmp eq i8 %v4_49f93, 0
  br i1 %v5_49f93, label %bb, label %dec_label_pc_49f9b

bb:                                               ; preds = %dec_label_pc_49f70
  %v1_49f95 = call i64 @function_4a050()
  store i64 %v1_49f95, i64* @rax, align 8
  %v0_49f9b.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_49f9b

dec_label_pc_49f9b:                               ; preds = %bb, %dec_label_pc_49f70
  %v0_49f9b = phi i64 [ %v0_49f9b.pre, %bb ], [ %v0_49f0d, %dec_label_pc_49f70 ]
  %v1_49f9b = add i64 %v0_49f9b, 40
  %v2_49f9b = inttoptr i64 %v1_49f9b to i64*
  %v3_49f9b = load i64, i64* %v2_49f9b, align 8
  store i64 %v3_49f9b, i64* @rax, align 8
  %v1_49f9f = add i64 %v3_49f9b, 8
  %v2_49f9f = inttoptr i64 %v1_49f9f to i32*
  %v3_49f9f = load i32, i32* %v2_49f9f, align 4
  %v4_49f9f = zext i32 %v3_49f9f to i64
  store i64 %v4_49f9f, i64* @r11, align 8
  %v5_49fa3 = icmp eq i32 %v3_49f9f, 0
  br i1 %v5_49fa3, label %bb255, label %dec_label_pc_49fac

bb255:                                            ; preds = %dec_label_pc_49f9b
  %v2_49fa6 = call i64 @function_4a37d(i64 %v2_49f74)
  store i64 %v2_49fa6, i64* @rax, align 8
  %v0_49fbc.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_49fac

dec_label_pc_49fac:                               ; preds = %bb255, %dec_label_pc_49f9b
  %v0_49fc4 = phi i64 [ %v0_49fbc.pre, %bb255 ], [ %v0_49f9b, %dec_label_pc_49f9b ]
  %v0_49fac = phi i64 [ %v2_49fa6, %bb255 ], [ %v3_49f9b, %dec_label_pc_49f9b ]
  %v1_49fac = add i64 %v0_49fac, 16
  %v2_49fac = inttoptr i64 %v1_49fac to i64*
  %v3_49fac = load i64, i64* %v2_49fac, align 8
  store i64 %v3_49fac, i64* @rdi, align 8
  %v1_49fb0 = inttoptr i64 %v3_49fac to i64*
  %v2_49fb0 = load i64, i64* %v1_49fb0, align 8
  store i64 %v2_49fb0, i64* @rax, align 8
  store i64 %v2_49fb0, i64* %r14.global-to-local, align 8
  %v1_49fbc = add i64 %v0_49fc4, 64
  %v2_49fbc = inttoptr i64 %v1_49fbc to i64*
  %v3_49fbc = load i64, i64* %v2_49fbc, align 8
  store i64 %v3_49fbc, i64* @rax, align 8
  %v1_49fc0 = add i64 %v0_49fc4, 48
  %v2_49fc0 = inttoptr i64 %v1_49fc0 to i64*
  %v3_49fc0 = load i64, i64* %v2_49fc0, align 8
  store i64 %v3_49fc0, i64* %r12.global-to-local, align 8
  %v1_49fc8 = add i64 %v3_49fbc, 8
  %v2_49fc8 = inttoptr i64 %v1_49fc8 to i32*
  %v3_49fc8 = load i32, i32* %v2_49fc8, align 4
  %v5_49fcc = icmp eq i32 %v3_49fc8, 0
  br i1 %v5_49fcc, label %bb256, label %dec_label_pc_49fd5

bb256:                                            ; preds = %dec_label_pc_49fac
  %v2_49fcf = call i64 @function_4a37d(i64 %v3_49fac)
  store i64 %v2_49fcf, i64* @rax, align 8
  %v0_49fd9.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_49ff6.pre = load i64, i64* @rbp, align 8
  %v0_4a001.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_49fd5

dec_label_pc_49fd5:                               ; preds = %bb256, %dec_label_pc_49fac
  %v0_4a001 = phi i64 [ %v0_4a001.pre, %bb256 ], [ %v2_49fb0, %dec_label_pc_49fac ]
  %v0_49ff6 = phi i64 [ %v0_49ff6.pre, %bb256 ], [ %v0_49fc4, %dec_label_pc_49fac ]
  %v0_49ff3 = phi i64 [ %v0_49fd9.pre, %bb256 ], [ %v3_49fc0, %dec_label_pc_49fac ]
  %v0_49fd5 = phi i64 [ %v2_49fcf, %bb256 ], [ %v3_49fbc, %dec_label_pc_49fac ]
  %v1_49fd5 = add i64 %v0_49fd5, 16
  %v2_49fd5 = inttoptr i64 %v1_49fd5 to i64*
  %v3_49fd5 = load i64, i64* %v2_49fd5, align 8
  %v1_49fd9 = inttoptr i64 %v0_49ff3 to i64*
  %v2_49fd9 = load i64, i64* %v1_49fd9, align 8
  store i64 %v2_49fd9, i64* @rax, align 8
  %v0_49fdd = load i64, i64* @rbx, align 8
  store i64 %v0_49fdd, i64* %rsi.global-to-local, align 8
  store i64 %v0_49ff3, i64* @rdi, align 8
  store i64 %v2_49fd9, i64* @rdx, align 8
  store i64 %v3_49fd5, i64* %rsi.global-to-local, align 8
  store i64 %v0_49ff3, i64* @rdi, align 8
  %v1_49ff6 = add i64 %v0_49ff6, 72
  %v2_49ff6 = inttoptr i64 %v1_49ff6 to i64*
  %v3_49ff6 = load i64, i64* %v2_49ff6, align 8
  store i64 %v3_49ff6, i64* @rcx, align 8
  store i64 %v0_4a001, i64* @rdx, align 8
  store i64 %v2_49fd9, i64* %rsi.global-to-local, align 8
  store i64 303126, i64* @rdi, align 8
  store i64 %v2_49fd9, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a050() local_unnamed_addr {
dec_label_pc_4a050:
  %r13.global-to-local = alloca i64, align 8
  %v2_4a050 = load i64, i64* @r13, align 8
  store i64 %v2_4a050, i64* @rax, align 8
  store i64 %v2_4a050, i64* @rdi, align 8
  %v4_4a064 = trunc i64 %v2_4a050 to i8
  %v5_4a064 = icmp eq i8 %v4_4a064, 0
  br i1 %v5_4a064, label %dec_label_pc_4a1a7, label %dec_label_pc_4a068

dec_label_pc_4a068:                               ; preds = %dec_label_pc_4a050
  %v0_4a068 = load i64, i64* @rbp, align 8
  %v1_4a068 = add i64 %v0_4a068, 40
  %v2_4a068 = inttoptr i64 %v1_4a068 to i64*
  %v3_4a068 = load i64, i64* %v2_4a068, align 8
  store i64 %v3_4a068, i64* @rax, align 8
  %v1_4a06c = add i64 %v3_4a068, 8
  %v2_4a06c = inttoptr i64 %v1_4a06c to i32*
  %v3_4a06c = load i32, i32* %v2_4a06c, align 4
  %v5_4a070 = icmp eq i32 %v3_4a06c, 0
  br i1 %v5_4a070, label %bb, label %dec_label_pc_4a079

bb:                                               ; preds = %dec_label_pc_4a068
  %v2_4a073 = call i64 @function_4a37d(i64 %v2_4a050)
  store i64 %v2_4a073, i64* @rax, align 8
  %v0_4a086.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_4a079

dec_label_pc_4a079:                               ; preds = %bb, %dec_label_pc_4a068
  %v0_4a086 = phi i64 [ %v0_4a086.pre, %bb ], [ %v0_4a068, %dec_label_pc_4a068 ]
  %v0_4a079 = phi i64 [ %v2_4a073, %bb ], [ %v3_4a068, %dec_label_pc_4a068 ]
  %v1_4a079 = add i64 %v0_4a079, 16
  %v2_4a079 = inttoptr i64 %v1_4a079 to i64*
  %v3_4a079 = load i64, i64* %v2_4a079, align 8
  store i64 %v3_4a079, i64* @rdi, align 8
  %v1_4a07d = inttoptr i64 %v3_4a079 to i64*
  %v2_4a07d = load i64, i64* %v1_4a07d, align 8
  store i64 %v2_4a07d, i64* @rax, align 8
  %v1_4a08a = add i64 %v0_4a086, 56
  %v2_4a08a = inttoptr i64 %v1_4a08a to i64*
  %v3_4a08a = load i64, i64* %v2_4a08a, align 8
  store i64 %v3_4a08a, i64* @rdi, align 8
  %v0_4a08e = load i64, i64* @rbx, align 8
  store i64 %v0_4a08e, i64* @rdx, align 8
  ret i64 %v2_4a07d

dec_label_pc_4a1a7:                               ; preds = %dec_label_pc_4a050
  store i64 %v2_4a050, i64* @rax, align 8
  store i64 %v2_4a050, i64* @rdi, align 8
  store i64 %v2_4a050, i64* @rax, align 8
  store i64 %v2_4a050, i64* @rdi, align 8
  store i64 %v2_4a050, i64* @rax, align 8
  store i64 %v2_4a050, i64* @rdi, align 8
  %v1_4a1a1 = call i64 @function_4a246()
  store i64 %v1_4a1a1, i64* @rax, align 8
  %v0_4a1a7 = load i64, i64* @rbp, align 8
  %v1_4a1a7 = add i64 %v0_4a1a7, 64
  %v2_4a1a7 = inttoptr i64 %v1_4a1a7 to i64*
  %v3_4a1a7 = load i64, i64* %v2_4a1a7, align 8
  store i64 %v3_4a1a7, i64* @rax, align 8
  %v1_4a1ab = add i64 %v0_4a1a7, 48
  %v2_4a1ab = inttoptr i64 %v1_4a1ab to i64*
  %v3_4a1ab = load i64, i64* %v2_4a1ab, align 8
  store i64 %v3_4a1ab, i64* %r13.global-to-local, align 8
  %v1_4a1b3 = add i64 %v3_4a1a7, 8
  %v2_4a1b3 = inttoptr i64 %v1_4a1b3 to i32*
  %v3_4a1b3 = load i32, i32* %v2_4a1b3, align 4
  %v5_4a1b6 = icmp eq i32 %v3_4a1b3, 0
  br i1 %v5_4a1b6, label %bb16, label %dec_label_pc_4a1be

bb16:                                             ; preds = %dec_label_pc_4a1a7
  %v2_4a1b8 = call i64 @function_4a37d(i64 %v2_4a050)
  store i64 %v2_4a1b8, i64* @rax, align 8
  %v0_4a1c2.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_4a1be

dec_label_pc_4a1be:                               ; preds = %bb16, %dec_label_pc_4a1a7
  %v0_4a1cd = phi i64 [ %v0_4a1c2.pre, %bb16 ], [ %v3_4a1ab, %dec_label_pc_4a1a7 ]
  %v1_4a1c2 = inttoptr i64 %v0_4a1cd to i64*
  %v2_4a1c2 = load i64, i64* %v1_4a1c2, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_4a1c2, i64* @rbp, align 8
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a246() local_unnamed_addr {
dec_label_pc_4a246:
  %v2_4a246 = load i64, i64* @r13, align 8
  store i64 %v2_4a246, i64* @rax, align 8
  store i64 %v2_4a246, i64* @rdi, align 8
  %v4_4a25a = trunc i64 %v2_4a246 to i8
  %v5_4a25a = icmp eq i8 %v4_4a25a, 0
  br i1 %v5_4a25a, label %bb, label %dec_label_pc_4a262

bb:                                               ; preds = %dec_label_pc_4a246
  %v1_4a25c = call i64 @function_4a356()
  store i64 %v1_4a25c, i64* @rax, align 8
  br label %dec_label_pc_4a262

dec_label_pc_4a262:                               ; preds = %bb, %dec_label_pc_4a246
  store i64 1, i64* @rdi, align 8
  %v3_4a267 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 1)
  store i64 %v3_4a267, i64* @rax, align 8
  store i64 %v3_4a267, i64* @rbx, align 8
  %v1_4a26f = inttoptr i64 %v3_4a267 to i64*
  %v2_4a26f = load i64, i64* %v1_4a26f, align 8
  store i64 %v2_4a26f, i64* @rax, align 8
  %v0_4a272 = load i64, i64* @r12, align 8
  store i64 %v0_4a272, i64* @rdx, align 8
  store i64 %v3_4a267, i64* @rdi, align 8
  br label %dec_label_pc_4a2b3

dec_label_pc_4a288:                               ; preds = %dec_label_pc_4a2c2
  %v1_4a288 = add i64 %v0_4a30d, 32
  %v2_4a288 = inttoptr i64 %v1_4a288 to i64*
  %v3_4a288 = load i64, i64* %v2_4a288, align 8
  store i64 %v3_4a288, i64* @rdi, align 8
  %v1_4a28c = inttoptr i64 %v3_4a288 to i64*
  %v2_4a28c = load i64, i64* %v1_4a28c, align 8
  store i64 %v2_4a28c, i64* @rax, align 8
  store i64 %v2_4a28c, i64* @r12, align 8
  %v1_4a298 = inttoptr i64 %v2_4a28c to i64*
  %v2_4a298 = load i64, i64* %v1_4a298, align 8
  store i64 %v2_4a298, i64* @rax, align 8
  store i64 %v2_4a28c, i64* @rdi, align 8
  %v4_4a2ab = trunc i64 %v2_4a298 to i8
  %v5_4a2ab = icmp eq i8 %v4_4a2ab, 0
  br i1 %v5_4a2ab, label %bb9, label %dec_label_pc_4a2b3

bb9:                                              ; preds = %dec_label_pc_4a288
  %v1_4a2ad = call i64 @function_4a36b()
  store i64 %v1_4a2ad, i64* @rax, align 8
  br label %dec_label_pc_4a2b3

dec_label_pc_4a2b3:                               ; preds = %bb9, %dec_label_pc_4a288, %dec_label_pc_4a262
  %v0_4a2b3 = load i64, i64* @rbp, align 8
  %v1_4a2b3 = add i64 %v0_4a2b3, 40
  %v2_4a2b3 = inttoptr i64 %v1_4a2b3 to i64*
  %v3_4a2b3 = load i64, i64* %v2_4a2b3, align 8
  store i64 %v3_4a2b3, i64* @rax, align 8
  %v1_4a2b7 = add i64 %v3_4a2b3, 8
  %v2_4a2b7 = inttoptr i64 %v1_4a2b7 to i32*
  %v3_4a2b7 = load i32, i32* %v2_4a2b7, align 4
  %v4_4a2b7 = zext i32 %v3_4a2b7 to i64
  store i64 %v4_4a2b7, i64* @rdx, align 8
  %v5_4a2ba = icmp eq i32 %v3_4a2b7, 0
  br i1 %v5_4a2ba, label %bb10, label %dec_label_pc_4a2c2

bb10:                                             ; preds = %dec_label_pc_4a2b3
  %v1_4a2bc = load i64, i64* @rdi, align 8
  %v2_4a2bc = call i64 @function_4a37d(i64 %v1_4a2bc)
  store i64 %v2_4a2bc, i64* @rax, align 8
  %v0_4a2d6.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_4a2c2

dec_label_pc_4a2c2:                               ; preds = %bb10, %dec_label_pc_4a2b3
  %v0_4a30d = phi i64 [ %v0_4a2d6.pre, %bb10 ], [ %v0_4a2b3, %dec_label_pc_4a2b3 ]
  %v0_4a2c2 = phi i64 [ %v2_4a2bc, %bb10 ], [ %v3_4a2b3, %dec_label_pc_4a2b3 ]
  %v1_4a2c2 = add i64 %v0_4a2c2, 16
  %v2_4a2c2 = inttoptr i64 %v1_4a2c2 to i64*
  %v3_4a2c2 = load i64, i64* %v2_4a2c2, align 8
  store i64 %v3_4a2c2, i64* @rdi, align 8
  %v1_4a2cd = inttoptr i64 %v3_4a2c2 to i64*
  %v2_4a2cd = load i64, i64* %v1_4a2cd, align 8
  store i64 %v2_4a2cd, i64* @rax, align 8
  %v1_4a2d6 = add i64 %v0_4a30d, 96
  %v2_4a2d6 = inttoptr i64 %v1_4a2d6 to i64*
  %v3_4a2d6 = load i64, i64* %v2_4a2d6, align 8
  store i64 %v3_4a2d6, i64* @rdi, align 8
  store i64 %v2_4a2cd, i64* @rdx, align 8
  %v1_4a2e0 = inttoptr i64 %v3_4a2d6 to i64*
  %v2_4a2e0 = load i64, i64* %v1_4a2e0, align 8
  store i64 %v2_4a2e0, i64* @rcx, align 8
  %v1_4a2e9 = add i64 %v0_4a30d, 24
  %v2_4a2e9 = inttoptr i64 %v1_4a2e9 to i64*
  %v3_4a2e9 = load i64, i64* %v2_4a2e9, align 8
  store i64 %v3_4a2e9, i64* @rdi, align 8
  %v1_4a2ed = inttoptr i64 %v3_4a2e9 to i64*
  %v2_4a2ed = load i64, i64* %v1_4a2ed, align 8
  store i64 %v2_4a2ed, i64* @rax, align 8
  %v1_4a2f6 = inttoptr i64 %v2_4a2ed to i64*
  %v2_4a2f6 = load i64, i64* %v1_4a2f6, align 8
  store i64 %v2_4a2f6, i64* @rdx, align 8
  store i64 %v2_4a2ed, i64* @rdi, align 8
  %v4_4a302 = trunc i64 %v2_4a2ed to i8
  %v5_4a302 = icmp eq i8 %v4_4a302, 0
  br i1 %v5_4a302, label %dec_label_pc_4a288, label %dec_label_pc_4a306

dec_label_pc_4a306:                               ; preds = %dec_label_pc_4a2c2
  %v1_4a306 = add i64 %v0_4a30d, 120
  %v2_4a306 = inttoptr i64 %v1_4a306 to i64*
  %v3_4a306 = load i64, i64* %v2_4a306, align 8
  store i64 %v3_4a306, i64* @rdi, align 8
  %v1_4a315 = inttoptr i64 %v3_4a306 to i64*
  %v2_4a315 = load i64, i64* %v1_4a315, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_4a315, i64* @rbp, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a356() local_unnamed_addr {
dec_label_pc_4a356:
  %v0_4a356 = load i64, i64* @rbp, align 8
  %v1_4a356 = add i64 %v0_4a356, 104
  %v2_4a356 = inttoptr i64 %v1_4a356 to i64*
  %v3_4a356 = load i64, i64* %v2_4a356, align 8
  store i64 %v3_4a356, i64* @rdi, align 8
  %v1_4a35d = inttoptr i64 %v3_4a356 to i64*
  %v2_4a35d = load i64, i64* %v1_4a35d, align 8
  store i64 %v2_4a35d, i64* @rax, align 8
  ret i64 %v2_4a35d
}

define i64 @function_4a36b() local_unnamed_addr {
dec_label_pc_4a36b:
  %v0_4a36b = load i64, i64* @rbp, align 8
  %v1_4a36b = add i64 %v0_4a36b, 104
  %v2_4a36b = inttoptr i64 %v1_4a36b to i64*
  %v3_4a36b = load i64, i64* %v2_4a36b, align 8
  store i64 %v3_4a36b, i64* @rdi, align 8
  %v1_4a372 = inttoptr i64 %v3_4a36b to i64*
  %v2_4a372 = load i64, i64* %v1_4a372, align 8
  store i64 %v2_4a372, i64* @rax, align 8
  ret i64 %v2_4a372
}

define i64 @function_4a37d(i64 %arg1) local_unnamed_addr {
dec_label_pc_4a37d:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a386() local_unnamed_addr {
dec_label_pc_4a386:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib16DebugLib$getinfo6invokeEJPNS1_7VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4a3a0:
  %r15.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_4a3a4 = load i64, i64* @rdi, align 8
  store i64 %v0_4a3a4, i64* %r15.global-to-local, align 8
  %v0_4a3ad = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_4a3ad, i64* @rbx, align 8
  store i64 %v0_4a3ad, i64* @rdi, align 8
  store i64 %v0_4a3ad, i64* @rax, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  %v4_4a3c5 = trunc i64 %v0_4a3ad to i8
  %v5_4a3c5 = icmp eq i8 %v4_4a3c5, 0
  %v1_4a3c7 = icmp eq i1 %v5_4a3c5, false
  br i1 %v1_4a3c7, label %bb, label %dec_label_pc_4a3cd

bb:                                               ; preds = %dec_label_pc_4a3a0
  %v2_4a3c7 = call i64 @function_4ac20()
  store i64 %v2_4a3c7, i64* @rax, align 8
  %v0_4a3cd.pre = load i64, i64* %r15.global-to-local, align 8
  %v2_4a3e5.pre = load i64, i64* @rsi, align 8
  %v0_4a3eb.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_4a3cd

dec_label_pc_4a3cd:                               ; preds = %bb, %dec_label_pc_4a3a0
  %v0_4a401 = phi i64 [ %v0_4a3eb.pre, %bb ], [ %v0_4a3ad, %dec_label_pc_4a3a0 ]
  %v0_4a47a = phi i64 [ %v2_4a3e5.pre, %bb ], [ 1, %dec_label_pc_4a3a0 ]
  %v0_4a40a = phi i64 [ %v0_4a3cd.pre, %bb ], [ %v0_4a3a4, %dec_label_pc_4a3a0 ]
  %v1_4a3cd = add i64 %v0_4a40a, 24
  %v2_4a3cd = inttoptr i64 %v1_4a3cd to i64*
  %v3_4a3cd = load i64, i64* %v2_4a3cd, align 8
  store i64 %v3_4a3cd, i64* @rax, align 8
  %v1_4a3dd = add i64 %v3_4a3cd, 24
  %v2_4a3dd = inttoptr i64 %v1_4a3dd to i64*
  %v3_4a3dd = load i64, i64* %v2_4a3dd, align 8
  store i64 %v3_4a3dd, i64* @rax, align 8
  %v1_4a3e1 = add i64 %v3_4a3dd, 72
  %v2_4a3e1 = inttoptr i64 %v1_4a3e1 to i64*
  %v3_4a3e1 = load i64, i64* %v2_4a3e1, align 8
  store i64 1, i64* %rsi.global-to-local, align 8
  store i64 %v0_4a401, i64* @rdi, align 8
  store i64 1, i64* @rax, align 8
  %v0_4a3f7 = load i64, i64* inttoptr (i64 304126 to i64*), align 8
  store i64 %v0_4a3f7, i64* @rdx, align 8
  store i64 2, i64* %rsi.global-to-local, align 8
  store i64 %v0_4a401, i64* @rdi, align 8
  %v3_4a40a = load i64, i64* %v2_4a3cd, align 8
  store i64 %v3_4a40a, i64* @rdi, align 8
  store i64 %v3_4a3e1, i64* %rsi.global-to-local, align 8
  %v1_4a414 = inttoptr i64 %v3_4a40a to i64*
  %v2_4a414 = load i64, i64* %v1_4a414, align 8
  %v4_4a42d = trunc i64 %v3_4a3e1 to i8
  %v5_4a42d = icmp eq i8 %v4_4a42d, 0
  store i64 %v0_4a47a, i64* @rdi, align 8
  store i64 %v3_4a3e1, i64* @rax, align 8
  br i1 %v5_4a42d, label %dec_label_pc_4a468, label %dec_label_pc_4a438

dec_label_pc_4a438:                               ; preds = %dec_label_pc_4a3cd
  %v1_4a43e = inttoptr i64 %v2_4a414 to i64*
  %v2_4a43e = load i64, i64* %v1_4a43e, align 8
  store i64 %v2_4a43e, i64* @rdx, align 8
  store i64 %v3_4a3e1, i64* %rsi.global-to-local, align 8
  store i64 %v2_4a414, i64* @rdi, align 8
  store i64 %v3_4a3e1, i64* @rbx, align 8
  %v0_4a44d = load i64, i64* inttoptr (i64 304212 to i64*), align 8
  store i64 %v0_4a44d, i64* @rax, align 8
  %v1_4a45d = add i64 %v3_4a3e1, 8
  %v2_4a45d = inttoptr i64 %v1_4a45d to i64*
  %v3_4a45d = load i64, i64* %v2_4a45d, align 8
  br label %dec_label_pc_4a486

dec_label_pc_4a468:                               ; preds = %dec_label_pc_4a3cd
  %v1_4a476 = inttoptr i64 %v2_4a414 to i64*
  %v2_4a476 = load i64, i64* %v1_4a476, align 8
  store i64 %v2_4a476, i64* @rax, align 8
  store i64 %v0_4a47a, i64* %rsi.global-to-local, align 8
  store i64 %v2_4a414, i64* @rdi, align 8
  store i64 %v2_4a476, i64* @rbx, align 8
  br label %dec_label_pc_4a486

dec_label_pc_4a486:                               ; preds = %dec_label_pc_4a468, %dec_label_pc_4a438
  %v0_4a48d = phi i64 [ %v0_4a47a, %dec_label_pc_4a468 ], [ %v3_4a45d, %dec_label_pc_4a438 ]
  store i64 304269, i64* @rdi, align 8
  store i64 %v0_4a48d, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a673(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_4a673:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_4a673 = load i8, i8* bitcast (i64* @rax to i8*), align 8
  %v3_4a673 = load i64, i64* @rax, align 8
  %v4_4a673 = trunc i64 %v3_4a673 to i8
  %v5_4a673 = add i8 %v4_4a673, %v2_4a673
  %v21_4a673 = inttoptr i64 %v3_4a673 to i8*
  store i8 %v5_4a673, i8* %v21_4a673, align 1
  %v0_4a675 = load i64, i64* @rax, align 8
  %v1_4a675 = add i64 %v0_4a675, -117
  %v2_4a675 = inttoptr i64 %v1_4a675 to i8*
  %v3_4a675 = load i8, i8* %v2_4a675, align 1
  %v4_4a675 = load i64, i64* @rcx, align 8
  %v5_4a675 = trunc i64 %v4_4a675 to i8
  %v6_4a675 = add i8 %v5_4a675, %v3_4a675
  store i8 %v6_4a675, i8* %v2_4a675, align 1
  %v0_4a678 = load i64, i64* @rcx, align 8
  %v1_4a678 = trunc i64 %v0_4a678 to i32
  %v2_4a678 = load i64, i64* @rax, align 8
  %v3_4a678 = add i64 %v2_4a678, -119
  %v4_4a678 = inttoptr i64 %v3_4a678 to i32*
  %v5_4a678 = load i32, i32* %v4_4a678, align 4
  %v6_4a678 = or i32 %v5_4a678, %v1_4a678
  %v13_4a678 = zext i32 %v6_4a678 to i64
  store i64 %v13_4a678, i64* @rcx, align 8
  ret i64 %v2_4a678
}

define i64 @function_4a75a(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4a75a:
  store i64 %arg1, i64* @rdi, align 8
  %v18_4a75a = load i64, i64* @rax, align 8
  ret i64 %v18_4a75a
}

define i64 @function_4a75e() local_unnamed_addr {
dec_label_pc_4a75e:
  %rbp.global-to-local = alloca i64, align 8
  %v2_4a75e = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_4a75e, i64* @rax, align 8
  store i64 %v2_4a75e, i64* @rdi, align 8
  ret i64 %v2_4a75e
}

define i64 @function_4a770() local_unnamed_addr {
dec_label_pc_4a770:
  %v1_4a775 = load i64, i64* @rax, align 8
  ret i64 %v1_4a775
}

define i64 @function_4a7c0() local_unnamed_addr {
dec_label_pc_4a7c0:
  store i64 305095, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a8c0() local_unnamed_addr {
dec_label_pc_4a8c0:
  %v1_4a8c5 = load i64, i64* @rax, align 8
  ret i64 %v1_4a8c5
}

define i64 @function_4a8d5() local_unnamed_addr {
dec_label_pc_4a8d5:
  %v1_4a8da = load i64, i64* @rax, align 8
  ret i64 %v1_4a8da
}

define i64 @function_4a907(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_4a907:
  %v0_4a907 = load i64, i64* @rbx, align 8
  store i64 %v0_4a907, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_4a907
}

define i64 @function_4a920() local_unnamed_addr {
dec_label_pc_4a920:
  store i64 305447, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a950() local_unnamed_addr {
dec_label_pc_4a950:
  store i64 305495, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4a9e3(i64 %arg1) local_unnamed_addr {
dec_label_pc_4a9e3:
  %v2_4a9e3 = load i64, i64* @r15, align 8
  store i64 %v2_4a9e3, i64* @rax, align 8
  store i64 %v2_4a9e3, i64* @rdi, align 8
  %v2_4a9f4 = call i64 @function_4a75a(i64 %v2_4a9e3, i64 4294967295)
  store i64 %v2_4a9f4, i64* @rax, align 8
  ret i64 %v2_4a9f4
}

define i64 @function_4aa00() local_unnamed_addr {
dec_label_pc_4aa00:
  store i64 305671, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4aa24(i64 %arg1) local_unnamed_addr {
dec_label_pc_4aa24:
  %v2_4aa24 = load i64, i64* @rbx, align 8
  store i64 %v2_4aa24, i64* @rax, align 8
  store i64 %v2_4aa24, i64* @rdi, align 8
  %v0_4aa34 = load i64, i64* inttoptr (i64 305723 to i64*), align 8
  store i64 %v0_4aa34, i64* @rax, align 8
  store i64 305730, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4aab4(i64 %arg1) local_unnamed_addr {
dec_label_pc_4aab4:
  %r13.global-to-local = alloca i64, align 8
  %v2_4aab4 = load i64, i64* @rbx, align 8
  store i64 %v2_4aab4, i64* @rax, align 8
  %v0_4aac9 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_4aac9, i64* @rdi, align 8
  ret i64 %v2_4aab4
}

define i64 @function_4ab81() local_unnamed_addr {
dec_label_pc_4ab81:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_4ab87() local_unnamed_addr {
dec_label_pc_4ab87:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_4abf0() local_unnamed_addr {
dec_label_pc_4abf0:
  store i64 306167, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4ac20() local_unnamed_addr {
dec_label_pc_4ac20:
  %v2_4ac20 = load i64, i64* @rbx, align 8
  store i64 %v2_4ac20, i64* @rax, align 8
  store i64 1, i64* @rsi, align 8
  store i64 %v2_4ac20, i64* @rdi, align 8
  ret i64 %v2_4ac20
}

define i64 @function_4ac48() local_unnamed_addr {
dec_label_pc_4ac48:
  store i64 306255, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4ac60(i64 %arg1) local_unnamed_addr {
dec_label_pc_4ac60:
  store i64 %arg1, i64* @rdi, align 8
  %v0_4ac60 = load i64, i64* inttoptr (i64 306279 to i64*), align 8
  store i64 %v0_4ac60, i64* @rax, align 8
  %v1_4ac67 = add i64 %v0_4ac60, 8
  %v2_4ac67 = inttoptr i64 %v1_4ac67 to i32*
  %v3_4ac67 = load i32, i32* %v2_4ac67, align 4
  %v5_4ac67 = trunc i64 %arg1 to i32
  %v1_4ac6a = add i64 %v0_4ac60, 16
  store i64 %v1_4ac6a, i64* @rdx, align 8
  %tmp237 = icmp ugt i32 %v3_4ac67, %v5_4ac67
  br i1 %tmp237, label %dec_label_pc_4ac74, label %bb

bb:                                               ; preds = %dec_label_pc_4ac60
  %v3_4ac6e = call i64 @function_4ad2a()
  store i64 %v3_4ac6e, i64* @rax, align 8
  %v0_4ac74.pre = load i64, i64* @rdi, align 8
  %v0_4ac77.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_4ac74

dec_label_pc_4ac74:                               ; preds = %dec_label_pc_4ac60, %bb
  %v0_4ac77 = phi i64 [ %v0_4ac77.pre, %bb ], [ %v1_4ac6a, %dec_label_pc_4ac60 ]
  %v0_4ac74 = phi i64 [ %v0_4ac74.pre, %bb ], [ %arg1, %dec_label_pc_4ac60 ]
  %v2_4ac77 = mul i64 %v0_4ac74, 8
  %v3_4ac77 = add i64 %v2_4ac77, %v0_4ac77
  %v4_4ac77 = inttoptr i64 %v3_4ac77 to i64*
  %v5_4ac77 = load i64, i64* %v4_4ac77, align 8
  store i64 %v5_4ac77, i64* @rdx, align 8
  %v1_4ac7b = call i64 @function_4a9e3(i64 %v0_4ac74)
  store i64 %v1_4ac7b, i64* @rax, align 8
  ret i64 %v1_4ac7b
}

define i64 @function_4ac80() local_unnamed_addr {
dec_label_pc_4ac80:
  %v1_4ac85 = load i64, i64* @rax, align 8
  ret i64 %v1_4ac85
}

define i64 @function_4aca4() local_unnamed_addr {
dec_label_pc_4aca4:
  %v1_4aca9 = load i64, i64* @rax, align 8
  ret i64 %v1_4aca9
}

define i64 @function_4acf0() local_unnamed_addr {
dec_label_pc_4acf0:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4ad06() local_unnamed_addr {
dec_label_pc_4ad06:
  %v1_4ad0b = load i64, i64* @rax, align 8
  ret i64 %v1_4ad0b
}

define i64 @function_4ad2a() local_unnamed_addr {
dec_label_pc_4ad2a:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_4ad31() local_unnamed_addr {
dec_label_pc_4ad31:
  %v1_4ad36 = load i64, i64* @rax, align 8
  ret i64 %v1_4ad36
}

define i64 @function_4ad6c() local_unnamed_addr {
dec_label_pc_4ad6c:
  %v0_4ad6f = call i64 @function_4ab87()
  store i64 %v0_4ad6f, i64* @rax, align 8
  ret i64 %v0_4ad6f
}

define i64 @_ZN4lang9lang_luaj8onInvokeEJPN3org4luaj3vm27VarargsES5_(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_4ad80:
  store i64 %arg1, i64* @rdi, align 8
  store i64 306609, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_504b5(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_504b5:
  %stack_var_0 = alloca i64, align 8
  %v1_504b5 = ptrtoint i64* %stack_var_0 to i64
  store i64 %v1_504b5, i64* @rdx, align 8
  %v0_504b7 = load i64, i64* @rbx, align 8
  store i64 %v0_504b7, i64* @rdi, align 8
  store i64 %v0_504b7, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_504b7
}

define i64 @function_504d8(i64 %arg1) local_unnamed_addr {
dec_label_pc_504d8:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_504e1() local_unnamed_addr {
dec_label_pc_504e1:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm28LuaTable6unpackEJPNS1_7VarargsEii(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_504f0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_504fe = load i64, i64* @rdx, align 8
  %v1_504fe = trunc i64 %v0_504fe to i32
  %v2_504fe = load i64, i64* %rsi.global-to-local, align 8
  %v3_504fe = trunc i64 %v2_504fe to i32
  %v4_504fe = sub i32 %v1_504fe, %v3_504fe
  %v0_50500 = load i64, i64* inttoptr (i64 328967 to i64*), align 8
  store i64 %v0_50500, i64* @rbx, align 8
  %v20_5050d = zext i32 %v4_504fe to i64
  store i64 %v20_5050d, i64* @rdx, align 8
  %v9_50524 = icmp sgt i32 %v4_504fe, 16777214
  br i1 %v9_50524, label %bb, label %dec_label_pc_5052a

bb:                                               ; preds = %dec_label_pc_504f0
  %v10_50524 = call i64 @function_505c8()
  store i64 %v10_50524, i64* @rax, align 8
  %v0_5052a.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_5052a

dec_label_pc_5052a:                               ; preds = %bb, %dec_label_pc_504f0
  %v0_5052a = phi i64 [ %v0_5052a.pre, %bb ], [ %v20_5050d, %dec_label_pc_504f0 ]
  %v1_5052a = add i64 %v0_5052a, 1
  store i64 %v1_5052a, i64* @rbx, align 8
  %v1_5052d = trunc i64 %v1_5052a to i32
  %v11_5052d = icmp eq i32 %v1_5052d, 1
  br i1 %v11_5052d, label %bb252, label %dec_label_pc_50536

bb252:                                            ; preds = %dec_label_pc_5052a
  %v2_50530 = call i64 @function_506f0(i64 %arg1)
  store i64 %v2_50530, i64* @rax, align 8
  %v0_50536.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_50536

dec_label_pc_50536:                               ; preds = %bb252, %dec_label_pc_5052a
  %v0_50548 = phi i64 [ %v0_50536.pre, %bb252 ], [ %v1_5052a, %dec_label_pc_5052a ]
  store i64 329030, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v0_50548, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_50560(i64 %arg1) local_unnamed_addr {
dec_label_pc_50560:
  %v1_50560 = load i64, i64* @rbx, align 8
  %v2_50565 = load i64, i64* @r12, align 8
  store i64 %v2_50565, i64* @rax, align 8
  %v1_50569 = add i64 %v2_50565, 1120
  %v2_50569 = inttoptr i64 %v1_50569 to i64*
  %v3_50569 = load i64, i64* %v2_50569, align 8
  store i64 %v3_50569, i64* @rax, align 8
  store i64 %v2_50565, i64* @rdi, align 8
  %v0_50578 = load i64, i64* @r14, align 8
  %v1_50578 = add i64 %v0_50578, 8
  %v2_50578 = inttoptr i64 %v1_50578 to i32*
  %v3_50578 = load i32, i32* %v2_50578, align 4
  %v4_50578 = zext i32 %v3_50578 to i64
  store i64 %v4_50578, i64* @rax, align 8
  %v3_5057c = trunc i64 %v1_50560 to i32
  %tmp5 = icmp ugt i32 %v3_50578, %v3_5057c
  br i1 %tmp5, label %dec_label_pc_50584, label %bb

bb:                                               ; preds = %dec_label_pc_50560
  %v3_5057e = call i64 @function_50708()
  store i64 %v3_5057e, i64* @rax, align 8
  %v0_5058f.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_50584

dec_label_pc_50584:                               ; preds = %dec_label_pc_50560, %bb
  %v0_5058f = phi i64 [ %v0_5058f.pre, %bb ], [ %v0_50578, %dec_label_pc_50560 ]
  store i64 %arg1, i64* @rcx, align 8
  store i64 %v0_5058f, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_505a0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_505a0:
  %v0_505a0 = load i64, i64* @rbx, align 8
  %v1_505a0 = trunc i64 %v0_505a0 to i32
  %v2_505a0 = add i64 %v0_505a0, 4294967295
  %v6_505a0 = icmp eq i32 %v1_505a0, 0
  %v17_505a0 = and i64 %v2_505a0, 4294967295
  store i64 %v17_505a0, i64* @rbx, align 8
  %v1_505a6 = icmp eq i1 %v6_505a0, false
  br i1 %v1_505a6, label %bb, label %dec_label_pc_505a0.dec_label_pc_505a8_crit_edge

dec_label_pc_505a0.dec_label_pc_505a8_crit_edge:  ; preds = %dec_label_pc_505a0
  %v0_505b0.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_505a8

bb:                                               ; preds = %dec_label_pc_505a0
  %v3_505a6 = call i64 @function_50560(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_505a6, i64* @rax, align 8
  br label %dec_label_pc_505a8

dec_label_pc_505a8:                               ; preds = %dec_label_pc_505a0.dec_label_pc_505a8_crit_edge, %bb
  %v0_505b0 = phi i64 [ %v0_505b0.pre, %dec_label_pc_505a0.dec_label_pc_505a8_crit_edge ], [ %v3_505a6, %bb ]
  %v0_505a8 = load i64, i64* @r14, align 8
  store i64 %v0_505a8, i64* @rdi, align 8
  store i64 %v0_505b0, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v0_505b0
}

define i64 @function_505c8() local_unnamed_addr {
dec_label_pc_505c8:
  store i64 329167, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_506f0(i64 %arg1) local_unnamed_addr {
dec_label_pc_506f0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rax, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %arg1
}

define i64 @function_50701() local_unnamed_addr {
dec_label_pc_50701:
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_50708() local_unnamed_addr {
dec_label_pc_50708:
  %v0_50708 = load i64, i64* @rbx, align 8
  store i64 %v0_50708, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_50755() local_unnamed_addr {
dec_label_pc_50755:
  store i64 329564, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang14lang_luaj$78$08onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_507d0:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_507da = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_507da, i64* @rbx, align 8
  %v0_507dd = load i64, i64* @rdi, align 8
  store i64 %v0_507dd, i64* @rbp, align 8
  store i64 2, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v0_507da, i64* @rdi, align 8
  %v1_50817 = add i64 %v0_507dd, 24
  %v2_50817 = inttoptr i64 %v1_50817 to i64*
  %v3_50817 = load i64, i64* %v2_50817, align 8
  store i64 %v3_50817, i64* @rdi, align 8
  store i64 %v0_507da, i64* %rsi.global-to-local, align 8
  %v1_5081e = inttoptr i64 %v3_50817 to i64*
  %v2_5081e = load i64, i64* %v1_5081e, align 8
  store i64 %v2_5081e, i64* @rax, align 8
  %v1_50827 = inttoptr i64 %v2_5081e to i64*
  %v2_50827 = load i64, i64* %v1_50827, align 8
  store i64 %v2_50827, i64* @rdx, align 8
  store i64 %v2_5081e, i64* @rdi, align 8
  %v4_50833 = trunc i64 %v2_5081e to i8
  %v5_50833 = icmp eq i8 %v4_50833, 0
  %v1_50835 = icmp eq i1 %v5_50833, false
  br i1 %v1_50835, label %bb, label %dec_label_pc_5083b

bb:                                               ; preds = %dec_label_pc_507d0
  %v2_50835 = call i64 @function_50dc0()
  store i64 %v2_50835, i64* @rax, align 8
  br label %dec_label_pc_5083b

dec_label_pc_5083b:                               ; preds = %bb, %dec_label_pc_507d0
  store i64 329794, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_5090d(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_5090d:
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  store i64 %arg5, i64* @r14, align 8
  store i64 %arg6, i64* @r15, align 8
  %v0_5091b = load i64, i64* @rax, align 8
  ret i64 %v0_5091b
}

define i64 @function_50920(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_50920:
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %v2_50920 = load i64, i64* @rbx, align 8
  store i64 %v2_50920, i64* @rax, align 8
  store i64 %v2_50920, i64* @rdi, align 8
  store i64 %v2_50920, i64* @rdx, align 8
  store i64 %v2_50920, i64* @rdi, align 8
  %v0_50947 = load i64, i64* @rbp, align 8
  %v1_50947 = add i64 %v0_50947, 56
  %v2_50947 = inttoptr i64 %v1_50947 to i64*
  %v3_50947 = load i64, i64* %v2_50947, align 8
  store i64 %v3_50947, i64* @rax, align 8
  %v1_5094b = add i64 %v3_50947, 8
  %v2_5094b = inttoptr i64 %v1_5094b to i32*
  %v3_5094b = load i32, i32* %v2_5094b, align 4
  %v4_5094b = zext i32 %v3_5094b to i64
  store i64 %v4_5094b, i64* @rcx, align 8
  %v5_5094e = icmp eq i32 %v3_5094b, 0
  br i1 %v5_5094e, label %bb, label %dec_label_pc_50956

bb:                                               ; preds = %dec_label_pc_50920
  %v2_50950 = call i64 @function_510b8(i64 %v2_50920)
  store i64 %v2_50950, i64* @rax, align 8
  %v2_5095a.pre = load i64, i64* @rbx, align 8
  %v0_50970.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50956

dec_label_pc_50956:                               ; preds = %bb, %dec_label_pc_50920
  %v0_509fd = phi i64 [ %v0_50970.pre, %bb ], [ %v0_50947, %dec_label_pc_50920 ]
  %v0_509dd = phi i64 [ %v2_5095a.pre, %bb ], [ %v2_50920, %dec_label_pc_50920 ]
  %v0_50956 = phi i64 [ %v2_50950, %bb ], [ %v3_50947, %dec_label_pc_50920 ]
  %v1_50956 = add i64 %v0_50956, 16
  %v2_50956 = inttoptr i64 %v1_50956 to i64*
  %v3_50956 = load i64, i64* %v2_50956, align 8
  store i64 %v3_50956, i64* %r15.global-to-local, align 8
  store i64 %v0_509dd, i64* @rax, align 8
  store i64 %v0_509dd, i64* @rdi, align 8
  %v1_5096d = inttoptr i64 %v3_50956 to i64*
  %v2_5096d = load i64, i64* %v1_5096d, align 8
  store i64 %v2_5096d, i64* @rcx, align 8
  store i64 %v0_509dd, i64* @rdx, align 8
  store i64 %v0_509dd, i64* @rdi, align 8
  %v4_5098c = trunc i64 %v0_509dd to i8
  %v5_5098c = icmp eq i8 %v4_5098c, 0
  %v1_50994 = add i64 %v0_509fd, 48
  %v2_50994 = inttoptr i64 %v1_50994 to i64*
  %v3_50994 = load i64, i64* %v2_50994, align 8
  store i64 %v0_509dd, i64* @rax, align 8
  store i64 %v0_509dd, i64* @rdi, align 8
  %v1_509ab = inttoptr i64 %v3_50994 to i64*
  %v2_509ab = load i64, i64* %v1_509ab, align 8
  store i64 %v2_509ab, i64* @rdx, align 8
  store i64 %v3_50994, i64* @rdi, align 8
  store i64 %v0_509dd, i64* @r12, align 8
  store i64 %v0_509dd, i64* @rax, align 8
  store i64 %v0_509dd, i64* @rdi, align 8
  %v1_509d3 = icmp eq i1 %v5_5098c, false
  br i1 %v1_509d3, label %dec_label_pc_50a60, label %dec_label_pc_509d9

dec_label_pc_509d9:                               ; preds = %dec_label_pc_50956
  store i64 %v0_509dd, i64* @rax, align 8
  store i64 %v0_509dd, i64* @rdi, align 8
  store i64 %v0_509dd, i64* @rdx, align 8
  store i64 %v0_509dd, i64* @rdi, align 8
  br i1 %v5_5098c, label %dec_label_pc_50a60, label %dec_label_pc_509fd

dec_label_pc_509fd:                               ; preds = %dec_label_pc_509d9
  %v1_509fd = add i64 %v0_509fd, 56
  %v2_509fd = inttoptr i64 %v1_509fd to i64*
  %v3_509fd = load i64, i64* %v2_509fd, align 8
  store i64 %v3_509fd, i64* @rax, align 8
  %v1_50a01 = add i64 %v3_509fd, 8
  %v2_50a01 = inttoptr i64 %v1_50a01 to i32*
  %v3_50a01 = load i32, i32* %v2_50a01, align 4
  %v4_50a01 = zext i32 %v3_50a01 to i64
  store i64 %v4_50a01, i64* @rdx, align 8
  %v5_50a04 = icmp eq i32 %v3_50a01, 0
  br i1 %v5_50a04, label %bb291, label %dec_label_pc_50a0c

bb291:                                            ; preds = %dec_label_pc_509fd
  %v2_50a06 = call i64 @function_510b8(i64 %v0_509dd)
  store i64 %v2_50a06, i64* @rax, align 8
  %v2_50a10.pre = load i64, i64* @rbx, align 8
  %v0_50a14.pre = load i64, i64* @r12, align 8
  %v0_50a24.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50a0c

dec_label_pc_50a0c:                               ; preds = %bb291, %dec_label_pc_509fd
  %v0_50a24 = phi i64 [ %v0_50a24.pre, %bb291 ], [ %v0_509fd, %dec_label_pc_509fd ]
  %v0_50a14 = phi i64 [ %v0_50a14.pre, %bb291 ], [ %v0_509dd, %dec_label_pc_509fd ]
  %v2_50a10 = phi i64 [ %v2_50a10.pre, %bb291 ], [ %v0_509dd, %dec_label_pc_509fd ]
  %v0_50a0c = phi i64 [ %v2_50a06, %bb291 ], [ %v3_509fd, %dec_label_pc_509fd ]
  %v1_50a0c = add i64 %v0_50a0c, 16
  %v2_50a0c = inttoptr i64 %v1_50a0c to i64*
  %v3_50a0c = load i64, i64* %v2_50a0c, align 8
  store i64 %v3_50a0c, i64* %r13.global-to-local, align 8
  store i64 %v2_50a10, i64* @rax, align 8
  store i64 %v0_50a14, i64* @rdi, align 8
  %v1_50a24 = add i64 %v0_50a24, 72
  %v2_50a24 = inttoptr i64 %v1_50a24 to i64*
  %v3_50a24 = load i64, i64* %v2_50a24, align 8
  store i64 %v3_50a24, i64* @rdx, align 8
  %v1_50a28 = add i64 %v3_50a24, 8
  %v2_50a28 = inttoptr i64 %v1_50a28 to i32*
  %v3_50a28 = load i32, i32* %v2_50a28, align 4
  %v4_50a28 = zext i32 %v3_50a28 to i64
  store i64 %v4_50a28, i64* %r15.global-to-local, align 8
  %v5_50a2c = icmp eq i32 %v3_50a28, 0
  br i1 %v5_50a2c, label %bb292, label %dec_label_pc_50a35

bb292:                                            ; preds = %dec_label_pc_50a0c
  %v2_50a2f = call i64 @function_510b8(i64 %v0_50a14)
  store i64 %v2_50a2f, i64* @rax, align 8
  %v0_50a35.pre = load i64, i64* %r13.global-to-local, align 8
  %v2_50a49.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_50a35

dec_label_pc_50a35:                               ; preds = %bb292, %dec_label_pc_50a0c
  %v2_50a49 = phi i64 [ %v2_50a49.pre, %bb292 ], [ %v2_50a10, %dec_label_pc_50a0c ]
  %v0_50a55 = phi i64 [ %v2_50a2f, %bb292 ], [ %v2_50a10, %dec_label_pc_50a0c ]
  %v0_50a40 = phi i64 [ %v0_50a35.pre, %bb292 ], [ %v3_50a0c, %dec_label_pc_50a0c ]
  %v1_50a35 = inttoptr i64 %v0_50a40 to i64*
  %v2_50a35 = load i64, i64* %v1_50a35, align 8
  store i64 %v2_50a35, i64* @rcx, align 8
  store i64 %v2_50a49, i64* @rdx, align 8
  store i64 %v0_50a55, i64* @rdi, align 8
  %v4_50a55 = trunc i64 %v0_50a55 to i8
  %v5_50a55 = icmp eq i8 %v4_50a55, 0
  %v1_50a57 = icmp eq i1 %v5_50a55, false
  br i1 %v1_50a57, label %bb293, label %dec_label_pc_50a60

bb293:                                            ; preds = %dec_label_pc_50a35
  %v2_50a57 = call i64 @function_5155e()
  store i64 %v2_50a57, i64* @rax, align 8
  %v2_50a64.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_50a60

dec_label_pc_50a60:                               ; preds = %dec_label_pc_50a35, %bb293, %dec_label_pc_509d9, %dec_label_pc_50956
  %v2_50a64 = phi i64 [ %v2_50a49, %dec_label_pc_50a35 ], [ %v2_50a64.pre, %bb293 ], [ %v0_509dd, %dec_label_pc_509d9 ], [ %v0_509dd, %dec_label_pc_50956 ]
  %v0_50a60 = load i64, i64* @rbp, align 8
  %v1_50a60 = add i64 %v0_50a60, 48
  %v2_50a60 = inttoptr i64 %v1_50a60 to i64*
  %v3_50a60 = load i64, i64* %v2_50a60, align 8
  store i64 %v3_50a60, i64* %r13.global-to-local, align 8
  store i64 %v2_50a64, i64* @rax, align 8
  store i64 %v2_50a64, i64* @rdi, align 8
  %v1_50a77 = inttoptr i64 %v3_50a60 to i64*
  %v2_50a77 = load i64, i64* %v1_50a77, align 8
  store i64 %v2_50a77, i64* @rdx, align 8
  store i64 %v3_50a60, i64* @rdi, align 8
  store i64 %v2_50a64, i64* @r13, align 8
  %v1_50a8a = add i64 %v0_50a60, 56
  %v2_50a8a = inttoptr i64 %v1_50a8a to i64*
  %v3_50a8a = load i64, i64* %v2_50a8a, align 8
  store i64 %v3_50a8a, i64* @rax, align 8
  %v1_50a8e = add i64 %v3_50a8a, 8
  %v2_50a8e = inttoptr i64 %v1_50a8e to i32*
  %v3_50a8e = load i32, i32* %v2_50a8e, align 4
  %v5_50a92 = icmp eq i32 %v3_50a8e, 0
  br i1 %v5_50a92, label %bb294, label %dec_label_pc_50a9b

bb294:                                            ; preds = %dec_label_pc_50a60
  %v2_50a95 = call i64 @function_510b8(i64 %v3_50a60)
  store i64 %v2_50a95, i64* @rax, align 8
  %v2_50a9f.pre = load i64, i64* @rbx, align 8
  %v0_50ab2.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50a9b

dec_label_pc_50a9b:                               ; preds = %bb294, %dec_label_pc_50a60
  %v0_50ab2 = phi i64 [ %v0_50ab2.pre, %bb294 ], [ %v0_50a60, %dec_label_pc_50a60 ]
  %v2_50a9f = phi i64 [ %v2_50a9f.pre, %bb294 ], [ %v2_50a64, %dec_label_pc_50a60 ]
  %v0_50a9b = phi i64 [ %v2_50a95, %bb294 ], [ %v3_50a8a, %dec_label_pc_50a60 ]
  %v1_50a9b = add i64 %v0_50a9b, 16
  %v2_50a9b = inttoptr i64 %v1_50a9b to i64*
  %v3_50a9b = load i64, i64* %v2_50a9b, align 8
  store i64 %v3_50a9b, i64* %r15.global-to-local, align 8
  store i64 %v2_50a9f, i64* @rax, align 8
  store i64 %v2_50a9f, i64* @rdi, align 8
  %v1_50ab2 = add i64 %v0_50ab2, 72
  %v2_50ab2 = inttoptr i64 %v1_50ab2 to i64*
  %v3_50ab2 = load i64, i64* %v2_50ab2, align 8
  store i64 %v3_50ab2, i64* @rdx, align 8
  %v1_50ab6 = add i64 %v3_50ab2, 8
  %v2_50ab6 = inttoptr i64 %v1_50ab6 to i32*
  %v3_50ab6 = load i32, i32* %v2_50ab6, align 4
  %v5_50aba = icmp eq i32 %v3_50ab6, 0
  br i1 %v5_50aba, label %bb295, label %dec_label_pc_50ac3

bb295:                                            ; preds = %dec_label_pc_50a9b
  %v2_50abd = call i64 @function_510b8(i64 %v2_50a9f)
  store i64 %v2_50abd, i64* @rax, align 8
  %v0_50ac3.pre = load i64, i64* %r15.global-to-local, align 8
  %v2_50ad6.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_50ac3

dec_label_pc_50ac3:                               ; preds = %bb295, %dec_label_pc_50a9b
  %v2_50ae6 = phi i64 [ %v2_50ad6.pre, %bb295 ], [ %v2_50a9f, %dec_label_pc_50a9b ]
  %v0_50ae2 = phi i64 [ %v2_50abd, %bb295 ], [ %v2_50a9f, %dec_label_pc_50a9b ]
  %v0_50acd = phi i64 [ %v0_50ac3.pre, %bb295 ], [ %v3_50a9b, %dec_label_pc_50a9b ]
  %v1_50ac3 = inttoptr i64 %v0_50acd to i64*
  %v2_50ac3 = load i64, i64* %v1_50ac3, align 8
  store i64 %v2_50ac3, i64* @rcx, align 8
  store i64 %v2_50ae6, i64* @rdx, align 8
  store i64 %v0_50ae2, i64* @rdi, align 8
  %v4_50ae2 = trunc i64 %v0_50ae2 to i8
  %v5_50ae2 = icmp eq i8 %v4_50ae2, 0
  br i1 %v5_50ae2, label %dec_label_pc_50b02, label %dec_label_pc_50ae6

dec_label_pc_50ae6:                               ; preds = %dec_label_pc_50ac3
  store i64 %v2_50ae6, i64* @rax, align 8
  %v0_50af1 = load i64, i64* @r13, align 8
  store i64 %v0_50af1, i64* @rdi, align 8
  %v4_50afa = trunc i64 %v2_50ae6 to i8
  %v5_50afa = icmp eq i8 %v4_50afa, 0
  br i1 %v5_50afa, label %bb296, label %dec_label_pc_50b02

bb296:                                            ; preds = %dec_label_pc_50ae6
  %v1_50afc = call i64 @function_51499()
  store i64 %v1_50afc, i64* @rax, align 8
  %v2_50b02.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_50b02

dec_label_pc_50b02:                               ; preds = %bb296, %dec_label_pc_50ae6, %dec_label_pc_50ac3
  %v2_50b02 = phi i64 [ %v2_50b02.pre, %bb296 ], [ %v2_50ae6, %dec_label_pc_50ae6 ], [ %v2_50ae6, %dec_label_pc_50ac3 ]
  store i64 %v2_50b02, i64* @rax, align 8
  %v0_50b0d = load i64, i64* @r12, align 8
  store i64 %v0_50b0d, i64* @rdi, align 8
  %v4_50b16 = trunc i64 %v2_50b02 to i8
  %v5_50b16 = icmp eq i8 %v4_50b16, 0
  br i1 %v5_50b16, label %bb297, label %dec_label_pc_50b1e

bb297:                                            ; preds = %dec_label_pc_50b02
  %v1_50b18 = call i64 @function_51140()
  store i64 %v1_50b18, i64* @rax, align 8
  br label %dec_label_pc_50b1e

dec_label_pc_50b1e:                               ; preds = %bb297, %dec_label_pc_50b02
  %v0_50b1e = load i64, i64* @rbp, align 8
  %v1_50b1e = add i64 %v0_50b1e, 56
  %v2_50b1e = inttoptr i64 %v1_50b1e to i64*
  %v3_50b1e = load i64, i64* %v2_50b1e, align 8
  store i64 %v3_50b1e, i64* @rax, align 8
  %v1_50b22 = add i64 %v3_50b1e, 8
  %v2_50b22 = inttoptr i64 %v1_50b22 to i32*
  %v3_50b22 = load i32, i32* %v2_50b22, align 4
  %v4_50b22 = zext i32 %v3_50b22 to i64
  store i64 %v4_50b22, i64* %r13.global-to-local, align 8
  %v5_50b26 = icmp eq i32 %v3_50b22, 0
  br i1 %v5_50b26, label %bb298, label %dec_label_pc_50b2f

bb298:                                            ; preds = %dec_label_pc_50b1e
  %v2_50b29 = call i64 @function_510b8(i64 %v0_50b0d)
  store i64 %v2_50b29, i64* @rax, align 8
  %v0_50b4a.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50b2f

dec_label_pc_50b2f:                               ; preds = %bb298, %dec_label_pc_50b1e
  %v0_50b4a = phi i64 [ %v0_50b4a.pre, %bb298 ], [ %v0_50b1e, %dec_label_pc_50b1e ]
  %v0_50b2f = phi i64 [ %v2_50b29, %bb298 ], [ %v3_50b1e, %dec_label_pc_50b1e ]
  %v1_50b2f = add i64 %v0_50b2f, 16
  %v2_50b2f = inttoptr i64 %v1_50b2f to i64*
  %v3_50b2f = load i64, i64* %v2_50b2f, align 8
  %v2_50b33 = load i64, i64* @rbx, align 8
  store i64 %v2_50b33, i64* @rax, align 8
  store i64 %v2_50b33, i64* @rdi, align 8
  %v1_50b46 = inttoptr i64 %v3_50b2f to i64*
  %v2_50b46 = load i64, i64* %v1_50b46, align 8
  store i64 %v2_50b46, i64* @rcx, align 8
  store i64 %v2_50b33, i64* @rdx, align 8
  store i64 %v2_50b33, i64* @rdi, align 8
  %v4_50b66 = trunc i64 %v2_50b33 to i8
  %v5_50b66 = icmp eq i8 %v4_50b66, 0
  %v1_50b68 = icmp eq i1 %v5_50b66, false
  br i1 %v1_50b68, label %bb299, label %dec_label_pc_50b6e

bb299:                                            ; preds = %dec_label_pc_50b2f
  %v2_50b68 = call i64 @function_51398()
  store i64 %v2_50b68, i64* @rax, align 8
  %v0_50b6e.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50b6e

dec_label_pc_50b6e:                               ; preds = %bb299, %dec_label_pc_50b2f
  %v0_50b6e = phi i64 [ %v0_50b6e.pre, %bb299 ], [ %v0_50b4a, %dec_label_pc_50b2f ]
  %v1_50b6e = add i64 %v0_50b6e, 56
  %v2_50b6e = inttoptr i64 %v1_50b6e to i64*
  %v3_50b6e = load i64, i64* %v2_50b6e, align 8
  store i64 %v3_50b6e, i64* @rax, align 8
  %v1_50b72 = add i64 %v3_50b6e, 8
  %v2_50b72 = inttoptr i64 %v1_50b72 to i32*
  %v3_50b72 = load i32, i32* %v2_50b72, align 4
  %v5_50b76 = icmp eq i32 %v3_50b72, 0
  br i1 %v5_50b76, label %bb300, label %dec_label_pc_50b7f

bb300:                                            ; preds = %dec_label_pc_50b6e
  %v2_50b79 = call i64 @function_510b8(i64 %v2_50b33)
  store i64 %v2_50b79, i64* @rax, align 8
  %v0_50b9a.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50b7f

dec_label_pc_50b7f:                               ; preds = %bb300, %dec_label_pc_50b6e
  %v0_50b9a = phi i64 [ %v0_50b9a.pre, %bb300 ], [ %v0_50b6e, %dec_label_pc_50b6e ]
  %v0_50b7f = phi i64 [ %v2_50b79, %bb300 ], [ %v3_50b6e, %dec_label_pc_50b6e ]
  %v1_50b7f = add i64 %v0_50b7f, 16
  %v2_50b7f = inttoptr i64 %v1_50b7f to i64*
  %v3_50b7f = load i64, i64* %v2_50b7f, align 8
  %v2_50b83 = load i64, i64* @rbx, align 8
  store i64 %v2_50b83, i64* @rax, align 8
  store i64 %v2_50b83, i64* @rdi, align 8
  %v1_50b96 = inttoptr i64 %v3_50b7f to i64*
  %v2_50b96 = load i64, i64* %v1_50b96, align 8
  store i64 %v2_50b96, i64* @rcx, align 8
  store i64 %v2_50b83, i64* @rdx, align 8
  store i64 %v2_50b83, i64* @rdi, align 8
  %v4_50bb6 = trunc i64 %v2_50b83 to i8
  %v5_50bb6 = icmp eq i8 %v4_50bb6, 0
  %v1_50bb8 = icmp eq i1 %v5_50bb6, false
  br i1 %v1_50bb8, label %bb301, label %dec_label_pc_50bbe

bb301:                                            ; preds = %dec_label_pc_50b7f
  %v2_50bb8 = call i64 @function_51478()
  store i64 %v2_50bb8, i64* @rax, align 8
  %v0_50bbe.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50bbe

dec_label_pc_50bbe:                               ; preds = %bb301, %dec_label_pc_50b7f
  %v0_50bbe = phi i64 [ %v0_50bbe.pre, %bb301 ], [ %v0_50b9a, %dec_label_pc_50b7f ]
  %v1_50bbe = add i64 %v0_50bbe, 88
  %v2_50bbe = inttoptr i64 %v1_50bbe to i64*
  %v3_50bbe = load i64, i64* %v2_50bbe, align 8
  store i64 %v3_50bbe, i64* @rax, align 8
  %v1_50bc2 = add i64 %v3_50bbe, 8
  %v2_50bc2 = inttoptr i64 %v1_50bc2 to i32*
  %v3_50bc2 = load i32, i32* %v2_50bc2, align 4
  %v4_50bc2 = zext i32 %v3_50bc2 to i64
  store i64 %v4_50bc2, i64* @r11, align 8
  %v5_50bc6 = icmp eq i32 %v3_50bc2, 0
  br i1 %v5_50bc6, label %bb302, label %dec_label_pc_50bcf

bb302:                                            ; preds = %dec_label_pc_50bbe
  %v2_50bc9 = call i64 @function_510b8(i64 %v2_50b83)
  store i64 %v2_50bc9, i64* @rax, align 8
  %v0_50c13.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50bcf

dec_label_pc_50bcf:                               ; preds = %bb302, %dec_label_pc_50bbe
  %v0_50c13 = phi i64 [ %v0_50c13.pre, %bb302 ], [ %v0_50bbe, %dec_label_pc_50bbe ]
  %v0_50bcf = phi i64 [ %v2_50bc9, %bb302 ], [ %v3_50bbe, %dec_label_pc_50bbe ]
  %v1_50bcf = add i64 %v0_50bcf, 16
  %v2_50bcf = inttoptr i64 %v1_50bcf to i64*
  %v3_50bcf = load i64, i64* %v2_50bcf, align 8
  %v2_50bd3 = load i64, i64* @rbx, align 8
  store i64 %v2_50bd3, i64* @rax, align 8
  store i64 %v2_50bd3, i64* @rdi, align 8
  %v1_50be6 = inttoptr i64 %v3_50bcf to i64*
  %v2_50be6 = load i64, i64* %v1_50be6, align 8
  store i64 %v2_50be6, i64* @rcx, align 8
  store i64 %v3_50bcf, i64* @rdi, align 8
  %v0_50bed = load i64, i64* inttoptr (i64 330740 to i64*), align 8
  store i64 %v0_50bed, i64* @rdx, align 8
  store i64 %v2_50bd3, i64* @rdi, align 8
  store i64 %v2_50bd3, i64* @rax, align 8
  %v1_50c13 = add i64 %v0_50c13, 88
  %v2_50c13 = inttoptr i64 %v1_50c13 to i64*
  %v3_50c13 = load i64, i64* %v2_50c13, align 8
  store i64 %v3_50c13, i64* @rax, align 8
  %v1_50c17 = add i64 %v3_50c13, 8
  %v2_50c17 = inttoptr i64 %v1_50c17 to i32*
  %v3_50c17 = load i32, i32* %v2_50c17, align 4
  %v5_50c1b = icmp eq i32 %v3_50c17, 0
  br i1 %v5_50c1b, label %bb303, label %dec_label_pc_50c24

bb303:                                            ; preds = %dec_label_pc_50bcf
  %v2_50c1e = call i64 @function_510b8(i64 %v2_50bd3)
  store i64 %v2_50c1e, i64* @rax, align 8
  %v2_50c2f.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_50c24

dec_label_pc_50c24:                               ; preds = %bb303, %dec_label_pc_50bcf
  %v2_50c52 = phi i64 [ %v2_50c2f.pre, %bb303 ], [ %v2_50bd3, %dec_label_pc_50bcf ]
  %v0_50c24 = phi i64 [ %v2_50c1e, %bb303 ], [ %v3_50c13, %dec_label_pc_50bcf ]
  %v1_50c24 = add i64 %v0_50c24, 16
  %v2_50c24 = inttoptr i64 %v1_50c24 to i64*
  %v3_50c24 = load i64, i64* %v2_50c24, align 8
  store i64 %v2_50c52, i64* @rax, align 8
  store i64 %v2_50c52, i64* @rdi, align 8
  %v1_50c3b = inttoptr i64 %v3_50c24 to i64*
  %v2_50c3b = load i64, i64* %v1_50c3b, align 8
  store i64 %v2_50c3b, i64* @rcx, align 8
  store i64 %v2_50c52, i64* @rdx, align 8
  %v0_50c62 = load i64, i64* @r14, align 8
  store i64 %v0_50c62, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  store i64 %arg6, i64* %r15.global-to-local, align 8
  ret i64 %v2_50c52
}

define i64 @function_50c80() local_unnamed_addr {
dec_label_pc_50c80:
  %r15.global-to-local = alloca i64, align 8
  %v2_50c80 = load i64, i64* @rbx, align 8
  store i64 %v2_50c80, i64* @rax, align 8
  store i64 %v2_50c80, i64* @rdi, align 8
  store i64 %v2_50c80, i64* @rdx, align 8
  store i64 %v2_50c80, i64* @rdi, align 8
  %v0_50ca7 = load i64, i64* @rbp, align 8
  %v1_50ca7 = add i64 %v0_50ca7, 56
  %v2_50ca7 = inttoptr i64 %v1_50ca7 to i64*
  %v3_50ca7 = load i64, i64* %v2_50ca7, align 8
  store i64 %v3_50ca7, i64* @rax, align 8
  %v1_50cab = add i64 %v3_50ca7, 8
  %v2_50cab = inttoptr i64 %v1_50cab to i32*
  %v3_50cab = load i32, i32* %v2_50cab, align 4
  %v5_50caf = icmp eq i32 %v3_50cab, 0
  br i1 %v5_50caf, label %bb, label %dec_label_pc_50cb8

bb:                                               ; preds = %dec_label_pc_50c80
  %v2_50cb2 = call i64 @function_510b8(i64 %v2_50c80)
  store i64 %v2_50cb2, i64* @rax, align 8
  %v2_50cbc.pre = load i64, i64* @rbx, align 8
  %v0_50ccf.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50cb8

dec_label_pc_50cb8:                               ; preds = %bb, %dec_label_pc_50c80
  %v0_50ccf = phi i64 [ %v0_50ccf.pre, %bb ], [ %v0_50ca7, %dec_label_pc_50c80 ]
  %v2_50cbc = phi i64 [ %v2_50cbc.pre, %bb ], [ %v2_50c80, %dec_label_pc_50c80 ]
  %v0_50cb8 = phi i64 [ %v2_50cb2, %bb ], [ %v3_50ca7, %dec_label_pc_50c80 ]
  %v1_50cb8 = add i64 %v0_50cb8, 16
  %v2_50cb8 = inttoptr i64 %v1_50cb8 to i64*
  %v3_50cb8 = load i64, i64* %v2_50cb8, align 8
  store i64 %v3_50cb8, i64* %r15.global-to-local, align 8
  store i64 %v2_50cbc, i64* @rax, align 8
  store i64 %v2_50cbc, i64* @rdi, align 8
  %v1_50ccf = add i64 %v0_50ccf, 136
  %v2_50ccf = inttoptr i64 %v1_50ccf to i64*
  %v3_50ccf = load i64, i64* %v2_50ccf, align 8
  store i64 %v3_50ccf, i64* @rdx, align 8
  %v1_50cd6 = add i64 %v3_50ccf, 8
  %v2_50cd6 = inttoptr i64 %v1_50cd6 to i32*
  %v3_50cd6 = load i32, i32* %v2_50cd6, align 4
  %v5_50cda = icmp eq i32 %v3_50cd6, 0
  br i1 %v5_50cda, label %bb252, label %dec_label_pc_50ce3

bb252:                                            ; preds = %dec_label_pc_50cb8
  %v2_50cdd = call i64 @function_510b8(i64 %v2_50cbc)
  store i64 %v2_50cdd, i64* @rax, align 8
  %v0_50ce3.pre = load i64, i64* %r15.global-to-local, align 8
  %v2_50cf6.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_50ce3

dec_label_pc_50ce3:                               ; preds = %bb252, %dec_label_pc_50cb8
  %v2_50cf6 = phi i64 [ %v2_50cf6.pre, %bb252 ], [ %v2_50cbc, %dec_label_pc_50cb8 ]
  %v0_50d02 = phi i64 [ %v2_50cdd, %bb252 ], [ %v2_50cbc, %dec_label_pc_50cb8 ]
  %v0_50ced = phi i64 [ %v0_50ce3.pre, %bb252 ], [ %v3_50cb8, %dec_label_pc_50cb8 ]
  %v1_50ce3 = inttoptr i64 %v0_50ced to i64*
  %v2_50ce3 = load i64, i64* %v1_50ce3, align 8
  store i64 %v2_50ce3, i64* @rcx, align 8
  store i64 %v2_50cf6, i64* @rdx, align 8
  store i64 %v0_50d02, i64* @rdi, align 8
  %v4_50d02 = trunc i64 %v0_50d02 to i8
  %v5_50d02 = icmp eq i8 %v4_50d02, 0
  %v1_50d04 = icmp eq i1 %v5_50d02, false
  br i1 %v1_50d04, label %bb253, label %dec_label_pc_50d0a

bb253:                                            ; preds = %dec_label_pc_50ce3
  %v2_50d04 = call i64 @function_510c8()
  store i64 %v2_50d04, i64* @rax, align 8
  br label %dec_label_pc_50d0a

dec_label_pc_50d0a:                               ; preds = %bb253, %dec_label_pc_50ce3
  %v0_50d0a = load i64, i64* @rbp, align 8
  %v1_50d0a = add i64 %v0_50d0a, 56
  %v2_50d0a = inttoptr i64 %v1_50d0a to i64*
  %v3_50d0a = load i64, i64* %v2_50d0a, align 8
  store i64 %v3_50d0a, i64* @rax, align 8
  %v1_50d0e = add i64 %v3_50d0a, 8
  %v2_50d0e = inttoptr i64 %v1_50d0e to i32*
  %v3_50d0e = load i32, i32* %v2_50d0e, align 4
  %v4_50d0e = zext i32 %v3_50d0e to i64
  store i64 %v4_50d0e, i64* %r15.global-to-local, align 8
  %v5_50d12 = icmp eq i32 %v3_50d0e, 0
  br i1 %v5_50d12, label %bb254, label %dec_label_pc_50d1b

bb254:                                            ; preds = %dec_label_pc_50d0a
  %v2_50d15 = call i64 @function_510b8(i64 %v0_50d02)
  store i64 %v2_50d15, i64* @rax, align 8
  %v0_50d35.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50d1b

dec_label_pc_50d1b:                               ; preds = %bb254, %dec_label_pc_50d0a
  %v0_50d35 = phi i64 [ %v0_50d35.pre, %bb254 ], [ %v0_50d0a, %dec_label_pc_50d0a ]
  %v0_50d1b = phi i64 [ %v2_50d15, %bb254 ], [ %v3_50d0a, %dec_label_pc_50d0a ]
  %v1_50d1b = add i64 %v0_50d1b, 16
  %v2_50d1b = inttoptr i64 %v1_50d1b to i64*
  %v3_50d1b = load i64, i64* %v2_50d1b, align 8
  store i64 %v3_50d1b, i64* %r15.global-to-local, align 8
  %v2_50d1f = load i64, i64* @rbx, align 8
  store i64 %v2_50d1f, i64* @rax, align 8
  store i64 %v2_50d1f, i64* @rdi, align 8
  %v1_50d32 = inttoptr i64 %v3_50d1b to i64*
  %v2_50d32 = load i64, i64* %v1_50d32, align 8
  store i64 %v2_50d32, i64* @rcx, align 8
  store i64 %v2_50d1f, i64* @rdx, align 8
  store i64 %v2_50d1f, i64* @rdi, align 8
  %v4_50d54 = trunc i64 %v2_50d1f to i8
  %v5_50d54 = icmp eq i8 %v4_50d54, 0
  br i1 %v5_50d54, label %bb255, label %dec_label_pc_50d5c

bb255:                                            ; preds = %dec_label_pc_50d1b
  %v1_50d56 = call i64 @function_50e40()
  store i64 %v1_50d56, i64* @rax, align 8
  %v0_50d5c.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50d5c

dec_label_pc_50d5c:                               ; preds = %bb255, %dec_label_pc_50d1b
  %v0_50d5c = phi i64 [ %v0_50d5c.pre, %bb255 ], [ %v0_50d35, %dec_label_pc_50d1b ]
  %v1_50d5c = add i64 %v0_50d5c, 88
  %v2_50d5c = inttoptr i64 %v1_50d5c to i64*
  %v3_50d5c = load i64, i64* %v2_50d5c, align 8
  store i64 %v3_50d5c, i64* @rax, align 8
  %v1_50d60 = add i64 %v3_50d5c, 8
  %v2_50d60 = inttoptr i64 %v1_50d60 to i32*
  %v3_50d60 = load i32, i32* %v2_50d60, align 4
  %v5_50d63 = icmp eq i32 %v3_50d60, 0
  br i1 %v5_50d63, label %bb256, label %dec_label_pc_50d6b

bb256:                                            ; preds = %dec_label_pc_50d5c
  %v2_50d65 = call i64 @function_510b8(i64 %v2_50d1f)
  store i64 %v2_50d65, i64* @rax, align 8
  br label %dec_label_pc_50d6b

dec_label_pc_50d6b:                               ; preds = %bb256, %dec_label_pc_50d5c
  %v0_50d6b = phi i64 [ %v2_50d65, %bb256 ], [ %v3_50d5c, %dec_label_pc_50d5c ]
  %v1_50d6b = add i64 %v0_50d6b, 16
  %v2_50d6b = inttoptr i64 %v1_50d6b to i64*
  %v3_50d6b = load i64, i64* %v2_50d6b, align 8
  %v2_50d6f = load i64, i64* @rbx, align 8
  store i64 %v2_50d6f, i64* @rax, align 8
  store i64 %v2_50d6f, i64* @rdi, align 8
  %v1_50d82 = inttoptr i64 %v3_50d6b to i64*
  %v2_50d82 = load i64, i64* %v1_50d82, align 8
  store i64 %v2_50d82, i64* @rcx, align 8
  store i64 %v2_50d6f, i64* @rdx, align 8
  %v0_50dac = load i64, i64* @r14, align 8
  store i64 %v0_50dac, i64* @rdi, align 8
  %v6_50db7 = call i64 @function_5090d(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_50db7, i64* @rax, align 8
  ret i64 %v6_50db7
}

define i64 @function_50dc0() local_unnamed_addr {
dec_label_pc_50dc0:
  %v0_50dc4 = load i64, i64* @rax, align 8
  ret i64 %v0_50dc4
}

define i64 @function_50dd0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_50dd0:
  %r13.global-to-local = alloca i64, align 8
  %v2_50dd0 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v2_50dd0, i64* @rax, align 8
  store i64 %v2_50dd0, i64* @rdi, align 8
  %v4_50de4 = trunc i64 %v2_50dd0 to i8
  %v5_50de4 = icmp eq i8 %v4_50de4, 0
  br i1 %v5_50de4, label %bb, label %dec_label_pc_50dec

bb:                                               ; preds = %dec_label_pc_50dd0
  %v1_50de6 = call i64 @function_51128()
  store i64 %v1_50de6, i64* @rax, align 8
  br label %dec_label_pc_50dec

dec_label_pc_50dec:                               ; preds = %bb, %dec_label_pc_50dd0
  %v0_50dec = load i64, i64* @rbp, align 8
  %v1_50dec = add i64 %v0_50dec, 160
  %v2_50dec = inttoptr i64 %v1_50dec to i64*
  %v3_50dec = load i64, i64* %v2_50dec, align 8
  store i64 %v3_50dec, i64* @rax, align 8
  %v1_50df3 = add i64 %v3_50dec, 8
  %v2_50df3 = inttoptr i64 %v1_50df3 to i32*
  %v3_50df3 = load i32, i32* %v2_50df3, align 4
  %v4_50df3 = zext i32 %v3_50df3 to i64
  store i64 %v4_50df3, i64* @rdx, align 8
  %v5_50df6 = icmp eq i32 %v3_50df3, 0
  br i1 %v5_50df6, label %bb245, label %dec_label_pc_50dfe

bb245:                                            ; preds = %dec_label_pc_50dec
  %v2_50df8 = call i64 @function_510b8(i64 %v2_50dd0)
  store i64 %v2_50df8, i64* @rax, align 8
  %v0_50dfe.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50dfe

dec_label_pc_50dfe:                               ; preds = %bb245, %dec_label_pc_50dec
  %v0_50e05 = phi i64 [ %v2_50df8, %bb245 ], [ %v3_50dec, %dec_label_pc_50dec ]
  %v0_50dfe = phi i64 [ %v0_50dfe.pre, %bb245 ], [ %v0_50dec, %dec_label_pc_50dec ]
  %v1_50dfe = add i64 %v0_50dfe, 168
  %v2_50dfe = inttoptr i64 %v1_50dfe to i64*
  %v3_50dfe = load i64, i64* %v2_50dfe, align 8
  store i64 %v3_50dfe, i64* @rdi, align 8
  %v1_50e05 = add i64 %v0_50e05, 16
  %v2_50e05 = inttoptr i64 %v1_50e05 to i64*
  %v3_50e05 = load i64, i64* %v2_50e05, align 8
  store i64 %v3_50e05, i64* @rbx, align 8
  %v1_50e0c = inttoptr i64 %v3_50dfe to i64*
  %v2_50e0c = load i64, i64* %v1_50e0c, align 8
  store i64 %v2_50e0c, i64* @rax, align 8
  %v1_50e15 = inttoptr i64 %v2_50e0c to i64*
  %v2_50e15 = load i64, i64* %v1_50e15, align 8
  store i64 %v2_50e15, i64* @rdx, align 8
  store i64 %v3_50e05, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg4, i64* %r13.global-to-local, align 8
  ret i64 %v2_50e0c
}

define i64 @function_50e40() local_unnamed_addr {
dec_label_pc_50e40:
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %v0_50e40 = load i64, i64* @rbp, align 8
  %v1_50e40 = add i64 %v0_50e40, 56
  %v2_50e40 = inttoptr i64 %v1_50e40 to i64*
  %v3_50e40 = load i64, i64* %v2_50e40, align 8
  store i64 %v3_50e40, i64* @rax, align 8
  %v1_50e44 = add i64 %v3_50e40, 8
  %v2_50e44 = inttoptr i64 %v1_50e44 to i32*
  %v3_50e44 = load i32, i32* %v2_50e44, align 4
  %v4_50e44 = zext i32 %v3_50e44 to i64
  store i64 %v4_50e44, i64* @r11, align 8
  %v5_50e48 = icmp eq i32 %v3_50e44, 0
  br i1 %v5_50e48, label %bb, label %dec_label_pc_50e51

bb:                                               ; preds = %dec_label_pc_50e40
  %v1_50e4b = load i64, i64* @rdi, align 8
  %v2_50e4b = call i64 @function_510b8(i64 %v1_50e4b)
  store i64 %v2_50e4b, i64* @rax, align 8
  %v0_50e68.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50e51

dec_label_pc_50e51:                               ; preds = %bb, %dec_label_pc_50e40
  %v0_50e68 = phi i64 [ %v0_50e68.pre, %bb ], [ %v0_50e40, %dec_label_pc_50e40 ]
  %v0_50e51 = phi i64 [ %v2_50e4b, %bb ], [ %v3_50e40, %dec_label_pc_50e40 ]
  %v1_50e51 = add i64 %v0_50e51, 16
  %v2_50e51 = inttoptr i64 %v1_50e51 to i64*
  %v3_50e51 = load i64, i64* %v2_50e51, align 8
  store i64 %v3_50e51, i64* %r15.global-to-local, align 8
  %v2_50e55 = load i64, i64* @rbx, align 8
  store i64 %v2_50e55, i64* @rax, align 8
  store i64 %v2_50e55, i64* @rdi, align 8
  %v1_50e68 = add i64 %v0_50e68, 144
  %v2_50e68 = inttoptr i64 %v1_50e68 to i64*
  %v3_50e68 = load i64, i64* %v2_50e68, align 8
  store i64 %v3_50e68, i64* @rdx, align 8
  %v1_50e6f = add i64 %v3_50e68, 8
  %v2_50e6f = inttoptr i64 %v1_50e6f to i32*
  %v3_50e6f = load i32, i32* %v2_50e6f, align 4
  %v5_50e73 = icmp eq i32 %v3_50e6f, 0
  br i1 %v5_50e73, label %bb28, label %dec_label_pc_50e7c

bb28:                                             ; preds = %dec_label_pc_50e51
  %v2_50e76 = call i64 @function_510b8(i64 %v2_50e55)
  store i64 %v2_50e76, i64* @rax, align 8
  %v0_50e7c.pre = load i64, i64* %r15.global-to-local, align 8
  %v2_50e8f.pre = load i64, i64* @rbx, align 8
  %v0_510a0.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50e7c

dec_label_pc_50e7c:                               ; preds = %bb28, %dec_label_pc_50e51
  %v0_510a0 = phi i64 [ %v0_510a0.pre, %bb28 ], [ %v0_50e68, %dec_label_pc_50e51 ]
  %v2_50e8f = phi i64 [ %v2_50e8f.pre, %bb28 ], [ %v2_50e55, %dec_label_pc_50e51 ]
  %v0_50e9b = phi i64 [ %v2_50e76, %bb28 ], [ %v2_50e55, %dec_label_pc_50e51 ]
  %v0_50e86 = phi i64 [ %v0_50e7c.pre, %bb28 ], [ %v3_50e51, %dec_label_pc_50e51 ]
  %v1_50e7c = inttoptr i64 %v0_50e86 to i64*
  %v2_50e7c = load i64, i64* %v1_50e7c, align 8
  store i64 %v2_50e7c, i64* @rcx, align 8
  store i64 %v2_50e8f, i64* @rdx, align 8
  store i64 %v0_50e9b, i64* @rdi, align 8
  %v4_50e9b = trunc i64 %v0_50e9b to i8
  %v5_50e9b = icmp eq i8 %v4_50e9b, 0
  %v1_50e9d = icmp eq i1 %v5_50e9b, false
  br i1 %v1_50e9d, label %dec_label_pc_510a0, label %dec_label_pc_50ea3

dec_label_pc_50ea3:                               ; preds = %dec_label_pc_50e7c
  %v1_50ea3 = add i64 %v0_510a0, 56
  %v2_50ea3 = inttoptr i64 %v1_50ea3 to i64*
  %v3_50ea3 = load i64, i64* %v2_50ea3, align 8
  store i64 %v3_50ea3, i64* @rax, align 8
  %v1_50ea7 = add i64 %v3_50ea3, 8
  %v2_50ea7 = inttoptr i64 %v1_50ea7 to i32*
  %v3_50ea7 = load i32, i32* %v2_50ea7, align 4
  %v5_50eab = icmp eq i32 %v3_50ea7, 0
  br i1 %v5_50eab, label %bb29, label %dec_label_pc_50eb4

bb29:                                             ; preds = %dec_label_pc_50ea3
  %v2_50eae = call i64 @function_510b8(i64 %v0_50e9b)
  store i64 %v2_50eae, i64* @rax, align 8
  %v2_50eb8.pre = load i64, i64* @rbx, align 8
  %v0_50ece.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_50eb4

dec_label_pc_50eb4:                               ; preds = %bb29, %dec_label_pc_50ea3
  %v0_50f60 = phi i64 [ %v0_50ece.pre, %bb29 ], [ %v0_510a0, %dec_label_pc_50ea3 ]
  %v2_50f39 = phi i64 [ %v2_50eb8.pre, %bb29 ], [ %v2_50e8f, %dec_label_pc_50ea3 ]
  %v0_50eb4 = phi i64 [ %v2_50eae, %bb29 ], [ %v3_50ea3, %dec_label_pc_50ea3 ]
  %v1_50eb4 = add i64 %v0_50eb4, 16
  %v2_50eb4 = inttoptr i64 %v1_50eb4 to i64*
  %v3_50eb4 = load i64, i64* %v2_50eb4, align 8
  store i64 %v3_50eb4, i64* %r15.global-to-local, align 8
  store i64 %v2_50f39, i64* @rax, align 8
  store i64 %v2_50f39, i64* @rdi, align 8
  %v1_50ecb = inttoptr i64 %v3_50eb4 to i64*
  %v2_50ecb = load i64, i64* %v1_50ecb, align 8
  store i64 %v2_50ecb, i64* @rcx, align 8
  store i64 %v2_50f39, i64* @rdx, align 8
  store i64 %v2_50f39, i64* @rdi, align 8
  %v1_50ef5 = add i64 %v0_50f60, 48
  %v2_50ef5 = inttoptr i64 %v1_50ef5 to i64*
  %v3_50ef5 = load i64, i64* %v2_50ef5, align 8
  store i64 %v3_50ef5, i64* %r15.global-to-local, align 8
  store i64 %v2_50f39, i64* @rax, align 8
  store i64 %v2_50f39, i64* @rdi, align 8
  %v1_50f0c = inttoptr i64 %v3_50ef5 to i64*
  %v2_50f0c = load i64, i64* %v1_50f0c, align 8
  store i64 %v2_50f0c, i64* @rdx, align 8
  store i64 %v3_50ef5, i64* @rdi, align 8
  store i64 %v2_50f39, i64* @r15, align 8
  store i64 %v2_50f39, i64* @rax, align 8
  store i64 %v2_50f39, i64* @rdi, align 8
  %v0_50f45 = load i64, i64* inttoptr (i64 331596 to i64*), align 8
  store i64 %v0_50f45, i64* @rdi, align 8
  %v1_50f4f = inttoptr i64 %v0_50f45 to i64*
  %v2_50f4f = load i64, i64* %v1_50f4f, align 8
  store i64 %v2_50f4f, i64* @rdx, align 8
  %v1_50f60 = add i64 %v0_50f60, 88
  %v2_50f60 = inttoptr i64 %v1_50f60 to i64*
  %v3_50f60 = load i64, i64* %v2_50f60, align 8
  store i64 %v3_50f60, i64* @rax, align 8
  %v1_50f64 = add i64 %v3_50f60, 8
  %v2_50f64 = inttoptr i64 %v1_50f64 to i32*
  %v3_50f64 = load i32, i32* %v2_50f64, align 4
  %v4_50f64 = zext i32 %v3_50f64 to i64
  store i64 %v4_50f64, i64* @rdi, align 8
  %v7_50f67 = icmp eq i32 %v3_50f64, 0
  br i1 %v7_50f67, label %bb30, label %dec_label_pc_50f6f

bb30:                                             ; preds = %dec_label_pc_50eb4
  %v3_50f69 = call i64 @function_510b8(i64 0)
  store i64 %v3_50f69, i64* @rax, align 8
  %v0_50f76.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_50f6f

dec_label_pc_50f6f:                               ; preds = %bb30, %dec_label_pc_50eb4
  %v0_50f76 = phi i64 [ %v0_50f76.pre, %bb30 ], [ %v2_50f39, %dec_label_pc_50eb4 ]
  %v0_50f6f = phi i64 [ %v3_50f69, %bb30 ], [ %v3_50f60, %dec_label_pc_50eb4 ]
  %v1_50f6f = add i64 %v0_50f6f, 16
  %v2_50f6f = inttoptr i64 %v1_50f6f to i64*
  %v3_50f6f = load i64, i64* %v2_50f6f, align 8
  store i64 %v3_50f6f, i64* @rbx, align 8
  store i64 %v3_50f6f, i64* @rax, align 8
  store i64 %v0_50f76, i64* @rdi, align 8
  %v1_50f86 = inttoptr i64 %v3_50f6f to i64*
  %v2_50f86 = load i64, i64* %v1_50f86, align 8
  store i64 %v2_50f86, i64* @rcx, align 8
  store i64 %v3_50f6f, i64* @rdi, align 8
  %v0_50f8c = load i64, i64* inttoptr (i64 331667 to i64*), align 8
  store i64 %v0_50f8c, i64* @rdx, align 8
  %v0_50f9c = load i64, i64* inttoptr (i64 331683 to i64*), align 8
  store i64 %v0_50f9c, i64* @rbx, align 8
  store i64 %v3_50f6f, i64* @r12, align 8
  br label %dec_label_pc_50fc6

dec_label_pc_50fb0:                               ; preds = %dec_label_pc_51088, %dec_label_pc_5107b
  %v0_50fb0 = load i64, i64* @rbx, align 8
  %v1_50fb0 = inttoptr i64 %v0_50fb0 to i64*
  %v2_50fb0 = load i64, i64* %v1_50fb0, align 8
  store i64 %v2_50fb0, i64* @rax, align 8
  store i64 %v0_50fb0, i64* @rdi, align 8
  store i64 %v2_50fb0, i64* @rbx, align 8
  %v0_50fc9.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_50fc6

dec_label_pc_50fc6:                               ; preds = %dec_label_pc_50fb0, %dec_label_pc_50f6f
  %v0_50fc9 = phi i64 [ %v0_50fc9.pre, %dec_label_pc_50fb0 ], [ %v0_50f76, %dec_label_pc_50f6f ]
  %v0_50fd8 = phi i64 [ %v2_50fb0, %dec_label_pc_50fb0 ], [ %v0_50f9c, %dec_label_pc_50f6f ]
  store i64 %v0_50fd8, i64* @rax, align 8
  store i64 %v0_50fc9, i64* @rdi, align 8
  %v1_50fd2 = inttoptr i64 %v0_50fd8 to i64*
  %v2_50fd2 = load i64, i64* %v1_50fd2, align 8
  store i64 %v2_50fd2, i64* @rdx, align 8
  store i64 %v0_50fd8, i64* @rdi, align 8
  %v4_50fe1 = trunc i64 %v0_50fd8 to i8
  %v5_50fe1 = icmp eq i8 %v4_50fe1, 0
  br i1 %v5_50fe1, label %bb31, label %dec_label_pc_50fe9

bb31:                                             ; preds = %dec_label_pc_50fc6
  %v1_50fe3 = call i64 @function_51840()
  store i64 %v1_50fe3, i64* @rax, align 8
  br label %dec_label_pc_50fe9

dec_label_pc_50fe9:                               ; preds = %bb31, %dec_label_pc_50fc6
  %v0_50fe9 = load i64, i64* @rbp, align 8
  %v1_50fe9 = add i64 %v0_50fe9, 88
  %v2_50fe9 = inttoptr i64 %v1_50fe9 to i64*
  %v3_50fe9 = load i64, i64* %v2_50fe9, align 8
  store i64 %v3_50fe9, i64* @rax, align 8
  %v0_50fed = load i64, i64* inttoptr (i64 331764 to i64*), align 8
  store i64 %v0_50fed, i64* %r13.global-to-local, align 8
  %v1_50ff4 = add i64 %v3_50fe9, 8
  %v2_50ff4 = inttoptr i64 %v1_50ff4 to i32*
  %v3_50ff4 = load i32, i32* %v2_50ff4, align 4
  %v5_50ff7 = icmp eq i32 %v3_50ff4, 0
  br i1 %v5_50ff7, label %bb32, label %dec_label_pc_50fff

bb32:                                             ; preds = %dec_label_pc_50fe9
  %v2_50ff9 = call i64 @function_510b8(i64 %v0_50fd8)
  store i64 %v2_50ff9, i64* @rax, align 8
  %v0_51052.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_50fff

dec_label_pc_50fff:                               ; preds = %bb32, %dec_label_pc_50fe9
  %v0_51052 = phi i64 [ %v0_51052.pre, %bb32 ], [ %v0_50fed, %dec_label_pc_50fe9 ]
  %v0_50fff = phi i64 [ %v2_50ff9, %bb32 ], [ %v3_50fe9, %dec_label_pc_50fe9 ]
  %v1_50fff = add i64 %v0_50fff, 16
  %v2_50fff = inttoptr i64 %v1_50fff to i64*
  %v3_50fff = load i64, i64* %v2_50fff, align 8
  store i64 %v3_50fff, i64* @rcx, align 8
  %v0_51003 = load i64, i64* @rbx, align 8
  %v1_51003 = inttoptr i64 %v0_51003 to i64*
  %v2_51003 = load i64, i64* %v1_51003, align 8
  store i64 %v2_51003, i64* @rax, align 8
  store i64 %v0_51003, i64* @rdx, align 8
  %v0_51021 = load i64, i64* @r15, align 8
  store i64 %v0_51021, i64* @rdi, align 8
  store i64 %v3_50fff, i64* @rcx, align 8
  %v0_51032 = load i64, i64* inttoptr (i64 331833 to i64*), align 8
  store i64 %v0_51032, i64* @rdx, align 8
  store i64 %v3_50fff, i64* @rdi, align 8
  %v1_51046 = inttoptr i64 %v2_51003 to i64*
  %v2_51046 = load i64, i64* %v1_51046, align 8
  store i64 %v2_51046, i64* @rdx, align 8
  store i64 %v2_51003, i64* @rdi, align 8
  %v1_51052 = inttoptr i64 %v0_51052 to i64*
  %v2_51052 = load i64, i64* %v1_51052, align 8
  store i64 %v2_51052, i64* @rdx, align 8
  store i64 %v0_51052, i64* @rdi, align 8
  %v0_51062 = load i64, i64* @r12, align 8
  %v1_51062 = inttoptr i64 %v0_51062 to i64*
  %v2_51062 = load i64, i64* %v1_51062, align 8
  store i64 %v2_51062, i64* @rdx, align 8
  store i64 %v0_51062, i64* @rdi, align 8
  %v1_51072 = icmp eq i64 %v2_51003, 0
  br i1 %v1_51072, label %bb33, label %dec_label_pc_5107b

bb33:                                             ; preds = %dec_label_pc_50fff
  %v1_51075 = call i64 @function_51850()
  store i64 %v1_51075, i64* @rax, align 8
  br label %dec_label_pc_5107b

dec_label_pc_5107b:                               ; preds = %bb33, %dec_label_pc_50fff
  %v0_51088 = phi i64 [ %v1_51075, %bb33 ], [ %v2_51003, %dec_label_pc_50fff ]
  %v1_5107b = add i64 %v0_51088, 24
  %v2_5107b = inttoptr i64 %v1_5107b to i64*
  %v3_5107b = load i64, i64* %v2_5107b, align 8
  store i64 %v3_5107b, i64* @r12, align 8
  %v1_5107f = icmp eq i64 %v3_5107b, 0
  %v1_51082 = icmp eq i1 %v1_5107f, false
  br i1 %v1_51082, label %dec_label_pc_50fb0, label %dec_label_pc_51088

dec_label_pc_51088:                               ; preds = %dec_label_pc_5107b
  store i64 %v0_51088, i64* @rdi, align 8
  store i64 %v0_51088, i64* @r12, align 8
  br label %dec_label_pc_50fb0

dec_label_pc_510a0:                               ; preds = %dec_label_pc_50e7c
  %v1_510a0 = add i64 %v0_510a0, 88
  %v2_510a0 = inttoptr i64 %v1_510a0 to i64*
  %v3_510a0 = load i64, i64* %v2_510a0, align 8
  store i64 %v3_510a0, i64* @rax, align 8
  ret i64 %v3_510a0
}

define i64 @function_510b8(i64 %arg1) local_unnamed_addr {
dec_label_pc_510b8:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_510c8() local_unnamed_addr {
dec_label_pc_510c8:
  %v0_510c8 = load i64, i64* @rbp, align 8
  %v1_510c8 = add i64 %v0_510c8, 48
  %v2_510c8 = inttoptr i64 %v1_510c8 to i64*
  %v3_510c8 = load i64, i64* %v2_510c8, align 8
  %v2_510cc = load i64, i64* @rbx, align 8
  store i64 %v2_510cc, i64* @rax, align 8
  store i64 %v2_510cc, i64* @rdi, align 8
  %v1_510df = inttoptr i64 %v3_510c8 to i64*
  %v2_510df = load i64, i64* %v1_510df, align 8
  store i64 %v2_510df, i64* @rdx, align 8
  store i64 %v3_510c8, i64* @rdi, align 8
  store i64 %v2_510cc, i64* @r12, align 8
  store i64 %v2_510cc, i64* @rax, align 8
  store i64 %v2_510cc, i64* @rdi, align 8
  %v4_51105 = trunc i64 %v2_510cc to i8
  %v5_51105 = icmp eq i8 %v4_51105, 0
  br i1 %v5_51105, label %bb, label %dec_label_pc_5110d

bb:                                               ; preds = %dec_label_pc_510c8
  %v1_51107 = call i64 @function_513c0()
  store i64 %v1_51107, i64* @rax, align 8
  %v0_5110d.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_5110d

dec_label_pc_5110d:                               ; preds = %bb, %dec_label_pc_510c8
  %v0_5110d = phi i64 [ %v0_5110d.pre, %bb ], [ %v0_510c8, %dec_label_pc_510c8 ]
  %v1_5110d = add i64 %v0_5110d, 88
  %v2_5110d = inttoptr i64 %v1_5110d to i64*
  %v3_5110d = load i64, i64* %v2_5110d, align 8
  store i64 %v3_5110d, i64* @rax, align 8
  %v1_51118 = add i64 %v3_5110d, 8
  %v2_51118 = inttoptr i64 %v1_51118 to i32*
  %v3_51118 = load i32, i32* %v2_51118, align 4
  %v4_51118 = zext i32 %v3_51118 to i64
  store i64 %v4_51118, i64* @rdx, align 8
  %v1_51123 = call i64 @function_510b8(i64 %v2_510cc)
  store i64 %v1_51123, i64* @rax, align 8
  ret i64 %v1_51123
}

define i64 @function_51128() local_unnamed_addr {
dec_label_pc_51128:
  %v0_51128 = load i64, i64* @rbp, align 8
  %v1_51128 = add i64 %v0_51128, 40
  %v2_51128 = inttoptr i64 %v1_51128 to i64*
  %v3_51128 = load i64, i64* %v2_51128, align 8
  store i64 %v3_51128, i64* @rdi, align 8
  %v6_51138 = call i64 @function_5090d(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_51138, i64* @rax, align 8
  ret i64 %v6_51138
}

define i64 @function_51140() local_unnamed_addr {
dec_label_pc_51140:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %v2_51140 = load i64, i64* @r12, align 8
  store i64 %v2_51140, i64* @rax, align 8
  store i64 %v2_51140, i64* @rdi, align 8
  store i64 %v2_51140, i64* @rdx, align 8
  store i64 %v2_51140, i64* @rdi, align 8
  %v0_51168 = load i64, i64* @rbp, align 8
  %v1_51168 = add i64 %v0_51168, 56
  %v2_51168 = inttoptr i64 %v1_51168 to i64*
  %v3_51168 = load i64, i64* %v2_51168, align 8
  store i64 %v3_51168, i64* @rax, align 8
  %v1_5116c = add i64 %v3_51168, 8
  %v2_5116c = inttoptr i64 %v1_5116c to i32*
  %v3_5116c = load i32, i32* %v2_5116c, align 4
  %v4_5116c = zext i32 %v3_5116c to i64
  store i64 %v4_5116c, i64* @rcx, align 8
  %v5_5116f = icmp eq i32 %v3_5116c, 0
  br i1 %v5_5116f, label %bb, label %dec_label_pc_51177

bb:                                               ; preds = %dec_label_pc_51140
  %v2_51171 = call i64 @function_510b8(i64 %v2_51140)
  store i64 %v2_51171, i64* @rax, align 8
  %v0_51192.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_51177

dec_label_pc_51177:                               ; preds = %bb, %dec_label_pc_51140
  %v0_511b6 = phi i64 [ %v0_51192.pre, %bb ], [ %v0_51168, %dec_label_pc_51140 ]
  %v0_51177 = phi i64 [ %v2_51171, %bb ], [ %v3_51168, %dec_label_pc_51140 ]
  %v1_51177 = add i64 %v0_51177, 16
  %v2_51177 = inttoptr i64 %v1_51177 to i64*
  %v3_51177 = load i64, i64* %v2_51177, align 8
  store i64 %v3_51177, i64* %r13.global-to-local, align 8
  %v2_5117b = load i64, i64* @rbx, align 8
  store i64 %v2_5117b, i64* @rax, align 8
  store i64 %v2_5117b, i64* @rdi, align 8
  %v1_5118e = inttoptr i64 %v3_51177 to i64*
  %v2_5118e = load i64, i64* %v1_5118e, align 8
  store i64 %v2_5118e, i64* @rcx, align 8
  store i64 %v2_5117b, i64* @rdx, align 8
  store i64 %v2_5117b, i64* @rdi, align 8
  %v1_511b6 = add i64 %v0_511b6, 56
  %v2_511b6 = inttoptr i64 %v1_511b6 to i64*
  %v3_511b6 = load i64, i64* %v2_511b6, align 8
  store i64 %v3_511b6, i64* @rax, align 8
  %v1_511ba = add i64 %v3_511b6, 8
  %v2_511ba = inttoptr i64 %v1_511ba to i32*
  %v3_511ba = load i32, i32* %v2_511ba, align 4
  %v4_511ba = zext i32 %v3_511ba to i64
  store i64 %v4_511ba, i64* @rdx, align 8
  %v5_511bd = icmp eq i32 %v3_511ba, 0
  br i1 %v5_511bd, label %bb37, label %dec_label_pc_511c5

bb37:                                             ; preds = %dec_label_pc_51177
  %v2_511bf = call i64 @function_510b8(i64 %v2_5117b)
  store i64 %v2_511bf, i64* @rax, align 8
  %v0_511dd.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_511c5

dec_label_pc_511c5:                               ; preds = %bb37, %dec_label_pc_51177
  %v0_511dd = phi i64 [ %v0_511dd.pre, %bb37 ], [ %v0_511b6, %dec_label_pc_51177 ]
  %v0_511c5 = phi i64 [ %v2_511bf, %bb37 ], [ %v3_511b6, %dec_label_pc_51177 ]
  %v1_511c5 = add i64 %v0_511c5, 16
  %v2_511c5 = inttoptr i64 %v1_511c5 to i64*
  %v3_511c5 = load i64, i64* %v2_511c5, align 8
  store i64 %v3_511c5, i64* %r13.global-to-local, align 8
  %v2_511c9 = load i64, i64* @r12, align 8
  store i64 %v2_511c9, i64* @rax, align 8
  store i64 %v2_511c9, i64* @rdi, align 8
  %v1_511dd = add i64 %v0_511dd, 136
  %v2_511dd = inttoptr i64 %v1_511dd to i64*
  %v3_511dd = load i64, i64* %v2_511dd, align 8
  store i64 %v3_511dd, i64* @rdx, align 8
  %v1_511e4 = add i64 %v3_511dd, 8
  %v2_511e4 = inttoptr i64 %v1_511e4 to i32*
  %v3_511e4 = load i32, i32* %v2_511e4, align 4
  %v5_511e8 = icmp eq i32 %v3_511e4, 0
  br i1 %v5_511e8, label %bb38, label %dec_label_pc_511f1

bb38:                                             ; preds = %dec_label_pc_511c5
  %v2_511eb = call i64 @function_510b8(i64 %v2_511c9)
  store i64 %v2_511eb, i64* @rax, align 8
  %v0_511f1.pre = load i64, i64* %r13.global-to-local, align 8
  %v2_51205.pre = load i64, i64* @r12, align 8
  %v0_51219.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_511f1

dec_label_pc_511f1:                               ; preds = %bb38, %dec_label_pc_511c5
  %v0_51287 = phi i64 [ %v0_51219.pre, %bb38 ], [ %v0_511dd, %dec_label_pc_511c5 ]
  %v2_5121d = phi i64 [ %v2_51205.pre, %bb38 ], [ %v2_511c9, %dec_label_pc_511c5 ]
  %v0_51211 = phi i64 [ %v2_511eb, %bb38 ], [ %v2_511c9, %dec_label_pc_511c5 ]
  %v0_511fc = phi i64 [ %v0_511f1.pre, %bb38 ], [ %v3_511c5, %dec_label_pc_511c5 ]
  %v1_511f1 = inttoptr i64 %v0_511fc to i64*
  %v2_511f1 = load i64, i64* %v1_511f1, align 8
  store i64 %v2_511f1, i64* @rcx, align 8
  store i64 %v2_5121d, i64* @rdx, align 8
  store i64 %v0_51211, i64* @rdi, align 8
  %v1_51219 = add i64 %v0_51287, 48
  %v2_51219 = inttoptr i64 %v1_51219 to i64*
  %v3_51219 = load i64, i64* %v2_51219, align 8
  store i64 %v3_51219, i64* %r13.global-to-local, align 8
  store i64 %v2_5121d, i64* @rax, align 8
  store i64 %v2_5121d, i64* @rdi, align 8
  %v1_51231 = inttoptr i64 %v3_51219 to i64*
  %v2_51231 = load i64, i64* %v1_51231, align 8
  store i64 %v2_51231, i64* @rdx, align 8
  store i64 %v3_51219, i64* @rdi, align 8
  store i64 %v2_5121d, i64* %r12.global-to-local, align 8
  store i64 %v2_5121d, i64* @rax, align 8
  store i64 %v2_5121d, i64* @rdi, align 8
  store i64 %v2_5121d, i64* @rdx, align 8
  store i64 %v2_5121d, i64* @rdi, align 8
  %v1_51287 = add i64 %v0_51287, 56
  %v2_51287 = inttoptr i64 %v1_51287 to i64*
  %v3_51287 = load i64, i64* %v2_51287, align 8
  store i64 %v3_51287, i64* @rax, align 8
  %v1_5128b = add i64 %v3_51287, 8
  %v2_5128b = inttoptr i64 %v1_5128b to i32*
  %v3_5128b = load i32, i32* %v2_5128b, align 4
  %v10_5128b = icmp eq i32 %v3_5128b, 0
  br i1 %v10_5128b, label %bb39, label %dec_label_pc_51295

bb39:                                             ; preds = %dec_label_pc_511f1
  %v2_5128f = call i64 @function_510b8(i64 %v2_5121d)
  store i64 %v2_5128f, i64* @rax, align 8
  %v2_51299.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_512ad.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_51295

dec_label_pc_51295:                               ; preds = %bb39, %dec_label_pc_511f1
  %v0_512ad = phi i64 [ %v0_512ad.pre, %bb39 ], [ %v0_51287, %dec_label_pc_511f1 ]
  %v2_51299 = phi i64 [ %v2_51299.pre, %bb39 ], [ %v2_5121d, %dec_label_pc_511f1 ]
  %v0_51295 = phi i64 [ %v2_5128f, %bb39 ], [ %v3_51287, %dec_label_pc_511f1 ]
  %v1_51295 = add i64 %v0_51295, 16
  %v2_51295 = inttoptr i64 %v1_51295 to i64*
  %v3_51295 = load i64, i64* %v2_51295, align 8
  store i64 %v3_51295, i64* %r13.global-to-local, align 8
  store i64 %v2_51299, i64* @rax, align 8
  store i64 %v2_51299, i64* @rdi, align 8
  %v1_512ad = add i64 %v0_512ad, 72
  %v2_512ad = inttoptr i64 %v1_512ad to i64*
  %v3_512ad = load i64, i64* %v2_512ad, align 8
  store i64 %v3_512ad, i64* @rdx, align 8
  %v1_512b1 = add i64 %v3_512ad, 8
  %v2_512b1 = inttoptr i64 %v1_512b1 to i32*
  %v3_512b1 = load i32, i32* %v2_512b1, align 4
  %v10_512b1 = icmp eq i32 %v3_512b1, 0
  br i1 %v10_512b1, label %bb40, label %dec_label_pc_512bb

bb40:                                             ; preds = %dec_label_pc_51295
  %v2_512b5 = call i64 @function_510b8(i64 %v2_51299)
  store i64 %v2_512b5, i64* @rax, align 8
  %v0_512bb.pre = load i64, i64* %r13.global-to-local, align 8
  %v2_512cf.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_512e3.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_512bb

dec_label_pc_512bb:                               ; preds = %bb40, %dec_label_pc_51295
  %v0_512e3 = phi i64 [ %v0_512e3.pre, %bb40 ], [ %v0_512ad, %dec_label_pc_51295 ]
  %v2_512cf = phi i64 [ %v2_512cf.pre, %bb40 ], [ %v2_51299, %dec_label_pc_51295 ]
  %v0_512db = phi i64 [ %v2_512b5, %bb40 ], [ %v2_51299, %dec_label_pc_51295 ]
  %v0_512c6 = phi i64 [ %v0_512bb.pre, %bb40 ], [ %v3_51295, %dec_label_pc_51295 ]
  %v1_512bb = inttoptr i64 %v0_512c6 to i64*
  %v2_512bb = load i64, i64* %v1_512bb, align 8
  store i64 %v2_512bb, i64* @rcx, align 8
  store i64 %v2_512cf, i64* @rdx, align 8
  store i64 %v0_512db, i64* @rdi, align 8
  %v1_512e3 = add i64 %v0_512e3, 56
  %v2_512e3 = inttoptr i64 %v1_512e3 to i64*
  %v3_512e3 = load i64, i64* %v2_512e3, align 8
  store i64 %v3_512e3, i64* @rax, align 8
  %v1_512e7 = add i64 %v3_512e3, 8
  %v2_512e7 = inttoptr i64 %v1_512e7 to i32*
  %v3_512e7 = load i32, i32* %v2_512e7, align 4
  %v10_512e7 = icmp eq i32 %v3_512e7, 0
  br i1 %v10_512e7, label %bb41, label %dec_label_pc_512f1

bb41:                                             ; preds = %dec_label_pc_512bb
  %v2_512eb = call i64 @function_510b8(i64 %v0_512db)
  store i64 %v2_512eb, i64* @rax, align 8
  %v2_512f5.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_5130d.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_512f1

dec_label_pc_512f1:                               ; preds = %bb41, %dec_label_pc_512bb
  %v0_51331 = phi i64 [ %v0_5130d.pre, %bb41 ], [ %v0_512e3, %dec_label_pc_512bb ]
  %v2_5131d = phi i64 [ %v2_512f5.pre, %bb41 ], [ %v2_512cf, %dec_label_pc_512bb ]
  %v0_512f1 = phi i64 [ %v2_512eb, %bb41 ], [ %v3_512e3, %dec_label_pc_512bb ]
  %v1_512f1 = add i64 %v0_512f1, 16
  %v2_512f1 = inttoptr i64 %v1_512f1 to i64*
  %v3_512f1 = load i64, i64* %v2_512f1, align 8
  store i64 %v3_512f1, i64* %r13.global-to-local, align 8
  store i64 %v2_5131d, i64* @rax, align 8
  store i64 %v2_5131d, i64* @rdi, align 8
  %v1_51309 = inttoptr i64 %v3_512f1 to i64*
  %v2_51309 = load i64, i64* %v1_51309, align 8
  store i64 %v2_51309, i64* @rcx, align 8
  store i64 %v2_5131d, i64* @rdx, align 8
  store i64 %v2_5131d, i64* @rdi, align 8
  %v1_51331 = add i64 %v0_51331, 88
  %v2_51331 = inttoptr i64 %v1_51331 to i64*
  %v3_51331 = load i64, i64* %v2_51331, align 8
  store i64 %v3_51331, i64* @rax, align 8
  %v0_51335 = load i64, i64* inttoptr (i64 332604 to i64*), align 8
  store i64 %v0_51335, i64* @rbx, align 8
  %v1_5133c = add i64 %v3_51331, 8
  %v2_5133c = inttoptr i64 %v1_5133c to i32*
  %v3_5133c = load i32, i32* %v2_5133c, align 4
  %v10_5133c = icmp eq i32 %v3_5133c, 0
  br i1 %v10_5133c, label %bb42, label %dec_label_pc_51346

bb42:                                             ; preds = %dec_label_pc_512f1
  %v2_51340 = call i64 @function_510b8(i64 %v2_5131d)
  store i64 %v2_51340, i64* @rax, align 8
  %v2_51351.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_51375.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_51346

dec_label_pc_51346:                               ; preds = %bb42, %dec_label_pc_512f1
  %v0_51375 = phi i64 [ %v0_51375.pre, %bb42 ], [ %v0_51335, %dec_label_pc_512f1 ]
  %v2_51351 = phi i64 [ %v2_51351.pre, %bb42 ], [ %v2_5131d, %dec_label_pc_512f1 ]
  %v0_51346 = phi i64 [ %v2_51340, %bb42 ], [ %v3_51331, %dec_label_pc_512f1 ]
  %v1_51346 = add i64 %v0_51346, 16
  %v2_51346 = inttoptr i64 %v1_51346 to i64*
  %v3_51346 = load i64, i64* %v2_51346, align 8
  store i64 %v2_51351, i64* @rax, align 8
  store i64 %v2_51351, i64* @rdi, align 8
  %v1_5135e = inttoptr i64 %v3_51346 to i64*
  %v2_5135e = load i64, i64* %v1_5135e, align 8
  store i64 %v2_5135e, i64* @rcx, align 8
  store i64 %v3_51346, i64* @rdi, align 8
  %v0_51365 = load i64, i64* inttoptr (i64 332652 to i64*), align 8
  store i64 %v0_51365, i64* @rdx, align 8
  %v1_51375 = inttoptr i64 %v0_51375 to i64*
  %v2_51375 = load i64, i64* %v1_51375, align 8
  store i64 %v2_51375, i64* @rdx, align 8
  %v0_51384 = load i64, i64* @r14, align 8
  store i64 %v0_51384, i64* @rdi, align 8
  %v6_5138f = call i64 @function_5090d(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_5138f, i64* @rax, align 8
  ret i64 %v6_5138f
}

define i64 @function_51398() local_unnamed_addr {
dec_label_pc_51398:
  %v0_51398 = load i64, i64* inttoptr (i64 332703 to i64*), align 8
  %v1_5139f = inttoptr i64 %v0_51398 to i64*
  %v2_5139f = load i64, i64* %v1_5139f, align 8
  store i64 %v2_5139f, i64* @rax, align 8
  store i64 %v0_51398, i64* @rdi, align 8
  ret i64 %v2_5139f
}

define i64 @function_513b4() local_unnamed_addr {
dec_label_pc_513b4:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_513c0() local_unnamed_addr {
dec_label_pc_513c0:
  %r13.global-to-local = alloca i64, align 8
  %v2_513c0 = load i64, i64* @r12, align 8
  store i64 %v2_513c0, i64* @rax, align 8
  store i64 %v2_513c0, i64* @rdi, align 8
  store i64 %v2_513c0, i64* @rdx, align 8
  store i64 %v2_513c0, i64* @rdi, align 8
  %v0_513e8 = load i64, i64* @rbp, align 8
  %v1_513e8 = add i64 %v0_513e8, 56
  %v2_513e8 = inttoptr i64 %v1_513e8 to i64*
  %v3_513e8 = load i64, i64* %v2_513e8, align 8
  store i64 %v3_513e8, i64* @rax, align 8
  %v1_513ec = add i64 %v3_513e8, 8
  %v2_513ec = inttoptr i64 %v1_513ec to i32*
  %v3_513ec = load i32, i32* %v2_513ec, align 4
  %v4_513ec = zext i32 %v3_513ec to i64
  store i64 %v4_513ec, i64* @rdi, align 8
  %v7_513ef = icmp eq i32 %v3_513ec, 0
  br i1 %v7_513ef, label %bb, label %dec_label_pc_513f7

bb:                                               ; preds = %dec_label_pc_513c0
  %v3_513f1 = call i64 @function_510b8(i64 0)
  store i64 %v3_513f1, i64* @rax, align 8
  %v2_513fb.pre = load i64, i64* @r12, align 8
  %v0_5140f.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_513f7

dec_label_pc_513f7:                               ; preds = %bb, %dec_label_pc_513c0
  %v0_5140f = phi i64 [ %v0_5140f.pre, %bb ], [ %v0_513e8, %dec_label_pc_513c0 ]
  %v2_513fb = phi i64 [ %v2_513fb.pre, %bb ], [ %v2_513c0, %dec_label_pc_513c0 ]
  %v0_513f7 = phi i64 [ %v3_513f1, %bb ], [ %v3_513e8, %dec_label_pc_513c0 ]
  %v1_513f7 = add i64 %v0_513f7, 16
  %v2_513f7 = inttoptr i64 %v1_513f7 to i64*
  %v3_513f7 = load i64, i64* %v2_513f7, align 8
  store i64 %v3_513f7, i64* %r13.global-to-local, align 8
  store i64 %v2_513fb, i64* @rax, align 8
  store i64 %v2_513fb, i64* @rdi, align 8
  %v1_5140f = add i64 %v0_5140f, 144
  %v2_5140f = inttoptr i64 %v1_5140f to i64*
  %v3_5140f = load i64, i64* %v2_5140f, align 8
  store i64 %v3_5140f, i64* @rdx, align 8
  %v1_51416 = add i64 %v3_5140f, 8
  %v2_51416 = inttoptr i64 %v1_51416 to i32*
  %v3_51416 = load i32, i32* %v2_51416, align 4
  %v5_51419 = icmp eq i32 %v3_51416, 0
  br i1 %v5_51419, label %bb16, label %dec_label_pc_51421

bb16:                                             ; preds = %dec_label_pc_513f7
  %v2_5141b = call i64 @function_510b8(i64 %v2_513fb)
  store i64 %v2_5141b, i64* @rax, align 8
  %v0_51421.pre = load i64, i64* %r13.global-to-local, align 8
  %v2_51435.pre = load i64, i64* @r12, align 8
  %v0_51449.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_51421

dec_label_pc_51421:                               ; preds = %bb16, %dec_label_pc_513f7
  %v0_51449 = phi i64 [ %v0_51449.pre, %bb16 ], [ %v0_5140f, %dec_label_pc_513f7 ]
  %v2_51435 = phi i64 [ %v2_51435.pre, %bb16 ], [ %v2_513fb, %dec_label_pc_513f7 ]
  %v0_51441 = phi i64 [ %v2_5141b, %bb16 ], [ %v2_513fb, %dec_label_pc_513f7 ]
  %v0_5142c = phi i64 [ %v0_51421.pre, %bb16 ], [ %v3_513f7, %dec_label_pc_513f7 ]
  %v1_51421 = inttoptr i64 %v0_5142c to i64*
  %v2_51421 = load i64, i64* %v1_51421, align 8
  store i64 %v2_51421, i64* @rcx, align 8
  store i64 %v2_51435, i64* @rdx, align 8
  store i64 %v0_51441, i64* @rdi, align 8
  %v1_51449 = add i64 %v0_51449, 88
  %v2_51449 = inttoptr i64 %v1_51449 to i64*
  %v3_51449 = load i64, i64* %v2_51449, align 8
  store i64 %v3_51449, i64* @rax, align 8
  %v0_5144d = load i64, i64* inttoptr (i64 332884 to i64*), align 8
  store i64 %v0_5144d, i64* @rbx, align 8
  %v1_51454 = add i64 %v3_51449, 8
  %v2_51454 = inttoptr i64 %v1_51454 to i32*
  %v3_51454 = load i32, i32* %v2_51454, align 4
  %v4_51454 = zext i32 %v3_51454 to i64
  store i64 %v4_51454, i64* @rcx, align 8
  %v5_51457 = icmp eq i32 %v3_51454, 0
  br i1 %v5_51457, label %bb17, label %dec_label_pc_5145f

bb17:                                             ; preds = %dec_label_pc_51421
  %v2_51459 = call i64 @function_510b8(i64 %v0_51441)
  store i64 %v2_51459, i64* @rax, align 8
  %v2_5146a.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_5145f

dec_label_pc_5145f:                               ; preds = %bb17, %dec_label_pc_51421
  %v2_5146a = phi i64 [ %v2_5146a.pre, %bb17 ], [ %v2_51435, %dec_label_pc_51421 ]
  %v0_5145f = phi i64 [ %v2_51459, %bb17 ], [ %v3_51449, %dec_label_pc_51421 ]
  %v1_5145f = add i64 %v0_5145f, 16
  %v2_5145f = inttoptr i64 %v1_5145f to i64*
  %v3_5145f = load i64, i64* %v2_5145f, align 8
  store i64 %v3_5145f, i64* @rbp, align 8
  store i64 %v2_5146a, i64* @rax, align 8
  ret i64 %v2_5146a
}

define i64 @function_51478() local_unnamed_addr {
dec_label_pc_51478:
  %v0_51478 = load i64, i64* inttoptr (i64 332927 to i64*), align 8
  %v1_5147f = inttoptr i64 %v0_51478 to i64*
  %v2_5147f = load i64, i64* %v1_5147f, align 8
  store i64 %v2_5147f, i64* @rax, align 8
  store i64 %v0_51478, i64* @rdi, align 8
  %v4_5148c = trunc i64 %v2_5147f to i8
  %v5_5148c = icmp eq i8 %v4_5148c, 0
  %v1_5148e = icmp eq i1 %v5_5148c, false
  br i1 %v1_5148e, label %bb, label %dec_label_pc_51494

bb:                                               ; preds = %dec_label_pc_51478
  %v2_5148e = call i64 @function_513b4()
  store i64 %v2_5148e, i64* @rax, align 8
  br label %dec_label_pc_51494

dec_label_pc_51494:                               ; preds = %bb, %dec_label_pc_51478
  %v0_51494 = phi i64 [ %v2_5148e, %bb ], [ %v2_5147f, %dec_label_pc_51478 ]
  ret i64 %v0_51494
}

define i64 @function_51499() local_unnamed_addr {
dec_label_pc_51499:
  %v2_51499 = load i64, i64* @r13, align 8
  store i64 %v2_51499, i64* @rax, align 8
  store i64 %v2_51499, i64* @rdi, align 8
  store i64 %v2_51499, i64* @rdx, align 8
  store i64 %v2_51499, i64* @rdi, align 8
  %v0_514c1 = load i64, i64* @rbp, align 8
  %v1_514c1 = add i64 %v0_514c1, 56
  %v2_514c1 = inttoptr i64 %v1_514c1 to i64*
  %v3_514c1 = load i64, i64* %v2_514c1, align 8
  store i64 %v3_514c1, i64* @rax, align 8
  %v1_514c5 = add i64 %v3_514c1, 8
  %v2_514c5 = inttoptr i64 %v1_514c5 to i32*
  %v3_514c5 = load i32, i32* %v2_514c5, align 4
  %v4_514c5 = zext i32 %v3_514c5 to i64
  store i64 %v4_514c5, i64* @rdi, align 8
  %v7_514c8 = icmp eq i32 %v3_514c5, 0
  br i1 %v7_514c8, label %bb, label %dec_label_pc_514d0

bb:                                               ; preds = %dec_label_pc_51499
  %v3_514ca = call i64 @function_510b8(i64 0)
  store i64 %v3_514ca, i64* @rax, align 8
  %v2_514d4.pre = load i64, i64* @r13, align 8
  %v0_514eb.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_514d0

dec_label_pc_514d0:                               ; preds = %bb, %dec_label_pc_51499
  %v0_51512 = phi i64 [ %v0_514eb.pre, %bb ], [ %v0_514c1, %dec_label_pc_51499 ]
  %v2_514fe = phi i64 [ %v2_514d4.pre, %bb ], [ %v2_51499, %dec_label_pc_51499 ]
  %v0_514d0 = phi i64 [ %v3_514ca, %bb ], [ %v3_514c1, %dec_label_pc_51499 ]
  %v1_514d0 = add i64 %v0_514d0, 16
  %v2_514d0 = inttoptr i64 %v1_514d0 to i64*
  %v3_514d0 = load i64, i64* %v2_514d0, align 8
  store i64 %v2_514fe, i64* @rax, align 8
  store i64 %v2_514fe, i64* @rdi, align 8
  %v1_514e8 = inttoptr i64 %v3_514d0 to i64*
  %v2_514e8 = load i64, i64* %v1_514e8, align 8
  store i64 %v2_514e8, i64* @rcx, align 8
  store i64 %v2_514fe, i64* @rdx, align 8
  store i64 %v2_514fe, i64* @rdi, align 8
  %v1_51512 = add i64 %v0_51512, 88
  %v2_51512 = inttoptr i64 %v1_51512 to i64*
  %v3_51512 = load i64, i64* %v2_51512, align 8
  store i64 %v3_51512, i64* @rax, align 8
  %v1_51516 = add i64 %v3_51512, 8
  %v2_51516 = inttoptr i64 %v1_51516 to i32*
  %v3_51516 = load i32, i32* %v2_51516, align 4
  %v5_51519 = icmp eq i32 %v3_51516, 0
  br i1 %v5_51519, label %bb10, label %dec_label_pc_51521

bb10:                                             ; preds = %dec_label_pc_514d0
  %v2_5151b = call i64 @function_510b8(i64 %v2_514fe)
  store i64 %v2_5151b, i64* @rax, align 8
  %v2_51525.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_51521

dec_label_pc_51521:                               ; preds = %bb10, %dec_label_pc_514d0
  %v2_51556 = phi i64 [ %v2_51525.pre, %bb10 ], [ %v2_514fe, %dec_label_pc_514d0 ]
  %v0_51521 = phi i64 [ %v2_5151b, %bb10 ], [ %v3_51512, %dec_label_pc_514d0 ]
  %v1_51521 = add i64 %v0_51521, 16
  %v2_51521 = inttoptr i64 %v1_51521 to i64*
  %v3_51521 = load i64, i64* %v2_51521, align 8
  store i64 %v3_51521, i64* @rbx, align 8
  store i64 %v2_51556, i64* @rax, align 8
  store i64 %v2_51556, i64* @rdi, align 8
  %v1_51539 = inttoptr i64 %v3_51521 to i64*
  %v2_51539 = load i64, i64* %v1_51539, align 8
  store i64 %v2_51539, i64* @rcx, align 8
  %v0_5153c = load i64, i64* inttoptr (i64 333123 to i64*), align 8
  store i64 %v0_5153c, i64* @rdx, align 8
  store i64 %v3_51521, i64* @rdi, align 8
  store i64 %v2_51556, i64* @rdx, align 8
  ret i64 %v2_51556
}

define i64 @function_5155e() local_unnamed_addr {
dec_label_pc_5155e:
  %r13.global-to-local = alloca i64, align 8
  %v2_5155e = load i64, i64* @r12, align 8
  store i64 %v2_5155e, i64* @rax, align 8
  store i64 %v2_5155e, i64* @rdi, align 8
  %v0_51572 = load i64, i64* @rbp, align 8
  %v1_51572 = add i64 %v0_51572, 48
  %v2_51572 = inttoptr i64 %v1_51572 to i64*
  %v3_51572 = load i64, i64* %v2_51572, align 8
  store i64 %v3_51572, i64* @rdi, align 8
  %v1_5157c = inttoptr i64 %v3_51572 to i64*
  %v2_5157c = load i64, i64* %v1_5157c, align 8
  store i64 %v2_5157c, i64* @rax, align 8
  store i64 %v2_5157c, i64* %r13.global-to-local, align 8
  %v1_51588 = inttoptr i64 %v2_5157c to i64*
  %v2_51588 = load i64, i64* %v1_51588, align 8
  store i64 %v2_51588, i64* @rax, align 8
  store i64 %v2_5157c, i64* @rdi, align 8
  %v4_5159b = trunc i64 %v2_51588 to i8
  %v5_5159b = icmp eq i8 %v4_5159b, 0
  %v1_5159d = icmp eq i1 %v5_5159b, false
  br i1 %v1_5159d, label %dec_label_pc_51693, label %dec_label_pc_515a3

dec_label_pc_515a3:                               ; preds = %dec_label_pc_5155e
  %v2_515a3 = load i64, i64* %v1_51588, align 8
  store i64 %v2_515a3, i64* @rax, align 8
  store i64 %v2_5157c, i64* @rdi, align 8
  %v1_515b0 = inttoptr i64 %v2_515a3 to i64*
  %v2_515b0 = load i64, i64* %v1_515b0, align 8
  store i64 %v2_515b0, i64* @rdx, align 8
  store i64 %v2_515a3, i64* @rdi, align 8
  %v4_515c3 = trunc i64 %v2_515a3 to i8
  %v5_515c3 = icmp eq i8 %v4_515c3, 0
  br i1 %v5_515c3, label %dec_label_pc_51693, label %dec_label_pc_515cb

dec_label_pc_515cb:                               ; preds = %dec_label_pc_515a3
  %v1_515cb = add i64 %v0_51572, 56
  %v2_515cb = inttoptr i64 %v1_515cb to i64*
  %v3_515cb = load i64, i64* %v2_515cb, align 8
  store i64 %v3_515cb, i64* @rax, align 8
  %v1_515cf = add i64 %v3_515cb, 8
  %v2_515cf = inttoptr i64 %v1_515cf to i32*
  %v3_515cf = load i32, i32* %v2_515cf, align 4
  %v10_515cf = icmp eq i32 %v3_515cf, 0
  br i1 %v10_515cf, label %bb, label %dec_label_pc_515d9

bb:                                               ; preds = %dec_label_pc_515cb
  %v2_515d3 = call i64 @function_510b8(i64 %v2_515a3)
  store i64 %v2_515d3, i64* @rax, align 8
  %v2_515dd.pre = load i64, i64* @r12, align 8
  %v0_515fb.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_515d9

dec_label_pc_515d9:                               ; preds = %bb, %dec_label_pc_515cb
  %v0_5161f = phi i64 [ %v0_515fb.pre, %bb ], [ %v0_51572, %dec_label_pc_515cb ]
  %v2_5160f = phi i64 [ %v2_515dd.pre, %bb ], [ %v2_5155e, %dec_label_pc_515cb ]
  %v0_515d9 = phi i64 [ %v2_515d3, %bb ], [ %v3_515cb, %dec_label_pc_515cb ]
  %v1_515d9 = add i64 %v0_515d9, 16
  %v2_515d9 = inttoptr i64 %v1_515d9 to i64*
  %v3_515d9 = load i64, i64* %v2_515d9, align 8
  store i64 %v3_515d9, i64* @rcx, align 8
  store i64 %v2_5160f, i64* @rax, align 8
  store i64 %v2_5160f, i64* @rdi, align 8
  store i64 %v3_515d9, i64* @rcx, align 8
  store i64 %v2_5160f, i64* @rdx, align 8
  store i64 %v2_5160f, i64* @rdi, align 8
  %v4_5161b = trunc i64 %v2_5160f to i8
  %v5_5161b = icmp eq i8 %v4_5161b, 0
  br i1 %v5_5161b, label %dec_label_pc_515d9.dec_label_pc_51693_crit_edge, label %dec_label_pc_5161f

dec_label_pc_515d9.dec_label_pc_51693_crit_edge:  ; preds = %dec_label_pc_515d9
  br label %dec_label_pc_51693

dec_label_pc_5161f:                               ; preds = %dec_label_pc_515d9
  %v1_5161f = add i64 %v0_5161f, 88
  %v2_5161f = inttoptr i64 %v1_5161f to i64*
  %v3_5161f = load i64, i64* %v2_5161f, align 8
  store i64 %v3_5161f, i64* @rax, align 8
  %v1_51623 = add i64 %v3_5161f, 8
  %v2_51623 = inttoptr i64 %v1_51623 to i32*
  %v3_51623 = load i32, i32* %v2_51623, align 4
  %v10_51623 = icmp eq i32 %v3_51623, 0
  br i1 %v10_51623, label %bb43, label %dec_label_pc_5162d

bb43:                                             ; preds = %dec_label_pc_5161f
  %v2_51627 = call i64 @function_510b8(i64 %v2_5160f)
  store i64 %v2_51627, i64* @rax, align 8
  %v0_51672.pre.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_5162d

dec_label_pc_5162d:                               ; preds = %bb43, %dec_label_pc_5161f
  %v0_51672.pre = phi i64 [ %v0_51672.pre.pre, %bb43 ], [ %v0_5161f, %dec_label_pc_5161f ]
  %v0_5162d = phi i64 [ %v2_51627, %bb43 ], [ %v3_5161f, %dec_label_pc_5161f ]
  %v1_5162d = add i64 %v0_5162d, 16
  %v2_5162d = inttoptr i64 %v1_5162d to i64*
  %v3_5162d = load i64, i64* %v2_5162d, align 8
  %v0_51631 = load i64, i64* %r13.global-to-local, align 8
  %v1_51631 = inttoptr i64 %v0_51631 to i64*
  %v2_51631 = load i64, i64* %v1_51631, align 8
  store i64 %v2_51631, i64* @rax, align 8
  store i64 %v0_51631, i64* @rdi, align 8
  br label %dec_label_pc_51666

dec_label_pc_51666:                               ; preds = %dec_label_pc_5175c, %dec_label_pc_5162d
  %v0_51672 = phi i64 [ %v0_51672.pre, %dec_label_pc_5162d ], [ %v0_5175c, %dec_label_pc_5175c ]
  %v0_51666 = phi i64 [ %v2_51631, %dec_label_pc_5162d ], [ %v2_51767, %dec_label_pc_5175c ]
  %storemerge10 = phi i64 [ %v3_5162d, %dec_label_pc_5162d ], [ %v3_51760, %dec_label_pc_5175c ]
  %storemerge12.in = phi i64* [ inttoptr (i64 333392 to i64*), %dec_label_pc_5162d ], [ inttoptr (i64 333691 to i64*), %dec_label_pc_5175c ]
  %storemerge13.in = inttoptr i64 %storemerge10 to i64*
  %storemerge13 = load i64, i64* %storemerge13.in, align 8
  store i64 %storemerge13, i64* @rcx, align 8
  %storemerge12 = load i64, i64* %storemerge12.in, align 8
  store i64 %storemerge12, i64* @rdx, align 8
  store i64 %storemerge10, i64* @rdi, align 8
  %storemerge.in = inttoptr i64 %v0_51666 to i64*
  %storemerge = load i64, i64* %storemerge.in, align 8
  store i64 %storemerge, i64* @rdx, align 8
  store i64 %v0_51666, i64* @rdi, align 8
  store i64 %v0_51666, i64* @r12, align 8
  %v1_51672 = add i64 %v0_51672, 88
  %v2_51672 = inttoptr i64 %v1_51672 to i64*
  %v3_51672 = load i64, i64* %v2_51672, align 8
  store i64 %v3_51672, i64* @rax, align 8
  %v1_51676 = add i64 %v3_51672, 8
  %v2_51676 = inttoptr i64 %v1_51676 to i32*
  %v3_51676 = load i32, i32* %v2_51676, align 4
  %v10_51676 = icmp eq i32 %v3_51676, 0
  br i1 %v10_51676, label %bb44, label %dec_label_pc_51680

bb44:                                             ; preds = %dec_label_pc_51666
  %v2_5167a = call i64 @function_510b8(i64 %v0_51666)
  store i64 %v2_5167a, i64* @rax, align 8
  br label %dec_label_pc_51680

dec_label_pc_51680:                               ; preds = %bb44, %dec_label_pc_51666
  %v0_51680 = phi i64 [ %v2_5167a, %bb44 ], [ %v3_51672, %dec_label_pc_51666 ]
  %v1_51680 = add i64 %v0_51680, 16
  %v2_51680 = inttoptr i64 %v1_51680 to i64*
  %v3_51680 = load i64, i64* %v2_51680, align 8
  store i64 %v3_51680, i64* @rbp, align 8
  %v2_5168b = load i64, i64* @rbx, align 8
  store i64 %v2_5168b, i64* @rax, align 8
  ret i64 %v2_5168b

dec_label_pc_51693:                               ; preds = %dec_label_pc_515d9.dec_label_pc_51693_crit_edge, %dec_label_pc_515a3, %dec_label_pc_5155e
  %v0_516b7 = phi i64 [ %v0_5161f, %dec_label_pc_515d9.dec_label_pc_51693_crit_edge ], [ %v0_51572, %dec_label_pc_515a3 ], [ %v0_51572, %dec_label_pc_5155e ]
  %v1_51693 = add i64 %v0_516b7, 96
  %v2_51693 = inttoptr i64 %v1_51693 to i64*
  %v3_51693 = load i64, i64* %v2_51693, align 8
  store i64 %v3_51693, i64* @rdi, align 8
  %v1_5169a = inttoptr i64 %v3_51693 to i64*
  %v2_5169a = load i64, i64* %v1_5169a, align 8
  store i64 %v2_5169a, i64* @rax, align 8
  %v1_516a3 = inttoptr i64 %v2_5169a to i64*
  %v2_516a3 = load i64, i64* %v1_516a3, align 8
  store i64 %v2_516a3, i64* @rdx, align 8
  store i64 %v2_5169a, i64* @rdi, align 8
  %v4_516af = trunc i64 %v2_5169a to i8
  %v5_516af = icmp eq i8 %v4_516af, 0
  br i1 %v5_516af, label %dec_label_pc_51796, label %dec_label_pc_516b7

dec_label_pc_516b7:                               ; preds = %dec_label_pc_51693
  %v1_516b7 = add i64 %v0_516b7, 56
  %v2_516b7 = inttoptr i64 %v1_516b7 to i64*
  %v3_516b7 = load i64, i64* %v2_516b7, align 8
  store i64 %v3_516b7, i64* @rax, align 8
  %v1_516bb = add i64 %v3_516b7, 8
  %v2_516bb = inttoptr i64 %v1_516bb to i32*
  %v3_516bb = load i32, i32* %v2_516bb, align 4
  %v4_516bb = zext i32 %v3_516bb to i64
  store i64 %v4_516bb, i64* %r13.global-to-local, align 8
  %v5_516bf = icmp eq i32 %v3_516bb, 0
  br i1 %v5_516bf, label %bb45, label %dec_label_pc_516c8

bb45:                                             ; preds = %dec_label_pc_516b7
  %v2_516c2 = call i64 @function_510b8(i64 %v2_5169a)
  store i64 %v2_516c2, i64* @rax, align 8
  %v0_516c8.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_516c8

dec_label_pc_516c8:                               ; preds = %bb45, %dec_label_pc_516b7
  %v0_516cc = phi i64 [ %v2_516c2, %bb45 ], [ %v3_516b7, %dec_label_pc_516b7 ]
  %v0_51704 = phi i64 [ %v0_516c8.pre, %bb45 ], [ %v0_516b7, %dec_label_pc_516b7 ]
  %v1_516c8 = add i64 %v0_51704, 104
  %v2_516c8 = inttoptr i64 %v1_516c8 to i64*
  %v3_516c8 = load i64, i64* %v2_516c8, align 8
  store i64 %v3_516c8, i64* @rdi, align 8
  %v1_516cc = add i64 %v0_516cc, 16
  %v2_516cc = inttoptr i64 %v1_516cc to i64*
  %v3_516cc = load i64, i64* %v2_516cc, align 8
  store i64 %v3_516cc, i64* %r13.global-to-local, align 8
  %v1_516d3 = inttoptr i64 %v3_516c8 to i64*
  %v2_516d3 = load i64, i64* %v1_516d3, align 8
  store i64 %v2_516d3, i64* @rax, align 8
  %v1_516dc = inttoptr i64 %v3_516cc to i64*
  %v2_516dc = load i64, i64* %v1_516dc, align 8
  store i64 %v2_516dc, i64* @rcx, align 8
  %v1_516e0 = add i64 %v0_51704, 80
  %v2_516e0 = inttoptr i64 %v1_516e0 to i64*
  %v3_516e0 = load i64, i64* %v2_516e0, align 8
  store i64 %v3_516e0, i64* @rdx, align 8
  store i64 %v3_516cc, i64* @rdi, align 8
  %v1_516f0 = inttoptr i64 %v2_516d3 to i64*
  %v2_516f0 = load i64, i64* %v1_516f0, align 8
  store i64 %v2_516f0, i64* @rdx, align 8
  store i64 %v2_516d3, i64* @rdi, align 8
  %v4_516fc = trunc i64 %v2_516d3 to i8
  %v5_516fc = icmp eq i8 %v4_516fc, 0
  br i1 %v5_516fc, label %dec_label_pc_51796, label %dec_label_pc_51704

dec_label_pc_51704:                               ; preds = %dec_label_pc_516c8
  %v1_51704 = add i64 %v0_51704, 56
  %v2_51704 = inttoptr i64 %v1_51704 to i64*
  %v3_51704 = load i64, i64* %v2_51704, align 8
  store i64 %v3_51704, i64* @rax, align 8
  %v1_51708 = add i64 %v3_51704, 8
  %v2_51708 = inttoptr i64 %v1_51708 to i32*
  %v3_51708 = load i32, i32* %v2_51708, align 4
  %v10_51708 = icmp eq i32 %v3_51708, 0
  br i1 %v10_51708, label %bb46, label %dec_label_pc_51712

bb46:                                             ; preds = %dec_label_pc_51704
  %v2_5170c = call i64 @function_510b8(i64 %v2_516d3)
  store i64 %v2_5170c, i64* @rax, align 8
  %v0_5172e.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_51712

dec_label_pc_51712:                               ; preds = %bb46, %dec_label_pc_51704
  %v0_5174e = phi i64 [ %v0_5172e.pre, %bb46 ], [ %v0_51704, %dec_label_pc_51704 ]
  %v0_51712 = phi i64 [ %v2_5170c, %bb46 ], [ %v3_51704, %dec_label_pc_51704 ]
  %v1_51712 = add i64 %v0_51712, 16
  %v2_51712 = inttoptr i64 %v1_51712 to i64*
  %v3_51712 = load i64, i64* %v2_51712, align 8
  store i64 %v3_51712, i64* %r13.global-to-local, align 8
  %v2_51716 = load i64, i64* @r12, align 8
  store i64 %v2_51716, i64* @rax, align 8
  store i64 %v2_51716, i64* @rdi, align 8
  %v1_5172a = inttoptr i64 %v3_51712 to i64*
  %v2_5172a = load i64, i64* %v1_5172a, align 8
  store i64 %v2_5172a, i64* @rcx, align 8
  store i64 %v2_51716, i64* @rdx, align 8
  store i64 %v2_51716, i64* @rdi, align 8
  %v4_5174a = trunc i64 %v2_51716 to i8
  %v5_5174a = icmp eq i8 %v4_5174a, 0
  br i1 %v5_5174a, label %dec_label_pc_51796, label %dec_label_pc_5174e

dec_label_pc_5174e:                               ; preds = %dec_label_pc_51712
  %v1_5174e = add i64 %v0_5174e, 88
  %v2_5174e = inttoptr i64 %v1_5174e to i64*
  %v3_5174e = load i64, i64* %v2_5174e, align 8
  store i64 %v3_5174e, i64* @rax, align 8
  %v1_51752 = add i64 %v3_5174e, 8
  %v2_51752 = inttoptr i64 %v1_51752 to i32*
  %v3_51752 = load i32, i32* %v2_51752, align 4
  %v10_51752 = icmp eq i32 %v3_51752, 0
  br i1 %v10_51752, label %bb47, label %dec_label_pc_5175c

bb47:                                             ; preds = %dec_label_pc_5174e
  %v2_51756 = call i64 @function_510b8(i64 %v2_51716)
  store i64 %v2_51756, i64* @rax, align 8
  %v0_5175c.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_5175c

dec_label_pc_5175c:                               ; preds = %bb47, %dec_label_pc_5174e
  %v0_51760 = phi i64 [ %v2_51756, %bb47 ], [ %v3_5174e, %dec_label_pc_5174e ]
  %v0_5175c = phi i64 [ %v0_5175c.pre, %bb47 ], [ %v0_5174e, %dec_label_pc_5174e ]
  %v1_5175c = add i64 %v0_5175c, 112
  %v2_5175c = inttoptr i64 %v1_5175c to i64*
  %v3_5175c = load i64, i64* %v2_5175c, align 8
  store i64 %v3_5175c, i64* @rdi, align 8
  %v1_51760 = add i64 %v0_51760, 16
  %v2_51760 = inttoptr i64 %v1_51760 to i64*
  %v3_51760 = load i64, i64* %v2_51760, align 8
  %v1_51767 = inttoptr i64 %v3_5175c to i64*
  %v2_51767 = load i64, i64* %v1_51767, align 8
  store i64 %v2_51767, i64* @rax, align 8
  br label %dec_label_pc_51666

dec_label_pc_51796:                               ; preds = %dec_label_pc_51712, %dec_label_pc_516c8, %dec_label_pc_51693
  %v1_517a1 = phi i64 [ %v2_51716, %dec_label_pc_51712 ], [ %v2_516d3, %dec_label_pc_516c8 ], [ %v2_5169a, %dec_label_pc_51693 ]
  %v0_51796 = phi i64 [ %v0_5174e, %dec_label_pc_51712 ], [ %v0_51704, %dec_label_pc_516c8 ], [ %v0_516b7, %dec_label_pc_51693 ]
  %v1_51796 = add i64 %v0_51796, 56
  %v2_51796 = inttoptr i64 %v1_51796 to i64*
  %v3_51796 = load i64, i64* %v2_51796, align 8
  store i64 %v3_51796, i64* @rax, align 8
  %v1_5179a = add i64 %v3_51796, 8
  %v2_5179a = inttoptr i64 %v1_5179a to i32*
  %v3_5179a = load i32, i32* %v2_5179a, align 4
  %v4_5179a = zext i32 %v3_5179a to i64
  store i64 %v4_5179a, i64* @r11, align 8
  %v5_5179e = icmp eq i32 %v3_5179a, 0
  br i1 %v5_5179e, label %bb48, label %dec_label_pc_517a7

bb48:                                             ; preds = %dec_label_pc_51796
  %v2_517a1 = call i64 @function_510b8(i64 %v1_517a1)
  store i64 %v2_517a1, i64* @rax, align 8
  %v0_517ab.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_517a7

dec_label_pc_517a7:                               ; preds = %bb48, %dec_label_pc_51796
  %v0_517cf = phi i64 [ %v0_517ab.pre, %bb48 ], [ %v0_51796, %dec_label_pc_51796 ]
  %v0_517a7 = phi i64 [ %v2_517a1, %bb48 ], [ %v3_51796, %dec_label_pc_51796 ]
  %v1_517a7 = add i64 %v0_517a7, 16
  %v2_517a7 = inttoptr i64 %v1_517a7 to i64*
  %v3_517a7 = load i64, i64* %v2_517a7, align 8
  store i64 %v3_517a7, i64* @rdi, align 8
  %v1_517ab = add i64 %v0_517cf, 80
  %v2_517ab = inttoptr i64 %v1_517ab to i64*
  %v3_517ab = load i64, i64* %v2_517ab, align 8
  store i64 %v3_517ab, i64* @rdx, align 8
  %v1_517b2 = inttoptr i64 %v3_517a7 to i64*
  %v2_517b2 = load i64, i64* %v1_517b2, align 8
  store i64 %v2_517b2, i64* @rax, align 8
  %v1_517bb = inttoptr i64 %v2_517b2 to i64*
  %v2_517bb = load i64, i64* %v1_517bb, align 8
  store i64 %v2_517bb, i64* @rdx, align 8
  store i64 %v2_517b2, i64* @rdi, align 8
  %v1_517cf = add i64 %v0_517cf, 56
  %v2_517cf = inttoptr i64 %v1_517cf to i64*
  %v3_517cf = load i64, i64* %v2_517cf, align 8
  store i64 %v3_517cf, i64* @rax, align 8
  %v1_517d3 = add i64 %v3_517cf, 8
  %v2_517d3 = inttoptr i64 %v1_517d3 to i32*
  %v3_517d3 = load i32, i32* %v2_517d3, align 4
  %v5_517d7 = icmp eq i32 %v3_517d3, 0
  br i1 %v5_517d7, label %bb49, label %dec_label_pc_517e0

bb49:                                             ; preds = %dec_label_pc_517a7
  %v2_517da = call i64 @function_510b8(i64 %v2_517b2)
  store i64 %v2_517da, i64* @rax, align 8
  %v0_517fb.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_517e0

dec_label_pc_517e0:                               ; preds = %bb49, %dec_label_pc_517a7
  %v0_5181f = phi i64 [ %v0_517fb.pre, %bb49 ], [ %v0_517cf, %dec_label_pc_517a7 ]
  %v0_517e0 = phi i64 [ %v2_517da, %bb49 ], [ %v3_517cf, %dec_label_pc_517a7 ]
  %v1_517e0 = add i64 %v0_517e0, 16
  %v2_517e0 = inttoptr i64 %v1_517e0 to i64*
  %v3_517e0 = load i64, i64* %v2_517e0, align 8
  store i64 %v3_517e0, i64* %r13.global-to-local, align 8
  %v2_517e4 = load i64, i64* @rbx, align 8
  store i64 %v2_517e4, i64* @rax, align 8
  store i64 %v2_517e4, i64* @rdi, align 8
  %v1_517f7 = inttoptr i64 %v3_517e0 to i64*
  %v2_517f7 = load i64, i64* %v1_517f7, align 8
  store i64 %v2_517f7, i64* @rcx, align 8
  store i64 %v2_517e4, i64* @rdx, align 8
  store i64 %v2_517e4, i64* @rdi, align 8
  %v1_5181f = add i64 %v0_5181f, 88
  %v2_5181f = inttoptr i64 %v1_5181f to i64*
  %v3_5181f = load i64, i64* %v2_5181f, align 8
  store i64 %v3_5181f, i64* @rax, align 8
  %v0_51823 = load i64, i64* inttoptr (i64 333866 to i64*), align 8
  store i64 %v0_51823, i64* @rbx, align 8
  %v1_51834 = call i64 @function_510b8(i64 %v2_517e4)
  store i64 %v1_51834, i64* @rax, align 8
  ret i64 %v1_51834
}

define i64 @function_51840() local_unnamed_addr {
dec_label_pc_51840:
  %v0_51843 = load i64, i64* @r14, align 8
  store i64 %v0_51843, i64* @rdi, align 8
  %v6_5184b = call i64 @function_5090d(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_5184b, i64* @rax, align 8
  ret i64 %v6_5184b
}

define i64 @function_51850() local_unnamed_addr {
dec_label_pc_51850:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @"_ZN4lang12lang_luaj$548onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_51860:
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_51868 = load i64, i64* %rsi.global-to-local, align 8
  %v0_5186d = load i64, i64* @rdi, align 8
  store i64 %v0_5186d, i64* @rbx, align 8
  store i64 2, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v0_51868, i64* @rdi, align 8
  %v1_518a9 = add i64 %v0_5186d, 32
  %v2_518a9 = inttoptr i64 %v1_518a9 to i64*
  %v3_518a9 = load i64, i64* %v2_518a9, align 8
  store i64 %v3_518a9, i64* @rax, align 8
  %v1_518b1 = add i64 %v3_518a9, 8
  %v2_518b1 = inttoptr i64 %v1_518b1 to i32*
  %v3_518b1 = load i32, i32* %v2_518b1, align 4
  %v4_518b1 = zext i32 %v3_518b1 to i64
  store i64 %v4_518b1, i64* @rcx, align 8
  %v5_518b4 = icmp eq i32 %v3_518b1, 0
  br i1 %v5_518b4, label %bb, label %dec_label_pc_518bc

bb:                                               ; preds = %dec_label_pc_51860
  %v2_518b6 = call i64 @function_51db7(i64 %v0_51868)
  store i64 %v2_518b6, i64* @rax, align 8
  %v0_518c0.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_518bc

dec_label_pc_518bc:                               ; preds = %bb, %dec_label_pc_51860
  %v0_518c0 = phi i64 [ %v0_518c0.pre, %bb ], [ %v0_5186d, %dec_label_pc_51860 ]
  %v1_518c0 = add i64 %v0_518c0, 48
  %v2_518c0 = inttoptr i64 %v1_518c0 to i64*
  %v3_518c0 = load i64, i64* %v2_518c0, align 8
  store i64 %v3_518c0, i64* @rax, align 8
  %v1_518c8 = add i64 %v3_518c0, 8
  %v2_518c8 = inttoptr i64 %v1_518c8 to i32*
  %v3_518c8 = load i32, i32* %v2_518c8, align 4
  %v4_518c8 = zext i32 %v3_518c8 to i64
  store i64 %v4_518c8, i64* @rdx, align 8
  %v5_518cb = icmp eq i32 %v3_518c8, 0
  br i1 %v5_518cb, label %bb251, label %dec_label_pc_518d3

bb251:                                            ; preds = %dec_label_pc_518bc
  %v2_518cd = call i64 @function_51db7(i64 %v0_51868)
  store i64 %v2_518cd, i64* @rax, align 8
  br label %dec_label_pc_518d3

dec_label_pc_518d3:                               ; preds = %bb251, %dec_label_pc_518bc
  store i64 334067, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_51cfd() local_unnamed_addr {
dec_label_pc_51cfd:
  store i64 335139, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_51d53() local_unnamed_addr {
dec_label_pc_51d53:
  %v0_51d53 = load i64, i64* @rbx, align 8
  %v1_51d53 = add i64 %v0_51d53, 80
  %v2_51d53 = inttoptr i64 %v1_51d53 to i64*
  %v3_51d53 = load i64, i64* %v2_51d53, align 8
  store i64 %v3_51d53, i64* @rdi, align 8
  %v0_51d63 = load i64, i64* @rax, align 8
  ret i64 %v0_51d63
}

define i64 @function_51d6b() local_unnamed_addr {
dec_label_pc_51d6b:
  %r12.global-to-local = alloca i64, align 8
  %tmp229 = call i64 @__decompiler_undefined_function_0()
  %v0_51da4 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_51da4, i64* @rdi, align 8
  ret i64 %tmp229
}

define i64 @function_51db7(i64 %arg1) local_unnamed_addr {
dec_label_pc_51db7:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_51dc0() local_unnamed_addr {
dec_label_pc_51dc0:
  store i64 3, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_51dcc() local_unnamed_addr {
dec_label_pc_51dcc:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_51dd8() local_unnamed_addr {
dec_label_pc_51dd8:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$518onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_51df0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rsi.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* %rsi.global-to-local, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_51dfa = load i64, i64* %rsi.global-to-local, align 8
  store i64 %v0_51dfa, i64* %rbp.global-to-local, align 8
  %v0_51dfd = load i64, i64* @rdi, align 8
  store i64 %v0_51dfd, i64* @rbx, align 8
  store i64 1, i64* %r12.global-to-local, align 8
  store i64 2, i64* @rax, align 8
  store i64 3, i64* %rsi.global-to-local, align 8
  store i64 %v0_51dfa, i64* @rdi, align 8
  %v1_51e3b = add i64 %v0_51dfd, 24
  %v2_51e3b = inttoptr i64 %v1_51e3b to i64*
  %v3_51e3b = load i64, i64* %v2_51e3b, align 8
  store i64 %v3_51e3b, i64* @rax, align 8
  %v1_51e3f = add i64 %v3_51e3b, 8
  %v2_51e3f = inttoptr i64 %v1_51e3f to i32*
  %v3_51e3f = load i32, i32* %v2_51e3f, align 4
  %v5_51e43 = icmp eq i32 %v3_51e3f, 0
  br i1 %v5_51e43, label %bb, label %dec_label_pc_51e4c

bb:                                               ; preds = %dec_label_pc_51df0
  %v2_51e46 = call i64 @function_52b70(i64 %v0_51dfa)
  store i64 %v2_51e46, i64* @rax, align 8
  %v0_51e50.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_51e5c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_51e4c

dec_label_pc_51e4c:                               ; preds = %bb, %dec_label_pc_51df0
  %v0_51e5c = phi i64 [ %v0_51e5c.pre, %bb ], [ %v0_51dfd, %dec_label_pc_51df0 ]
  %v0_51e50 = phi i64 [ %v0_51e50.pre, %bb ], [ 1, %dec_label_pc_51df0 ]
  %v0_51e4c = phi i64 [ %v2_51e46, %bb ], [ %v3_51e3b, %dec_label_pc_51df0 ]
  %v1_51e4c = add i64 %v0_51e4c, 16
  %v2_51e4c = inttoptr i64 %v1_51e4c to i64*
  %v3_51e4c = load i64, i64* %v2_51e4c, align 8
  store i64 %v3_51e4c, i64* @rdi, align 8
  store i64 %v0_51e50, i64* %rsi.global-to-local, align 8
  %v1_51e53 = inttoptr i64 %v3_51e4c to i64*
  %v2_51e53 = load i64, i64* %v1_51e53, align 8
  store i64 %v2_51e53, i64* @rax, align 8
  %v1_51e5c = add i64 %v0_51e5c, 32
  %v2_51e5c = inttoptr i64 %v1_51e5c to i64*
  %v3_51e5c = load i64, i64* %v2_51e5c, align 8
  store i64 %v3_51e5c, i64* @rdi, align 8
  store i64 %v2_51e53, i64* %rsi.global-to-local, align 8
  %v1_51e67 = inttoptr i64 %v3_51e5c to i64*
  %v2_51e67 = load i64, i64* %v1_51e67, align 8
  store i64 %v2_51e67, i64* @rax, align 8
  %v1_51e70 = inttoptr i64 %v2_51e67 to i64*
  %v2_51e70 = load i64, i64* %v1_51e70, align 8
  store i64 %v2_51e70, i64* @rdx, align 8
  store i64 %v2_51e67, i64* @rdi, align 8
  %v4_51e7c = trunc i64 %v2_51e67 to i8
  %v5_51e7c = icmp eq i8 %v4_51e7c, 0
  %v1_51e7e = icmp eq i1 %v5_51e7c, false
  br i1 %v1_51e7e, label %bb261, label %dec_label_pc_51e84

bb261:                                            ; preds = %dec_label_pc_51e4c
  %v4_51e7e = call i64 @function_52460(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_51e7e, i64* @rax, align 8
  %v0_51e84.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_51e84

dec_label_pc_51e84:                               ; preds = %bb261, %dec_label_pc_51e4c
  %v0_51e84 = phi i64 [ %v0_51e84.pre, %bb261 ], [ %v0_51e5c, %dec_label_pc_51e4c ]
  %v1_51e84 = add i64 %v0_51e84, 56
  %v2_51e84 = inttoptr i64 %v1_51e84 to i64*
  %v3_51e84 = load i64, i64* %v2_51e84, align 8
  store i64 %v3_51e84, i64* @rax, align 8
  %v1_51e8c = add i64 %v3_51e84, 8
  %v2_51e8c = inttoptr i64 %v1_51e8c to i32*
  %v3_51e8c = load i32, i32* %v2_51e8c, align 4
  %v4_51e8c = zext i32 %v3_51e8c to i64
  store i64 %v4_51e8c, i64* %rbp.global-to-local, align 8
  %v5_51e8f = icmp eq i32 %v3_51e8c, 0
  br i1 %v5_51e8f, label %bb262, label %dec_label_pc_51e97

bb262:                                            ; preds = %dec_label_pc_51e84
  %v2_51e91 = call i64 @function_52b70(i64 %v2_51e67)
  store i64 %v2_51e91, i64* @rax, align 8
  %v0_51e9b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_51e97

dec_label_pc_51e97:                               ; preds = %bb262, %dec_label_pc_51e84
  %v0_51e9b = phi i64 [ %v0_51e9b.pre, %bb262 ], [ %v0_51e84, %dec_label_pc_51e84 ]
  %v1_51e9b = add i64 %v0_51e9b, 72
  %v2_51e9b = inttoptr i64 %v1_51e9b to i64*
  %v3_51e9b = load i64, i64* %v2_51e9b, align 8
  store i64 %v3_51e9b, i64* @rax, align 8
  %v1_51e9f = add i64 %v0_51e9b, 64
  %v2_51e9f = inttoptr i64 %v1_51e9f to i64*
  %v3_51e9f = load i64, i64* %v2_51e9f, align 8
  store i64 %v3_51e9f, i64* %rbp.global-to-local, align 8
  %v1_51ea3 = add i64 %v3_51e9b, 8
  %v2_51ea3 = inttoptr i64 %v1_51ea3 to i32*
  %v3_51ea3 = load i32, i32* %v2_51ea3, align 4
  %v4_51ea3 = zext i32 %v3_51ea3 to i64
  store i64 %v4_51ea3, i64* @r11, align 8
  %v5_51ea7 = icmp eq i32 %v3_51ea3, 0
  br i1 %v5_51ea7, label %bb263, label %dec_label_pc_51eb0

bb263:                                            ; preds = %dec_label_pc_51e97
  %v2_51eaa = call i64 @function_52b70(i64 %v2_51e67)
  store i64 %v2_51eaa, i64* @rax, align 8
  %v0_51eb4.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_51eb0

dec_label_pc_51eb0:                               ; preds = %bb263, %dec_label_pc_51e97
  %v0_51eb4 = phi i64 [ %v0_51eb4.pre, %bb263 ], [ %v0_51e9b, %dec_label_pc_51e97 ]
  %v0_51eb0 = phi i64 [ %v2_51eaa, %bb263 ], [ %v3_51e9b, %dec_label_pc_51e97 ]
  %v1_51eb0 = add i64 %v0_51eb0, 16
  %v2_51eb0 = inttoptr i64 %v1_51eb0 to i64*
  %v3_51eb0 = load i64, i64* %v2_51eb0, align 8
  store i64 %v3_51eb0, i64* %r12.global-to-local, align 8
  %v1_51eb4 = add i64 %v0_51eb4, 80
  %v2_51eb4 = inttoptr i64 %v1_51eb4 to i64*
  %v3_51eb4 = load i64, i64* %v2_51eb4, align 8
  store i64 %v3_51eb4, i64* @rax, align 8
  %v1_51eb8 = add i64 %v3_51eb4, 8
  %v2_51eb8 = inttoptr i64 %v1_51eb8 to i32*
  %v3_51eb8 = load i32, i32* %v2_51eb8, align 4
  %v5_51ebc = icmp eq i32 %v3_51eb8, 0
  br i1 %v5_51ebc, label %bb264, label %dec_label_pc_51ec5

bb264:                                            ; preds = %dec_label_pc_51eb0
  %v2_51ebf = call i64 @function_52b70(i64 %v2_51e67)
  store i64 %v2_51ebf, i64* @rax, align 8
  %v0_51ec5.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_51ec5

dec_label_pc_51ec5:                               ; preds = %bb264, %dec_label_pc_51eb0
  %v0_51ec5 = phi i64 [ %v0_51ec5.pre, %bb264 ], [ %v0_51eb4, %dec_label_pc_51eb0 ]
  %v1_51ec5 = add i64 %v0_51ec5, 88
  %v2_51ec5 = inttoptr i64 %v1_51ec5 to i64*
  %v3_51ec5 = load i64, i64* %v2_51ec5, align 8
  store i64 %v3_51ec5, i64* @rdi, align 8
  store i64 %v0_51dfa, i64* %rsi.global-to-local, align 8
  %v1_51ed2 = inttoptr i64 %v3_51ec5 to i64*
  %v2_51ed2 = load i64, i64* %v1_51ed2, align 8
  store i64 %v2_51ed2, i64* @rax, align 8
  %v0_51edb = load i64, i64* %rbp.global-to-local, align 8
  %v1_51edb = inttoptr i64 %v0_51edb to i64*
  %v2_51edb = load i64, i64* %v1_51edb, align 8
  store i64 %v2_51edb, i64* @rcx, align 8
  store i64 335606, i64* %rsi.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rax, align 8
  store i64 1, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_52040() local_unnamed_addr {
dec_label_pc_52040:
  %v0_52040 = load i64, i64* @rbx, align 8
  %v1_52040 = add i64 %v0_52040, 32
  %v2_52040 = inttoptr i64 %v1_52040 to i64*
  %v3_52040 = load i64, i64* %v2_52040, align 8
  store i64 %v3_52040, i64* @rdi, align 8
  %v1_52047 = inttoptr i64 %v3_52040 to i64*
  %v2_52047 = load i64, i64* %v1_52047, align 8
  store i64 %v2_52047, i64* @rax, align 8
  %v1_52050 = inttoptr i64 %v2_52047 to i64*
  %v2_52050 = load i64, i64* %v1_52050, align 8
  store i64 %v2_52050, i64* @rdx, align 8
  store i64 %v2_52047, i64* @rdi, align 8
  %v4_5205c = trunc i64 %v2_52047 to i8
  %v5_5205c = icmp eq i8 %v4_5205c, 0
  %v1_5205e = icmp eq i1 %v5_5205c, false
  br i1 %v1_5205e, label %bb, label %dec_label_pc_52064

bb:                                               ; preds = %dec_label_pc_52040
  %v4_5205e = call i64 @function_52528(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_5205e, i64* @rax, align 8
  %v0_52064.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52064

dec_label_pc_52064:                               ; preds = %bb, %dec_label_pc_52040
  %v0_52064 = phi i64 [ %v0_52064.pre, %bb ], [ %v0_52040, %dec_label_pc_52040 ]
  %v1_52064 = add i64 %v0_52064, 96
  %v2_52064 = inttoptr i64 %v1_52064 to i64*
  %v3_52064 = load i64, i64* %v2_52064, align 8
  store i64 %v3_52064, i64* @rdi, align 8
  %v1_5206b = inttoptr i64 %v3_52064 to i64*
  %v2_5206b = load i64, i64* %v1_5206b, align 8
  store i64 %v2_5206b, i64* @rax, align 8
  %v1_52074 = inttoptr i64 %v2_5206b to i64*
  %v2_52074 = load i64, i64* %v1_52074, align 8
  store i64 %v2_52074, i64* @rdx, align 8
  store i64 %v2_5206b, i64* @rdi, align 8
  %v4_52080 = trunc i64 %v2_5206b to i8
  %v5_52080 = icmp eq i8 %v4_52080, 0
  br i1 %v5_52080, label %bb9, label %dec_label_pc_52088

bb9:                                              ; preds = %dec_label_pc_52064
  %v2_52082 = call i64 @function_52510(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_52082, i64* @rax, align 8
  %v0_52088.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52088

dec_label_pc_52088:                               ; preds = %bb9, %dec_label_pc_52064
  %v0_5208f = phi i64 [ %v0_52088.pre, %bb9 ], [ %v0_52064, %dec_label_pc_52064 ]
  %v1_52088 = add i64 %v0_5208f, 120
  %v2_52088 = inttoptr i64 %v1_52088 to i64*
  %v3_52088 = load i64, i64* %v2_52088, align 8
  store i64 %v3_52088, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_52141(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_52141:
  %r8.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v0_52141 = load i64, i64* @rbx, align 8
  %v1_52141 = add i64 %v0_52141, 104
  %v2_52141 = inttoptr i64 %v1_52141 to i64*
  %v3_52141 = load i64, i64* %v2_52141, align 8
  store i64 %v3_52141, i64* @rdi, align 8
  %v1_52148 = inttoptr i64 %v3_52141 to i64*
  %v2_52148 = load i64, i64* %v1_52148, align 8
  store i64 %v2_52148, i64* @rax, align 8
  %v1_52151 = inttoptr i64 %v2_52148 to i64*
  %v2_52151 = load i64, i64* %v1_52151, align 8
  store i64 %v2_52151, i64* @rdx, align 8
  store i64 %v2_52148, i64* @rdi, align 8
  %v4_5215d = trunc i64 %v2_52148 to i8
  %v5_5215d = icmp eq i8 %v4_5215d, 0
  br i1 %v5_5215d, label %bb, label %dec_label_pc_52165

bb:                                               ; preds = %dec_label_pc_52141
  %v1_5215f = call i64 @function_52040()
  store i64 %v1_5215f, i64* @rax, align 8
  %v0_52165.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52165

dec_label_pc_52165:                               ; preds = %bb, %dec_label_pc_52141
  %v0_52165 = phi i64 [ %v0_52165.pre, %bb ], [ %v0_52141, %dec_label_pc_52141 ]
  %v1_52165 = add i64 %v0_52165, 136
  %v2_52165 = inttoptr i64 %v1_52165 to i64*
  %v3_52165 = load i64, i64* %v2_52165, align 8
  store i64 %v3_52165, i64* @rax, align 8
  %v1_5216c = add i64 %v3_52165, 8
  %v2_5216c = inttoptr i64 %v1_5216c to i32*
  %v3_5216c = load i32, i32* %v2_5216c, align 4
  %v4_5216c = zext i32 %v3_5216c to i64
  store i64 %v4_5216c, i64* @rdx, align 8
  %v5_5216f = icmp eq i32 %v3_5216c, 0
  br i1 %v5_5216f, label %bb281, label %dec_label_pc_52177

bb281:                                            ; preds = %dec_label_pc_52165
  %v2_52171 = call i64 @function_52b70(i64 %v2_52148)
  store i64 %v2_52171, i64* @rax, align 8
  %v0_5218f.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52177

dec_label_pc_52177:                               ; preds = %bb281, %dec_label_pc_52165
  %v0_5218f = phi i64 [ %v0_5218f.pre, %bb281 ], [ %v0_52165, %dec_label_pc_52165 ]
  %v0_52177 = phi i64 [ %v2_52171, %bb281 ], [ %v3_52165, %dec_label_pc_52165 ]
  %v1_52177 = add i64 %v0_52177, 16
  %v2_52177 = inttoptr i64 %v1_52177 to i64*
  %v3_52177 = load i64, i64* %v2_52177, align 8
  store i64 %v3_52177, i64* %rbp.global-to-local, align 8
  %v2_5217b = load i64, i64* @r13, align 8
  store i64 %v2_5217b, i64* @rax, align 8
  store i64 %v2_5217b, i64* @rdi, align 8
  %v1_5218f = add i64 %v0_5218f, 144
  %v2_5218f = inttoptr i64 %v1_5218f to i64*
  %v3_5218f = load i64, i64* %v2_5218f, align 8
  store i64 %v3_5218f, i64* @rdx, align 8
  %v1_52196 = add i64 %v3_5218f, 8
  %v2_52196 = inttoptr i64 %v1_52196 to i32*
  %v3_52196 = load i32, i32* %v2_52196, align 4
  %v5_5219a = icmp eq i32 %v3_52196, 0
  br i1 %v5_5219a, label %bb282, label %dec_label_pc_521a3

bb282:                                            ; preds = %dec_label_pc_52177
  %v2_5219d = call i64 @function_52b70(i64 %v2_5217b)
  store i64 %v2_5219d, i64* @rax, align 8
  %v0_521a3.pre = load i64, i64* %rbp.global-to-local, align 8
  %v2_521b7.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_521a3

dec_label_pc_521a3:                               ; preds = %bb282, %dec_label_pc_52177
  %v2_521b7 = phi i64 [ %v2_521b7.pre, %bb282 ], [ %v2_5217b, %dec_label_pc_52177 ]
  %v0_521c3 = phi i64 [ %v2_5219d, %bb282 ], [ %v2_5217b, %dec_label_pc_52177 ]
  %v0_521ae = phi i64 [ %v0_521a3.pre, %bb282 ], [ %v3_52177, %dec_label_pc_52177 ]
  %v1_521a3 = inttoptr i64 %v0_521ae to i64*
  %v2_521a3 = load i64, i64* %v1_521a3, align 8
  store i64 %v2_521a3, i64* @rcx, align 8
  store i64 %v2_521b7, i64* @rdx, align 8
  store i64 %v0_521c3, i64* @rdi, align 8
  %v4_521c3 = trunc i64 %v0_521c3 to i8
  %v5_521c3 = icmp eq i8 %v4_521c3, 0
  %v1_521c5 = icmp eq i1 %v5_521c3, false
  br i1 %v1_521c5, label %bb283, label %dec_label_pc_521cb

bb283:                                            ; preds = %dec_label_pc_521a3
  %v4_521c5 = call i64 @function_52675(i64 %v0_521c3, i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_521c5, i64* @rax, align 8
  br label %dec_label_pc_521cb

dec_label_pc_521cb:                               ; preds = %bb283, %dec_label_pc_521a3
  %v0_521cb = load i64, i64* @rbx, align 8
  %v1_521cb = add i64 %v0_521cb, 136
  %v2_521cb = inttoptr i64 %v1_521cb to i64*
  %v3_521cb = load i64, i64* %v2_521cb, align 8
  store i64 %v3_521cb, i64* @rax, align 8
  %v1_521d2 = add i64 %v3_521cb, 8
  %v2_521d2 = inttoptr i64 %v1_521d2 to i32*
  %v3_521d2 = load i32, i32* %v2_521d2, align 4
  %v5_521d6 = icmp eq i32 %v3_521d2, 0
  br i1 %v5_521d6, label %bb284, label %dec_label_pc_521df

bb284:                                            ; preds = %dec_label_pc_521cb
  %v2_521d9 = call i64 @function_52b70(i64 %v0_521c3)
  store i64 %v2_521d9, i64* @rax, align 8
  %v0_521f7.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_521df

dec_label_pc_521df:                               ; preds = %bb284, %dec_label_pc_521cb
  %v0_521f7 = phi i64 [ %v0_521f7.pre, %bb284 ], [ %v0_521cb, %dec_label_pc_521cb ]
  %v0_521df = phi i64 [ %v2_521d9, %bb284 ], [ %v3_521cb, %dec_label_pc_521cb ]
  %v1_521df = add i64 %v0_521df, 16
  %v2_521df = inttoptr i64 %v1_521df to i64*
  %v3_521df = load i64, i64* %v2_521df, align 8
  store i64 %v3_521df, i64* %rbp.global-to-local, align 8
  %v2_521e3 = load i64, i64* @r13, align 8
  store i64 %v2_521e3, i64* @rax, align 8
  store i64 %v2_521e3, i64* @rdi, align 8
  %v1_521f7 = add i64 %v0_521f7, 160
  %v2_521f7 = inttoptr i64 %v1_521f7 to i64*
  %v3_521f7 = load i64, i64* %v2_521f7, align 8
  store i64 %v3_521f7, i64* @rdx, align 8
  %v1_521fe = add i64 %v3_521f7, 8
  %v2_521fe = inttoptr i64 %v1_521fe to i32*
  %v3_521fe = load i32, i32* %v2_521fe, align 4
  %v5_52202 = icmp eq i32 %v3_521fe, 0
  br i1 %v5_52202, label %bb285, label %dec_label_pc_5220b

bb285:                                            ; preds = %dec_label_pc_521df
  %v2_52205 = call i64 @function_52b70(i64 %v2_521e3)
  store i64 %v2_52205, i64* @rax, align 8
  %v0_5220b.pre = load i64, i64* %rbp.global-to-local, align 8
  %v2_5221f.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_5220b

dec_label_pc_5220b:                               ; preds = %bb285, %dec_label_pc_521df
  %v2_5221f = phi i64 [ %v2_5221f.pre, %bb285 ], [ %v2_521e3, %dec_label_pc_521df ]
  %v0_52213 = phi i64 [ %v2_52205, %bb285 ], [ %v2_521e3, %dec_label_pc_521df ]
  %v0_52216 = phi i64 [ %v0_5220b.pre, %bb285 ], [ %v3_521df, %dec_label_pc_521df ]
  %v1_5220b = inttoptr i64 %v0_52216 to i64*
  %v2_5220b = load i64, i64* %v1_5220b, align 8
  store i64 %v2_5220b, i64* @rcx, align 8
  store i64 %v2_5221f, i64* @rdx, align 8
  store i64 %v0_52213, i64* @rdi, align 8
  %v4_5222b = trunc i64 %v0_52213 to i8
  %v5_5222b = icmp eq i8 %v4_5222b, 0
  %v1_5222d = icmp eq i1 %v5_5222b, false
  br i1 %v1_5222d, label %bb286, label %dec_label_pc_52233

bb286:                                            ; preds = %dec_label_pc_5220b
  %v6_5222d = load i64, i64* %r8.global-to-local, align 8
  %v7_5222d = load i64, i64* %r9.global-to-local, align 8
  %v10_5222d = call i64 @function_5277b(i64 %v0_52213, i64 %v0_52213, i64 %v2_5221f, i64 %v2_5220b, i64 %v6_5222d, i64 %v7_5222d, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v10_5222d, i64* @rax, align 8
  br label %dec_label_pc_52233

dec_label_pc_52233:                               ; preds = %bb286, %dec_label_pc_5220b
  %v0_52233 = load i64, i64* @rbx, align 8
  %v1_52233 = add i64 %v0_52233, 136
  %v2_52233 = inttoptr i64 %v1_52233 to i64*
  %v3_52233 = load i64, i64* %v2_52233, align 8
  store i64 %v3_52233, i64* @rax, align 8
  %v1_5223a = add i64 %v3_52233, 8
  %v2_5223a = inttoptr i64 %v1_5223a to i32*
  %v3_5223a = load i32, i32* %v2_5223a, align 4
  %v5_5223d = icmp eq i32 %v3_5223a, 0
  br i1 %v5_5223d, label %bb287, label %dec_label_pc_52245

bb287:                                            ; preds = %dec_label_pc_52233
  %v2_5223f = call i64 @function_52b70(i64 %v0_52213)
  store i64 %v2_5223f, i64* @rax, align 8
  %v0_5225d.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52245

dec_label_pc_52245:                               ; preds = %bb287, %dec_label_pc_52233
  %v0_5225d = phi i64 [ %v0_5225d.pre, %bb287 ], [ %v0_52233, %dec_label_pc_52233 ]
  %v0_52245 = phi i64 [ %v2_5223f, %bb287 ], [ %v3_52233, %dec_label_pc_52233 ]
  %v1_52245 = add i64 %v0_52245, 16
  %v2_52245 = inttoptr i64 %v1_52245 to i64*
  %v3_52245 = load i64, i64* %v2_52245, align 8
  store i64 %v3_52245, i64* %rbp.global-to-local, align 8
  %v2_52249 = load i64, i64* @r13, align 8
  store i64 %v2_52249, i64* @rax, align 8
  store i64 %v2_52249, i64* @rdi, align 8
  %v1_5225d = add i64 %v0_5225d, 72
  %v2_5225d = inttoptr i64 %v1_5225d to i64*
  %v3_5225d = load i64, i64* %v2_5225d, align 8
  store i64 %v3_5225d, i64* @rdx, align 8
  %v1_52261 = add i64 %v3_5225d, 8
  %v2_52261 = inttoptr i64 %v1_52261 to i32*
  %v3_52261 = load i32, i32* %v2_52261, align 4
  %v4_52261 = zext i32 %v3_52261 to i64
  store i64 %v4_52261, i64* @rcx, align 8
  %v5_52264 = icmp eq i32 %v3_52261, 0
  br i1 %v5_52264, label %bb288, label %dec_label_pc_5226c

bb288:                                            ; preds = %dec_label_pc_52245
  %v2_52266 = call i64 @function_52b70(i64 %v2_52249)
  store i64 %v2_52266, i64* @rax, align 8
  %v0_5226c.pre = load i64, i64* %rbp.global-to-local, align 8
  %v2_52280.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_5226c

dec_label_pc_5226c:                               ; preds = %bb288, %dec_label_pc_52245
  %v2_52280 = phi i64 [ %v2_52280.pre, %bb288 ], [ %v2_52249, %dec_label_pc_52245 ]
  %v0_5228c = phi i64 [ %v2_52266, %bb288 ], [ %v2_52249, %dec_label_pc_52245 ]
  %v0_52277 = phi i64 [ %v0_5226c.pre, %bb288 ], [ %v3_52245, %dec_label_pc_52245 ]
  %v1_5226c = inttoptr i64 %v0_52277 to i64*
  %v2_5226c = load i64, i64* %v1_5226c, align 8
  store i64 %v2_5226c, i64* @rcx, align 8
  store i64 %v2_52280, i64* @rdx, align 8
  store i64 %v0_5228c, i64* @rdi, align 8
  %v4_5228c = trunc i64 %v0_5228c to i8
  %v5_5228c = icmp eq i8 %v4_5228c, 0
  br i1 %v5_5228c, label %bb289, label %dec_label_pc_52294

bb289:                                            ; preds = %dec_label_pc_5226c
  %v2_5228e = call i64 @function_52554(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_5228e, i64* @rax, align 8
  %v2_52294.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_52294

dec_label_pc_52294:                               ; preds = %bb289, %dec_label_pc_5226c
  %v2_52294 = phi i64 [ %v2_52294.pre, %bb289 ], [ %v2_52280, %dec_label_pc_5226c ]
  store i64 %v2_52294, i64* @rax, align 8
  store i64 %v2_52294, i64* @rdi, align 8
  store i64 %v2_52294, i64* @rdx, align 8
  store i64 %v2_52294, i64* @rdi, align 8
  store i64 %v2_52294, i64* @rdx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v4_522bb = trunc i64 %v2_52294 to i8
  %v5_522bb = icmp eq i8 %v4_522bb, 0
  %v1_522bd = icmp eq i1 %v5_522bb, false
  br i1 %v1_522bd, label %bb290, label %dec_label_pc_522c3

bb290:                                            ; preds = %dec_label_pc_52294
  %v8_522bd = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_522bd, i64* @rax, align 8
  %v2_522c3.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_522c3

dec_label_pc_522c3:                               ; preds = %bb290, %dec_label_pc_52294
  %v2_522c3 = phi i64 [ %v2_522c3.pre, %bb290 ], [ %v2_52294, %dec_label_pc_52294 ]
  store i64 %v2_522c3, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  %v3_522dd = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 0)
  store i64 %v3_522dd, i64* @rax, align 8
  %v0_522e2 = load i64, i64* inttoptr (i64 336617 to i64*), align 8
  store i64 %v3_522dd, i64* %rbp.global-to-local, align 8
  %v2_52386.pre = load i64, i64* @r13, align 8
  store i64 %v2_52386.pre, i64* @rax, align 8
  store i64 %v2_52386.pre, i64* @rdi, align 8
  %v1_52393291 = inttoptr i64 %v0_522e2 to i64*
  %v2_52393292 = load i64, i64* %v1_52393291, align 8
  store i64 %v2_52393292, i64* @rdx, align 8
  store i64 %v0_522e2, i64* @rdi, align 8
  %v4_523a2 = trunc i64 %v2_52386.pre to i8
  %v5_523a2 = icmp eq i8 %v4_523a2, 0
  %v1_523a4 = icmp eq i1 %v5_523a2, false
  br i1 %v1_523a4, label %dec_label_pc_522f8.lr.ph, label %dec_label_pc_523aa

dec_label_pc_522f8.lr.ph:                         ; preds = %dec_label_pc_522c3
  %v1_5235d = inttoptr i64 %v3_522dd to i64*
  %v0_52324.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_522f8

dec_label_pc_522f8:                               ; preds = %dec_label_pc_522f8, %dec_label_pc_522f8.lr.ph
  %v1_52393294 = phi i64* [ %v1_52393291, %dec_label_pc_522f8.lr.ph ], [ %v1_52393, %dec_label_pc_522f8 ]
  %v0_52370293 = phi i64 [ %v0_522e2, %dec_label_pc_522f8.lr.ph ], [ %v2_52370, %dec_label_pc_522f8 ]
  %v2_522f8 = load i64, i64* %v1_52393294, align 8
  store i64 %v2_522f8, i64* @rax, align 8
  store i64 %v0_52370293, i64* @rdi, align 8
  %v1_5230b = inttoptr i64 %v2_522f8 to i64*
  %v2_5230b = load i64, i64* %v1_5230b, align 8
  store i64 %v2_5230b, i64* @rdx, align 8
  store i64 %v2_522f8, i64* @rdi, align 8
  %v2_52321 = load i64, i64* %v1_52393294, align 8
  store i64 %v2_52321, i64* @rax, align 8
  %v1_52324 = add i64 %v0_52324.pre, 40
  %v2_52324 = inttoptr i64 %v1_52324 to i64*
  %v3_52324 = load i64, i64* %v2_52324, align 8
  store i64 %v2_52386.pre, i64* @rdx, align 8
  store i64 %v2_52386.pre, i64* @rdi, align 8
  %v1_52348 = inttoptr i64 %v3_52324 to i64*
  %v2_52348 = load i64, i64* %v1_52348, align 8
  store i64 %v2_52348, i64* %r8.global-to-local, align 8
  store i64 %v2_52321, i64* @rdx, align 8
  store i64 %v3_52324, i64* @rdi, align 8
  %v2_5235d = load i64, i64* %v1_5235d, align 8
  store i64 %v2_5235d, i64* @rcx, align 8
  store i64 %v2_52321, i64* @rdx, align 8
  store i64 %v3_522dd, i64* @rdi, align 8
  %v2_52370 = load i64, i64* %v1_52393294, align 8
  store i64 %v2_52370, i64* @rax, align 8
  store i64 %v0_52370293, i64* @rdi, align 8
  store i64 %v2_52386.pre, i64* @rax, align 8
  store i64 %v2_52386.pre, i64* @rdi, align 8
  %v1_52393 = inttoptr i64 %v2_52370 to i64*
  %v2_52393 = load i64, i64* %v1_52393, align 8
  store i64 %v2_52393, i64* @rdx, align 8
  store i64 %v2_52370, i64* @rdi, align 8
  br label %dec_label_pc_522f8

dec_label_pc_523aa:                               ; preds = %dec_label_pc_522c3
  %v0_523aa.pre = load i64, i64* @rbx, align 8
  %v1_523aa = add i64 %v0_523aa.pre, 232
  %v2_523aa = inttoptr i64 %v1_523aa to i64*
  %v3_523aa = load i64, i64* %v2_523aa, align 8
  store i64 %v3_523aa, i64* @rbx, align 8
  %v1_523b1 = call i64 @function_52659(i64 ptrtoint (i32* @0 to i64))
  store i64 %v1_523b1, i64* @rax, align 8
  ret i64 %v1_523b1
}

define i64 @function_523c0(i64 %arg1) local_unnamed_addr {
dec_label_pc_523c0:
  %v0_523c0 = load i64, i64* @rbx, align 8
  %v1_523c0 = add i64 %v0_523c0, 104
  %v2_523c0 = inttoptr i64 %v1_523c0 to i64*
  %v3_523c0 = load i64, i64* %v2_523c0, align 8
  store i64 %v3_523c0, i64* @rdi, align 8
  store i64 %arg1, i64* @r14, align 8
  %v1_523c8 = inttoptr i64 %v3_523c0 to i64*
  %v2_523c8 = load i64, i64* %v1_523c8, align 8
  store i64 %v2_523c8, i64* @rax, align 8
  %v1_523d4 = inttoptr i64 %v2_523c8 to i64*
  %v2_523d4 = load i64, i64* %v1_523d4, align 8
  store i64 %v2_523d4, i64* @rdx, align 8
  store i64 %v2_523c8, i64* @rdi, align 8
  %v4_523e0 = trunc i64 %v2_523c8 to i8
  %v5_523e0 = icmp eq i8 %v4_523e0, 0
  %v1_523e2 = icmp eq i1 %v5_523e0, false
  br i1 %v1_523e2, label %bb, label %dec_label_pc_523e8

bb:                                               ; preds = %dec_label_pc_523c0
  %v3_523e2 = call i64 @function_524f8(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_523e2, i64* @rax, align 8
  %v0_523e8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_523e8

dec_label_pc_523e8:                               ; preds = %bb, %dec_label_pc_523c0
  %v0_523e8 = phi i64 [ %v0_523e8.pre, %bb ], [ %v0_523c0, %dec_label_pc_523c0 ]
  %v1_523e8 = add i64 %v0_523e8, 240
  %v2_523e8 = inttoptr i64 %v1_523e8 to i64*
  %v3_523e8 = load i64, i64* %v2_523e8, align 8
  store i64 %v3_523e8, i64* @rax, align 8
  %v1_523ef = add i64 %v3_523e8, 8
  %v2_523ef = inttoptr i64 %v1_523ef to i32*
  %v3_523ef = load i32, i32* %v2_523ef, align 4
  %v4_523ef = zext i32 %v3_523ef to i64
  store i64 %v4_523ef, i64* @rdx, align 8
  %v5_523f2 = icmp eq i32 %v3_523ef, 0
  br i1 %v5_523f2, label %bb243, label %dec_label_pc_523fa

bb243:                                            ; preds = %dec_label_pc_523e8
  %v2_523f4 = call i64 @function_52b70(i64 %v2_523c8)
  store i64 %v2_523f4, i64* @rax, align 8
  br label %dec_label_pc_523fa

dec_label_pc_523fa:                               ; preds = %bb243, %dec_label_pc_523e8
  %v0_523fa = phi i64 [ %v2_523f4, %bb243 ], [ %v3_523e8, %dec_label_pc_523e8 ]
  %v1_523fa = add i64 %v0_523fa, 16
  %v2_523fa = inttoptr i64 %v1_523fa to i64*
  %v3_523fa = load i64, i64* %v2_523fa, align 8
  store i64 %v3_523fa, i64* @rdi, align 8
  %v1_52401 = inttoptr i64 %v3_523fa to i64*
  %v2_52401 = load i64, i64* %v1_52401, align 8
  store i64 %v2_52401, i64* @rax, align 8
  %v1_5240a = inttoptr i64 %v2_52401 to i64*
  %v2_5240a = load i64, i64* %v1_5240a, align 8
  store i64 %v2_5240a, i64* @rdx, align 8
  store i64 %v2_52401, i64* @rdi, align 8
  %v4_52416 = trunc i64 %v2_52401 to i8
  %v5_52416 = icmp eq i8 %v4_52416, 0
  %v1_52418 = icmp eq i1 %v5_52416, false
  br i1 %v1_52418, label %bb244, label %dec_label_pc_5241e

bb244:                                            ; preds = %dec_label_pc_523fa
  %v5_52418 = call i64 @function_524c0(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v5_52418, i64* @rax, align 8
  br label %dec_label_pc_5241e

dec_label_pc_5241e:                               ; preds = %bb244, %dec_label_pc_523fa
  %v0_5241e = load i64, i64* @rbx, align 8
  %v1_5241e = add i64 %v0_5241e, 256
  %v2_5241e = inttoptr i64 %v1_5241e to i64*
  %v3_5241e = load i64, i64* %v2_5241e, align 8
  store i64 %v3_5241e, i64* @rdi, align 8
  %v1_52429 = inttoptr i64 %v3_5241e to i64*
  %v2_52429 = load i64, i64* %v1_52429, align 8
  store i64 %v2_52429, i64* @rdi, align 8
  store i64 %v2_52429, i64* @rdx, align 8
  %v4_52445 = trunc i64 %v2_52429 to i8
  %v5_52445 = icmp eq i8 %v4_52445, 0
  %v1_52447 = icmp eq i1 %v5_52445, false
  br i1 %v1_52447, label %bb245, label %dec_label_pc_52449

bb245:                                            ; preds = %dec_label_pc_5241e
  %v8_52447 = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_52447, i64* @rax, align 8
  %v0_52449.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52449

dec_label_pc_52449:                               ; preds = %bb245, %dec_label_pc_5241e
  %v0_52449 = phi i64 [ %v0_52449.pre, %bb245 ], [ %v0_5241e, %dec_label_pc_5241e ]
  %v1_52449 = add i64 %v0_52449, ptrtoint (i64* @global_var_108.7479 to i64)
  %v2_52449 = inttoptr i64 %v1_52449 to i64*
  %v3_52449 = load i64, i64* %v2_52449, align 8
  store i64 %v3_52449, i64* @rdi, align 8
  %v6_5245c = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_5245c, i64* @rax, align 8
  ret i64 %v6_5245c
}

define i64 @function_52460(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_52460:
  store i64 337017, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_524a7(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_524a7:
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg4, i64* @r13, align 8
  %v0_524b5 = load i64, i64* @rax, align 8
  ret i64 %v0_524b5
}

define i64 @function_524c0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_524c0:
  %v0_524c0 = load i64, i64* @rbx, align 8
  %v1_524c0 = add i64 %v0_524c0, 248
  %v2_524c0 = inttoptr i64 %v1_524c0 to i64*
  %v3_524c0 = load i64, i64* %v2_524c0, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %v3_524c0, i64* @rdi, align 8
  %v0_524dd = load i64, i64* @rax, align 8
  ret i64 %v0_524dd
}

define i64 @function_524f8(i64 %arg1) local_unnamed_addr {
dec_label_pc_524f8:
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_52510(i64 %arg1) local_unnamed_addr {
dec_label_pc_52510:
  store i64 %arg1, i64* @rax, align 8
  ret i64 %arg1
}

define i64 @function_52528(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_52528:
  %v0_52528 = load i64, i64* @rbx, align 8
  %v1_52528 = add i64 %v0_52528, 40
  %v2_52528 = inttoptr i64 %v1_52528 to i64*
  %v3_52528 = load i64, i64* %v2_52528, align 8
  store i64 %v3_52528, i64* @rdi, align 8
  %v0_5253d = load i64, i64* @rax, align 8
  ret i64 %v0_5253d
}

define i64 @function_52554(i64 %arg1) local_unnamed_addr {
dec_label_pc_52554:
  %v0_52554 = load i64, i64* @rbx, align 8
  %v1_52554 = add i64 %v0_52554, 40
  %v2_52554 = inttoptr i64 %v1_52554 to i64*
  %v3_52554 = load i64, i64* %v2_52554, align 8
  %v2_52558 = load i64, i64* @r13, align 8
  store i64 %v2_52558, i64* @rax, align 8
  store i64 %v2_52558, i64* @rdi, align 8
  %v1_5256c = inttoptr i64 %v3_52554 to i64*
  %v2_5256c = load i64, i64* %v1_5256c, align 8
  store i64 %v2_5256c, i64* @rcx, align 8
  store i64 %v2_52558, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v3_52587 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 0)
  store i64 %v3_52587, i64* @rax, align 8
  %v0_5258c = load i64, i64* inttoptr (i64 337299 to i64*), align 8
  %v2_5262e.pre = load i64, i64* @r13, align 8
  store i64 %v2_5262e.pre, i64* @rax, align 8
  store i64 %v2_5262e.pre, i64* @rdi, align 8
  %v1_5263b9 = inttoptr i64 %v0_5258c to i64*
  %v2_5263b10 = load i64, i64* %v1_5263b9, align 8
  store i64 %v2_5263b10, i64* @rdx, align 8
  store i64 %v0_5258c, i64* @rdi, align 8
  %v4_5264a = trunc i64 %v2_5262e.pre to i8
  %v5_5264a = icmp eq i8 %v4_5264a, 0
  %v1_5264c = icmp eq i1 %v5_5264a, false
  br i1 %v1_5264c, label %dec_label_pc_525a0.lr.ph, label %dec_label_pc_52652

dec_label_pc_525a0.lr.ph:                         ; preds = %dec_label_pc_52554
  %v1_52605 = inttoptr i64 %v3_52587 to i64*
  %v0_525cc.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_525a0

dec_label_pc_525a0:                               ; preds = %dec_label_pc_525a0, %dec_label_pc_525a0.lr.ph
  %v1_5263b12 = phi i64* [ %v1_5263b9, %dec_label_pc_525a0.lr.ph ], [ %v1_5263b, %dec_label_pc_525a0 ]
  %v0_5261811 = phi i64 [ %v0_5258c, %dec_label_pc_525a0.lr.ph ], [ %v2_52618, %dec_label_pc_525a0 ]
  %v2_525a0 = load i64, i64* %v1_5263b12, align 8
  store i64 %v2_525a0, i64* @rax, align 8
  store i64 %v0_5261811, i64* @rdi, align 8
  %v1_525b3 = inttoptr i64 %v2_525a0 to i64*
  %v2_525b3 = load i64, i64* %v1_525b3, align 8
  store i64 %v2_525b3, i64* @rdx, align 8
  store i64 %v2_525a0, i64* @rdi, align 8
  %v2_525c9 = load i64, i64* %v1_5263b12, align 8
  store i64 %v2_525c9, i64* @rax, align 8
  %v1_525cc = add i64 %v0_525cc.pre, 40
  %v2_525cc = inttoptr i64 %v1_525cc to i64*
  %v3_525cc = load i64, i64* %v2_525cc, align 8
  store i64 %v2_5262e.pre, i64* @rdx, align 8
  store i64 %v2_5262e.pre, i64* @rdi, align 8
  store i64 %v2_525c9, i64* @rdx, align 8
  store i64 %v3_525cc, i64* @rdi, align 8
  %v2_52605 = load i64, i64* %v1_52605, align 8
  store i64 %v2_52605, i64* @rcx, align 8
  store i64 %v2_525c9, i64* @rdx, align 8
  store i64 %v3_52587, i64* @rdi, align 8
  %v2_52618 = load i64, i64* %v1_5263b12, align 8
  store i64 %v2_52618, i64* @rax, align 8
  store i64 %v0_5261811, i64* @rdi, align 8
  store i64 %v2_5262e.pre, i64* @rax, align 8
  store i64 %v2_5262e.pre, i64* @rdi, align 8
  %v1_5263b = inttoptr i64 %v2_52618 to i64*
  %v2_5263b = load i64, i64* %v1_5263b, align 8
  store i64 %v2_5263b, i64* @rdx, align 8
  store i64 %v2_52618, i64* @rdi, align 8
  br label %dec_label_pc_525a0

dec_label_pc_52652:                               ; preds = %dec_label_pc_52554
  %v0_52652.pre = load i64, i64* @rbx, align 8
  %v1_52652 = add i64 %v0_52652.pre, 224
  %v2_52652 = inttoptr i64 %v1_52652 to i64*
  %v3_52652 = load i64, i64* %v2_52652, align 8
  store i64 %v3_52652, i64* @rbx, align 8
  ret i64 %v2_5262e.pre
}

define i64 @function_52659(i64 %arg1) local_unnamed_addr {
dec_label_pc_52659:
  %v0_52665 = load i64, i64* @rbx, align 8
  store i64 %v0_52665, i64* @rdi, align 8
  %v6_52670 = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_52670, i64* @rax, align 8
  ret i64 %v6_52670
}

define i64 @function_52675(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_52675:
  store i64 %arg1, i64* @rdi, align 8
  %v2_52675 = load i64, i64* @r13, align 8
  store i64 %v2_52675, i64* @rax, align 8
  store i64 %v2_52675, i64* @rdi, align 8
  store i64 %v2_52675, i64* @rdx, align 8
  store i64 %v2_52675, i64* @rdi, align 8
  store i64 %v2_52675, i64* @rdx, align 8
  store i64 %arg2, i64* @rax, align 8
  %v4_5269c = trunc i64 %v2_52675 to i8
  %v5_5269c = icmp eq i8 %v4_5269c, 0
  %v1_5269e = icmp eq i1 %v5_5269c, false
  br i1 %v1_5269e, label %bb, label %dec_label_pc_526a4

bb:                                               ; preds = %dec_label_pc_52675
  %v8_5269e = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v8_5269e, i64* @rax, align 8
  %v2_526a4.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_526a4

dec_label_pc_526a4:                               ; preds = %bb, %dec_label_pc_52675
  %v2_526a4 = phi i64 [ %v2_526a4.pre, %bb ], [ %v2_52675, %dec_label_pc_52675 ]
  store i64 %v2_526a4, i64* @rax, align 8
  store i64 0, i64* @rdi, align 8
  %v3_526bd = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 0)
  store i64 %v3_526bd, i64* @rax, align 8
  %v0_526c2 = load i64, i64* inttoptr (i64 337609 to i64*), align 8
  %v2_52745 = load i64, i64* @r13, align 8
  store i64 %v2_52745, i64* @rax, align 8
  store i64 %v2_52745, i64* @rdi, align 8
  %v1_52752 = inttoptr i64 %v0_526c2 to i64*
  %v2_52752 = load i64, i64* %v1_52752, align 8
  store i64 %v2_52752, i64* @rdx, align 8
  store i64 %v0_526c2, i64* @rdi, align 8
  %v4_52761 = trunc i64 %v2_52745 to i8
  %v5_52761 = icmp eq i8 %v4_52761, 0
  %v1_52763 = icmp eq i1 %v5_52761, false
  br i1 %v1_52763, label %dec_label_pc_526d0, label %dec_label_pc_52769

dec_label_pc_526d0:                               ; preds = %dec_label_pc_526a4
  ret i64 %v2_52745

dec_label_pc_52769:                               ; preds = %dec_label_pc_526a4
  %v0_52769 = load i64, i64* @rbx, align 8
  %v1_52769 = add i64 %v0_52769, 152
  %v2_52769 = inttoptr i64 %v1_52769 to i64*
  %v3_52769 = load i64, i64* %v2_52769, align 8
  store i64 %v3_52769, i64* @rbx, align 8
  store i64 %v3_526bd, i64* @rdx, align 8
  ret i64 %v2_52745
}

define i64 @function_5277b(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_5277b:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_5277b = load i64, i64* @r13, align 8
  store i64 %v2_5277b, i64* @rax, align 8
  store i64 %v2_5277b, i64* @rdi, align 8
  store i64 %v2_5277b, i64* @rdx, align 8
  store i64 %v2_5277b, i64* @rdi, align 8
  %v4_5279b = trunc i64 %v2_5277b to i8
  %v5_5279b = icmp eq i8 %v4_5279b, 0
  %v1_5279d = icmp eq i1 %v5_5279b, false
  br i1 %v1_5279d, label %bb, label %dec_label_pc_527a3

bb:                                               ; preds = %dec_label_pc_5277b
  %v3_5279d = call i64 @function_52510(i64 ptrtoint (i32* @0 to i64))
  store i64 %v3_5279d, i64* @rax, align 8
  br label %dec_label_pc_527a3

dec_label_pc_527a3:                               ; preds = %bb, %dec_label_pc_5277b
  %v0_527a3 = load i64, i64* @rbx, align 8
  %v1_527a3 = add i64 %v0_527a3, 168
  %v2_527a3 = inttoptr i64 %v1_527a3 to i64*
  %v3_527a3 = load i64, i64* %v2_527a3, align 8
  store i64 %v3_527a3, i64* @rax, align 8
  %v1_527aa = add i64 %v3_527a3, 8
  %v2_527aa = inttoptr i64 %v1_527aa to i32*
  %v3_527aa = load i32, i32* %v2_527aa, align 4
  %v4_527aa = zext i32 %v3_527aa to i64
  store i64 %v4_527aa, i64* @r11, align 8
  %v5_527ae = icmp eq i32 %v3_527aa, 0
  br i1 %v5_527ae, label %bb41, label %dec_label_pc_527b7

bb41:                                             ; preds = %dec_label_pc_527a3
  %v2_527b1 = call i64 @function_52b70(i64 %v2_5277b)
  store i64 %v2_527b1, i64* @rax, align 8
  %v0_527bb.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_527b7

dec_label_pc_527b7:                               ; preds = %bb41, %dec_label_pc_527a3
  %v0_52812 = phi i64 [ %v0_527bb.pre, %bb41 ], [ %v0_527a3, %dec_label_pc_527a3 ]
  %v1_527bb = add i64 %v0_52812, 40
  %v2_527bb = inttoptr i64 %v1_527bb to i64*
  %v3_527bb = load i64, i64* %v2_527bb, align 8
  %v0_527bf = load i64, i64* @r13, align 8
  store i64 %v0_527bf, i64* @rdi, align 8
  store i64 %v0_527bf, i64* @rax, align 8
  %v1_527d3 = inttoptr i64 %v3_527bb to i64*
  %v2_527d3 = load i64, i64* %v1_527d3, align 8
  store i64 %v2_527d3, i64* @rcx, align 8
  store i64 %v0_527bf, i64* @rdx, align 8
  store i64 %v0_527bf, i64* @rdi, align 8
  %v1_52812 = add i64 %v0_52812, 176
  %v2_52812 = inttoptr i64 %v1_52812 to i64*
  %v3_52812 = load i64, i64* %v2_52812, align 8
  store i64 %v3_52812, i64* @rdi, align 8
  store i64 %v0_527bf, i64* @rbp, align 8
  %v1_5281f = inttoptr i64 %v3_52812 to i64*
  %v2_5281f = load i64, i64* %v1_5281f, align 8
  store i64 %v2_5281f, i64* @rax, align 8
  %v1_52828 = inttoptr i64 %v2_5281f to i64*
  %v2_52828 = load i64, i64* %v1_52828, align 8
  store i64 %v2_52828, i64* @rdx, align 8
  store i64 %v2_5281f, i64* @rdi, align 8
  %v4_52834 = trunc i64 %v2_5281f to i8
  %v5_52834 = icmp eq i8 %v4_52834, 0
  br i1 %v5_52834, label %bb42, label %dec_label_pc_5283c

bb42:                                             ; preds = %dec_label_pc_527b7
  %v2_52836 = call i64 @function_52510(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_52836, i64* @rax, align 8
  %v0_5283c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_5283c

dec_label_pc_5283c:                               ; preds = %bb42, %dec_label_pc_527b7
  %v0_5283c = phi i64 [ %v0_5283c.pre, %bb42 ], [ %v0_52812, %dec_label_pc_527b7 ]
  %v1_5283c = add i64 %v0_5283c, 24
  %v2_5283c = inttoptr i64 %v1_5283c to i64*
  %v3_5283c = load i64, i64* %v2_5283c, align 8
  store i64 %v3_5283c, i64* @rax, align 8
  %v1_52840 = add i64 %v3_5283c, 8
  %v2_52840 = inttoptr i64 %v1_52840 to i32*
  %v3_52840 = load i32, i32* %v2_52840, align 4
  %v5_52844 = icmp eq i32 %v3_52840, 0
  br i1 %v5_52844, label %bb43, label %dec_label_pc_5284d

bb43:                                             ; preds = %dec_label_pc_5283c
  %v2_52847 = call i64 @function_52b70(i64 %v2_5281f)
  store i64 %v2_52847, i64* @rax, align 8
  %v0_5284d.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_5284d

dec_label_pc_5284d:                               ; preds = %bb43, %dec_label_pc_5283c
  %v0_52854 = phi i64 [ %v2_52847, %bb43 ], [ %v3_5283c, %dec_label_pc_5283c ]
  %v0_5288e = phi i64 [ %v0_5284d.pre, %bb43 ], [ %v0_5283c, %dec_label_pc_5283c ]
  %v1_5284d = add i64 %v0_5288e, 184
  %v2_5284d = inttoptr i64 %v1_5284d to i64*
  %v3_5284d = load i64, i64* %v2_5284d, align 8
  store i64 %v3_5284d, i64* @rdi, align 8
  %v1_52854 = add i64 %v0_52854, 16
  %v2_52854 = inttoptr i64 %v1_52854 to i64*
  %v3_52854 = load i64, i64* %v2_52854, align 8
  %v1_5285b = inttoptr i64 %v3_5284d to i64*
  %v2_5285b = load i64, i64* %v1_5285b, align 8
  store i64 %v2_5285b, i64* @rax, align 8
  %v1_52864 = inttoptr i64 %v2_5285b to i64*
  %v2_52864 = load i64, i64* %v1_52864, align 8
  store i64 %v2_52864, i64* @rdx, align 8
  store i64 %v2_5285b, i64* @rdi, align 8
  %v1_52875 = inttoptr i64 %v3_52854 to i64*
  %v2_52875 = load i64, i64* %v1_52875, align 8
  store i64 %v2_52875, i64* @rdx, align 8
  store i64 %v3_52854, i64* @rdi, align 8
  %v2_52885 = load i64, i64* %v1_52864, align 8
  store i64 %v2_52885, i64* @rdx, align 8
  store i64 %v2_5285b, i64* @rdi, align 8
  %v1_5288e = add i64 %v0_5288e, 32
  %v2_5288e = inttoptr i64 %v1_5288e to i64*
  %v3_5288e = load i64, i64* %v2_5288e, align 8
  store i64 %v3_5288e, i64* @rdi, align 8
  store i64 %v2_5285b, i64* @r12, align 8
  %v1_52898 = inttoptr i64 %v3_5288e to i64*
  %v2_52898 = load i64, i64* %v1_52898, align 8
  store i64 %v2_52898, i64* @rax, align 8
  %v1_528a1 = inttoptr i64 %v2_52898 to i64*
  %v2_528a1 = load i64, i64* %v1_528a1, align 8
  store i64 %v2_528a1, i64* @rdx, align 8
  store i64 %v2_52898, i64* @rdi, align 8
  %v4_528ad = trunc i64 %v2_52898 to i8
  %v5_528ad = icmp eq i8 %v4_528ad, 0
  %v1_528af = icmp eq i1 %v5_528ad, false
  br i1 %v1_528af, label %bb44, label %dec_label_pc_528b5

bb44:                                             ; preds = %dec_label_pc_5284d
  %v4_528af = call i64 @function_52528(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_528af, i64* @rax, align 8
  %v0_528b5.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_528b5

dec_label_pc_528b5:                               ; preds = %bb44, %dec_label_pc_5284d
  %v0_528b5 = phi i64 [ %v0_528b5.pre, %bb44 ], [ %v0_5288e, %dec_label_pc_5284d ]
  %v1_528b5 = add i64 %v0_528b5, 192
  %v2_528b5 = inttoptr i64 %v1_528b5 to i64*
  %v3_528b5 = load i64, i64* %v2_528b5, align 8
  store i64 %v3_528b5, i64* @rdi, align 8
  %v1_528bf = inttoptr i64 %v3_528b5 to i64*
  %v2_528bf = load i64, i64* %v1_528bf, align 8
  store i64 %v2_528bf, i64* @rax, align 8
  %v1_528c8 = inttoptr i64 %v2_528bf to i64*
  %v2_528c8 = load i64, i64* %v1_528c8, align 8
  store i64 %v2_528c8, i64* @rdx, align 8
  store i64 %v2_528bf, i64* @rdi, align 8
  %v4_528d4 = trunc i64 %v2_528bf to i8
  %v5_528d4 = icmp eq i8 %v4_528d4, 0
  br i1 %v5_528d4, label %bb45, label %dec_label_pc_528dc

bb45:                                             ; preds = %dec_label_pc_528b5
  %v2_528d6 = call i64 @function_52510(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_528d6, i64* @rax, align 8
  %v0_528dc.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_528dc

dec_label_pc_528dc:                               ; preds = %bb45, %dec_label_pc_528b5
  %v0_528dc = phi i64 [ %v0_528dc.pre, %bb45 ], [ %v0_528b5, %dec_label_pc_528b5 ]
  %v1_528dc = add i64 %v0_528dc, 208
  %v2_528dc = inttoptr i64 %v1_528dc to i64*
  %v3_528dc = load i64, i64* %v2_528dc, align 8
  store i64 %v3_528dc, i64* @rax, align 8
  %v1_528e3 = add i64 %v0_528dc, 200
  %v2_528e3 = inttoptr i64 %v1_528e3 to i64*
  %v3_528e3 = load i64, i64* %v2_528e3, align 8
  store i64 %v3_528e3, i64* @rdi, align 8
  %v1_528ea = add i64 %v3_528dc, 8
  %v2_528ea = inttoptr i64 %v1_528ea to i32*
  %v3_528ea = load i32, i32* %v2_528ea, align 4
  %v5_528ee = icmp eq i32 %v3_528ea, 0
  br i1 %v5_528ee, label %bb46, label %dec_label_pc_528f7

bb46:                                             ; preds = %dec_label_pc_528dc
  %v2_528f1 = call i64 @function_52b70(i64 %v3_528e3)
  store i64 %v2_528f1, i64* @rax, align 8
  br label %dec_label_pc_528f7

dec_label_pc_528f7:                               ; preds = %bb46, %dec_label_pc_528dc
  %v0_528f7 = phi i64 [ %v2_528f1, %bb46 ], [ %v3_528dc, %dec_label_pc_528dc ]
  %v1_528f7 = add i64 %v0_528f7, 16
  %v2_528f7 = inttoptr i64 %v1_528f7 to i64*
  %v3_528f7 = load i64, i64* %v2_528f7, align 8
  store i64 %v3_528f7, i64* @rdx, align 8
  %v1_528fb = inttoptr i64 %v3_528e3 to i64*
  %v2_528fb = load i64, i64* %v1_528fb, align 8
  store i64 %v2_528fb, i64* @rax, align 8
  %v1_52907 = inttoptr i64 %v2_528fb to i64*
  %v2_52907 = load i64, i64* %v1_52907, align 8
  store i64 %v2_52907, i64* @rdx, align 8
  store i64 %v2_528fb, i64* @rdi, align 8
  %v4_52913 = trunc i64 %v2_528fb to i8
  %v5_52913 = icmp eq i8 %v4_52913, 0
  br i1 %v5_52913, label %bb47, label %dec_label_pc_5291b

bb47:                                             ; preds = %dec_label_pc_528f7
  %v2_52915 = call i64 @function_52510(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_52915, i64* @rax, align 8
  br label %dec_label_pc_5291b

dec_label_pc_5291b:                               ; preds = %bb47, %dec_label_pc_528f7
  %v0_5291b = load i64, i64* @rbx, align 8
  %v1_5291b = add i64 %v0_5291b, 24
  %v2_5291b = inttoptr i64 %v1_5291b to i64*
  %v3_5291b = load i64, i64* %v2_5291b, align 8
  store i64 %v3_5291b, i64* @rax, align 8
  %v1_5291f = add i64 %v3_5291b, 8
  %v2_5291f = inttoptr i64 %v1_5291f to i32*
  %v3_5291f = load i32, i32* %v2_5291f, align 4
  %v5_52923 = icmp eq i32 %v3_5291f, 0
  br i1 %v5_52923, label %bb48, label %dec_label_pc_5292c

bb48:                                             ; preds = %dec_label_pc_5291b
  %v2_52926 = call i64 @function_52b70(i64 %v2_528fb)
  store i64 %v2_52926, i64* @rax, align 8
  %v0_5292c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_5292c

dec_label_pc_5292c:                               ; preds = %bb48, %dec_label_pc_5291b
  %v0_52933 = phi i64 [ %v2_52926, %bb48 ], [ %v3_5291b, %dec_label_pc_5291b ]
  %v0_5296d = phi i64 [ %v0_5292c.pre, %bb48 ], [ %v0_5291b, %dec_label_pc_5291b ]
  %v1_5292c = add i64 %v0_5296d, 216
  %v2_5292c = inttoptr i64 %v1_5292c to i64*
  %v3_5292c = load i64, i64* %v2_5292c, align 8
  store i64 %v3_5292c, i64* @rdi, align 8
  %v1_52933 = add i64 %v0_52933, 16
  %v2_52933 = inttoptr i64 %v1_52933 to i64*
  %v3_52933 = load i64, i64* %v2_52933, align 8
  %v1_5293a = inttoptr i64 %v3_5292c to i64*
  %v2_5293a = load i64, i64* %v1_5293a, align 8
  store i64 %v2_5293a, i64* @rax, align 8
  %v1_52943 = inttoptr i64 %v2_5293a to i64*
  %v2_52943 = load i64, i64* %v1_52943, align 8
  store i64 %v2_52943, i64* @rdx, align 8
  store i64 %v2_5293a, i64* @rdi, align 8
  %v1_52954 = inttoptr i64 %v3_52933 to i64*
  %v2_52954 = load i64, i64* %v1_52954, align 8
  store i64 %v2_52954, i64* @rdx, align 8
  store i64 %v3_52933, i64* @rdi, align 8
  %v2_52964 = load i64, i64* %v1_52943, align 8
  store i64 %v2_52964, i64* @rdx, align 8
  store i64 %v2_5293a, i64* @rdi, align 8
  %v1_5296d = add i64 %v0_5296d, 32
  %v2_5296d = inttoptr i64 %v1_5296d to i64*
  %v3_5296d = load i64, i64* %v2_5296d, align 8
  store i64 %v3_5296d, i64* @rdi, align 8
  store i64 %v2_5293a, i64* @rbp, align 8
  %v1_52977 = inttoptr i64 %v3_5296d to i64*
  %v2_52977 = load i64, i64* %v1_52977, align 8
  store i64 %v2_52977, i64* @rax, align 8
  %v1_52980 = inttoptr i64 %v2_52977 to i64*
  %v2_52980 = load i64, i64* %v1_52980, align 8
  store i64 %v2_52980, i64* @rdx, align 8
  store i64 %v2_52977, i64* @rdi, align 8
  %v4_5298c = trunc i64 %v2_52977 to i8
  %v5_5298c = icmp eq i8 %v4_5298c, 0
  %v1_5298e = icmp eq i1 %v5_5298c, false
  br i1 %v1_5298e, label %bb49, label %dec_label_pc_52994

bb49:                                             ; preds = %dec_label_pc_5292c
  %v4_5298e = call i64 @function_52528(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_5298e, i64* @rax, align 8
  %v0_52994.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52994

dec_label_pc_52994:                               ; preds = %bb49, %dec_label_pc_5292c
  %v0_52994 = phi i64 [ %v0_52994.pre, %bb49 ], [ %v0_5296d, %dec_label_pc_5292c ]
  %v1_52994 = add i64 %v0_52994, 96
  %v2_52994 = inttoptr i64 %v1_52994 to i64*
  %v3_52994 = load i64, i64* %v2_52994, align 8
  store i64 %v3_52994, i64* @rdi, align 8
  %v1_5299b = inttoptr i64 %v3_52994 to i64*
  %v2_5299b = load i64, i64* %v1_5299b, align 8
  store i64 %v2_5299b, i64* @rdi, align 8
  store i64 %v2_5299b, i64* @rdx, align 8
  store i64 %arg8, i64* @rax, align 8
  %v4_529b7 = trunc i64 %v2_5299b to i8
  %v5_529b7 = icmp eq i8 %v4_529b7, 0
  br i1 %v5_529b7, label %bb50, label %dec_label_pc_529bf

bb50:                                             ; preds = %dec_label_pc_52994
  %v7_529b9 = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_529b9, i64* @rax, align 8
  %v0_529bf.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_529bf

dec_label_pc_529bf:                               ; preds = %bb50, %dec_label_pc_52994
  %v0_529d2 = phi i64 [ %v0_529bf.pre, %bb50 ], [ %v0_52994, %dec_label_pc_52994 ]
  %v1_529bf = add i64 %v0_529d2, 120
  %v2_529bf = inttoptr i64 %v1_529bf to i64*
  %v3_529bf = load i64, i64* %v2_529bf, align 8
  store i64 %v3_529bf, i64* @rdi, align 8
  %v1_529c6 = inttoptr i64 %v3_529bf to i64*
  %v2_529c6 = load i64, i64* %v1_529c6, align 8
  store i64 %v2_529c6, i64* @rax, align 8
  %v1_529d2 = add i64 %v0_529d2, 24
  %v2_529d2 = inttoptr i64 %v1_529d2 to i64*
  %v3_529d2 = load i64, i64* %v2_529d2, align 8
  store i64 %v3_529d2, i64* @rax, align 8
  %v1_529d6 = add i64 %v3_529d2, 8
  %v2_529d6 = inttoptr i64 %v1_529d6 to i32*
  %v3_529d6 = load i32, i32* %v2_529d6, align 4
  %v4_529d6 = zext i32 %v3_529d6 to i64
  store i64 %v4_529d6, i64* @rdi, align 8
  %v7_529d9 = icmp eq i32 %v3_529d6, 0
  br i1 %v7_529d9, label %bb51, label %dec_label_pc_529e1

bb51:                                             ; preds = %dec_label_pc_529bf
  %v3_529db = call i64 @function_52b70(i64 0)
  store i64 %v3_529db, i64* @rax, align 8
  %v0_529e1.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_529e1

dec_label_pc_529e1:                               ; preds = %bb51, %dec_label_pc_529bf
  %v0_529e8 = phi i64 [ %v3_529db, %bb51 ], [ %v3_529d2, %dec_label_pc_529bf ]
  %v0_52a21 = phi i64 [ %v0_529e1.pre, %bb51 ], [ %v0_529d2, %dec_label_pc_529bf ]
  %v1_529e1 = add i64 %v0_52a21, 128
  %v2_529e1 = inttoptr i64 %v1_529e1 to i64*
  %v3_529e1 = load i64, i64* %v2_529e1, align 8
  store i64 %v3_529e1, i64* @rdi, align 8
  %v1_529e8 = add i64 %v0_529e8, 16
  %v2_529e8 = inttoptr i64 %v1_529e8 to i64*
  %v3_529e8 = load i64, i64* %v2_529e8, align 8
  %v1_529ef = inttoptr i64 %v3_529e1 to i64*
  %v2_529ef = load i64, i64* %v1_529ef, align 8
  store i64 %v2_529ef, i64* @rax, align 8
  %v1_529f8 = inttoptr i64 %v2_529ef to i64*
  %v2_529f8 = load i64, i64* %v1_529f8, align 8
  store i64 %v2_529f8, i64* @rdx, align 8
  store i64 %v2_529ef, i64* @rdi, align 8
  %v1_52a09 = inttoptr i64 %v3_529e8 to i64*
  %v2_52a09 = load i64, i64* %v1_52a09, align 8
  store i64 %v2_52a09, i64* @rdx, align 8
  store i64 %v3_529e8, i64* @rdi, align 8
  %v2_52a18 = load i64, i64* %v1_529f8, align 8
  store i64 %v2_52a18, i64* @rdx, align 8
  store i64 %v2_529ef, i64* @rdi, align 8
  %v1_52a21 = add i64 %v0_52a21, 32
  %v2_52a21 = inttoptr i64 %v1_52a21 to i64*
  %v3_52a21 = load i64, i64* %v2_52a21, align 8
  store i64 %v3_52a21, i64* @rdi, align 8
  %v1_52a2b = inttoptr i64 %v3_52a21 to i64*
  %v2_52a2b = load i64, i64* %v1_52a2b, align 8
  store i64 %v2_52a2b, i64* @rax, align 8
  %v1_52a34 = inttoptr i64 %v2_52a2b to i64*
  %v2_52a34 = load i64, i64* %v1_52a34, align 8
  store i64 %v2_52a34, i64* @rdx, align 8
  store i64 %v2_52a2b, i64* @rdi, align 8
  %v4_52a40 = trunc i64 %v2_52a2b to i8
  %v5_52a40 = icmp eq i8 %v4_52a40, 0
  %v1_52a42 = icmp eq i1 %v5_52a40, false
  br i1 %v1_52a42, label %bb52, label %dec_label_pc_52a48

bb52:                                             ; preds = %dec_label_pc_529e1
  %v4_52a42 = call i64 @function_52528(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v4_52a42, i64* @rax, align 8
  %v0_52a48.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52a48

dec_label_pc_52a48:                               ; preds = %bb52, %dec_label_pc_529e1
  %v0_52a48 = phi i64 [ %v0_52a48.pre, %bb52 ], [ %v0_52a21, %dec_label_pc_529e1 ]
  %v1_52a48 = add i64 %v0_52a48, 104
  %v2_52a48 = inttoptr i64 %v1_52a48 to i64*
  %v3_52a48 = load i64, i64* %v2_52a48, align 8
  store i64 %v3_52a48, i64* @rdi, align 8
  %v1_52a4f = inttoptr i64 %v3_52a48 to i64*
  %v2_52a4f = load i64, i64* %v1_52a4f, align 8
  store i64 %v2_52a4f, i64* @rdi, align 8
  store i64 %v2_52a4f, i64* @rdx, align 8
  store i64 %arg8, i64* @rax, align 8
  %v4_52a6b = trunc i64 %v2_52a4f to i8
  %v5_52a6b = icmp eq i8 %v4_52a6b, 0
  br i1 %v5_52a6b, label %bb53, label %dec_label_pc_52a73

bb53:                                             ; preds = %dec_label_pc_52a48
  %v7_52a6d = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v7_52a6d, i64* @rax, align 8
  br label %dec_label_pc_52a73

dec_label_pc_52a73:                               ; preds = %bb53, %dec_label_pc_52a48
  store i64 0, i64* @rdi, align 8
  %v3_52a75 = call i64 @_ZN3org4luaj3vm28LuaValue7tableOfEJPNS1_8LuaTableEii.constprop.142(i32 0)
  store i64 %v3_52a75, i64* @rax, align 8
  %v0_52a7a = load i64, i64* @rbx, align 8
  %v1_52a7a = add i64 %v0_52a7a, 88
  %v2_52a7a = inttoptr i64 %v1_52a7a to i64*
  %v3_52a7a = load i64, i64* %v2_52a7a, align 8
  store i64 %v3_52a7a, i64* @rdi, align 8
  %v1_52a86 = inttoptr i64 %v3_52a7a to i64*
  %v2_52a86 = load i64, i64* %v1_52a86, align 8
  store i64 %v2_52a86, i64* @rax, align 8
  %v1_52a8f = inttoptr i64 %v3_52a75 to i64*
  %v2_52a8f = load i64, i64* %v1_52a8f, align 8
  store i64 %v2_52a8f, i64* @rcx, align 8
  store i64 %v2_52a86, i64* @rdx, align 8
  store i64 %v3_52a75, i64* @rdi, align 8
  %v0_52aa3 = load i64, i64* inttoptr (i64 338602 to i64*), align 8
  %v2_52b27 = load i64, i64* @r13, align 8
  store i64 %v2_52b27, i64* @rax, align 8
  store i64 %v2_52b27, i64* @rdi, align 8
  %v1_52b34 = inttoptr i64 %v0_52aa3 to i64*
  %v2_52b34 = load i64, i64* %v1_52b34, align 8
  store i64 %v2_52b34, i64* @rdx, align 8
  store i64 %v0_52aa3, i64* @rdi, align 8
  %v4_52b44 = trunc i64 %v2_52b27 to i8
  %v5_52b44 = icmp eq i8 %v4_52b44, 0
  %v1_52b46 = icmp eq i1 %v5_52b44, false
  br i1 %v1_52b46, label %dec_label_pc_52ab0, label %dec_label_pc_52b4c

dec_label_pc_52ab0:                               ; preds = %dec_label_pc_52a73
  ret i64 %v2_52b27

dec_label_pc_52b4c:                               ; preds = %dec_label_pc_52a73
  %v1_52b4c = add i64 %v0_52a7a, 224
  %v2_52b4c = inttoptr i64 %v1_52b4c to i64*
  %v3_52b4c = load i64, i64* %v2_52b4c, align 8
  store i64 %v3_52b4c, i64* @rbx, align 8
  store i64 %v3_52b4c, i64* @rdi, align 8
  %v6_52b69 = call i64 @function_524a7(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_52b69, i64* @rax, align 8
  ret i64 %v6_52b69
}

define i64 @function_52b70(i64 %arg1) local_unnamed_addr {
dec_label_pc_52b70:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @_ZN3org4luaj3vm210LuaClosure4callEJPNS1_8LuaValueES4_S4_S4_(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_52b80:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_52b97 = load i64, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v1_52ba3 = add i64 %v0_52b97, 8
  %v2_52ba3 = inttoptr i64 %v1_52ba3 to i64*
  %v3_52ba3 = load i64, i64* %v2_52ba3, align 8
  store i64 %v3_52ba3, i64* @rax, align 8
  %v1_52ba7 = add i64 %v3_52ba3, 80
  %v2_52ba7 = inttoptr i64 %v1_52ba7 to i32*
  %v3_52ba7 = load i32, i32* %v2_52ba7, align 4
  %v4_52ba7 = zext i32 %v3_52ba7 to i64
  store i64 0, i64* @rax, align 8
  store i64 %v4_52ba7, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_52c4e(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_52c4e:
  %v2_52c5a = load i64, i64* @rax, align 8
  store i64 %v2_52c5a, i64* @rdx, align 8
  store i64 %v2_52c5a, i64* @rdi, align 8
  store i64 %arg1, i64* @rbx, align 8
  ret i64 %v2_52c5a
}

define i64 @function_52c78(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_52c78:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_52c78 = add i64 %arg4, 76
  %v2_52c78 = inttoptr i64 %v1_52c78 to i32*
  %v3_52c78 = load i32, i32* %v2_52c78, align 4
  %v4_52c78 = zext i32 %v3_52c78 to i64
  store i64 %v4_52c78, i64* @rax, align 8
  %v0_52c7b = load i64, i64* inttoptr (i64 339074 to i64*), align 8
  store i64 %v0_52c7b, i64* @rdx, align 8
  %v5_52c82 = icmp eq i32 %v3_52c78, 0
  %v1_52c84 = icmp eq i1 %v5_52c82, false
  br i1 %v1_52c84, label %bb, label %dec_label_pc_52c8a

bb:                                               ; preds = %dec_label_pc_52c78
  %v2_52c84 = call i64 @function_52d58()
  store i64 %v2_52c84, i64* @rax, align 8
  br label %dec_label_pc_52c8a

dec_label_pc_52c8a:                               ; preds = %bb, %dec_label_pc_52c78
  %v2_52c8a = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v2_52c8a, i64* @rax, align 8
  %v6_52c8e = call i64 @function_52c4e(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_52c8e, i64* @rax, align 8
  ret i64 %v6_52c8e
}

define i64 @function_52c90() local_unnamed_addr {
dec_label_pc_52c90:
  %v0_52c90 = load i64, i64* @rbx, align 8
  %v1_52c90 = add i64 %v0_52c90, 8
  %v2_52c90 = inttoptr i64 %v1_52c90 to i32*
  %v3_52c90 = load i32, i32* %v2_52c90, align 4
  %v4_52c90 = zext i32 %v3_52c90 to i64
  store i64 %v4_52c90, i64* @rdi, align 8
  %v7_52c93 = icmp eq i32 %v3_52c90, 0
  br i1 %v7_52c93, label %bb, label %dec_label_pc_52c9b

bb:                                               ; preds = %dec_label_pc_52c90
  %v3_52c95 = call i64 @function_52d6e(i64 0)
  store i64 %v3_52c95, i64* @rax, align 8
  %v0_52ca0.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52c9b

dec_label_pc_52c9b:                               ; preds = %bb, %dec_label_pc_52c90
  %v0_52ca0 = phi i64 [ %v0_52ca0.pre, %bb ], [ %v0_52c90, %dec_label_pc_52c90 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_52ca0, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_52cd8() local_unnamed_addr {
dec_label_pc_52cd8:
  %v0_52cd8 = load i64, i64* @rbx, align 8
  %v1_52cd8 = add i64 %v0_52cd8, 8
  %v2_52cd8 = inttoptr i64 %v1_52cd8 to i32*
  %v3_52cd8 = load i32, i32* %v2_52cd8, align 4
  %v5_52cdb = icmp eq i32 %v3_52cd8, 0
  br i1 %v5_52cdb, label %bb, label %dec_label_pc_52ce3

bb:                                               ; preds = %dec_label_pc_52cd8
  %v1_52cdd = load i64, i64* @rdi, align 8
  %v2_52cdd = call i64 @function_52d6e(i64 %v1_52cdd)
  store i64 %v2_52cdd, i64* @rax, align 8
  %v0_52ce8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_52ce3

dec_label_pc_52ce3:                               ; preds = %bb, %dec_label_pc_52cd8
  %v0_52ce8 = phi i64 [ %v0_52ce8.pre, %bb ], [ %v0_52cd8, %dec_label_pc_52cd8 ]
  store i64 0, i64* @rax, align 8
  store i64 %v0_52ce8, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_52d58() local_unnamed_addr {
dec_label_pc_52d58:
  %v0_52d5e = load i64, i64* @r12, align 8
  store i64 %v0_52d5e, i64* @rdi, align 8
  %v0_52d66 = load i64, i64* @rax, align 8
  store i64 %v0_52d66, i64* @rdx, align 8
  ret i64 %v0_52d66
}

define i64 @function_52d6e(i64 %arg1) local_unnamed_addr {
dec_label_pc_52d6e:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_52d77() local_unnamed_addr {
dec_label_pc_52d77:
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_52d83() local_unnamed_addr {
dec_label_pc_52d83:
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang15lang_luaj$77$158onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_52d90:
  store i64 %arg1, i64* @rdi, align 8
  %v0_52d9a = load i64, i64* @rdi, align 8
  store i64 %v0_52d9a, i64* @rbx, align 8
  store i64 339385, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_530f0() local_unnamed_addr {
dec_label_pc_530f0:
  %v2_530f0 = load i64, i64* @r13, align 8
  store i64 %v2_530f0, i64* @rax, align 8
  store i64 %v2_530f0, i64* @rdi, align 8
  %v4_53104 = trunc i64 %v2_530f0 to i8
  %v5_53104 = icmp eq i8 %v4_53104, 0
  br i1 %v5_53104, label %bb, label %dec_label_pc_5310c

bb:                                               ; preds = %dec_label_pc_530f0
  %v1_53106 = call i64 @function_53278()
  store i64 %v1_53106, i64* @rax, align 8
  br label %dec_label_pc_5310c

dec_label_pc_5310c:                               ; preds = %bb, %dec_label_pc_530f0
  %v0_5310c = load i64, i64* @rbx, align 8
  %v1_5310c = add i64 %v0_5310c, 224
  %v2_5310c = inttoptr i64 %v1_5310c to i64*
  %v3_5310c = load i64, i64* %v2_5310c, align 8
  store i64 %v3_5310c, i64* @rdi, align 8
  %v1_53113 = add i64 %v0_5310c, 216
  %v2_53113 = inttoptr i64 %v1_53113 to i64*
  %v3_53113 = load i64, i64* %v2_53113, align 8
  %v1_5311a = inttoptr i64 %v3_5310c to i64*
  %v2_5311a = load i64, i64* %v1_5311a, align 8
  store i64 %v2_5311a, i64* @rax, align 8
  %v1_53123 = inttoptr i64 %v2_5311a to i64*
  %v2_53123 = load i64, i64* %v1_53123, align 8
  store i64 %v2_53123, i64* @rdx, align 8
  store i64 %v2_5311a, i64* @rdi, align 8
  %v1_53134 = inttoptr i64 %v3_53113 to i64*
  %v2_53134 = load i64, i64* %v1_53134, align 8
  store i64 %v2_53134, i64* @rdx, align 8
  store i64 %v3_53113, i64* @rdi, align 8
  %v1_53144 = add i64 %v0_5310c, 120
  %v2_53144 = inttoptr i64 %v1_53144 to i64*
  %v3_53144 = load i64, i64* %v2_53144, align 8
  store i64 %v3_53144, i64* @rdi, align 8
  %v1_53148 = inttoptr i64 %v3_53144 to i64*
  %v2_53148 = load i64, i64* %v1_53148, align 8
  store i64 %v2_53148, i64* @rax, align 8
  store i64 %v2_53148, i64* @rbp, align 8
  %v1_53154 = inttoptr i64 %v2_53148 to i64*
  %v2_53154 = load i64, i64* %v1_53154, align 8
  store i64 %v2_53154, i64* @rax, align 8
  store i64 %v2_53148, i64* @rdi, align 8
  %v4_53167 = trunc i64 %v2_53154 to i8
  %v5_53167 = icmp eq i8 %v4_53167, 0
  br i1 %v5_53167, label %bb250, label %dec_label_pc_5316f

bb250:                                            ; preds = %dec_label_pc_5310c
  %v1_53169 = call i64 @function_53378()
  store i64 %v1_53169, i64* @rax, align 8
  %v0_5316f.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_5316f

dec_label_pc_5316f:                               ; preds = %bb250, %dec_label_pc_5310c
  %v0_5316f = phi i64 [ %v0_5316f.pre, %bb250 ], [ %v0_5310c, %dec_label_pc_5310c ]
  %v1_5316f = add i64 %v0_5316f, 24
  %v2_5316f = inttoptr i64 %v1_5316f to i64*
  %v3_5316f = load i64, i64* %v2_5316f, align 8
  store i64 %v3_5316f, i64* @rdi, align 8
  %v1_5317a = inttoptr i64 %v3_5316f to i64*
  %v2_5317a = load i64, i64* %v1_5317a, align 8
  store i64 %v2_5317a, i64* @rax, align 8
  %v0_53183 = load i64, i64* @r12, align 8
  %v1_53183 = add i64 %v0_53183, 8
  %v2_53183 = inttoptr i64 %v1_53183 to i32*
  %v3_53183 = load i32, i32* %v2_53183, align 4
  %v5_53188 = icmp eq i32 %v3_53183, 0
  br i1 %v5_53188, label %bb251, label %dec_label_pc_53191

bb251:                                            ; preds = %dec_label_pc_5316f
  %v2_5318b = call i64 @function_53574(i64 %v3_5316f)
  store i64 %v2_5318b, i64* @rax, align 8
  %v0_53191.pre = load i64, i64* @r12, align 8
  %v0_5319f.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_53191

dec_label_pc_53191:                               ; preds = %bb251, %dec_label_pc_5316f
  %v0_531ad = phi i64 [ %v0_5319f.pre, %bb251 ], [ %v0_5316f, %dec_label_pc_5316f ]
  %v0_53191 = phi i64 [ %v0_53191.pre, %bb251 ], [ %v0_53183, %dec_label_pc_5316f ]
  %v1_53191 = add i64 %v0_53191, 16
  %v2_53191 = inttoptr i64 %v1_53191 to i64*
  %v3_53191 = load i64, i64* %v2_53191, align 8
  store i64 %v3_53191, i64* @rdi, align 8
  %v1_53196 = inttoptr i64 %v3_53191 to i64*
  %v2_53196 = load i64, i64* %v1_53196, align 8
  store i64 %v2_53196, i64* @rax, align 8
  %v1_5319f = add i64 %v0_531ad, 232
  %v2_5319f = inttoptr i64 %v1_5319f to i64*
  %v3_5319f = load i64, i64* %v2_5319f, align 8
  store i64 %v3_5319f, i64* @rdx, align 8
  %v1_531b4 = add i64 %v3_5319f, 8
  %v2_531b4 = inttoptr i64 %v1_531b4 to i32*
  %v3_531b4 = load i32, i32* %v2_531b4, align 4
  %v5_531b8 = icmp eq i32 %v3_531b4, 0
  br i1 %v5_531b8, label %bb252, label %dec_label_pc_531c1

bb252:                                            ; preds = %dec_label_pc_53191
  %v2_531bb = call i64 @function_53574(i64 %v3_53191)
  store i64 %v2_531bb, i64* @rax, align 8
  %v0_531c5.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_531c1

dec_label_pc_531c1:                               ; preds = %bb252, %dec_label_pc_53191
  %v0_531e112 = phi i64 [ %v2_531bb, %bb252 ], [ %v2_53196, %dec_label_pc_53191 ]
  %v0_531c5 = phi i64 [ %v0_531c5.pre, %bb252 ], [ %v0_531ad, %dec_label_pc_53191 ]
  %v1_531c5 = add i64 %v0_531c5, 144
  %v2_531c5 = inttoptr i64 %v1_531c5 to i64*
  %v3_531c5 = load i64, i64* %v2_531c5, align 8
  store i64 %v3_531c5, i64* @rdx, align 8
  %v1_531cc = add i64 %v3_531c5, 8
  %v2_531cc = inttoptr i64 %v1_531cc to i32*
  %v3_531cc = load i32, i32* %v2_531cc, align 4
  %v4_531cc = zext i32 %v3_531cc to i64
  store i64 %v4_531cc, i64* @r11, align 8
  %v5_531d0 = icmp eq i32 %v3_531cc, 0
  br i1 %v5_531d0, label %bb253, label %dec_label_pc_531d9

bb253:                                            ; preds = %dec_label_pc_531c1
  %v2_531d3 = call i64 @function_53574(i64 %v3_53191)
  store i64 %v2_531d3, i64* @rax, align 8
  br label %dec_label_pc_531d9

dec_label_pc_531d9:                               ; preds = %bb253, %dec_label_pc_531c1
  %v0_531fe = phi i64 [ %v2_531d3, %bb253 ], [ %v0_531e112, %dec_label_pc_531c1 ]
  store i64 %v0_531fe, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_53278() local_unnamed_addr {
dec_label_pc_53278:
  %v2_53278 = load i64, i64* @r13, align 8
  store i64 %v2_53278, i64* @rax, align 8
  store i64 %v2_53278, i64* @rdi, align 8
  %v4_5328c = trunc i64 %v2_53278 to i8
  %v5_5328c = icmp eq i8 %v4_5328c, 0
  br i1 %v5_5328c, label %bb, label %dec_label_pc_53294

bb:                                               ; preds = %dec_label_pc_53278
  %v1_5328e = call i64 @function_53410()
  store i64 %v1_5328e, i64* @rax, align 8
  br label %dec_label_pc_53294

dec_label_pc_53294:                               ; preds = %bb, %dec_label_pc_53278
  %v0_53294 = load i64, i64* @r12, align 8
  %v1_53294 = add i64 %v0_53294, 8
  %v2_53294 = inttoptr i64 %v1_53294 to i32*
  %v3_53294 = load i32, i32* %v2_53294, align 4
  %v5_53299 = icmp eq i32 %v3_53294, 0
  br i1 %v5_53299, label %bb7, label %dec_label_pc_532a1

bb7:                                              ; preds = %dec_label_pc_53294
  %v2_5329b = call i64 @function_53574(i64 %v2_53278)
  store i64 %v2_5329b, i64* @rax, align 8
  %v0_532a1.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_532a1

dec_label_pc_532a1:                               ; preds = %bb7, %dec_label_pc_53294
  %v0_532a1 = phi i64 [ %v0_532a1.pre, %bb7 ], [ %v0_53294, %dec_label_pc_53294 ]
  %v1_532a1 = add i64 %v0_532a1, 16
  %v2_532a1 = inttoptr i64 %v1_532a1 to i64*
  %v3_532a1 = load i64, i64* %v2_532a1, align 8
  store i64 %v3_532a1, i64* @rdi, align 8
  %v1_532a6 = inttoptr i64 %v3_532a1 to i64*
  %v2_532a6 = load i64, i64* %v1_532a6, align 8
  store i64 %v2_532a6, i64* @rax, align 8
  %v0_532af = load i64, i64* @rbx, align 8
  %v1_532af = add i64 %v0_532af, 240
  %v2_532af = inttoptr i64 %v1_532af to i64*
  %v3_532af = load i64, i64* %v2_532af, align 8
  store i64 %v3_532af, i64* @rdx, align 8
  %v1_532b6 = add i64 %v0_532af, 128
  %v2_532b6 = inttoptr i64 %v1_532b6 to i64*
  %v3_532b6 = load i64, i64* %v2_532b6, align 8
  store i64 %v3_532b6, i64* @r12, align 8
  %v1_532bd = add i64 %v3_532af, 8
  %v2_532bd = inttoptr i64 %v1_532bd to i32*
  %v3_532bd = load i32, i32* %v2_532bd, align 4
  %v4_532bd = zext i32 %v3_532bd to i64
  store i64 %v4_532bd, i64* @rcx, align 8
  %v5_532c0 = icmp eq i32 %v3_532bd, 0
  br i1 %v5_532c0, label %bb8, label %dec_label_pc_532c8

bb8:                                              ; preds = %dec_label_pc_532a1
  %v2_532c2 = call i64 @function_53574(i64 %v3_532a1)
  store i64 %v2_532c2, i64* @rax, align 8
  br label %dec_label_pc_532c8

dec_label_pc_532c8:                               ; preds = %bb8, %dec_label_pc_532a1
  store i64 340699, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_53310() local_unnamed_addr {
dec_label_pc_53310:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %v0_53310 = load i64, i64* @rbx, align 8
  %v1_53310 = add i64 %v0_53310, 184
  %v2_53310 = inttoptr i64 %v1_53310 to i64*
  %v3_53310 = load i64, i64* %v2_53310, align 8
  store i64 %v3_53310, i64* @rdi, align 8
  %v1_5331a = inttoptr i64 %v3_53310 to i64*
  %v2_5331a = load i64, i64* %v1_5331a, align 8
  store i64 %v2_5331a, i64* @rax, align 8
  %v0_53323 = load i64, i64* %r12.global-to-local, align 8
  %v1_53323 = add i64 %v0_53323, 8
  %v2_53323 = inttoptr i64 %v1_53323 to i32*
  %v3_53323 = load i32, i32* %v2_53323, align 4
  %v4_53323 = zext i32 %v3_53323 to i64
  store i64 %v4_53323, i64* @rdi, align 8
  %v7_53328 = icmp eq i32 %v3_53323, 0
  br i1 %v7_53328, label %bb, label %dec_label_pc_53330

bb:                                               ; preds = %dec_label_pc_53310
  %v3_5332a = call i64 @function_53574(i64 0)
  store i64 %v3_5332a, i64* @rax, align 8
  %v0_53330.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_5333e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_53330

dec_label_pc_53330:                               ; preds = %bb, %dec_label_pc_53310
  %v0_5333e = phi i64 [ %v0_5333e.pre, %bb ], [ %v0_53310, %dec_label_pc_53310 ]
  %v0_53330 = phi i64 [ %v0_53330.pre, %bb ], [ %v0_53323, %dec_label_pc_53310 ]
  %v1_53330 = add i64 %v0_53330, 16
  %v2_53330 = inttoptr i64 %v1_53330 to i64*
  %v3_53330 = load i64, i64* %v2_53330, align 8
  store i64 %v3_53330, i64* @rdi, align 8
  %v1_53335 = inttoptr i64 %v3_53330 to i64*
  %v2_53335 = load i64, i64* %v1_53335, align 8
  store i64 %v2_53335, i64* @rax, align 8
  %v1_5333e = add i64 %v0_5333e, 232
  %v2_5333e = inttoptr i64 %v1_5333e to i64*
  %v3_5333e = load i64, i64* %v2_5333e, align 8
  store i64 %v3_5333e, i64* @rdx, align 8
  %v1_53345 = add i64 %v0_5333e, 128
  %v2_53345 = inttoptr i64 %v1_53345 to i64*
  %v3_53345 = load i64, i64* %v2_53345, align 8
  store i64 %v3_53345, i64* %rbp.global-to-local, align 8
  %v1_5334c = add i64 %v3_5333e, 8
  %v2_5334c = inttoptr i64 %v1_5334c to i32*
  %v3_5334c = load i32, i32* %v2_5334c, align 4
  %v5_5334f = icmp eq i32 %v3_5334c, 0
  br i1 %v5_5334f, label %bb242, label %dec_label_pc_53357

bb242:                                            ; preds = %dec_label_pc_53330
  %v2_53351 = call i64 @function_53574(i64 %v3_53330)
  store i64 %v2_53351, i64* @rax, align 8
  %v0_53363.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_53357

dec_label_pc_53357:                               ; preds = %bb242, %dec_label_pc_53330
  %v0_53363 = phi i64 [ %v0_53363.pre, %bb242 ], [ %v3_53345, %dec_label_pc_53330 ]
  %v0_5335b = phi i64 [ %v2_53351, %bb242 ], [ %v2_53335, %dec_label_pc_53330 ]
  store i64 %v0_53363, i64* @rdi, align 8
  ret i64 %v0_5335b
}

define i64 @function_53378() local_unnamed_addr {
dec_label_pc_53378:
  %rbp.global-to-local = alloca i64, align 8
  %v2_53378 = load i64, i64* @rbp, align 8
  store i64 %v2_53378, i64* @rax, align 8
  store i64 %v2_53378, i64* @rdi, align 8
  %v4_5338c = trunc i64 %v2_53378 to i8
  %v5_5338c = icmp eq i8 %v4_5338c, 0
  br i1 %v5_5338c, label %bb, label %dec_label_pc_53394

bb:                                               ; preds = %dec_label_pc_53378
  %v1_5338e = call i64 @function_53470()
  store i64 %v1_5338e, i64* @rax, align 8
  br label %dec_label_pc_53394

dec_label_pc_53394:                               ; preds = %bb, %dec_label_pc_53378
  %v0_53394 = load i64, i64* @r12, align 8
  %v1_53394 = add i64 %v0_53394, 8
  %v2_53394 = inttoptr i64 %v1_53394 to i32*
  %v3_53394 = load i32, i32* %v2_53394, align 4
  %v5_53399 = icmp eq i32 %v3_53394, 0
  br i1 %v5_53399, label %bb10, label %dec_label_pc_533a2

bb10:                                             ; preds = %dec_label_pc_53394
  %v2_5339c = call i64 @function_53574(i64 %v2_53378)
  store i64 %v2_5339c, i64* @rax, align 8
  %v0_533a2.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_533a2

dec_label_pc_533a2:                               ; preds = %bb10, %dec_label_pc_53394
  %v0_533a2 = phi i64 [ %v0_533a2.pre, %bb10 ], [ %v0_53394, %dec_label_pc_53394 ]
  %v1_533a2 = add i64 %v0_533a2, 16
  %v2_533a2 = inttoptr i64 %v1_533a2 to i64*
  %v3_533a2 = load i64, i64* %v2_533a2, align 8
  store i64 %v3_533a2, i64* @rdi, align 8
  %v1_533a7 = inttoptr i64 %v3_533a2 to i64*
  %v2_533a7 = load i64, i64* %v1_533a7, align 8
  store i64 %v2_533a7, i64* @rax, align 8
  %v0_533b0 = load i64, i64* @rbx, align 8
  %v1_533b0 = add i64 %v0_533b0, 144
  %v2_533b0 = inttoptr i64 %v1_533b0 to i64*
  %v3_533b0 = load i64, i64* %v2_533b0, align 8
  store i64 %v3_533b0, i64* @rdx, align 8
  %v1_533b7 = add i64 %v0_533b0, 128
  %v2_533b7 = inttoptr i64 %v1_533b7 to i64*
  %v3_533b7 = load i64, i64* %v2_533b7, align 8
  store i64 %v3_533b7, i64* %rbp.global-to-local, align 8
  %v1_533be = add i64 %v0_533b0, 136
  %v2_533be = inttoptr i64 %v1_533be to i64*
  %v3_533be = load i64, i64* %v2_533be, align 8
  store i64 %v3_533be, i64* @r12, align 8
  %v1_533c5 = add i64 %v3_533b0, 8
  %v2_533c5 = inttoptr i64 %v1_533c5 to i32*
  %v3_533c5 = load i32, i32* %v2_533c5, align 4
  %v4_533c5 = zext i32 %v3_533c5 to i64
  store i64 %v4_533c5, i64* @rdi, align 8
  %v7_533c8 = icmp eq i32 %v3_533c5, 0
  br i1 %v7_533c8, label %bb11, label %dec_label_pc_533d0

bb11:                                             ; preds = %dec_label_pc_533a2
  %v3_533ca = call i64 @function_53574(i64 0)
  store i64 %v3_533ca, i64* @rax, align 8
  %v0_533d0.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_533db.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_533d0

dec_label_pc_533d0:                               ; preds = %bb11, %dec_label_pc_533a2
  %v0_533ec = phi i64 [ %v0_533db.pre, %bb11 ], [ %v0_533b0, %dec_label_pc_533a2 ]
  %v0_533f6 = phi i64 [ %v3_533ca, %bb11 ], [ %v2_533a7, %dec_label_pc_533a2 ]
  %v0_533fe = phi i64 [ %v0_533d0.pre, %bb11 ], [ %v3_533b7, %dec_label_pc_533a2 ]
  store i64 %v0_533f6, i64* @rcx, align 8
  %v1_533db = add i64 %v0_533ec, 152
  %v2_533db = inttoptr i64 %v1_533db to i64*
  %v3_533db = load i64, i64* %v2_533db, align 8
  store i64 %v3_533db, i64* @rdx, align 8
  store i64 %v0_533fe, i64* @rdi, align 8
  %v1_533ec = add i64 %v0_533ec, 248
  %v2_533ec = inttoptr i64 %v1_533ec to i64*
  %v3_533ec = load i64, i64* %v2_533ec, align 8
  store i64 %v3_533ec, i64* @rdx, align 8
  store i64 %v0_533fe, i64* @rdi, align 8
  ret i64 %v0_533f6
}

define i64 @function_53410() local_unnamed_addr {
dec_label_pc_53410:
  %v2_53410 = load i64, i64* @r13, align 8
  store i64 %v2_53410, i64* @rax, align 8
  store i64 %v2_53410, i64* @rdi, align 8
  %v4_53424 = trunc i64 %v2_53410 to i8
  %v5_53424 = icmp eq i8 %v4_53424, 0
  br i1 %v5_53424, label %bb, label %dec_label_pc_5342c

bb:                                               ; preds = %dec_label_pc_53410
  %v1_53426 = call i64 @function_534cc()
  store i64 %v1_53426, i64* @rax, align 8
  br label %dec_label_pc_5342c

dec_label_pc_5342c:                               ; preds = %bb, %dec_label_pc_53410
  %v0_5342c = load i64, i64* @r12, align 8
  %v1_5342c = add i64 %v0_5342c, 8
  %v2_5342c = inttoptr i64 %v1_5342c to i32*
  %v3_5342c = load i32, i32* %v2_5342c, align 4
  %v4_5342c = zext i32 %v3_5342c to i64
  store i64 %v4_5342c, i64* @rdx, align 8
  %v5_53431 = icmp eq i32 %v3_5342c, 0
  br i1 %v5_53431, label %bb3, label %dec_label_pc_53439

bb3:                                              ; preds = %dec_label_pc_5342c
  %v2_53433 = call i64 @function_53574(i64 %v2_53410)
  store i64 %v2_53433, i64* @rax, align 8
  %v0_53439.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_53439

dec_label_pc_53439:                               ; preds = %bb3, %dec_label_pc_5342c
  %v0_53439 = phi i64 [ %v0_53439.pre, %bb3 ], [ %v0_5342c, %dec_label_pc_5342c ]
  %v1_53439 = add i64 %v0_53439, 16
  %v2_53439 = inttoptr i64 %v1_53439 to i64*
  %v3_53439 = load i64, i64* %v2_53439, align 8
  store i64 %v3_53439, i64* @rdi, align 8
  %v1_5343e = inttoptr i64 %v3_53439 to i64*
  %v2_5343e = load i64, i64* %v1_5343e, align 8
  store i64 %v2_5343e, i64* @rax, align 8
  %v0_53447 = load i64, i64* @rbx, align 8
  %v1_53447 = add i64 %v0_53447, 24
  %v2_53447 = inttoptr i64 %v1_53447 to i64*
  %v3_53447 = load i64, i64* %v2_53447, align 8
  store i64 %v3_53447, i64* @rdi, align 8
  store i64 %v2_5343e, i64* @r12, align 8
  %v1_53455 = inttoptr i64 %v3_53447 to i64*
  %v2_53455 = load i64, i64* %v1_53455, align 8
  store i64 %v2_53455, i64* @rax, align 8
  %v0_53461 = load i64, i64* @rbp, align 8
  store i64 %v0_53461, i64* @rdi, align 8
  ret i64 %v2_53455
}

define i64 @function_53470() local_unnamed_addr {
dec_label_pc_53470:
  %v0_53470 = load i64, i64* @rbx, align 8
  %v1_53470 = add i64 %v0_53470, 184
  %v2_53470 = inttoptr i64 %v1_53470 to i64*
  %v3_53470 = load i64, i64* %v2_53470, align 8
  store i64 %v3_53470, i64* @rdi, align 8
  %v1_5347a = inttoptr i64 %v3_53470 to i64*
  %v2_5347a = load i64, i64* %v1_5347a, align 8
  store i64 %v2_5347a, i64* @rax, align 8
  %v0_53483 = load i64, i64* @r12, align 8
  %v1_53483 = add i64 %v0_53483, 8
  %v2_53483 = inttoptr i64 %v1_53483 to i32*
  %v3_53483 = load i32, i32* %v2_53483, align 4
  %v5_53488 = icmp eq i32 %v3_53483, 0
  br i1 %v5_53488, label %bb, label %dec_label_pc_53491

bb:                                               ; preds = %dec_label_pc_53470
  %v2_5348b = call i64 @function_53574(i64 %v3_53470)
  store i64 %v2_5348b, i64* @rax, align 8
  %v0_53491.pre = load i64, i64* @r12, align 8
  %v0_5349f.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_53491

dec_label_pc_53491:                               ; preds = %bb, %dec_label_pc_53470
  %v0_534ad = phi i64 [ %v0_5349f.pre, %bb ], [ %v0_53470, %dec_label_pc_53470 ]
  %v0_53491 = phi i64 [ %v0_53491.pre, %bb ], [ %v0_53483, %dec_label_pc_53470 ]
  %v1_53491 = add i64 %v0_53491, 16
  %v2_53491 = inttoptr i64 %v1_53491 to i64*
  %v3_53491 = load i64, i64* %v2_53491, align 8
  store i64 %v3_53491, i64* @rdi, align 8
  %v1_53496 = inttoptr i64 %v3_53491 to i64*
  %v2_53496 = load i64, i64* %v1_53496, align 8
  store i64 %v2_53496, i64* @rax, align 8
  %v1_5349f = add i64 %v0_534ad, 128
  %v2_5349f = inttoptr i64 %v1_5349f to i64*
  %v3_5349f = load i64, i64* %v2_5349f, align 8
  %v1_534a6 = add i64 %v0_534ad, 136
  %v2_534a6 = inttoptr i64 %v1_534a6 to i64*
  %v3_534a6 = load i64, i64* %v2_534a6, align 8
  store i64 %v3_534a6, i64* @rdi, align 8
  %v1_534ad = add i64 %v0_534ad, 248
  %v2_534ad = inttoptr i64 %v1_534ad to i64*
  %v3_534ad = load i64, i64* %v2_534ad, align 8
  store i64 %v3_534ad, i64* @rdx, align 8
  store i64 %v3_5349f, i64* @rdi, align 8
  ret i64 %v2_53496
}

define i64 @function_534cc() local_unnamed_addr {
dec_label_pc_534cc:
  %v2_534cc = load i64, i64* @r13, align 8
  store i64 %v2_534cc, i64* @rax, align 8
  store i64 %v2_534cc, i64* @rdi, align 8
  %v4_534e0 = trunc i64 %v2_534cc to i8
  %v5_534e0 = icmp eq i8 %v4_534e0, 0
  %v0_53526 = load i64, i64* @rbx, align 8
  br i1 %v5_534e0, label %dec_label_pc_53526, label %dec_label_pc_534e4

dec_label_pc_534e4:                               ; preds = %dec_label_pc_534cc
  %v1_534e4 = add i64 %v0_53526, 24
  %v2_534e4 = inttoptr i64 %v1_534e4 to i64*
  %v3_534e4 = load i64, i64* %v2_534e4, align 8
  store i64 %v3_534e4, i64* @rdi, align 8
  %v1_534ef = inttoptr i64 %v3_534e4 to i64*
  %v2_534ef = load i64, i64* %v1_534ef, align 8
  store i64 %v2_534ef, i64* @rax, align 8
  %v0_534f8 = load i64, i64* @r12, align 8
  %v1_534f8 = add i64 %v0_534f8, 8
  %v2_534f8 = inttoptr i64 %v1_534f8 to i32*
  %v3_534f8 = load i32, i32* %v2_534f8, align 4
  %v4_534f8 = zext i32 %v3_534f8 to i64
  store i64 %v4_534f8, i64* @rax, align 8
  %v5_534fd = icmp eq i32 %v3_534f8, 0
  br i1 %v5_534fd, label %bb, label %dec_label_pc_53501

bb:                                               ; preds = %dec_label_pc_534e4
  %v2_534ff = call i64 @function_53574(i64 %v3_534e4)
  store i64 %v2_534ff, i64* @rax, align 8
  %v0_53501.pre = load i64, i64* @r12, align 8
  %v0_5350f.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_53501

dec_label_pc_53501:                               ; preds = %bb, %dec_label_pc_534e4
  %v0_5351d = phi i64 [ %v0_5350f.pre, %bb ], [ %v0_53526, %dec_label_pc_534e4 ]
  %v0_53501 = phi i64 [ %v0_53501.pre, %bb ], [ %v0_534f8, %dec_label_pc_534e4 ]
  %v1_53501 = add i64 %v0_53501, 16
  %v2_53501 = inttoptr i64 %v1_53501 to i64*
  %v3_53501 = load i64, i64* %v2_53501, align 8
  store i64 %v3_53501, i64* @rdi, align 8
  %v1_53506 = inttoptr i64 %v3_53501 to i64*
  %v2_53506 = load i64, i64* %v1_53506, align 8
  store i64 %v2_53506, i64* @rax, align 8
  %v1_5350f = add i64 %v0_5351d, 128
  %v2_5350f = inttoptr i64 %v1_5350f to i64*
  %v3_5350f = load i64, i64* %v2_5350f, align 8
  store i64 %v3_5350f, i64* @rbp, align 8
  %v1_53516 = add i64 %v0_5351d, 136
  %v2_53516 = inttoptr i64 %v1_53516 to i64*
  %v3_53516 = load i64, i64* %v2_53516, align 8
  store i64 %v3_53516, i64* @rdi, align 8
  %v1_5351d = add i64 %v0_5351d, 152
  %v2_5351d = inttoptr i64 %v1_5351d to i64*
  %v3_5351d = load i64, i64* %v2_5351d, align 8
  store i64 %v3_5351d, i64* @rdx, align 8
  ret i64 %v2_53506

dec_label_pc_53526:                               ; preds = %dec_label_pc_534cc
  %v1_53526 = add i64 %v0_53526, 184
  %v2_53526 = inttoptr i64 %v1_53526 to i64*
  %v3_53526 = load i64, i64* %v2_53526, align 8
  store i64 %v3_53526, i64* @rdi, align 8
  %v1_53530 = inttoptr i64 %v3_53526 to i64*
  %v2_53530 = load i64, i64* %v1_53530, align 8
  store i64 %v2_53530, i64* @rax, align 8
  %v1_53539 = add i64 %v0_53526, 40
  %v2_53539 = inttoptr i64 %v1_53539 to i64*
  %v3_53539 = load i64, i64* %v2_53539, align 8
  store i64 %v3_53539, i64* @rdi, align 8
  %v1_5353d = inttoptr i64 %v3_53539 to i64*
  %v2_5353d = load i64, i64* %v1_5353d, align 8
  store i64 %v2_5353d, i64* @rax, align 8
  store i64 %v2_5353d, i64* @rbx, align 8
  %v1_53549 = inttoptr i64 %v2_5353d to i64*
  %v2_53549 = load i64, i64* %v1_53549, align 8
  store i64 %v2_53549, i64* @rax, align 8
  %v0_53567 = load i64, i64* @rbp, align 8
  store i64 %v0_53567, i64* @rdi, align 8
  ret i64 %v2_53549
}

define i64 @function_53574(i64 %arg1) local_unnamed_addr {
dec_label_pc_53574:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN4lang12lang_luaj$538onInvokeEJPN3org4luaj3vm27VarargsES5_"(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_53580:
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v0_5358f = load i64, i64* @rdi, align 8
  store i64 %v0_5358f, i64* @rbx, align 8
  store i64 341401, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_53a40(i64 %arg1) local_unnamed_addr {
dec_label_pc_53a40:
  store i64 %arg1, i64* @rdi, align 8
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

define i64 @function_53a80() local_unnamed_addr {
dec_label_pc_53a80:
  %r12.global-to-local = alloca i64, align 8
  %tmp230 = call i64 @__decompiler_undefined_function_0()
  %v1_53a80 = add i64 %tmp230, 8
  %v2_53a80 = inttoptr i64 %v1_53a80 to i32*
  %v3_53a80 = load i32, i32* %v2_53a80, align 4
  %v5_53a89 = icmp eq i32 %v3_53a80, 0
  br i1 %v5_53a89, label %bb, label %dec_label_pc_53a91

bb:                                               ; preds = %dec_label_pc_53a80
  %v1_53a8b = load i64, i64* @rdi, align 8
  %v2_53a8b = call i64 @function_53e17(i64 %v1_53a8b)
  store i64 %v2_53a8b, i64* @rax, align 8
  %v0_53a9a.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_53a91

dec_label_pc_53a91:                               ; preds = %bb, %dec_label_pc_53a80
  %v0_53a9a = phi i64 [ %v0_53a9a.pre, %bb ], [ %tmp230, %dec_label_pc_53a80 ]
  store i64 342680, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  %v1_53a9a = add i64 %v0_53a9a, 16
  %v2_53a9a = inttoptr i64 %v1_53a9a to i64*
  %v3_53a9a = load i64, i64* %v2_53a9a, align 8
  store i64 %v3_53a9a, i64* %r12.global-to-local, align 8
  ret i64 0
}

define i64 @function_53ad6() local_unnamed_addr {
dec_label_pc_53ad6:
  store i64 342749, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @function_53b08(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_53b08:
  store i64 %arg1, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 %arg3, i64* @r12, align 8
  %v0_53b16 = load i64, i64* @rax, align 8
  ret i64 %v0_53b16
}

define i64 @function_53b20() local_unnamed_addr {
dec_label_pc_53b20:
  store i64 342830, i64* @rdi, align 8
  %v1_53b2e = call i64 @function_53a40(i64 342830)
  store i64 %v1_53b2e, i64* @rax, align 8
  ret i64 %v1_53b2e
}

define i64 @function_53b33(i64 %arg1) local_unnamed_addr {
dec_label_pc_53b33:
  store i64 %arg1, i64* @rdi, align 8
  %v6_53b44 = call i64 @function_53b08(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_53b44, i64* @rax, align 8
  ret i64 %v6_53b44
}

define i64 @function_53b46(i64 %arg1) local_unnamed_addr {
dec_label_pc_53b46:
  %v0_53b46 = load i64, i64* @rbx, align 8
  %v1_53b46 = add i64 %v0_53b46, 168
  %v2_53b46 = inttoptr i64 %v1_53b46 to i64*
  %v3_53b46 = load i64, i64* %v2_53b46, align 8
  store i64 %v3_53b46, i64* @rdi, align 8
  %v1_53b50 = inttoptr i64 %v3_53b46 to i64*
  %v2_53b50 = load i64, i64* %v1_53b50, align 8
  store i64 %v2_53b50, i64* @rax, align 8
  %v1_53b5e = add i64 %v0_53b46, 192
  %v2_53b5e = inttoptr i64 %v1_53b5e to i64*
  %v3_53b5e = load i64, i64* %v2_53b5e, align 8
  store i64 %v3_53b5e, i64* @rax, align 8
  %v1_53b65 = add i64 %v3_53b5e, 8
  %v2_53b65 = inttoptr i64 %v1_53b65 to i32*
  %v3_53b65 = load i32, i32* %v2_53b65, align 4
  %v4_53b65 = zext i32 %v3_53b65 to i64
  store i64 %v4_53b65, i64* @rdi, align 8
  %v7_53b68 = icmp eq i32 %v3_53b65, 0
  br i1 %v7_53b68, label %bb, label %dec_label_pc_53b70

bb:                                               ; preds = %dec_label_pc_53b46
  %v3_53b6a = call i64 @function_53e17(i64 0)
  store i64 %v3_53b6a, i64* @rax, align 8
  br label %dec_label_pc_53b70

dec_label_pc_53b70:                               ; preds = %bb, %dec_label_pc_53b46
  %v0_53b70 = phi i64 [ %v3_53b6a, %bb ], [ %v3_53b5e, %dec_label_pc_53b46 ]
  %v1_53b70 = add i64 %v0_53b70, 16
  %v2_53b70 = inttoptr i64 %v1_53b70 to i64*
  %v3_53b70 = load i64, i64* %v2_53b70, align 8
  store i64 %v3_53b70, i64* @rax, align 8
  %v0_53b74 = load i64, i64* inttoptr (i64 342907 to i64*), align 8
  store i64 %v0_53b74, i64* @r12, align 8
  br label %dec_label_pc_53b88

dec_label_pc_53b88:                               ; preds = %dec_label_pc_53b88.backedge, %dec_label_pc_53b70
  %storemerge8 = phi i64 [ %storemerge9, %dec_label_pc_53b88.backedge ], [ %arg1, %dec_label_pc_53b70 ]
  %v0_53b88 = load i64, i64* @rbx, align 8
  %v1_53b88 = add i64 %v0_53b88, 184
  %v2_53b88 = inttoptr i64 %v1_53b88 to i64*
  %v3_53b88 = load i64, i64* %v2_53b88, align 8
  store i64 %v3_53b88, i64* @rdi, align 8
  %v1_53b8f = inttoptr i64 %v3_53b88 to i64*
  %v2_53b8f = load i64, i64* %v1_53b8f, align 8
  store i64 %v2_53b8f, i64* @rax, align 8
  %v1_53b98 = inttoptr i64 %v2_53b8f to i64*
  %v2_53b98 = load i64, i64* %v1_53b98, align 8
  store i64 %v2_53b98, i64* @rdx, align 8
  store i64 %v2_53b8f, i64* @rdi, align 8
  %v4_53ba4 = trunc i64 %v2_53b8f to i8
  %v5_53ba4 = icmp eq i8 %v4_53ba4, 0
  %v1_53ba6 = icmp eq i1 %v5_53ba4, false
  br i1 %v1_53ba6, label %dec_label_pc_53dcd, label %dec_label_pc_53bac

dec_label_pc_53bac:                               ; preds = %dec_label_pc_53b88
  %v1_53bac = add i64 %v0_53b88, 200
  %v2_53bac = inttoptr i64 %v1_53bac to i64*
  %v3_53bac = load i64, i64* %v2_53bac, align 8
  store i64 %v3_53bac, i64* @rax, align 8
  %v1_53bb3 = add i64 %v3_53bac, 8
  %v2_53bb3 = inttoptr i64 %v1_53bb3 to i32*
  %v3_53bb3 = load i32, i32* %v2_53bb3, align 4
  %v5_53bb6 = icmp eq i32 %v3_53bb3, 0
  br i1 %v5_53bb6, label %bb264, label %dec_label_pc_53bbe

bb264:                                            ; preds = %dec_label_pc_53bac
  %v2_53bb8 = call i64 @function_53e17(i64 %v2_53b8f)
  store i64 %v2_53bb8, i64* @rax, align 8
  %v0_53ce0.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_53bbe

dec_label_pc_53bbe:                               ; preds = %bb264, %dec_label_pc_53bac
  %v0_53ce0 = phi i64 [ %v0_53ce0.pre, %bb264 ], [ %v0_53b88, %dec_label_pc_53bac ]
  %v0_53bbe = phi i64 [ %v2_53bb8, %bb264 ], [ %v3_53bac, %dec_label_pc_53bac ]
  %v1_53bbe = add i64 %v0_53bbe, 16
  %v2_53bbe = inttoptr i64 %v1_53bbe to i64*
  %v3_53bbe = load i64, i64* %v2_53bbe, align 8
  store i64 %v3_53bbe, i64* @rdi, align 8
  %v1_53bc7 = inttoptr i64 %v3_53bbe to i64*
  %v2_53bc7 = load i64, i64* %v1_53bc7, align 8
  store i64 %v2_53bc7, i64* @rax, align 8
  %v1_53bd0 = inttoptr i64 %v2_53bc7 to i64*
  %v2_53bd0 = load i64, i64* %v1_53bd0, align 8
  store i64 %v2_53bd0, i64* @rdx, align 8
  store i64 %v2_53bc7, i64* @rdi, align 8
  %v4_53bdc = trunc i64 %v2_53bc7 to i8
  %v5_53bdc = icmp eq i8 %v4_53bdc, 0
  br i1 %v5_53bdc, label %dec_label_pc_53ce0, label %dec_label_pc_53be4

dec_label_pc_53be4:                               ; preds = %dec_label_pc_53bbe
  %v1_53be4 = add i64 %v0_53ce0, 208
  %v2_53be4 = inttoptr i64 %v1_53be4 to i64*
  %v3_53be4 = load i64, i64* %v2_53be4, align 8
  store i64 %v3_53be4, i64* @rax, align 8
  %v1_53beb = add i64 %v3_53be4, 8
  %v2_53beb = inttoptr i64 %v1_53beb to i32*
  %v3_53beb = load i32, i32* %v2_53beb, align 4
  %v4_53beb = zext i32 %v3_53beb to i64
  store i64 %v4_53beb, i64* @rcx, align 8
  %v5_53bee = icmp eq i32 %v3_53beb, 0
  br i1 %v5_53bee, label %bb265, label %dec_label_pc_53bf6

bb265:                                            ; preds = %dec_label_pc_53be4
  %v2_53bf0 = call i64 @function_53e17(i64 %v2_53bc7)
  store i64 %v2_53bf0, i64* @rax, align 8
  br label %dec_label_pc_53bf6

dec_label_pc_53bf6:                               ; preds = %bb265, %dec_label_pc_53be4
  %v0_53bf6 = phi i64 [ %v2_53bf0, %bb265 ], [ %v3_53be4, %dec_label_pc_53be4 ]
  %v1_53bf6 = add i64 %v0_53bf6, 16
  %v2_53bf6 = inttoptr i64 %v1_53bf6 to i64*
  %v3_53bf6 = load i64, i64* %v2_53bf6, align 8
  %v2_53bfa = load i64, i64* @rbp, align 8
  store i64 %v2_53bfa, i64* @rax, align 8
  store i64 %v2_53bfa, i64* @rdi, align 8
  store i64 %v2_53bfa, i64* @rdx, align 8
  store i64 %v2_53bfa, i64* @rdi, align 8
  %v0_53c76.pre = load i64, i64* @r12, align 8
  %v1_53c76 = inttoptr i64 %v0_53c76.pre to i64*
  %v2_53c76270 = load i64, i64* %v1_53c76, align 8
  store i64 %v2_53c76270, i64* @rax, align 8
  store i64 %v0_53c76.pre, i64* @rdi, align 8
  %v4_53c86271 = trunc i64 %v2_53c76270 to i8
  %v5_53c86272 = icmp eq i8 %v4_53c86271, 0
  %v1_53c88273 = icmp eq i1 %v5_53c86272, false
  %v0_53c23.pre = load i64, i64* @rbx, align 8
  br i1 %v1_53c88273, label %dec_label_pc_53c20, label %dec_label_pc_53c8a

dec_label_pc_53c20:                               ; preds = %dec_label_pc_53bf6, %dec_label_pc_53c20
  %v0_53c60275 = phi i64 [ %v2_53c60, %dec_label_pc_53c20 ], [ %v2_53bfa, %dec_label_pc_53bf6 ]
  %v0_53c4d274 = phi i64 [ %v2_53c20, %dec_label_pc_53c20 ], [ %v3_53bf6, %dec_label_pc_53bf6 ]
  %v1_53c20 = inttoptr i64 %v0_53c60275 to i64*
  %v2_53c20 = load i64, i64* %v1_53c20, align 8
  store i64 %v2_53c20, i64* @rax, align 8
  %v1_53c23 = add i64 %v0_53c23.pre, 216
  %v2_53c23 = inttoptr i64 %v1_53c23 to i64*
  %v3_53c23 = load i64, i64* %v2_53c23, align 8
  store i64 %v2_53bfa, i64* @rdx, align 8
  store i64 %v2_53bfa, i64* @rdi, align 8
  store i64 %v0_53c4d274, i64* @rdx, align 8
  store i64 %v3_53c23, i64* @rdi, align 8
  %v2_53c60 = load i64, i64* %v1_53c20, align 8
  store i64 %v2_53c60, i64* @rax, align 8
  store i64 %v0_53c60275, i64* @rdi, align 8
  %v2_53c76 = load i64, i64* %v1_53c76, align 8
  store i64 %v2_53c76, i64* @rax, align 8
  store i64 %v0_53c76.pre, i64* @rdi, align 8
  %v4_53c86 = trunc i64 %v2_53c76 to i8
  %v5_53c86 = icmp eq i8 %v4_53c86, 0
  %v1_53c88 = icmp eq i1 %v5_53c86, false
  br i1 %v1_53c88, label %dec_label_pc_53c20, label %dec_label_pc_53c8a

dec_label_pc_53c8a:                               ; preds = %dec_label_pc_53bf6, %dec_label_pc_53c20
  %v0_53c4d.lcssa = phi i64 [ %v2_53c20, %dec_label_pc_53c20 ], [ %v3_53bf6, %dec_label_pc_53bf6 ]
  %v1_53c8a = add i64 %v0_53c23.pre, 224
  %v2_53c8a = inttoptr i64 %v1_53c8a to i64*
  %v3_53c8a = load i64, i64* %v2_53c8a, align 8
  store i64 %v3_53c8a, i64* @rdi, align 8
  store i64 %storemerge8, i64* @rdx, align 8
  store i64 %v0_53c4d.lcssa, i64* @rcx, align 8
  store i64 %v2_53bfa, i64* @rax, align 8
  store i64 %v2_53bfa, i64* @rdi, align 8
  store i64 %v2_53bfa, i64* @r12, align 8
  %v1_53cbc = add i64 %v0_53c23.pre, 208
  %v2_53cbc = inttoptr i64 %v1_53cbc to i64*
  %v3_53cbc = load i64, i64* %v2_53cbc, align 8
  store i64 %v3_53cbc, i64* @rax, align 8
  %v1_53cc3 = add i64 %v3_53cbc, 8
  %v2_53cc3 = inttoptr i64 %v1_53cc3 to i32*
  %v3_53cc3 = load i32, i32* %v2_53cc3, align 4
  %v4_53cc3 = zext i32 %v3_53cc3 to i64
  store i64 %v4_53cc3, i64* @rdx, align 8
  %v5_53cc6 = icmp eq i32 %v3_53cc3, 0
  br i1 %v5_53cc6, label %bb266, label %dec_label_pc_53cce

bb266:                                            ; preds = %dec_label_pc_53c8a
  %v2_53cc8 = call i64 @function_53e17(i64 %v2_53bfa)
  store i64 %v2_53cc8, i64* @rax, align 8
  br label %dec_label_pc_53cce

dec_label_pc_53cce:                               ; preds = %bb266, %dec_label_pc_53c8a
  %v0_53cce = phi i64 [ %v2_53cc8, %bb266 ], [ %v3_53cbc, %dec_label_pc_53c8a ]
  %v1_53cce = add i64 %v0_53cce, 16
  br label %dec_label_pc_53b88.backedge

dec_label_pc_53b88.backedge:                      ; preds = %dec_label_pc_53cce, %dec_label_pc_53d2e
  %storemerge9.in.in = phi i64 [ %v3_53da8, %dec_label_pc_53d2e ], [ %v1_53cce, %dec_label_pc_53cce ]
  %storemerge9.in = inttoptr i64 %storemerge9.in.in to i64*
  %storemerge9 = load i64, i64* %storemerge9.in, align 8
  store i64 %storemerge9, i64* @rax, align 8
  br label %dec_label_pc_53b88

dec_label_pc_53ce0:                               ; preds = %dec_label_pc_53bbe
  %v1_53ce0 = add i64 %v0_53ce0, 152
  %v2_53ce0 = inttoptr i64 %v1_53ce0 to i64*
  %v3_53ce0 = load i64, i64* %v2_53ce0, align 8
  store i64 %v3_53ce0, i64* @rdi, align 8
  %v1_53cec = inttoptr i64 %v3_53ce0 to i64*
  %v2_53cec = load i64, i64* %v1_53cec, align 8
  store i64 %v2_53cec, i64* @rax, align 8
  %v1_53cf5 = inttoptr i64 %v2_53cec to i64*
  %v2_53cf5 = load i64, i64* %v1_53cf5, align 8
  store i64 %v2_53cf5, i64* @rdx, align 8
  store i64 %v2_53cec, i64* @rdi, align 8
  %v4_53d01 = trunc i64 %v2_53cec to i8
  %v5_53d01 = icmp eq i8 %v4_53d01, 0
  br i1 %v5_53d01, label %bb267, label %dec_label_pc_53d09

bb267:                                            ; preds = %dec_label_pc_53ce0
  %v2_53d03 = call i64 @function_53b33(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_53d03, i64* @rax, align 8
  br label %dec_label_pc_53d09

dec_label_pc_53d09:                               ; preds = %bb267, %dec_label_pc_53ce0
  %v2_53d09 = load i64, i64* @rbp, align 8
  store i64 %v2_53d09, i64* @rax, align 8
  store i64 %v2_53d09, i64* @rdi, align 8
  %v0_53d16 = load i64, i64* @r12, align 8
  %v1_53d16 = inttoptr i64 %v0_53d16 to i64*
  %v2_53d16 = load i64, i64* %v1_53d16, align 8
  store i64 %v2_53d16, i64* @rdx, align 8
  store i64 %v0_53d16, i64* @rdi, align 8
  %v4_53d26 = trunc i64 %v2_53d09 to i8
  %v5_53d26 = icmp eq i8 %v4_53d26, 0
  br i1 %v5_53d26, label %bb268, label %dec_label_pc_53d2e

bb268:                                            ; preds = %dec_label_pc_53d09
  %v2_53d28 = call i64 @function_53b33(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_53d28, i64* @rax, align 8
  %v0_53d2e.pre = load i64, i64* @r12, align 8
  %v2_53d42.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_53d2e

dec_label_pc_53d2e:                               ; preds = %bb268, %dec_label_pc_53d09
  %v2_53d42 = phi i64 [ %v2_53d42.pre, %bb268 ], [ %v2_53d09, %dec_label_pc_53d09 ]
  %v0_53d57 = phi i64 [ %v0_53d2e.pre, %bb268 ], [ %v0_53d16, %dec_label_pc_53d09 ]
  %v1_53d2e = inttoptr i64 %v0_53d57 to i64*
  %v2_53d2e = load i64, i64* %v1_53d2e, align 8
  store i64 %v2_53d2e, i64* @rax, align 8
  store i64 %v2_53d42, i64* @rdx, align 8
  store i64 %v2_53d42, i64* @rdi, align 8
  %v2_53d57 = load i64, i64* %v1_53d2e, align 8
  store i64 %v2_53d57, i64* @rax, align 8
  store i64 %v0_53d57, i64* @rdi, align 8
  %v0_53d6b = load i64, i64* @rbx, align 8
  %v1_53d6b = add i64 %v0_53d6b, 168
  %v2_53d6b = inttoptr i64 %v1_53d6b to i64*
  %v3_53d6b = load i64, i64* %v2_53d6b, align 8
  store i64 %v3_53d6b, i64* @rdi, align 8
  %v1_53d72 = add i64 %v0_53d6b, 224
  %v2_53d72 = inttoptr i64 %v1_53d72 to i64*
  %v3_53d72 = load i64, i64* %v2_53d72, align 8
  store i64 %v2_53d57, i64* @r12, align 8
  %v1_53d81 = inttoptr i64 %v3_53d6b to i64*
  %v2_53d81 = load i64, i64* %v1_53d81, align 8
  store i64 %v2_53d81, i64* @rax, align 8
  store i64 %v2_53d2e, i64* @rcx, align 8
  store i64 %v2_53d81, i64* @rdx, align 8
  store i64 %v3_53d72, i64* @rdi, align 8
  %v1_53da8 = add i64 %v0_53d6b, 176
  %v2_53da8 = inttoptr i64 %v1_53da8 to i64*
  %v3_53da8 = load i64, i64* %v2_53da8, align 8
  store i64 %v3_53da8, i64* @rdi, align 8
  br label %dec_label_pc_53b88.backedge

dec_label_pc_53dcd:                               ; preds = %dec_label_pc_53b88
  %v2_53dcd = load i64, i64* @rbp, align 8
  store i64 %v2_53dcd, i64* @rax, align 8
  store i64 %v2_53dcd, i64* @rdx, align 8
  store i64 %v2_53dcd, i64* @rdi, align 8
  %v4_53de9 = trunc i64 %v2_53dcd to i8
  %v5_53de9 = icmp eq i8 %v4_53de9, 0
  br i1 %v5_53de9, label %bb269, label %dec_label_pc_53df1

bb269:                                            ; preds = %dec_label_pc_53dcd
  %v2_53deb = call i64 @function_53b33(i64 ptrtoint (i32* @0 to i64))
  store i64 %v2_53deb, i64* @rax, align 8
  %v0_53df1.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_53df1

dec_label_pc_53df1:                               ; preds = %bb269, %dec_label_pc_53dcd
  %v0_53df1 = phi i64 [ %v0_53df1.pre, %bb269 ], [ %v0_53b88, %dec_label_pc_53dcd ]
  %v1_53df1 = add i64 %v0_53df1, 232
  %v2_53df1 = inttoptr i64 %v1_53df1 to i64*
  %v3_53df1 = load i64, i64* %v2_53df1, align 8
  store i64 %v3_53df1, i64* @rbx, align 8
  store i64 %v3_53df1, i64* @rdi, align 8
  %v6_53e12 = call i64 @function_53b08(i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v6_53e12, i64* @rax, align 8
  ret i64 %v6_53e12
}

define i64 @function_53e17(i64 %arg1) local_unnamed_addr {
dec_label_pc_53e17:
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* @rax, align 8
  ret i64 0
}

define i64 @"_ZN3org4luaj3vm23lib5IoLib9checkopenEJPNS2_10IoLib$FileES5_.part.89"() local_unnamed_addr {
dec_label_pc_67bcc:
  %v0_67bd0 = load i64, i64* inttoptr (i64 424919 to i64*), align 8
  store i64 %v0_67bd0, i64* @rdi, align 8
  %v0_67bd7 = load i64, i64* @rax, align 8
  ret i64 %v0_67bd7
}

define i64 @_ZN3org4luaj3vm28LuaValue7assert_EJvbPN4java4lang6StringE.part.98() local_unnamed_addr {
dec_label_pc_67bdc:
  %tmp234 = load i64, i64* @rax, align 8
  ret i64 %tmp234
}

define i64 @function_67bf8() local_unnamed_addr {
dec_label_pc_67bf8:
  %v0_67bf8 = load i64, i64* @rax, align 8
  ret i64 %v0_67bf8
}

define i64 @_Jv_global_static_constructor() local_unnamed_addr {
dec_label_pc_67c20:
  store i64 424999, i64* @rdi, align 8
  %v17_67c27 = load i64, i64* @rax, align 8
  ret i64 %v17_67c27
}

define i64 @function_10027de9() local_unnamed_addr {
dec_label_pc_10027de9:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

declare i64 @unknown_1069ce7e() local_unnamed_addr

define i64 @function_ffffffffc0f1add6() local_unnamed_addr {
dec_label_pc_ffffffffc0f1add6:
  %tmp = load i64, i64* @rax, align 8
  ret i64 %tmp
}

; Function Attrs: nounwind readnone
declare i8 @llvm.ctpop.i8(i8) #0

declare i128 @__asm_pxor(i128, i128) local_unnamed_addr

declare i128 @__asm_cvtsi2sd(i64) local_unnamed_addr

declare i128 @__asm_movsd(i64) local_unnamed_addr

declare i64 @__asm_movsd.7465(i128) local_unnamed_addr

declare void @__asm_ucomisd(i128, i128) local_unnamed_addr

declare i128 @__asm_movapd(i128) local_unnamed_addr

declare i128 @__asm_xorpd(i128, i128) local_unnamed_addr

declare i128 @__asm_divsd(i128, i128) local_unnamed_addr

declare i128 @__asm_mulsd(i128, i128) local_unnamed_addr

declare i128 @__asm_subsd(i128, i128) local_unnamed_addr

declare i128 @__asm_mulsd.7466(i128, i64) local_unnamed_addr

declare i128 @__asm_sqrtsd(i128) local_unnamed_addr

declare i32 @__asm_cvttsd2si(i128) local_unnamed_addr

declare void @__asm_ucomisd.7467(i128, i64) local_unnamed_addr

declare i128 @__asm_cvtsd2ss(i64) local_unnamed_addr

declare i128 @__asm_cvtsi2sd.7468(i32) local_unnamed_addr

declare i128 @__asm_addsd(i128, i128) local_unnamed_addr

declare i128 @__asm_andpd(i128, i128) local_unnamed_addr

declare i64 @__asm_cvttsd2si.7470(i128) local_unnamed_addr

declare i128 @__asm_andnpd(i128, i128) local_unnamed_addr

declare i128 @__asm_cmpnlesd(i128, i128) local_unnamed_addr

declare i128 @__asm_orpd(i128, i128) local_unnamed_addr

declare i128 @__asm_cvtsi2ss(i32) local_unnamed_addr

declare i128 @__asm_cvtsd2ss.7471(i128) local_unnamed_addr

declare i128 @__asm_addsd.7472(i128, i64) local_unnamed_addr

declare i128 @__asm_subsd.7473(i128, i64) local_unnamed_addr

declare i32 @__asm_insd(i16) local_unnamed_addr

declare i64 @__decompiler_undefined_function_0() local_unnamed_addr

declare i128 @__decompiler_undefined_function_1() local_unnamed_addr

declare i32 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

attributes #0 = { nounwind readnone }
