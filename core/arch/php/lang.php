<?php
/* Generated by make.rkt */
/*
    The Language
    Copyright (C) 2018, 2019  Zaoqi <zaomir@outlook.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/

$the_language = null;
$the_language = call(new Func(function() {
  $exports = null; $symbol_t = null; $construction_t = null; $null_t = null; $data_t = null; $error_t = null; $just_t = null; $delay_evaluate_t = null; $delay_builtin_func_t = null; $delay_builtin_form_t = null; $delay_apply_t = null; $null_v = null; $system_symbol = null; $name_symbol = null; $function_symbol = null; $form_symbol = null; $equal_symbol = null; $evaluate_sym = null; $theThing_symbol = null; $something_symbol = null; $mapping_symbol = null; $if_symbol = null; $typeAnnotation_symbol = null; $isOrNot_symbol = null; $sub_symbol = null; $true_symbol = null; $false_symbol = null; $quote_symbol = null; $apply_symbol = null; $null_symbol = null; $construction_symbol = null; $data_symbol = null; $error_symbol = null; $symbol_symbol = null; $list_symbol = null; $head_symbol = null; $tail_symbol = null; $thing_symbol = null; $theWorldStopped_symbol = null; $effect_symbol = null; $sequentialWordFormation_symbol = null; $inputOutput_symbol = null; $the_world_stopped_v = null; $new_data_function_builtin_systemName = null; $data_name_function_builtin_systemName = null; $data_list_function_builtin_systemName = null; $data_p_function_builtin_systemName = null; $new_error_function_builtin_systemName = null; $error_name_function_builtin_systemName = null; $error_list_function_builtin_systemName = null; $error_p_function_builtin_systemName = null; $new_construction_function_builtin_systemName = null; $construction_p_function_builtin_systemName = null; $construction_head_function_builtin_systemName = null; $construction_tail_function_builtin_systemName = null; $symbol_p_function_builtin_systemName = null; $null_p_function_builtin_systemName = null; $equal_p_function_builtin_systemName = null; $apply_function_builtin_systemName = null; $evaluate_function_builtin_systemName = null; $list_chooseOne_function_builtin_systemName = null; $if_function_builtin_systemName = null; $quote_form_builtin_systemName = null; $lambda_form_builtin_systemName = null; $function_builtin_use_systemName = null; $form_builtin_use_systemName = null; $form_use_systemName = null; $false_v = null; $true_v = null; $env_null_v = null; $real_builtin_func_apply_s = null; $return_inputOutput_systemName = null; $bind_inputOutput_systemName = null; $ecmascript_systemName = null;
  $ERROR = new Func("ERROR", function() {
    throw new Ex("TheLanguage PANIC");
  });
  $ASSERT = new Func("ASSERT", function($x = null) use (&$ERROR) {
    if (not($x)) {
      return call($ERROR);
    }
  });
  $new_symbol = new Func("new_symbol", function($x = null) use (&$symbol_t) {
    return new Arr($symbol_t, $x);
  });
  $symbol_p = new Func("symbol_p", function($x = null) {
    return $x[0] === 0;
  });
  $un_symbol = new Func("un_symbol", function($x = null) {
    return $x[1];
  });
  $new_construction = new Func("new_construction", function($x = null, $y = null) use (&$construction_t) {
    return new Arr($construction_t, $x, $y);
  });
  $construction_p = new Func("construction_p", function($x = null) use (&$construction_t) {
    return $x[0] === $construction_t;
  });
  $construction_head = new Func("construction_head", function($x = null) {
    return $x[1];
  });
  $construction_tail = new Func("construction_tail", function($x = null) {
    return $x[2];
  });
  $null_p = new Func("null_p", function($x = null) use (&$null_t) {
    return $x[0] === $null_t;
  });
  $new_data = new Func("new_data", function($x = null, $y = null) use (&$data_t) {
    return new Arr($data_t, $x, $y);
  });
  $data_p = new Func("data_p", function($x = null) use (&$data_t) {
    return $x[0] === $data_t;
  });
  $data_name = new Func("data_name", function($x = null) {
    return $x[1];
  });
  $data_list = new Func("data_list", function($x = null) {
    return $x[2];
  });
  $new_error = new Func("new_error", function($x = null, $y = null) use (&$error_t) {
    return new Arr($error_t, $x, $y);
  });
  $error_p = new Func("error_p", function($x = null) use (&$error_t) {
    return $x[0] === $error_t;
  });
  $error_name = new Func("error_name", function($x = null) {
    return $x[1];
  });
  $error_list = new Func("error_list", function($x = null) {
    return $x[2];
  });
  $lang_set_do = new Func("lang_set_do", function($x = null, $y = null) use (&$just_t) {
    if ($x === $y) {
      return ;
    }
    set($x, 0, $just_t);
    set($x, 1, $y);
    set($x, 2, false);
    set($x, 3, false);
  });
  $just_p = new Func("just_p", function($x = null) use (&$just_t) {
    return $x[0] === $just_t;
  });
  $un_just = new Func("un_just", function($x = null) {
    return $x[1];
  });
  $evaluate = new Func("evaluate", function($x = null, $y = null) use (&$delay_evaluate_t) {
    return new Arr($delay_evaluate_t, $x, $y);
  });
  $delay_evaluate_p = new Func("delay_evaluate_p", function($x = null) use (&$delay_evaluate_t) {
    return $x[0] === $delay_evaluate_t;
  });
  $delay_evaluate_env = new Func("delay_evaluate_env", function($x = null) {
    return $x[1];
  });
  $delay_evaluate_x = new Func("delay_evaluate_x", function($x = null) {
    return $x[2];
  });
  $builtin_form_apply = new Func("builtin_form_apply", function($x = null, $y = null, $z = null) use (&$delay_builtin_form_t) {
    return new Arr($delay_builtin_form_t, $x, $y, $z);
  });
  $delay_builtin_form_p = new Func("delay_builtin_form_p", function($x = null) use (&$delay_builtin_form_t) {
    return $x[0] === $delay_builtin_form_t;
  });
  $delay_builtin_form_env = new Func("delay_builtin_form_env", function($x = null) {
    return $x[1];
  });
  $delay_builtin_form_f = new Func("delay_builtin_form_f", function($x = null) {
    return $x[2];
  });
  $delay_builtin_form_xs = new Func("delay_builtin_form_xs", function($x = null) {
    return $x[3];
  });
  $builtin_func_apply = new Func("builtin_func_apply", function($x = null, $y = null) use (&$delay_builtin_func_t) {
    return new Arr($delay_builtin_func_t, $x, $y);
  });
  $delay_builtin_func_p = new Func("delay_builtin_func_p", function($x = null) use (&$delay_builtin_func_t) {
    return $x[0] === $delay_builtin_func_t;
  });
  $delay_builtin_func_f = new Func("delay_builtin_func_f", function($x = null) {
    return $x[1];
  });
  $delay_builtin_func_xs = new Func("delay_builtin_func_xs", function($x = null) {
    return $x[2];
  });
  $apply = new Func("apply", function($f = null, $xs = null) use (&$delay_apply_t) {
    return new Arr($delay_apply_t, $f, $xs);
  });
  $delay_apply_p = new Func("delay_apply_p", function($x = null) use (&$delay_apply_t) {
    return $x[0] === $delay_apply_t;
  });
  $delay_apply_f = new Func("delay_apply_f", function($x = null) {
    return $x[1];
  });
  $delay_apply_xs = new Func("delay_apply_xs", function($x = null) {
    return $x[2];
  });
  $force_all_rec = new Func("force_all_rec", function($raw = null) use (&$force_all, &$data_p, &$error_p, &$construction_p) {
    $force_all_rec = Func::getCurrent();
    $x = null; $a = null; $d = null;
    $x = call($force_all, $raw);
    if (is(call($data_p, $x))) {
      $a = $x[1];
      $d = $x[2];
      set($x, 1, call($force_all_rec, $a));
      set($x, 2, call($force_all_rec, $d));
      return $x;
    } else if (is(call($error_p, $x))) {
      $a = $x[1];
      $d = $x[2];
      set($x, 1, call($force_all_rec, $a));
      set($x, 2, call($force_all_rec, $d));
      return $x;
    } else if (is(call($construction_p, $x))) {
      $a = $x[1];
      $d = $x[2];
      set($x, 1, call($force_all_rec, $a));
      set($x, 2, call($force_all_rec, $d));
      return $x;
    }


    return $x;
  });
  $systemName_make = new Func("systemName_make", function($x = null) use (&$new_data, &$name_symbol, &$new_list, &$system_symbol) {
    return call($new_data, $name_symbol, call($new_list, $system_symbol, $x));
  });
  $make_builtin_f_new_sym_f = new Func("make_builtin_f_new_sym_f", function($x_sym = null) use (&$systemName_make, &$new_list, &$typeAnnotation_symbol, &$theThing_symbol, &$function_symbol, &$something_symbol) {
    return call($systemName_make, call($new_list, $typeAnnotation_symbol, call($new_list, $function_symbol, $something_symbol, $x_sym), $theThing_symbol));
  });
  $make_builtin_f_get_sym_f = new Func("make_builtin_f_get_sym_f", function($t_sym = null, $x_sym = null) use (&$systemName_make, &$new_list, &$typeAnnotation_symbol, &$function_symbol, &$something_symbol) {
    return call($systemName_make, call($new_list, $typeAnnotation_symbol, call($new_list, $function_symbol, call($new_list, $t_sym), $something_symbol), $x_sym));
  });
  $make_builtin_f_p_sym_f = new Func("make_builtin_f_p_sym_f", function($t_sym = null) use (&$systemName_make, &$new_list, &$typeAnnotation_symbol, &$function_symbol, &$isOrNot_symbol, &$something_symbol) {
    return call($systemName_make, call($new_list, $typeAnnotation_symbol, $function_symbol, call($new_list, $isOrNot_symbol, call($new_list, $typeAnnotation_symbol, $t_sym, $something_symbol))));
  });
  $symbol_equal_p = new Func("symbol_equal_p", function($x = null, $y = null) use (&$un_symbol, &$lang_set_do) {
    if ($x === $y) {
      return true;
    }
    if (call($un_symbol, $x) === call($un_symbol, $y)) {
      call($lang_set_do, $x, $y);
      return true;
    } else {
      return false;
    }

  });
  $jsArray_to_list = new Func("jsArray_to_list", function($xs = null) use (&$null_v, &$new_construction) {
    $ret = null; $i = null;
    $ret = $null_v;
    for ($i = to_number(get($xs, "length")) - 1; $i >= 0; $i--) {
      $ret = call($new_construction, get($xs, $i), $ret);
    }
    return $ret;
  });
  $list_to_jsArray = new Func("list_to_jsArray", function($xs = null, $k_done = null, $k_tail = null) use (&$construction_p, &$construction_head, &$construction_tail, &$null_p) {
    $ret = null;
    $ret = new Arr();
    while (is(call($construction_p, $xs))) {
      call_method($ret, "push", call($construction_head, $xs));
      $xs = call($construction_tail, $xs);
    }
    if (is(call($null_p, $xs))) {
      return call($k_done, $ret);
    }
    return call($k_tail, $ret, $xs);
  });
  $maybe_list_to_jsArray = new Func("maybe_list_to_jsArray", function($xs = null) use (&$list_to_jsArray) {
    return call($list_to_jsArray, $xs, new Func(function($xs = null) {
      return $xs;
    }), new Func(function($xs = null, $x = null) {
      return false;
    }));
  });
  $new_list = new Func("new_list", function() use (&$jsArray_to_list) {
    $arguments = Func::getArguments();
    $xs = null; $_i = null;
    $xs = new Arr();
    for ($_i = 0; $_i < get($arguments, "length"); $_i++) {
      set($xs, $_i, get($arguments, $_i));
    }
    return call($jsArray_to_list, $xs);
  });
  $un_just_all = new Func("un_just_all", function($raw = null) use (&$just_p, &$un_just, &$lang_set_do) {
    $x = null; $xs = null; $i = null;
    $x = $raw;
    $xs = new Arr();
    while (is(call($just_p, $x))) {
      call_method($xs, "push", $x);
      $x = call($un_just, $x);
    }
    for ($i = 0; $i < get($xs, "length"); $i++) {
      call($lang_set_do, get($xs, $i), $x);
    }
    return $x;
  });
  $any_delay_just_p = new Func("any_delay_just_p", function($x = null) use (&$just_p, &$delay_evaluate_p, &$delay_builtin_form_p, &$delay_builtin_func_p, &$delay_apply_p) {
    return (is($or_ = (is($or1_ = (is($or2_ = (is($or3_ = call($just_p, $x)) ? $or3_ : call($delay_evaluate_p, $x))) ? $or2_ : call($delay_builtin_form_p, $x))) ? $or1_ : call($delay_builtin_func_p, $x))) ? $or_ : call($delay_apply_p, $x));
  });
  $force_all = new Func("force_all", function($raw = null, $parents_history = null, $ref_novalue_replace = null) use (&$any_delay_just_p, &$simple_print, &$delay_evaluate_p, &$delay_builtin_func_p, &$delay_builtin_func_f, &$delay_builtin_func_xs, &$data_name_function_builtin_systemName, &$data_list_function_builtin_systemName, &$data_p_function_builtin_systemName, &$error_name_function_builtin_systemName, &$error_list_function_builtin_systemName, &$error_p_function_builtin_systemName, &$construction_p_function_builtin_systemName, &$construction_head_function_builtin_systemName, &$construction_tail_function_builtin_systemName, &$symbol_p_function_builtin_systemName, &$null_p_function_builtin_systemName, &$jsbool_equal_p, &$ASSERT, &$builtin_func_apply, &$ERROR, &$equal_p_function_builtin_systemName, &$apply_function_builtin_systemName, &$evaluate_function_builtin_systemName, &$if_function_builtin_systemName, &$delay_builtin_form_p, &$delay_apply_p, &$force1, &$lang_set_do, &$the_world_stopped_v) {
    $force_all = Func::getCurrent();
    $history = null; $x = null; $xs = null; $x_id = null; $f = null; $xs_1 = null; $elim_s = null; $is_elim = null; $i = null; $inner = null; $tf = null;
    $replace_this_with_stopped = new Func("replace_this_with_stopped", function() use (&$ref_novalue_replace, &$lang_set_do, &$x, &$the_world_stopped_v, &$xs) {
      $i = null;
      set($ref_novalue_replace, 1, true);
      call($lang_set_do, $x, $the_world_stopped_v);
      for ($i = 0; $i < get($xs, "length"); $i++) {
        call($lang_set_do, get($xs, $i), $the_world_stopped_v);
      }
      return $the_world_stopped_v;
    });
    $make_history = new Func("make_history", function() use (&$history, &$parents_history) {
      $ret = null; $x_id = null;
      $ret = new Object();
      foreach (keys($history) as $x_id) {
        set($ret, $x_id, true);
      }
      foreach (keys($parents_history) as $x_id) {
        set($ret, $x_id, true);
      }
      return $ret;
    });
    if ($parents_history === _void(0)) {
      $parents_history = new Object();
    }
    if ($ref_novalue_replace === _void(0)) {
      $ref_novalue_replace = new Arr(false, false);
    }
    $history = new Object();
    $x = $raw;
    $xs = new Arr();
    while (is(call($any_delay_just_p, $x))) {
      $x_id = call($simple_print, $x);
      if (get($parents_history, $x_id) === true) {
        return call($replace_this_with_stopped);
      }
      if (get($history, $x_id) === true) {
        set($ref_novalue_replace, 0, true);
        if (is(call($delay_evaluate_p, $x))) {
          return call($replace_this_with_stopped);
        } else if (is(call($delay_builtin_func_p, $x))) {
          $f = call($delay_builtin_func_f, $x);
          $xs_1 = call($delay_builtin_func_xs, $x);
          $elim_s = new Arr($data_name_function_builtin_systemName, $data_list_function_builtin_systemName, $data_p_function_builtin_systemName, $error_name_function_builtin_systemName, $error_list_function_builtin_systemName, $error_p_function_builtin_systemName, $construction_p_function_builtin_systemName, $construction_head_function_builtin_systemName, $construction_tail_function_builtin_systemName, $symbol_p_function_builtin_systemName, $null_p_function_builtin_systemName);
          $is_elim = false;
          for ($i = 0; $i < get($elim_s, "length"); $i++) {
            if (is(call($jsbool_equal_p, get($elim_s, $i), $f))) {
              $is_elim = true;
            }
          }
          if (is($is_elim)) {
            call($ASSERT, get($xs_1, "length") === 1);
            call($ASSERT, $ref_novalue_replace[1] === false);
            $inner = call($force_all, $xs_1[0], call($make_history), $ref_novalue_replace);
            if (is($ref_novalue_replace[1])) {
              return call($force_all, call($builtin_func_apply, $f, new Arr($inner)));
            } else {
              return call($ERROR);
            }

          }
          if (is(call($jsbool_equal_p, $f, $equal_p_function_builtin_systemName))) {
            return call($replace_this_with_stopped);
          } else if (is(call($jsbool_equal_p, $f, $apply_function_builtin_systemName))) {
            return call($replace_this_with_stopped);
          } else if (is(call($jsbool_equal_p, $f, $evaluate_function_builtin_systemName))) {
            return call($replace_this_with_stopped);
          } else if (is(call($jsbool_equal_p, $f, $if_function_builtin_systemName))) {
            call($ASSERT, get($xs_1, "length") === 3);
            call($ASSERT, $ref_novalue_replace[1] === false);
            $tf = call($force_all, $xs_1[0], call($make_history), $ref_novalue_replace);
            if (is($ref_novalue_replace[1])) {
              return call($force_all, call($builtin_func_apply, $if_function_builtin_systemName, new Arr($tf, $xs_1[1], $xs_1[2])));
            } else {
              return call($ERROR);
            }

          }



          return call($ERROR);
        } else if (is(call($delay_builtin_form_p, $x))) {
          return call($replace_this_with_stopped);
        } else if (is(call($delay_apply_p, $x))) {
          return call($replace_this_with_stopped);
        }



        return call($ERROR);
      }
      set($history, $x_id, true);
      call_method($xs, "push", $x);
      $x = call($force1, $x);
    }
    for ($i = 0; $i < get($xs, "length"); $i++) {
      call($lang_set_do, get($xs, $i), $x);
    }
    return $x;
  });
  $force1 = new Func("force1", function($raw = null) use (&$un_just_all, &$ASSERT, &$just_p, &$delay_evaluate_p, &$real_evaluate, &$delay_evaluate_env, &$delay_evaluate_x, &$delay_builtin_form_p, &$real_builtin_form_apply, &$delay_builtin_form_env, &$delay_builtin_form_f, &$delay_builtin_form_xs, &$delay_builtin_func_p, &$real_builtin_func_apply, &$delay_builtin_func_f, &$delay_builtin_func_xs, &$delay_apply_p, &$real_apply, &$delay_apply_f, &$delay_apply_xs, &$lang_set_do) {
    $x = null; $ret = null;
    $x = call($un_just_all, $raw);
    call($ASSERT, not(call($just_p, $x)));
    if (is(call($delay_evaluate_p, $x))) {
      $ret = call($real_evaluate, call($delay_evaluate_env, $x), call($delay_evaluate_x, $x));
    } else if (is(call($delay_builtin_form_p, $x))) {
      $ret = call($real_builtin_form_apply, call($delay_builtin_form_env, $x), call($delay_builtin_form_f, $x), call($delay_builtin_form_xs, $x));
    } else if (is(call($delay_builtin_func_p, $x))) {
      $ret = call($real_builtin_func_apply, call($delay_builtin_func_f, $x), call($delay_builtin_func_xs, $x));
    } else if (is(call($delay_apply_p, $x))) {
      $ret = call($real_apply, call($delay_apply_f, $x), call($delay_apply_xs, $x));
    } else {
      $ret = $x;
    }




    $ret = call($un_just_all, $ret);
    call($lang_set_do, $x, $ret);
    return $ret;
  });
  $env_set = new Func("env_set", function($env = null, $key = null, $val = null) use (&$jsbool_equal_p) {
    $ret = null; $i = null;
    $ret = new Arr();
    for ($i = 0; $i < get($env, "length"); $i = _plus($i, 2)) {
      if (is(call($jsbool_equal_p, $env, _plus($i[0]), $key))) {
        set($ret, _plus($i, 0), $key);
        set($ret, _plus($i, 1), $val);
        for ($i = _plus($i, 2); $i < get($env, "length"); $i = _plus($i, 2)) {
          set($ret, _plus($i, 0), $env, _plus($i[0]));
          set($ret, _plus($i, 1), $env, _plus($i[1]));
        }
        return $ret;
      } else {
        set($ret, _plus($i, 0), $env, _plus($i[0]));
        set($ret, _plus($i, 1), $env, _plus($i[1]));
      }

    }
    set($ret, _plus(get($env, "length"), 0), $key);
    set($ret, _plus(get($env, "length"), 1), $val);
    return $ret;
  });
  $env_get = new Func("env_get", function($env = null, $key = null, $default_v = null) use (&$jsbool_equal_p) {
    $i = null;
    for ($i = 0; $i < get($env, "length"); $i = _plus($i, 2)) {
      if (is(call($jsbool_equal_p, $env, _plus($i[0]), $key))) {
        return $env, _plus($i[1]);
      }
    }
    return $default_v;
  });
  $must_env_get = new Func("must_env_get", function($env = null, $key = null) use (&$jsbool_equal_p, &$ERROR) {
    $i = null;
    for ($i = 0; $i < get($env, "length"); $i = _plus($i, 2)) {
      if (is(call($jsbool_equal_p, $env, _plus($i[0]), $key))) {
        return $env, _plus($i[1]);
      }
    }
    return call($ERROR);
  });
  $env2val = new Func("env2val", function($env = null) use (&$null_v, &$new_construction, &$new_list, &$new_data, &$mapping_symbol) {
    $ret = null; $i = null;
    $ret = $null_v;
    for ($i = 0; $i < get($env, "length"); $i = _plus($i, 2)) {
      $ret = call($new_construction, call($new_list, $env, _plus($i[0]), $env, _plus($i[1])), $ret);
    }
    return call($new_data, $mapping_symbol, call($new_list, $ret));
  });
  $env_foreach = new Func("env_foreach", function($env = null, $f = null) {
    $i = null;
    for ($i = 0; $i < get($env, "length"); $i = _plus($i, 2)) {
      call($f, $env, _plus($i[0]), $env, _plus($i[1]));
    }
  });
  $val2env = new Func("val2env", function($x = null) use (&$force_all, &$data_p, &$data_name, &$symbol_p, &$symbol_equal_p, &$mapping_symbol, &$data_list, &$construction_p, &$null_p, &$construction_tail, &$construction_head, &$jsbool_equal_p) {
    $s = null; $ret = null; $xs = null; $x_1 = null; $k = null; $v = null; $not_breaked = null; $i = null;
    $x = call($force_all, $x);
    if (not(call($data_p, $x))) {
      return false;
    }
    $s = call($force_all, call($data_name, $x));
    if (not(call($symbol_p, $s))) {
      return false;
    }
    if (not(call($symbol_equal_p, $s, $mapping_symbol))) {
      return false;
    }
    $s = call($force_all, call($data_list, $x));
    if (not(call($construction_p, $s))) {
      return false;
    }
    if (not(call($null_p, call($force_all, call($construction_tail, $s))))) {
      return false;
    }
    $ret = new Arr();
    $xs = call($force_all, call($construction_head, $s));
    while (not(call($null_p, $xs))) {
      if (not(call($construction_p, $xs))) {
        return false;
      }
      $x_1 = call($force_all, call($construction_head, $xs));
      $xs = call($force_all, call($construction_tail, $xs));
      if (not(call($construction_p, $x_1))) {
        return false;
      }
      $k = call($construction_head, $x_1);
      $x_1 = call($force_all, call($construction_tail, $x_1));
      if (not(call($construction_p, $x_1))) {
        return false;
      }
      $v = call($construction_head, $x_1);
      if (not(call($null_p, call($force_all, call($construction_tail, $x_1))))) {
        return false;
      }
      $not_breaked = true;
      for ($i = 0; $i < get($ret, "length"); $i = _plus($i, 2)) {
        if (is(call($jsbool_equal_p, $ret, _plus($i[0]), $k))) {
          set($ret, _plus($i, 1), $v);
          $not_breaked = false;
          break;
        }
      }
      if (is($not_breaked)) {
        call_method($ret, "push", $k);
        call_method($ret, "push", $v);
      }
    }
    return $ret;
  });
  $real_evaluate = new Func("real_evaluate", function($env = null, $raw = null) use (&$force1, &$any_delay_just_p, &$evaluate, &$new_error, &$system_symbol, &$new_list, &$function_builtin_use_systemName, &$evaluate_function_builtin_systemName, &$env2val, &$construction_p, &$null_p, &$construction_head, &$construction_tail, &$jsbool_equal_p, &$form_builtin_use_systemName, &$builtin_form_apply, &$form_use_systemName, &$force_all, &$data_p, &$data_name, &$symbol_p, &$symbol_equal_p, &$form_symbol, &$data_list, &$apply, &$builtin_func_apply, &$name_p, &$env_get, &$error_p, &$ERROR) {
    $x = null; $error_v = null; $xs = null; $rest = null; $f = null; $args = null; $i = null; $f_type = null; $f_list = null; $f_x = null; $f_list_cdr = null;
    $x = call($force1, $raw);
    if (is(call($any_delay_just_p, $x))) {
      return call($evaluate, $env, $x);
    }
    $error_v = call($new_error, $system_symbol, call($new_list, $function_builtin_use_systemName, call($new_list, $evaluate_function_builtin_systemName, call($new_list, call($env2val, $env), $x))));
    if (is(call($construction_p, $x))) {
      $xs = new Arr();
      $rest = $x;
      while (not(call($null_p, $rest))) {
        if (is(call($any_delay_just_p, $rest))) {
          return call($evaluate, $env, $x);
        } else if (is(call($construction_p, $rest))) {
          call_method($xs, "push", call($construction_head, $rest));
          $rest = call($force1, call($construction_tail, $rest));
        } else {
          return $error_v;
        }


      }
      if (is(call($jsbool_equal_p, $xs[0], $form_builtin_use_systemName))) {
        if (get($xs, "length") === 1) {
          return $error_v;
        }
        $f = $xs[1];
        $args = new Arr();
        for ($i = 2; $i < get($xs, "length"); $i++) {
          set($args, to_number($i) - 2, get($xs, $i));
        }
        return call($builtin_form_apply, $env, $f, $args);
      } else if (is(call($jsbool_equal_p, $xs[0], $form_use_systemName))) {
        if (get($xs, "length") === 1) {
          return $error_v;
        }
        $f = call($force_all, call($evaluate, $env, $xs[1]));
        if (not(call($data_p, $f))) {
          return $error_v;
        }
        $f_type = call($force1, call($data_name, $f));
        if (is(call($any_delay_just_p, $f_type))) {
          return call($evaluate, $env, $x);
        }
        if (not(call($symbol_p, $f_type))) {
          return $error_v;
        }
        if (not(call($symbol_equal_p, $f_type, $form_symbol))) {
          return $error_v;
        }
        $f_list = call($force1, call($data_list, $f));
        if (is(call($any_delay_just_p, $f_list))) {
          return call($evaluate, $env, $x);
        }
        if (not(call($construction_p, $f_list))) {
          return $error_v;
        }
        $f_x = call($construction_head, $f_list);
        $f_list_cdr = call($force1, call($construction_tail, $f_list));
        if (is(call($any_delay_just_p, $f_list_cdr))) {
          return call($evaluate, $env, $x);
        }
        if (not(call($null_p, $f_list_cdr))) {
          return $error_v;
        }
        $args = new Arr(call($env2val, $env));
        for ($i = 2; $i < get($xs, "length"); $i++) {
          set($args, to_number($i) - 1, get($xs, $i));
        }
        return call($apply, $f_x, $args);
      } else if (is(call($jsbool_equal_p, $xs[0], $function_builtin_use_systemName))) {
        if (get($xs, "length") === 1) {
          return $error_v;
        }
        $f = $xs[1];
        $args = new Arr();
        for ($i = 2; $i < get($xs, "length"); $i++) {
          set($args, to_number($i) - 2, call($evaluate, $env, get($xs, $i)));
        }
        return call($builtin_func_apply, $f, $args);
      } else {
        $f = call($evaluate, $env, $xs[0]);
        $args = new Arr();
        for ($i = 1; $i < get($xs, "length"); $i++) {
          set($args, to_number($i) - 1, call($evaluate, $env, get($xs, $i)));
        }
        return call($apply, $f, $args);
      }



    } else if (is(call($null_p, $x))) {
      return $x;
    } else if (is(call($name_p, $x))) {
      return call($env_get, $env, $x, $error_v);
    } else if (is(call($error_p, $x))) {
      return $error_v;
    }



    return call($ERROR);
  });
  $name_p = new Func("name_p", function($x = null) use (&$symbol_p, &$data_p) {
    return (is($or_ = call($symbol_p, $x)) ? $or_ : call($data_p, $x));
  });
  $make_builtin_p_func = new Func("make_builtin_p_func", function($p_sym = null, $p_jsfunc = null) use (&$force1, &$any_delay_just_p, &$builtin_func_apply, &$true_v, &$false_v) {
    return new Arr($p_sym, 1, new Func(function($x = null, $error_v = null) use (&$force1, &$any_delay_just_p, &$builtin_func_apply, &$p_sym, &$p_jsfunc, &$true_v, &$false_v) {
      $x = call($force1, $x);
      if (is(call($any_delay_just_p, $x))) {
        return call($builtin_func_apply, $p_sym, new Arr($x));
      }
      if (is(call($p_jsfunc, $x))) {
        return $true_v;
      }
      return $false_v;
    }));
  });
  $make_builtin_get_func = new Func("make_builtin_get_func", function($f_sym = null, $p_jsfunc = null, $f_jsfunc = null) use (&$force1, &$any_delay_just_p, &$builtin_func_apply) {
    return new Arr($f_sym, 1, new Func(function($x = null, $error_v = null) use (&$force1, &$any_delay_just_p, &$builtin_func_apply, &$f_sym, &$p_jsfunc, &$f_jsfunc) {
      $x = call($force1, $x);
      if (is(call($any_delay_just_p, $x))) {
        return call($builtin_func_apply, $f_sym, new Arr($x));
      }
      if (is(call($p_jsfunc, $x))) {
        return call($f_jsfunc, $x);
      }
      return $error_v;
    }));
  });
  $real_apply = new Func("real_apply", function($f = null, $xs = null) use (&$force1, &$any_delay_just_p, &$apply, &$data_p, &$force_all, &$data_name, &$symbol_p, &$symbol_equal_p, &$function_symbol, &$data_list, &$construction_p, &$force_all_rec, &$construction_head, &$construction_tail, &$null_p, &$env_null_v, &$name_p, &$null_v, &$new_construction, &$env_set, &$evaluate, &$new_error, &$system_symbol, &$new_list, &$function_builtin_use_systemName, &$apply_function_builtin_systemName, &$jsArray_to_list) {
    $f_type = null; $f_list = null; $args_pat = null; $f_list_cdr = null; $f_code = null; $env = null; $xs_i = null; $x = null; $i = null;
    $make_error_v = new Func("make_error_v", function() use (&$new_error, &$system_symbol, &$new_list, &$function_builtin_use_systemName, &$apply_function_builtin_systemName, &$f, &$jsArray_to_list, &$xs) {
      return call($new_error, $system_symbol, call($new_list, $function_builtin_use_systemName, call($new_list, $apply_function_builtin_systemName, call($new_list, $f, call($jsArray_to_list, $xs)))));
    });
    $f = call($force1, $f);
    if (is(call($any_delay_just_p, $f))) {
      return call($apply, $f, $xs);
    }
    if (not(call($data_p, $f))) {
      return call($make_error_v);
    }
    $f_type = call($force_all, call($data_name, $f));
    if (not((is($and_ = call($symbol_p, $f_type)) ? call($symbol_equal_p, $f_type, $function_symbol) : $and_))) {
      return call($make_error_v);
    }
    $f_list = call($force_all, call($data_list, $f));
    if (not(call($construction_p, $f_list))) {
      return call($make_error_v);
    }
    $args_pat = call($force_all_rec, call($construction_head, $f_list));
    $f_list_cdr = call($force_all, call($construction_tail, $f_list));
    if (not((is($and_ = call($construction_p, $f_list_cdr)) ? call($null_p, call($force_all, call($construction_tail, $f_list_cdr))) : $and_))) {
      return call($make_error_v);
    }
    $f_code = call($construction_head, $f_list_cdr);
    $env = $env_null_v;
    $xs_i = 0;
    while (not(call($null_p, $args_pat))) {
      if (is(call($name_p, $args_pat))) {
        $x = $null_v;
        for ($i = to_number(get($xs, "length")) - 1; $i >= $xs_i; $i--) {
          $x = call($new_construction, get($xs, $i), $x);
        }
        $env = call($env_set, $env, $args_pat, $x);
        $xs_i = get($xs, "length");
        $args_pat = $null_v;
      } else if (is(call($construction_p, $args_pat))) {
        if ($xs_i < get($xs, "length")) {
          $x = get($xs, $xs_i);
          $xs_i++;
          $env = call($env_set, $env, call($construction_head, $args_pat), $x);
          $args_pat = call($construction_tail, $args_pat);
        } else {
          return call($make_error_v);
        }

      } else {
        return call($make_error_v);
      }


    }
    if (get($xs, "length") !== $xs_i) {
      return call($make_error_v);
    }
    return call($evaluate, $env, $f_code);
  });
  $real_builtin_func_apply = new Func("real_builtin_func_apply", function($f = null, $xs = null) use (&$new_error, &$system_symbol, &$new_list, &$function_builtin_use_systemName, &$jsArray_to_list, &$real_builtin_func_apply_s, &$jsbool_equal_p, &$ERROR) {
    $error_v = null; $i = null; $actually_length = null; $f_1 = null;
    $error_v = call($new_error, $system_symbol, call($new_list, $function_builtin_use_systemName, call($new_list, $f, call($jsArray_to_list, $xs))));
    for ($i = 0; $i < get($real_builtin_func_apply_s, "length"); $i++) {
      if (is(call($jsbool_equal_p, $f, get(get($real_builtin_func_apply_s, $i), 0)))) {
        $actually_length = get(get($real_builtin_func_apply_s, $i), 1);
        if (get($xs, "length") !== $actually_length) {
          return $error_v;
        }
        $f_1 = get(get($real_builtin_func_apply_s, $i), 2);
        if ($actually_length === 1) {
          return call($f_1, $xs[0], $error_v);
        } else if ($actually_length === 2) {
          return call($f_1, $xs[0], $xs[1], $error_v);
        } else if ($actually_length === 3) {
          return call($f_1, $xs[0], $xs[1], $xs[2], $error_v);
        }


        return call($ERROR);
      }
    }
    return $error_v;
  });
  $real_builtin_form_apply = new Func("real_builtin_form_apply", function($env = null, $f = null, $xs = null) use (&$new_error, &$system_symbol, &$new_list, &$form_builtin_use_systemName, &$env2val, &$jsArray_to_list, &$jsbool_equal_p, &$quote_form_builtin_systemName, &$lambda_form_builtin_systemName, &$new_lambda) {
    $error_v = null;
    $error_v = call($new_error, $system_symbol, call($new_list, $form_builtin_use_systemName, call($new_list, call($env2val, $env), $f, call($jsArray_to_list, $xs))));
    if (is(call($jsbool_equal_p, $f, $quote_form_builtin_systemName))) {
      if (get($xs, "length") !== 1) {
        return $error_v;
      }
      return $xs[0];
    } else if (is(call($jsbool_equal_p, $f, $lambda_form_builtin_systemName))) {
      if (get($xs, "length") !== 2) {
        return $error_v;
      }
      return call($new_lambda, $env, $xs[0], $xs[1], $error_v);
    }

    return $error_v;
  });
  $new_lambda = new Func("new_lambda", function($env = null, $args_pat = null, $body = null, $error_v = null) use (&$force_all_rec, &$null_p, &$name_p, &$null_v, &$construction_p, &$construction_head, &$construction_tail, &$jsArray_to_list, &$env_foreach, &$new_construction, &$must_env_get, &$new_data, &$function_symbol, &$new_list, &$new_error, &$system_symbol, &$form_builtin_use_systemName, &$lambda_form_builtin_systemName, &$env2val, &$quote_form_builtin_systemName, &$jsbool_equal_p) {
    $args_pat_vars = null; $args_pat_is_dot = null; $args_pat_iter = null; $args_pat_vars_val = null; $env_vars = null; $new_args_pat = null; $i = null; $new_args = null;
    $make_error_v = new Func("make_error_v", function() use (&$error_v, &$new_error, &$system_symbol, &$new_list, &$form_builtin_use_systemName, &$lambda_form_builtin_systemName, &$env2val, &$env, &$jsArray_to_list, &$args_pat, &$body) {
      if ($error_v === false) {
        return call($new_error, $system_symbol, call($new_list, $form_builtin_use_systemName, call($new_list, call($env2val, $env), $lambda_form_builtin_systemName, call($jsArray_to_list, new Arr($args_pat, $body)))));
      } else {
        return $error_v;
      }

    });
    $make_quote = new Func("make_quote", function($x = null) use (&$new_list, &$form_builtin_use_systemName, &$quote_form_builtin_systemName) {
      return call($new_list, $form_builtin_use_systemName, $quote_form_builtin_systemName, $x);
    });
    if ($error_v === _void(0)) {
      $error_v = false;
    }
    $args_pat = call($force_all_rec, $args_pat);
    $args_pat_vars = new Arr();
    $args_pat_is_dot = false;
    $args_pat_iter = $args_pat;
    while (not(call($null_p, $args_pat_iter))) {
      if (is(call($name_p, $args_pat_iter))) {
        call_method($args_pat_vars, "push", $args_pat_iter);
        $args_pat_is_dot = true;
        $args_pat_iter = $null_v;
      } else if (is(call($construction_p, $args_pat_iter))) {
        call_method($args_pat_vars, "push", call($construction_head, $args_pat_iter));
        $args_pat_iter = call($construction_tail, $args_pat_iter);
      } else {
        return call($make_error_v);
      }


    }
    $args_pat_vars_val = $args_pat;
    if (is($args_pat_is_dot)) {
      $args_pat_vars_val = call($jsArray_to_list, $args_pat_vars);
    }
    $env_vars = new Arr();
    call($env_foreach, $env, new Func(function($k = null, $v = null) use (&$args_pat_vars, &$jsbool_equal_p, &$env_vars) {
      $i = null;
      for ($i = 0; $i < get($args_pat_vars, "length"); $i++) {
        if (is(call($jsbool_equal_p, get($args_pat_vars, $i), $k))) {
          return ;
        }
      }
      call_method($env_vars, "push", $k);
    }));
    $new_args_pat = $args_pat_vars_val;
    for ($i = to_number(get($env_vars, "length")) - 1; $i >= 0; $i--) {
      $new_args_pat = call($new_construction, get($env_vars, $i), $new_args_pat);
    }
    $new_args = $args_pat_vars_val;
    for ($i = to_number(get($env_vars, "length")) - 1; $i >= 0; $i--) {
      $new_args = call($new_construction, call($make_quote, call($must_env_get, $env, get($env_vars, $i))), $new_args);
    }
    return call($new_data, $function_symbol, call($new_list, $args_pat, call($new_construction, call($make_quote, call($new_data, $function_symbol, call($new_list, $new_args_pat, $body))), $new_args)));
  });
  $jsbool_equal_p = new Func("jsbool_equal_p", function($x = null, $y = null) use (&$force_all, &$null_p, &$lang_set_do, &$null_v, &$symbol_p, &$symbol_equal_p, &$construction_p, &$construction_head, &$construction_tail, &$error_p, &$error_name, &$error_list, &$data_p, &$data_name, &$data_list, &$ERROR) {
    $jsbool_equal_p = Func::getCurrent();
    $end_2 = new Func("end_2", function($x = null, $y = null, $f1 = null, $f2 = null) use (&$jsbool_equal_p, &$lang_set_do) {
      if (is(call($jsbool_equal_p, call($f1, $x), call($f1, $y))) && is(call($jsbool_equal_p, call($f2, $x), call($f2, $y)))) {
        call($lang_set_do, $x, $y);
        return true;
      } else {
        return false;
      }

    });
    if ($x === $y) {
      return true;
    }
    $x = call($force_all, $x);
    $y = call($force_all, $y);
    if ($x === $y) {
      return true;
    }
    if (is(call($null_p, $x))) {
      if (not(call($null_p, $y))) {
        return false;
      }
      call($lang_set_do, $x, $null_v);
      call($lang_set_do, $y, $null_v);
      return true;
    } else if (is(call($symbol_p, $x))) {
      if (not(call($symbol_p, $y))) {
        return false;
      }
      return call($symbol_equal_p, $x, $y);
    } else if (is(call($construction_p, $x))) {
      if (not(call($construction_p, $y))) {
        return false;
      }
      return call($end_2, $x, $y, $construction_head, $construction_tail);
    } else if (is(call($error_p, $x))) {
      if (not(call($error_p, $y))) {
        return false;
      }
      return call($end_2, $x, $y, $error_name, $error_list);
    } else if (is(call($data_p, $x))) {
      if (not(call($data_p, $y))) {
        return false;
      }
      return call($end_2, $x, $y, $data_name, $data_list);
    }




    return call($ERROR);
  });
  $jsbool_no_force_equal_p = new Func("jsbool_no_force_equal_p", function($x = null, $y = null) use (&$un_just_all, &$null_p, &$lang_set_do, &$null_v, &$symbol_p, &$symbol_equal_p, &$construction_p, &$construction_head, &$construction_tail, &$error_p, &$error_name, &$error_list, &$data_p, &$data_name, &$data_list, &$delay_evaluate_p, &$delay_builtin_func_p, &$delay_builtin_form_p, &$delay_apply_p, &$ERROR) {
    $jsbool_no_force_equal_p = Func::getCurrent();
    $end_2 = new Func("end_2", function($x = null, $y = null, $f1 = null, $f2 = null) use (&$jsbool_no_force_equal_p, &$lang_set_do) {
      if (is(call($jsbool_no_force_equal_p, call($f1, $x), call($f1, $y))) && is(call($jsbool_no_force_equal_p, call($f2, $x), call($f2, $y)))) {
        call($lang_set_do, $x, $y);
        return true;
      } else {
        return false;
      }

    });
    if ($x === $y) {
      return true;
    }
    $x = call($un_just_all, $x);
    $y = call($un_just_all, $y);
    if ($x === $y) {
      return true;
    }
    if (is(call($null_p, $x))) {
      if (not(call($null_p, $y))) {
        return false;
      }
      call($lang_set_do, $x, $null_v);
      call($lang_set_do, $y, $null_v);
      return true;
    } else if (is(call($symbol_p, $x))) {
      if (not(call($symbol_p, $y))) {
        return false;
      }
      return call($symbol_equal_p, $x, $y);
    } else if (is(call($construction_p, $x))) {
      if (not(call($construction_p, $y))) {
        return false;
      }
      return call($end_2, $x, $y, $construction_head, $construction_tail);
    } else if (is(call($error_p, $x))) {
      if (not(call($error_p, $y))) {
        return false;
      }
      return call($end_2, $x, $y, $error_name, $error_list);
    } else if (is(call($data_p, $x))) {
      if (not(call($data_p, $y))) {
        return false;
      }
      return call($end_2, $x, $y, $data_name, $data_list);
    } else if (is(call($delay_evaluate_p, $x))) {
      return false;
    } else if (is(call($delay_builtin_func_p, $x))) {
      return false;
    } else if (is(call($delay_builtin_form_p, $x))) {
      return false;
    } else if (is(call($delay_apply_p, $x))) {
      return false;
    }








    return call($ERROR);
  });
  $simple_print = new Func("simple_print", function($x = null) use (&$un_just_all, &$null_p, &$construction_p, &$construction_head, &$construction_tail, &$data_p, &$new_construction, &$data_name, &$data_list, &$error_p, &$error_name, &$error_list, &$symbol_p, &$un_symbol, &$delay_evaluate_p, &$env2val, &$delay_evaluate_env, &$delay_evaluate_x, &$delay_builtin_func_p, &$delay_builtin_func_f, &$jsArray_to_list, &$delay_builtin_func_xs, &$delay_builtin_form_p, &$delay_builtin_form_env, &$delay_builtin_form_f, &$delay_builtin_form_xs, &$delay_apply_p, &$delay_apply_f, &$delay_apply_xs, &$ERROR) {
    $simple_print = Func::getCurrent();
    $temp = null; $prefix = null;
    $x = call($un_just_all, $x);
    $temp = "";
    $prefix = "";
    if (is(call($null_p, $x))) {
      return "()";
    } else if (is(call($construction_p, $x))) {
      $temp = "(";
      $prefix = "";
      while (is(call($construction_p, $x))) {
        $temp += _plus($prefix, call($simple_print, call($construction_head, $x)));
        $prefix = " ";
        $x = call($un_just_all, call($construction_tail, $x));
      }
      if (is(call($null_p, $x))) {
        $temp += ")";
      } else {
        $temp += _concat(" . ", call($simple_print, $x), ")");
      }

      return $temp;
    } else if (is(call($data_p, $x))) {
      return _concat("#", call($simple_print, call($new_construction, call($data_name, $x), call($data_list, $x))));
    } else if (is(call($error_p, $x))) {
      return _concat("!", call($simple_print, call($new_construction, call($error_name, $x), call($error_list, $x))));
    } else if (is(call($symbol_p, $x))) {
      return call($un_symbol, $x);
    } else if (is(call($delay_evaluate_p, $x))) {
      return _concat("\$(", call($simple_print, call($env2val, call($delay_evaluate_env, $x))), " ", call($simple_print, call($delay_evaluate_x, $x)), ")");
    } else if (is(call($delay_builtin_func_p, $x))) {
      return _concat("%(", call($simple_print, call($delay_builtin_func_f, $x)), " ", call($simple_print, call($jsArray_to_list, call($delay_builtin_func_xs, $x))), ")");
    } else if (is(call($delay_builtin_form_p, $x))) {
      return _concat("@(", call($simple_print, call($env2val, call($delay_builtin_form_env, $x))), " ", call($simple_print, call($delay_builtin_form_f, $x)), " ", call($simple_print, call($jsArray_to_list, call($delay_builtin_form_xs, $x))), ")");
    } else if (is(call($delay_apply_p, $x))) {
      return _concat("^(", call($simple_print, call($delay_apply_f, $x)), " ", call($simple_print, call($jsArray_to_list, call($delay_apply_xs, $x))), ")");
    }








    return call($ERROR);
  });
  $simple_print_force_all_rec = new Func("simple_print_force_all_rec", function($x = null) use (&$simple_print, &$force_all_rec) {
    return call($simple_print, call($force_all_rec, $x));
  });
  $simple_parse = new Func("simple_parse", function($x = null) use (&$ASSERT, &$new_symbol, &$null_v, &$construction_p, &$ERROR, &$construction_tail, &$new_construction, &$new_data, &$construction_head, &$new_error, &$null_p, &$val2env, &$evaluate, &$list_to_jsArray, &$builtin_func_apply, &$builtin_form_apply, &$apply) {
    $state_const = null; $state = null; $readeval = null; $readfuncapply = null; $readformbuiltin = null; $readapply = null;
    $eof = new Func("eof", function() use (&$state, &$state_const) {
      return get($state_const, "length") === $state;
    });
    $get = new Func("get", function() use (&$ASSERT, &$eof, &$state_const, &$state) {
      $ret = null;
      call($ASSERT, not(call($eof)));
      $ret = get($state_const, $state);
      $state++;
      return $ret;
    });
    $put = new Func("put", function($x = null) use (&$ASSERT, &$state_const, &$state) {
      call($ASSERT, get($state_const, to_number($state) - 1) === $x);
      $state--;
    });
    $parse_error = new Func("parse_error", function() {
      throw new Ex("TheLanguage parse ERROR!");
    });
    $a_space_p = new Func("a_space_p", function($x = null) {
      return $x === " " || $x === "\n" || $x === "\t" || $x === "\r";
    });
    $space = new Func("space", function() use (&$eof, &$get, &$a_space_p, &$put) {
      $x = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if (not(call($a_space_p, $x))) {
        call($put, $x);
        return false;
      }
      while (is(call($a_space_p, $x)) && not(call($eof))) {
        $x = call($get);
      }
      if (not(call($a_space_p, $x))) {
        call($put, $x);
      }
      return true;
    });
    $symbol = new Func("symbol", function() use (&$eof, &$get, &$a_symbol_p, &$put, &$new_symbol) {
      $x = null; $ret = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      $ret = "";
      if (not(call($a_symbol_p, $x))) {
        call($put, $x);
        return false;
      }
      while (is(call($a_symbol_p, $x)) && not(call($eof))) {
        $ret += $x;
        $x = call($get);
      }
      if (is(call($a_symbol_p, $x))) {
        $ret += $x;
      } else {
        call($put, $x);
      }

      return call($new_symbol, $ret);
    });
    $list = new Func("list", function() use (&$eof, &$get, &$put, &$new_symbol, &$space, &$parse_error, &$null_v, &$val, &$construction_p, &$ERROR, &$construction_tail, &$new_construction) {
      $x = null; $HOLE = null; $ret = null; $e_1 = null; $e = null;
      $set_last = new Func("set_last", function($lst = null) use (&$ret, &$HOLE, &$construction_p, &$ERROR, &$construction_tail) {
        $x = null; $d = null;
        if ($ret === $HOLE) {
          $ret = $lst;
          return ;
        }
        $x = $ret;
        while (true) {
          if (not(call($construction_p, $x))) {
            return call($ERROR);
          }
          $d = call($construction_tail, $x);
          if ($d === $HOLE) {
            break;
          }
          $x = call($construction_tail, $x);
        }
        if (not(call($construction_p, $x))) {
          return call($ERROR);
        }
        if (call($construction_tail, $x) !== $HOLE) {
          return call($ERROR);
        }
        set($x, 2, $lst);
      });
      $last_add = new Func("last_add", function($x = null) use (&$set_last, &$new_construction, &$HOLE) {
        call($set_last, call($new_construction, $x, $HOLE));
      });
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if ($x !== "(") {
        call($put, $x);
        return false;
      }
      $HOLE = call($new_symbol, "!!@@READ||HOLE@@!!");
      $ret = $HOLE;
      while (true) {
        call($space);
        if (is(call($eof))) {
          return call($parse_error);
        }
        $x = call($get);
        if ($x === ")") {
          call($set_last, $null_v);
          return $ret;
        }
        if ($x === ".") {
          call($space);
          $e_1 = call($val);
          call($set_last, $e_1);
          call($space);
          if (is(call($eof))) {
            return call($parse_error);
          }
          $x = call($get);
          if ($x !== ")") {
            return call($parse_error);
          }
          return $ret;
        }
        call($put, $x);
        $e = call($val);
        call($last_add, $e);
      }
    });
    $data = new Func("data", function() use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$new_data, &$construction_head, &$construction_tail) {
      $x = null; $xs = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if ($x !== "#") {
        call($put, $x);
        return false;
      }
      $xs = call($list);
      if ($xs === false) {
        return call($parse_error);
      }
      if (not(call($construction_p, $xs))) {
        return call($parse_error);
      }
      return call($new_data, call($construction_head, $xs), call($construction_tail, $xs));
    });
    $readerror = new Func("readerror", function() use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$new_error, &$construction_head, &$construction_tail) {
      $x = null; $xs = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if ($x !== "!") {
        call($put, $x);
        return false;
      }
      $xs = call($list);
      if ($xs === false) {
        return call($parse_error);
      }
      if (not(call($construction_p, $xs))) {
        return call($parse_error);
      }
      return call($new_error, call($construction_head, $xs), call($construction_tail, $xs));
    });
    $make_read_two = new Func("make_read_two", function($prefix = null, $k = null) use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$construction_head) {
      return new Func(function() use (&$eof, &$get, &$prefix, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$k, &$construction_head) {
        $c = null; $xs = null; $x = null;
        if (is(call($eof))) {
          return false;
        }
        $c = call($get);
        if ($c !== $prefix) {
          call($put, $c);
          return false;
        }
        $xs = call($list);
        if ($xs === false) {
          return call($parse_error);
        }
        if (not(call($construction_p, $xs))) {
          return call($parse_error);
        }
        $x = call($construction_tail, $xs);
        if (not((is($and_ = call($construction_p, $x)) ? call($null_p, call($construction_tail, $x)) : $and_))) {
          return call($parse_error);
        }
        return call($k, call($construction_head, $xs), call($construction_head, $x));
      });
    });
    $make_read_three = new Func("make_read_three", function($prefix = null, $k = null) use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$construction_head) {
      return new Func(function() use (&$eof, &$get, &$prefix, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$k, &$construction_head) {
        $c = null; $xs = null; $x = null; $x_d = null;
        if (is(call($eof))) {
          return false;
        }
        $c = call($get);
        if ($c !== $prefix) {
          call($put, $c);
          return false;
        }
        $xs = call($list);
        if ($xs === false) {
          return call($parse_error);
        }
        if (not(call($construction_p, $xs))) {
          return call($parse_error);
        }
        $x = call($construction_tail, $xs);
        if (not(call($construction_p, $x))) {
          return call($parse_error);
        }
        $x_d = call($construction_tail, $x);
        if (not((is($and_ = call($construction_p, $x_d)) ? call($null_p, call($construction_tail, $x_d)) : $and_))) {
          return call($parse_error);
        }
        return call($k, call($construction_head, $xs), call($construction_head, $x), call($construction_head, $x_d));
      });
    });
    $a_symbol_p = new Func("a_symbol_p", function($x = null) use (&$a_space_p) {
      $not_xs = null; $i = null;
      if (is(call($a_space_p, $x))) {
        return false;
      }
      $not_xs = new Arr("(", ")", "!", "#", ".", "\$", "%", "^", "@", "~", "/", "-", ">", "_", ":", "?", "[", "]", "&");
      for ($i = 0; $i < get($not_xs, "length"); $i++) {
        if ($x === get($not_xs, $i)) {
          return false;
        }
      }
      return true;
    });
    $val = new Func("val", function() use (&$space, &$list, &$symbol, &$data, &$readerror, &$readeval, &$readfuncapply, &$readformbuiltin, &$readapply, &$parse_error) {
      $fs = null; $i = null; $x_2 = null;
      call($space);
      $fs = new Arr($list, $symbol, $data, $readerror, $readeval, $readfuncapply, $readformbuiltin, $readapply);
      for ($i = 0; $i < get($fs, "length"); $i++) {
        $x_2 = call_method($fs, $i);
        if ($x_2 !== false) {
          return $x_2;
        }
      }
      return call($parse_error);
    });
    $state_const = $x;
    $state = 0;
    $readeval = call($make_read_two, "\$", new Func(function($e = null, $x = null) use (&$val2env, &$parse_error, &$evaluate) {
      $env = null;
      $env = call($val2env, $e);
      if ($env === false) {
        return call($parse_error);
      }
      return call($evaluate, $env, $x);
    }));
    $readfuncapply = call($make_read_two, "%", new Func(function($f = null, $xs = null) use (&$list_to_jsArray, &$builtin_func_apply, &$parse_error) {
      $jsxs = null;
      $jsxs = call($list_to_jsArray, $xs, new Func(function($xs = null) {
        return $xs;
      }), new Func(function($xs = null, $y = null) use (&$parse_error) {
        return call($parse_error);
      }));
      return call($builtin_func_apply, $f, $jsxs);
    }));
    $readformbuiltin = call($make_read_three, "@", new Func(function($e = null, $f = null, $xs = null) use (&$list_to_jsArray, &$val2env, &$parse_error, &$builtin_form_apply) {
      $jsxs = null; $env = null;
      $jsxs = call($list_to_jsArray, $xs, new Func(function($xs = null) {
        return $xs;
      }), new Func(function($xs = null, $y = null) use (&$parse_error) {
        return call($parse_error);
      }));
      $env = call($val2env, $e);
      if ($env === false) {
        return call($parse_error);
      }
      return call($builtin_form_apply, $env, $f, $jsxs);
    }));
    $readapply = call($make_read_two, "^", new Func(function($f = null, $xs = null) use (&$list_to_jsArray, &$apply, &$parse_error) {
      $jsxs = null;
      $jsxs = call($list_to_jsArray, $xs, new Func(function($xs = null) {
        return $xs;
      }), new Func(function($xs = null, $y = null) use (&$parse_error) {
        return call($parse_error);
      }));
      return call($apply, $f, $jsxs);
    }));
    return call($val);
  });
  $complex_parse = new Func("complex_parse", function($x = null) use (&$ASSERT, &$new_symbol, &$null_v, &$construction_p, &$ERROR, &$construction_tail, &$new_construction, &$new_data, &$construction_head, &$new_error, &$null_p, &$val2env, &$evaluate, &$list_to_jsArray, &$builtin_func_apply, &$builtin_form_apply, &$apply, &$new_list, &$form_symbol, &$system_symbol, &$typeAnnotation_symbol, &$theThing_symbol, &$function_symbol, &$something_symbol, &$isOrNot_symbol, &$sub_symbol, &$jsArray_to_list, &$symbol_p, &$systemName_make) {
    $state_const = null; $state = null; $readeval = null; $readfuncapply = null; $readformbuiltin = null; $readapply = null;
    $eof = new Func("eof", function() use (&$state, &$state_const) {
      return get($state_const, "length") === $state;
    });
    $get = new Func("get", function() use (&$ASSERT, &$eof, &$state_const, &$state) {
      $ret = null;
      call($ASSERT, not(call($eof)));
      $ret = get($state_const, $state);
      $state++;
      return $ret;
    });
    $put = new Func("put", function($x = null) use (&$ASSERT, &$state_const, &$state) {
      call($ASSERT, get($state_const, to_number($state) - 1) === $x);
      $state--;
    });
    $parse_error = new Func("parse_error", function() {
      throw new Ex("TheLanguage parse ERROR!");
    });
    $a_space_p = new Func("a_space_p", function($x = null) {
      return $x === " " || $x === "\n" || $x === "\t" || $x === "\r";
    });
    $space = new Func("space", function() use (&$eof, &$get, &$a_space_p, &$put) {
      $x = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if (not(call($a_space_p, $x))) {
        call($put, $x);
        return false;
      }
      while (is(call($a_space_p, $x)) && not(call($eof))) {
        $x = call($get);
      }
      if (not(call($a_space_p, $x))) {
        call($put, $x);
      }
      return true;
    });
    $symbol = new Func("symbol", function() use (&$eof, &$get, &$a_symbol_p, &$put, &$new_symbol) {
      $x = null; $ret = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      $ret = "";
      if (not(call($a_symbol_p, $x))) {
        call($put, $x);
        return false;
      }
      while (is(call($a_symbol_p, $x)) && not(call($eof))) {
        $ret += $x;
        $x = call($get);
      }
      if (is(call($a_symbol_p, $x))) {
        $ret += $x;
      } else {
        call($put, $x);
      }

      return call($new_symbol, $ret);
    });
    $list = new Func("list", function() use (&$eof, &$get, &$put, &$new_symbol, &$space, &$parse_error, &$null_v, &$val, &$construction_p, &$ERROR, &$construction_tail, &$new_construction) {
      $x = null; $HOLE = null; $ret = null; $e_2 = null; $e = null;
      $set_last = new Func("set_last", function($lst = null) use (&$ret, &$HOLE, &$construction_p, &$ERROR, &$construction_tail) {
        $x = null; $d = null;
        if ($ret === $HOLE) {
          $ret = $lst;
          return ;
        }
        $x = $ret;
        while (true) {
          if (not(call($construction_p, $x))) {
            return call($ERROR);
          }
          $d = call($construction_tail, $x);
          if ($d === $HOLE) {
            break;
          }
          $x = call($construction_tail, $x);
        }
        if (not(call($construction_p, $x))) {
          return call($ERROR);
        }
        if (call($construction_tail, $x) !== $HOLE) {
          return call($ERROR);
        }
        set($x, 2, $lst);
      });
      $last_add = new Func("last_add", function($x = null) use (&$set_last, &$new_construction, &$HOLE) {
        call($set_last, call($new_construction, $x, $HOLE));
      });
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if ($x !== "(") {
        call($put, $x);
        return false;
      }
      $HOLE = call($new_symbol, "!!@@READ||HOLE@@!!");
      $ret = $HOLE;
      while (true) {
        call($space);
        if (is(call($eof))) {
          return call($parse_error);
        }
        $x = call($get);
        if ($x === ")") {
          call($set_last, $null_v);
          return $ret;
        }
        if ($x === ".") {
          call($space);
          $e_2 = call($val);
          call($set_last, $e_2);
          call($space);
          if (is(call($eof))) {
            return call($parse_error);
          }
          $x = call($get);
          if ($x !== ")") {
            return call($parse_error);
          }
          return $ret;
        }
        call($put, $x);
        $e = call($val);
        call($last_add, $e);
      }
    });
    $data = new Func("data", function() use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$new_data, &$construction_head, &$construction_tail) {
      $x = null; $xs = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if ($x !== "#") {
        call($put, $x);
        return false;
      }
      $xs = call($list);
      if ($xs === false) {
        return call($parse_error);
      }
      if (not(call($construction_p, $xs))) {
        return call($parse_error);
      }
      return call($new_data, call($construction_head, $xs), call($construction_tail, $xs));
    });
    $readerror = new Func("readerror", function() use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$new_error, &$construction_head, &$construction_tail) {
      $x = null; $xs = null;
      if (is(call($eof))) {
        return false;
      }
      $x = call($get);
      if ($x !== "!") {
        call($put, $x);
        return false;
      }
      $xs = call($list);
      if ($xs === false) {
        return call($parse_error);
      }
      if (not(call($construction_p, $xs))) {
        return call($parse_error);
      }
      return call($new_error, call($construction_head, $xs), call($construction_tail, $xs));
    });
    $make_read_two = new Func("make_read_two", function($prefix = null, $k = null) use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$construction_head) {
      return new Func(function() use (&$eof, &$get, &$prefix, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$k, &$construction_head) {
        $c = null; $xs = null; $x = null;
        if (is(call($eof))) {
          return false;
        }
        $c = call($get);
        if ($c !== $prefix) {
          call($put, $c);
          return false;
        }
        $xs = call($list);
        if ($xs === false) {
          return call($parse_error);
        }
        if (not(call($construction_p, $xs))) {
          return call($parse_error);
        }
        $x = call($construction_tail, $xs);
        if (not((is($and_ = call($construction_p, $x)) ? call($null_p, call($construction_tail, $x)) : $and_))) {
          return call($parse_error);
        }
        return call($k, call($construction_head, $xs), call($construction_head, $x));
      });
    });
    $make_read_three = new Func("make_read_three", function($prefix = null, $k = null) use (&$eof, &$get, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$construction_head) {
      return new Func(function() use (&$eof, &$get, &$prefix, &$put, &$list, &$parse_error, &$construction_p, &$construction_tail, &$null_p, &$k, &$construction_head) {
        $c = null; $xs = null; $x = null; $x_d = null;
        if (is(call($eof))) {
          return false;
        }
        $c = call($get);
        if ($c !== $prefix) {
          call($put, $c);
          return false;
        }
        $xs = call($list);
        if ($xs === false) {
          return call($parse_error);
        }
        if (not(call($construction_p, $xs))) {
          return call($parse_error);
        }
        $x = call($construction_tail, $xs);
        if (not(call($construction_p, $x))) {
          return call($parse_error);
        }
        $x_d = call($construction_tail, $x);
        if (not((is($and_ = call($construction_p, $x_d)) ? call($null_p, call($construction_tail, $x_d)) : $and_))) {
          return call($parse_error);
        }
        return call($k, call($construction_head, $xs), call($construction_head, $x), call($construction_head, $x_d));
      });
    });
    $a_symbol_p = new Func("a_symbol_p", function($x = null) use (&$a_space_p) {
      $not_xs = null; $i = null;
      if (is(call($a_space_p, $x))) {
        return false;
      }
      $not_xs = new Arr("(", ")", "!", "#", ".", "\$", "%", "^", "@", "~", "/", "-", ">", "_", ":", "?", "[", "]", "&");
      for ($i = 0; $i < get($not_xs, "length"); $i++) {
        if ($x === get($not_xs, $i)) {
          return false;
        }
      }
      return true;
    });
    $val = new Func("val", function() use (&$space, &$list, &$readsysname, &$data, &$readerror, &$readeval, &$readfuncapply, &$readformbuiltin, &$readapply, &$parse_error) {
      $fs = null; $i = null; $x_3 = null;
      call($space);
      $fs = new Arr($list, $readsysname, $data, $readerror, $readeval, $readfuncapply, $readformbuiltin, $readapply);
      for ($i = 0; $i < get($fs, "length"); $i++) {
        $x_3 = call_method($fs, $i);
        if ($x_3 !== false) {
          return $x_3;
        }
      }
      return call($parse_error);
    });
    $un_maybe = new Func("un_maybe", function($x = null) use (&$parse_error) {
      if ($x === false) {
        return call($parse_error);
      }
      return $x;
    });
    $not_eof = new Func("not_eof", function() use (&$eof) {
      return not(call($eof));
    });
    $assert_get = new Func("assert_get", function($c = null) use (&$un_maybe, &$not_eof, &$get) {
      call($un_maybe, call($not_eof));
      call($un_maybe, call($get) === $c);
    });
    $readsysname_no_pack = new Func("readsysname_no_pack", function() use (&$eof, &$get, &$un_maybe, &$not_eof, &$new_list, &$form_symbol, &$system_symbol, &$put, &$assert_get, &$typeAnnotation_symbol, &$theThing_symbol, &$function_symbol, &$something_symbol, &$symbol, &$ERROR, &$list, &$data, &$readerror, &$readeval, &$readfuncapply, &$readformbuiltin, &$readapply, &$parse_error, &$isOrNot_symbol, &$new_construction, &$sub_symbol, &$jsArray_to_list) {
      $readsysname_no_pack = Func::getCurrent();
      $head = null; $c0 = null; $x_4 = null; $x_5 = null; $x_6 = null; $x_7 = null; $x_8 = null; $x_9 = null; $x_10 = null; $x_11 = null; $x_12 = null;
      $readsysname_no_pack_inner_must = new Func("readsysname_no_pack_inner_must", function($strict = null) use (&$list, &$symbol, &$data, &$readerror, &$readeval, &$readfuncapply, &$readformbuiltin, &$readapply, &$readsysname_no_pack, &$parse_error, &$assert_get) {
        $readsysname_no_pack_inner_must = Func::getCurrent();
        $fs = null; $i = null; $x_13 = null;
        $readsysname_no_pack_bracket = new Func("readsysname_no_pack_bracket", function() use (&$assert_get, &$readsysname_no_pack_inner_must) {
          $x = null;
          call($assert_get, "[");
          $x = call($readsysname_no_pack_inner_must);
          call($assert_get, "]");
          return $x;
        });
        if ($strict === _void(0)) {
          $strict = false;
        }
        $fs = is($strict) ? new Arr($list, $symbol, $readsysname_no_pack_bracket, $data, $readerror, $readeval, $readfuncapply, $readformbuiltin, $readapply) : new Arr($list, $readsysname_no_pack, $data, $readerror, $readeval, $readfuncapply, $readformbuiltin, $readapply);
        for ($i = 0; $i < get($fs, "length"); $i++) {
          $x_13 = call_method($fs, $i);
          if ($x_13 !== false) {
            return $x_13;
          }
        }
        return call($parse_error);
      });
      $may_xfx_xf = new Func("may_xfx_xf", function($x = null) use (&$eof, &$get, &$readsysname_no_pack_inner_must, &$new_list, &$typeAnnotation_symbol, &$function_symbol, &$something_symbol, &$isOrNot_symbol, &$new_construction, &$put, &$sub_symbol, &$jsArray_to_list, &$ERROR) {
        $head = null; $y = null; $ys = null; $c0 = null;
        if (is(call($eof))) {
          return $x;
        }
        $head = call($get);
        if ($head === ".") {
          $y = call($readsysname_no_pack_inner_must);
          return call($new_list, $typeAnnotation_symbol, call($new_list, $function_symbol, call($new_list, $x), $something_symbol), $y);
        } else if ($head === ":") {
          $y = call($readsysname_no_pack_inner_must);
          return call($new_list, $typeAnnotation_symbol, $y, $x);
        } else if ($head === "~") {
          return call($new_list, $isOrNot_symbol, $x);
        } else if ($head === "@") {
          $y = call($readsysname_no_pack_inner_must);
          return call($new_list, $typeAnnotation_symbol, call($new_list, $function_symbol, call($new_construction, $x, $something_symbol), $something_symbol), $y);
        } else if ($head === "?") {
          return call($new_list, $typeAnnotation_symbol, $function_symbol, call($new_list, $isOrNot_symbol, $x));
        } else if ($head === "/") {
          $ys = new Arr();
          while (true) {
            $y = call($readsysname_no_pack_inner_must, true);
            call_method($ys, "push", $y);
            if (is(call($eof))) {
              break;
            }
            $c0 = call($get);
            if ($c0 !== "/") {
              call($put, $c0);
              break;
            }
          }
          return call($new_list, $sub_symbol, $x, call($jsArray_to_list, $ys));
        } else {
          call($put, $head);
          return $x;
        }






        return call($ERROR);
      });
      if (is(call($eof))) {
        return false;
      }
      $head = call($get);
      if ($head === "&") {
        call($un_maybe, call($not_eof));
        $c0 = call($get);
        if ($c0 === "+") {
          $x_4 = call($readsysname_no_pack_inner_must);
          return call($new_list, $form_symbol, call($new_list, $system_symbol, $x_4));
        } else {
          call($put, $c0);
        }

        $x_5 = call($readsysname_no_pack_inner_must);
        return call($new_list, $form_symbol, $x_5);
      } else if ($head === ":") {
        call($un_maybe, call($not_eof));
        $c0 = call($get);
        if ($c0 === "&") {
          call($assert_get, ">");
          $x_6 = call($readsysname_no_pack_inner_must);
          return call($new_list, $typeAnnotation_symbol, call($new_list, $form_symbol, call($new_list, $function_symbol, $something_symbol, $x_6)), $theThing_symbol);
        } else if ($c0 === ">") {
          $x_7 = call($readsysname_no_pack_inner_must);
          return call($new_list, $typeAnnotation_symbol, call($new_list, $function_symbol, $something_symbol, $x_7), $theThing_symbol);
        } else {
          call($put, $c0);
        }


        $x_8 = call($readsysname_no_pack_inner_must);
        return call($new_list, $typeAnnotation_symbol, $x_8, $theThing_symbol);
      } else if ($head === "+") {
        $x_9 = call($readsysname_no_pack_inner_must);
        return call($new_list, $system_symbol, $x_9);
      } else if ($head === "[") {
        $x_10 = call($readsysname_no_pack_inner_must);
        call($assert_get, "]");
        return call($may_xfx_xf, $x_10);
      } else if ($head === "_") {
        call($assert_get, ":");
        $x_11 = call($readsysname_no_pack_inner_must);
        return call($new_list, $typeAnnotation_symbol, $x_11, $something_symbol);
      } else {
        call($put, $head);
        $x_12 = call($symbol);
        if ($x_12 === false) {
          return false;
        }
        return call($may_xfx_xf, $x_12);
      }





      return call($ERROR);
      return call($ERROR);
    });
    $readsysname = new Func("readsysname", function() use (&$readsysname_no_pack, &$symbol_p, &$systemName_make) {
      $x = null;
      $x = call($readsysname_no_pack);
      if ($x === false) {
        return false;
      }
      if (is(call($symbol_p, $x))) {
        return $x;
      }
      return call($systemName_make, $x);
    });
    $state_const = $x;
    $state = 0;
    $readeval = call($make_read_two, "\$", new Func(function($e = null, $x = null) use (&$val2env, &$parse_error, &$evaluate) {
      $env = null;
      $env = call($val2env, $e);
      if ($env === false) {
        return call($parse_error);
      }
      return call($evaluate, $env, $x);
    }));
    $readfuncapply = call($make_read_two, "%", new Func(function($f = null, $xs = null) use (&$list_to_jsArray, &$builtin_func_apply, &$parse_error) {
      $jsxs = null;
      $jsxs = call($list_to_jsArray, $xs, new Func(function($xs = null) {
        return $xs;
      }), new Func(function($xs = null, $y = null) use (&$parse_error) {
        return call($parse_error);
      }));
      return call($builtin_func_apply, $f, $jsxs);
    }));
    $readformbuiltin = call($make_read_three, "@", new Func(function($e = null, $f = null, $xs = null) use (&$list_to_jsArray, &$val2env, &$parse_error, &$builtin_form_apply) {
      $jsxs = null; $env = null;
      $jsxs = call($list_to_jsArray, $xs, new Func(function($xs = null) {
        return $xs;
      }), new Func(function($xs = null, $y = null) use (&$parse_error) {
        return call($parse_error);
      }));
      $env = call($val2env, $e);
      if ($env === false) {
        return call($parse_error);
      }
      return call($builtin_form_apply, $env, $f, $jsxs);
    }));
    $readapply = call($make_read_two, "^", new Func(function($f = null, $xs = null) use (&$list_to_jsArray, &$apply, &$parse_error) {
      $jsxs = null;
      $jsxs = call($list_to_jsArray, $xs, new Func(function($xs = null) {
        return $xs;
      }), new Func(function($xs = null, $y = null) use (&$parse_error) {
        return call($parse_error);
      }));
      return call($apply, $f, $jsxs);
    }));
    return call($val);
  });
  $complex_print = new Func("complex_print", function($val = null) use (&$simple_parse, &$simple_print, &$null_p, &$construction_p, &$construction_head, &$construction_tail, &$data_p, &$data_name, &$data_list, &$maybe_list_to_jsArray, &$jsbool_no_force_equal_p, &$name_symbol, &$system_symbol, &$new_construction, &$error_p, &$error_name, &$error_list, &$symbol_p, &$un_symbol, &$delay_evaluate_p, &$env2val, &$delay_evaluate_env, &$delay_evaluate_x, &$delay_builtin_func_p, &$delay_builtin_func_f, &$jsArray_to_list, &$delay_builtin_func_xs, &$delay_builtin_form_p, &$delay_builtin_form_env, &$delay_builtin_form_f, &$delay_builtin_form_xs, &$delay_apply_p, &$delay_apply_f, &$delay_apply_xs, &$ERROR, &$typeAnnotation_symbol, &$function_symbol, &$something_symbol, &$theThing_symbol, &$isOrNot_symbol, &$form_symbol, &$sub_symbol, &$systemName_make) {
    $complex_print = Func::getCurrent();
    $x = null; $temp = null; $prefix = null; $name_1 = null; $list = null; $maybe_xs = null;
    $print_sys_name = new Func("print_sys_name", function($x = null, $where = null) use (&$symbol_p, &$un_symbol, &$maybe_list_to_jsArray, &$jsbool_no_force_equal_p, &$typeAnnotation_symbol, &$function_symbol, &$something_symbol, &$construction_p, &$construction_tail, &$construction_head, &$theThing_symbol, &$isOrNot_symbol, &$form_symbol, &$system_symbol, &$sub_symbol, &$simple_print, &$systemName_make, &$ERROR) {
      $print_sys_name = Func::getCurrent();
      $maybe_xs = null; $maybe_lst_2 = null; $var_2_1 = null; $maybe_lst_3 = null; $maybe_lst_44 = null; $maybe_lst_88 = null; $hd = null; $maybe_lst_288 = null; $maybe_lst_8934 = null; $tmp = null; $i = null;
      $inner_bracket = new Func("inner_bracket", function($x = null) use (&$where, &$ERROR) {
        if ($where === "inner") {
          return _concat("[", $x, "]");
        } else if ($where === "top") {
          return $x;
        }

        return call($ERROR);
      });
      if (is(call($symbol_p, $x))) {
        return call($un_symbol, $x);
      }
      $maybe_xs = call($maybe_list_to_jsArray, $x);
      if ($maybe_xs !== false && get($maybe_xs, "length") === 3 && is(call($jsbool_no_force_equal_p, $maybe_xs[0], $typeAnnotation_symbol))) {
        $maybe_lst_2 = call($maybe_list_to_jsArray, $maybe_xs[1]);
        if ($maybe_lst_2 !== false && get($maybe_lst_2, "length") === 3 && is(call($jsbool_no_force_equal_p, $maybe_lst_2[0], $function_symbol))) {
          $var_2_1 = $maybe_lst_2[1];
          $maybe_lst_3 = call($maybe_list_to_jsArray, $var_2_1);
          if ($maybe_lst_3 !== false && get($maybe_lst_3, "length") === 1 && is(call($jsbool_no_force_equal_p, $maybe_lst_2[2], $something_symbol))) {
            return call($inner_bracket, _concat(call($print_sys_name, $maybe_lst_3[0], "inner"), ".", call($print_sys_name, $maybe_xs[2], "inner")));
          } else if (is(call($construction_p, $var_2_1)) && is(call($jsbool_no_force_equal_p, call($construction_tail, $var_2_1), $something_symbol)) && is(call($jsbool_no_force_equal_p, $maybe_lst_2[2], $something_symbol))) {
            return call($inner_bracket, _concat(call($print_sys_name, call($construction_head, $var_2_1), "inner"), "@", call($print_sys_name, $maybe_xs[2], "inner")));
          } else if (is(call($jsbool_no_force_equal_p, $var_2_1, $something_symbol)) && is(call($jsbool_no_force_equal_p, $maybe_xs[2], $theThing_symbol))) {
            return call($inner_bracket, _concat(":>", call($print_sys_name, $maybe_lst_2[2], "inner")));
          }


        }
        $maybe_lst_44 = call($maybe_list_to_jsArray, $maybe_xs[2]);
        if (is(call($jsbool_no_force_equal_p, $maybe_xs[1], $function_symbol)) && $maybe_lst_44 !== false && get($maybe_lst_44, "length") === 2 && is(call($jsbool_no_force_equal_p, $maybe_lst_44[0], $isOrNot_symbol))) {
          return call($inner_bracket, _concat(call($print_sys_name, $maybe_lst_44[1], "inner"), "?"));
        }
        if ($maybe_lst_2 !== false && get($maybe_lst_2, "length") === 2 && is(call($jsbool_no_force_equal_p, $maybe_xs[2], $theThing_symbol)) && is(call($jsbool_no_force_equal_p, $maybe_lst_2[0], $form_symbol))) {
          $maybe_lst_88 = call($maybe_list_to_jsArray, $maybe_lst_2[1]);
          if ($maybe_lst_88 !== false && get($maybe_lst_88, "length") === 3 && is(call($jsbool_no_force_equal_p, $maybe_lst_88[0], $function_symbol)) && is(call($jsbool_no_force_equal_p, $maybe_lst_88[1], $something_symbol))) {
            return call($inner_bracket, _concat(":&>", call($print_sys_name, $maybe_lst_88[2], "inner")));
          }
        }
        $hd = is(call($jsbool_no_force_equal_p, $maybe_xs[2], $something_symbol)) ? "_" : (is(call($jsbool_no_force_equal_p, $maybe_xs[2], $theThing_symbol)) ? "" : call($print_sys_name, $maybe_xs[2], "inner"));
        return call($inner_bracket, _concat($hd, ":", call($print_sys_name, $maybe_xs[1], "inner")));
      } else if ($maybe_xs !== false && get($maybe_xs, "length") === 2) {
        if (is(call($jsbool_no_force_equal_p, $maybe_xs[0], $form_symbol))) {
          $maybe_lst_288 = call($maybe_list_to_jsArray, $maybe_xs[1]);
          if ($maybe_lst_288 !== false && get($maybe_lst_288, "length") === 2 && is(call($jsbool_no_force_equal_p, $maybe_lst_288[0], $system_symbol))) {
            return call($inner_bracket, _concat("&+", call($print_sys_name, $maybe_lst_288[1], "inner")));
          }
          return call($inner_bracket, _concat("&", call($print_sys_name, $maybe_xs[1], "inner")));
        } else if (is(call($jsbool_no_force_equal_p, $maybe_xs[0], $isOrNot_symbol))) {
          return call($inner_bracket, _concat(call($print_sys_name, $maybe_xs[1], "inner"), "~"));
        } else if (is(call($jsbool_no_force_equal_p, $maybe_xs[0], $system_symbol))) {
          return call($inner_bracket, _concat("+", call($print_sys_name, $maybe_xs[1], "inner")));
        }


      } else if ($maybe_xs !== false && get($maybe_xs, "length") === 3 && is(call($jsbool_no_force_equal_p, $maybe_xs[0], $sub_symbol))) {
        $maybe_lst_8934 = call($maybe_list_to_jsArray, $maybe_xs[2]);
        if ($maybe_lst_8934 !== false && get($maybe_lst_8934, "length") !== 0) {
          $tmp = "";
          for ($i = 0; $i < get($maybe_lst_8934, "length"); $i++) {
            $tmp += _concat("/", call($print_sys_name, get($maybe_lst_8934, $i), "inner"));
          }
          return call($inner_bracket, _plus(call($print_sys_name, $maybe_xs[1], "inner"), $tmp));
        }
      }


      if ($where === "inner") {
        return call($simple_print, $x);
      } else if ($where === "top") {
        return call($simple_print, call($systemName_make, $x));
      }

      return call($ERROR);
    });
    $x = call($simple_parse, call($simple_print, $val));
    $temp = "";
    $prefix = "";
    if (is(call($null_p, $x))) {
      return "()";
    } else if (is(call($construction_p, $x))) {
      $temp = "(";
      $prefix = "";
      while (is(call($construction_p, $x))) {
        $temp += _plus($prefix, call($complex_print, call($construction_head, $x)));
        $prefix = " ";
        $x = call($construction_tail, $x);
      }
      if (is(call($null_p, $x))) {
        $temp += ")";
      } else {
        $temp += _concat(" . ", call($complex_print, $x), ")");
      }

      return $temp;
    } else if (is(call($data_p, $x))) {
      $name_1 = call($data_name, $x);
      $list = call($data_list, $x);
      $maybe_xs = call($maybe_list_to_jsArray, $list);
      if ($maybe_xs !== false && get($maybe_xs, "length") === 2 && is(call($jsbool_no_force_equal_p, $name_1, $name_symbol)) && is(call($jsbool_no_force_equal_p, $maybe_xs[0], $system_symbol))) {
        return call($print_sys_name, $maybe_xs[1], "top");
      }
      return _concat("#", call($complex_print, call($new_construction, $name_1, $list)));
    } else if (is(call($error_p, $x))) {
      return _concat("!", call($complex_print, call($new_construction, call($error_name, $x), call($error_list, $x))));
    } else if (is(call($symbol_p, $x))) {
      return call($un_symbol, $x);
    } else if (is(call($delay_evaluate_p, $x))) {
      return _concat("\$(", call($complex_print, call($env2val, call($delay_evaluate_env, $x))), " ", call($complex_print, call($delay_evaluate_x, $x)), ")");
    } else if (is(call($delay_builtin_func_p, $x))) {
      return _concat("%(", call($complex_print, call($delay_builtin_func_f, $x)), " ", call($complex_print, call($jsArray_to_list, call($delay_builtin_func_xs, $x))), ")");
    } else if (is(call($delay_builtin_form_p, $x))) {
      return _concat("@(", call($complex_print, call($env2val, call($delay_builtin_form_env, $x))), " ", call($complex_print, call($delay_builtin_form_f, $x)), " ", call($complex_print, call($jsArray_to_list, call($delay_builtin_form_xs, $x))), ")");
    } else if (is(call($delay_apply_p, $x))) {
      return _concat("^(", call($complex_print, call($delay_apply_f, $x)), " ", call($complex_print, call($jsArray_to_list, call($delay_apply_xs, $x))), ")");
    }








    return call($ERROR);
  });
  $exports = new Object();
  set($exports, "__esModule", true);
  $symbol_t = 0;
  $construction_t = 1;
  $null_t = 2;
  $data_t = 3;
  $error_t = 4;
  $just_t = 5;
  $delay_evaluate_t = 6;
  $delay_builtin_func_t = 7;
  $delay_builtin_form_t = 8;
  $delay_apply_t = 9;
  set($exports, "new_symbol", $new_symbol);
  set($exports, "symbol_p", $symbol_p);
  set($exports, "un_symbol", $un_symbol);
  set($exports, "new_construction", $new_construction);
  set($exports, "construction_p", $construction_p);
  set($exports, "construction_head", $construction_head);
  set($exports, "construction_tail", $construction_tail);
  $null_v = new Arr($null_t);
  set($exports, "null_v", $null_v);
  set($exports, "null_p", $null_p);
  set($exports, "new_data", $new_data);
  set($exports, "data_p", $data_p);
  set($exports, "data_name", $data_name);
  set($exports, "data_list", $data_list);
  set($exports, "new_error", $new_error);
  set($exports, "error_p", $error_p);
  set($exports, "error_name", $error_name);
  set($exports, "error_list", $error_list);
  set($exports, "evaluate", $evaluate);
  set($exports, "apply", $apply);
  set($exports, "force_all_rec", $force_all_rec);
  $system_symbol = call($new_symbol, "\xE5\xA4\xAA\xE5\xA7\x8B\xE5\x88\x9D\xE6\xA0\xB8");
  set($exports, "system_symbol", $system_symbol);
  $name_symbol = call($new_symbol, "\xE7\xAC\xA6\xE5\x90\x8D");
  set($exports, "name_symbol", $name_symbol);
  $function_symbol = call($new_symbol, "\xE5\x8C\x96\xE6\xBB\x85");
  set($exports, "function_symbol", $function_symbol);
  $form_symbol = call($new_symbol, "\xE5\xBC\x8F\xE5\xBD\xA2");
  set($exports, "form_symbol", $form_symbol);
  $equal_symbol = call($new_symbol, "\xE7\xAD\x89\xE5\x90\x8C");
  set($exports, "equal_symbol", $equal_symbol);
  $evaluate_sym = call($new_symbol, "\xE8\xA7\xA3\xE7\xAE\x97");
  set($exports, "evaluate_sym", $evaluate_sym);
  $theThing_symbol = call($new_symbol, "\xE7\x89\xB9\xE5\xAE\x9A\xE5\x85\xB6\xE7\x89\xA9");
  set($exports, "theThing_symbol", $theThing_symbol);
  $something_symbol = call($new_symbol, "\xE7\x9C\x81\xE7\x95\xA5\xE4\xB8\x80\xE7\x89\xA9");
  set($exports, "something_symbol", $something_symbol);
  $mapping_symbol = call($new_symbol, "\xE6\x98\xA0\xE8\xA1\xA8");
  set($exports, "mapping_symbol", $mapping_symbol);
  $if_symbol = call($new_symbol, "\xE8\x8B\xA5");
  set($exports, "if_symbol", $if_symbol);
  $typeAnnotation_symbol = call($new_symbol, "\xE4\xB8\x80\xE9\xA1\x9E\xE4\xBD\x95\xE7\x89\xA9");
  set($exports, "typeAnnotation_symbol", $typeAnnotation_symbol);
  $isOrNot_symbol = call($new_symbol, "\xE6\x98\xAF\xE9\x9D\x9E");
  set($exports, "isOrNot_symbol", $isOrNot_symbol);
  $sub_symbol = call($new_symbol, "\xE5\x85\xB6\xE5\xAD\x90");
  set($exports, "sub_symbol", $sub_symbol);
  $true_symbol = call($new_symbol, "\xE9\x99\xBD");
  set($exports, "true_symbol", $true_symbol);
  $false_symbol = call($new_symbol, "\xE9\x99\xB0");
  set($exports, "false_symbol", $false_symbol);
  $quote_symbol = call($new_symbol, "\xE5\xBC\x95\xE7\x94\xA8");
  set($exports, "quote_symbol", $quote_symbol);
  $apply_symbol = call($new_symbol, "\xE6\x87\x89\xE7\x94\xA8");
  set($exports, "apply_symbol", $apply_symbol);
  $null_symbol = call($new_symbol, "\xE7\xA9\xBA");
  set($exports, "null_symbol", $null_symbol);
  $construction_symbol = call($new_symbol, "\xE9\x80\xA3");
  set($exports, "construction_symbol", $construction_symbol);
  $data_symbol = call($new_symbol, "\xE6\xA7\x8B");
  set($exports, "data_symbol", $data_symbol);
  $error_symbol = call($new_symbol, "\xE8\xAA\xA4");
  set($exports, "error_symbol", $error_symbol);
  $symbol_symbol = call($new_symbol, "\xE8\xA9\x9E\xE7\xB4\xA0");
  set($exports, "symbol_symbol", $symbol_symbol);
  $list_symbol = call($new_symbol, "\xE5\x88\x97");
  set($exports, "list_symbol", $list_symbol);
  $head_symbol = call($new_symbol, "\xE9\xA6\x96");
  set($exports, "head_symbol", $head_symbol);
  $tail_symbol = call($new_symbol, "\xE5\xB0\xBE");
  set($exports, "tail_symbol", $tail_symbol);
  $thing_symbol = call($new_symbol, "\xE7\x89\xA9");
  set($exports, "thing_symbol", $thing_symbol);
  $theWorldStopped_symbol = call($new_symbol, "\xE5\xAE\x87\xE5\xAE\x99\xE4\xBA\xA1\xE7\x9F\xA3");
  set($exports, "theWorldStopped_symbol", $theWorldStopped_symbol);
  $effect_symbol = call($new_symbol, "\xE6\x95\x88\xE6\x87\x89");
  set($exports, "effect_symbol", $effect_symbol);
  $sequentialWordFormation_symbol = call($new_symbol, "\xE7\x82\xBA\xE7\xAC\xA6\xE5\x90\x8D\xE9\x80\xA3");
  set($exports, "sequentialWordFormation_symbol", $sequentialWordFormation_symbol);
  $inputOutput_symbol = call($new_symbol, "\xE5\x87\xBA\xE5\x85\xA5\xE6\x94\xB9\xE6\xBB\x85");
  set($exports, "inputOutput_symbol", $inputOutput_symbol);
  $the_world_stopped_v = call($new_error, $system_symbol, call($new_list, $theWorldStopped_symbol, $something_symbol));
  $new_data_function_builtin_systemName = call($make_builtin_f_new_sym_f, $data_symbol);
  set($exports, "new_data_function_builtin_systemName", $new_data_function_builtin_systemName);
  $data_name_function_builtin_systemName = call($make_builtin_f_get_sym_f, $data_symbol, $name_symbol);
  set($exports, "data_name_function_builtin_systemName", $data_name_function_builtin_systemName);
  $data_list_function_builtin_systemName = call($make_builtin_f_get_sym_f, $data_symbol, $list_symbol);
  set($exports, "data_list_function_builtin_systemName", $data_list_function_builtin_systemName);
  $data_p_function_builtin_systemName = call($make_builtin_f_p_sym_f, $data_symbol);
  set($exports, "data_p_function_builtin_systemName", $data_p_function_builtin_systemName);
  $new_error_function_builtin_systemName = call($make_builtin_f_new_sym_f, $error_symbol);
  set($exports, "new_error_function_builtin_systemName", $new_error_function_builtin_systemName);
  $error_name_function_builtin_systemName = call($make_builtin_f_get_sym_f, $error_symbol, $name_symbol);
  set($exports, "error_name_function_builtin_systemName", $error_name_function_builtin_systemName);
  $error_list_function_builtin_systemName = call($make_builtin_f_get_sym_f, $error_symbol, $list_symbol);
  set($exports, "error_list_function_builtin_systemName", $error_list_function_builtin_systemName);
  $error_p_function_builtin_systemName = call($make_builtin_f_p_sym_f, $error_symbol);
  set($exports, "error_p_function_builtin_systemName", $error_p_function_builtin_systemName);
  $new_construction_function_builtin_systemName = call($make_builtin_f_new_sym_f, $construction_symbol);
  set($exports, "new_construction_function_builtin_systemName", $new_construction_function_builtin_systemName);
  $construction_p_function_builtin_systemName = call($make_builtin_f_p_sym_f, $construction_symbol);
  set($exports, "construction_p_function_builtin_systemName", $construction_p_function_builtin_systemName);
  $construction_head_function_builtin_systemName = call($make_builtin_f_get_sym_f, $construction_symbol, $head_symbol);
  set($exports, "construction_head_function_builtin_systemName", $construction_head_function_builtin_systemName);
  $construction_tail_function_builtin_systemName = call($make_builtin_f_get_sym_f, $construction_symbol, $tail_symbol);
  set($exports, "construction_tail_function_builtin_systemName", $construction_tail_function_builtin_systemName);
  $symbol_p_function_builtin_systemName = call($make_builtin_f_p_sym_f, $symbol_symbol);
  set($exports, "symbol_p_function_builtin_systemName", $symbol_p_function_builtin_systemName);
  $null_p_function_builtin_systemName = call($make_builtin_f_p_sym_f, $null_symbol);
  set($exports, "null_p_function_builtin_systemName", $null_p_function_builtin_systemName);
  $equal_p_function_builtin_systemName = call($systemName_make, call($new_list, $typeAnnotation_symbol, $function_symbol, call($new_list, $isOrNot_symbol, $equal_symbol)));
  set($exports, "equal_p_function_builtin_systemName", $equal_p_function_builtin_systemName);
  $apply_function_builtin_systemName = call($systemName_make, call($new_list, $typeAnnotation_symbol, call($new_list, $function_symbol, call($new_construction, $function_symbol, $something_symbol), $something_symbol), $apply_symbol));
  set($exports, "apply_function_builtin_systemName", $apply_function_builtin_systemName);
  $evaluate_function_builtin_systemName = call($systemName_make, call($new_list, $typeAnnotation_symbol, $function_symbol, $evaluate_sym));
  set($exports, "evaluate_function_builtin_systemName", $evaluate_function_builtin_systemName);
  $list_chooseOne_function_builtin_systemName = call($make_builtin_f_get_sym_f, $list_symbol, call($new_list, $typeAnnotation_symbol, $thing_symbol, $something_symbol));
  set($exports, "list_chooseOne_function_builtin_systemName", $list_chooseOne_function_builtin_systemName);
  $if_function_builtin_systemName = call($systemName_make, call($new_list, $typeAnnotation_symbol, $function_symbol, $if_symbol));
  set($exports, "if_function_builtin_systemName", $if_function_builtin_systemName);
  $quote_form_builtin_systemName = call($systemName_make, call($new_list, $typeAnnotation_symbol, $form_symbol, $quote_symbol));
  set($exports, "quote_form_builtin_systemName", $quote_form_builtin_systemName);
  $lambda_form_builtin_systemName = call($systemName_make, call($new_list, $typeAnnotation_symbol, call($new_list, $form_symbol, call($new_list, $function_symbol, $something_symbol, $function_symbol)), $theThing_symbol));
  set($exports, "lambda_form_builtin_systemName", $lambda_form_builtin_systemName);
  $function_builtin_use_systemName = call($systemName_make, call($new_list, $form_symbol, call($new_list, $system_symbol, $function_symbol)));
  set($exports, "function_builtin_use_systemName", $function_builtin_use_systemName);
  $form_builtin_use_systemName = call($systemName_make, call($new_list, $form_symbol, call($new_list, $system_symbol, $form_symbol)));
  set($exports, "form_builtin_use_systemName", $form_builtin_use_systemName);
  $form_use_systemName = call($systemName_make, call($new_list, $form_symbol, $form_symbol));
  set($exports, "form_use_systemName", $form_use_systemName);
  $false_v = call($new_data, $false_symbol, call($new_list));
  $true_v = call($new_data, $true_symbol, call($new_list));
  set($exports, "jsArray_to_list", $jsArray_to_list);
  set($exports, "maybe_list_to_jsArray", $maybe_list_to_jsArray);
  set($exports, "new_list", $new_list);
  set($exports, "delay_p", $any_delay_just_p);
  set($exports, "force_all", $force_all);
  set($exports, "force1", $force1);
  $env_null_v = new Arr();
  set($exports, "env_null_v", $env_null_v);
  set($exports, "env_set", $env_set);
  set($exports, "env_get", $env_get);
  set($exports, "env2val", $env2val);
  set($exports, "env_foreach", $env_foreach);
  set($exports, "val2env", $val2env);
  $real_builtin_func_apply_s = new Arr(call($make_builtin_p_func, $data_p_function_builtin_systemName, $data_p), new Arr($new_data_function_builtin_systemName, 2, $new_data), call($make_builtin_get_func, $data_name_function_builtin_systemName, $data_p, $data_name), call($make_builtin_get_func, $data_list_function_builtin_systemName, $data_p, $data_list), call($make_builtin_p_func, $error_p_function_builtin_systemName, $error_p), new Arr($new_error_function_builtin_systemName, 2, $new_error), call($make_builtin_get_func, $error_name_function_builtin_systemName, $error_p, $error_name), call($make_builtin_get_func, $error_list_function_builtin_systemName, $error_p, $error_list), call($make_builtin_p_func, $null_p_function_builtin_systemName, $null_p), new Arr($new_construction_function_builtin_systemName, 2, $new_construction), call($make_builtin_p_func, $construction_p_function_builtin_systemName, $construction_p), call($make_builtin_get_func, $construction_head_function_builtin_systemName, $construction_p, $construction_head), call($make_builtin_get_func, $construction_tail_function_builtin_systemName, $construction_p, $construction_tail), new Arr($equal_p_function_builtin_systemName, 2, new Func(function($x = null, $y = null, $error_v = null) use (&$true_v, &$force1, &$any_delay_just_p, &$builtin_func_apply, &$equal_p_function_builtin_systemName, &$ASSERT, &$null_p, &$false_v, &$symbol_p, &$symbol_equal_p, &$data_p, &$data_name, &$data_list, &$construction_p, &$construction_head, &$construction_tail, &$error_p, &$error_name, &$error_list, &$ERROR, &$if_function_builtin_systemName) {
    $H_if = new Func("H_if", function($b = null, $x = null, $y = null) use (&$builtin_func_apply, &$if_function_builtin_systemName) {
      return call($builtin_func_apply, $if_function_builtin_systemName, new Arr($b, $x, $y));
    });
    $H_and = new Func("H_and", function($x = null, $y = null) use (&$H_if, &$false_v) {
      return call($H_if, $x, $y, $false_v);
    });
    $end_2 = new Func("end_2", function($x = null, $y = null, $f1 = null, $f2 = null) use (&$H_and, &$builtin_func_apply, &$equal_p_function_builtin_systemName) {
      return call($H_and, call($builtin_func_apply, $equal_p_function_builtin_systemName, new Arr(call($f1, $x), call($f1, $y))), call($builtin_func_apply, $equal_p_function_builtin_systemName, new Arr(call($f2, $x), call($f2, $y))));
    });
    if ($x === $y) {
      return $true_v;
    }
    $x = call($force1, $x);
    $y = call($force1, $y);
    if (is(call($any_delay_just_p, $x)) || is(call($any_delay_just_p, $y))) {
      return call($builtin_func_apply, $equal_p_function_builtin_systemName, new Arr($x, $y));
    }
    if ($x === $y) {
      return $true_v;
    }
    call($ASSERT, not(call($any_delay_just_p, $x)));
    if (is(call($null_p, $x))) {
      if (not(call($null_p, $x))) {
        return $false_v;
      }
      return $true_v;
    } else if (is(call($symbol_p, $x))) {
      if (not(call($symbol_p, $y))) {
        return $false_v;
      }
      return is(call($symbol_equal_p, $x, $y)) ? $true_v : $false_v;
    } else if (is(call($data_p, $x))) {
      if (not(call($data_p, $y))) {
        return $false_v;
      }
      return call($end_2, $x, $y, $data_name, $data_list);
    } else if (is(call($construction_p, $x))) {
      if (not(call($construction_p, $y))) {
        return $false_v;
      }
      return call($end_2, $x, $y, $construction_head, $construction_tail);
    } else if (is(call($error_p, $x))) {
      if (not(call($error_p, $y))) {
        return $false_v;
      }
      return call($end_2, $x, $y, $error_name, $error_list);
    }




    return call($ERROR);
  })), new Arr($apply_function_builtin_systemName, 2, new Func(function($f = null, $xs = null, $error_v = null) use (&$force_all, &$construction_p, &$construction_head, &$construction_tail, &$null_p, &$apply) {
    $jslist = null; $iter = null;
    $jslist = new Arr();
    $iter = call($force_all, $xs);
    while (is(call($construction_p, $iter))) {
      call_method($jslist, "push", call($construction_head, $iter));
      $iter = call($force_all, call($construction_tail, $iter));
    }
    if (not(call($null_p, $iter))) {
      return $error_v;
    }
    return call($apply, $f, $jslist);
  })), new Arr($evaluate_function_builtin_systemName, 2, new Func(function($env = null, $x = null, $error_v = null) use (&$val2env, &$evaluate) {
    $maybeenv = null;
    $maybeenv = call($val2env, $env);
    if ($maybeenv === false) {
      return $error_v;
    }
    return call($evaluate, $maybeenv, $x);
  })), call($make_builtin_p_func, $symbol_p_function_builtin_systemName, $symbol_p), new Arr($list_chooseOne_function_builtin_systemName, 1, new Func(function($xs = null, $error_v = null) use (&$force1, &$any_delay_just_p, &$builtin_func_apply, &$list_chooseOne_function_builtin_systemName, &$construction_p, &$construction_head) {
    $xs = call($force1, $xs);
    if (is(call($any_delay_just_p, $xs))) {
      return call($builtin_func_apply, $list_chooseOne_function_builtin_systemName, new Arr($xs));
    }
    if (not(call($construction_p, $xs))) {
      return $error_v;
    }
    return call($construction_head, $xs);
  })), new Arr($if_function_builtin_systemName, 3, new Func(function($b = null, $x = null, $y = null, $error_v = null) use (&$force1, &$any_delay_just_p, &$builtin_func_apply, &$if_function_builtin_systemName, &$data_p, &$force_all, &$data_name, &$symbol_p, &$symbol_equal_p, &$true_symbol, &$false_symbol) {
    $nam = null;
    $b = call($force1, $b);
    if (is(call($any_delay_just_p, $b))) {
      return call($builtin_func_apply, $if_function_builtin_systemName, new Arr($b, $x, $y));
    }
    if (not(call($data_p, $b))) {
      return $error_v;
    }
    $nam = call($force_all, call($data_name, $b));
    if (not(call($symbol_p, $nam))) {
      return $error_v;
    }
    if (is(call($symbol_equal_p, $nam, $true_symbol))) {
      return $x;
    }
    if (is(call($symbol_equal_p, $nam, $false_symbol))) {
      return $y;
    }
    return $error_v;
  })));
  set($exports, "equal_p", $jsbool_equal_p);
  set($exports, "simple_print", $simple_print);
  set($exports, "simple_print_force_all_rec", $simple_print_force_all_rec);
  set($exports, "simple_parse", $simple_parse);
  set($exports, "complex_parse", $complex_parse);
  set($exports, "complex_print", $complex_print);
  $return_inputOutput_systemName = call($complex_parse, "\xE6\x95\x88\xE6\x87\x89/[:\xE7\x89\xA9]");
  set($exports, "return_inputOutput_systemName", $return_inputOutput_systemName);
  $bind_inputOutput_systemName = call($complex_parse, "\xE6\x95\x88\xE6\x87\x89/\xE9\x80\xA3");
  set($exports, "bind_inputOutput_systemName", $bind_inputOutput_systemName);
  $ecmascript_systemName = call($systemName_make, call($complex_parse, "(\xE7\x82\xBA\xE7\xAC\xA6\xE5\x90\x8D\xE9\x80\xA3 e c m a s c r i p t)"));
  set($exports, "ecmascript_systemName", $ecmascript_systemName);
  return $exports;
}));
