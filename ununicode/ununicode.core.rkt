#|
    The Language
    Copyright (C) 2019  Zaoqi <zaomir@outlook.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
|#
#lang typed/racket
(provide (all-defined-out))
(define-type UUCCharUnicodeCode Char)
(define-type LangCode (Pairof Symbol Symbol))
(define-type UUCChar Symbol)
(: all-char (Parameterof (Immutable-HashTable UUCChar UUCCharUnicodeCode)))
(define all-char (make-parameter (ann (hash) (Immutable-HashTable UUCChar UUCCharUnicodeCode))))
(: all-langcode (Parameterof (Setof LangCode)))
(define all-langcode (make-parameter (ann (set) (Setof LangCode))))
(: l18n (Parameterof (Immutable-HashTable LangCode (Immutable-HashTable UUCChar String))))
(define l18n (make-parameter (ann (hash) (Immutable-HashTable LangCode (Immutable-HashTable UUCChar String)))))
(: add-langcode (-> LangCode Void))
(define (add-langcode x)
  (assert (not (set-member? (all-langcode) x)))
  (all-langcode (set-add (all-langcode) x))
  (assert (not (hash-has-key? (l18n) x)))
  (l18n (hash-set (l18n) x ((ann hash (-> (Immutable-HashTable UUCChar String)))))))
(: _ (-> UUCChar UUCCharUnicodeCode Void))
(define (_ x ccc)
  (assert (not (hash-has-key? (all-char) x)))
  (all-char (hash-set (all-char) x ccc)))
(: ~ (-> LangCode UUCChar String Void))
(define (~ lc ch str)
  (assert (hash-has-key? (all-char) ch))
  (assert (set-member? (all-langcode) lc))
  (l18n (hash-update (l18n) lc (lambda ([lt : (Immutable-HashTable UUCChar String)])
                                 (assert (not (hash-has-key? lt ch)))
                                 (hash-set lt ch str)))))

(add-langcode '(English . US))

(_ '太始初核 #\𣝗)
(_ '符名 #\謼)
(_ '化滅 #\𠏁)
(_ '式形 #\佱)
(_ '等同 #\弌)
(_ '解算 #\筭)
(_ '特定其物 #\亓)
(_ '省略一物 #\畧)
(_ '映表 #\𤅔)
(_ '如若 #\𦱡)
(_ '一類何物 #\㝉)
(_ '是非 #\欤)
(_ '其子 #\𦮪)
(_ '爻陽 #\𣆄)
(_ '爻陰 #\侌)
(_ '引用 #\㧈)
(_ '應用 #\𤰆)
(_ '間空 #\𣣓)
(_ '連頸 #\丩)
(_ '構物 #\𡒫)
(_ '謬誤 #\䥘)
(_ '詞素 #\𧥝)
(_ '列序 #\𠜺)
(_ '首始 #\𩠐)
(_ '尾末 #\𡲵)
(_ '之物 #\𫙦)
(_ '宇宙亡矣 #\𨹹)
(_ '效應 #\効)
(_ '為符名連 #\‐) ;; U+2010
(_ '出入改滅 #\𢒟)
(_ '參形 #\𠫰)
(_ '吾自 #\𦣹)

(_ 'a #\a)
(_ 'b #\b)
(_ 'c #\c)
(_ 'd #\d)
(_ 'e #\e)
(_ 'f #\f)
(_ 'g #\g)
(_ 'h #\h)
(_ 'i #\i)
(_ 'j #\j)
(_ 'k #\k)
(_ 'l #\l)
(_ 'm #\m)
(_ 'n #\n)
(_ 'o #\o)
(_ 'p #\p)
(_ 'q #\q)
(_ 'r #\r)
(_ 's #\s)
(_ 't #\t)
(_ 'u #\u)
(_ 'v #\v)
(_ 'w #\w)
(_ 'x #\x)
(_ 'y #\y)
(_ 'z #\z)
(_ 'A #\A)
(_ 'B #\B)
(_ 'C #\C)
(_ 'D #\D)
(_ 'E #\E)
(_ 'F #\F)
(_ 'G #\G)
(_ 'H #\H)
(_ 'I #\I)
(_ 'J #\J)
(_ 'K #\K)
(_ 'L #\L)
(_ 'M #\M)
(_ 'N #\N)
(_ 'O #\O)
(_ 'P #\P)
(_ 'Q #\Q)
(_ 'R #\R)
(_ 'S #\S)
(_ 'T #\T)
(_ 'U #\U)
(_ 'V #\V)
(_ 'W #\W)
(_ 'X #\X)
(_ 'Y #\Y)
(_ 'Z #\Z)

(_ '|0| #\0)
(_ '|1| #\1)
(_ '|2| #\2)
(_ '|3| #\3)
(_ '|4| #\4)
(_ '|5| #\5)
(_ '|6| #\6)
(_ '|7| #\7)
(_ '|8| #\8)
(_ '|9| #\9)

(_ '序甲 #\𠇚)
(_ '序乙 #\㐈)
(_ '序丙 #\𠇮)
(_ '序丁 #\𠆤)

(_ '註疏 #\疎)
